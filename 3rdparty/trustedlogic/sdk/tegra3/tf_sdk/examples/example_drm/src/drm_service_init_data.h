/**
 * Copyright (c) 2004-2009 Trusted Logic S.A.
 * All Rights Reserved.
 *
 * This software is the confidential and proprietary information of
 * Trusted Logic S.A. ("Confidential Information"). You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered
 * into with Trusted Logic S.A.
 *
 * TRUSTED LOGIC S.A. MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE
 * SUITABILITY OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT. TRUSTED LOGIC S.A. SHALL
 * NOT BE LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING,
 * MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
 */
/* This file contains the data for device key that should be installed
 * during the initilization step. This is typically performed during
 * the platform configuration.
 */
 
/* This example depends on the Advanced profile of the Trusted Foundations */

/* ===========================================================================
    Includes
=========================================================================== */
#include "ssdi.h"

static const CK_BYTE sDevKeyModulus[] = {
    0x00, 0x99, 0xf3, 0x86, 0x93, 0x3f, 0xdf, 0x91,
    0x27, 0x85, 0xba, 0x8d, 0xec, 0x41, 0x7a, 0xe2,
    0x3a, 0x6c, 0xb3, 0xed, 0x2c, 0x3b, 0xe0, 0x3f,
    0x1b, 0xf2, 0xc0, 0x6f, 0x21, 0x22, 0xf0, 0xde,
    0x59, 0x8e, 0xd1, 0xdb, 0x73, 0x88, 0x00, 0x6f,
    0x87, 0x10, 0x40, 0xdb, 0xa6, 0x38, 0xb0, 0x00,
    0x02, 0xef, 0x3e, 0xfa, 0x69, 0xe5, 0xcf, 0x97,
    0xcd, 0x61, 0x76, 0x54, 0x87, 0xbb, 0x91, 0x3c,
    0x97, 0xf8, 0x48, 0x1e, 0x5f, 0x1e, 0xae, 0xf0,
    0x03, 0xcd, 0xa1, 0x2a, 0xf3, 0xd8, 0x1f, 0x40,
    0x4c, 0x11, 0xef, 0x24, 0x5e, 0x88, 0x66, 0x67,
    0x04, 0xde, 0x7b, 0xa9, 0x51, 0x7d, 0x3b, 0x07,
    0x5e, 0x00, 0xe4, 0xa5, 0xa0, 0xd3, 0x48, 0xd6,
    0x17, 0x9e, 0x06, 0xb2, 0x29, 0x74, 0xfc, 0xe9,
    0x72, 0xc7, 0xd0, 0x30, 0x55, 0x47, 0xe0, 0xd4,
    0x52, 0x8b, 0xbc, 0xd4, 0x3e, 0xb2, 0xfe, 0xc4,
    0x81
};

static const CK_BYTE sDevKeyPublic_e[] = {
    0x01, 0x00, 0x01
};

static const CK_BYTE sDevKeyPriv_e[] = {
    0x00, 0x90, 0x82, 0xa5, 0xda, 0x66, 0xe4, 0xa7,
    0x4e, 0xa0, 0x1b, 0x03, 0xc9, 0xb7, 0x95, 0x6f,
    0xf2, 0x43, 0xc3, 0x89, 0x68, 0x32, 0x34, 0x47,
    0x49, 0x26, 0xcf, 0x38, 0x01, 0xb4, 0xd8, 0xc0,
    0xfe, 0xf4, 0x2f, 0x4d, 0x7d, 0xdf, 0x35, 0xf9,
    0x7a, 0xa0, 0xe9, 0x20, 0xc5, 0xa1, 0x04, 0xa4,
    0x9e, 0x1c, 0x91, 0xd3, 0x61, 0xc0, 0x54, 0xe3,
    0x3b, 0xe8, 0xb6, 0xb8, 0x96, 0x48, 0x9d, 0x06,
    0x70, 0x73, 0x56, 0x8e, 0x41, 0xcf, 0xf0, 0x74,
    0xd8, 0x23, 0xb8, 0x77, 0x8b, 0x71, 0xd0, 0xca,
    0x41, 0x6f, 0x37, 0x83, 0x3b, 0xce, 0xae, 0xd7,
    0x36, 0x8c, 0x02, 0x2e, 0xfc, 0xde, 0x66, 0xa6,
    0xc6, 0xea, 0xcf, 0x0c, 0x00, 0x1c, 0x79, 0x8d,
    0xb7, 0x53, 0x8a, 0x0d, 0x36, 0x4e, 0x05, 0xf9,
    0xfc, 0x73, 0x38, 0x0a, 0x1a, 0x19, 0xe2, 0x80,
    0xdd, 0xa7, 0x4c, 0xb0, 0x1a, 0x95, 0xce, 0x10,
    0x81
};

static const CK_BYTE sDevKeyPrime_P[] = {
    0x00, 0xd1, 0xf9, 0x69, 0xf8, 0x66, 0xbc, 0xa2,
    0x59, 0xa2, 0x52, 0x88, 0x85, 0x24, 0xa1, 0xf9,
    0x0c, 0x9f, 0x3d, 0xe2, 0x8e, 0x4f, 0xde, 0xad,
    0xf7, 0x00, 0x64, 0x28, 0x71, 0x99, 0x53, 0x0a,
    0x49, 0x3d, 0x27, 0x4c, 0x76, 0x3c, 0xd4, 0x32,
    0xdd, 0x19, 0xbf, 0x1c, 0x9a, 0xe9, 0x01, 0x84,
    0x7e, 0x42, 0x2e, 0xaa, 0x0b, 0x20, 0x32, 0x5c,
    0x89, 0x6b, 0xde, 0x50, 0xd7, 0x87, 0xf0, 0x07,
    0x89
};

static const CK_BYTE sDevKeyPrime_Q[] = {
    0x00, 0xbb, 0xb2, 0x69, 0xc2, 0xd9, 0xcb, 0x48,
    0x71, 0xa1, 0x58, 0xb1, 0x03, 0xa8, 0x07, 0x27,
    0x29, 0xa2, 0xe0, 0x96, 0x37, 0xa5, 0xf0, 0x46,
    0x1e, 0x8a, 0x91, 0xde, 0x71, 0x6c, 0xb9, 0xe6,
    0x89, 0x5a, 0x06, 0x24, 0xe9, 0x44, 0xc7, 0x01,
    0xda, 0xd3, 0x1b, 0x6d, 0xc5, 0xc3, 0x62, 0xb0,
    0x2c, 0xaf, 0xf5, 0x61, 0x18, 0x3a, 0x0e, 0x40,
    0x63, 0x7e, 0x96, 0xd4, 0xef, 0x94, 0x27, 0x9f,
    0x39
};

static const CK_BYTE sDevKey_eP[] = {
    0x7b, 0x13, 0xf6, 0xa0, 0xcb, 0x1f, 0xc1, 0x0e,
    0x47, 0x4e, 0x97, 0x85, 0x6b, 0xbe, 0xa1, 0xac,
    0x5b, 0x5f, 0x3c, 0x00, 0x6d, 0x22, 0xba, 0xd8,
    0x30, 0xdb, 0x84, 0xb5, 0x69, 0xc9, 0x3a, 0x1b,
    0x4a, 0x04, 0x52, 0x16, 0x70, 0x7b, 0x75, 0xc1,
    0x12, 0x49, 0x6a, 0xac, 0x06, 0xee, 0x83, 0xca,
    0x3a, 0x62, 0xfd, 0xfb, 0x7d, 0x88, 0xe7, 0xa3,
    0x09, 0x9e, 0x8b, 0xc6, 0x7a, 0x81, 0x20, 0xf9
};

static const CK_BYTE sDevKey_eQ[] = {
    0x5e, 0x4a, 0x7b, 0x9c, 0xfa, 0x42, 0x88, 0x0b,
    0x25, 0x6d, 0xe3, 0xc7, 0x1d, 0x73, 0x32, 0x76,
    0x55, 0x2f, 0x93, 0xe7, 0x32, 0xc2, 0x68, 0xc7,
    0x50, 0xff, 0x84, 0x8a, 0xe0, 0x7e, 0xe7, 0x54,
    0x5a, 0xd8, 0x39, 0x54, 0xc2, 0x4b, 0x63, 0x20,
    0x25, 0xeb, 0x62, 0x92, 0xf5, 0xdb, 0xae, 0xfb,
    0x54, 0x0d, 0xe6, 0x10, 0x00, 0xa2, 0x46, 0x30,
    0x75, 0x58, 0x9a, 0x72, 0x1c, 0xb0, 0x66, 0xe9
};

static const CK_BYTE sDevKey_qInv[] = {
    0x49, 0x63, 0xcc, 0x45, 0x42, 0xf0, 0x4b, 0xc7,
    0x5e, 0xce, 0x55, 0xae, 0xe2, 0xbf, 0xb7, 0x59,
    0xd2, 0x80, 0x5b, 0xd0, 0x86, 0x8b, 0x43, 0x79,
    0xcc, 0x5f, 0xba, 0x3b, 0xd8, 0x25, 0x81, 0xf0,
    0x18, 0xb7, 0xa4, 0xf9, 0xf1, 0x52, 0x67, 0xcd,
    0xcf, 0xa3, 0xb3, 0x6e, 0xe8, 0xbe, 0x66, 0x91,
    0xc1, 0xd4, 0xb9, 0x0b, 0xa5, 0x51, 0x34, 0xbf,
    0x85, 0x02, 0x31, 0x04, 0x9b, 0x60, 0x03, 0x7a
};

