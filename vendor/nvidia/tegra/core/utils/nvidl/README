The Makefile in this directory is not intended to be a good makefile - it
hijacks the build system for the following reasons:

* The code that is generated by bison/flex is too ugly for the warning levels
    that the build system uses
* The bison/flex libraries are not in the build system's default path (not sure
    where to get them)

--- NvIdl Tool Documentation ---

NvIdl generates code from a simple type/function-declaration language.
Declearations are grouped into "interfaces" and interfaces are grouped into
"packages."

Currently, NvIdl generates stub functions that marshals data and call the
real functions via NvOsIoctl(). 

A simplified grammar follows (comments are in C++ comment syntax):

// All <id>s identifiers in the same style as C identifiers:
// [a-zA-Z_][a-zA-Z0-9_]*
//
// Basic types are: NvU8, NvU16, NvU32, NvU64, NvS8, NvS16, NvS32, NvS32,
// NvS64, NvError, void, NvBool, NvOsSemaphoreHandle, and string
//
// Note that NvOsSemaphores and strings  may only be [in] parameters

// A verbatim mode is supported - any text between /! and !/ is copied directly
// to the output header (in the stub generation mode).

package <id>
{
   <id>+ // one or more interface names
} // declares a package with the given interface names

package <id>; // Set the current package to <id>

import <file>; // read in another language (idl) file

interface <id> {
   <interface declarations>
} // defines an interface with the given name <id> and its contained
  // declarations.

// interface defitions:
define <id> <value> // emits a #define

enum <id> { <enum values> } // same as C enumeration values

struct <id> { <struct fields> }
// baics types or other structs with the format: <type> <id>;
// struct fields may also be arrays: append [<size>] to the <id> for an array.

typedef [struct | enum | basic_type] <id>
// forward declare an enum or struct to <id> or create an alias to a basic type

handle <id>; // declares an opaque handle type

// functions may also be defined - functions may have 'void,' 'NvError,'
// basic types, structs or enums as as return values.  Each function parameter
// must be decorated with it's passing convention; one of 'in', 'inout', or
// out'.
// parameter types may be basic types, handles, structs, or enums.
// parameters may be marked const with the 'const' keyword (before <type>).
// functions may have any basic type, structs, enums, and 'voidptr' as
// parameters.
[NvError|void|basic_type] <id>( [void | pass_type <type> <id>] );

// pass_type may be "in", "inout", or "out" in between brackets '[' and ']'.
// Optionally, there may be a count attribute that generates a pointer to the
// given type.  The count attribute must contain the name of the paramter that
// specifies the length of the data, eg:
    void function( [in, count(Len)] NvU8 Data, NvU32 Len );
