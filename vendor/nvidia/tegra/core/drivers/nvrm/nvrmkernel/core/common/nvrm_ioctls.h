/*
 * Copyright (c) 2007 - 2009 NVIDIA Corporation.  All Rights Reserved.
 *
 * NVIDIA Corporation and its licensors retain all intellectual property and
 * proprietary rights in and to this software and related documentation.  Any
 * use, reproduction, disclosure or distribution of this software and related
 * documentation without an express license agreement from NVIDIA Corporation
 * is strictly prohibited.
 */

#ifndef NVRM_IOCTLS_H
#define NVRM_IOCTLS_H


/* When we trap into the kernel, the majority of the ioctls
 * are handled by the Generic handler, which is automatically
 * generated by the IDL compiler.  
 *
 * For some special functions, we override the generated code
 * and supply custom marshalling/unmarshalling code for performance
 * reasons.  NvRmMemRead/Write are done this way to avoid having
 * to allocate a buffer and do an extra copy.
 *
 * I'm sure as time passes we'll add more to the list here.
 */

typedef enum
{
    NvRmIoctls_Generic = 5000,
    NvRmIoctls_NvRmMemRead,
    NvRmIoctls_NvRmMemWrite,
    NvRmIoctls_NvRmMemReadStrided,
    NvRmIoctls_NvRmMemWriteStrided,
    NvRmIoctls_NvRmMemMapIntoCallerPtr,
    NvRmIoctls_NvRmGetCarveoutInfo,
    NvRmIoctls_NvRmGraphics,    // Note: not used in Linux (see nvidlcmd.h)
    NvRmIoctls_NvRmFbControl,
    NvRmIoctls_NvRmBootDone,    // Called after primary boot-up complete

    // These following ones are used for attaching to an existing NvRm
    // context from another process - this is used for reference counting
    // the kernel context when it is used both from a client process and
    // the nvrm daemon in Linux. This mechanism is roughly equal to duplicating
    // the nvrm driver filehandle across processes.
    NvRmIoctls_NvRmGetClientId,
    NvRmIoctls_NvRmClientAttach,
    NvRmIoctls_NvRmClientDetach,

    // This ioctl is for the nvrm_gpu module
    NvRmIoctls_NvRmGpu,

    NvRmIoctls_ForceWord = 0x7FFFFFFF,
} NvRmKernelIoctls;

#endif
