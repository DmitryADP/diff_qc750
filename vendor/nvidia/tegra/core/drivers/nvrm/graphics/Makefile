#
# Copyright (c) 2008 - 2012 NVIDIA Corporation.  All rights reserved.
#
# NVIDIA Corporation and its licensors retain all intellectual property
# and proprietary rights in and to this software, related documentation
# and any modifications thereto.  Any use, reproduction, disclosure or
# distribution of this software and related documentation without an express
# license agreement from NVIDIA Corporation is strictly prohibited.
#

TOPDIR := ../../..
include $(TEGRA_TOP)/core-private/make/Makefile.defs


ifeq ($(TARGET_OS),qnx)
include Makefile.qnx
else

LINUX_BUILD := 0
ifeq ($(TARGET_OS)-$(TARGET_CPU),linux-armv6)
ifneq ($(TARGET_OS_SUBTYPE),aos)
LINUX_BUILD := 1
endif
endif

ifeq ($(LINUX_BUILD),1)
include Makefile.linux
else

ifeq ($(TARGET_SOC), ap20)
  LCDEFS += -DAVP_CACHE_2X=0
else
  LCDEFS += -DAVP_CACHE_2X=1
endif

ifeq ($(USE_AOS),1)
  LCDEFS += -DNV_USE_AOS=1
endif
ifeq ($(TARGET_BOARD),simulation)
  LCDEFS += -DNV_USE_AOS=1
endif

LCDEFS += -DNVRM_TRANSPORT_IN_KERNEL=$(NVRM_TRANSPORT_IN_KERNEL)

NVRM_CHANNEL_IN_KERNEL := 0

BUILD_STUBS := 0
ifeq ($(TARGET_OS)-$(TARGET_CPU),linux-armv6)
  ifneq ($(TARGET_OS_SUBTYPE),aos)
     BUILD_STUBS := 1
     IDL_FLAGS += -u
  endif
endif

LIB_IMPL :=
LIB_KSTUB :=
LIB_STUB :=
TARGETS_IMPL :=
TARGETS_KSTUB :=
TARGETS_STUB :=

ifeq ($(BUILD_STUBS),1)
  LIB_IMPL := $(OUTPUT_DIRNAME)/libnvrm_graphics_impl$(DLL_SUFFIX)
  LIB_STUB := $(OUTPUT_DIRNAME)/libnvrm_graphics$(DLL_SUFFIX)
  TARGETS_IMPL := $(addprefix $(OUTPUT_DIRNAME)/libnvrm_graphics_impl,$(DLL_SUFFIXES))
  TARGETS_STUB := $(addprefix $(OUTPUT_DIRNAME)/libnvrm_graphics,$(DLL_SUFFIXES))
else
  LIB_IMPL := $(OUTPUT_DIRNAME)/libnvrm_graphics$(DLL_OR_LIB_SUFFIX)
  TARGETS_IMPL := $(addprefix $(OUTPUT_DIRNAME)/libnvrm_graphics,$(DLL_OR_LIB_SUFFIXES))
endif

TARGETS := $(TARGETS_IMPL) $(TARGETS_STUB) $(TARGETS_KSTUB)

default: $(LIB_IMPL) $(LIB_STUB) $(LIB_KSTUB)
	$(NV_INSTALL) -l $(TARGETS) $(INSTALL_TARGET)


LCINCS += $(NVLIB_COMMON_INCLUDES)
LCINCS += -I$(TEGRA_TOP)/core/drivers/nvrm/graphics
LCINCS += -I$(TEGRA_TOP)/core/drivers/nvrm/graphics/common
LCINCS += -I$(TEGRA_TOP)/core/utils/nvos/aos/nvap
LCINCS += $(NVLIB_HWINC_INCLUDES)
LCINCS += -I$(OUTPUT_DIRNAME)
LCINCS += -I$(TEGRA_TOP)/core/drivers/nvrm/nvrmkernel/core/common

LCDEFS += -DNV_IS_AVP=$(IS_AVP)
LCDEFS += -DNV_IS_DYNAMIC=1

# Generated by IDL compiler
GLOBAL_RM_GRAPHICS_DISPATCH_C_FILE := $(OUTDIR)/NvRmGraphics_Dispatch.c
DIRT += NvRmGraphics_Dispatch.c

ifeq ($(BUILD_STUBS),1)
 IDL_FILES :=
 IDL_FILES += $(TEGRA_TOP)/core/include/nvrm_channel.idl
 IDL_FILES += $(TEGRA_TOP)/core/include/nvrm_moduleloader.idl
 ifeq ($(NVRM_TRANSPORT_IN_KERNEL), 0)
  IDL_FILES += $(TEGRA_TOP)/core/include/nvrm_transport.idl
  IDL_FILES += $(TEGRA_TOP)/core/include/nvrm_xpc.idl
 endif
endif

C_IMPL_FILES :=
C_IMPL_FILES += common/nvrm_disasm.c
C_IMPL_FILES += common/nvrm_stream.c
C_IMPL_FILES += common/nvsched.c
C_IMPL_FILES += ap20/ap20sched.c

C_STUB_FILES :=
C_STUB_FILES += common/nvrm_disasm.c
C_STUB_FILES += common/nvrm_stream.c
C_STUB_FILES += common/nvsched.c
C_STUB_FILES += ap20/ap20sched.c
C_STUB_FILES += ap20/ap20rm_stream_parse.c
C_KSTUB_FILES := $(C_STUB_FILES)

# These go only to STUB, not KSTUB
C_STUB_FILES += $(patsubst %.idl,$(OUTDIR)/%_stub.c,$(notdir $(IDL_FILES)))
C_STUB_FILES += common/nvrm_graphics_stub_helper.c

# Channel stuff implemented here
C_IMPL_FILES += common/nvrm_graphics_init.c
C_IMPL_FILES += ap20/ap20rm_channel.c
C_IMPL_FILES += ap20/ap20rm_hostintr.c
C_IMPL_FILES += ap20/ap20rm_hwcontext.c
C_IMPL_FILES += ap20/ap20rm_hwcontext_3d.c
C_IMPL_FILES += ap20/ap20rm_hwcontext_mpe.c

ifeq ($(BUILD_STUBS),1)
  C_IMPL_FILES += $(GLOBAL_RM_GRAPHICS_DISPATCH_C_FILE)
  C_IMPL_FILES += $(patsubst %.idl,$(OUTDIR)/%_dispatch.c,$(notdir $(IDL_FILES)))
endif


OBJS_IMPL := $(patsubst %.c,$(OUTDIR)/%$(OBJ_SUFFIX),$(notdir $(C_IMPL_FILES)))
OBJS_STUB := $(patsubst %.c,$(OUTDIR)/%$(OBJ_SUFFIX),$(notdir $(C_STUB_FILES)))
OBJS_KSTUB := $(patsubst %.c,$(OUTDIR)/%$(OBJ_SUFFIX),$(notdir $(C_KSTUB_FILES)))

# build stub files
ifeq ($(BUILD_STUBS),1)

  ifeq ($(TARGET_OS_WINDOWS),1)
    $(TARGETS_STUB): $(OUTPUT_DIRNAME)/libnvrm_graphics.def
    $(TARGETS_KSTUB): $(OUTPUT_DIRNAME)/libnvrm_graphics_direct.def
    $(TARGETS_IMPL): $(TEGRA_TOP)/core/include/$(OUTPUT_DIRNAME)/libnvrm_graphics_impl.def
  endif

  $(TARGETS_STUB): $(OBJS_STUB)
  $(TARGETS_KSTUB): $(OBJS_KSTUB)
  ifeq ($(NV_DEF_USE_DLL),1)
    $(TARGETS_STUB): $(NVLIB_NVOS)
    $(TARGETS_STUB): $(NVLIB_NVRM_KERNEL)
    $(TARGETS_STUB): $(NVLIB_IDLHELPER)
    $(TARGETS_KSTUB): $(NVLIB_NVOS)
    $(TARGETS_KSTUB): $(NVLIB_NVRM_KERNEL)
    $(TARGETS_KSTUB): $(NVLIB_NVRM_GRAPHICS_IMPL)
  endif
else
  ifeq ($(TARGET_OS_WINDOWS),1)
    $(TARGETS_IMPL): $(OUTPUT_DIRNAME)/libnvrm_graphics.def
  endif
endif

# Python files are as ready as they come
# TODO: Dependency on HW registers?
../../ardrv/ar20/gen_hwreginfo/%.py:

$(OUTPUT_DIRNAME)/ctx3d.c: ../../ardrv/ar20/gen_hwreginfo/gen_hwreginfo.py ../../ardrv/ar20/gen_hwreginfo/cpp.py $(OUTDIR)/dummy.txt
	$(PYTHON) ../../ardrv/ar20/gen_hwreginfo/gen_hwreginfo.py -c >$@

ifneq ($(NV_LIST_RELEASE_PACKAGE),1)

# Rules to generate def file from exports - the NV_LIST_RELEASE_PACKAGE=1
# build will use the generic %.def rule, which is not able to merge two
# *.export files together.
$(OUTDIR)/libnvrm_graphics.def: $(TEGRA_TOP)/core/drivers/nvrm/graphics/libnvrm_graphics.export
$(OUTDIR)/libnvrm_graphics.def: $(TEGRA_TOP)/core/drivers/nvrm/graphics/libnvrm_graphics_stub.export
ifeq ($(NVRM_TRANSPORT_IN_KERNEL), 0)
 $(OUTDIR)/libnvrm_graphics.def: $(TEGRA_TOP)/core/drivers/nvrm/libnvrm_transport.export
endif
$(OUTDIR)/libnvrm_graphics.def: $(OUTDIR)/dummy.txt $(GET_EXPORTS)
	$(PYTHON) $(GET_EXPORTS) $(MAKE_EXPORT_FILE_FLAGS) $(BUILD_FLAVOR) $(TARGET_OS) $(TARGET_CPU) $(filter %.export,$^) >$@
$(OUTDIR)/libnvrm_graphics_direct.def: $(TEGRA_TOP)/core/drivers/nvrm/graphics/libnvrm_graphics.export
$(OUTDIR)/libnvrm_graphics_direct.def: $(TEGRA_TOP)/core/drivers/nvrm/graphics/libnvrm_graphics_stub.export
ifeq ($(NVRM_TRANSPORT_IN_KERNEL), 0)
 $(OUTDIR)/libnvrm_graphics_direct.def: $(TEGRA_TOP)/core/drivers/nvrm/libnvrm_transport.export
endif
$(OUTDIR)/libnvrm_graphics_direct.def: $(OUTDIR)/dummy.txt $(GET_EXPORTS)
	$(PYTHON) $(GET_EXPORTS) $(MAKE_EXPORT_FILE_FLAGS) $(BUILD_FLAVOR) $(TARGET_OS) $(TARGET_CPU) --forward libnvrm_graphics_impl $(filter %.export,$^) >$@
endif

$(TARGETS_IMPL): $(OBJS_IMPL)
ifeq ($(NV_DEF_USE_DLL),1)
  $(TARGETS_IMPL): $(NVLIB_NVOS)
  $(TARGETS_IMPL): $(NVLIB_NVREFTRACK)
  $(TARGETS_IMPL): $(NVLIB_IDLHELPER)

  # FIXME: the NVLIB_RM* macros are broken for android, work around it here.
  ifeq ($(TARGET_OS),linux)
    ifeq ($(BUILD_STUBS),1)
      $(TARGETS_IMPL): $(TEGRA_TOP)/core/include/$(OUTDIR)/libnvrm$(DLL_SUFFIX)
      ifeq ($(NVRM_TRANSPORT_IN_KERNEL), 1)
       $(TARGETS_IMPL): $(TEGRA_TOP)/core/drivers/nvrm/nvrmkernel/$(OUTDIR)/prebuilt_libnvrm$(LIB_SUFFIX)
      endif
    else
      $(TARGETS_IMPL): $(NVLIB_NVRM_IMPL)
    endif
  else
    $(TARGETS_IMPL): $(NVLIB_NVRM_IMPL)
  endif
endif

ifeq ($(BUILD_STUBS),1)
$(GLOBAL_RM_GRAPHICS_DISPATCH_C_FILE): $(TEGRA_TOP)/core/include/nvrm_graphics.idl $(IDL_COMPILER)
	$(IDL_COMPILER) $(IDL_FLAGS) -g -o $@ $<
endif

C_FILES :=
C_FILES += $(C_IMPL_FILES)
C_FILES += $(C_STUB_FILES)
C_FILES += $(C_KSTUB_FILES)

# The RM GPU library is only distributed in binary form
RELEASE_PACKAGE_TARGETS := $(TARGETS_IMPL) $(TARGETS_STUB)
RELEASE_PACKAGE_FILES := $(C_FILES)

include $(TEGRA_TOP)/core-private/make/Makefile.rules

endif
endif
