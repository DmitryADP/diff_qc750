//
// DO NOT EDIT - generated by simspec!
//

#ifndef ___ARI2S_PPI_H_INC_
#define ___ARI2S_PPI_H_INC_
// About Controller:
// The I2S Controller is designed to transport streaming audio-data between the system memory and an audio-codec.
// The controller supports I2S format, Left Justified Mode format, Right Justified Mode format, and DSP mode format, 
// as defined in the Philips inter-IC-sound (I2S) bus specification. 
// The Controller also supports the PCM and telephony (network) mode of data-transfer. Pulse-Code-Modulation (PCM) is a
// standard method used to digitize audio (particularly voice) patterns for transmission over digital communication channels.
// The Telephony (network) mode is used to transmit and receive data to/from an external mono codec in a slot-based scheme of
// time-division multiplexing.  
// The controller has two data interfaces which can be operated in bi-directional manner. Controller can be configured in
// either master or slave.
// Program sequence for basic data transmission: 
//      After the module-initialization (reset and clock programming), program the corresponding
//      bits of the following registers, preferably in the same sequence: 
//
//      I2S_CTRL: Set FIFOs to Tx/Rx-mode as required. set I2S_CTRL[27]=0/1 for FIFO1 to be in Tx/Rx-mode
//                and I2S_CTRL[30]=1/0 for FIFO2 to be in Tx/Rx-mode.
//      I2S_FIFO_SCR: Clear the FIFOs before every new transaction and program the attention-levels
//      I2S_TIMING: Program to match the required sampling-rate based on the clock-source for i2s controller 
//      I2S_CTRL: Program all bits except 29 and 28. Note that bits 27 and 30 are already programmed and 
//                        they are not supposed to be over-written now
//      I2S_CTRL: Enable transaction for the FIFOs as required. If Transmitting data, the FIFO in Tx-mode should have
//                        some valid data before enabling the transaction on this FIFO. Tx-FIFO should never be allowed to 
//                        underrun and Rx-FIFO should never be allowed to overrun
//      I2S_STATUS: Once the transaction is disabled, poll for the FIFO?_BSY to get de-asserted.
// I2S Control Register
// 
// This is I2S control register where we can configure bit formats(I2S, LJM, RJM or DSP),
// bit sizes(16, 20, 24 and 32), FIFO formats, Master/slave selection, LR polarity and error interrupt enables. 

// Register I2S_I2S_CTRL_0  
#define I2S_I2S_CTRL_0                  _MK_ADDR_CONST(0x0)
#define I2S_I2S_CTRL_0_SECURE                   0x0
#define I2S_I2S_CTRL_0_WORD_COUNT                       0x1
#define I2S_I2S_CTRL_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_RESET_MASK                       _MK_MASK_CONST(0x7f000f7f)
#define I2S_I2S_CTRL_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_READ_MASK                        _MK_MASK_CONST(0x7f000f7f)
#define I2S_I2S_CTRL_0_WRITE_MASK                       _MK_MASK_CONST(0x7f000f7f)
// Configure FIFO-2 as Tx-FIFO
#define I2S_I2S_CTRL_0_TX2_ENABLE_SHIFT                 _MK_SHIFT_CONST(30)
#define I2S_I2S_CTRL_0_TX2_ENABLE_FIELD                 (_MK_MASK_CONST(0x1) << I2S_I2S_CTRL_0_TX2_ENABLE_SHIFT)
#define I2S_I2S_CTRL_0_TX2_ENABLE_RANGE                 30:30
#define I2S_I2S_CTRL_0_TX2_ENABLE_WOFFSET                       0x0
#define I2S_I2S_CTRL_0_TX2_ENABLE_DEFAULT                       _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_TX2_ENABLE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define I2S_I2S_CTRL_0_TX2_ENABLE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_TX2_ENABLE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_TX2_ENABLE_DISABLE                       _MK_ENUM_CONST(0)
#define I2S_I2S_CTRL_0_TX2_ENABLE_ENABLE                        _MK_ENUM_CONST(1)

// Enable I2S Transaction on FIFO1 (Tx-enable if FIFO1 is in Tx mode and Rx-enable if FIFO1 is in Rx mode) 
#define I2S_I2S_CTRL_0_FIFO1_TRANSACTION_EN_SHIFT                       _MK_SHIFT_CONST(29)
#define I2S_I2S_CTRL_0_FIFO1_TRANSACTION_EN_FIELD                       (_MK_MASK_CONST(0x1) << I2S_I2S_CTRL_0_FIFO1_TRANSACTION_EN_SHIFT)
#define I2S_I2S_CTRL_0_FIFO1_TRANSACTION_EN_RANGE                       29:29
#define I2S_I2S_CTRL_0_FIFO1_TRANSACTION_EN_WOFFSET                     0x0
#define I2S_I2S_CTRL_0_FIFO1_TRANSACTION_EN_DEFAULT                     _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_FIFO1_TRANSACTION_EN_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define I2S_I2S_CTRL_0_FIFO1_TRANSACTION_EN_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_FIFO1_TRANSACTION_EN_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_FIFO1_TRANSACTION_EN_DISABLE                     _MK_ENUM_CONST(0)
#define I2S_I2S_CTRL_0_FIFO1_TRANSACTION_EN_ENABLE                      _MK_ENUM_CONST(1)

// Enable I2S Transaction on FIFO2 (Tx-enable if FIFO2 is in Tx mode and Rx-enable if FIFO2 is in Rx mode) 
#define I2S_I2S_CTRL_0_FIFO2_TRANSACTION_EN_SHIFT                       _MK_SHIFT_CONST(28)
#define I2S_I2S_CTRL_0_FIFO2_TRANSACTION_EN_FIELD                       (_MK_MASK_CONST(0x1) << I2S_I2S_CTRL_0_FIFO2_TRANSACTION_EN_SHIFT)
#define I2S_I2S_CTRL_0_FIFO2_TRANSACTION_EN_RANGE                       28:28
#define I2S_I2S_CTRL_0_FIFO2_TRANSACTION_EN_WOFFSET                     0x0
#define I2S_I2S_CTRL_0_FIFO2_TRANSACTION_EN_DEFAULT                     _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_FIFO2_TRANSACTION_EN_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define I2S_I2S_CTRL_0_FIFO2_TRANSACTION_EN_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_FIFO2_TRANSACTION_EN_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_FIFO2_TRANSACTION_EN_DISABLE                     _MK_ENUM_CONST(0)
#define I2S_I2S_CTRL_0_FIFO2_TRANSACTION_EN_ENABLE                      _MK_ENUM_CONST(1)

// Configure FIFO-1 as Rx-FIFO
#define I2S_I2S_CTRL_0_RX2_ENABLE_SHIFT                 _MK_SHIFT_CONST(27)
#define I2S_I2S_CTRL_0_RX2_ENABLE_FIELD                 (_MK_MASK_CONST(0x1) << I2S_I2S_CTRL_0_RX2_ENABLE_SHIFT)
#define I2S_I2S_CTRL_0_RX2_ENABLE_RANGE                 27:27
#define I2S_I2S_CTRL_0_RX2_ENABLE_WOFFSET                       0x0
#define I2S_I2S_CTRL_0_RX2_ENABLE_DEFAULT                       _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_RX2_ENABLE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define I2S_I2S_CTRL_0_RX2_ENABLE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_RX2_ENABLE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_RX2_ENABLE_DISABLE                       _MK_ENUM_CONST(0)
#define I2S_I2S_CTRL_0_RX2_ENABLE_ENABLE                        _MK_ENUM_CONST(1)

// Tx1-Rx1 Loop Back Test Enable (Works only in Tx1-Rx1 mode i.e. FIFO1 is in Tx mode, FiFO2 is in Rx mode)
#define I2S_I2S_CTRL_0_LPBK_SHIFT                       _MK_SHIFT_CONST(26)
#define I2S_I2S_CTRL_0_LPBK_FIELD                       (_MK_MASK_CONST(0x1) << I2S_I2S_CTRL_0_LPBK_SHIFT)
#define I2S_I2S_CTRL_0_LPBK_RANGE                       26:26
#define I2S_I2S_CTRL_0_LPBK_WOFFSET                     0x0
#define I2S_I2S_CTRL_0_LPBK_DEFAULT                     _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_LPBK_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define I2S_I2S_CTRL_0_LPBK_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_LPBK_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_LPBK_DISABLE                     _MK_ENUM_CONST(0)
#define I2S_I2S_CTRL_0_LPBK_ENABLE                      _MK_ENUM_CONST(1)

// Controller Master/Slave mode  selection. Master always supplies bit clock and fsync(lrck)
#define I2S_I2S_CTRL_0_M_S_SHIFT                        _MK_SHIFT_CONST(25)
#define I2S_I2S_CTRL_0_M_S_FIELD                        (_MK_MASK_CONST(0x1) << I2S_I2S_CTRL_0_M_S_SHIFT)
#define I2S_I2S_CTRL_0_M_S_RANGE                        25:25
#define I2S_I2S_CTRL_0_M_S_WOFFSET                      0x0
#define I2S_I2S_CTRL_0_M_S_DEFAULT                      _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_M_S_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define I2S_I2S_CTRL_0_M_S_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_M_S_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_M_S_SLAVE                        _MK_ENUM_CONST(0)
#define I2S_I2S_CTRL_0_M_S_MASTER                       _MK_ENUM_CONST(1)

// Left/Right Control Polarity. 0= Left channel when LRCK is low, Right channel  when LRCK is high, 1= vice versa
#define I2S_I2S_CTRL_0_L_R_SHIFT                        _MK_SHIFT_CONST(24)
#define I2S_I2S_CTRL_0_L_R_FIELD                        (_MK_MASK_CONST(0x1) << I2S_I2S_CTRL_0_L_R_SHIFT)
#define I2S_I2S_CTRL_0_L_R_RANGE                        24:24
#define I2S_I2S_CTRL_0_L_R_WOFFSET                      0x0
#define I2S_I2S_CTRL_0_L_R_DEFAULT                      _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_L_R_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define I2S_I2S_CTRL_0_L_R_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_L_R_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_L_R_LRCK_LOW                     _MK_ENUM_CONST(0)
#define I2S_I2S_CTRL_0_L_R_LRCK_HIGH                    _MK_ENUM_CONST(1)

// Controller bit format.
#define I2S_I2S_CTRL_0_BIT_FORMAT_SHIFT                 _MK_SHIFT_CONST(10)
#define I2S_I2S_CTRL_0_BIT_FORMAT_FIELD                 (_MK_MASK_CONST(0x3) << I2S_I2S_CTRL_0_BIT_FORMAT_SHIFT)
#define I2S_I2S_CTRL_0_BIT_FORMAT_RANGE                 11:10
#define I2S_I2S_CTRL_0_BIT_FORMAT_WOFFSET                       0x0
#define I2S_I2S_CTRL_0_BIT_FORMAT_DEFAULT                       _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_BIT_FORMAT_DEFAULT_MASK                  _MK_MASK_CONST(0x3)
#define I2S_I2S_CTRL_0_BIT_FORMAT_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_BIT_FORMAT_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_BIT_FORMAT_I2S                   _MK_ENUM_CONST(0)
#define I2S_I2S_CTRL_0_BIT_FORMAT_RJM                   _MK_ENUM_CONST(1)
#define I2S_I2S_CTRL_0_BIT_FORMAT_LJM                   _MK_ENUM_CONST(2)
#define I2S_I2S_CTRL_0_BIT_FORMAT_DSP                   _MK_ENUM_CONST(3)

// Bit size
#define I2S_I2S_CTRL_0_BIT_SIZE_SHIFT                   _MK_SHIFT_CONST(8)
#define I2S_I2S_CTRL_0_BIT_SIZE_FIELD                   (_MK_MASK_CONST(0x3) << I2S_I2S_CTRL_0_BIT_SIZE_SHIFT)
#define I2S_I2S_CTRL_0_BIT_SIZE_RANGE                   9:8
#define I2S_I2S_CTRL_0_BIT_SIZE_WOFFSET                 0x0
#define I2S_I2S_CTRL_0_BIT_SIZE_DEFAULT                 _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_BIT_SIZE_DEFAULT_MASK                    _MK_MASK_CONST(0x3)
#define I2S_I2S_CTRL_0_BIT_SIZE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_BIT_SIZE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_BIT_SIZE_BIT_SIZE_16                     _MK_ENUM_CONST(0)
#define I2S_I2S_CTRL_0_BIT_SIZE_BIT_SIZE_20                     _MK_ENUM_CONST(1)
#define I2S_I2S_CTRL_0_BIT_SIZE_BIT_SIZE_24                     _MK_ENUM_CONST(2)
#define I2S_I2S_CTRL_0_BIT_SIZE_BIT_SIZE_32                     _MK_ENUM_CONST(3)

// FIFO format 
#define I2S_I2S_CTRL_0_FIFO_FORMAT_SHIFT                        _MK_SHIFT_CONST(4)
#define I2S_I2S_CTRL_0_FIFO_FORMAT_FIELD                        (_MK_MASK_CONST(0x7) << I2S_I2S_CTRL_0_FIFO_FORMAT_SHIFT)
#define I2S_I2S_CTRL_0_FIFO_FORMAT_RANGE                        6:4
#define I2S_I2S_CTRL_0_FIFO_FORMAT_WOFFSET                      0x0
#define I2S_I2S_CTRL_0_FIFO_FORMAT_DEFAULT                      _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_FIFO_FORMAT_DEFAULT_MASK                 _MK_MASK_CONST(0x7)
#define I2S_I2S_CTRL_0_FIFO_FORMAT_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_FIFO_FORMAT_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_FIFO_FORMAT_BIT_SIZE_16_LSB                      _MK_ENUM_CONST(0)
#define I2S_I2S_CTRL_0_FIFO_FORMAT_BIT_SIZE_20_LSB                      _MK_ENUM_CONST(1)
#define I2S_I2S_CTRL_0_FIFO_FORMAT_BIT_SIZE_24_LSB                      _MK_ENUM_CONST(2)
#define I2S_I2S_CTRL_0_FIFO_FORMAT_BIT_SIZE_32                  _MK_ENUM_CONST(3)
#define I2S_I2S_CTRL_0_FIFO_FORMAT_PACKED                       _MK_ENUM_CONST(7)

// Interrupt when FIFO1 error detected (Error is FIFO1-Tx-underrun if FIFO1 is in Tx mode, FIFO1-Rx-overrun if FIFO1 is in Rx mode)
#define I2S_I2S_CTRL_0_IE_FIFO1_ERR_SHIFT                       _MK_SHIFT_CONST(3)
#define I2S_I2S_CTRL_0_IE_FIFO1_ERR_FIELD                       (_MK_MASK_CONST(0x1) << I2S_I2S_CTRL_0_IE_FIFO1_ERR_SHIFT)
#define I2S_I2S_CTRL_0_IE_FIFO1_ERR_RANGE                       3:3
#define I2S_I2S_CTRL_0_IE_FIFO1_ERR_WOFFSET                     0x0
#define I2S_I2S_CTRL_0_IE_FIFO1_ERR_DEFAULT                     _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_IE_FIFO1_ERR_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define I2S_I2S_CTRL_0_IE_FIFO1_ERR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_IE_FIFO1_ERR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_IE_FIFO1_ERR_DISABLE                     _MK_ENUM_CONST(0)
#define I2S_I2S_CTRL_0_IE_FIFO1_ERR_ENABLE                      _MK_ENUM_CONST(1)

// Interrupt when FIFO2 error detected (Error is FIFO2-Tx-underrun if FIFO2 is in Tx mode, FIFO2-Rx-overrun if FIFO2 is in Rx mode) 
#define I2S_I2S_CTRL_0_IE_FIFO2_ERR_SHIFT                       _MK_SHIFT_CONST(2)
#define I2S_I2S_CTRL_0_IE_FIFO2_ERR_FIELD                       (_MK_MASK_CONST(0x1) << I2S_I2S_CTRL_0_IE_FIFO2_ERR_SHIFT)
#define I2S_I2S_CTRL_0_IE_FIFO2_ERR_RANGE                       2:2
#define I2S_I2S_CTRL_0_IE_FIFO2_ERR_WOFFSET                     0x0
#define I2S_I2S_CTRL_0_IE_FIFO2_ERR_DEFAULT                     _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_IE_FIFO2_ERR_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define I2S_I2S_CTRL_0_IE_FIFO2_ERR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_IE_FIFO2_ERR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_IE_FIFO2_ERR_DISABLE                     _MK_ENUM_CONST(0)
#define I2S_I2S_CTRL_0_IE_FIFO2_ERR_ENABLE                      _MK_ENUM_CONST(1)

// Interrupt when FIFO1 triggers (Trigger is a FIFO1-write-request if FIFO1 is in Tx mode, FIFO1-read-request if FIFO1 is in Rx mode)
#define I2S_I2S_CTRL_0_QE_FIFO1_SHIFT                   _MK_SHIFT_CONST(1)
#define I2S_I2S_CTRL_0_QE_FIFO1_FIELD                   (_MK_MASK_CONST(0x1) << I2S_I2S_CTRL_0_QE_FIFO1_SHIFT)
#define I2S_I2S_CTRL_0_QE_FIFO1_RANGE                   1:1
#define I2S_I2S_CTRL_0_QE_FIFO1_WOFFSET                 0x0
#define I2S_I2S_CTRL_0_QE_FIFO1_DEFAULT                 _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_QE_FIFO1_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define I2S_I2S_CTRL_0_QE_FIFO1_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_QE_FIFO1_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_QE_FIFO1_DISABLE                 _MK_ENUM_CONST(0)
#define I2S_I2S_CTRL_0_QE_FIFO1_ENABLE                  _MK_ENUM_CONST(1)

// Interrupt when FIFO2 triggers (Trigger is a FIFO2-write-request if FIFO2 is in Tx mode, FIFO2-read-request if FIFO2 is in Rx mode)
#define I2S_I2S_CTRL_0_QE_FIFO2_SHIFT                   _MK_SHIFT_CONST(0)
#define I2S_I2S_CTRL_0_QE_FIFO2_FIELD                   (_MK_MASK_CONST(0x1) << I2S_I2S_CTRL_0_QE_FIFO2_SHIFT)
#define I2S_I2S_CTRL_0_QE_FIFO2_RANGE                   0:0
#define I2S_I2S_CTRL_0_QE_FIFO2_WOFFSET                 0x0
#define I2S_I2S_CTRL_0_QE_FIFO2_DEFAULT                 _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_QE_FIFO2_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define I2S_I2S_CTRL_0_QE_FIFO2_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_QE_FIFO2_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define I2S_I2S_CTRL_0_QE_FIFO2_DISABLE                 _MK_ENUM_CONST(0)
#define I2S_I2S_CTRL_0_QE_FIFO2_ENABLE                  _MK_ENUM_CONST(1)

// I2S Status Register
// 
// This is status register where we can see the status of controller like controller is ready for
// data transmission or controller is busy with TX/RX data transimission or FIFO got any
// under run/over run errors or FIFO reaches their trigger level. 

// Register I2S_I2S_STATUS_0  
#define I2S_I2S_STATUS_0                        _MK_ADDR_CONST(0x4)
#define I2S_I2S_STATUS_0_SECURE                         0x0
#define I2S_I2S_STATUS_0_WORD_COUNT                     0x1
#define I2S_I2S_STATUS_0_RESET_VAL                      _MK_MASK_CONST(0x2)
#define I2S_I2S_STATUS_0_RESET_MASK                     _MK_MASK_CONST(0xf000000f)
#define I2S_I2S_STATUS_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define I2S_I2S_STATUS_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define I2S_I2S_STATUS_0_READ_MASK                      _MK_MASK_CONST(0xf000000f)
#define I2S_I2S_STATUS_0_WRITE_MASK                     _MK_MASK_CONST(0xf000000f)
// FIFO1-Transaction is synchronized to LR clock
#define I2S_I2S_STATUS_0_FIFO1_RDY_SHIFT                        _MK_SHIFT_CONST(31)
#define I2S_I2S_STATUS_0_FIFO1_RDY_FIELD                        (_MK_MASK_CONST(0x1) << I2S_I2S_STATUS_0_FIFO1_RDY_SHIFT)
#define I2S_I2S_STATUS_0_FIFO1_RDY_RANGE                        31:31
#define I2S_I2S_STATUS_0_FIFO1_RDY_WOFFSET                      0x0
#define I2S_I2S_STATUS_0_FIFO1_RDY_DEFAULT                      _MK_MASK_CONST(0x0)
#define I2S_I2S_STATUS_0_FIFO1_RDY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define I2S_I2S_STATUS_0_FIFO1_RDY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define I2S_I2S_STATUS_0_FIFO1_RDY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define I2S_I2S_STATUS_0_FIFO1_RDY_NOT_READY                    _MK_ENUM_CONST(0)
#define I2S_I2S_STATUS_0_FIFO1_RDY_READY                        _MK_ENUM_CONST(1)

// FIFO2-Transaction is synchronized to LR clock
#define I2S_I2S_STATUS_0_FIFO2_RDY_SHIFT                        _MK_SHIFT_CONST(30)
#define I2S_I2S_STATUS_0_FIFO2_RDY_FIELD                        (_MK_MASK_CONST(0x1) << I2S_I2S_STATUS_0_FIFO2_RDY_SHIFT)
#define I2S_I2S_STATUS_0_FIFO2_RDY_RANGE                        30:30
#define I2S_I2S_STATUS_0_FIFO2_RDY_WOFFSET                      0x0
#define I2S_I2S_STATUS_0_FIFO2_RDY_DEFAULT                      _MK_MASK_CONST(0x0)
#define I2S_I2S_STATUS_0_FIFO2_RDY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define I2S_I2S_STATUS_0_FIFO2_RDY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define I2S_I2S_STATUS_0_FIFO2_RDY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define I2S_I2S_STATUS_0_FIFO2_RDY_NOT_READY                    _MK_ENUM_CONST(0)
#define I2S_I2S_STATUS_0_FIFO2_RDY_READY                        _MK_ENUM_CONST(1)

// FIFO1-shifter is busy transfering data
#define I2S_I2S_STATUS_0_FIFO1_BSY_SHIFT                        _MK_SHIFT_CONST(29)
#define I2S_I2S_STATUS_0_FIFO1_BSY_FIELD                        (_MK_MASK_CONST(0x1) << I2S_I2S_STATUS_0_FIFO1_BSY_SHIFT)
#define I2S_I2S_STATUS_0_FIFO1_BSY_RANGE                        29:29
#define I2S_I2S_STATUS_0_FIFO1_BSY_WOFFSET                      0x0
#define I2S_I2S_STATUS_0_FIFO1_BSY_DEFAULT                      _MK_MASK_CONST(0x0)
#define I2S_I2S_STATUS_0_FIFO1_BSY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define I2S_I2S_STATUS_0_FIFO1_BSY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define I2S_I2S_STATUS_0_FIFO1_BSY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define I2S_I2S_STATUS_0_FIFO1_BSY_NOT_BUSY                     _MK_ENUM_CONST(0)
#define I2S_I2S_STATUS_0_FIFO1_BSY_BUSY                 _MK_ENUM_CONST(1)

// FIFO2-shifter is busy transfering data
#define I2S_I2S_STATUS_0_FIFO2_BSY_SHIFT                        _MK_SHIFT_CONST(28)
#define I2S_I2S_STATUS_0_FIFO2_BSY_FIELD                        (_MK_MASK_CONST(0x1) << I2S_I2S_STATUS_0_FIFO2_BSY_SHIFT)
#define I2S_I2S_STATUS_0_FIFO2_BSY_RANGE                        28:28
#define I2S_I2S_STATUS_0_FIFO2_BSY_WOFFSET                      0x0
#define I2S_I2S_STATUS_0_FIFO2_BSY_DEFAULT                      _MK_MASK_CONST(0x0)
#define I2S_I2S_STATUS_0_FIFO2_BSY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define I2S_I2S_STATUS_0_FIFO2_BSY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define I2S_I2S_STATUS_0_FIFO2_BSY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define I2S_I2S_STATUS_0_FIFO2_BSY_NOT_BUSY                     _MK_ENUM_CONST(0)
#define I2S_I2S_STATUS_0_FIFO2_BSY_BUSY                 _MK_ENUM_CONST(1)

// FIFo1-Error flag
#define I2S_I2S_STATUS_0_IS_FIFO1_ERR_SHIFT                     _MK_SHIFT_CONST(3)
#define I2S_I2S_STATUS_0_IS_FIFO1_ERR_FIELD                     (_MK_MASK_CONST(0x1) << I2S_I2S_STATUS_0_IS_FIFO1_ERR_SHIFT)
#define I2S_I2S_STATUS_0_IS_FIFO1_ERR_RANGE                     3:3
#define I2S_I2S_STATUS_0_IS_FIFO1_ERR_WOFFSET                   0x0
#define I2S_I2S_STATUS_0_IS_FIFO1_ERR_DEFAULT                   _MK_MASK_CONST(0x0)
#define I2S_I2S_STATUS_0_IS_FIFO1_ERR_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define I2S_I2S_STATUS_0_IS_FIFO1_ERR_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define I2S_I2S_STATUS_0_IS_FIFO1_ERR_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define I2S_I2S_STATUS_0_IS_FIFO1_ERR_NO_ERR                    _MK_ENUM_CONST(0)
#define I2S_I2S_STATUS_0_IS_FIFO1_ERR_ERR                       _MK_ENUM_CONST(1)

// FIFO2-Error flag
#define I2S_I2S_STATUS_0_IS_FIFO2_ERR_SHIFT                     _MK_SHIFT_CONST(2)
#define I2S_I2S_STATUS_0_IS_FIFO2_ERR_FIELD                     (_MK_MASK_CONST(0x1) << I2S_I2S_STATUS_0_IS_FIFO2_ERR_SHIFT)
#define I2S_I2S_STATUS_0_IS_FIFO2_ERR_RANGE                     2:2
#define I2S_I2S_STATUS_0_IS_FIFO2_ERR_WOFFSET                   0x0
#define I2S_I2S_STATUS_0_IS_FIFO2_ERR_DEFAULT                   _MK_MASK_CONST(0x0)
#define I2S_I2S_STATUS_0_IS_FIFO2_ERR_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define I2S_I2S_STATUS_0_IS_FIFO2_ERR_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define I2S_I2S_STATUS_0_IS_FIFO2_ERR_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define I2S_I2S_STATUS_0_IS_FIFO2_ERR_NO_ERR                    _MK_ENUM_CONST(0)
#define I2S_I2S_STATUS_0_IS_FIFO2_ERR_ERR                       _MK_ENUM_CONST(1)

// FIFO1-trigger-status
#define I2S_I2S_STATUS_0_QS_FIFO1_SHIFT                 _MK_SHIFT_CONST(1)
#define I2S_I2S_STATUS_0_QS_FIFO1_FIELD                 (_MK_MASK_CONST(0x1) << I2S_I2S_STATUS_0_QS_FIFO1_SHIFT)
#define I2S_I2S_STATUS_0_QS_FIFO1_RANGE                 1:1
#define I2S_I2S_STATUS_0_QS_FIFO1_WOFFSET                       0x0
#define I2S_I2S_STATUS_0_QS_FIFO1_DEFAULT                       _MK_MASK_CONST(0x1)
#define I2S_I2S_STATUS_0_QS_FIFO1_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define I2S_I2S_STATUS_0_QS_FIFO1_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define I2S_I2S_STATUS_0_QS_FIFO1_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define I2S_I2S_STATUS_0_QS_FIFO1_NOT_TRIGGERED                 _MK_ENUM_CONST(0)
#define I2S_I2S_STATUS_0_QS_FIFO1_TRIGGERED                     _MK_ENUM_CONST(1)

// FIFO2-trigger-status
#define I2S_I2S_STATUS_0_QS_FIFO2_SHIFT                 _MK_SHIFT_CONST(0)
#define I2S_I2S_STATUS_0_QS_FIFO2_FIELD                 (_MK_MASK_CONST(0x1) << I2S_I2S_STATUS_0_QS_FIFO2_SHIFT)
#define I2S_I2S_STATUS_0_QS_FIFO2_RANGE                 0:0
#define I2S_I2S_STATUS_0_QS_FIFO2_WOFFSET                       0x0
#define I2S_I2S_STATUS_0_QS_FIFO2_DEFAULT                       _MK_MASK_CONST(0x0)
#define I2S_I2S_STATUS_0_QS_FIFO2_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define I2S_I2S_STATUS_0_QS_FIFO2_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define I2S_I2S_STATUS_0_QS_FIFO2_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define I2S_I2S_STATUS_0_QS_FIFO2_NOT_TRIGGERED                 _MK_ENUM_CONST(0)
#define I2S_I2S_STATUS_0_QS_FIFO2_TRIGGERED                     _MK_ENUM_CONST(1)

//  I2S Timing Register
//  
//  This CHANNEL_BIT_CNT field of this register is used to program the number of bit-clks per channel of LRCK(sampling rate)
//  that the I2S-controller needs to send out in Master mode. This value is interpreted as follows 
//              a) DSP mode:- Number of bit clocks (sclk) within (LEFT +RIGHT) channel width.
//              b) All other modes:- Number of bit clocks (sclk) within each individual channel width (LEFT or RIGHT).
//      The NON_SYM.EN can be used to program the I2S-Controller to output a non-50:50 mark-space ratio on to the I2S bus.
//      When the NON_SYM.EN Bit[12] is enabled, the Controller sends out exactly the programmed number of clock cycles 
//      on the left channel and one bit-clk greater on the right channel.
//      When bit-format is DSP, the channel_bit_cnt should be programmed as the required number of
//      bit_clks in left channel + that in the right channel.
//      Program this register before enabling any of the bits 29/28 of I2S_CTRL register.
//      When NON_SYM.EN is enabled, the channel-bit-count should be programmed with the number of bit-clocks required in left-channel.
//      This will ensure that the non-50:50 mark-space ratio is achieved with R_BCLK = L_BCLK + 1
// 
//  The channel_bit-cnt can be calculated using the relation:
//  Channel_bit_cnt     = (frequency of bit_clk) / (2 * required sampling rate) -1;
//  If this calculation returns a fractional value, the non-symmetry feature of the controller should be used to attain
//  the required sampling rate. 

// Register I2S_I2S_TIMING_0  
#define I2S_I2S_TIMING_0                        _MK_ADDR_CONST(0x8)
#define I2S_I2S_TIMING_0_SECURE                         0x0
#define I2S_I2S_TIMING_0_WORD_COUNT                     0x1
#define I2S_I2S_TIMING_0_RESET_VAL                      _MK_MASK_CONST(0x1f)
#define I2S_I2S_TIMING_0_RESET_MASK                     _MK_MASK_CONST(0x17ff)
#define I2S_I2S_TIMING_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define I2S_I2S_TIMING_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define I2S_I2S_TIMING_0_READ_MASK                      _MK_MASK_CONST(0x17ff)
#define I2S_I2S_TIMING_0_WRITE_MASK                     _MK_MASK_CONST(0x17ff)
// To enable non-symmetry mode.
#define I2S_I2S_TIMING_0_NON_SYM_EN_SHIFT                       _MK_SHIFT_CONST(12)
#define I2S_I2S_TIMING_0_NON_SYM_EN_FIELD                       (_MK_MASK_CONST(0x1) << I2S_I2S_TIMING_0_NON_SYM_EN_SHIFT)
#define I2S_I2S_TIMING_0_NON_SYM_EN_RANGE                       12:12
#define I2S_I2S_TIMING_0_NON_SYM_EN_WOFFSET                     0x0
#define I2S_I2S_TIMING_0_NON_SYM_EN_DEFAULT                     _MK_MASK_CONST(0x0)
#define I2S_I2S_TIMING_0_NON_SYM_EN_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define I2S_I2S_TIMING_0_NON_SYM_EN_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define I2S_I2S_TIMING_0_NON_SYM_EN_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define I2S_I2S_TIMING_0_NON_SYM_EN_DISABLE                     _MK_ENUM_CONST(0)
#define I2S_I2S_TIMING_0_NON_SYM_EN_ENABLE                      _MK_ENUM_CONST(1)

// I2S, LJM, RJM mode: No. of bit clocks in left or right channel. DSP mode: No. of bit clocks in LEFT+RIGHT channel
#define I2S_I2S_TIMING_0_CHANNEL_BIT_CNT_SHIFT                  _MK_SHIFT_CONST(0)
#define I2S_I2S_TIMING_0_CHANNEL_BIT_CNT_FIELD                  (_MK_MASK_CONST(0x7ff) << I2S_I2S_TIMING_0_CHANNEL_BIT_CNT_SHIFT)
#define I2S_I2S_TIMING_0_CHANNEL_BIT_CNT_RANGE                  10:0
#define I2S_I2S_TIMING_0_CHANNEL_BIT_CNT_WOFFSET                        0x0
#define I2S_I2S_TIMING_0_CHANNEL_BIT_CNT_DEFAULT                        _MK_MASK_CONST(0x1f)
#define I2S_I2S_TIMING_0_CHANNEL_BIT_CNT_DEFAULT_MASK                   _MK_MASK_CONST(0x7ff)
#define I2S_I2S_TIMING_0_CHANNEL_BIT_CNT_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define I2S_I2S_TIMING_0_CHANNEL_BIT_CNT_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// I2S Controller FIFO Control Register
// 
// This is FIFO control/status register where we can program required attention level for FIFO1 and FIFO2. 
// And also we can figure out number of empty/full slots in FIFOs. 
// We can clear the FIFOs by writing 1 in bits [8] and bit [12] for FIFO1 and FIFO2 respectively.

// Register I2S_I2S_FIFO_SCR_0  
#define I2S_I2S_FIFO_SCR_0                      _MK_ADDR_CONST(0xc)
#define I2S_I2S_FIFO_SCR_0_SECURE                       0x0
#define I2S_I2S_FIFO_SCR_0_WORD_COUNT                   0x1
#define I2S_I2S_FIFO_SCR_0_RESET_VAL                    _MK_MASK_CONST(0x200000)
#define I2S_I2S_FIFO_SCR_0_RESET_MASK                   _MK_MASK_CONST(0x3f3f1133)
#define I2S_I2S_FIFO_SCR_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define I2S_I2S_FIFO_SCR_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define I2S_I2S_FIFO_SCR_0_READ_MASK                    _MK_MASK_CONST(0x3f3f1133)
#define I2S_I2S_FIFO_SCR_0_WRITE_MASK                   _MK_MASK_CONST(0x1133)
// (Read Only) These bits indicate the number of  full/empty slots in FIFO2 (full-count if bit-30=0; otherwise, empty-count)
#define I2S_I2S_FIFO_SCR_0_FIFO2_FULL_EMPTY_COUNT_SHIFT                 _MK_SHIFT_CONST(24)
#define I2S_I2S_FIFO_SCR_0_FIFO2_FULL_EMPTY_COUNT_FIELD                 (_MK_MASK_CONST(0x3f) << I2S_I2S_FIFO_SCR_0_FIFO2_FULL_EMPTY_COUNT_SHIFT)
#define I2S_I2S_FIFO_SCR_0_FIFO2_FULL_EMPTY_COUNT_RANGE                 29:24
#define I2S_I2S_FIFO_SCR_0_FIFO2_FULL_EMPTY_COUNT_WOFFSET                       0x0
#define I2S_I2S_FIFO_SCR_0_FIFO2_FULL_EMPTY_COUNT_DEFAULT                       _MK_MASK_CONST(0x0)
#define I2S_I2S_FIFO_SCR_0_FIFO2_FULL_EMPTY_COUNT_DEFAULT_MASK                  _MK_MASK_CONST(0x3f)
#define I2S_I2S_FIFO_SCR_0_FIFO2_FULL_EMPTY_COUNT_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define I2S_I2S_FIFO_SCR_0_FIFO2_FULL_EMPTY_COUNT_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// (Read Only) These bits indicate the number of  full/empty slots in FIFO1. (empty-count if bit-27=0; otherwise, full-count) 
#define I2S_I2S_FIFO_SCR_0_FIFO1_FULL_EMPTY_COUNT_SHIFT                 _MK_SHIFT_CONST(16)
#define I2S_I2S_FIFO_SCR_0_FIFO1_FULL_EMPTY_COUNT_FIELD                 (_MK_MASK_CONST(0x3f) << I2S_I2S_FIFO_SCR_0_FIFO1_FULL_EMPTY_COUNT_SHIFT)
#define I2S_I2S_FIFO_SCR_0_FIFO1_FULL_EMPTY_COUNT_RANGE                 21:16
#define I2S_I2S_FIFO_SCR_0_FIFO1_FULL_EMPTY_COUNT_WOFFSET                       0x0
#define I2S_I2S_FIFO_SCR_0_FIFO1_FULL_EMPTY_COUNT_DEFAULT                       _MK_MASK_CONST(0x20)
#define I2S_I2S_FIFO_SCR_0_FIFO1_FULL_EMPTY_COUNT_DEFAULT_MASK                  _MK_MASK_CONST(0x3f)
#define I2S_I2S_FIFO_SCR_0_FIFO1_FULL_EMPTY_COUNT_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define I2S_I2S_FIFO_SCR_0_FIFO1_FULL_EMPTY_COUNT_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//  Clear FIFO2. This bit gets  cleared by hardware.
#define I2S_I2S_FIFO_SCR_0_FIFO2_CLR_SHIFT                      _MK_SHIFT_CONST(12)
#define I2S_I2S_FIFO_SCR_0_FIFO2_CLR_FIELD                      (_MK_MASK_CONST(0x1) << I2S_I2S_FIFO_SCR_0_FIFO2_CLR_SHIFT)
#define I2S_I2S_FIFO_SCR_0_FIFO2_CLR_RANGE                      12:12
#define I2S_I2S_FIFO_SCR_0_FIFO2_CLR_WOFFSET                    0x0
#define I2S_I2S_FIFO_SCR_0_FIFO2_CLR_DEFAULT                    _MK_MASK_CONST(0x0)
#define I2S_I2S_FIFO_SCR_0_FIFO2_CLR_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define I2S_I2S_FIFO_SCR_0_FIFO2_CLR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define I2S_I2S_FIFO_SCR_0_FIFO2_CLR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define I2S_I2S_FIFO_SCR_0_FIFO2_CLR_NO_ACTION                  _MK_ENUM_CONST(0)
#define I2S_I2S_FIFO_SCR_0_FIFO2_CLR_CLEAR                      _MK_ENUM_CONST(1)

//  Clear FIFO1. This bit gets  cleared by hardware.
#define I2S_I2S_FIFO_SCR_0_FIFO1_CLR_SHIFT                      _MK_SHIFT_CONST(8)
#define I2S_I2S_FIFO_SCR_0_FIFO1_CLR_FIELD                      (_MK_MASK_CONST(0x1) << I2S_I2S_FIFO_SCR_0_FIFO1_CLR_SHIFT)
#define I2S_I2S_FIFO_SCR_0_FIFO1_CLR_RANGE                      8:8
#define I2S_I2S_FIFO_SCR_0_FIFO1_CLR_WOFFSET                    0x0
#define I2S_I2S_FIFO_SCR_0_FIFO1_CLR_DEFAULT                    _MK_MASK_CONST(0x0)
#define I2S_I2S_FIFO_SCR_0_FIFO1_CLR_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define I2S_I2S_FIFO_SCR_0_FIFO1_CLR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define I2S_I2S_FIFO_SCR_0_FIFO1_CLR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define I2S_I2S_FIFO_SCR_0_FIFO1_CLR_NO_ACTION                  _MK_ENUM_CONST(0)
#define I2S_I2S_FIFO_SCR_0_FIFO1_CLR_CLEAR                      _MK_ENUM_CONST(1)

// FIFO2 attention level. At this attention level, FIFO will generate request for read/write
#define I2S_I2S_FIFO_SCR_0_FIFO2_ATN_LVL_SHIFT                  _MK_SHIFT_CONST(4)
#define I2S_I2S_FIFO_SCR_0_FIFO2_ATN_LVL_FIELD                  (_MK_MASK_CONST(0x3) << I2S_I2S_FIFO_SCR_0_FIFO2_ATN_LVL_SHIFT)
#define I2S_I2S_FIFO_SCR_0_FIFO2_ATN_LVL_RANGE                  5:4
#define I2S_I2S_FIFO_SCR_0_FIFO2_ATN_LVL_WOFFSET                        0x0
#define I2S_I2S_FIFO_SCR_0_FIFO2_ATN_LVL_DEFAULT                        _MK_MASK_CONST(0x0)
#define I2S_I2S_FIFO_SCR_0_FIFO2_ATN_LVL_DEFAULT_MASK                   _MK_MASK_CONST(0x3)
#define I2S_I2S_FIFO_SCR_0_FIFO2_ATN_LVL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define I2S_I2S_FIFO_SCR_0_FIFO2_ATN_LVL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define I2S_I2S_FIFO_SCR_0_FIFO2_ATN_LVL_ONE_SLOT                       _MK_ENUM_CONST(0)
#define I2S_I2S_FIFO_SCR_0_FIFO2_ATN_LVL_FOUR_SLOTS                     _MK_ENUM_CONST(1)
#define I2S_I2S_FIFO_SCR_0_FIFO2_ATN_LVL_EIGHT_SLOTS                    _MK_ENUM_CONST(2)
#define I2S_I2S_FIFO_SCR_0_FIFO2_ATN_LVL_TWELVE_SLOTS                   _MK_ENUM_CONST(3)

// FIFO1 attention level. At this attention level, FIFO will generate request for read/write
#define I2S_I2S_FIFO_SCR_0_FIFO1_ATN_LVL_SHIFT                  _MK_SHIFT_CONST(0)
#define I2S_I2S_FIFO_SCR_0_FIFO1_ATN_LVL_FIELD                  (_MK_MASK_CONST(0x3) << I2S_I2S_FIFO_SCR_0_FIFO1_ATN_LVL_SHIFT)
#define I2S_I2S_FIFO_SCR_0_FIFO1_ATN_LVL_RANGE                  1:0
#define I2S_I2S_FIFO_SCR_0_FIFO1_ATN_LVL_WOFFSET                        0x0
#define I2S_I2S_FIFO_SCR_0_FIFO1_ATN_LVL_DEFAULT                        _MK_MASK_CONST(0x0)
#define I2S_I2S_FIFO_SCR_0_FIFO1_ATN_LVL_DEFAULT_MASK                   _MK_MASK_CONST(0x3)
#define I2S_I2S_FIFO_SCR_0_FIFO1_ATN_LVL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define I2S_I2S_FIFO_SCR_0_FIFO1_ATN_LVL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define I2S_I2S_FIFO_SCR_0_FIFO1_ATN_LVL_ONE_SLOT                       _MK_ENUM_CONST(0)
#define I2S_I2S_FIFO_SCR_0_FIFO1_ATN_LVL_FOUR_SLOTS                     _MK_ENUM_CONST(1)
#define I2S_I2S_FIFO_SCR_0_FIFO1_ATN_LVL_EIGHT_SLOTS                    _MK_ENUM_CONST(2)
#define I2S_I2S_FIFO_SCR_0_FIFO1_ATN_LVL_TWELVE_SLOTS                   _MK_ENUM_CONST(3)

// I2S Controller PCM Control Register
// 
// This register is to program for controller to be operated in PCM mode. Following are the guidelines. 
//      a) For PCM-mode to work, I2S_CTRL[11:10] should be programmed in DSP-mode.
//      b) Program bits-4 and 0 after programming all other bit-fields in this register.
//      c) Program the Transaction-enable bits (I2S_CTRL[29:28] after setting TRM/RVC modes in this register(bits 0 and 4).
//      d) Dont over-write this register when the controller has any of the bits I2S_CTRL[31:28] asserted.
//  e) Program mask bits field to get required bit size( other than 16, 20, 24 and 32). For example, to get 13 bit size, BIT_SIZE
//     field of I2S_CTRL[9:8] should be 0 (16 bit) and mask bits should be 3. 

// Register I2S_I2S_PCM_CTRL_0  
#define I2S_I2S_PCM_CTRL_0                      _MK_ADDR_CONST(0x10)
#define I2S_I2S_PCM_CTRL_0_SECURE                       0x0
#define I2S_I2S_PCM_CTRL_0_WORD_COUNT                   0x1
#define I2S_I2S_PCM_CTRL_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define I2S_I2S_PCM_CTRL_0_RESET_MASK                   _MK_MASK_CONST(0x7ff)
#define I2S_I2S_PCM_CTRL_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define I2S_I2S_PCM_CTRL_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define I2S_I2S_PCM_CTRL_0_READ_MASK                    _MK_MASK_CONST(0x7ff)
#define I2S_I2S_PCM_CTRL_0_WRITE_MASK                   _MK_MASK_CONST(0x7ff)
//Highz control
#define I2S_I2S_PCM_CTRL_0_PCM_TRM_EDGE_CNTRL_SHIFT                     _MK_SHIFT_CONST(9)
#define I2S_I2S_PCM_CTRL_0_PCM_TRM_EDGE_CNTRL_FIELD                     (_MK_MASK_CONST(0x3) << I2S_I2S_PCM_CTRL_0_PCM_TRM_EDGE_CNTRL_SHIFT)
#define I2S_I2S_PCM_CTRL_0_PCM_TRM_EDGE_CNTRL_RANGE                     10:9
#define I2S_I2S_PCM_CTRL_0_PCM_TRM_EDGE_CNTRL_WOFFSET                   0x0
#define I2S_I2S_PCM_CTRL_0_PCM_TRM_EDGE_CNTRL_DEFAULT                   _MK_MASK_CONST(0x0)
#define I2S_I2S_PCM_CTRL_0_PCM_TRM_EDGE_CNTRL_DEFAULT_MASK                      _MK_MASK_CONST(0x3)
#define I2S_I2S_PCM_CTRL_0_PCM_TRM_EDGE_CNTRL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define I2S_I2S_PCM_CTRL_0_PCM_TRM_EDGE_CNTRL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define I2S_I2S_PCM_CTRL_0_PCM_TRM_EDGE_CNTRL_POS_EDGE_NO_HIGHZ                 _MK_ENUM_CONST(0)
#define I2S_I2S_PCM_CTRL_0_PCM_TRM_EDGE_CNTRL_POS_EDGE_HIGHZ                    _MK_ENUM_CONST(1)
#define I2S_I2S_PCM_CTRL_0_PCM_TRM_EDGE_CNTRL_NEG_EDGE_NO_HIGHZ                 _MK_ENUM_CONST(2)
#define I2S_I2S_PCM_CTRL_0_PCM_TRM_EDGE_CNTRL_NEG_EDGE_HIGHZ                    _MK_ENUM_CONST(3)

// Transmission mask bits
#define I2S_I2S_PCM_CTRL_0_TRM_MASK_BITS_SHIFT                  _MK_SHIFT_CONST(6)
#define I2S_I2S_PCM_CTRL_0_TRM_MASK_BITS_FIELD                  (_MK_MASK_CONST(0x7) << I2S_I2S_PCM_CTRL_0_TRM_MASK_BITS_SHIFT)
#define I2S_I2S_PCM_CTRL_0_TRM_MASK_BITS_RANGE                  8:6
#define I2S_I2S_PCM_CTRL_0_TRM_MASK_BITS_WOFFSET                        0x0
#define I2S_I2S_PCM_CTRL_0_TRM_MASK_BITS_DEFAULT                        _MK_MASK_CONST(0x0)
#define I2S_I2S_PCM_CTRL_0_TRM_MASK_BITS_DEFAULT_MASK                   _MK_MASK_CONST(0x7)
#define I2S_I2S_PCM_CTRL_0_TRM_MASK_BITS_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define I2S_I2S_PCM_CTRL_0_TRM_MASK_BITS_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define I2S_I2S_PCM_CTRL_0_TRM_MASK_BITS_ZERO                   _MK_ENUM_CONST(0)
#define I2S_I2S_PCM_CTRL_0_TRM_MASK_BITS_ONE                    _MK_ENUM_CONST(1)
#define I2S_I2S_PCM_CTRL_0_TRM_MASK_BITS_TWO                    _MK_ENUM_CONST(2)
#define I2S_I2S_PCM_CTRL_0_TRM_MASK_BITS_THREE                  _MK_ENUM_CONST(3)
#define I2S_I2S_PCM_CTRL_0_TRM_MASK_BITS_FOUR                   _MK_ENUM_CONST(4)
#define I2S_I2S_PCM_CTRL_0_TRM_MASK_BITS_FIVE                   _MK_ENUM_CONST(5)
#define I2S_I2S_PCM_CTRL_0_TRM_MASK_BITS_SIX                    _MK_ENUM_CONST(6)
#define I2S_I2S_PCM_CTRL_0_TRM_MASK_BITS_SEVEN                  _MK_ENUM_CONST(7)

// Short fsync(sync will be one-bit-clock wide). Long fsync( sync will be two-bit-clocks wide) 
#define I2S_I2S_PCM_CTRL_0_FSYNC_PCM_CTRL_SHIFT                 _MK_SHIFT_CONST(5)
#define I2S_I2S_PCM_CTRL_0_FSYNC_PCM_CTRL_FIELD                 (_MK_MASK_CONST(0x1) << I2S_I2S_PCM_CTRL_0_FSYNC_PCM_CTRL_SHIFT)
#define I2S_I2S_PCM_CTRL_0_FSYNC_PCM_CTRL_RANGE                 5:5
#define I2S_I2S_PCM_CTRL_0_FSYNC_PCM_CTRL_WOFFSET                       0x0
#define I2S_I2S_PCM_CTRL_0_FSYNC_PCM_CTRL_DEFAULT                       _MK_MASK_CONST(0x0)
#define I2S_I2S_PCM_CTRL_0_FSYNC_PCM_CTRL_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define I2S_I2S_PCM_CTRL_0_FSYNC_PCM_CTRL_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define I2S_I2S_PCM_CTRL_0_FSYNC_PCM_CTRL_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define I2S_I2S_PCM_CTRL_0_FSYNC_PCM_CTRL_SHORT                 _MK_ENUM_CONST(0)
#define I2S_I2S_PCM_CTRL_0_FSYNC_PCM_CTRL_LONG                  _MK_ENUM_CONST(1)

// Bit format should be in DSP-format 
#define I2S_I2S_PCM_CTRL_0_PCM_TRM_MODE_SHIFT                   _MK_SHIFT_CONST(4)
#define I2S_I2S_PCM_CTRL_0_PCM_TRM_MODE_FIELD                   (_MK_MASK_CONST(0x1) << I2S_I2S_PCM_CTRL_0_PCM_TRM_MODE_SHIFT)
#define I2S_I2S_PCM_CTRL_0_PCM_TRM_MODE_RANGE                   4:4
#define I2S_I2S_PCM_CTRL_0_PCM_TRM_MODE_WOFFSET                 0x0
#define I2S_I2S_PCM_CTRL_0_PCM_TRM_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define I2S_I2S_PCM_CTRL_0_PCM_TRM_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define I2S_I2S_PCM_CTRL_0_PCM_TRM_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define I2S_I2S_PCM_CTRL_0_PCM_TRM_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define I2S_I2S_PCM_CTRL_0_PCM_TRM_MODE_DISABLE                 _MK_ENUM_CONST(0)
#define I2S_I2S_PCM_CTRL_0_PCM_TRM_MODE_ENABLE                  _MK_ENUM_CONST(1)

// Receive mask bits 
#define I2S_I2S_PCM_CTRL_0_RCV_MASK_BITS_SHIFT                  _MK_SHIFT_CONST(1)
#define I2S_I2S_PCM_CTRL_0_RCV_MASK_BITS_FIELD                  (_MK_MASK_CONST(0x7) << I2S_I2S_PCM_CTRL_0_RCV_MASK_BITS_SHIFT)
#define I2S_I2S_PCM_CTRL_0_RCV_MASK_BITS_RANGE                  3:1
#define I2S_I2S_PCM_CTRL_0_RCV_MASK_BITS_WOFFSET                        0x0
#define I2S_I2S_PCM_CTRL_0_RCV_MASK_BITS_DEFAULT                        _MK_MASK_CONST(0x0)
#define I2S_I2S_PCM_CTRL_0_RCV_MASK_BITS_DEFAULT_MASK                   _MK_MASK_CONST(0x7)
#define I2S_I2S_PCM_CTRL_0_RCV_MASK_BITS_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define I2S_I2S_PCM_CTRL_0_RCV_MASK_BITS_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define I2S_I2S_PCM_CTRL_0_RCV_MASK_BITS_ZERO                   _MK_ENUM_CONST(0)
#define I2S_I2S_PCM_CTRL_0_RCV_MASK_BITS_ONE                    _MK_ENUM_CONST(1)
#define I2S_I2S_PCM_CTRL_0_RCV_MASK_BITS_TWO                    _MK_ENUM_CONST(2)
#define I2S_I2S_PCM_CTRL_0_RCV_MASK_BITS_THREE                  _MK_ENUM_CONST(3)
#define I2S_I2S_PCM_CTRL_0_RCV_MASK_BITS_FOUR                   _MK_ENUM_CONST(4)
#define I2S_I2S_PCM_CTRL_0_RCV_MASK_BITS_FIVE                   _MK_ENUM_CONST(5)
#define I2S_I2S_PCM_CTRL_0_RCV_MASK_BITS_SIX                    _MK_ENUM_CONST(6)
#define I2S_I2S_PCM_CTRL_0_RCV_MASK_BITS_SEVEN                  _MK_ENUM_CONST(7)

// Bit format should be in DSP-format 
#define I2S_I2S_PCM_CTRL_0_PCM_RCV_MODE_SHIFT                   _MK_SHIFT_CONST(0)
#define I2S_I2S_PCM_CTRL_0_PCM_RCV_MODE_FIELD                   (_MK_MASK_CONST(0x1) << I2S_I2S_PCM_CTRL_0_PCM_RCV_MODE_SHIFT)
#define I2S_I2S_PCM_CTRL_0_PCM_RCV_MODE_RANGE                   0:0
#define I2S_I2S_PCM_CTRL_0_PCM_RCV_MODE_WOFFSET                 0x0
#define I2S_I2S_PCM_CTRL_0_PCM_RCV_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define I2S_I2S_PCM_CTRL_0_PCM_RCV_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define I2S_I2S_PCM_CTRL_0_PCM_RCV_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define I2S_I2S_PCM_CTRL_0_PCM_RCV_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define I2S_I2S_PCM_CTRL_0_PCM_RCV_MODE_DISABLE                 _MK_ENUM_CONST(0)
#define I2S_I2S_PCM_CTRL_0_PCM_RCV_MODE_ENABLE                  _MK_ENUM_CONST(1)

// I2S Controller NW Control Register
// 
// This register is to program for controller to be operated in Network mode. Following are the guidelines. 
//      a) For NW-mode to work, I2S_CTRL[11:10] should be programmed in DSP-mode.
//      b) Program bits-3 and 0 after programming all other bit-fields in this register.
//      c) Program the Transaction-enable bits (I2S_CTRL[29:28] after setting TRM/RVC modes in this register(bits 0 and 3).
//      d) Dont over-write this register when the controller has any of the bits I2S_CTRL[31:28] asserted.

// Register I2S_I2S_NW_CTRL_0  
#define I2S_I2S_NW_CTRL_0                       _MK_ADDR_CONST(0x14)
#define I2S_I2S_NW_CTRL_0_SECURE                        0x0
#define I2S_I2S_NW_CTRL_0_WORD_COUNT                    0x1
#define I2S_I2S_NW_CTRL_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define I2S_I2S_NW_CTRL_0_RESET_MASK                    _MK_MASK_CONST(0x3f)
#define I2S_I2S_NW_CTRL_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define I2S_I2S_NW_CTRL_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define I2S_I2S_NW_CTRL_0_READ_MASK                     _MK_MASK_CONST(0x3f)
#define I2S_I2S_NW_CTRL_0_WRITE_MASK                    _MK_MASK_CONST(0x3f)
// Transmission slot selection
#define I2S_I2S_NW_CTRL_0_TRM_TLPHY_SLOT_SEL_SHIFT                      _MK_SHIFT_CONST(4)
#define I2S_I2S_NW_CTRL_0_TRM_TLPHY_SLOT_SEL_FIELD                      (_MK_MASK_CONST(0x3) << I2S_I2S_NW_CTRL_0_TRM_TLPHY_SLOT_SEL_SHIFT)
#define I2S_I2S_NW_CTRL_0_TRM_TLPHY_SLOT_SEL_RANGE                      5:4
#define I2S_I2S_NW_CTRL_0_TRM_TLPHY_SLOT_SEL_WOFFSET                    0x0
#define I2S_I2S_NW_CTRL_0_TRM_TLPHY_SLOT_SEL_DEFAULT                    _MK_MASK_CONST(0x0)
#define I2S_I2S_NW_CTRL_0_TRM_TLPHY_SLOT_SEL_DEFAULT_MASK                       _MK_MASK_CONST(0x3)
#define I2S_I2S_NW_CTRL_0_TRM_TLPHY_SLOT_SEL_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define I2S_I2S_NW_CTRL_0_TRM_TLPHY_SLOT_SEL_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define I2S_I2S_NW_CTRL_0_TRM_TLPHY_SLOT_SEL_SLOT1                      _MK_ENUM_CONST(0)
#define I2S_I2S_NW_CTRL_0_TRM_TLPHY_SLOT_SEL_SLOT2                      _MK_ENUM_CONST(1)
#define I2S_I2S_NW_CTRL_0_TRM_TLPHY_SLOT_SEL_SLOT3                      _MK_ENUM_CONST(2)
#define I2S_I2S_NW_CTRL_0_TRM_TLPHY_SLOT_SEL_SLOT4                      _MK_ENUM_CONST(3)

//Bit format should be in DSP-format
#define I2S_I2S_NW_CTRL_0_TRM_TLPHY_MODE_SHIFT                  _MK_SHIFT_CONST(3)
#define I2S_I2S_NW_CTRL_0_TRM_TLPHY_MODE_FIELD                  (_MK_MASK_CONST(0x1) << I2S_I2S_NW_CTRL_0_TRM_TLPHY_MODE_SHIFT)
#define I2S_I2S_NW_CTRL_0_TRM_TLPHY_MODE_RANGE                  3:3
#define I2S_I2S_NW_CTRL_0_TRM_TLPHY_MODE_WOFFSET                        0x0
#define I2S_I2S_NW_CTRL_0_TRM_TLPHY_MODE_DEFAULT                        _MK_MASK_CONST(0x0)
#define I2S_I2S_NW_CTRL_0_TRM_TLPHY_MODE_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define I2S_I2S_NW_CTRL_0_TRM_TLPHY_MODE_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define I2S_I2S_NW_CTRL_0_TRM_TLPHY_MODE_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define I2S_I2S_NW_CTRL_0_TRM_TLPHY_MODE_DISABLE                        _MK_ENUM_CONST(0)
#define I2S_I2S_NW_CTRL_0_TRM_TLPHY_MODE_ENABLE                 _MK_ENUM_CONST(1)

//Receive slot selection 
#define I2S_I2S_NW_CTRL_0_RCV_TLPHY_SLOT_SEL_SHIFT                      _MK_SHIFT_CONST(1)
#define I2S_I2S_NW_CTRL_0_RCV_TLPHY_SLOT_SEL_FIELD                      (_MK_MASK_CONST(0x3) << I2S_I2S_NW_CTRL_0_RCV_TLPHY_SLOT_SEL_SHIFT)
#define I2S_I2S_NW_CTRL_0_RCV_TLPHY_SLOT_SEL_RANGE                      2:1
#define I2S_I2S_NW_CTRL_0_RCV_TLPHY_SLOT_SEL_WOFFSET                    0x0
#define I2S_I2S_NW_CTRL_0_RCV_TLPHY_SLOT_SEL_DEFAULT                    _MK_MASK_CONST(0x0)
#define I2S_I2S_NW_CTRL_0_RCV_TLPHY_SLOT_SEL_DEFAULT_MASK                       _MK_MASK_CONST(0x3)
#define I2S_I2S_NW_CTRL_0_RCV_TLPHY_SLOT_SEL_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define I2S_I2S_NW_CTRL_0_RCV_TLPHY_SLOT_SEL_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define I2S_I2S_NW_CTRL_0_RCV_TLPHY_SLOT_SEL_SLOT1                      _MK_ENUM_CONST(0)
#define I2S_I2S_NW_CTRL_0_RCV_TLPHY_SLOT_SEL_SLOT2                      _MK_ENUM_CONST(1)
#define I2S_I2S_NW_CTRL_0_RCV_TLPHY_SLOT_SEL_SLOT3                      _MK_ENUM_CONST(2)
#define I2S_I2S_NW_CTRL_0_RCV_TLPHY_SLOT_SEL_SLOT4                      _MK_ENUM_CONST(3)

//Bit format should be in DSP-format
#define I2S_I2S_NW_CTRL_0_RCV_TLPHY_MODE_SHIFT                  _MK_SHIFT_CONST(0)
#define I2S_I2S_NW_CTRL_0_RCV_TLPHY_MODE_FIELD                  (_MK_MASK_CONST(0x1) << I2S_I2S_NW_CTRL_0_RCV_TLPHY_MODE_SHIFT)
#define I2S_I2S_NW_CTRL_0_RCV_TLPHY_MODE_RANGE                  0:0
#define I2S_I2S_NW_CTRL_0_RCV_TLPHY_MODE_WOFFSET                        0x0
#define I2S_I2S_NW_CTRL_0_RCV_TLPHY_MODE_DEFAULT                        _MK_MASK_CONST(0x0)
#define I2S_I2S_NW_CTRL_0_RCV_TLPHY_MODE_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define I2S_I2S_NW_CTRL_0_RCV_TLPHY_MODE_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define I2S_I2S_NW_CTRL_0_RCV_TLPHY_MODE_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define I2S_I2S_NW_CTRL_0_RCV_TLPHY_MODE_DISABLE                        _MK_ENUM_CONST(0)
#define I2S_I2S_NW_CTRL_0_RCV_TLPHY_MODE_ENABLE                 _MK_ENUM_CONST(1)


// Reserved address 24 [0x18] 

// Reserved address 28 [0x1c] 

// Register I2S_I2S_TDM_CTRL_0  
#define I2S_I2S_TDM_CTRL_0                      _MK_ADDR_CONST(0x20)
#define I2S_I2S_TDM_CTRL_0_SECURE                       0x0
#define I2S_I2S_TDM_CTRL_0_WORD_COUNT                   0x1
#define I2S_I2S_TDM_CTRL_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_CTRL_0_RESET_MASK                   _MK_MASK_CONST(0x835df3ff)
#define I2S_I2S_TDM_CTRL_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_CTRL_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_CTRL_0_READ_MASK                    _MK_MASK_CONST(0x835df3ff)
#define I2S_I2S_TDM_CTRL_0_WRITE_MASK                   _MK_MASK_CONST(0x835df3ff)
// TDM mode
#define I2S_I2S_TDM_CTRL_0_TDM_EN_SHIFT                 _MK_SHIFT_CONST(31)
#define I2S_I2S_TDM_CTRL_0_TDM_EN_FIELD                 (_MK_MASK_CONST(0x1) << I2S_I2S_TDM_CTRL_0_TDM_EN_SHIFT)
#define I2S_I2S_TDM_CTRL_0_TDM_EN_RANGE                 31:31
#define I2S_I2S_TDM_CTRL_0_TDM_EN_WOFFSET                       0x0
#define I2S_I2S_TDM_CTRL_0_TDM_EN_DEFAULT                       _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_CTRL_0_TDM_EN_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define I2S_I2S_TDM_CTRL_0_TDM_EN_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_CTRL_0_TDM_EN_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_CTRL_0_TDM_EN_DISABLE                       _MK_ENUM_CONST(0)
#define I2S_I2S_TDM_CTRL_0_TDM_EN_ENABLE                        _MK_ENUM_CONST(1)

// Configure to appear MSB or LSB first on sdata out
#define I2S_I2S_TDM_CTRL_0_TX_MSB_LSB_SHIFT                     _MK_SHIFT_CONST(25)
#define I2S_I2S_TDM_CTRL_0_TX_MSB_LSB_FIELD                     (_MK_MASK_CONST(0x1) << I2S_I2S_TDM_CTRL_0_TX_MSB_LSB_SHIFT)
#define I2S_I2S_TDM_CTRL_0_TX_MSB_LSB_RANGE                     25:25
#define I2S_I2S_TDM_CTRL_0_TX_MSB_LSB_WOFFSET                   0x0
#define I2S_I2S_TDM_CTRL_0_TX_MSB_LSB_DEFAULT                   _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_CTRL_0_TX_MSB_LSB_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define I2S_I2S_TDM_CTRL_0_TX_MSB_LSB_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_CTRL_0_TX_MSB_LSB_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_CTRL_0_TX_MSB_LSB_MSB_FIRST                 _MK_ENUM_CONST(0)
#define I2S_I2S_TDM_CTRL_0_TX_MSB_LSB_LSB_FIRST                 _MK_ENUM_CONST(1)

// Configure to appear MSB or LSB first on sdata out
#define I2S_I2S_TDM_CTRL_0_RX_MSB_LSB_SHIFT                     _MK_SHIFT_CONST(24)
#define I2S_I2S_TDM_CTRL_0_RX_MSB_LSB_FIELD                     (_MK_MASK_CONST(0x1) << I2S_I2S_TDM_CTRL_0_RX_MSB_LSB_SHIFT)
#define I2S_I2S_TDM_CTRL_0_RX_MSB_LSB_RANGE                     24:24
#define I2S_I2S_TDM_CTRL_0_RX_MSB_LSB_WOFFSET                   0x0
#define I2S_I2S_TDM_CTRL_0_RX_MSB_LSB_DEFAULT                   _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_CTRL_0_RX_MSB_LSB_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define I2S_I2S_TDM_CTRL_0_RX_MSB_LSB_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_CTRL_0_RX_MSB_LSB_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_CTRL_0_RX_MSB_LSB_MSB_FIRST                 _MK_ENUM_CONST(0)
#define I2S_I2S_TDM_CTRL_0_RX_MSB_LSB_LSB_FIRST                 _MK_ENUM_CONST(1)

// Output highz control. When it is set, highz will be driven at out put when slot is not active
#define I2S_I2S_TDM_CTRL_0_TDM_EDGE_CTRL_SHIFT                  _MK_SHIFT_CONST(22)
#define I2S_I2S_TDM_CTRL_0_TDM_EDGE_CTRL_FIELD                  (_MK_MASK_CONST(0x1) << I2S_I2S_TDM_CTRL_0_TDM_EDGE_CTRL_SHIFT)
#define I2S_I2S_TDM_CTRL_0_TDM_EDGE_CTRL_RANGE                  22:22
#define I2S_I2S_TDM_CTRL_0_TDM_EDGE_CTRL_WOFFSET                        0x0
#define I2S_I2S_TDM_CTRL_0_TDM_EDGE_CTRL_DEFAULT                        _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_CTRL_0_TDM_EDGE_CTRL_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define I2S_I2S_TDM_CTRL_0_TDM_EDGE_CTRL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_CTRL_0_TDM_EDGE_CTRL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_CTRL_0_TDM_EDGE_CTRL_NO_HIGHZ                       _MK_ENUM_CONST(0)
#define I2S_I2S_TDM_CTRL_0_TDM_EDGE_CTRL_HIGHZ                  _MK_ENUM_CONST(1)

//Number of slots per fsync   
#define I2S_I2S_TDM_CTRL_0_TOTAL_SLOTS_SHIFT                    _MK_SHIFT_CONST(18)
#define I2S_I2S_TDM_CTRL_0_TOTAL_SLOTS_FIELD                    (_MK_MASK_CONST(0x7) << I2S_I2S_TDM_CTRL_0_TOTAL_SLOTS_SHIFT)
#define I2S_I2S_TDM_CTRL_0_TOTAL_SLOTS_RANGE                    20:18
#define I2S_I2S_TDM_CTRL_0_TOTAL_SLOTS_WOFFSET                  0x0
#define I2S_I2S_TDM_CTRL_0_TOTAL_SLOTS_DEFAULT                  _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_CTRL_0_TOTAL_SLOTS_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define I2S_I2S_TDM_CTRL_0_TOTAL_SLOTS_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_CTRL_0_TOTAL_SLOTS_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_CTRL_0_TOTAL_SLOTS_ONE                      _MK_ENUM_CONST(0)
#define I2S_I2S_TDM_CTRL_0_TOTAL_SLOTS_TWO                      _MK_ENUM_CONST(1)
#define I2S_I2S_TDM_CTRL_0_TOTAL_SLOTS_THREE                    _MK_ENUM_CONST(2)
#define I2S_I2S_TDM_CTRL_0_TOTAL_SLOTS_FOUR                     _MK_ENUM_CONST(3)
#define I2S_I2S_TDM_CTRL_0_TOTAL_SLOTS_FIVE                     _MK_ENUM_CONST(4)
#define I2S_I2S_TDM_CTRL_0_TOTAL_SLOTS_SIX                      _MK_ENUM_CONST(5)
#define I2S_I2S_TDM_CTRL_0_TOTAL_SLOTS_SEVEN                    _MK_ENUM_CONST(6)
#define I2S_I2S_TDM_CTRL_0_TOTAL_SLOTS_EIGHT                    _MK_ENUM_CONST(7)

// Total bits per slot. It should be multiples of four - 1.
#define I2S_I2S_TDM_CTRL_0_TDM_BIT_SIZE_SHIFT                   _MK_SHIFT_CONST(12)
#define I2S_I2S_TDM_CTRL_0_TDM_BIT_SIZE_FIELD                   (_MK_MASK_CONST(0x1f) << I2S_I2S_TDM_CTRL_0_TDM_BIT_SIZE_SHIFT)
#define I2S_I2S_TDM_CTRL_0_TDM_BIT_SIZE_RANGE                   16:12
#define I2S_I2S_TDM_CTRL_0_TDM_BIT_SIZE_WOFFSET                 0x0
#define I2S_I2S_TDM_CTRL_0_TDM_BIT_SIZE_DEFAULT                 _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_CTRL_0_TDM_BIT_SIZE_DEFAULT_MASK                    _MK_MASK_CONST(0x1f)
#define I2S_I2S_TDM_CTRL_0_TDM_BIT_SIZE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_CTRL_0_TDM_BIT_SIZE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Data offset to fsync
#define I2S_I2S_TDM_CTRL_0_RX_DATA_OFFSET_SHIFT                 _MK_SHIFT_CONST(8)
#define I2S_I2S_TDM_CTRL_0_RX_DATA_OFFSET_FIELD                 (_MK_MASK_CONST(0x3) << I2S_I2S_TDM_CTRL_0_RX_DATA_OFFSET_SHIFT)
#define I2S_I2S_TDM_CTRL_0_RX_DATA_OFFSET_RANGE                 9:8
#define I2S_I2S_TDM_CTRL_0_RX_DATA_OFFSET_WOFFSET                       0x0
#define I2S_I2S_TDM_CTRL_0_RX_DATA_OFFSET_DEFAULT                       _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_CTRL_0_RX_DATA_OFFSET_DEFAULT_MASK                  _MK_MASK_CONST(0x3)
#define I2S_I2S_TDM_CTRL_0_RX_DATA_OFFSET_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_CTRL_0_RX_DATA_OFFSET_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_CTRL_0_RX_DATA_OFFSET_ALIGNED_TO_FSYNC                      _MK_ENUM_CONST(0)
#define I2S_I2S_TDM_CTRL_0_RX_DATA_OFFSET_ONE_CLOCK                     _MK_ENUM_CONST(1)
#define I2S_I2S_TDM_CTRL_0_RX_DATA_OFFSET_TWO_CLOCKS                    _MK_ENUM_CONST(2)
#define I2S_I2S_TDM_CTRL_0_RX_DATA_OFFSET_THREE_CLOCKS                  _MK_ENUM_CONST(3)

// Data offset to fsync
#define I2S_I2S_TDM_CTRL_0_TX_DATA_OFFSET_SHIFT                 _MK_SHIFT_CONST(6)
#define I2S_I2S_TDM_CTRL_0_TX_DATA_OFFSET_FIELD                 (_MK_MASK_CONST(0x3) << I2S_I2S_TDM_CTRL_0_TX_DATA_OFFSET_SHIFT)
#define I2S_I2S_TDM_CTRL_0_TX_DATA_OFFSET_RANGE                 7:6
#define I2S_I2S_TDM_CTRL_0_TX_DATA_OFFSET_WOFFSET                       0x0
#define I2S_I2S_TDM_CTRL_0_TX_DATA_OFFSET_DEFAULT                       _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_CTRL_0_TX_DATA_OFFSET_DEFAULT_MASK                  _MK_MASK_CONST(0x3)
#define I2S_I2S_TDM_CTRL_0_TX_DATA_OFFSET_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_CTRL_0_TX_DATA_OFFSET_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_CTRL_0_TX_DATA_OFFSET_ALIGNED_TO_FSYNC                      _MK_ENUM_CONST(0)
#define I2S_I2S_TDM_CTRL_0_TX_DATA_OFFSET_ONE_CLOCK                     _MK_ENUM_CONST(1)
#define I2S_I2S_TDM_CTRL_0_TX_DATA_OFFSET_TWO_CLOCKS                    _MK_ENUM_CONST(2)
#define I2S_I2S_TDM_CTRL_0_TX_DATA_OFFSET_THREE_CLOCKS                  _MK_ENUM_CONST(3)

// Fsync width interms of bit clocks.
#define I2S_I2S_TDM_CTRL_0_FSYNC_WIDTH_SHIFT                    _MK_SHIFT_CONST(0)
#define I2S_I2S_TDM_CTRL_0_FSYNC_WIDTH_FIELD                    (_MK_MASK_CONST(0x3f) << I2S_I2S_TDM_CTRL_0_FSYNC_WIDTH_SHIFT)
#define I2S_I2S_TDM_CTRL_0_FSYNC_WIDTH_RANGE                    5:0
#define I2S_I2S_TDM_CTRL_0_FSYNC_WIDTH_WOFFSET                  0x0
#define I2S_I2S_TDM_CTRL_0_FSYNC_WIDTH_DEFAULT                  _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_CTRL_0_FSYNC_WIDTH_DEFAULT_MASK                     _MK_MASK_CONST(0x3f)
#define I2S_I2S_TDM_CTRL_0_FSYNC_WIDTH_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_CTRL_0_FSYNC_WIDTH_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register I2S_I2S_TDM_TX_RX_CTRL_0  
#define I2S_I2S_TDM_TX_RX_CTRL_0                        _MK_ADDR_CONST(0x24)
#define I2S_I2S_TDM_TX_RX_CTRL_0_SECURE                         0x0
#define I2S_I2S_TDM_TX_RX_CTRL_0_WORD_COUNT                     0x1
#define I2S_I2S_TDM_TX_RX_CTRL_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_TX_RX_CTRL_0_RESET_MASK                     _MK_MASK_CONST(0xf000ffff)
#define I2S_I2S_TDM_TX_RX_CTRL_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_TX_RX_CTRL_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_TX_RX_CTRL_0_READ_MASK                      _MK_MASK_CONST(0xf000ffff)
#define I2S_I2S_TDM_TX_RX_CTRL_0_WRITE_MASK                     _MK_MASK_CONST(0xa000ffff)
// TDM transmission enable
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_EN_SHIFT                        _MK_SHIFT_CONST(31)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_EN_FIELD                        (_MK_MASK_CONST(0x1) << I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_EN_SHIFT)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_EN_RANGE                        31:31
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_EN_WOFFSET                      0x0
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_EN_DEFAULT                      _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_EN_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_EN_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_EN_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_EN_DISABLE                      _MK_ENUM_CONST(0)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_EN_ENABLE                       _MK_ENUM_CONST(1)

// Transmission busy status bit
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_BSY_SHIFT                       _MK_SHIFT_CONST(30)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_BSY_FIELD                       (_MK_MASK_CONST(0x1) << I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_BSY_SHIFT)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_BSY_RANGE                       30:30
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_BSY_WOFFSET                     0x0
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_BSY_DEFAULT                     _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_BSY_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_BSY_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_BSY_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_BSY_NOT_BUSY                    _MK_ENUM_CONST(0)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_BSY_BUSY                        _MK_ENUM_CONST(1)

// TDM receive enable
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_EN_SHIFT                        _MK_SHIFT_CONST(29)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_EN_FIELD                        (_MK_MASK_CONST(0x1) << I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_EN_SHIFT)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_EN_RANGE                        29:29
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_EN_WOFFSET                      0x0
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_EN_DEFAULT                      _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_EN_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_EN_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_EN_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_EN_DISABLE                      _MK_ENUM_CONST(0)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_EN_ENABLE                       _MK_ENUM_CONST(1)

// Receive busy status bit
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_BSY_SHIFT                       _MK_SHIFT_CONST(28)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_BSY_FIELD                       (_MK_MASK_CONST(0x1) << I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_BSY_SHIFT)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_BSY_RANGE                       28:28
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_BSY_WOFFSET                     0x0
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_BSY_DEFAULT                     _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_BSY_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_BSY_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_BSY_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_BSY_NOT_BUSY                    _MK_ENUM_CONST(0)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_BSY_BUSY                        _MK_ENUM_CONST(1)

// Rx Slot enables. Data will be received in enabled slots
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_SLOT_ENABLES_SHIFT                      _MK_SHIFT_CONST(8)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_SLOT_ENABLES_FIELD                      (_MK_MASK_CONST(0xff) << I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_SLOT_ENABLES_SHIFT)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_SLOT_ENABLES_RANGE                      15:8
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_SLOT_ENABLES_WOFFSET                    0x0
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_SLOT_ENABLES_DEFAULT                    _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_SLOT_ENABLES_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_SLOT_ENABLES_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_RX_SLOT_ENABLES_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Tx Slot enables. Data will be transmitted in enabled slots
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_SLOT_ENABLES_SHIFT                      _MK_SHIFT_CONST(0)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_SLOT_ENABLES_FIELD                      (_MK_MASK_CONST(0xff) << I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_SLOT_ENABLES_SHIFT)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_SLOT_ENABLES_RANGE                      7:0
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_SLOT_ENABLES_WOFFSET                    0x0
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_SLOT_ENABLES_DEFAULT                    _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_SLOT_ENABLES_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_SLOT_ENABLES_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define I2S_I2S_TDM_TX_RX_CTRL_0_TDM_TX_SLOT_ENABLES_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Reserved address 40 [0x28] 

// Reserved address 44 [0x2c] 

// Reserved address 48 [0x30] 

// Reserved address 52 [0x34] 

// Reserved address 56 [0x38] 

// Reserved address 60 [0x3c] 
// I2S Controller Output FIFO Buffer
//
// This register is used to write new PCM data samples to the controller (i.e. play samples)
// The status of the FIFO should be checked to ensure that a read will not cause an underrun.

// Register I2S_I2S_FIFO1_0  
#define I2S_I2S_FIFO1_0                 _MK_ADDR_CONST(0x40)
#define I2S_I2S_FIFO1_0_SECURE                  0x0
#define I2S_I2S_FIFO1_0_WORD_COUNT                      0x1
#define I2S_I2S_FIFO1_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define I2S_I2S_FIFO1_0_RESET_MASK                      _MK_MASK_CONST(0xffffffff)
#define I2S_I2S_FIFO1_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define I2S_I2S_FIFO1_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define I2S_I2S_FIFO1_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define I2S_I2S_FIFO1_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// FIFO1 data 
#define I2S_I2S_FIFO1_0_FIFO1_DATA_SHIFT                        _MK_SHIFT_CONST(0)
#define I2S_I2S_FIFO1_0_FIFO1_DATA_FIELD                        (_MK_MASK_CONST(0xffffffff) << I2S_I2S_FIFO1_0_FIFO1_DATA_SHIFT)
#define I2S_I2S_FIFO1_0_FIFO1_DATA_RANGE                        31:0
#define I2S_I2S_FIFO1_0_FIFO1_DATA_WOFFSET                      0x0
#define I2S_I2S_FIFO1_0_FIFO1_DATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define I2S_I2S_FIFO1_0_FIFO1_DATA_DEFAULT_MASK                 _MK_MASK_CONST(0xffffffff)
#define I2S_I2S_FIFO1_0_FIFO1_DATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define I2S_I2S_FIFO1_0_FIFO1_DATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)


// Reserved address 68 [0x44] 

// Reserved address 72 [0x48] 

// Reserved address 76 [0x4c] 

// Reserved address 80 [0x50] 

// Reserved address 84 [0x54] 

// Reserved address 88 [0x58] 

// Reserved address 92 [0x5c] 

// Reserved address 96 [0x60] 

// Reserved address 100 [0x64] 

// Reserved address 104 [0x68] 

// Reserved address 108 [0x6c] 

// Reserved address 112 [0x70] 

// Reserved address 116 [0x74] 

// Reserved address 120 [0x78] 

// Reserved address 124 [0x7c] 
// I2S Controller Input FIFO Buffer
// 
// This register is used to read the contents of the PCM data IN (record) FIFO
// The status of the FIFO should be checked to ensure that a write will not cause an overflow

// Register I2S_I2S_FIFO2_0  
#define I2S_I2S_FIFO2_0                 _MK_ADDR_CONST(0x80)
#define I2S_I2S_FIFO2_0_SECURE                  0x0
#define I2S_I2S_FIFO2_0_WORD_COUNT                      0x1
#define I2S_I2S_FIFO2_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define I2S_I2S_FIFO2_0_RESET_MASK                      _MK_MASK_CONST(0xffffffff)
#define I2S_I2S_FIFO2_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define I2S_I2S_FIFO2_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define I2S_I2S_FIFO2_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define I2S_I2S_FIFO2_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
//FIFO2 data
#define I2S_I2S_FIFO2_0_FIFO2_DATA_SHIFT                        _MK_SHIFT_CONST(0)
#define I2S_I2S_FIFO2_0_FIFO2_DATA_FIELD                        (_MK_MASK_CONST(0xffffffff) << I2S_I2S_FIFO2_0_FIFO2_DATA_SHIFT)
#define I2S_I2S_FIFO2_0_FIFO2_DATA_RANGE                        31:0
#define I2S_I2S_FIFO2_0_FIFO2_DATA_WOFFSET                      0x0
#define I2S_I2S_FIFO2_0_FIFO2_DATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define I2S_I2S_FIFO2_0_FIFO2_DATA_DEFAULT_MASK                 _MK_MASK_CONST(0xffffffff)
#define I2S_I2S_FIFO2_0_FIFO2_DATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define I2S_I2S_FIFO2_0_FIFO2_DATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)


//
// REGISTER LIST
//
#define LIST_ARI2S_PPI_REGS(_op_) \
_op_(I2S_I2S_CTRL_0) \
_op_(I2S_I2S_STATUS_0) \
_op_(I2S_I2S_TIMING_0) \
_op_(I2S_I2S_FIFO_SCR_0) \
_op_(I2S_I2S_PCM_CTRL_0) \
_op_(I2S_I2S_NW_CTRL_0) \
_op_(I2S_I2S_TDM_CTRL_0) \
_op_(I2S_I2S_TDM_TX_RX_CTRL_0) \
_op_(I2S_I2S_FIFO1_0) \
_op_(I2S_I2S_FIFO2_0)


//
// ADDRESS SPACES
//

#define BASE_ADDRESS_I2S        0x00000000

//
// ARI2S_PPI REGISTER BANKS
//

#define I2S0_FIRST_REG 0x0000 // I2S_I2S_CTRL_0
#define I2S0_LAST_REG 0x0014 // I2S_I2S_NW_CTRL_0
#define I2S1_FIRST_REG 0x0020 // I2S_I2S_TDM_CTRL_0
#define I2S1_LAST_REG 0x0024 // I2S_I2S_TDM_TX_RX_CTRL_0
#define I2S2_FIRST_REG 0x0040 // I2S_I2S_FIFO1_0
#define I2S2_LAST_REG 0x0040 // I2S_I2S_FIFO1_0
#define I2S3_FIRST_REG 0x0080 // I2S_I2S_FIFO2_0
#define I2S3_LAST_REG 0x0080 // I2S_I2S_FIFO2_0

#ifndef _MK_SHIFT_CONST
  #define _MK_SHIFT_CONST(_constant_) _constant_
#endif
#ifndef _MK_MASK_CONST
  #define _MK_MASK_CONST(_constant_) _constant_
#endif
#ifndef _MK_ENUM_CONST
  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
#endif
#ifndef _MK_ADDR_CONST
  #define _MK_ADDR_CONST(_constant_) _constant_
#endif

#endif // ifndef ___ARI2S_PPI_H_INC_
