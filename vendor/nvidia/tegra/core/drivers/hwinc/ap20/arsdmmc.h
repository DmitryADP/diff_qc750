//
// DO NOT EDIT - generated by simspec!
//

#ifndef ___ARSDMMC_H_INC_
#define ___ARSDMMC_H_INC_
//SDMA System Address Register
//------------------------------------------------------------------------------
//ADDRESS
//    This register contains the system memory address for a SDMA transfer. When the
//    Host Controller stops a SDMA transfer, this register shall point to the system
//    address of the next contiguous data position. It can be accessed only if no
//    transaction is executing (i.e., after a transaction has stopped). Read operations
//    during transfers may return an invalid value.
//    The Host Driver shall initialize this register before starting a SDMA transaction.
//    After SDMA has stopped, the next system address of the next contiguous data
//    position can be read from this register.
//    The SDMA transfer waits at the every boundary specified by the Host SDMA
//    Buffer Boundary in the Block Size register. The Host Controller generates DMA
//    Interrupt to request the Host Driver to update this register. The Host Driver sets the
//    next system address of the next data position to this register. When the most upper
//    byte of this register (003h) is written, the Host Controller restarts the SDMA
//    transfer.
//    When restarting SDMA by the Resume command or by setting Continue Request
//    in the Block Gap Control register, the Host Controller shall start at the next
//    contiguous address stored here in the SDMA System Address register.
//    ADMA does not use this register.

// Register SDMMC_SYSTEM_ADDRESS_0  
#define SDMMC_SYSTEM_ADDRESS_0                  _MK_ADDR_CONST(0x0)
#define SDMMC_SYSTEM_ADDRESS_0_SECURE                   0x0
#define SDMMC_SYSTEM_ADDRESS_0_WORD_COUNT                       0x1
#define SDMMC_SYSTEM_ADDRESS_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define SDMMC_SYSTEM_ADDRESS_0_RESET_MASK                       _MK_MASK_CONST(0xffffffff)
#define SDMMC_SYSTEM_ADDRESS_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define SDMMC_SYSTEM_ADDRESS_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define SDMMC_SYSTEM_ADDRESS_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define SDMMC_SYSTEM_ADDRESS_0_WRITE_MASK                       _MK_MASK_CONST(0xffffffff)
#define SDMMC_SYSTEM_ADDRESS_0_ADDRESS_SHIFT                    _MK_SHIFT_CONST(0)
#define SDMMC_SYSTEM_ADDRESS_0_ADDRESS_FIELD                    (_MK_MASK_CONST(0xffffffff) << SDMMC_SYSTEM_ADDRESS_0_ADDRESS_SHIFT)
#define SDMMC_SYSTEM_ADDRESS_0_ADDRESS_RANGE                    31:0
#define SDMMC_SYSTEM_ADDRESS_0_ADDRESS_WOFFSET                  0x0
#define SDMMC_SYSTEM_ADDRESS_0_ADDRESS_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_SYSTEM_ADDRESS_0_ADDRESS_DEFAULT_MASK                     _MK_MASK_CONST(0xffffffff)
#define SDMMC_SYSTEM_ADDRESS_0_ADDRESS_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_SYSTEM_ADDRESS_0_ADDRESS_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//Block Size Register
//------------------------------------------------------------------------------
//HOST_DMA_BUFFER_SIZE
//    The large contiguous memory space may not be available in the virtual memory
//    system. To perform long SDMA transfer, SDMA System Address register shall be
//    updated at every system memory boundary during SDMA transfer.
//    These bits specify the size of contiguous buffer in the system memory. The
//    SDMA transfer shall wait at the every boundary specified by these fields and the
//    Host Controller generates the DMA Interrupt to request the Host Driver to
//    update the SDMA System Address register. At the end of transfer, the Host
//    Controller may issue or may not issue DMA Interrupt. In particular, DMA
//    Interrupt shall not be issued after Transfer Complete Interrupt is issued.
//    In case of this register is set to 0 (buffer size = 4K bytes), lower 12-bit of byte
//    address points data in the contiguous buffer and the upper 20-bit points the
//    location of the buffer in the system memory. The SDMA transfer stops when the
//    Host Controller detects carry out of the address from bit 11 to 12.
//    These bits shall be supported when the SDMA Support in the Capabilities
//    register is set to 1 and this function is active when the DMA Enable in the
//    Transfer Mode register is set to 1.
//    ADMA does not use this register.
//        000b 4K bytes (Detects A11 carry out)
//        001b 8K bytes (Detects A12 carry out)
//        010b 16K Bytes (Detects A13 carry out)
//        011b 32K Bytes (Detects A14 carry out)
//        100b 64K bytes (Detects A15 carry out)
//        101b 128K Bytes (Detects A16 carry out)
//        110b 256K Bytes (Detects A17 carry out)
//        111b 512K Bytes (Detects A18 carry out)
//XFER_BLOCK_SIZE_11_0
//    This register specifies the block size of data transfers for CMD17, CMD18,
//    CMD24, CMD25, and CMD53. Values ranging from 1 up to the maximum buffer
//    size can be set. In case of memory, it shall be set up to 512 bytes (Refer to
//    Implementation Note in Section 1.7.2). It can be accessed only if no transaction
//    is executing (i.e., after a transaction has stopped). Read operations during
//    transfers may return an invalid value, and write operations shall be ignored.
//        0800h 2048 Bytes
//           ....... 
//        0200h 512 Bytes
//        01FFh 511 Bytes
//           ....... 
//        0004h 4 Bytes
//        0003h 3 Bytes
//        0002h 2 Bytes
//        0001h 1 Byte
//        0000h No data transfer
//BLOCKS_COUNT
//    This register is enabled when Block Count Enable in the Transfer Mode register is
//    set to 1 and is valid only for multiple block transfers. The Host Driver shall set this
//    register to a value between 1 and the maximum block count. The Host Controller
//    decrements the block count after each block transfer and stops when the count
//    reaches zero. Setting the block count to 0 results in no data blocks is transferred.
//    This register should be accessed only when no transaction is executing (i.e., after
//    transactions are stopped). During data transfer, read operations on this register may
//    return an invalid value and write operations are ignored.
//    When a suspend command is completed, the number of blocks yet to be transferred
//    can be determined by reading this register. Before issuing a resume command, the
//    Host Driver shall restore the previously saved block count.
//        FFFFh 65535 blocks
//            ......... 
//        0002h 2 blocks
//        0001h 1 block
//        0000h Stop Count
//XFER_BLOCK_SIZE_12 
// Transfer Block Size 12th bit. This bit is added to  support 4Kb Data block transfer.

// Register SDMMC_BLOCK_SIZE_BLOCK_COUNT_0  
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0                  _MK_ADDR_CONST(0x4)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_SECURE                   0x0
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_WORD_COUNT                       0x1
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_RESET_MASK                       _MK_MASK_CONST(0xffffffff)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_WRITE_MASK                       _MK_MASK_CONST(0xffffffff)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_BLOCKS_COUNT_SHIFT                       _MK_SHIFT_CONST(16)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_BLOCKS_COUNT_FIELD                       (_MK_MASK_CONST(0xffff) << SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_BLOCKS_COUNT_SHIFT)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_BLOCKS_COUNT_RANGE                       31:16
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_BLOCKS_COUNT_WOFFSET                     0x0
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_BLOCKS_COUNT_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_BLOCKS_COUNT_DEFAULT_MASK                        _MK_MASK_CONST(0xffff)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_BLOCKS_COUNT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_BLOCKS_COUNT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_XFER_BLOCK_SIZE_12_SHIFT                 _MK_SHIFT_CONST(15)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_XFER_BLOCK_SIZE_12_FIELD                 (_MK_MASK_CONST(0x1) << SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_XFER_BLOCK_SIZE_12_SHIFT)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_XFER_BLOCK_SIZE_12_RANGE                 15:15
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_XFER_BLOCK_SIZE_12_WOFFSET                       0x0
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_XFER_BLOCK_SIZE_12_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_XFER_BLOCK_SIZE_12_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_XFER_BLOCK_SIZE_12_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_XFER_BLOCK_SIZE_12_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_HOST_DMA_BUFFER_SIZE_SHIFT                       _MK_SHIFT_CONST(12)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_HOST_DMA_BUFFER_SIZE_FIELD                       (_MK_MASK_CONST(0x7) << SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_HOST_DMA_BUFFER_SIZE_SHIFT)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_HOST_DMA_BUFFER_SIZE_RANGE                       14:12
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_HOST_DMA_BUFFER_SIZE_WOFFSET                     0x0
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_HOST_DMA_BUFFER_SIZE_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_HOST_DMA_BUFFER_SIZE_DEFAULT_MASK                        _MK_MASK_CONST(0x7)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_HOST_DMA_BUFFER_SIZE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_HOST_DMA_BUFFER_SIZE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_HOST_DMA_BUFFER_SIZE_DMA4K                       _MK_ENUM_CONST(0)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_HOST_DMA_BUFFER_SIZE_DMA8K                       _MK_ENUM_CONST(1)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_HOST_DMA_BUFFER_SIZE_DMA16K                      _MK_ENUM_CONST(2)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_HOST_DMA_BUFFER_SIZE_DMA32K                      _MK_ENUM_CONST(3)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_HOST_DMA_BUFFER_SIZE_DMA64K                      _MK_ENUM_CONST(4)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_HOST_DMA_BUFFER_SIZE_DMA128K                     _MK_ENUM_CONST(5)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_HOST_DMA_BUFFER_SIZE_DMA256K                     _MK_ENUM_CONST(6)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_HOST_DMA_BUFFER_SIZE_DMA512K                     _MK_ENUM_CONST(7)

#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_XFER_BLOCK_SIZE_11_0_SHIFT                       _MK_SHIFT_CONST(0)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_XFER_BLOCK_SIZE_11_0_FIELD                       (_MK_MASK_CONST(0xfff) << SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_XFER_BLOCK_SIZE_11_0_SHIFT)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_XFER_BLOCK_SIZE_11_0_RANGE                       11:0
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_XFER_BLOCK_SIZE_11_0_WOFFSET                     0x0
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_XFER_BLOCK_SIZE_11_0_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_XFER_BLOCK_SIZE_11_0_DEFAULT_MASK                        _MK_MASK_CONST(0xfff)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_XFER_BLOCK_SIZE_11_0_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_BLOCK_SIZE_BLOCK_COUNT_0_XFER_BLOCK_SIZE_11_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//Command Argument Register
//------------------------------------------------------------------------------
//COMMAND_ARGUMENT
//    The SD Command Argument is specified as bit39-8 of Command-Format in the
//    Physical Layer Specification.

// Register SDMMC_ARGUMENT_0  
#define SDMMC_ARGUMENT_0                        _MK_ADDR_CONST(0x8)
#define SDMMC_ARGUMENT_0_SECURE                         0x0
#define SDMMC_ARGUMENT_0_WORD_COUNT                     0x1
#define SDMMC_ARGUMENT_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define SDMMC_ARGUMENT_0_RESET_MASK                     _MK_MASK_CONST(0xffffffff)
#define SDMMC_ARGUMENT_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define SDMMC_ARGUMENT_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define SDMMC_ARGUMENT_0_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define SDMMC_ARGUMENT_0_WRITE_MASK                     _MK_MASK_CONST(0xffffffff)
#define SDMMC_ARGUMENT_0_COMMAND_ARGUMENT_SHIFT                 _MK_SHIFT_CONST(0)
#define SDMMC_ARGUMENT_0_COMMAND_ARGUMENT_FIELD                 (_MK_MASK_CONST(0xffffffff) << SDMMC_ARGUMENT_0_COMMAND_ARGUMENT_SHIFT)
#define SDMMC_ARGUMENT_0_COMMAND_ARGUMENT_RANGE                 31:0
#define SDMMC_ARGUMENT_0_COMMAND_ARGUMENT_WOFFSET                       0x0
#define SDMMC_ARGUMENT_0_COMMAND_ARGUMENT_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_ARGUMENT_0_COMMAND_ARGUMENT_DEFAULT_MASK                  _MK_MASK_CONST(0xffffffff)
#define SDMMC_ARGUMENT_0_COMMAND_ARGUMENT_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_ARGUMENT_0_COMMAND_ARGUMENT_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//Command and Transfer Mode Register
//------------------------------------------------------------------------------
//COMMAND_INDEX
//    These bits shall be set to the command number (CMD0-63, ACMD0-63) that is
//    specified in bits 45-40 of the Command-Format in the Physical Layer
//    Specification and SDIO Card Specification.
//COMMAND_TYPE
//    There are three types of special commands: Suspend, Resume and Abort.
//    These bits shall be set to 00b for all other commands.
//    (1) Suspend Command
//      If the Suspend command succeeds, the Host Controller shall assume the
//      SD Bus has been released and that it is possible to issue the next
//      command, which uses the DAT line. The Host Controller shall de-assert
//      Read Wait for read transactions and stop checking busy for write
//      transactions. The interrupt cycle shall start, in 4-bit mode. If the Suspend
//      command fails, the Host Controller shall maintain its current state, and the
//      Host Driver shall restart the transfer by setting Continue Request in the
//      Block Gap Control register. (Refer to 3.12.1 Suspend Sequence)
//    (2) Resume Command
//      The Host Driver re-starts the data transfer by restoring the registers in the
//      range of 000-00Dh. (Refer to Figure 1-4 in section 1.6 for the register
//      map.) The Host Controller shall check for busy before starting write
//      transfers.
//    (3) Abort Command
//      If this command is set when executing a read transfer, the Host Controller
//      shall stop reads to the buffer. If this command is set when executing a
//      write transfer, the Host Controller shall stop driving the DAT line. After
//      issuing the Abort command, the Host Driver should issue a software reset.
//    (Refer to 3.8 Abort Transaction)
//               11b Abort CMD12, CMD52 for writing "I/O Abort" in CCCR
//               10b Resume CMD52 for writing "Function Select" in CCCR
//               01b Suspend CMD52 for writing "Bus Suspend" in CCCR
//               00b Normal Other commands
//DATA_PRESENT_SELECT
//    This bit is set to 1 to indicate that data is present and shall be transferred using
//    the DAT line. It is set to 0 for the following:
//      (1) Commands using only CMD line (ex. CMD52).
//      (2) Commands with no data transfer but using busy signal on DAT[0] line (R1b or R5b ex. CMD38)
//      (3) Resume command
//CMD_INDEX_CHECK_EN
//  If this bit is set to 1, the Host Controller shall check the Index field in the
//  response to see if it has the same value as the command index. If it is not, it is
//  reported as a Command Index Error. If this bit is set to 0, the Index field is not
//  checked.
//CMD_CRC_CHECK_EN
//  If this bit is set to 1, the Host Controller shall check the CRC field in the
//  response. If an error is detected, it is reported as a Command CRC Error. If this
//  bit is set to 0, the CRC field is not checked. The position of CRC field is
//  determined according to the length of the response. (Refer to definition in
//  D01-00 and Table 2-10 below.)
//RESP_TYPE_SELECT
//  Normal Mode:
//    00 No Response
//    01 Response Length 136
//    10 Response Length 48
//    11 Response Length 48 check Busy after response
//  SPI Mode:(VENDOR Definition)
//    00 R1 Response Length 8
//    01 R2 Response Length 16
//    10 R3 Response Length 40
//    11 R1b Response Length 8
//SPI_MODE(VENDOR Bit)
//    SPI Mode is enabled.The Response types definitions are different.Refer to Response type field.
//CMD_COMP_ATA- CEATA Command Completion Signal Enable.(VENDOR Bit)
//    Enabled to wait for CCS Signal.After this has been recived the Transfer complete occurs.
//MULTI_BLOCK_SELECT - Multi / Single Block Select
//    This bit is set when issuing multiple-block transfer commands using DAT line. For
//    any other commands, this bit shall be set to 0. If this bit is 0, it is not necessary to
//    set the Block Count register. (Refer to Table 2-8)
//      1 Multiple Block
//      0 Single Block
//DATA_XFER_DIR_SEL - Data Transfer Direction Select
//    This bit defines the direction of DAT line data transfers. The bit is set to 1 by the
//    Host Driver to transfer data from the SD card to the SD Host Controller and it is
//    set to 0 for all other commands.
//      1 Read (Card to Host)
//      0 Write (Host to Card)
//AUTO_CMD12_EN - Auto CMD12 Enable
//    Multiple block transfers for memory require CMD12 to stop the transaction. When
//    this bit is set to 1, the Host Controller shall issue CMD12 automatically when last
//    block transfer is completed. The Host Driver shall not set this bit to issue
//    commands that do not require CMD12 to stop data transfer. In particular, secure
//    commands defined in the Part 3 File Security specification do not require CMD12.
//BLOCK_COUNT_EN - Block Count Enable
//    This bit is used to enable the Block Count register, which is only relevant for
//    multiple block transfers. When this bit is 0, the Block Count register is disabled,
//    which is useful in executing an infinite transfer. (Refer to Table 2-8)
//    If ADMA2 data transfer is more than 65535 blocks, this bit shall be set to 0. In this
//    case, data transfer length is designated by Descriptor Table.
//DMA_EN - DMA Enable
//    This bit enables DMA functionality as described in section 1.4. DMA can be
//    enabled only if it is supported as indicated in the Capabilities register. One of the
//    DMA modes can be selected by DMA Select in the Host Control register. If DMA
//    is not supported, this bit is meaningless and shall always read 0. If this bit is set to
//    1, a DMA operation shall begin when the Host Driver writes to the upper byte of
//    Command register (00Fh).

// Register SDMMC_CMD_XFER_MODE_0  
#define SDMMC_CMD_XFER_MODE_0                   _MK_ADDR_CONST(0xc)
#define SDMMC_CMD_XFER_MODE_0_SECURE                    0x0
#define SDMMC_CMD_XFER_MODE_0_WORD_COUNT                        0x1
#define SDMMC_CMD_XFER_MODE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_RESET_MASK                        _MK_MASK_CONST(0x3ffb00f7)
#define SDMMC_CMD_XFER_MODE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_READ_MASK                         _MK_MASK_CONST(0x3ffb00f7)
#define SDMMC_CMD_XFER_MODE_0_WRITE_MASK                        _MK_MASK_CONST(0x3ffb00f7)
#define SDMMC_CMD_XFER_MODE_0_COMMAND_INDEX_SHIFT                       _MK_SHIFT_CONST(24)
#define SDMMC_CMD_XFER_MODE_0_COMMAND_INDEX_FIELD                       (_MK_MASK_CONST(0x3f) << SDMMC_CMD_XFER_MODE_0_COMMAND_INDEX_SHIFT)
#define SDMMC_CMD_XFER_MODE_0_COMMAND_INDEX_RANGE                       29:24
#define SDMMC_CMD_XFER_MODE_0_COMMAND_INDEX_WOFFSET                     0x0
#define SDMMC_CMD_XFER_MODE_0_COMMAND_INDEX_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_COMMAND_INDEX_DEFAULT_MASK                        _MK_MASK_CONST(0x3f)
#define SDMMC_CMD_XFER_MODE_0_COMMAND_INDEX_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_COMMAND_INDEX_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

#define SDMMC_CMD_XFER_MODE_0_COMMAND_TYPE_SHIFT                        _MK_SHIFT_CONST(22)
#define SDMMC_CMD_XFER_MODE_0_COMMAND_TYPE_FIELD                        (_MK_MASK_CONST(0x3) << SDMMC_CMD_XFER_MODE_0_COMMAND_TYPE_SHIFT)
#define SDMMC_CMD_XFER_MODE_0_COMMAND_TYPE_RANGE                        23:22
#define SDMMC_CMD_XFER_MODE_0_COMMAND_TYPE_WOFFSET                      0x0
#define SDMMC_CMD_XFER_MODE_0_COMMAND_TYPE_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_COMMAND_TYPE_DEFAULT_MASK                 _MK_MASK_CONST(0x3)
#define SDMMC_CMD_XFER_MODE_0_COMMAND_TYPE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_COMMAND_TYPE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_COMMAND_TYPE_NORMAL                       _MK_ENUM_CONST(0)
#define SDMMC_CMD_XFER_MODE_0_COMMAND_TYPE_SUSPEND                      _MK_ENUM_CONST(1)
#define SDMMC_CMD_XFER_MODE_0_COMMAND_TYPE_RESUME                       _MK_ENUM_CONST(2)
#define SDMMC_CMD_XFER_MODE_0_COMMAND_TYPE_ABORT                        _MK_ENUM_CONST(3)

#define SDMMC_CMD_XFER_MODE_0_DATA_PRESENT_SELECT_SHIFT                 _MK_SHIFT_CONST(21)
#define SDMMC_CMD_XFER_MODE_0_DATA_PRESENT_SELECT_FIELD                 (_MK_MASK_CONST(0x1) << SDMMC_CMD_XFER_MODE_0_DATA_PRESENT_SELECT_SHIFT)
#define SDMMC_CMD_XFER_MODE_0_DATA_PRESENT_SELECT_RANGE                 21:21
#define SDMMC_CMD_XFER_MODE_0_DATA_PRESENT_SELECT_WOFFSET                       0x0
#define SDMMC_CMD_XFER_MODE_0_DATA_PRESENT_SELECT_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_DATA_PRESENT_SELECT_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SDMMC_CMD_XFER_MODE_0_DATA_PRESENT_SELECT_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_DATA_PRESENT_SELECT_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_DATA_PRESENT_SELECT_NO_DATA_TRANSFER                      _MK_ENUM_CONST(0)
#define SDMMC_CMD_XFER_MODE_0_DATA_PRESENT_SELECT_DATA_TRANSFER                 _MK_ENUM_CONST(1)

#define SDMMC_CMD_XFER_MODE_0_CMD_INDEX_CHECK_EN_SHIFT                  _MK_SHIFT_CONST(20)
#define SDMMC_CMD_XFER_MODE_0_CMD_INDEX_CHECK_EN_FIELD                  (_MK_MASK_CONST(0x1) << SDMMC_CMD_XFER_MODE_0_CMD_INDEX_CHECK_EN_SHIFT)
#define SDMMC_CMD_XFER_MODE_0_CMD_INDEX_CHECK_EN_RANGE                  20:20
#define SDMMC_CMD_XFER_MODE_0_CMD_INDEX_CHECK_EN_WOFFSET                        0x0
#define SDMMC_CMD_XFER_MODE_0_CMD_INDEX_CHECK_EN_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_CMD_INDEX_CHECK_EN_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define SDMMC_CMD_XFER_MODE_0_CMD_INDEX_CHECK_EN_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_CMD_INDEX_CHECK_EN_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_CMD_INDEX_CHECK_EN_DISABLE                        _MK_ENUM_CONST(0)
#define SDMMC_CMD_XFER_MODE_0_CMD_INDEX_CHECK_EN_ENABLE                 _MK_ENUM_CONST(1)

#define SDMMC_CMD_XFER_MODE_0_CMD_CRC_CHECK_EN_SHIFT                    _MK_SHIFT_CONST(19)
#define SDMMC_CMD_XFER_MODE_0_CMD_CRC_CHECK_EN_FIELD                    (_MK_MASK_CONST(0x1) << SDMMC_CMD_XFER_MODE_0_CMD_CRC_CHECK_EN_SHIFT)
#define SDMMC_CMD_XFER_MODE_0_CMD_CRC_CHECK_EN_RANGE                    19:19
#define SDMMC_CMD_XFER_MODE_0_CMD_CRC_CHECK_EN_WOFFSET                  0x0
#define SDMMC_CMD_XFER_MODE_0_CMD_CRC_CHECK_EN_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_CMD_CRC_CHECK_EN_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define SDMMC_CMD_XFER_MODE_0_CMD_CRC_CHECK_EN_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_CMD_CRC_CHECK_EN_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_CMD_CRC_CHECK_EN_DISABLE                  _MK_ENUM_CONST(0)
#define SDMMC_CMD_XFER_MODE_0_CMD_CRC_CHECK_EN_ENABLE                   _MK_ENUM_CONST(1)

#define SDMMC_CMD_XFER_MODE_0_RESP_TYPE_SELECT_SHIFT                    _MK_SHIFT_CONST(16)
#define SDMMC_CMD_XFER_MODE_0_RESP_TYPE_SELECT_FIELD                    (_MK_MASK_CONST(0x3) << SDMMC_CMD_XFER_MODE_0_RESP_TYPE_SELECT_SHIFT)
#define SDMMC_CMD_XFER_MODE_0_RESP_TYPE_SELECT_RANGE                    17:16
#define SDMMC_CMD_XFER_MODE_0_RESP_TYPE_SELECT_WOFFSET                  0x0
#define SDMMC_CMD_XFER_MODE_0_RESP_TYPE_SELECT_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_RESP_TYPE_SELECT_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define SDMMC_CMD_XFER_MODE_0_RESP_TYPE_SELECT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_RESP_TYPE_SELECT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_RESP_TYPE_SELECT_NO_RESPONSE                      _MK_ENUM_CONST(0)
#define SDMMC_CMD_XFER_MODE_0_RESP_TYPE_SELECT_RESP_LENGTH_136                  _MK_ENUM_CONST(1)
#define SDMMC_CMD_XFER_MODE_0_RESP_TYPE_SELECT_RESP_LENGTH_48                   _MK_ENUM_CONST(2)
#define SDMMC_CMD_XFER_MODE_0_RESP_TYPE_SELECT_RESP_LENGTH_48BUSY                       _MK_ENUM_CONST(3)
#define SDMMC_CMD_XFER_MODE_0_RESP_TYPE_SELECT_SPI_R1_RESPONSE                  _MK_ENUM_CONST(0)
#define SDMMC_CMD_XFER_MODE_0_RESP_TYPE_SELECT_SPI_R2_RESPONSE                  _MK_ENUM_CONST(1)
#define SDMMC_CMD_XFER_MODE_0_RESP_TYPE_SELECT_SPI_R3_RESPONSE                  _MK_ENUM_CONST(2)
#define SDMMC_CMD_XFER_MODE_0_RESP_TYPE_SELECT_SPI_R1b_RESPONSE                 _MK_ENUM_CONST(3)

#define SDMMC_CMD_XFER_MODE_0_SPI_MODE_SHIFT                    _MK_SHIFT_CONST(7)
#define SDMMC_CMD_XFER_MODE_0_SPI_MODE_FIELD                    (_MK_MASK_CONST(0x1) << SDMMC_CMD_XFER_MODE_0_SPI_MODE_SHIFT)
#define SDMMC_CMD_XFER_MODE_0_SPI_MODE_RANGE                    7:7
#define SDMMC_CMD_XFER_MODE_0_SPI_MODE_WOFFSET                  0x0
#define SDMMC_CMD_XFER_MODE_0_SPI_MODE_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_SPI_MODE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define SDMMC_CMD_XFER_MODE_0_SPI_MODE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_SPI_MODE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_SPI_MODE_DISABLE                  _MK_ENUM_CONST(0)
#define SDMMC_CMD_XFER_MODE_0_SPI_MODE_ENABLE                   _MK_ENUM_CONST(1)

#define SDMMC_CMD_XFER_MODE_0_CMD_COMP_ATA_SHIFT                        _MK_SHIFT_CONST(6)
#define SDMMC_CMD_XFER_MODE_0_CMD_COMP_ATA_FIELD                        (_MK_MASK_CONST(0x1) << SDMMC_CMD_XFER_MODE_0_CMD_COMP_ATA_SHIFT)
#define SDMMC_CMD_XFER_MODE_0_CMD_COMP_ATA_RANGE                        6:6
#define SDMMC_CMD_XFER_MODE_0_CMD_COMP_ATA_WOFFSET                      0x0
#define SDMMC_CMD_XFER_MODE_0_CMD_COMP_ATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_CMD_COMP_ATA_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SDMMC_CMD_XFER_MODE_0_CMD_COMP_ATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_CMD_COMP_ATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_CMD_COMP_ATA_DISABLE                      _MK_ENUM_CONST(0)
#define SDMMC_CMD_XFER_MODE_0_CMD_COMP_ATA_ENABLE                       _MK_ENUM_CONST(1)

#define SDMMC_CMD_XFER_MODE_0_MULTI_BLOCK_SELECT_SHIFT                  _MK_SHIFT_CONST(5)
#define SDMMC_CMD_XFER_MODE_0_MULTI_BLOCK_SELECT_FIELD                  (_MK_MASK_CONST(0x1) << SDMMC_CMD_XFER_MODE_0_MULTI_BLOCK_SELECT_SHIFT)
#define SDMMC_CMD_XFER_MODE_0_MULTI_BLOCK_SELECT_RANGE                  5:5
#define SDMMC_CMD_XFER_MODE_0_MULTI_BLOCK_SELECT_WOFFSET                        0x0
#define SDMMC_CMD_XFER_MODE_0_MULTI_BLOCK_SELECT_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_MULTI_BLOCK_SELECT_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define SDMMC_CMD_XFER_MODE_0_MULTI_BLOCK_SELECT_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_MULTI_BLOCK_SELECT_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_MULTI_BLOCK_SELECT_DISABLE                        _MK_ENUM_CONST(0)
#define SDMMC_CMD_XFER_MODE_0_MULTI_BLOCK_SELECT_ENABLE                 _MK_ENUM_CONST(1)

#define SDMMC_CMD_XFER_MODE_0_DATA_XFER_DIR_SEL_SHIFT                   _MK_SHIFT_CONST(4)
#define SDMMC_CMD_XFER_MODE_0_DATA_XFER_DIR_SEL_FIELD                   (_MK_MASK_CONST(0x1) << SDMMC_CMD_XFER_MODE_0_DATA_XFER_DIR_SEL_SHIFT)
#define SDMMC_CMD_XFER_MODE_0_DATA_XFER_DIR_SEL_RANGE                   4:4
#define SDMMC_CMD_XFER_MODE_0_DATA_XFER_DIR_SEL_WOFFSET                 0x0
#define SDMMC_CMD_XFER_MODE_0_DATA_XFER_DIR_SEL_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_DATA_XFER_DIR_SEL_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define SDMMC_CMD_XFER_MODE_0_DATA_XFER_DIR_SEL_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_DATA_XFER_DIR_SEL_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_DATA_XFER_DIR_SEL_WRITE                   _MK_ENUM_CONST(0)
#define SDMMC_CMD_XFER_MODE_0_DATA_XFER_DIR_SEL_READ                    _MK_ENUM_CONST(1)

#define SDMMC_CMD_XFER_MODE_0_AUTO_CMD12_EN_SHIFT                       _MK_SHIFT_CONST(2)
#define SDMMC_CMD_XFER_MODE_0_AUTO_CMD12_EN_FIELD                       (_MK_MASK_CONST(0x1) << SDMMC_CMD_XFER_MODE_0_AUTO_CMD12_EN_SHIFT)
#define SDMMC_CMD_XFER_MODE_0_AUTO_CMD12_EN_RANGE                       2:2
#define SDMMC_CMD_XFER_MODE_0_AUTO_CMD12_EN_WOFFSET                     0x0
#define SDMMC_CMD_XFER_MODE_0_AUTO_CMD12_EN_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_AUTO_CMD12_EN_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define SDMMC_CMD_XFER_MODE_0_AUTO_CMD12_EN_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_AUTO_CMD12_EN_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_AUTO_CMD12_EN_DISABLE                     _MK_ENUM_CONST(0)
#define SDMMC_CMD_XFER_MODE_0_AUTO_CMD12_EN_ENABLE                      _MK_ENUM_CONST(1)

#define SDMMC_CMD_XFER_MODE_0_BLOCK_COUNT_EN_SHIFT                      _MK_SHIFT_CONST(1)
#define SDMMC_CMD_XFER_MODE_0_BLOCK_COUNT_EN_FIELD                      (_MK_MASK_CONST(0x1) << SDMMC_CMD_XFER_MODE_0_BLOCK_COUNT_EN_SHIFT)
#define SDMMC_CMD_XFER_MODE_0_BLOCK_COUNT_EN_RANGE                      1:1
#define SDMMC_CMD_XFER_MODE_0_BLOCK_COUNT_EN_WOFFSET                    0x0
#define SDMMC_CMD_XFER_MODE_0_BLOCK_COUNT_EN_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_BLOCK_COUNT_EN_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define SDMMC_CMD_XFER_MODE_0_BLOCK_COUNT_EN_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_BLOCK_COUNT_EN_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_BLOCK_COUNT_EN_DISABLE                    _MK_ENUM_CONST(0)
#define SDMMC_CMD_XFER_MODE_0_BLOCK_COUNT_EN_ENABLE                     _MK_ENUM_CONST(1)

#define SDMMC_CMD_XFER_MODE_0_DMA_EN_SHIFT                      _MK_SHIFT_CONST(0)
#define SDMMC_CMD_XFER_MODE_0_DMA_EN_FIELD                      (_MK_MASK_CONST(0x1) << SDMMC_CMD_XFER_MODE_0_DMA_EN_SHIFT)
#define SDMMC_CMD_XFER_MODE_0_DMA_EN_RANGE                      0:0
#define SDMMC_CMD_XFER_MODE_0_DMA_EN_WOFFSET                    0x0
#define SDMMC_CMD_XFER_MODE_0_DMA_EN_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_DMA_EN_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define SDMMC_CMD_XFER_MODE_0_DMA_EN_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_DMA_EN_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define SDMMC_CMD_XFER_MODE_0_DMA_EN_DISABLE                    _MK_ENUM_CONST(0)
#define SDMMC_CMD_XFER_MODE_0_DMA_EN_ENABLE                     _MK_ENUM_CONST(1)

//Command Response Registers
//    The Table below describes the mapping of command responses from the SD Bus to
//    this register for each response type. In the table, R[] refers to a bit range within the
//    response data as transmitted on the SD Bus, REP[] refers to a bit range within the
//    Response register.
//    
//    -------------------------------------------------------------------------------------------------------
//    |       Kind of Response     |     Meaning of Response       |  Response Field  |  Response Register  |
//    |-----------------------------------------------------------------------------------------------------|
//    |R1, R1b (normal response)   |  Card Status                  |  R [39:8]        |   REP [31:0]        |
//    |R1b (Auto CMD12 response)   |  Card Status for Auto CMD12   |  R [39:8]        |   REP [127:96]      |
//    |R2 (CID, CSD register)      |  CID or CSD reg. incl.        |  R [127:8]       |   REP [119:0]       |
//    |R3 (OCR register)           |  OCR register for memory      |  R [39:8]        |   REP [31:0]        |
//    |R4 (OCR register)           |  OCR register for I/O etc     |  R [39:8]        |   REP [31:0]        |
//    |R5,R5b                      |  SDIO response                |  R [39:8]        |   REP [31:0]        |
//    |R6 (Published RCA response) |  New published RCA[31:16] etc |  R [39:8]        |   REP [31:0]        |
//    -------------------------------------------------------------------------------------------------------
//                                Response Bit Definition for Each Response Type
// Command Response [31:0] (R0) Register
//------------------------------------------------------------------------------

// Register SDMMC_RESPONSE_R0_R1_0  
#define SDMMC_RESPONSE_R0_R1_0                  _MK_ADDR_CONST(0x10)
#define SDMMC_RESPONSE_R0_R1_0_SECURE                   0x0
#define SDMMC_RESPONSE_R0_R1_0_WORD_COUNT                       0x1
#define SDMMC_RESPONSE_R0_R1_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R0_R1_0_RESET_MASK                       _MK_MASK_CONST(0xffffffff)
#define SDMMC_RESPONSE_R0_R1_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R0_R1_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R0_R1_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define SDMMC_RESPONSE_R0_R1_0_WRITE_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R0_R1_0_CMD_RESP_31_16_SHIFT                     _MK_SHIFT_CONST(16)
#define SDMMC_RESPONSE_R0_R1_0_CMD_RESP_31_16_FIELD                     (_MK_MASK_CONST(0xffff) << SDMMC_RESPONSE_R0_R1_0_CMD_RESP_31_16_SHIFT)
#define SDMMC_RESPONSE_R0_R1_0_CMD_RESP_31_16_RANGE                     31:16
#define SDMMC_RESPONSE_R0_R1_0_CMD_RESP_31_16_WOFFSET                   0x0
#define SDMMC_RESPONSE_R0_R1_0_CMD_RESP_31_16_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R0_R1_0_CMD_RESP_31_16_DEFAULT_MASK                      _MK_MASK_CONST(0xffff)
#define SDMMC_RESPONSE_R0_R1_0_CMD_RESP_31_16_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R0_R1_0_CMD_RESP_31_16_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

#define SDMMC_RESPONSE_R0_R1_0_CMD_RESP_15_0_SHIFT                      _MK_SHIFT_CONST(0)
#define SDMMC_RESPONSE_R0_R1_0_CMD_RESP_15_0_FIELD                      (_MK_MASK_CONST(0xffff) << SDMMC_RESPONSE_R0_R1_0_CMD_RESP_15_0_SHIFT)
#define SDMMC_RESPONSE_R0_R1_0_CMD_RESP_15_0_RANGE                      15:0
#define SDMMC_RESPONSE_R0_R1_0_CMD_RESP_15_0_WOFFSET                    0x0
#define SDMMC_RESPONSE_R0_R1_0_CMD_RESP_15_0_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R0_R1_0_CMD_RESP_15_0_DEFAULT_MASK                       _MK_MASK_CONST(0xffff)
#define SDMMC_RESPONSE_R0_R1_0_CMD_RESP_15_0_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R0_R1_0_CMD_RESP_15_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Command Response [63:32] (R2) Register
//------------------------------------------------------------------------------

// Register SDMMC_RESPONSE_R2_R3_0  
#define SDMMC_RESPONSE_R2_R3_0                  _MK_ADDR_CONST(0x14)
#define SDMMC_RESPONSE_R2_R3_0_SECURE                   0x0
#define SDMMC_RESPONSE_R2_R3_0_WORD_COUNT                       0x1
#define SDMMC_RESPONSE_R2_R3_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R2_R3_0_RESET_MASK                       _MK_MASK_CONST(0xffffffff)
#define SDMMC_RESPONSE_R2_R3_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R2_R3_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R2_R3_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define SDMMC_RESPONSE_R2_R3_0_WRITE_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R2_R3_0_CMD_RESP_63_48_SHIFT                     _MK_SHIFT_CONST(16)
#define SDMMC_RESPONSE_R2_R3_0_CMD_RESP_63_48_FIELD                     (_MK_MASK_CONST(0xffff) << SDMMC_RESPONSE_R2_R3_0_CMD_RESP_63_48_SHIFT)
#define SDMMC_RESPONSE_R2_R3_0_CMD_RESP_63_48_RANGE                     31:16
#define SDMMC_RESPONSE_R2_R3_0_CMD_RESP_63_48_WOFFSET                   0x0
#define SDMMC_RESPONSE_R2_R3_0_CMD_RESP_63_48_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R2_R3_0_CMD_RESP_63_48_DEFAULT_MASK                      _MK_MASK_CONST(0xffff)
#define SDMMC_RESPONSE_R2_R3_0_CMD_RESP_63_48_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R2_R3_0_CMD_RESP_63_48_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

#define SDMMC_RESPONSE_R2_R3_0_CMD_RESP_47_32_SHIFT                     _MK_SHIFT_CONST(0)
#define SDMMC_RESPONSE_R2_R3_0_CMD_RESP_47_32_FIELD                     (_MK_MASK_CONST(0xffff) << SDMMC_RESPONSE_R2_R3_0_CMD_RESP_47_32_SHIFT)
#define SDMMC_RESPONSE_R2_R3_0_CMD_RESP_47_32_RANGE                     15:0
#define SDMMC_RESPONSE_R2_R3_0_CMD_RESP_47_32_WOFFSET                   0x0
#define SDMMC_RESPONSE_R2_R3_0_CMD_RESP_47_32_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R2_R3_0_CMD_RESP_47_32_DEFAULT_MASK                      _MK_MASK_CONST(0xffff)
#define SDMMC_RESPONSE_R2_R3_0_CMD_RESP_47_32_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R2_R3_0_CMD_RESP_47_32_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// Command Response [95:64] (R4) Register
//------------------------------------------------------------------------------

// Register SDMMC_RESPONSE_R4_R5_0  
#define SDMMC_RESPONSE_R4_R5_0                  _MK_ADDR_CONST(0x18)
#define SDMMC_RESPONSE_R4_R5_0_SECURE                   0x0
#define SDMMC_RESPONSE_R4_R5_0_WORD_COUNT                       0x1
#define SDMMC_RESPONSE_R4_R5_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R4_R5_0_RESET_MASK                       _MK_MASK_CONST(0xffffffff)
#define SDMMC_RESPONSE_R4_R5_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R4_R5_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R4_R5_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define SDMMC_RESPONSE_R4_R5_0_WRITE_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R4_R5_0_CMD_RESP_95_80_SHIFT                     _MK_SHIFT_CONST(16)
#define SDMMC_RESPONSE_R4_R5_0_CMD_RESP_95_80_FIELD                     (_MK_MASK_CONST(0xffff) << SDMMC_RESPONSE_R4_R5_0_CMD_RESP_95_80_SHIFT)
#define SDMMC_RESPONSE_R4_R5_0_CMD_RESP_95_80_RANGE                     31:16
#define SDMMC_RESPONSE_R4_R5_0_CMD_RESP_95_80_WOFFSET                   0x0
#define SDMMC_RESPONSE_R4_R5_0_CMD_RESP_95_80_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R4_R5_0_CMD_RESP_95_80_DEFAULT_MASK                      _MK_MASK_CONST(0xffff)
#define SDMMC_RESPONSE_R4_R5_0_CMD_RESP_95_80_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R4_R5_0_CMD_RESP_95_80_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

#define SDMMC_RESPONSE_R4_R5_0_CMD_RESP_79_64_SHIFT                     _MK_SHIFT_CONST(0)
#define SDMMC_RESPONSE_R4_R5_0_CMD_RESP_79_64_FIELD                     (_MK_MASK_CONST(0xffff) << SDMMC_RESPONSE_R4_R5_0_CMD_RESP_79_64_SHIFT)
#define SDMMC_RESPONSE_R4_R5_0_CMD_RESP_79_64_RANGE                     15:0
#define SDMMC_RESPONSE_R4_R5_0_CMD_RESP_79_64_WOFFSET                   0x0
#define SDMMC_RESPONSE_R4_R5_0_CMD_RESP_79_64_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R4_R5_0_CMD_RESP_79_64_DEFAULT_MASK                      _MK_MASK_CONST(0xffff)
#define SDMMC_RESPONSE_R4_R5_0_CMD_RESP_79_64_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R4_R5_0_CMD_RESP_79_64_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// Command Response [127:96] (R6) Register
//------------------------------------------------------------------------------

// Register SDMMC_RESPONSE_R6_R7_0  
#define SDMMC_RESPONSE_R6_R7_0                  _MK_ADDR_CONST(0x1c)
#define SDMMC_RESPONSE_R6_R7_0_SECURE                   0x0
#define SDMMC_RESPONSE_R6_R7_0_WORD_COUNT                       0x1
#define SDMMC_RESPONSE_R6_R7_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R6_R7_0_RESET_MASK                       _MK_MASK_CONST(0xffffffff)
#define SDMMC_RESPONSE_R6_R7_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R6_R7_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R6_R7_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define SDMMC_RESPONSE_R6_R7_0_WRITE_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R6_R7_0_CMD_RESP_127_112_SHIFT                   _MK_SHIFT_CONST(16)
#define SDMMC_RESPONSE_R6_R7_0_CMD_RESP_127_112_FIELD                   (_MK_MASK_CONST(0xffff) << SDMMC_RESPONSE_R6_R7_0_CMD_RESP_127_112_SHIFT)
#define SDMMC_RESPONSE_R6_R7_0_CMD_RESP_127_112_RANGE                   31:16
#define SDMMC_RESPONSE_R6_R7_0_CMD_RESP_127_112_WOFFSET                 0x0
#define SDMMC_RESPONSE_R6_R7_0_CMD_RESP_127_112_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R6_R7_0_CMD_RESP_127_112_DEFAULT_MASK                    _MK_MASK_CONST(0xffff)
#define SDMMC_RESPONSE_R6_R7_0_CMD_RESP_127_112_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R6_R7_0_CMD_RESP_127_112_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

#define SDMMC_RESPONSE_R6_R7_0_CMD_RESP_111_96_SHIFT                    _MK_SHIFT_CONST(0)
#define SDMMC_RESPONSE_R6_R7_0_CMD_RESP_111_96_FIELD                    (_MK_MASK_CONST(0xffff) << SDMMC_RESPONSE_R6_R7_0_CMD_RESP_111_96_SHIFT)
#define SDMMC_RESPONSE_R6_R7_0_CMD_RESP_111_96_RANGE                    15:0
#define SDMMC_RESPONSE_R6_R7_0_CMD_RESP_111_96_WOFFSET                  0x0
#define SDMMC_RESPONSE_R6_R7_0_CMD_RESP_111_96_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R6_R7_0_CMD_RESP_111_96_DEFAULT_MASK                     _MK_MASK_CONST(0xffff)
#define SDMMC_RESPONSE_R6_R7_0_CMD_RESP_111_96_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_RESPONSE_R6_R7_0_CMD_RESP_111_96_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Buffer Data Port Register
//------------------------------------------------------------------------------
//The Host Controller Buffer can be accessed through  this 32-bit Data Port Register.

// Register SDMMC_BUFFER_DATA_PORT_0  
#define SDMMC_BUFFER_DATA_PORT_0                        _MK_ADDR_CONST(0x20)
#define SDMMC_BUFFER_DATA_PORT_0_SECURE                         0x0
#define SDMMC_BUFFER_DATA_PORT_0_WORD_COUNT                     0x1
#define SDMMC_BUFFER_DATA_PORT_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define SDMMC_BUFFER_DATA_PORT_0_RESET_MASK                     _MK_MASK_CONST(0xffffffff)
#define SDMMC_BUFFER_DATA_PORT_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define SDMMC_BUFFER_DATA_PORT_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define SDMMC_BUFFER_DATA_PORT_0_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define SDMMC_BUFFER_DATA_PORT_0_WRITE_MASK                     _MK_MASK_CONST(0xffffffff)
// 
#define SDMMC_BUFFER_DATA_PORT_0_BUFFER_DATA_SHIFT                      _MK_SHIFT_CONST(0)
#define SDMMC_BUFFER_DATA_PORT_0_BUFFER_DATA_FIELD                      (_MK_MASK_CONST(0xffffffff) << SDMMC_BUFFER_DATA_PORT_0_BUFFER_DATA_SHIFT)
#define SDMMC_BUFFER_DATA_PORT_0_BUFFER_DATA_RANGE                      31:0
#define SDMMC_BUFFER_DATA_PORT_0_BUFFER_DATA_WOFFSET                    0x0
#define SDMMC_BUFFER_DATA_PORT_0_BUFFER_DATA_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_BUFFER_DATA_PORT_0_BUFFER_DATA_DEFAULT_MASK                       _MK_MASK_CONST(0xffffffff)
#define SDMMC_BUFFER_DATA_PORT_0_BUFFER_DATA_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_BUFFER_DATA_PORT_0_BUFFER_DATA_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Present State Register
//------------------------------------------------------------------------------
//DAT_7_4_LINE_LEVEL - DAT[7:4] Line Signal Level(VENDOR Bit)
//    This status is used to check the DAT line level to recover from errors, and for
//    debugging.
//CMD_LINE_LEVEL - CMD Line Signal Level
//    This status is used to check the CMD line level to recover from errors, and
//    for debugging.
//DAT_3_0_LINE_LEVEL - DAT[3:0] Line Signal Level
//    This status is used to check the DAT line level to recover from errors, and for
//    debugging. This is especially useful in detecting the busy signal level from
//    DAT[0].
//WRITE_PROTECT_LEVEL - Write Protect Switch Pin Level
//CARD_DETECT_PIN_LEVEL - Card Detect Pin Level
//CARD_STATE_STABLE - Card State Stable
//CARD_INSERTED - Card Inserted
//BUFFER_READ_EN - Buffer Read Enable
//    This status is used for non-DMA read transfers.
//BUFFER_WRITE_EN - Buffer Write Enable
//    This status is used for non-DMA write transfers.
//READ_XFER_ACTIVE - Read Transfer Active
//WRITE_XFER_ACTIVE - Write Transfer Active
//DAT_LINE_ACTIVE - DAT Line Active
//CMD_INHIBIT_DAT - Command Inhibit (DAT)
//CMD_INHIBIT_CMD - Command Inhibit (CMD)

// Register SDMMC_PRESENT_STATE_0  
#define SDMMC_PRESENT_STATE_0                   _MK_ADDR_CONST(0x24)
#define SDMMC_PRESENT_STATE_0_SECURE                    0x0
#define SDMMC_PRESENT_STATE_0_WORD_COUNT                        0x1
#define SDMMC_PRESENT_STATE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_RESET_MASK                        _MK_MASK_CONST(0x1fff0f07)
#define SDMMC_PRESENT_STATE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_READ_MASK                         _MK_MASK_CONST(0x1fff0f07)
#define SDMMC_PRESENT_STATE_0_WRITE_MASK                        _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_DAT_7_4_LINE_LEVEL_SHIFT                  _MK_SHIFT_CONST(25)
#define SDMMC_PRESENT_STATE_0_DAT_7_4_LINE_LEVEL_FIELD                  (_MK_MASK_CONST(0xf) << SDMMC_PRESENT_STATE_0_DAT_7_4_LINE_LEVEL_SHIFT)
#define SDMMC_PRESENT_STATE_0_DAT_7_4_LINE_LEVEL_RANGE                  28:25
#define SDMMC_PRESENT_STATE_0_DAT_7_4_LINE_LEVEL_WOFFSET                        0x0
#define SDMMC_PRESENT_STATE_0_DAT_7_4_LINE_LEVEL_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_DAT_7_4_LINE_LEVEL_DEFAULT_MASK                   _MK_MASK_CONST(0xf)
#define SDMMC_PRESENT_STATE_0_DAT_7_4_LINE_LEVEL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_DAT_7_4_LINE_LEVEL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define SDMMC_PRESENT_STATE_0_CMD_LINE_LEVEL_SHIFT                      _MK_SHIFT_CONST(24)
#define SDMMC_PRESENT_STATE_0_CMD_LINE_LEVEL_FIELD                      (_MK_MASK_CONST(0x1) << SDMMC_PRESENT_STATE_0_CMD_LINE_LEVEL_SHIFT)
#define SDMMC_PRESENT_STATE_0_CMD_LINE_LEVEL_RANGE                      24:24
#define SDMMC_PRESENT_STATE_0_CMD_LINE_LEVEL_WOFFSET                    0x0
#define SDMMC_PRESENT_STATE_0_CMD_LINE_LEVEL_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_CMD_LINE_LEVEL_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define SDMMC_PRESENT_STATE_0_CMD_LINE_LEVEL_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_CMD_LINE_LEVEL_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_CMD_LINE_LEVEL_LOW                        _MK_ENUM_CONST(0)
#define SDMMC_PRESENT_STATE_0_CMD_LINE_LEVEL_HIGH                       _MK_ENUM_CONST(1)

#define SDMMC_PRESENT_STATE_0_DAT_3_0_LINE_LEVEL_SHIFT                  _MK_SHIFT_CONST(20)
#define SDMMC_PRESENT_STATE_0_DAT_3_0_LINE_LEVEL_FIELD                  (_MK_MASK_CONST(0xf) << SDMMC_PRESENT_STATE_0_DAT_3_0_LINE_LEVEL_SHIFT)
#define SDMMC_PRESENT_STATE_0_DAT_3_0_LINE_LEVEL_RANGE                  23:20
#define SDMMC_PRESENT_STATE_0_DAT_3_0_LINE_LEVEL_WOFFSET                        0x0
#define SDMMC_PRESENT_STATE_0_DAT_3_0_LINE_LEVEL_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_DAT_3_0_LINE_LEVEL_DEFAULT_MASK                   _MK_MASK_CONST(0xf)
#define SDMMC_PRESENT_STATE_0_DAT_3_0_LINE_LEVEL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_DAT_3_0_LINE_LEVEL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define SDMMC_PRESENT_STATE_0_WRITE_PROTECT_LEVEL_SHIFT                 _MK_SHIFT_CONST(19)
#define SDMMC_PRESENT_STATE_0_WRITE_PROTECT_LEVEL_FIELD                 (_MK_MASK_CONST(0x1) << SDMMC_PRESENT_STATE_0_WRITE_PROTECT_LEVEL_SHIFT)
#define SDMMC_PRESENT_STATE_0_WRITE_PROTECT_LEVEL_RANGE                 19:19
#define SDMMC_PRESENT_STATE_0_WRITE_PROTECT_LEVEL_WOFFSET                       0x0
#define SDMMC_PRESENT_STATE_0_WRITE_PROTECT_LEVEL_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_WRITE_PROTECT_LEVEL_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SDMMC_PRESENT_STATE_0_WRITE_PROTECT_LEVEL_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_WRITE_PROTECT_LEVEL_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_WRITE_PROTECT_LEVEL_PROTECTED                     _MK_ENUM_CONST(0)
#define SDMMC_PRESENT_STATE_0_WRITE_PROTECT_LEVEL_ENABLED                       _MK_ENUM_CONST(1)

#define SDMMC_PRESENT_STATE_0_CARD_DETECT_PIN_LEVEL_SHIFT                       _MK_SHIFT_CONST(18)
#define SDMMC_PRESENT_STATE_0_CARD_DETECT_PIN_LEVEL_FIELD                       (_MK_MASK_CONST(0x1) << SDMMC_PRESENT_STATE_0_CARD_DETECT_PIN_LEVEL_SHIFT)
#define SDMMC_PRESENT_STATE_0_CARD_DETECT_PIN_LEVEL_RANGE                       18:18
#define SDMMC_PRESENT_STATE_0_CARD_DETECT_PIN_LEVEL_WOFFSET                     0x0
#define SDMMC_PRESENT_STATE_0_CARD_DETECT_PIN_LEVEL_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_CARD_DETECT_PIN_LEVEL_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define SDMMC_PRESENT_STATE_0_CARD_DETECT_PIN_LEVEL_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_CARD_DETECT_PIN_LEVEL_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_CARD_DETECT_PIN_LEVEL_NO_CARD                     _MK_ENUM_CONST(0)
#define SDMMC_PRESENT_STATE_0_CARD_DETECT_PIN_LEVEL_CARD                        _MK_ENUM_CONST(1)

#define SDMMC_PRESENT_STATE_0_CARD_STATE_STABLE_SHIFT                   _MK_SHIFT_CONST(17)
#define SDMMC_PRESENT_STATE_0_CARD_STATE_STABLE_FIELD                   (_MK_MASK_CONST(0x1) << SDMMC_PRESENT_STATE_0_CARD_STATE_STABLE_SHIFT)
#define SDMMC_PRESENT_STATE_0_CARD_STATE_STABLE_RANGE                   17:17
#define SDMMC_PRESENT_STATE_0_CARD_STATE_STABLE_WOFFSET                 0x0
#define SDMMC_PRESENT_STATE_0_CARD_STATE_STABLE_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_CARD_STATE_STABLE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define SDMMC_PRESENT_STATE_0_CARD_STATE_STABLE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_CARD_STATE_STABLE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_CARD_STATE_STABLE_DEBOUNCE                        _MK_ENUM_CONST(0)
#define SDMMC_PRESENT_STATE_0_CARD_STATE_STABLE_INSERTED                        _MK_ENUM_CONST(1)

#define SDMMC_PRESENT_STATE_0_CARD_INSERTED_SHIFT                       _MK_SHIFT_CONST(16)
#define SDMMC_PRESENT_STATE_0_CARD_INSERTED_FIELD                       (_MK_MASK_CONST(0x1) << SDMMC_PRESENT_STATE_0_CARD_INSERTED_SHIFT)
#define SDMMC_PRESENT_STATE_0_CARD_INSERTED_RANGE                       16:16
#define SDMMC_PRESENT_STATE_0_CARD_INSERTED_WOFFSET                     0x0
#define SDMMC_PRESENT_STATE_0_CARD_INSERTED_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_CARD_INSERTED_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define SDMMC_PRESENT_STATE_0_CARD_INSERTED_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_CARD_INSERTED_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_CARD_INSERTED_DEBOUNCE                    _MK_ENUM_CONST(0)
#define SDMMC_PRESENT_STATE_0_CARD_INSERTED_INSERTED                    _MK_ENUM_CONST(1)

#define SDMMC_PRESENT_STATE_0_BUFFER_READ_EN_SHIFT                      _MK_SHIFT_CONST(11)
#define SDMMC_PRESENT_STATE_0_BUFFER_READ_EN_FIELD                      (_MK_MASK_CONST(0x1) << SDMMC_PRESENT_STATE_0_BUFFER_READ_EN_SHIFT)
#define SDMMC_PRESENT_STATE_0_BUFFER_READ_EN_RANGE                      11:11
#define SDMMC_PRESENT_STATE_0_BUFFER_READ_EN_WOFFSET                    0x0
#define SDMMC_PRESENT_STATE_0_BUFFER_READ_EN_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_BUFFER_READ_EN_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define SDMMC_PRESENT_STATE_0_BUFFER_READ_EN_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_BUFFER_READ_EN_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_BUFFER_READ_EN_DISABLE                    _MK_ENUM_CONST(0)
#define SDMMC_PRESENT_STATE_0_BUFFER_READ_EN_ENABLE                     _MK_ENUM_CONST(1)

#define SDMMC_PRESENT_STATE_0_BUFFER_WRITE_EN_SHIFT                     _MK_SHIFT_CONST(10)
#define SDMMC_PRESENT_STATE_0_BUFFER_WRITE_EN_FIELD                     (_MK_MASK_CONST(0x1) << SDMMC_PRESENT_STATE_0_BUFFER_WRITE_EN_SHIFT)
#define SDMMC_PRESENT_STATE_0_BUFFER_WRITE_EN_RANGE                     10:10
#define SDMMC_PRESENT_STATE_0_BUFFER_WRITE_EN_WOFFSET                   0x0
#define SDMMC_PRESENT_STATE_0_BUFFER_WRITE_EN_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_BUFFER_WRITE_EN_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define SDMMC_PRESENT_STATE_0_BUFFER_WRITE_EN_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_BUFFER_WRITE_EN_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_BUFFER_WRITE_EN_DISABLE                   _MK_ENUM_CONST(0)
#define SDMMC_PRESENT_STATE_0_BUFFER_WRITE_EN_ENABLE                    _MK_ENUM_CONST(1)

#define SDMMC_PRESENT_STATE_0_READ_XFER_ACTIVE_SHIFT                    _MK_SHIFT_CONST(9)
#define SDMMC_PRESENT_STATE_0_READ_XFER_ACTIVE_FIELD                    (_MK_MASK_CONST(0x1) << SDMMC_PRESENT_STATE_0_READ_XFER_ACTIVE_SHIFT)
#define SDMMC_PRESENT_STATE_0_READ_XFER_ACTIVE_RANGE                    9:9
#define SDMMC_PRESENT_STATE_0_READ_XFER_ACTIVE_WOFFSET                  0x0
#define SDMMC_PRESENT_STATE_0_READ_XFER_ACTIVE_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_READ_XFER_ACTIVE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define SDMMC_PRESENT_STATE_0_READ_XFER_ACTIVE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_READ_XFER_ACTIVE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_READ_XFER_ACTIVE_NO_DATA                  _MK_ENUM_CONST(0)
#define SDMMC_PRESENT_STATE_0_READ_XFER_ACTIVE_TRANSFERING                      _MK_ENUM_CONST(1)

#define SDMMC_PRESENT_STATE_0_WRITE_XFER_ACTIVE_SHIFT                   _MK_SHIFT_CONST(8)
#define SDMMC_PRESENT_STATE_0_WRITE_XFER_ACTIVE_FIELD                   (_MK_MASK_CONST(0x1) << SDMMC_PRESENT_STATE_0_WRITE_XFER_ACTIVE_SHIFT)
#define SDMMC_PRESENT_STATE_0_WRITE_XFER_ACTIVE_RANGE                   8:8
#define SDMMC_PRESENT_STATE_0_WRITE_XFER_ACTIVE_WOFFSET                 0x0
#define SDMMC_PRESENT_STATE_0_WRITE_XFER_ACTIVE_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_WRITE_XFER_ACTIVE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define SDMMC_PRESENT_STATE_0_WRITE_XFER_ACTIVE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_WRITE_XFER_ACTIVE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_WRITE_XFER_ACTIVE_NO_DATA                 _MK_ENUM_CONST(0)
#define SDMMC_PRESENT_STATE_0_WRITE_XFER_ACTIVE_TRANSFERING                     _MK_ENUM_CONST(1)

#define SDMMC_PRESENT_STATE_0_DAT_LINE_ACTIVE_SHIFT                     _MK_SHIFT_CONST(2)
#define SDMMC_PRESENT_STATE_0_DAT_LINE_ACTIVE_FIELD                     (_MK_MASK_CONST(0x1) << SDMMC_PRESENT_STATE_0_DAT_LINE_ACTIVE_SHIFT)
#define SDMMC_PRESENT_STATE_0_DAT_LINE_ACTIVE_RANGE                     2:2
#define SDMMC_PRESENT_STATE_0_DAT_LINE_ACTIVE_WOFFSET                   0x0
#define SDMMC_PRESENT_STATE_0_DAT_LINE_ACTIVE_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_DAT_LINE_ACTIVE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define SDMMC_PRESENT_STATE_0_DAT_LINE_ACTIVE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_DAT_LINE_ACTIVE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_DAT_LINE_ACTIVE_INACTIVE                  _MK_ENUM_CONST(0)
#define SDMMC_PRESENT_STATE_0_DAT_LINE_ACTIVE_ACTIVE                    _MK_ENUM_CONST(1)

#define SDMMC_PRESENT_STATE_0_CMD_INHIBIT_DAT_SHIFT                     _MK_SHIFT_CONST(1)
#define SDMMC_PRESENT_STATE_0_CMD_INHIBIT_DAT_FIELD                     (_MK_MASK_CONST(0x1) << SDMMC_PRESENT_STATE_0_CMD_INHIBIT_DAT_SHIFT)
#define SDMMC_PRESENT_STATE_0_CMD_INHIBIT_DAT_RANGE                     1:1
#define SDMMC_PRESENT_STATE_0_CMD_INHIBIT_DAT_WOFFSET                   0x0
#define SDMMC_PRESENT_STATE_0_CMD_INHIBIT_DAT_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_CMD_INHIBIT_DAT_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define SDMMC_PRESENT_STATE_0_CMD_INHIBIT_DAT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_CMD_INHIBIT_DAT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_CMD_INHIBIT_DAT_INACTIVE                  _MK_ENUM_CONST(0)
#define SDMMC_PRESENT_STATE_0_CMD_INHIBIT_DAT_ACTIVE                    _MK_ENUM_CONST(1)

#define SDMMC_PRESENT_STATE_0_CMD_INHIBIT_CMD_SHIFT                     _MK_SHIFT_CONST(0)
#define SDMMC_PRESENT_STATE_0_CMD_INHIBIT_CMD_FIELD                     (_MK_MASK_CONST(0x1) << SDMMC_PRESENT_STATE_0_CMD_INHIBIT_CMD_SHIFT)
#define SDMMC_PRESENT_STATE_0_CMD_INHIBIT_CMD_RANGE                     0:0
#define SDMMC_PRESENT_STATE_0_CMD_INHIBIT_CMD_WOFFSET                   0x0
#define SDMMC_PRESENT_STATE_0_CMD_INHIBIT_CMD_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_CMD_INHIBIT_CMD_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define SDMMC_PRESENT_STATE_0_CMD_INHIBIT_CMD_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_CMD_INHIBIT_CMD_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SDMMC_PRESENT_STATE_0_CMD_INHIBIT_CMD_INACTIVE                  _MK_ENUM_CONST(0)
#define SDMMC_PRESENT_STATE_0_CMD_INHIBIT_CMD_ACTIVE                    _MK_ENUM_CONST(1)

// Power Control / Host Control Register
//------------------------------------------------------------------------------
//WAKEUP_ON_CARD_REMOVAL - Wakeup Event Enable On SD Card Removal
//    This bit enables wakeup event via Card Removal assertion in the Normal Interrupt
//    Status register. FN_WUS (Wake Up Support) in CIS does not affect this bit.
//WAKEUP_ON_CARD_INSERTION - Wakeup Event Enable On SD Card Insertion
//    This bit enables wakeup event via Card Insertion assertion in the Normal Interrupt
//    Status register. FN_WUS (Wake Up Support) in CIS does not affect this bit.
//WAKEUP_ON_CARD_INTERRUPT - Wakeup Event Enable On Card Interrupt
//    This bit enables wakeup event via Card Interrupt assertion in the Normal Interrupt
//    Status register. This bit can be set to 1 if FN_WUS (Wake Up Support) in CIS is set
//    to 1.
//INTERRUPT_AT_BLOCK_GAP - Interrupt At Block Gap
//    This bit is valid only in 4-bit mode of the SDIO card and selects a sample point in
//    the interrupt cycle. Setting to 1 enables interrupt detection at the block gap for a
//    multiple block transfer. Setting to 0 disables interrupt detection during a multiple
//    block transfer. If the SD card cannot signal an interrupt during a multiple block
//    transfer, this bit should be set to 0. When the Host Driver detects an SD card
//    insertion, it shall set this bit according to the CCCR of the SDIO card.
//READ_WAIT_CONTROL - Read Wait Control
//    The read wait function is optional for SDIO cards. If the card supports read wait,
//    set this bit to enable use of the read wait protocol to stop read data using the
//    DAT[2] line. Otherwise, the Host Controller has to stop the SD Clock to hold read
//    data, which restricts commands generation. When the Host Driver detects an SD
//    card insertion, it shall set this bit according to the CCCR of the SDIO card. If the
//    card does not support read wait, this bit shall never be set to 1 otherwise DAT line
//    conflict may occur. If this bit is set to 0, Suspend/Resume cannot be supported.
//CONTINUE_REQUEST - Continue Request
//    This bit is used to restart a transaction, which was stopped using the Stop At
//    Block Gap Request. To cancel stop at the block gap, set Stop At Block Gap
//    Request to 0 and set this bit 1 to restart the transfer.
//    The Host Controller automatically clears this bit in either of the following cases:
//      (1) In the case of a read transaction, the DAT Line Active changes from 0 to 1
//      as a read transaction restarts.
//      (2) In the case of a write transaction, the Write Transfer Active changes from 0
//      to 1 as the write transaction restarts.
//    Therefore, it is not necessary for Host Driver to set this bit to 0. If Stop At Block
//    Gap Request is set to 1, any write to this bit is ignored.
//STOP_AT_BLOCK_GAP_REQUEST - Stop At Block Gap Request
//    This bit is used to stop executing read and write transaction at the next block gap
//    for non-DMA, SDMA and ADMA transfers. The Host Driver shall leave this bit set
//    to 1 until the Transfer Complete is set to 1. Clearing both Stop At Block Gap
//    Request and Continue Request shall not cause the transaction to restart. When
//    Host Controller version is 1.00, the Host Driver can set this bit if the card supports
//    Read Wait Control. When Host Controller version is 2.00 or higher, the Host
//    Driver can set this bit regardless of the card supports Read Wait Control. The
//    Host Controller shall stop read transfer by using Read Wait or stopping SD clock.
//    In case of write transfers in which the Host Driver writes data to the Buffer Data
//    Port register, the Host Driver shall set this bit after all block data is written. If this
//    bit is set to 1, the Host Driver shall not write data to Buffer Data Port register.
//    This bit affects Read Transfer Active, Write Transfer Active, DAT Line Active
//    and Command Inhibit (DAT) in the Present State register.
//    Regarding detailed control of bits D01 and D00, refer to Section 3.8 and 3.12.
//SD_BUS_VOLTAGE_SELECT - SD Bus Voltage Select
//    By setting these bits, the Host Driver selects the voltage level for the SD card.
//    Before setting this register, the Host Driver shall check the Voltage Support bits in
//    the Capabilities register. If an unsupported voltage is selected, the Host System
//    shall not supply SD Bus voltage.
//      111b 3.3V (Typ.)
//      110b 3.0V (Typ.)
//      101b 1.8V (Typ.)
//      100b  000b Reserved
//SD_BUS_POWER - SD Bus Power
//    Before setting this bit, the SD Host Driver shall set SD Bus Voltage Select. If the
//    Host Controller detects the No Card state, this bit shall be cleared.
//    If this bit is cleared, the Host Controller shall immediately stop driving CMD and
//    DAT[3:0] (tri-state) and drive SDCLK to low level (refer to Section 2.2.14).
//CARD_DETECT_SIGNAL_DETECT - Card Detect Signal Selection
//    This bit selects source for the card detection.
//    When the source for the card detection is switched, the interrupt should be disabled
//    during the switching period by clearing the Interrupt Status/Signal Enable register
//    in order to mask unexpected interrupt being caused by the glitch.
//    The Interrupt Status/Signal Enable should be disabled during over the period of
//    debouncing.
//CARD_DETECT_TEST_LVL - Card Detect Test Level
//    This bit is enabled while the Card Detect Signal Selection is set to 1 and it indicates
//    card inserted or not.
//EXTENDED_DATA_TRANSFER_WIDTH (VENDOR Bit)
//      1:8-bit Mode,DATA_XFER_WIDTH is ignored.
//          0:Card Bust is as per DATA_XFER_WIDTH value
//DMA_SELECT - DMA Select
//    One of supported DMA modes can be selected. The host driver shall check support
//    of DMA modes by referring the Capabilities register. Use of selected DMA is
//    determined by DMA Enable of the Transfer Mode register.
//      00 SDMA is selected
//      01 32-bit Address ADMA1 is selected(VENDOR Definition)
//      10 32-bit Address ADMA2 is selected
//      11 64-bit Address ADMA2 is selected (VENDOR Definition: 1xh is considered as ADMA2.)
//HIGH_SPEED_EN - High Speed Enable
//    This bit is optional. Before setting this bit, the Host Driver shall check the High
//    Speed Support in the Capabilities register. If this bit is set to 0 (default), the Host
//    Controller outputs CMD line and DAT lines at the falling edge of the SD Clock (up to
//    25MHz). If this bit is set to 1, the Host Controller outputs CMD line and DAT lines at
//    the rising edge of the SD Clock (up to 50MHz).
//DATA_XFER_WIDTH - Data Transfer Width
//    This bit selects the data width of the Host Controller. The Host Driver shall set it to
//    match the data width of the SD card.
//LED_CONTROL - LED Control
//    This bit is used to caution the user not to remove the card while the SD card is
//    being accessed. If the software is going to issue multiple SD commands, this bit
//    can be set during all these transactions. It is not necessary to change for each
//    transaction.

// Register SDMMC_POWER_CONTROL_HOST_0  
#define SDMMC_POWER_CONTROL_HOST_0                      _MK_ADDR_CONST(0x28)
#define SDMMC_POWER_CONTROL_HOST_0_SECURE                       0x0
#define SDMMC_POWER_CONTROL_HOST_0_WORD_COUNT                   0x1
#define SDMMC_POWER_CONTROL_HOST_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_RESET_MASK                   _MK_MASK_CONST(0x70f0fff)
#define SDMMC_POWER_CONTROL_HOST_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_READ_MASK                    _MK_MASK_CONST(0x70f0fff)
#define SDMMC_POWER_CONTROL_HOST_0_WRITE_MASK                   _MK_MASK_CONST(0x70f0fff)
#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_REMOVAL_SHIFT                 _MK_SHIFT_CONST(26)
#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_REMOVAL_FIELD                 (_MK_MASK_CONST(0x1) << SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_REMOVAL_SHIFT)
#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_REMOVAL_RANGE                 26:26
#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_REMOVAL_WOFFSET                       0x0
#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_REMOVAL_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_REMOVAL_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_REMOVAL_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_REMOVAL_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_REMOVAL_DISABLE                       _MK_ENUM_CONST(0)
#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_REMOVAL_ENABLE                        _MK_ENUM_CONST(1)

#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_INSERTION_SHIFT                       _MK_SHIFT_CONST(25)
#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_INSERTION_FIELD                       (_MK_MASK_CONST(0x1) << SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_INSERTION_SHIFT)
#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_INSERTION_RANGE                       25:25
#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_INSERTION_WOFFSET                     0x0
#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_INSERTION_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_INSERTION_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_INSERTION_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_INSERTION_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_INSERTION_DISABLE                     _MK_ENUM_CONST(0)
#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_INSERTION_ENABLE                      _MK_ENUM_CONST(1)

#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_INTERRUPT_SHIFT                       _MK_SHIFT_CONST(24)
#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_INTERRUPT_FIELD                       (_MK_MASK_CONST(0x1) << SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_INTERRUPT_SHIFT)
#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_INTERRUPT_RANGE                       24:24
#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_INTERRUPT_WOFFSET                     0x0
#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_INTERRUPT_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_INTERRUPT_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_INTERRUPT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_INTERRUPT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_INTERRUPT_DISABLE                     _MK_ENUM_CONST(0)
#define SDMMC_POWER_CONTROL_HOST_0_WAKEUP_ON_CARD_INTERRUPT_ENABLE                      _MK_ENUM_CONST(1)

#define SDMMC_POWER_CONTROL_HOST_0_INTERRUPT_AT_BLOCK_GAP_SHIFT                 _MK_SHIFT_CONST(19)
#define SDMMC_POWER_CONTROL_HOST_0_INTERRUPT_AT_BLOCK_GAP_FIELD                 (_MK_MASK_CONST(0x1) << SDMMC_POWER_CONTROL_HOST_0_INTERRUPT_AT_BLOCK_GAP_SHIFT)
#define SDMMC_POWER_CONTROL_HOST_0_INTERRUPT_AT_BLOCK_GAP_RANGE                 19:19
#define SDMMC_POWER_CONTROL_HOST_0_INTERRUPT_AT_BLOCK_GAP_WOFFSET                       0x0
#define SDMMC_POWER_CONTROL_HOST_0_INTERRUPT_AT_BLOCK_GAP_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_INTERRUPT_AT_BLOCK_GAP_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SDMMC_POWER_CONTROL_HOST_0_INTERRUPT_AT_BLOCK_GAP_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_INTERRUPT_AT_BLOCK_GAP_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_INTERRUPT_AT_BLOCK_GAP_DISABLE                       _MK_ENUM_CONST(0)
#define SDMMC_POWER_CONTROL_HOST_0_INTERRUPT_AT_BLOCK_GAP_ENABLE                        _MK_ENUM_CONST(1)

#define SDMMC_POWER_CONTROL_HOST_0_READ_WAIT_CONTROL_SHIFT                      _MK_SHIFT_CONST(18)
#define SDMMC_POWER_CONTROL_HOST_0_READ_WAIT_CONTROL_FIELD                      (_MK_MASK_CONST(0x1) << SDMMC_POWER_CONTROL_HOST_0_READ_WAIT_CONTROL_SHIFT)
#define SDMMC_POWER_CONTROL_HOST_0_READ_WAIT_CONTROL_RANGE                      18:18
#define SDMMC_POWER_CONTROL_HOST_0_READ_WAIT_CONTROL_WOFFSET                    0x0
#define SDMMC_POWER_CONTROL_HOST_0_READ_WAIT_CONTROL_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_READ_WAIT_CONTROL_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define SDMMC_POWER_CONTROL_HOST_0_READ_WAIT_CONTROL_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_READ_WAIT_CONTROL_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_READ_WAIT_CONTROL_DISABLE                    _MK_ENUM_CONST(0)
#define SDMMC_POWER_CONTROL_HOST_0_READ_WAIT_CONTROL_ENABLE                     _MK_ENUM_CONST(1)

#define SDMMC_POWER_CONTROL_HOST_0_CONTINUE_REQUEST_SHIFT                       _MK_SHIFT_CONST(17)
#define SDMMC_POWER_CONTROL_HOST_0_CONTINUE_REQUEST_FIELD                       (_MK_MASK_CONST(0x1) << SDMMC_POWER_CONTROL_HOST_0_CONTINUE_REQUEST_SHIFT)
#define SDMMC_POWER_CONTROL_HOST_0_CONTINUE_REQUEST_RANGE                       17:17
#define SDMMC_POWER_CONTROL_HOST_0_CONTINUE_REQUEST_WOFFSET                     0x0
#define SDMMC_POWER_CONTROL_HOST_0_CONTINUE_REQUEST_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_CONTINUE_REQUEST_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define SDMMC_POWER_CONTROL_HOST_0_CONTINUE_REQUEST_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_CONTINUE_REQUEST_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_CONTINUE_REQUEST_IGNORED                     _MK_ENUM_CONST(0)
#define SDMMC_POWER_CONTROL_HOST_0_CONTINUE_REQUEST_RESTART                     _MK_ENUM_CONST(1)

#define SDMMC_POWER_CONTROL_HOST_0_STOP_AT_BLOCK_GAP_REQUEST_SHIFT                      _MK_SHIFT_CONST(16)
#define SDMMC_POWER_CONTROL_HOST_0_STOP_AT_BLOCK_GAP_REQUEST_FIELD                      (_MK_MASK_CONST(0x1) << SDMMC_POWER_CONTROL_HOST_0_STOP_AT_BLOCK_GAP_REQUEST_SHIFT)
#define SDMMC_POWER_CONTROL_HOST_0_STOP_AT_BLOCK_GAP_REQUEST_RANGE                      16:16
#define SDMMC_POWER_CONTROL_HOST_0_STOP_AT_BLOCK_GAP_REQUEST_WOFFSET                    0x0
#define SDMMC_POWER_CONTROL_HOST_0_STOP_AT_BLOCK_GAP_REQUEST_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_STOP_AT_BLOCK_GAP_REQUEST_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define SDMMC_POWER_CONTROL_HOST_0_STOP_AT_BLOCK_GAP_REQUEST_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_STOP_AT_BLOCK_GAP_REQUEST_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_STOP_AT_BLOCK_GAP_REQUEST_STOP                       _MK_ENUM_CONST(0)
#define SDMMC_POWER_CONTROL_HOST_0_STOP_AT_BLOCK_GAP_REQUEST_TRANSFER                   _MK_ENUM_CONST(1)

#define SDMMC_POWER_CONTROL_HOST_0_SD_BUS_VOLTAGE_SELECT_SHIFT                  _MK_SHIFT_CONST(9)
#define SDMMC_POWER_CONTROL_HOST_0_SD_BUS_VOLTAGE_SELECT_FIELD                  (_MK_MASK_CONST(0x7) << SDMMC_POWER_CONTROL_HOST_0_SD_BUS_VOLTAGE_SELECT_SHIFT)
#define SDMMC_POWER_CONTROL_HOST_0_SD_BUS_VOLTAGE_SELECT_RANGE                  11:9
#define SDMMC_POWER_CONTROL_HOST_0_SD_BUS_VOLTAGE_SELECT_WOFFSET                        0x0
#define SDMMC_POWER_CONTROL_HOST_0_SD_BUS_VOLTAGE_SELECT_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_SD_BUS_VOLTAGE_SELECT_DEFAULT_MASK                   _MK_MASK_CONST(0x7)
#define SDMMC_POWER_CONTROL_HOST_0_SD_BUS_VOLTAGE_SELECT_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_SD_BUS_VOLTAGE_SELECT_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_SD_BUS_VOLTAGE_SELECT_V1_8                   _MK_ENUM_CONST(5)
#define SDMMC_POWER_CONTROL_HOST_0_SD_BUS_VOLTAGE_SELECT_V3_0                   _MK_ENUM_CONST(6)
#define SDMMC_POWER_CONTROL_HOST_0_SD_BUS_VOLTAGE_SELECT_V3_3                   _MK_ENUM_CONST(7)

#define SDMMC_POWER_CONTROL_HOST_0_SD_BUS_POWER_SHIFT                   _MK_SHIFT_CONST(8)
#define SDMMC_POWER_CONTROL_HOST_0_SD_BUS_POWER_FIELD                   (_MK_MASK_CONST(0x1) << SDMMC_POWER_CONTROL_HOST_0_SD_BUS_POWER_SHIFT)
#define SDMMC_POWER_CONTROL_HOST_0_SD_BUS_POWER_RANGE                   8:8
#define SDMMC_POWER_CONTROL_HOST_0_SD_BUS_POWER_WOFFSET                 0x0
#define SDMMC_POWER_CONTROL_HOST_0_SD_BUS_POWER_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_SD_BUS_POWER_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define SDMMC_POWER_CONTROL_HOST_0_SD_BUS_POWER_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_SD_BUS_POWER_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_SD_BUS_POWER_POWER_OFF                       _MK_ENUM_CONST(0)
#define SDMMC_POWER_CONTROL_HOST_0_SD_BUS_POWER_POWER_ON                        _MK_ENUM_CONST(1)

#define SDMMC_POWER_CONTROL_HOST_0_CARD_DETECT_SIGNAL_DETECT_SHIFT                      _MK_SHIFT_CONST(7)
#define SDMMC_POWER_CONTROL_HOST_0_CARD_DETECT_SIGNAL_DETECT_FIELD                      (_MK_MASK_CONST(0x1) << SDMMC_POWER_CONTROL_HOST_0_CARD_DETECT_SIGNAL_DETECT_SHIFT)
#define SDMMC_POWER_CONTROL_HOST_0_CARD_DETECT_SIGNAL_DETECT_RANGE                      7:7
#define SDMMC_POWER_CONTROL_HOST_0_CARD_DETECT_SIGNAL_DETECT_WOFFSET                    0x0
#define SDMMC_POWER_CONTROL_HOST_0_CARD_DETECT_SIGNAL_DETECT_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_CARD_DETECT_SIGNAL_DETECT_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define SDMMC_POWER_CONTROL_HOST_0_CARD_DETECT_SIGNAL_DETECT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_CARD_DETECT_SIGNAL_DETECT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_CARD_DETECT_SIGNAL_DETECT_SDCD                       _MK_ENUM_CONST(0)
#define SDMMC_POWER_CONTROL_HOST_0_CARD_DETECT_SIGNAL_DETECT_CARD_DTECT_TST_LVL                 _MK_ENUM_CONST(1)

#define SDMMC_POWER_CONTROL_HOST_0_CARD_DETECT_TEST_LVL_SHIFT                   _MK_SHIFT_CONST(6)
#define SDMMC_POWER_CONTROL_HOST_0_CARD_DETECT_TEST_LVL_FIELD                   (_MK_MASK_CONST(0x1) << SDMMC_POWER_CONTROL_HOST_0_CARD_DETECT_TEST_LVL_SHIFT)
#define SDMMC_POWER_CONTROL_HOST_0_CARD_DETECT_TEST_LVL_RANGE                   6:6
#define SDMMC_POWER_CONTROL_HOST_0_CARD_DETECT_TEST_LVL_WOFFSET                 0x0
#define SDMMC_POWER_CONTROL_HOST_0_CARD_DETECT_TEST_LVL_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_CARD_DETECT_TEST_LVL_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define SDMMC_POWER_CONTROL_HOST_0_CARD_DETECT_TEST_LVL_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_CARD_DETECT_TEST_LVL_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_CARD_DETECT_TEST_LVL_NO_CARD                 _MK_ENUM_CONST(0)
#define SDMMC_POWER_CONTROL_HOST_0_CARD_DETECT_TEST_LVL_CARD_INSERTED                   _MK_ENUM_CONST(1)

#define SDMMC_POWER_CONTROL_HOST_0_EXTENDED_DATA_TRANSFER_WIDTH_SHIFT                   _MK_SHIFT_CONST(5)
#define SDMMC_POWER_CONTROL_HOST_0_EXTENDED_DATA_TRANSFER_WIDTH_FIELD                   (_MK_MASK_CONST(0x1) << SDMMC_POWER_CONTROL_HOST_0_EXTENDED_DATA_TRANSFER_WIDTH_SHIFT)
#define SDMMC_POWER_CONTROL_HOST_0_EXTENDED_DATA_TRANSFER_WIDTH_RANGE                   5:5
#define SDMMC_POWER_CONTROL_HOST_0_EXTENDED_DATA_TRANSFER_WIDTH_WOFFSET                 0x0
#define SDMMC_POWER_CONTROL_HOST_0_EXTENDED_DATA_TRANSFER_WIDTH_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_EXTENDED_DATA_TRANSFER_WIDTH_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define SDMMC_POWER_CONTROL_HOST_0_EXTENDED_DATA_TRANSFER_WIDTH_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_EXTENDED_DATA_TRANSFER_WIDTH_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_EXTENDED_DATA_TRANSFER_WIDTH_NOBIT_8                 _MK_ENUM_CONST(0)
#define SDMMC_POWER_CONTROL_HOST_0_EXTENDED_DATA_TRANSFER_WIDTH_BIT_8                   _MK_ENUM_CONST(1)

#define SDMMC_POWER_CONTROL_HOST_0_DMA_SELECT_SHIFT                     _MK_SHIFT_CONST(3)
#define SDMMC_POWER_CONTROL_HOST_0_DMA_SELECT_FIELD                     (_MK_MASK_CONST(0x3) << SDMMC_POWER_CONTROL_HOST_0_DMA_SELECT_SHIFT)
#define SDMMC_POWER_CONTROL_HOST_0_DMA_SELECT_RANGE                     4:3
#define SDMMC_POWER_CONTROL_HOST_0_DMA_SELECT_WOFFSET                   0x0
#define SDMMC_POWER_CONTROL_HOST_0_DMA_SELECT_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_DMA_SELECT_DEFAULT_MASK                      _MK_MASK_CONST(0x3)
#define SDMMC_POWER_CONTROL_HOST_0_DMA_SELECT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_DMA_SELECT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_DMA_SELECT_SDMA                      _MK_ENUM_CONST(0)
#define SDMMC_POWER_CONTROL_HOST_0_DMA_SELECT_ADMA1_32BIT                       _MK_ENUM_CONST(1)
#define SDMMC_POWER_CONTROL_HOST_0_DMA_SELECT_ADMA2_32BIT                       _MK_ENUM_CONST(2)
#define SDMMC_POWER_CONTROL_HOST_0_DMA_SELECT_ADMA2_64BIT                       _MK_ENUM_CONST(3)

#define SDMMC_POWER_CONTROL_HOST_0_HIGH_SPEED_EN_SHIFT                  _MK_SHIFT_CONST(2)
#define SDMMC_POWER_CONTROL_HOST_0_HIGH_SPEED_EN_FIELD                  (_MK_MASK_CONST(0x1) << SDMMC_POWER_CONTROL_HOST_0_HIGH_SPEED_EN_SHIFT)
#define SDMMC_POWER_CONTROL_HOST_0_HIGH_SPEED_EN_RANGE                  2:2
#define SDMMC_POWER_CONTROL_HOST_0_HIGH_SPEED_EN_WOFFSET                        0x0
#define SDMMC_POWER_CONTROL_HOST_0_HIGH_SPEED_EN_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_HIGH_SPEED_EN_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define SDMMC_POWER_CONTROL_HOST_0_HIGH_SPEED_EN_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_HIGH_SPEED_EN_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_HIGH_SPEED_EN_NORMAL_SPEED                   _MK_ENUM_CONST(0)
#define SDMMC_POWER_CONTROL_HOST_0_HIGH_SPEED_EN_HIGH_SPEED                     _MK_ENUM_CONST(1)

#define SDMMC_POWER_CONTROL_HOST_0_DATA_XFER_WIDTH_SHIFT                        _MK_SHIFT_CONST(1)
#define SDMMC_POWER_CONTROL_HOST_0_DATA_XFER_WIDTH_FIELD                        (_MK_MASK_CONST(0x1) << SDMMC_POWER_CONTROL_HOST_0_DATA_XFER_WIDTH_SHIFT)
#define SDMMC_POWER_CONTROL_HOST_0_DATA_XFER_WIDTH_RANGE                        1:1
#define SDMMC_POWER_CONTROL_HOST_0_DATA_XFER_WIDTH_WOFFSET                      0x0
#define SDMMC_POWER_CONTROL_HOST_0_DATA_XFER_WIDTH_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_DATA_XFER_WIDTH_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SDMMC_POWER_CONTROL_HOST_0_DATA_XFER_WIDTH_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_DATA_XFER_WIDTH_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_DATA_XFER_WIDTH_BIT_1                        _MK_ENUM_CONST(0)
#define SDMMC_POWER_CONTROL_HOST_0_DATA_XFER_WIDTH_BIT_4                        _MK_ENUM_CONST(1)

#define SDMMC_POWER_CONTROL_HOST_0_LED_CONTROL_SHIFT                    _MK_SHIFT_CONST(0)
#define SDMMC_POWER_CONTROL_HOST_0_LED_CONTROL_FIELD                    (_MK_MASK_CONST(0x1) << SDMMC_POWER_CONTROL_HOST_0_LED_CONTROL_SHIFT)
#define SDMMC_POWER_CONTROL_HOST_0_LED_CONTROL_RANGE                    0:0
#define SDMMC_POWER_CONTROL_HOST_0_LED_CONTROL_WOFFSET                  0x0
#define SDMMC_POWER_CONTROL_HOST_0_LED_CONTROL_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_LED_CONTROL_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define SDMMC_POWER_CONTROL_HOST_0_LED_CONTROL_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_LED_CONTROL_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define SDMMC_POWER_CONTROL_HOST_0_LED_CONTROL_OFF                      _MK_ENUM_CONST(0)
#define SDMMC_POWER_CONTROL_HOST_0_LED_CONTROL_ON                       _MK_ENUM_CONST(1)

// Clock Control Register
//------------------------------------------------------------------------------
//SW_RESET_FOR_DAT_LINE - Software Reset For DAT Line
//    Only part of data circuit is reset. DMA circuit is also reset.
//    The following registers and bits are cleared by this bit:
//    Buffer Data Port register
//      Buffer is cleared and initialized.
//    Present State register
//      Buffer Read Enable
//      Buffer Write Enable
//      Read Transfer Active
//      Write Transfer Active
//      DAT Line Active
//      Command Inhibit (DAT)
//    Block Gap Control register
//      Continue Request
//      Stop At Block Gap Request
//    Normal Interrupt Status register
//      Buffer Read Ready
//      Buffer Write Ready
//      DMA Interrupt
//      Block Gap Event
//      Transfer Complete
//SW_RESET_FOR_CMD_LINE - Software Reset For CMD Line
//    Only part of command circuit is reset.
//    The following registers and bits are cleared by this bit:
//    Present State register
//      Command Inhibit (CMD)
//    Normal Interrupt Status register
//      Command Complete
//SW_RESET_FOR_ALL - Software Reset For All
//    This reset affects the entire Host Controller except for the card detection circuit.
//    Register bits of type ROC, RW, RW1C, RWAC are cleared to 0. During its
//    initialization, the Host Driver shall set this bit to 1 to reset the Host Controller. The
//    Host Controller shall reset this bit to 0 when Capabilities registers are valid and
//    the Host Driver can read them. Additional use of Software Reset For All may not
//    affect the value of the Capabilities registers. If this bit is set to 1, the host driver
//    should issue reset command and reinitialize the SD card.
//DATA_TIMEOUT_COUNTER_VALUE - Data Timeout Counter Value
//    This value determines the interval by which DAT line timeouts are detected. For
//    more information about timeout generation, refer to the Data Timeout Error in the
//    Error Interrupt Status register. Timeout clock frequency will be generated by
//    dividing the base clock TMCLK value by this value. When setting this register,
//    prevent inadvertent timeout events by clearing the Data Timeout Error Status
//    Enable (in the Error Interrupt Status Enable register)
//      1111b Reserved
//      1110b TMCLK x pow(2,27)
//      ................. 
//      0001b TMCLK x  pow(2,14)
//      0000b TMCLK     x  pow(2,13)    
//SDCLK_FREQUENCYSELECT - SDCLK Frequency Select                        
//    This register is used to select the frequency of SDCLK pin. The frequency is not
//    programmed directly; rather this register holds the divisor of the Base Clock
//    Frequency For SD Clock in the Capabilities register. Only the following
//    settings are allowed.
//SD_CLOCK_EN - SD Clock Enable
//    The Host Controller shall stop SDCLK when writing this bit to 0. SDCLK
//    Frequency Select can be changed when this bit is 0. Then, the Host Controller
//    shall maintain the same clock frequency until SDCLK is stopped (Stop at
//    SDCLK=0). If the Card Inserted in the Present State register is cleared, this bit
//    shall be cleared.
//INTERNAL_CLOCK_STABLE - Internal Clock Stable
//    This bit is set to 1 when SD Clock is stable after writing to Internal Clock
//    Enable in this register to 1. The SD Host Driver shall wait to set SD Clock
//    Enable until this bit is set to 1.
//    Note: This is useful when using PLL for a clock oscillator that requires setup
//    time.
//INTERNAL_CLOCK_EN - Internal Clock Enable
//    This bit is set to 0 when the Host Driver is not using the Host Controller or the
//    Host Controller awaits a wakeup interrupt. The Host Controller should stop its
//    internal clock to go very low power state. Still, registers shall be able to be read
//    and written. Clock starts to oscillate when this bit is set to 1. When clock
//    oscillation is stable, the Host Controller shall set Internal Clock Stable in this
//    register to 1. This bit shall not affect card detection.

// Register SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0  
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0                     _MK_ADDR_CONST(0x2c)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SECURE                      0x0
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_WORD_COUNT                  0x1
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_RESET_MASK                  _MK_MASK_CONST(0x70fff07)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_READ_MASK                   _MK_MASK_CONST(0x70fff07)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_WRITE_MASK                  _MK_MASK_CONST(0x70fff05)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_DAT_LINE_SHIFT                 _MK_SHIFT_CONST(26)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_DAT_LINE_FIELD                 (_MK_MASK_CONST(0x1) << SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_DAT_LINE_SHIFT)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_DAT_LINE_RANGE                 26:26
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_DAT_LINE_WOFFSET                       0x0
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_DAT_LINE_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_DAT_LINE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_DAT_LINE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_DAT_LINE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_DAT_LINE_WORK                  _MK_ENUM_CONST(0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_DAT_LINE_RESETED                       _MK_ENUM_CONST(1)

#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_CMD_LINE_SHIFT                 _MK_SHIFT_CONST(25)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_CMD_LINE_FIELD                 (_MK_MASK_CONST(0x1) << SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_CMD_LINE_SHIFT)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_CMD_LINE_RANGE                 25:25
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_CMD_LINE_WOFFSET                       0x0
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_CMD_LINE_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_CMD_LINE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_CMD_LINE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_CMD_LINE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_CMD_LINE_WORK                  _MK_ENUM_CONST(0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_CMD_LINE_RESETED                       _MK_ENUM_CONST(1)

#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_ALL_SHIFT                      _MK_SHIFT_CONST(24)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_ALL_FIELD                      (_MK_MASK_CONST(0x1) << SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_ALL_SHIFT)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_ALL_RANGE                      24:24
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_ALL_WOFFSET                    0x0
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_ALL_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_ALL_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_ALL_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_ALL_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_ALL_WORK                       _MK_ENUM_CONST(0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SW_RESET_FOR_ALL_RESETED                    _MK_ENUM_CONST(1)

#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_DATA_TIMEOUT_COUNTER_VALUE_SHIFT                    _MK_SHIFT_CONST(16)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_DATA_TIMEOUT_COUNTER_VALUE_FIELD                    (_MK_MASK_CONST(0xf) << SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_DATA_TIMEOUT_COUNTER_VALUE_SHIFT)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_DATA_TIMEOUT_COUNTER_VALUE_RANGE                    19:16
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_DATA_TIMEOUT_COUNTER_VALUE_WOFFSET                  0x0
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_DATA_TIMEOUT_COUNTER_VALUE_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_DATA_TIMEOUT_COUNTER_VALUE_DEFAULT_MASK                     _MK_MASK_CONST(0xf)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_DATA_TIMEOUT_COUNTER_VALUE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_DATA_TIMEOUT_COUNTER_VALUE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SDCLK_FREQUENCYSELECT_SHIFT                 _MK_SHIFT_CONST(8)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SDCLK_FREQUENCYSELECT_FIELD                 (_MK_MASK_CONST(0xff) << SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SDCLK_FREQUENCYSELECT_SHIFT)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SDCLK_FREQUENCYSELECT_RANGE                 15:8
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SDCLK_FREQUENCYSELECT_WOFFSET                       0x0
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SDCLK_FREQUENCYSELECT_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SDCLK_FREQUENCYSELECT_DEFAULT_MASK                  _MK_MASK_CONST(0xff)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SDCLK_FREQUENCYSELECT_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SDCLK_FREQUENCYSELECT_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SDCLK_FREQUENCYSELECT_DIV256                        _MK_ENUM_CONST(128)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SDCLK_FREQUENCYSELECT_DIV128                        _MK_ENUM_CONST(64)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SDCLK_FREQUENCYSELECT_DIV64                 _MK_ENUM_CONST(32)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SDCLK_FREQUENCYSELECT_DIV32                 _MK_ENUM_CONST(16)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SDCLK_FREQUENCYSELECT_DIV16                 _MK_ENUM_CONST(8)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SDCLK_FREQUENCYSELECT_DIV8                  _MK_ENUM_CONST(4)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SDCLK_FREQUENCYSELECT_DIV4                  _MK_ENUM_CONST(2)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SDCLK_FREQUENCYSELECT_DIV2                  _MK_ENUM_CONST(1)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SDCLK_FREQUENCYSELECT_BASE                  _MK_ENUM_CONST(0)

#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SD_CLOCK_EN_SHIFT                   _MK_SHIFT_CONST(2)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SD_CLOCK_EN_FIELD                   (_MK_MASK_CONST(0x1) << SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SD_CLOCK_EN_SHIFT)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SD_CLOCK_EN_RANGE                   2:2
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SD_CLOCK_EN_WOFFSET                 0x0
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SD_CLOCK_EN_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SD_CLOCK_EN_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SD_CLOCK_EN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SD_CLOCK_EN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SD_CLOCK_EN_DISABLE                 _MK_ENUM_CONST(0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_SD_CLOCK_EN_ENABLE                  _MK_ENUM_CONST(1)

#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_INTERNAL_CLOCK_STABLE_SHIFT                 _MK_SHIFT_CONST(1)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_INTERNAL_CLOCK_STABLE_FIELD                 (_MK_MASK_CONST(0x1) << SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_INTERNAL_CLOCK_STABLE_SHIFT)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_INTERNAL_CLOCK_STABLE_RANGE                 1:1
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_INTERNAL_CLOCK_STABLE_WOFFSET                       0x0
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_INTERNAL_CLOCK_STABLE_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_INTERNAL_CLOCK_STABLE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_INTERNAL_CLOCK_STABLE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_INTERNAL_CLOCK_STABLE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_INTERNAL_CLOCK_STABLE_NOT_READY                     _MK_ENUM_CONST(0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_INTERNAL_CLOCK_STABLE_READY                 _MK_ENUM_CONST(1)

#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_INTERNAL_CLOCK_EN_SHIFT                     _MK_SHIFT_CONST(0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_INTERNAL_CLOCK_EN_FIELD                     (_MK_MASK_CONST(0x1) << SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_INTERNAL_CLOCK_EN_SHIFT)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_INTERNAL_CLOCK_EN_RANGE                     0:0
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_INTERNAL_CLOCK_EN_WOFFSET                   0x0
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_INTERNAL_CLOCK_EN_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_INTERNAL_CLOCK_EN_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_INTERNAL_CLOCK_EN_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_INTERNAL_CLOCK_EN_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_INTERNAL_CLOCK_EN_STOP                      _MK_ENUM_CONST(0)
#define SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0_INTERNAL_CLOCK_EN_OSCILLATE                 _MK_ENUM_CONST(1)

// Normal Interrupt Status Register
//------------------------------------------------------------------------------
//VEND_SPEC_ERR[1:0]
//    1:BOOT_ACK_ERR - Occurs When Boot Ack Status is not equal to '010'
//    0:BOOT_ACK_TIMEOUT_ERR - Occurs When Boot Ack is not recieved within the programmed number of cycles. 
// CEATA_ERROR 
//     occurs when the ATA command termination has occured.
//TARGET_RESP_ERROR - Not supported for ap20
//SPI_ERR
//    Indicate when SPI Error has occured.The SPI Errors are registerd in SPI_INTERRUPT_STATUS register. 
//ADMA_ERR
//    Occurs when detecting that one of the bits in Auto CMD12 Error Status register has
//              changed from 0 to 1. This bit is set to 1,not only when the errors in Auto CMD12
//    occur but also when Auto CMD12 is not executed due to the previous command error.
//AUTO_CMD12_ERR
//    Occurs when detecting that one of the bits in Auto CMD12 Error Status register has
//              changed from 0 to 1. This bit is set to 1,not only when the errors in Auto CMD12
//    occur but also when Auto CMD12 is not executed due to the previous command error.
//CURRENT_LIMIT_ERR
//    By setting the SD Bus Power bit in the Power Control register, the Host Controller
//    is requested to supply power for the SD Bus. If the Host Controller supports the
//    Current Limit function, it can be protected from an illegal card by stopping power
//    supply to the card in which case this bit indicates a failure status. Reading 1 means
//    the Host Controller is not supplying power to SD card due to some failure. Reading
//    0 means that the Host Controller is supplying power and no error has occurred.
//    The Host Controller may require some sampling time to detect the current limit. If
//    the Host Controller does not support this function, this bit shall always be set to 0.
//DATA_END_BIT_ERR
//    Occurs either when detecting 0 at the end bit position of read data which uses the
//    DAT line or at the end bit position of the CRC Status.
//DATA_CRC_ERR
//    Occurs when detecting CRC error when transferring read data which uses the DAT
//    line or when detecting the Write CRC status having a value of other than "010".
//DATA_TIMEOUT_ERR
//    Occurs when detecting one of following timeout conditions.
//     (1) Busy timeout for R1b,R5b type
//     (2) Busy timeout after Write CRC status
//     (3) Write CRC Status timeout
//     (4) Read Data timeout.
//COMMAND_INDEX_ERR                 
//    Occurs if a Command Index error occurs in the command response.
//COMMAND_END_BIT_ERR               
//    Occurs when detecting that the end bit of a command response is 0.
//COMMAND_CRC_ERR                   
//    Command CRC Error is generated in two cases.
//     (1) If a response is returned and the Command Timeout Error is set to 0
//     (indicating no timeout), this bit is set to 1 when detecting a CRC error in the
//     command response.
//     (2) The Host Controller detects a CMD line conflict by monitoring the CMD line
//     when a command is issued. If the Host Controller drives the CMD line to 1
//     level, but detects 0 level on the CMD line at the next SDCLK edge, then the
//     Host Controller shall abort the command (Stop driving CMD line) and set this
//     bit to 1. The Command Timeout Error shall also be set to 1 to distinguish
//     CMD line conflict
//COMMAND_TIMEOUT_ERR 
//    Occurs only if no response is returned within 64 SDCLK cycles from the end bit of
//    the command. If the Host Controller detects a CMD line conflict, in which case
//    Command CRC Error shall also be set as shown in Table 2-25, this bit shall be
//    set without waiting for 64 SDCLK cycles because the command will be aborted by
//    the Host Controller.
//ERR_INTERRUPT
//    If any of the bits in the Error Interrupt Status register are set, then this bit is set.
//    Therefore the Host Driver can efficiently test for an error by checking this bit first.
//    This bit is read only.
//CARD_INTERRUPT 
//    Writing this bit to 1 does not clear this bit. It is cleared by resetting the SD card
//    interrupt factor. In 1-bit mode, the Host Controller shall detect the Card Interrupt
//    without SD Clock to support wakeup. In 4-bit mode, the card interrupt signal is
//    sampled during the interrupt cycle, so there are some sample delays between the
//    interrupt signal from the SD card and the interrupt to the Host System. It is
//    necessary to define how to handle this delay.
//CARD_REMOVAL
//    This status is set if the Card Inserted in the Present State register changes from 1 to 0.
//    When the Host Driver writes this bit to 1 to clear this status, the status of the Card
//    Inserted in the Present State register should be confirmed. Because the card
//    detect state may possibly be changed when the Host Driver clear this bit and
//    interrupt event may not be generated.
//CARD_INSERTION
//    This status is set if the Card Inserted in the Present State register changes from 0 to 1.
//    When the Host Driver writes this bit to 1 to clear this status, the status of the Card
//    Inserted in the Present State register should be confirmed. Because the card
//    detect state may possibly be changed when the Host Driver clear this bit and
//    interrupt event may not be generated.
//BUFFER_READ_READY 
//    This status is set if the Buffer Read Enable changes from 0 to 1. Refer to the
//    Buffer Read Enable in the Present State register.
//BUFFER_WRITE_READY
//    This status is set if the Buffer Write Enable changes from 0 to 1. Refer to the
//    Buffer Write Enable in the Present State register.
//DMA_INTERRUPT
//    This status is set if the Host Controller detects the Host DMA Buffer boundary
//    during transfer. Refer to the Host DMA Buffer Boundary in the Block Size register.
//    Other DMA interrupt factors may be added in the future. This interrupt shall not be
//    generated after the Transfer Complete.
//BLOCK_GAP_EVENT
//    If the Stop At Block Gap Request in the Block Gap Control register is set, this bit
//    is set when both a read / write transaction is stopped at a block gap. If Stop At
//    Block Gap Request is not set to 1, this bit is not set to 1.
//XFER_COMPLETE 
//    This bit is set when a read / write transfer is completed.
//     (1) In the case of a Read Transaction
//     (2) In the case of a Write Transaction
//CMD_COMPLETE 
//    This bit is set when get the end bit of the command response. (Except Auto CMD12)
//    Refer to Command Inhibit (CMD) in the Present State register.

// Register SDMMC_INTERRUPT_STATUS_0  
#define SDMMC_INTERRUPT_STATUS_0                        _MK_ADDR_CONST(0x30)
#define SDMMC_INTERRUPT_STATUS_0_SECURE                         0x0
#define SDMMC_INTERRUPT_STATUS_0_WORD_COUNT                     0x1
#define SDMMC_INTERRUPT_STATUS_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_RESET_MASK                     _MK_MASK_CONST(0xfbff81ff)
#define SDMMC_INTERRUPT_STATUS_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_READ_MASK                      _MK_MASK_CONST(0xfbff81ff)
#define SDMMC_INTERRUPT_STATUS_0_WRITE_MASK                     _MK_MASK_CONST(0xfbff00ff)
#define SDMMC_INTERRUPT_STATUS_0_VEND_SPEC_ERR_SHIFT                    _MK_SHIFT_CONST(30)
#define SDMMC_INTERRUPT_STATUS_0_VEND_SPEC_ERR_FIELD                    (_MK_MASK_CONST(0x3) << SDMMC_INTERRUPT_STATUS_0_VEND_SPEC_ERR_SHIFT)
#define SDMMC_INTERRUPT_STATUS_0_VEND_SPEC_ERR_RANGE                    31:30
#define SDMMC_INTERRUPT_STATUS_0_VEND_SPEC_ERR_WOFFSET                  0x0
#define SDMMC_INTERRUPT_STATUS_0_VEND_SPEC_ERR_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_VEND_SPEC_ERR_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define SDMMC_INTERRUPT_STATUS_0_VEND_SPEC_ERR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_VEND_SPEC_ERR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_VEND_SPEC_ERR_DISABLE                  _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_0_VEND_SPEC_ERR_ENABLE                   _MK_ENUM_CONST(3)

#define SDMMC_INTERRUPT_STATUS_0_CEATA_ERROR_SHIFT                      _MK_SHIFT_CONST(29)
#define SDMMC_INTERRUPT_STATUS_0_CEATA_ERROR_FIELD                      (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_0_CEATA_ERROR_SHIFT)
#define SDMMC_INTERRUPT_STATUS_0_CEATA_ERROR_RANGE                      29:29
#define SDMMC_INTERRUPT_STATUS_0_CEATA_ERROR_WOFFSET                    0x0
#define SDMMC_INTERRUPT_STATUS_0_CEATA_ERROR_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_CEATA_ERROR_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_0_CEATA_ERROR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_CEATA_ERROR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_CEATA_ERROR_NO_ERROR                   _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_0_CEATA_ERROR_ERROR                      _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_0_TARGET_RESP_ERROR_SHIFT                        _MK_SHIFT_CONST(28)
#define SDMMC_INTERRUPT_STATUS_0_TARGET_RESP_ERROR_FIELD                        (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_0_TARGET_RESP_ERROR_SHIFT)
#define SDMMC_INTERRUPT_STATUS_0_TARGET_RESP_ERROR_RANGE                        28:28
#define SDMMC_INTERRUPT_STATUS_0_TARGET_RESP_ERROR_WOFFSET                      0x0
#define SDMMC_INTERRUPT_STATUS_0_TARGET_RESP_ERROR_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_TARGET_RESP_ERROR_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_0_TARGET_RESP_ERROR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_TARGET_RESP_ERROR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_TARGET_RESP_ERROR_NO_ERROR                     _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_0_TARGET_RESP_ERROR_ERROR                        _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_0_SPI_ERR_SHIFT                  _MK_SHIFT_CONST(27)
#define SDMMC_INTERRUPT_STATUS_0_SPI_ERR_FIELD                  (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_0_SPI_ERR_SHIFT)
#define SDMMC_INTERRUPT_STATUS_0_SPI_ERR_RANGE                  27:27
#define SDMMC_INTERRUPT_STATUS_0_SPI_ERR_WOFFSET                        0x0
#define SDMMC_INTERRUPT_STATUS_0_SPI_ERR_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_SPI_ERR_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_0_SPI_ERR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_SPI_ERR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_SPI_ERR_NO_ERR                 _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_0_SPI_ERR_ERR                    _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_0_ADMA_ERR_SHIFT                 _MK_SHIFT_CONST(25)
#define SDMMC_INTERRUPT_STATUS_0_ADMA_ERR_FIELD                 (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_0_ADMA_ERR_SHIFT)
#define SDMMC_INTERRUPT_STATUS_0_ADMA_ERR_RANGE                 25:25
#define SDMMC_INTERRUPT_STATUS_0_ADMA_ERR_WOFFSET                       0x0
#define SDMMC_INTERRUPT_STATUS_0_ADMA_ERR_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_ADMA_ERR_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_0_ADMA_ERR_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_ADMA_ERR_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_ADMA_ERR_NO_ERR                        _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_0_ADMA_ERR_ERR                   _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_0_AUTO_CMD12_ERR_SHIFT                   _MK_SHIFT_CONST(24)
#define SDMMC_INTERRUPT_STATUS_0_AUTO_CMD12_ERR_FIELD                   (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_0_AUTO_CMD12_ERR_SHIFT)
#define SDMMC_INTERRUPT_STATUS_0_AUTO_CMD12_ERR_RANGE                   24:24
#define SDMMC_INTERRUPT_STATUS_0_AUTO_CMD12_ERR_WOFFSET                 0x0
#define SDMMC_INTERRUPT_STATUS_0_AUTO_CMD12_ERR_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_AUTO_CMD12_ERR_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_0_AUTO_CMD12_ERR_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_AUTO_CMD12_ERR_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_AUTO_CMD12_ERR_NO_ERR                  _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_0_AUTO_CMD12_ERR_ERR                     _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_0_CURRENT_LIMIT_ERR_SHIFT                        _MK_SHIFT_CONST(23)
#define SDMMC_INTERRUPT_STATUS_0_CURRENT_LIMIT_ERR_FIELD                        (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_0_CURRENT_LIMIT_ERR_SHIFT)
#define SDMMC_INTERRUPT_STATUS_0_CURRENT_LIMIT_ERR_RANGE                        23:23
#define SDMMC_INTERRUPT_STATUS_0_CURRENT_LIMIT_ERR_WOFFSET                      0x0
#define SDMMC_INTERRUPT_STATUS_0_CURRENT_LIMIT_ERR_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_CURRENT_LIMIT_ERR_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_0_CURRENT_LIMIT_ERR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_CURRENT_LIMIT_ERR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_CURRENT_LIMIT_ERR_NO_ERR                       _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_0_CURRENT_LIMIT_ERR_POWER_FAIL                   _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_0_DATA_END_BIT_ERR_SHIFT                 _MK_SHIFT_CONST(22)
#define SDMMC_INTERRUPT_STATUS_0_DATA_END_BIT_ERR_FIELD                 (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_0_DATA_END_BIT_ERR_SHIFT)
#define SDMMC_INTERRUPT_STATUS_0_DATA_END_BIT_ERR_RANGE                 22:22
#define SDMMC_INTERRUPT_STATUS_0_DATA_END_BIT_ERR_WOFFSET                       0x0
#define SDMMC_INTERRUPT_STATUS_0_DATA_END_BIT_ERR_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_DATA_END_BIT_ERR_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_0_DATA_END_BIT_ERR_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_DATA_END_BIT_ERR_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_DATA_END_BIT_ERR_NO_ERR                        _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_0_DATA_END_BIT_ERR_ERR                   _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_0_DATA_CRC_ERR_SHIFT                     _MK_SHIFT_CONST(21)
#define SDMMC_INTERRUPT_STATUS_0_DATA_CRC_ERR_FIELD                     (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_0_DATA_CRC_ERR_SHIFT)
#define SDMMC_INTERRUPT_STATUS_0_DATA_CRC_ERR_RANGE                     21:21
#define SDMMC_INTERRUPT_STATUS_0_DATA_CRC_ERR_WOFFSET                   0x0
#define SDMMC_INTERRUPT_STATUS_0_DATA_CRC_ERR_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_DATA_CRC_ERR_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_0_DATA_CRC_ERR_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_DATA_CRC_ERR_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_DATA_CRC_ERR_NO_ERR                    _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_0_DATA_CRC_ERR_ERR                       _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_0_DATA_TIMEOUT_ERR_SHIFT                 _MK_SHIFT_CONST(20)
#define SDMMC_INTERRUPT_STATUS_0_DATA_TIMEOUT_ERR_FIELD                 (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_0_DATA_TIMEOUT_ERR_SHIFT)
#define SDMMC_INTERRUPT_STATUS_0_DATA_TIMEOUT_ERR_RANGE                 20:20
#define SDMMC_INTERRUPT_STATUS_0_DATA_TIMEOUT_ERR_WOFFSET                       0x0
#define SDMMC_INTERRUPT_STATUS_0_DATA_TIMEOUT_ERR_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_DATA_TIMEOUT_ERR_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_0_DATA_TIMEOUT_ERR_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_DATA_TIMEOUT_ERR_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_DATA_TIMEOUT_ERR_NO_ERR                        _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_0_DATA_TIMEOUT_ERR_TIMEOUT                       _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_0_COMMAND_INDEX_ERR_SHIFT                        _MK_SHIFT_CONST(19)
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_INDEX_ERR_FIELD                        (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_0_COMMAND_INDEX_ERR_SHIFT)
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_INDEX_ERR_RANGE                        19:19
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_INDEX_ERR_WOFFSET                      0x0
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_INDEX_ERR_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_INDEX_ERR_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_INDEX_ERR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_INDEX_ERR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_INDEX_ERR_NO_ERR                       _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_INDEX_ERR_ERR                  _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_0_COMMAND_END_BIT_ERR_SHIFT                      _MK_SHIFT_CONST(18)
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_END_BIT_ERR_FIELD                      (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_0_COMMAND_END_BIT_ERR_SHIFT)
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_END_BIT_ERR_RANGE                      18:18
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_END_BIT_ERR_WOFFSET                    0x0
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_END_BIT_ERR_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_END_BIT_ERR_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_END_BIT_ERR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_END_BIT_ERR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_END_BIT_ERR_NO_ERR                     _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_END_BIT_ERR_END_BIT_ERR_GENERATED                      _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_0_COMMAND_CRC_ERR_SHIFT                  _MK_SHIFT_CONST(17)
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_CRC_ERR_FIELD                  (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_0_COMMAND_CRC_ERR_SHIFT)
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_CRC_ERR_RANGE                  17:17
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_CRC_ERR_WOFFSET                        0x0
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_CRC_ERR_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_CRC_ERR_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_CRC_ERR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_CRC_ERR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_CRC_ERR_NO_ERR                 _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_CRC_ERR_CRC_ERR_GENERATED                      _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_0_COMMAND_TIMEOUT_ERR_SHIFT                      _MK_SHIFT_CONST(16)
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_TIMEOUT_ERR_FIELD                      (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_0_COMMAND_TIMEOUT_ERR_SHIFT)
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_TIMEOUT_ERR_RANGE                      16:16
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_TIMEOUT_ERR_WOFFSET                    0x0
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_TIMEOUT_ERR_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_TIMEOUT_ERR_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_TIMEOUT_ERR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_TIMEOUT_ERR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_TIMEOUT_ERR_NO_ERR                     _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_0_COMMAND_TIMEOUT_ERR_TIMEOUT                    _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_0_ERR_INTERRUPT_SHIFT                    _MK_SHIFT_CONST(15)
#define SDMMC_INTERRUPT_STATUS_0_ERR_INTERRUPT_FIELD                    (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_0_ERR_INTERRUPT_SHIFT)
#define SDMMC_INTERRUPT_STATUS_0_ERR_INTERRUPT_RANGE                    15:15
#define SDMMC_INTERRUPT_STATUS_0_ERR_INTERRUPT_WOFFSET                  0x0
#define SDMMC_INTERRUPT_STATUS_0_ERR_INTERRUPT_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_ERR_INTERRUPT_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_0_ERR_INTERRUPT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_ERR_INTERRUPT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_ERR_INTERRUPT_NO_ERR                   _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_0_ERR_INTERRUPT_ERR                      _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_0_CARD_INTERRUPT_SHIFT                   _MK_SHIFT_CONST(8)
#define SDMMC_INTERRUPT_STATUS_0_CARD_INTERRUPT_FIELD                   (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_0_CARD_INTERRUPT_SHIFT)
#define SDMMC_INTERRUPT_STATUS_0_CARD_INTERRUPT_RANGE                   8:8
#define SDMMC_INTERRUPT_STATUS_0_CARD_INTERRUPT_WOFFSET                 0x0
#define SDMMC_INTERRUPT_STATUS_0_CARD_INTERRUPT_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_CARD_INTERRUPT_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_0_CARD_INTERRUPT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_CARD_INTERRUPT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_CARD_INTERRUPT_NO_INT                  _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_0_CARD_INTERRUPT_GEN_INT                 _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_0_CARD_REMOVAL_SHIFT                     _MK_SHIFT_CONST(7)
#define SDMMC_INTERRUPT_STATUS_0_CARD_REMOVAL_FIELD                     (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_0_CARD_REMOVAL_SHIFT)
#define SDMMC_INTERRUPT_STATUS_0_CARD_REMOVAL_RANGE                     7:7
#define SDMMC_INTERRUPT_STATUS_0_CARD_REMOVAL_WOFFSET                   0x0
#define SDMMC_INTERRUPT_STATUS_0_CARD_REMOVAL_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_CARD_REMOVAL_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_0_CARD_REMOVAL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_CARD_REMOVAL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_CARD_REMOVAL_NO_INT                    _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_0_CARD_REMOVAL_GEN_INT                   _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_0_CARD_INSERTION_SHIFT                   _MK_SHIFT_CONST(6)
#define SDMMC_INTERRUPT_STATUS_0_CARD_INSERTION_FIELD                   (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_0_CARD_INSERTION_SHIFT)
#define SDMMC_INTERRUPT_STATUS_0_CARD_INSERTION_RANGE                   6:6
#define SDMMC_INTERRUPT_STATUS_0_CARD_INSERTION_WOFFSET                 0x0
#define SDMMC_INTERRUPT_STATUS_0_CARD_INSERTION_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_CARD_INSERTION_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_0_CARD_INSERTION_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_CARD_INSERTION_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_CARD_INSERTION_NO_INT                  _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_0_CARD_INSERTION_GEN_INT                 _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_0_BUFFER_READ_READY_SHIFT                        _MK_SHIFT_CONST(5)
#define SDMMC_INTERRUPT_STATUS_0_BUFFER_READ_READY_FIELD                        (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_0_BUFFER_READ_READY_SHIFT)
#define SDMMC_INTERRUPT_STATUS_0_BUFFER_READ_READY_RANGE                        5:5
#define SDMMC_INTERRUPT_STATUS_0_BUFFER_READ_READY_WOFFSET                      0x0
#define SDMMC_INTERRUPT_STATUS_0_BUFFER_READ_READY_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_BUFFER_READ_READY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_0_BUFFER_READ_READY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_BUFFER_READ_READY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_BUFFER_READ_READY_NO_INT                       _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_0_BUFFER_READ_READY_GEN_INT                      _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_0_BUFFER_WRITE_READY_SHIFT                       _MK_SHIFT_CONST(4)
#define SDMMC_INTERRUPT_STATUS_0_BUFFER_WRITE_READY_FIELD                       (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_0_BUFFER_WRITE_READY_SHIFT)
#define SDMMC_INTERRUPT_STATUS_0_BUFFER_WRITE_READY_RANGE                       4:4
#define SDMMC_INTERRUPT_STATUS_0_BUFFER_WRITE_READY_WOFFSET                     0x0
#define SDMMC_INTERRUPT_STATUS_0_BUFFER_WRITE_READY_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_BUFFER_WRITE_READY_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_0_BUFFER_WRITE_READY_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_BUFFER_WRITE_READY_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_BUFFER_WRITE_READY_NO_INT                      _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_0_BUFFER_WRITE_READY_GEN_INT                     _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_0_DMA_INTERRUPT_SHIFT                    _MK_SHIFT_CONST(3)
#define SDMMC_INTERRUPT_STATUS_0_DMA_INTERRUPT_FIELD                    (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_0_DMA_INTERRUPT_SHIFT)
#define SDMMC_INTERRUPT_STATUS_0_DMA_INTERRUPT_RANGE                    3:3
#define SDMMC_INTERRUPT_STATUS_0_DMA_INTERRUPT_WOFFSET                  0x0
#define SDMMC_INTERRUPT_STATUS_0_DMA_INTERRUPT_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_DMA_INTERRUPT_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_0_DMA_INTERRUPT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_DMA_INTERRUPT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_DMA_INTERRUPT_NO_INT                   _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_0_DMA_INTERRUPT_GEN_INT                  _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_0_BLOCK_GAP_EVENT_SHIFT                  _MK_SHIFT_CONST(2)
#define SDMMC_INTERRUPT_STATUS_0_BLOCK_GAP_EVENT_FIELD                  (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_0_BLOCK_GAP_EVENT_SHIFT)
#define SDMMC_INTERRUPT_STATUS_0_BLOCK_GAP_EVENT_RANGE                  2:2
#define SDMMC_INTERRUPT_STATUS_0_BLOCK_GAP_EVENT_WOFFSET                        0x0
#define SDMMC_INTERRUPT_STATUS_0_BLOCK_GAP_EVENT_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_BLOCK_GAP_EVENT_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_0_BLOCK_GAP_EVENT_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_BLOCK_GAP_EVENT_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_BLOCK_GAP_EVENT_NO_INT                 _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_0_BLOCK_GAP_EVENT_GEN_INT                        _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_0_XFER_COMPLETE_SHIFT                    _MK_SHIFT_CONST(1)
#define SDMMC_INTERRUPT_STATUS_0_XFER_COMPLETE_FIELD                    (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_0_XFER_COMPLETE_SHIFT)
#define SDMMC_INTERRUPT_STATUS_0_XFER_COMPLETE_RANGE                    1:1
#define SDMMC_INTERRUPT_STATUS_0_XFER_COMPLETE_WOFFSET                  0x0
#define SDMMC_INTERRUPT_STATUS_0_XFER_COMPLETE_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_XFER_COMPLETE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_0_XFER_COMPLETE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_XFER_COMPLETE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_XFER_COMPLETE_NO_INT                   _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_0_XFER_COMPLETE_GEN_INT                  _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_0_CMD_COMPLETE_SHIFT                     _MK_SHIFT_CONST(0)
#define SDMMC_INTERRUPT_STATUS_0_CMD_COMPLETE_FIELD                     (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_0_CMD_COMPLETE_SHIFT)
#define SDMMC_INTERRUPT_STATUS_0_CMD_COMPLETE_RANGE                     0:0
#define SDMMC_INTERRUPT_STATUS_0_CMD_COMPLETE_WOFFSET                   0x0
#define SDMMC_INTERRUPT_STATUS_0_CMD_COMPLETE_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_CMD_COMPLETE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_0_CMD_COMPLETE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_CMD_COMPLETE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_0_CMD_COMPLETE_NO_INT                    _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_0_CMD_COMPLETE_GEN_INT                   _MK_ENUM_CONST(1)

// Normal Interrupt Status Enable Register
//--------------------------------------------------------------
//This register is used to select which interrupt status is indicated to the Host System as the interrupt. These
//status bits all share the same1 bit interrupt line. Setting any of these bits to 1 enables interrupt generation.

// Register SDMMC_INTERRUPT_STATUS_ENABLE_0  
#define SDMMC_INTERRUPT_STATUS_ENABLE_0                 _MK_ADDR_CONST(0x34)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_SECURE                  0x0
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_WORD_COUNT                      0x1
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_RESET_MASK                      _MK_MASK_CONST(0xfbff01ff)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_READ_MASK                       _MK_MASK_CONST(0xfbff01ff)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_WRITE_MASK                      _MK_MASK_CONST(0xfbff01ff)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_VENDOR_SPECIFIC_ERR_SHIFT                       _MK_SHIFT_CONST(30)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_VENDOR_SPECIFIC_ERR_FIELD                       (_MK_MASK_CONST(0x3) << SDMMC_INTERRUPT_STATUS_ENABLE_0_VENDOR_SPECIFIC_ERR_SHIFT)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_VENDOR_SPECIFIC_ERR_RANGE                       31:30
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_VENDOR_SPECIFIC_ERR_WOFFSET                     0x0
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_VENDOR_SPECIFIC_ERR_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_VENDOR_SPECIFIC_ERR_DEFAULT_MASK                        _MK_MASK_CONST(0x3)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_VENDOR_SPECIFIC_ERR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_VENDOR_SPECIFIC_ERR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_VENDOR_SPECIFIC_ERR_DISABLE                     _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_VENDOR_SPECIFIC_ERR_ENABLE                      _MK_ENUM_CONST(3)

#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CEATA_ERROR_SHIFT                       _MK_SHIFT_CONST(29)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CEATA_ERROR_FIELD                       (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_ENABLE_0_CEATA_ERROR_SHIFT)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CEATA_ERROR_RANGE                       29:29
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CEATA_ERROR_WOFFSET                     0x0
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CEATA_ERROR_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CEATA_ERROR_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CEATA_ERROR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CEATA_ERROR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CEATA_ERROR_NO_ERROR                    _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CEATA_ERROR_ERROR                       _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_ENABLE_0_TARGET_RESP_ERROR_SHIFT                 _MK_SHIFT_CONST(28)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_TARGET_RESP_ERROR_FIELD                 (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_ENABLE_0_TARGET_RESP_ERROR_SHIFT)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_TARGET_RESP_ERROR_RANGE                 28:28
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_TARGET_RESP_ERROR_WOFFSET                       0x0
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_TARGET_RESP_ERROR_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_TARGET_RESP_ERROR_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_TARGET_RESP_ERROR_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_TARGET_RESP_ERROR_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_TARGET_RESP_ERROR_NO_ERROR                      _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_TARGET_RESP_ERROR_ERROR                 _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_ENABLE_0_SPI_ERR_SHIFT                   _MK_SHIFT_CONST(27)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_SPI_ERR_FIELD                   (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_ENABLE_0_SPI_ERR_SHIFT)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_SPI_ERR_RANGE                   27:27
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_SPI_ERR_WOFFSET                 0x0
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_SPI_ERR_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_SPI_ERR_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_SPI_ERR_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_SPI_ERR_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_SPI_ERR_DISABLE                 _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_SPI_ERR_ENABLE                  _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_ENABLE_0_ADMA_ERR_SHIFT                  _MK_SHIFT_CONST(25)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_ADMA_ERR_FIELD                  (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_ENABLE_0_ADMA_ERR_SHIFT)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_ADMA_ERR_RANGE                  25:25
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_ADMA_ERR_WOFFSET                        0x0
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_ADMA_ERR_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_ADMA_ERR_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_ADMA_ERR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_ADMA_ERR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_ADMA_ERR_DISABLE                        _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_ADMA_ERR_ENABLE                 _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_ENABLE_0_AUTO_CMD12_ERR_SHIFT                    _MK_SHIFT_CONST(24)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_AUTO_CMD12_ERR_FIELD                    (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_ENABLE_0_AUTO_CMD12_ERR_SHIFT)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_AUTO_CMD12_ERR_RANGE                    24:24
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_AUTO_CMD12_ERR_WOFFSET                  0x0
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_AUTO_CMD12_ERR_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_AUTO_CMD12_ERR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_AUTO_CMD12_ERR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_AUTO_CMD12_ERR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_AUTO_CMD12_ERR_DISABLE                  _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_AUTO_CMD12_ERR_ENABLE                   _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CURRENT_LIMIT_ERR_SHIFT                 _MK_SHIFT_CONST(23)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CURRENT_LIMIT_ERR_FIELD                 (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_ENABLE_0_CURRENT_LIMIT_ERR_SHIFT)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CURRENT_LIMIT_ERR_RANGE                 23:23
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CURRENT_LIMIT_ERR_WOFFSET                       0x0
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CURRENT_LIMIT_ERR_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CURRENT_LIMIT_ERR_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CURRENT_LIMIT_ERR_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CURRENT_LIMIT_ERR_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CURRENT_LIMIT_ERR_DISABLE                       _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CURRENT_LIMIT_ERR_ENABLE                        _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_END_BIT_ERR_SHIFT                  _MK_SHIFT_CONST(22)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_END_BIT_ERR_FIELD                  (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_END_BIT_ERR_SHIFT)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_END_BIT_ERR_RANGE                  22:22
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_END_BIT_ERR_WOFFSET                        0x0
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_END_BIT_ERR_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_END_BIT_ERR_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_END_BIT_ERR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_END_BIT_ERR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_END_BIT_ERR_DISABLE                        _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_END_BIT_ERR_ENABLE                 _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_CRC_ERR_SHIFT                      _MK_SHIFT_CONST(21)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_CRC_ERR_FIELD                      (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_CRC_ERR_SHIFT)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_CRC_ERR_RANGE                      21:21
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_CRC_ERR_WOFFSET                    0x0
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_CRC_ERR_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_CRC_ERR_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_CRC_ERR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_CRC_ERR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_CRC_ERR_DISABLE                    _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_CRC_ERR_ENABLE                     _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_TIMEOUT_ERR_SHIFT                  _MK_SHIFT_CONST(20)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_TIMEOUT_ERR_FIELD                  (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_TIMEOUT_ERR_SHIFT)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_TIMEOUT_ERR_RANGE                  20:20
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_TIMEOUT_ERR_WOFFSET                        0x0
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_TIMEOUT_ERR_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_TIMEOUT_ERR_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_TIMEOUT_ERR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_TIMEOUT_ERR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_TIMEOUT_ERR_DISABLE                        _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DATA_TIMEOUT_ERR_ENABLE                 _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_INDEX_ERR_SHIFT                 _MK_SHIFT_CONST(19)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_INDEX_ERR_FIELD                 (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_INDEX_ERR_SHIFT)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_INDEX_ERR_RANGE                 19:19
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_INDEX_ERR_WOFFSET                       0x0
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_INDEX_ERR_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_INDEX_ERR_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_INDEX_ERR_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_INDEX_ERR_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_INDEX_ERR_DISABLE                       _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_INDEX_ERR_ENABLE                        _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_END_BIT_ERR_SHIFT                       _MK_SHIFT_CONST(18)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_END_BIT_ERR_FIELD                       (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_END_BIT_ERR_SHIFT)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_END_BIT_ERR_RANGE                       18:18
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_END_BIT_ERR_WOFFSET                     0x0
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_END_BIT_ERR_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_END_BIT_ERR_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_END_BIT_ERR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_END_BIT_ERR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_END_BIT_ERR_DISABLE                     _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_END_BIT_ERR_ENABLE                      _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_CRC_ERR_SHIFT                   _MK_SHIFT_CONST(17)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_CRC_ERR_FIELD                   (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_CRC_ERR_SHIFT)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_CRC_ERR_RANGE                   17:17
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_CRC_ERR_WOFFSET                 0x0
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_CRC_ERR_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_CRC_ERR_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_CRC_ERR_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_CRC_ERR_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_CRC_ERR_DISABLE                 _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_CRC_ERR_ENABLE                  _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_TIMEOUT_ERR_SHIFT                       _MK_SHIFT_CONST(16)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_TIMEOUT_ERR_FIELD                       (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_TIMEOUT_ERR_SHIFT)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_TIMEOUT_ERR_RANGE                       16:16
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_TIMEOUT_ERR_WOFFSET                     0x0
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_TIMEOUT_ERR_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_TIMEOUT_ERR_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_TIMEOUT_ERR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_TIMEOUT_ERR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_TIMEOUT_ERR_DISABLE                     _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_TIMEOUT_ERR_ENABLE                      _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_INTERRUPT_SHIFT                    _MK_SHIFT_CONST(8)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_INTERRUPT_FIELD                    (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_INTERRUPT_SHIFT)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_INTERRUPT_RANGE                    8:8
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_INTERRUPT_WOFFSET                  0x0
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_INTERRUPT_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_INTERRUPT_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_INTERRUPT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_INTERRUPT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_INTERRUPT_DISABLE                  _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_INTERRUPT_ENABLE                   _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_REMOVAL_SHIFT                      _MK_SHIFT_CONST(7)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_REMOVAL_FIELD                      (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_REMOVAL_SHIFT)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_REMOVAL_RANGE                      7:7
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_REMOVAL_WOFFSET                    0x0
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_REMOVAL_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_REMOVAL_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_REMOVAL_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_REMOVAL_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_REMOVAL_DISABLE                    _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_REMOVAL_ENABLE                     _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_INSERTION_SHIFT                    _MK_SHIFT_CONST(6)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_INSERTION_FIELD                    (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_INSERTION_SHIFT)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_INSERTION_RANGE                    6:6
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_INSERTION_WOFFSET                  0x0
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_INSERTION_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_INSERTION_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_INSERTION_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_INSERTION_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_INSERTION_DISABLE                  _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_CARD_INSERTION_ENABLE                   _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BUFFER_READ_READY_SHIFT                 _MK_SHIFT_CONST(5)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BUFFER_READ_READY_FIELD                 (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_ENABLE_0_BUFFER_READ_READY_SHIFT)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BUFFER_READ_READY_RANGE                 5:5
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BUFFER_READ_READY_WOFFSET                       0x0
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BUFFER_READ_READY_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BUFFER_READ_READY_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BUFFER_READ_READY_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BUFFER_READ_READY_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BUFFER_READ_READY_DISABLE                       _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BUFFER_READ_READY_ENABLE                        _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BUFFER_WRITE_READY_SHIFT                        _MK_SHIFT_CONST(4)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BUFFER_WRITE_READY_FIELD                        (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_ENABLE_0_BUFFER_WRITE_READY_SHIFT)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BUFFER_WRITE_READY_RANGE                        4:4
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BUFFER_WRITE_READY_WOFFSET                      0x0
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BUFFER_WRITE_READY_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BUFFER_WRITE_READY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BUFFER_WRITE_READY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BUFFER_WRITE_READY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BUFFER_WRITE_READY_DISABLE                      _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BUFFER_WRITE_READY_ENABLE                       _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DMA_INTERRUPT_SHIFT                     _MK_SHIFT_CONST(3)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DMA_INTERRUPT_FIELD                     (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_ENABLE_0_DMA_INTERRUPT_SHIFT)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DMA_INTERRUPT_RANGE                     3:3
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DMA_INTERRUPT_WOFFSET                   0x0
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DMA_INTERRUPT_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DMA_INTERRUPT_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DMA_INTERRUPT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DMA_INTERRUPT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DMA_INTERRUPT_DISABLE                   _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_DMA_INTERRUPT_ENABLE                    _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BLOCK_GAP_EVENT_SHIFT                   _MK_SHIFT_CONST(2)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BLOCK_GAP_EVENT_FIELD                   (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_ENABLE_0_BLOCK_GAP_EVENT_SHIFT)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BLOCK_GAP_EVENT_RANGE                   2:2
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BLOCK_GAP_EVENT_WOFFSET                 0x0
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BLOCK_GAP_EVENT_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BLOCK_GAP_EVENT_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BLOCK_GAP_EVENT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BLOCK_GAP_EVENT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BLOCK_GAP_EVENT_DISABLE                 _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_BLOCK_GAP_EVENT_ENABLE                  _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_ENABLE_0_TRANSFER_COMPLETE_SHIFT                 _MK_SHIFT_CONST(1)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_TRANSFER_COMPLETE_FIELD                 (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_ENABLE_0_TRANSFER_COMPLETE_SHIFT)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_TRANSFER_COMPLETE_RANGE                 1:1
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_TRANSFER_COMPLETE_WOFFSET                       0x0
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_TRANSFER_COMPLETE_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_TRANSFER_COMPLETE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_TRANSFER_COMPLETE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_TRANSFER_COMPLETE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_TRANSFER_COMPLETE_DISABLE                       _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_TRANSFER_COMPLETE_ENABLE                        _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_COMPLETE_SHIFT                  _MK_SHIFT_CONST(0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_COMPLETE_FIELD                  (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_COMPLETE_SHIFT)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_COMPLETE_RANGE                  0:0
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_COMPLETE_WOFFSET                        0x0
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_COMPLETE_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_COMPLETE_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_COMPLETE_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_COMPLETE_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_COMPLETE_DISABLE                        _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_STATUS_ENABLE_0_COMMAND_COMPLETE_ENABLE                 _MK_ENUM_CONST(1)

// Normal Interrupt Signal Enable Register
//--------------------------------------------------------------
//This register is used to select which interrupt status is notified to the Host System as the interrupt. These
//status bits all share the same 1 bit interrupt line. Setting any of these bits to 1 enables interrupt generation.

// Register SDMMC_INTERRUPT_SIGNAL_ENABLE_0  
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0                 _MK_ADDR_CONST(0x38)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_SECURE                  0x0
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_WORD_COUNT                      0x1
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_RESET_MASK                      _MK_MASK_CONST(0xfbff01ff)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_READ_MASK                       _MK_MASK_CONST(0xfbff01ff)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_WRITE_MASK                      _MK_MASK_CONST(0xfbff01ff)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_VENDOR_SPECIFIC_ERR_SHIFT                       _MK_SHIFT_CONST(30)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_VENDOR_SPECIFIC_ERR_FIELD                       (_MK_MASK_CONST(0x3) << SDMMC_INTERRUPT_SIGNAL_ENABLE_0_VENDOR_SPECIFIC_ERR_SHIFT)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_VENDOR_SPECIFIC_ERR_RANGE                       31:30
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_VENDOR_SPECIFIC_ERR_WOFFSET                     0x0
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_VENDOR_SPECIFIC_ERR_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_VENDOR_SPECIFIC_ERR_DEFAULT_MASK                        _MK_MASK_CONST(0x3)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_VENDOR_SPECIFIC_ERR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_VENDOR_SPECIFIC_ERR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_VENDOR_SPECIFIC_ERR_DISABLE                     _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_VENDOR_SPECIFIC_ERR_ENABLE                      _MK_ENUM_CONST(3)

#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CEATA_ERROR_SHIFT                       _MK_SHIFT_CONST(29)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CEATA_ERROR_FIELD                       (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CEATA_ERROR_SHIFT)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CEATA_ERROR_RANGE                       29:29
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CEATA_ERROR_WOFFSET                     0x0
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CEATA_ERROR_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CEATA_ERROR_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CEATA_ERROR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CEATA_ERROR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CEATA_ERROR_NO_ERROR                    _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CEATA_ERROR_ERROR                       _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_TARGET_RESP_ERROR_SHIFT                 _MK_SHIFT_CONST(28)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_TARGET_RESP_ERROR_FIELD                 (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_SIGNAL_ENABLE_0_TARGET_RESP_ERROR_SHIFT)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_TARGET_RESP_ERROR_RANGE                 28:28
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_TARGET_RESP_ERROR_WOFFSET                       0x0
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_TARGET_RESP_ERROR_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_TARGET_RESP_ERROR_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_TARGET_RESP_ERROR_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_TARGET_RESP_ERROR_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_TARGET_RESP_ERROR_NO_ERROR                      _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_TARGET_RESP_ERROR_ERROR                 _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_SPI_ERR_SHIFT                   _MK_SHIFT_CONST(27)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_SPI_ERR_FIELD                   (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_SIGNAL_ENABLE_0_SPI_ERR_SHIFT)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_SPI_ERR_RANGE                   27:27
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_SPI_ERR_WOFFSET                 0x0
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_SPI_ERR_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_SPI_ERR_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_SPI_ERR_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_SPI_ERR_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_SPI_ERR_DISABLE                 _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_SPI_ERR_ENABLE                  _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_ADMA_ERR_SHIFT                  _MK_SHIFT_CONST(25)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_ADMA_ERR_FIELD                  (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_SIGNAL_ENABLE_0_ADMA_ERR_SHIFT)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_ADMA_ERR_RANGE                  25:25
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_ADMA_ERR_WOFFSET                        0x0
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_ADMA_ERR_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_ADMA_ERR_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_ADMA_ERR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_ADMA_ERR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_ADMA_ERR_DISABLE                        _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_ADMA_ERR_ENABLE                 _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_AUTO_CMD12_ERR_SHIFT                    _MK_SHIFT_CONST(24)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_AUTO_CMD12_ERR_FIELD                    (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_SIGNAL_ENABLE_0_AUTO_CMD12_ERR_SHIFT)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_AUTO_CMD12_ERR_RANGE                    24:24
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_AUTO_CMD12_ERR_WOFFSET                  0x0
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_AUTO_CMD12_ERR_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_AUTO_CMD12_ERR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_AUTO_CMD12_ERR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_AUTO_CMD12_ERR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_AUTO_CMD12_ERR_DISABLE                  _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_AUTO_CMD12_ERR_ENABLE                   _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CURRENT_LIMIT_ERR_SHIFT                 _MK_SHIFT_CONST(23)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CURRENT_LIMIT_ERR_FIELD                 (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CURRENT_LIMIT_ERR_SHIFT)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CURRENT_LIMIT_ERR_RANGE                 23:23
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CURRENT_LIMIT_ERR_WOFFSET                       0x0
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CURRENT_LIMIT_ERR_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CURRENT_LIMIT_ERR_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CURRENT_LIMIT_ERR_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CURRENT_LIMIT_ERR_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CURRENT_LIMIT_ERR_DISABLE                       _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CURRENT_LIMIT_ERR_ENABLE                        _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_END_BIT_ERR_SHIFT                  _MK_SHIFT_CONST(22)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_END_BIT_ERR_FIELD                  (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_END_BIT_ERR_SHIFT)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_END_BIT_ERR_RANGE                  22:22
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_END_BIT_ERR_WOFFSET                        0x0
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_END_BIT_ERR_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_END_BIT_ERR_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_END_BIT_ERR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_END_BIT_ERR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_END_BIT_ERR_DISABLE                        _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_END_BIT_ERR_ENABLE                 _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_CRC_ERR_SHIFT                      _MK_SHIFT_CONST(21)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_CRC_ERR_FIELD                      (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_CRC_ERR_SHIFT)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_CRC_ERR_RANGE                      21:21
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_CRC_ERR_WOFFSET                    0x0
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_CRC_ERR_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_CRC_ERR_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_CRC_ERR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_CRC_ERR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_CRC_ERR_DISABLE                    _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_CRC_ERR_ENABLE                     _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_TIMEOUT_ERR_SHIFT                  _MK_SHIFT_CONST(20)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_TIMEOUT_ERR_FIELD                  (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_TIMEOUT_ERR_SHIFT)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_TIMEOUT_ERR_RANGE                  20:20
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_TIMEOUT_ERR_WOFFSET                        0x0
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_TIMEOUT_ERR_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_TIMEOUT_ERR_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_TIMEOUT_ERR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_TIMEOUT_ERR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_TIMEOUT_ERR_DISABLE                        _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DATA_TIMEOUT_ERR_ENABLE                 _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_INDEX_ERR_SHIFT                 _MK_SHIFT_CONST(19)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_INDEX_ERR_FIELD                 (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_INDEX_ERR_SHIFT)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_INDEX_ERR_RANGE                 19:19
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_INDEX_ERR_WOFFSET                       0x0
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_INDEX_ERR_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_INDEX_ERR_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_INDEX_ERR_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_INDEX_ERR_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_INDEX_ERR_DISABLE                       _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_INDEX_ERR_ENABLE                        _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_END_BIT_ERR_SHIFT                       _MK_SHIFT_CONST(18)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_END_BIT_ERR_FIELD                       (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_END_BIT_ERR_SHIFT)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_END_BIT_ERR_RANGE                       18:18
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_END_BIT_ERR_WOFFSET                     0x0
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_END_BIT_ERR_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_END_BIT_ERR_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_END_BIT_ERR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_END_BIT_ERR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_END_BIT_ERR_DISABLE                     _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_END_BIT_ERR_ENABLE                      _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_CRC_ERR_SHIFT                   _MK_SHIFT_CONST(17)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_CRC_ERR_FIELD                   (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_CRC_ERR_SHIFT)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_CRC_ERR_RANGE                   17:17
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_CRC_ERR_WOFFSET                 0x0
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_CRC_ERR_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_CRC_ERR_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_CRC_ERR_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_CRC_ERR_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_CRC_ERR_DISABLE                 _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_CRC_ERR_ENABLE                  _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_TIMEOUT_ERR_SHIFT                       _MK_SHIFT_CONST(16)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_TIMEOUT_ERR_FIELD                       (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_TIMEOUT_ERR_SHIFT)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_TIMEOUT_ERR_RANGE                       16:16
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_TIMEOUT_ERR_WOFFSET                     0x0
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_TIMEOUT_ERR_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_TIMEOUT_ERR_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_TIMEOUT_ERR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_TIMEOUT_ERR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_TIMEOUT_ERR_DISABLE                     _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_TIMEOUT_ERR_ENABLE                      _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_INTERRUPT_SHIFT                    _MK_SHIFT_CONST(8)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_INTERRUPT_FIELD                    (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_INTERRUPT_SHIFT)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_INTERRUPT_RANGE                    8:8
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_INTERRUPT_WOFFSET                  0x0
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_INTERRUPT_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_INTERRUPT_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_INTERRUPT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_INTERRUPT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_INTERRUPT_DISABLE                  _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_INTERRUPT_ENABLE                   _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_REMOVAL_SHIFT                      _MK_SHIFT_CONST(7)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_REMOVAL_FIELD                      (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_REMOVAL_SHIFT)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_REMOVAL_RANGE                      7:7
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_REMOVAL_WOFFSET                    0x0
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_REMOVAL_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_REMOVAL_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_REMOVAL_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_REMOVAL_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_REMOVAL_DISABLE                    _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_REMOVAL_ENABLE                     _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_INSERTION_SHIFT                    _MK_SHIFT_CONST(6)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_INSERTION_FIELD                    (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_INSERTION_SHIFT)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_INSERTION_RANGE                    6:6
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_INSERTION_WOFFSET                  0x0
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_INSERTION_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_INSERTION_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_INSERTION_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_INSERTION_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_INSERTION_DISABLE                  _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_CARD_INSERTION_ENABLE                   _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BUFFER_READ_READY_SHIFT                 _MK_SHIFT_CONST(5)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BUFFER_READ_READY_FIELD                 (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BUFFER_READ_READY_SHIFT)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BUFFER_READ_READY_RANGE                 5:5
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BUFFER_READ_READY_WOFFSET                       0x0
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BUFFER_READ_READY_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BUFFER_READ_READY_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BUFFER_READ_READY_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BUFFER_READ_READY_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BUFFER_READ_READY_DISABLE                       _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BUFFER_READ_READY_ENABLE                        _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BUFFER_WRITE_READY_SHIFT                        _MK_SHIFT_CONST(4)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BUFFER_WRITE_READY_FIELD                        (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BUFFER_WRITE_READY_SHIFT)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BUFFER_WRITE_READY_RANGE                        4:4
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BUFFER_WRITE_READY_WOFFSET                      0x0
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BUFFER_WRITE_READY_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BUFFER_WRITE_READY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BUFFER_WRITE_READY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BUFFER_WRITE_READY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BUFFER_WRITE_READY_DISABLE                      _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BUFFER_WRITE_READY_ENABLE                       _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DMA_INTERRUPT_SHIFT                     _MK_SHIFT_CONST(3)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DMA_INTERRUPT_FIELD                     (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DMA_INTERRUPT_SHIFT)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DMA_INTERRUPT_RANGE                     3:3
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DMA_INTERRUPT_WOFFSET                   0x0
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DMA_INTERRUPT_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DMA_INTERRUPT_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DMA_INTERRUPT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DMA_INTERRUPT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DMA_INTERRUPT_DISABLE                   _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_DMA_INTERRUPT_ENABLE                    _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BLOCK_GAP_EVENT_SHIFT                   _MK_SHIFT_CONST(2)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BLOCK_GAP_EVENT_FIELD                   (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BLOCK_GAP_EVENT_SHIFT)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BLOCK_GAP_EVENT_RANGE                   2:2
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BLOCK_GAP_EVENT_WOFFSET                 0x0
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BLOCK_GAP_EVENT_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BLOCK_GAP_EVENT_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BLOCK_GAP_EVENT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BLOCK_GAP_EVENT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BLOCK_GAP_EVENT_DISABLE                 _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_BLOCK_GAP_EVENT_ENABLE                  _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_TRANSFER_COMPLETE_SHIFT                 _MK_SHIFT_CONST(1)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_TRANSFER_COMPLETE_FIELD                 (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_SIGNAL_ENABLE_0_TRANSFER_COMPLETE_SHIFT)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_TRANSFER_COMPLETE_RANGE                 1:1
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_TRANSFER_COMPLETE_WOFFSET                       0x0
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_TRANSFER_COMPLETE_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_TRANSFER_COMPLETE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_TRANSFER_COMPLETE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_TRANSFER_COMPLETE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_TRANSFER_COMPLETE_DISABLE                       _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_TRANSFER_COMPLETE_ENABLE                        _MK_ENUM_CONST(1)

#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_COMPLETE_SHIFT                  _MK_SHIFT_CONST(0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_COMPLETE_FIELD                  (_MK_MASK_CONST(0x1) << SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_COMPLETE_SHIFT)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_COMPLETE_RANGE                  0:0
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_COMPLETE_WOFFSET                        0x0
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_COMPLETE_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_COMPLETE_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_COMPLETE_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_COMPLETE_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_COMPLETE_DISABLE                        _MK_ENUM_CONST(0)
#define SDMMC_INTERRUPT_SIGNAL_ENABLE_0_COMMAND_COMPLETE_ENABLE                 _MK_ENUM_CONST(1)

// Auto CMD12 Error Status Register
//--------------------------------------------------------------
//COMMAND_NOT_ISSUED - Command Not Issued By Auto CMD12 Error
//    Setting this bit to 1 means CMD_wo_DAT is not executed due to an Auto
//    CMD12 Error (D04-D01) in this register.
//INDEX_ERR - Auto CMD12 Index Error
//    This bit is set if the Command Index error occurs in response to a command.
//END_BIT_ERR - Auto CMD12 End Bit Error
//    This bit is set when detecting that the end bit of command response is 0.
//CRC_ERR - Auto CMD12 CRC Error
//    This bit is set when detecting a CRC error in the command response.
//TIMEOUT_ERR - Auto CMD12 Timeout Error
//    This bit is set if no response is returned within 64 SDCLK cycles from the end bit of command.
//    If this bit is set to1, the other error status bits (D04-D02) are meaningless.
//NOT_EXECUTED - Auto CMD12 Not Executed
//    If memory multiple block data transfer is not started due to command error,
//    this bit is not set because it is not necessary to issue Auto CMD12. Setting
//    this bit to 1 means the Host Controller cannot issue Auto CMD12 to stop
//    memory multiple block data transfer due to some error. If this bit is set to 1,
//    other error status bits (D04-D01) are meaningless.
//The relation between Auto CMD12 CRC Error and Auto CMD12 Timeout Error is shown below
//------------------|--------------------------|-------------------------------
//|Auto CMD12       |       Auto CMD12         |      Kinds of error           |
//|CRC Error        |       Timeout Error      |                               |
//|-----------------|--------------------------|-------------------------------|
//|   0             |            0             |        No Error               | 
//|   0             |            1             |        Response Timeout Error |
//|   1             |            0             |        Response CRC Error     |
//|   1             |            1             |        CMD line conflict      |
//------------------------------------------------------------------------------

// Register SDMMC_AUTO_CMD12_ERR_STATUS_0  
#define SDMMC_AUTO_CMD12_ERR_STATUS_0                   _MK_ADDR_CONST(0x3c)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_SECURE                    0x0
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_WORD_COUNT                        0x1
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_RESET_MASK                        _MK_MASK_CONST(0x9f)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_READ_MASK                         _MK_MASK_CONST(0x9f)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_WRITE_MASK                        _MK_MASK_CONST(0x0)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_COMMAND_NOT_ISSUED_SHIFT                  _MK_SHIFT_CONST(7)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_COMMAND_NOT_ISSUED_FIELD                  (_MK_MASK_CONST(0x1) << SDMMC_AUTO_CMD12_ERR_STATUS_0_COMMAND_NOT_ISSUED_SHIFT)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_COMMAND_NOT_ISSUED_RANGE                  7:7
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_COMMAND_NOT_ISSUED_WOFFSET                        0x0
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_COMMAND_NOT_ISSUED_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_COMMAND_NOT_ISSUED_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_COMMAND_NOT_ISSUED_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_COMMAND_NOT_ISSUED_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_COMMAND_NOT_ISSUED_NO_ERR                 _MK_ENUM_CONST(0)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_COMMAND_NOT_ISSUED_NOT_ISSUED                     _MK_ENUM_CONST(1)

#define SDMMC_AUTO_CMD12_ERR_STATUS_0_INDEX_ERR_SHIFT                   _MK_SHIFT_CONST(4)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_INDEX_ERR_FIELD                   (_MK_MASK_CONST(0x1) << SDMMC_AUTO_CMD12_ERR_STATUS_0_INDEX_ERR_SHIFT)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_INDEX_ERR_RANGE                   4:4
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_INDEX_ERR_WOFFSET                 0x0
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_INDEX_ERR_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_INDEX_ERR_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_INDEX_ERR_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_INDEX_ERR_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_INDEX_ERR_NO_ERR                  _MK_ENUM_CONST(0)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_INDEX_ERR_ERR                     _MK_ENUM_CONST(1)

#define SDMMC_AUTO_CMD12_ERR_STATUS_0_END_BIT_ERR_SHIFT                 _MK_SHIFT_CONST(3)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_END_BIT_ERR_FIELD                 (_MK_MASK_CONST(0x1) << SDMMC_AUTO_CMD12_ERR_STATUS_0_END_BIT_ERR_SHIFT)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_END_BIT_ERR_RANGE                 3:3
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_END_BIT_ERR_WOFFSET                       0x0
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_END_BIT_ERR_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_END_BIT_ERR_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_END_BIT_ERR_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_END_BIT_ERR_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_END_BIT_ERR_NO_ERR                        _MK_ENUM_CONST(0)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_END_BIT_ERR_END_BIT_ERR_GENERATED                 _MK_ENUM_CONST(1)

#define SDMMC_AUTO_CMD12_ERR_STATUS_0_CRC_ERR_SHIFT                     _MK_SHIFT_CONST(2)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_CRC_ERR_FIELD                     (_MK_MASK_CONST(0x1) << SDMMC_AUTO_CMD12_ERR_STATUS_0_CRC_ERR_SHIFT)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_CRC_ERR_RANGE                     2:2
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_CRC_ERR_WOFFSET                   0x0
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_CRC_ERR_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_CRC_ERR_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_CRC_ERR_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_CRC_ERR_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_CRC_ERR_NO_ERR                    _MK_ENUM_CONST(0)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_CRC_ERR_CRC_ERR_GENERATED                 _MK_ENUM_CONST(1)

#define SDMMC_AUTO_CMD12_ERR_STATUS_0_TIMEOUT_ERR_SHIFT                 _MK_SHIFT_CONST(1)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_TIMEOUT_ERR_FIELD                 (_MK_MASK_CONST(0x1) << SDMMC_AUTO_CMD12_ERR_STATUS_0_TIMEOUT_ERR_SHIFT)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_TIMEOUT_ERR_RANGE                 1:1
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_TIMEOUT_ERR_WOFFSET                       0x0
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_TIMEOUT_ERR_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_TIMEOUT_ERR_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_TIMEOUT_ERR_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_TIMEOUT_ERR_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_TIMEOUT_ERR_NO_ERR                        _MK_ENUM_CONST(0)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_TIMEOUT_ERR_TIMEOUT                       _MK_ENUM_CONST(1)

#define SDMMC_AUTO_CMD12_ERR_STATUS_0_NOT_EXECUTED_SHIFT                        _MK_SHIFT_CONST(0)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_NOT_EXECUTED_FIELD                        (_MK_MASK_CONST(0x1) << SDMMC_AUTO_CMD12_ERR_STATUS_0_NOT_EXECUTED_SHIFT)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_NOT_EXECUTED_RANGE                        0:0
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_NOT_EXECUTED_WOFFSET                      0x0
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_NOT_EXECUTED_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_NOT_EXECUTED_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_NOT_EXECUTED_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_NOT_EXECUTED_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_NOT_EXECUTED_EXECUTED                     _MK_ENUM_CONST(0)
#define SDMMC_AUTO_CMD12_ERR_STATUS_0_NOT_EXECUTED_NOT_EXECUTED                 _MK_ENUM_CONST(1)

// Capabilities Register
//--------------------------------------------------------------
//SPI_BLOCK_MODE
//   Setting 1 indicates spi block mode is supported
//SPI_MODE 
//   Setting 1 indicates spi mode is supported
//SYSTEM_BUS_64BIT_SUPPORT - 64-bit System Bus Support
//    Setting 1 to this bit indicates that the Host Controller supports 64-bit
//    address descriptor mode and is connected to 64-bit address system bus.
//INTERRUPT_MODE
//   Setting 1 indicates interrupt mode is supported
//VOLTAGE_SUPPORT_1_8_V - Voltage Support 1.8V
//VOLTAGE_SUPPORT_3_0_V - Voltage Support 3.0V
//VOLTAGE_SUPPORT_3_3_V - Voltage Support 3.3V
//SUSPEND_RESUME_SUPPORT - Suspend/Resume Support
//    This bit indicates whether the Host Controller supports Suspend / Resume
//    functionality. If this bit is 0, the Host Driver shall not issue either Suspend or
//    Resume commands because the Suspend and Resume mechanism (Refer to
//    1.6) is not supported.
//DMA_SUPPORT - SDMA Support
//    This bit indicates whether the Host Controller is capable of using SDMA to
//    transfer data between system memory and the Host Controller directly.
//HIGH_SPEED_SUPPORT - High Speed Support
//    This bit indicates whether the Host Controller and the Host System support High
//    Speed mode and they can supply SD Clock frequency from 25MHz to 50MHz.
//ADMA1_SUPPORT - ADMA1 Support
//    This bit indicates whether the Host Controller is capable of using ADMA1.
//ADMA2_SUPPORT - ADMA2 Support
//    This bit indicates whether the Host Controller is capable of using ADMA2.
//EXTENDED_MEDIA_BUS_SUPPORT
//    Setting to 1,indicates 8-bit data bus is supported.
//MAX_BLOCK_LENGTH - Max Block Length
//    This value indicates the maximum block size that the Host Driver can read and
//    write to the buffer in the Host Controller. The buffer shall transfer this block size
//    without wait cycles. Three sizes can be defined as indicated below. It is noted
//    that transfer block length shall be always 512 bytes for SD Memory Cards
//    regardless this field.
//BASE_CLOCK_FREQUENCY - Base Clock Frequency For SD Clock                      
//    This value indicates the base (maximum) clock frequency for the SD Clock. Unit
//    values are 1MHz. If the real frequency is 16.5MHz, the lager value shall be set
//    01 0001b (17MHz) because the Host Driver use this value to calculate the clock
//    divider value (Refer to the SDCLK Frequency Select in the Clock Control
//    register.) and it shall not exceed upper limit of the SD Clock frequency. The
//    supported clock range is 10MHz to 63MHz. If these bits are all 0, the Host
//    System has to get information via another method.
//      Not 0  -  1MHz to 63MHz
//      000000b- Get information via another method
//TIMEOUT_CLOCK_UNIT - Timeout Clock Unit
//    This bit shows the unit of base clock frequency used to detect Data Timeout Error.
//      0 KHz
//      1 MHz
//TIMEOUT_CLOCK_FREQUENCY - Timeout Clock Frequency
//    This bit shows the base clock frequency used to detect Data Timeout Error.
//    The Timeout Clock Unit defines the unit of this field's value.
//    Timeout Clock Unit =0 [KHz] unit: 1KHz to 63KHz
//    Timeout Clock Unit =1 [MHz] unit: 1MHz to 63MHz
//      Not 0   - 1KHz to 63KHz or 1MHz to 63MHz
//      000000b - Get information via another method

// Register SDMMC_CAPABILITIES_0  
#define SDMMC_CAPABILITIES_0                    _MK_ADDR_CONST(0x40)
#define SDMMC_CAPABILITIES_0_SECURE                     0x0
#define SDMMC_CAPABILITIES_0_WORD_COUNT                         0x1
#define SDMMC_CAPABILITIES_0_RESET_VAL                  _MK_MASK_CONST(0x61ff30b0)
#define SDMMC_CAPABILITIES_0_RESET_MASK                         _MK_MASK_CONST(0x7fff3fbf)
#define SDMMC_CAPABILITIES_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_READ_MASK                  _MK_MASK_CONST(0x7fff3fbf)
#define SDMMC_CAPABILITIES_0_WRITE_MASK                         _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_SPI_BLOCK_MODE_SHIFT                       _MK_SHIFT_CONST(30)
#define SDMMC_CAPABILITIES_0_SPI_BLOCK_MODE_FIELD                       (_MK_MASK_CONST(0x1) << SDMMC_CAPABILITIES_0_SPI_BLOCK_MODE_SHIFT)
#define SDMMC_CAPABILITIES_0_SPI_BLOCK_MODE_RANGE                       30:30
#define SDMMC_CAPABILITIES_0_SPI_BLOCK_MODE_WOFFSET                     0x0
#define SDMMC_CAPABILITIES_0_SPI_BLOCK_MODE_DEFAULT                     _MK_MASK_CONST(0x1)
#define SDMMC_CAPABILITIES_0_SPI_BLOCK_MODE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define SDMMC_CAPABILITIES_0_SPI_BLOCK_MODE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_SPI_BLOCK_MODE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_SPI_BLOCK_MODE_NOT_SUPPORTED                       _MK_ENUM_CONST(0)
#define SDMMC_CAPABILITIES_0_SPI_BLOCK_MODE_SUPPORTED                   _MK_ENUM_CONST(1)

#define SDMMC_CAPABILITIES_0_SPI_MODE_SHIFT                     _MK_SHIFT_CONST(29)
#define SDMMC_CAPABILITIES_0_SPI_MODE_FIELD                     (_MK_MASK_CONST(0x1) << SDMMC_CAPABILITIES_0_SPI_MODE_SHIFT)
#define SDMMC_CAPABILITIES_0_SPI_MODE_RANGE                     29:29
#define SDMMC_CAPABILITIES_0_SPI_MODE_WOFFSET                   0x0
#define SDMMC_CAPABILITIES_0_SPI_MODE_DEFAULT                   _MK_MASK_CONST(0x1)
#define SDMMC_CAPABILITIES_0_SPI_MODE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define SDMMC_CAPABILITIES_0_SPI_MODE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_SPI_MODE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_SPI_MODE_NOT_SUPPORTED                     _MK_ENUM_CONST(0)
#define SDMMC_CAPABILITIES_0_SPI_MODE_SUPPORTED                 _MK_ENUM_CONST(1)

#define SDMMC_CAPABILITIES_0_SYSTEM_BUS_64BIT_SUPPORT_SHIFT                     _MK_SHIFT_CONST(28)
#define SDMMC_CAPABILITIES_0_SYSTEM_BUS_64BIT_SUPPORT_FIELD                     (_MK_MASK_CONST(0x1) << SDMMC_CAPABILITIES_0_SYSTEM_BUS_64BIT_SUPPORT_SHIFT)
#define SDMMC_CAPABILITIES_0_SYSTEM_BUS_64BIT_SUPPORT_RANGE                     28:28
#define SDMMC_CAPABILITIES_0_SYSTEM_BUS_64BIT_SUPPORT_WOFFSET                   0x0
#define SDMMC_CAPABILITIES_0_SYSTEM_BUS_64BIT_SUPPORT_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_SYSTEM_BUS_64BIT_SUPPORT_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define SDMMC_CAPABILITIES_0_SYSTEM_BUS_64BIT_SUPPORT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_SYSTEM_BUS_64BIT_SUPPORT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_SYSTEM_BUS_64BIT_SUPPORT_NOT_SUPPORTED                     _MK_ENUM_CONST(0)
#define SDMMC_CAPABILITIES_0_SYSTEM_BUS_64BIT_SUPPORT_SUPPORTED                 _MK_ENUM_CONST(1)

#define SDMMC_CAPABILITIES_0_INTERRUPT_MODE_SHIFT                       _MK_SHIFT_CONST(27)
#define SDMMC_CAPABILITIES_0_INTERRUPT_MODE_FIELD                       (_MK_MASK_CONST(0x1) << SDMMC_CAPABILITIES_0_INTERRUPT_MODE_SHIFT)
#define SDMMC_CAPABILITIES_0_INTERRUPT_MODE_RANGE                       27:27
#define SDMMC_CAPABILITIES_0_INTERRUPT_MODE_WOFFSET                     0x0
#define SDMMC_CAPABILITIES_0_INTERRUPT_MODE_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_INTERRUPT_MODE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define SDMMC_CAPABILITIES_0_INTERRUPT_MODE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_INTERRUPT_MODE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_INTERRUPT_MODE_NOT_SUPPORTED                       _MK_ENUM_CONST(0)
#define SDMMC_CAPABILITIES_0_INTERRUPT_MODE_SUPPORTED                   _MK_ENUM_CONST(1)

#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_1_8_V_SHIFT                        _MK_SHIFT_CONST(26)
#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_1_8_V_FIELD                        (_MK_MASK_CONST(0x1) << SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_1_8_V_SHIFT)
#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_1_8_V_RANGE                        26:26
#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_1_8_V_WOFFSET                      0x0
#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_1_8_V_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_1_8_V_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_1_8_V_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_1_8_V_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_1_8_V_NOT_SUPPORTED                        _MK_ENUM_CONST(0)
#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_1_8_V_SUPPORTED                    _MK_ENUM_CONST(1)

#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_3_0_V_SHIFT                        _MK_SHIFT_CONST(25)
#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_3_0_V_FIELD                        (_MK_MASK_CONST(0x1) << SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_3_0_V_SHIFT)
#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_3_0_V_RANGE                        25:25
#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_3_0_V_WOFFSET                      0x0
#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_3_0_V_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_3_0_V_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_3_0_V_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_3_0_V_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_3_0_V_NOT_SUPPORTED                        _MK_ENUM_CONST(0)
#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_3_0_V_SUPPORTED                    _MK_ENUM_CONST(1)

#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_3_3_V_SHIFT                        _MK_SHIFT_CONST(24)
#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_3_3_V_FIELD                        (_MK_MASK_CONST(0x1) << SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_3_3_V_SHIFT)
#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_3_3_V_RANGE                        24:24
#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_3_3_V_WOFFSET                      0x0
#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_3_3_V_DEFAULT                      _MK_MASK_CONST(0x1)
#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_3_3_V_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_3_3_V_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_3_3_V_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_3_3_V_NOT_SUPPORTED                        _MK_ENUM_CONST(0)
#define SDMMC_CAPABILITIES_0_VOLTAGE_SUPPORT_3_3_V_SUPPORTED                    _MK_ENUM_CONST(1)

#define SDMMC_CAPABILITIES_0_SUSPEND_RESUME_SUPPORT_SHIFT                       _MK_SHIFT_CONST(23)
#define SDMMC_CAPABILITIES_0_SUSPEND_RESUME_SUPPORT_FIELD                       (_MK_MASK_CONST(0x1) << SDMMC_CAPABILITIES_0_SUSPEND_RESUME_SUPPORT_SHIFT)
#define SDMMC_CAPABILITIES_0_SUSPEND_RESUME_SUPPORT_RANGE                       23:23
#define SDMMC_CAPABILITIES_0_SUSPEND_RESUME_SUPPORT_WOFFSET                     0x0
#define SDMMC_CAPABILITIES_0_SUSPEND_RESUME_SUPPORT_DEFAULT                     _MK_MASK_CONST(0x1)
#define SDMMC_CAPABILITIES_0_SUSPEND_RESUME_SUPPORT_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define SDMMC_CAPABILITIES_0_SUSPEND_RESUME_SUPPORT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_SUSPEND_RESUME_SUPPORT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_SUSPEND_RESUME_SUPPORT_NOT_SUPPORTED                       _MK_ENUM_CONST(0)
#define SDMMC_CAPABILITIES_0_SUSPEND_RESUME_SUPPORT_SUPPORTED                   _MK_ENUM_CONST(1)

#define SDMMC_CAPABILITIES_0_DMA_SUPPORT_SHIFT                  _MK_SHIFT_CONST(22)
#define SDMMC_CAPABILITIES_0_DMA_SUPPORT_FIELD                  (_MK_MASK_CONST(0x1) << SDMMC_CAPABILITIES_0_DMA_SUPPORT_SHIFT)
#define SDMMC_CAPABILITIES_0_DMA_SUPPORT_RANGE                  22:22
#define SDMMC_CAPABILITIES_0_DMA_SUPPORT_WOFFSET                        0x0
#define SDMMC_CAPABILITIES_0_DMA_SUPPORT_DEFAULT                        _MK_MASK_CONST(0x1)
#define SDMMC_CAPABILITIES_0_DMA_SUPPORT_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define SDMMC_CAPABILITIES_0_DMA_SUPPORT_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_DMA_SUPPORT_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_DMA_SUPPORT_NOT_SUPPORTED                  _MK_ENUM_CONST(0)
#define SDMMC_CAPABILITIES_0_DMA_SUPPORT_SUPPORTED                      _MK_ENUM_CONST(1)

#define SDMMC_CAPABILITIES_0_HIGH_SPEED_SUPPORT_SHIFT                   _MK_SHIFT_CONST(21)
#define SDMMC_CAPABILITIES_0_HIGH_SPEED_SUPPORT_FIELD                   (_MK_MASK_CONST(0x1) << SDMMC_CAPABILITIES_0_HIGH_SPEED_SUPPORT_SHIFT)
#define SDMMC_CAPABILITIES_0_HIGH_SPEED_SUPPORT_RANGE                   21:21
#define SDMMC_CAPABILITIES_0_HIGH_SPEED_SUPPORT_WOFFSET                 0x0
#define SDMMC_CAPABILITIES_0_HIGH_SPEED_SUPPORT_DEFAULT                 _MK_MASK_CONST(0x1)
#define SDMMC_CAPABILITIES_0_HIGH_SPEED_SUPPORT_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define SDMMC_CAPABILITIES_0_HIGH_SPEED_SUPPORT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_HIGH_SPEED_SUPPORT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_HIGH_SPEED_SUPPORT_NOT_SUPPORTED                   _MK_ENUM_CONST(0)
#define SDMMC_CAPABILITIES_0_HIGH_SPEED_SUPPORT_SUPPORTED                       _MK_ENUM_CONST(1)

#define SDMMC_CAPABILITIES_0_ADMA1_SUPPORT_SHIFT                        _MK_SHIFT_CONST(20)
#define SDMMC_CAPABILITIES_0_ADMA1_SUPPORT_FIELD                        (_MK_MASK_CONST(0x1) << SDMMC_CAPABILITIES_0_ADMA1_SUPPORT_SHIFT)
#define SDMMC_CAPABILITIES_0_ADMA1_SUPPORT_RANGE                        20:20
#define SDMMC_CAPABILITIES_0_ADMA1_SUPPORT_WOFFSET                      0x0
#define SDMMC_CAPABILITIES_0_ADMA1_SUPPORT_DEFAULT                      _MK_MASK_CONST(0x1)
#define SDMMC_CAPABILITIES_0_ADMA1_SUPPORT_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SDMMC_CAPABILITIES_0_ADMA1_SUPPORT_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_ADMA1_SUPPORT_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_ADMA1_SUPPORT_NOT_SUPPORTED                        _MK_ENUM_CONST(0)
#define SDMMC_CAPABILITIES_0_ADMA1_SUPPORT_SUPPORTED                    _MK_ENUM_CONST(1)

#define SDMMC_CAPABILITIES_0_ADMA2_SUPPORT_SHIFT                        _MK_SHIFT_CONST(19)
#define SDMMC_CAPABILITIES_0_ADMA2_SUPPORT_FIELD                        (_MK_MASK_CONST(0x1) << SDMMC_CAPABILITIES_0_ADMA2_SUPPORT_SHIFT)
#define SDMMC_CAPABILITIES_0_ADMA2_SUPPORT_RANGE                        19:19
#define SDMMC_CAPABILITIES_0_ADMA2_SUPPORT_WOFFSET                      0x0
#define SDMMC_CAPABILITIES_0_ADMA2_SUPPORT_DEFAULT                      _MK_MASK_CONST(0x1)
#define SDMMC_CAPABILITIES_0_ADMA2_SUPPORT_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SDMMC_CAPABILITIES_0_ADMA2_SUPPORT_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_ADMA2_SUPPORT_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_ADMA2_SUPPORT_NOT_SUPPORTED                        _MK_ENUM_CONST(0)
#define SDMMC_CAPABILITIES_0_ADMA2_SUPPORT_SUPPORTED                    _MK_ENUM_CONST(1)

#define SDMMC_CAPABILITIES_0_EXTENDED_MEDIA_BUS_SUPPORT_SHIFT                   _MK_SHIFT_CONST(18)
#define SDMMC_CAPABILITIES_0_EXTENDED_MEDIA_BUS_SUPPORT_FIELD                   (_MK_MASK_CONST(0x1) << SDMMC_CAPABILITIES_0_EXTENDED_MEDIA_BUS_SUPPORT_SHIFT)
#define SDMMC_CAPABILITIES_0_EXTENDED_MEDIA_BUS_SUPPORT_RANGE                   18:18
#define SDMMC_CAPABILITIES_0_EXTENDED_MEDIA_BUS_SUPPORT_WOFFSET                 0x0
#define SDMMC_CAPABILITIES_0_EXTENDED_MEDIA_BUS_SUPPORT_DEFAULT                 _MK_MASK_CONST(0x1)
#define SDMMC_CAPABILITIES_0_EXTENDED_MEDIA_BUS_SUPPORT_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define SDMMC_CAPABILITIES_0_EXTENDED_MEDIA_BUS_SUPPORT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_EXTENDED_MEDIA_BUS_SUPPORT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_EXTENDED_MEDIA_BUS_SUPPORT_NOT_SUPPORTED                   _MK_ENUM_CONST(0)
#define SDMMC_CAPABILITIES_0_EXTENDED_MEDIA_BUS_SUPPORT_SUPPORTED                       _MK_ENUM_CONST(1)

#define SDMMC_CAPABILITIES_0_MAX_BLOCK_LENGTH_SHIFT                     _MK_SHIFT_CONST(16)
#define SDMMC_CAPABILITIES_0_MAX_BLOCK_LENGTH_FIELD                     (_MK_MASK_CONST(0x3) << SDMMC_CAPABILITIES_0_MAX_BLOCK_LENGTH_SHIFT)
#define SDMMC_CAPABILITIES_0_MAX_BLOCK_LENGTH_RANGE                     17:16
#define SDMMC_CAPABILITIES_0_MAX_BLOCK_LENGTH_WOFFSET                   0x0
#define SDMMC_CAPABILITIES_0_MAX_BLOCK_LENGTH_DEFAULT                   _MK_MASK_CONST(0x3)
#define SDMMC_CAPABILITIES_0_MAX_BLOCK_LENGTH_DEFAULT_MASK                      _MK_MASK_CONST(0x3)
#define SDMMC_CAPABILITIES_0_MAX_BLOCK_LENGTH_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_MAX_BLOCK_LENGTH_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_MAX_BLOCK_LENGTH_BYTE512                   _MK_ENUM_CONST(0)
#define SDMMC_CAPABILITIES_0_MAX_BLOCK_LENGTH_BYTE1024                  _MK_ENUM_CONST(1)
#define SDMMC_CAPABILITIES_0_MAX_BLOCK_LENGTH_BYTE2048                  _MK_ENUM_CONST(2)
#define SDMMC_CAPABILITIES_0_MAX_BLOCK_LENGTH_RESERVED                  _MK_ENUM_CONST(3)

#define SDMMC_CAPABILITIES_0_BASE_CLOCK_FREQUENCY_SHIFT                 _MK_SHIFT_CONST(8)
#define SDMMC_CAPABILITIES_0_BASE_CLOCK_FREQUENCY_FIELD                 (_MK_MASK_CONST(0x3f) << SDMMC_CAPABILITIES_0_BASE_CLOCK_FREQUENCY_SHIFT)
#define SDMMC_CAPABILITIES_0_BASE_CLOCK_FREQUENCY_RANGE                 13:8
#define SDMMC_CAPABILITIES_0_BASE_CLOCK_FREQUENCY_WOFFSET                       0x0
#define SDMMC_CAPABILITIES_0_BASE_CLOCK_FREQUENCY_DEFAULT                       _MK_MASK_CONST(0x30)
#define SDMMC_CAPABILITIES_0_BASE_CLOCK_FREQUENCY_DEFAULT_MASK                  _MK_MASK_CONST(0x3f)
#define SDMMC_CAPABILITIES_0_BASE_CLOCK_FREQUENCY_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_BASE_CLOCK_FREQUENCY_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

#define SDMMC_CAPABILITIES_0_TIMEOUT_CLOCK_UNIT_SHIFT                   _MK_SHIFT_CONST(7)
#define SDMMC_CAPABILITIES_0_TIMEOUT_CLOCK_UNIT_FIELD                   (_MK_MASK_CONST(0x1) << SDMMC_CAPABILITIES_0_TIMEOUT_CLOCK_UNIT_SHIFT)
#define SDMMC_CAPABILITIES_0_TIMEOUT_CLOCK_UNIT_RANGE                   7:7
#define SDMMC_CAPABILITIES_0_TIMEOUT_CLOCK_UNIT_WOFFSET                 0x0
#define SDMMC_CAPABILITIES_0_TIMEOUT_CLOCK_UNIT_DEFAULT                 _MK_MASK_CONST(0x1)
#define SDMMC_CAPABILITIES_0_TIMEOUT_CLOCK_UNIT_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define SDMMC_CAPABILITIES_0_TIMEOUT_CLOCK_UNIT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_TIMEOUT_CLOCK_UNIT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_TIMEOUT_CLOCK_UNIT_KHZ                     _MK_ENUM_CONST(0)
#define SDMMC_CAPABILITIES_0_TIMEOUT_CLOCK_UNIT_MHZ                     _MK_ENUM_CONST(1)

#define SDMMC_CAPABILITIES_0_TIMEOUT_CLOCK_FREQUENCY_SHIFT                      _MK_SHIFT_CONST(0)
#define SDMMC_CAPABILITIES_0_TIMEOUT_CLOCK_FREQUENCY_FIELD                      (_MK_MASK_CONST(0x3f) << SDMMC_CAPABILITIES_0_TIMEOUT_CLOCK_FREQUENCY_SHIFT)
#define SDMMC_CAPABILITIES_0_TIMEOUT_CLOCK_FREQUENCY_RANGE                      5:0
#define SDMMC_CAPABILITIES_0_TIMEOUT_CLOCK_FREQUENCY_WOFFSET                    0x0
#define SDMMC_CAPABILITIES_0_TIMEOUT_CLOCK_FREQUENCY_DEFAULT                    _MK_MASK_CONST(0x30)
#define SDMMC_CAPABILITIES_0_TIMEOUT_CLOCK_FREQUENCY_DEFAULT_MASK                       _MK_MASK_CONST(0x3f)
#define SDMMC_CAPABILITIES_0_TIMEOUT_CLOCK_FREQUENCY_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_CAPABILITIES_0_TIMEOUT_CLOCK_FREQUENCY_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Reserved address 68 [0x44] 
// Maximum Current Capabilities Register

// Register SDMMC_MAXIMUM_CURRENT_0  
#define SDMMC_MAXIMUM_CURRENT_0                 _MK_ADDR_CONST(0x48)
#define SDMMC_MAXIMUM_CURRENT_0_SECURE                  0x0
#define SDMMC_MAXIMUM_CURRENT_0_WORD_COUNT                      0x1
#define SDMMC_MAXIMUM_CURRENT_0_RESET_VAL                       _MK_MASK_CONST(0x1)
#define SDMMC_MAXIMUM_CURRENT_0_RESET_MASK                      _MK_MASK_CONST(0xffffff)
#define SDMMC_MAXIMUM_CURRENT_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define SDMMC_MAXIMUM_CURRENT_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define SDMMC_MAXIMUM_CURRENT_0_READ_MASK                       _MK_MASK_CONST(0xffffff)
#define SDMMC_MAXIMUM_CURRENT_0_WRITE_MASK                      _MK_MASK_CONST(0x0)
// Maximum Current for 1.8V
#define SDMMC_MAXIMUM_CURRENT_0_MAXIMUM_CURRENT_FOR_1_8V_SHIFT                  _MK_SHIFT_CONST(16)
#define SDMMC_MAXIMUM_CURRENT_0_MAXIMUM_CURRENT_FOR_1_8V_FIELD                  (_MK_MASK_CONST(0xff) << SDMMC_MAXIMUM_CURRENT_0_MAXIMUM_CURRENT_FOR_1_8V_SHIFT)
#define SDMMC_MAXIMUM_CURRENT_0_MAXIMUM_CURRENT_FOR_1_8V_RANGE                  23:16
#define SDMMC_MAXIMUM_CURRENT_0_MAXIMUM_CURRENT_FOR_1_8V_WOFFSET                        0x0
#define SDMMC_MAXIMUM_CURRENT_0_MAXIMUM_CURRENT_FOR_1_8V_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_MAXIMUM_CURRENT_0_MAXIMUM_CURRENT_FOR_1_8V_DEFAULT_MASK                   _MK_MASK_CONST(0xff)
#define SDMMC_MAXIMUM_CURRENT_0_MAXIMUM_CURRENT_FOR_1_8V_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_MAXIMUM_CURRENT_0_MAXIMUM_CURRENT_FOR_1_8V_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Maximum Current for 3.0V
#define SDMMC_MAXIMUM_CURRENT_0_MAXIMUM_CURRENT_FOR_3_0V_SHIFT                  _MK_SHIFT_CONST(8)
#define SDMMC_MAXIMUM_CURRENT_0_MAXIMUM_CURRENT_FOR_3_0V_FIELD                  (_MK_MASK_CONST(0xff) << SDMMC_MAXIMUM_CURRENT_0_MAXIMUM_CURRENT_FOR_3_0V_SHIFT)
#define SDMMC_MAXIMUM_CURRENT_0_MAXIMUM_CURRENT_FOR_3_0V_RANGE                  15:8
#define SDMMC_MAXIMUM_CURRENT_0_MAXIMUM_CURRENT_FOR_3_0V_WOFFSET                        0x0
#define SDMMC_MAXIMUM_CURRENT_0_MAXIMUM_CURRENT_FOR_3_0V_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_MAXIMUM_CURRENT_0_MAXIMUM_CURRENT_FOR_3_0V_DEFAULT_MASK                   _MK_MASK_CONST(0xff)
#define SDMMC_MAXIMUM_CURRENT_0_MAXIMUM_CURRENT_FOR_3_0V_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_MAXIMUM_CURRENT_0_MAXIMUM_CURRENT_FOR_3_0V_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Maximum Current for 3.3V
#define SDMMC_MAXIMUM_CURRENT_0_MAXIMUM_CURRENT_FOR_3_3V_SHIFT                  _MK_SHIFT_CONST(0)
#define SDMMC_MAXIMUM_CURRENT_0_MAXIMUM_CURRENT_FOR_3_3V_FIELD                  (_MK_MASK_CONST(0xff) << SDMMC_MAXIMUM_CURRENT_0_MAXIMUM_CURRENT_FOR_3_3V_SHIFT)
#define SDMMC_MAXIMUM_CURRENT_0_MAXIMUM_CURRENT_FOR_3_3V_RANGE                  7:0
#define SDMMC_MAXIMUM_CURRENT_0_MAXIMUM_CURRENT_FOR_3_3V_WOFFSET                        0x0
#define SDMMC_MAXIMUM_CURRENT_0_MAXIMUM_CURRENT_FOR_3_3V_DEFAULT                        _MK_MASK_CONST(0x1)
#define SDMMC_MAXIMUM_CURRENT_0_MAXIMUM_CURRENT_FOR_3_3V_DEFAULT_MASK                   _MK_MASK_CONST(0xff)
#define SDMMC_MAXIMUM_CURRENT_0_MAXIMUM_CURRENT_FOR_3_3V_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_MAXIMUM_CURRENT_0_MAXIMUM_CURRENT_FOR_3_3V_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Reserved address 76 [0x4c] 
// Force Event for Auto CMD12 Error Status Register
//--------------------------------------------------------------
//The Force Event Register is not a physically implemented register. Rather, it is an address at which the
//Auto CMD12 Error Status Register can be written.
//  Writing 1 : set each bit of the Auto CMD12 Error Status Register
//  Writing 0 : no effect

// Register SDMMC_FORCE_EVENT_0  
#define SDMMC_FORCE_EVENT_0                     _MK_ADDR_CONST(0x50)
#define SDMMC_FORCE_EVENT_0_SECURE                      0x0
#define SDMMC_FORCE_EVENT_0_WORD_COUNT                  0x1
#define SDMMC_FORCE_EVENT_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_RESET_MASK                  _MK_MASK_CONST(0xfbff009f)
#define SDMMC_FORCE_EVENT_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_READ_MASK                   _MK_MASK_CONST(0xfbff009f)
#define SDMMC_FORCE_EVENT_0_WRITE_MASK                  _MK_MASK_CONST(0xfbff009f)
#define SDMMC_FORCE_EVENT_0_VENDOR_SPECIFIC_ERR_STATUS_SHIFT                    _MK_SHIFT_CONST(30)
#define SDMMC_FORCE_EVENT_0_VENDOR_SPECIFIC_ERR_STATUS_FIELD                    (_MK_MASK_CONST(0x3) << SDMMC_FORCE_EVENT_0_VENDOR_SPECIFIC_ERR_STATUS_SHIFT)
#define SDMMC_FORCE_EVENT_0_VENDOR_SPECIFIC_ERR_STATUS_RANGE                    31:30
#define SDMMC_FORCE_EVENT_0_VENDOR_SPECIFIC_ERR_STATUS_WOFFSET                  0x0
#define SDMMC_FORCE_EVENT_0_VENDOR_SPECIFIC_ERR_STATUS_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_VENDOR_SPECIFIC_ERR_STATUS_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define SDMMC_FORCE_EVENT_0_VENDOR_SPECIFIC_ERR_STATUS_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_VENDOR_SPECIFIC_ERR_STATUS_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_VENDOR_SPECIFIC_ERR_STATUS_DISABLE                  _MK_ENUM_CONST(0)
#define SDMMC_FORCE_EVENT_0_VENDOR_SPECIFIC_ERR_STATUS_ENABLE                   _MK_ENUM_CONST(3)

#define SDMMC_FORCE_EVENT_0_CEATA_ERROR_SHIFT                   _MK_SHIFT_CONST(29)
#define SDMMC_FORCE_EVENT_0_CEATA_ERROR_FIELD                   (_MK_MASK_CONST(0x1) << SDMMC_FORCE_EVENT_0_CEATA_ERROR_SHIFT)
#define SDMMC_FORCE_EVENT_0_CEATA_ERROR_RANGE                   29:29
#define SDMMC_FORCE_EVENT_0_CEATA_ERROR_WOFFSET                 0x0
#define SDMMC_FORCE_EVENT_0_CEATA_ERROR_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_CEATA_ERROR_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define SDMMC_FORCE_EVENT_0_CEATA_ERROR_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_CEATA_ERROR_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_CEATA_ERROR_NO_ERROR                        _MK_ENUM_CONST(0)
#define SDMMC_FORCE_EVENT_0_CEATA_ERROR_ERROR                   _MK_ENUM_CONST(1)

#define SDMMC_FORCE_EVENT_0_TARGET_RESP_ERROR_SHIFT                     _MK_SHIFT_CONST(28)
#define SDMMC_FORCE_EVENT_0_TARGET_RESP_ERROR_FIELD                     (_MK_MASK_CONST(0x1) << SDMMC_FORCE_EVENT_0_TARGET_RESP_ERROR_SHIFT)
#define SDMMC_FORCE_EVENT_0_TARGET_RESP_ERROR_RANGE                     28:28
#define SDMMC_FORCE_EVENT_0_TARGET_RESP_ERROR_WOFFSET                   0x0
#define SDMMC_FORCE_EVENT_0_TARGET_RESP_ERROR_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_TARGET_RESP_ERROR_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define SDMMC_FORCE_EVENT_0_TARGET_RESP_ERROR_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_TARGET_RESP_ERROR_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_TARGET_RESP_ERROR_NO_ERROR                  _MK_ENUM_CONST(0)
#define SDMMC_FORCE_EVENT_0_TARGET_RESP_ERROR_ERROR                     _MK_ENUM_CONST(1)

#define SDMMC_FORCE_EVENT_0_SPI_ERR_SHIFT                       _MK_SHIFT_CONST(27)
#define SDMMC_FORCE_EVENT_0_SPI_ERR_FIELD                       (_MK_MASK_CONST(0x1) << SDMMC_FORCE_EVENT_0_SPI_ERR_SHIFT)
#define SDMMC_FORCE_EVENT_0_SPI_ERR_RANGE                       27:27
#define SDMMC_FORCE_EVENT_0_SPI_ERR_WOFFSET                     0x0
#define SDMMC_FORCE_EVENT_0_SPI_ERR_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_SPI_ERR_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define SDMMC_FORCE_EVENT_0_SPI_ERR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_SPI_ERR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_SPI_ERR_DISABLE                     _MK_ENUM_CONST(0)
#define SDMMC_FORCE_EVENT_0_SPI_ERR_ENABLE                      _MK_ENUM_CONST(1)

#define SDMMC_FORCE_EVENT_0_ADMA_ERR_SHIFT                      _MK_SHIFT_CONST(25)
#define SDMMC_FORCE_EVENT_0_ADMA_ERR_FIELD                      (_MK_MASK_CONST(0x1) << SDMMC_FORCE_EVENT_0_ADMA_ERR_SHIFT)
#define SDMMC_FORCE_EVENT_0_ADMA_ERR_RANGE                      25:25
#define SDMMC_FORCE_EVENT_0_ADMA_ERR_WOFFSET                    0x0
#define SDMMC_FORCE_EVENT_0_ADMA_ERR_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_ADMA_ERR_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define SDMMC_FORCE_EVENT_0_ADMA_ERR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_ADMA_ERR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_ADMA_ERR_NO_INTERRUPT                       _MK_ENUM_CONST(0)
#define SDMMC_FORCE_EVENT_0_ADMA_ERR_INTERRUPT                  _MK_ENUM_CONST(1)

#define SDMMC_FORCE_EVENT_0_AUTOCMD12_ERR_SHIFT                 _MK_SHIFT_CONST(24)
#define SDMMC_FORCE_EVENT_0_AUTOCMD12_ERR_FIELD                 (_MK_MASK_CONST(0x1) << SDMMC_FORCE_EVENT_0_AUTOCMD12_ERR_SHIFT)
#define SDMMC_FORCE_EVENT_0_AUTOCMD12_ERR_RANGE                 24:24
#define SDMMC_FORCE_EVENT_0_AUTOCMD12_ERR_WOFFSET                       0x0
#define SDMMC_FORCE_EVENT_0_AUTOCMD12_ERR_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_AUTOCMD12_ERR_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SDMMC_FORCE_EVENT_0_AUTOCMD12_ERR_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_AUTOCMD12_ERR_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_AUTOCMD12_ERR_NO_INTERRUPT                  _MK_ENUM_CONST(0)
#define SDMMC_FORCE_EVENT_0_AUTOCMD12_ERR_INTERRUPT                     _MK_ENUM_CONST(1)

#define SDMMC_FORCE_EVENT_0_CURRENTLIMIT_ERR_SHIFT                      _MK_SHIFT_CONST(23)
#define SDMMC_FORCE_EVENT_0_CURRENTLIMIT_ERR_FIELD                      (_MK_MASK_CONST(0x1) << SDMMC_FORCE_EVENT_0_CURRENTLIMIT_ERR_SHIFT)
#define SDMMC_FORCE_EVENT_0_CURRENTLIMIT_ERR_RANGE                      23:23
#define SDMMC_FORCE_EVENT_0_CURRENTLIMIT_ERR_WOFFSET                    0x0
#define SDMMC_FORCE_EVENT_0_CURRENTLIMIT_ERR_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_CURRENTLIMIT_ERR_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define SDMMC_FORCE_EVENT_0_CURRENTLIMIT_ERR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_CURRENTLIMIT_ERR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_CURRENTLIMIT_ERR_NO_INTERRUPT                       _MK_ENUM_CONST(0)
#define SDMMC_FORCE_EVENT_0_CURRENTLIMIT_ERR_INTERRUPT                  _MK_ENUM_CONST(1)

#define SDMMC_FORCE_EVENT_0_DATA_END_BIT_ERR_SHIFT                      _MK_SHIFT_CONST(22)
#define SDMMC_FORCE_EVENT_0_DATA_END_BIT_ERR_FIELD                      (_MK_MASK_CONST(0x1) << SDMMC_FORCE_EVENT_0_DATA_END_BIT_ERR_SHIFT)
#define SDMMC_FORCE_EVENT_0_DATA_END_BIT_ERR_RANGE                      22:22
#define SDMMC_FORCE_EVENT_0_DATA_END_BIT_ERR_WOFFSET                    0x0
#define SDMMC_FORCE_EVENT_0_DATA_END_BIT_ERR_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_DATA_END_BIT_ERR_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define SDMMC_FORCE_EVENT_0_DATA_END_BIT_ERR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_DATA_END_BIT_ERR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_DATA_END_BIT_ERR_NO_INTERRUPT                       _MK_ENUM_CONST(0)
#define SDMMC_FORCE_EVENT_0_DATA_END_BIT_ERR_INTERRUPT                  _MK_ENUM_CONST(1)

#define SDMMC_FORCE_EVENT_0_DATACRC_ERR_SHIFT                   _MK_SHIFT_CONST(21)
#define SDMMC_FORCE_EVENT_0_DATACRC_ERR_FIELD                   (_MK_MASK_CONST(0x1) << SDMMC_FORCE_EVENT_0_DATACRC_ERR_SHIFT)
#define SDMMC_FORCE_EVENT_0_DATACRC_ERR_RANGE                   21:21
#define SDMMC_FORCE_EVENT_0_DATACRC_ERR_WOFFSET                 0x0
#define SDMMC_FORCE_EVENT_0_DATACRC_ERR_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_DATACRC_ERR_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define SDMMC_FORCE_EVENT_0_DATACRC_ERR_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_DATACRC_ERR_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_DATACRC_ERR_NO_INTERRUPT                    _MK_ENUM_CONST(0)
#define SDMMC_FORCE_EVENT_0_DATACRC_ERR_INTERRUPT                       _MK_ENUM_CONST(1)

#define SDMMC_FORCE_EVENT_0_DATATIMEOUT_ERR_SHIFT                       _MK_SHIFT_CONST(20)
#define SDMMC_FORCE_EVENT_0_DATATIMEOUT_ERR_FIELD                       (_MK_MASK_CONST(0x1) << SDMMC_FORCE_EVENT_0_DATATIMEOUT_ERR_SHIFT)
#define SDMMC_FORCE_EVENT_0_DATATIMEOUT_ERR_RANGE                       20:20
#define SDMMC_FORCE_EVENT_0_DATATIMEOUT_ERR_WOFFSET                     0x0
#define SDMMC_FORCE_EVENT_0_DATATIMEOUT_ERR_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_DATATIMEOUT_ERR_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define SDMMC_FORCE_EVENT_0_DATATIMEOUT_ERR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_DATATIMEOUT_ERR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_DATATIMEOUT_ERR_NO_INTERRUPT                        _MK_ENUM_CONST(0)
#define SDMMC_FORCE_EVENT_0_DATATIMEOUT_ERR_INTERRUPT                   _MK_ENUM_CONST(1)

#define SDMMC_FORCE_EVENT_0_COMMAND_INDEX_ERR_SHIFT                     _MK_SHIFT_CONST(19)
#define SDMMC_FORCE_EVENT_0_COMMAND_INDEX_ERR_FIELD                     (_MK_MASK_CONST(0x1) << SDMMC_FORCE_EVENT_0_COMMAND_INDEX_ERR_SHIFT)
#define SDMMC_FORCE_EVENT_0_COMMAND_INDEX_ERR_RANGE                     19:19
#define SDMMC_FORCE_EVENT_0_COMMAND_INDEX_ERR_WOFFSET                   0x0
#define SDMMC_FORCE_EVENT_0_COMMAND_INDEX_ERR_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_COMMAND_INDEX_ERR_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define SDMMC_FORCE_EVENT_0_COMMAND_INDEX_ERR_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_COMMAND_INDEX_ERR_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_COMMAND_INDEX_ERR_NO_INTERRUPT                      _MK_ENUM_CONST(0)
#define SDMMC_FORCE_EVENT_0_COMMAND_INDEX_ERR_INTERRUPT                 _MK_ENUM_CONST(1)

#define SDMMC_FORCE_EVENT_0_COMMAND_END_BIT_ERR_SHIFT                   _MK_SHIFT_CONST(18)
#define SDMMC_FORCE_EVENT_0_COMMAND_END_BIT_ERR_FIELD                   (_MK_MASK_CONST(0x1) << SDMMC_FORCE_EVENT_0_COMMAND_END_BIT_ERR_SHIFT)
#define SDMMC_FORCE_EVENT_0_COMMAND_END_BIT_ERR_RANGE                   18:18
#define SDMMC_FORCE_EVENT_0_COMMAND_END_BIT_ERR_WOFFSET                 0x0
#define SDMMC_FORCE_EVENT_0_COMMAND_END_BIT_ERR_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_COMMAND_END_BIT_ERR_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define SDMMC_FORCE_EVENT_0_COMMAND_END_BIT_ERR_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_COMMAND_END_BIT_ERR_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_COMMAND_END_BIT_ERR_NO_INTERRUPT                    _MK_ENUM_CONST(0)
#define SDMMC_FORCE_EVENT_0_COMMAND_END_BIT_ERR_INTERRUPT                       _MK_ENUM_CONST(1)

#define SDMMC_FORCE_EVENT_0_COMMAND_CRC_ERR_SHIFT                       _MK_SHIFT_CONST(17)
#define SDMMC_FORCE_EVENT_0_COMMAND_CRC_ERR_FIELD                       (_MK_MASK_CONST(0x1) << SDMMC_FORCE_EVENT_0_COMMAND_CRC_ERR_SHIFT)
#define SDMMC_FORCE_EVENT_0_COMMAND_CRC_ERR_RANGE                       17:17
#define SDMMC_FORCE_EVENT_0_COMMAND_CRC_ERR_WOFFSET                     0x0
#define SDMMC_FORCE_EVENT_0_COMMAND_CRC_ERR_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_COMMAND_CRC_ERR_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define SDMMC_FORCE_EVENT_0_COMMAND_CRC_ERR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_COMMAND_CRC_ERR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_COMMAND_CRC_ERR_NO_INTERRUPT                        _MK_ENUM_CONST(0)
#define SDMMC_FORCE_EVENT_0_COMMAND_CRC_ERR_INTERRUPT                   _MK_ENUM_CONST(1)

#define SDMMC_FORCE_EVENT_0_COMMAND_TIMEOUT_ERR_SHIFT                   _MK_SHIFT_CONST(16)
#define SDMMC_FORCE_EVENT_0_COMMAND_TIMEOUT_ERR_FIELD                   (_MK_MASK_CONST(0x1) << SDMMC_FORCE_EVENT_0_COMMAND_TIMEOUT_ERR_SHIFT)
#define SDMMC_FORCE_EVENT_0_COMMAND_TIMEOUT_ERR_RANGE                   16:16
#define SDMMC_FORCE_EVENT_0_COMMAND_TIMEOUT_ERR_WOFFSET                 0x0
#define SDMMC_FORCE_EVENT_0_COMMAND_TIMEOUT_ERR_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_COMMAND_TIMEOUT_ERR_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define SDMMC_FORCE_EVENT_0_COMMAND_TIMEOUT_ERR_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_COMMAND_TIMEOUT_ERR_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_COMMAND_TIMEOUT_ERR_NO_INTERRUPT                    _MK_ENUM_CONST(0)
#define SDMMC_FORCE_EVENT_0_COMMAND_TIMEOUT_ERR_INTERRUPT                       _MK_ENUM_CONST(1)

#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_NOT_ISSUED_SHIFT                 _MK_SHIFT_CONST(7)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_NOT_ISSUED_FIELD                 (_MK_MASK_CONST(0x1) << SDMMC_FORCE_EVENT_0_AUTO_CMD12_NOT_ISSUED_SHIFT)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_NOT_ISSUED_RANGE                 7:7
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_NOT_ISSUED_WOFFSET                       0x0
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_NOT_ISSUED_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_NOT_ISSUED_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_NOT_ISSUED_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_NOT_ISSUED_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_NOT_ISSUED_NO_INTERRUPT                  _MK_ENUM_CONST(0)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_NOT_ISSUED_INTERRUPT                     _MK_ENUM_CONST(1)

#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_INDEX_ERR_SHIFT                  _MK_SHIFT_CONST(4)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_INDEX_ERR_FIELD                  (_MK_MASK_CONST(0x1) << SDMMC_FORCE_EVENT_0_AUTO_CMD12_INDEX_ERR_SHIFT)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_INDEX_ERR_RANGE                  4:4
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_INDEX_ERR_WOFFSET                        0x0
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_INDEX_ERR_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_INDEX_ERR_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_INDEX_ERR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_INDEX_ERR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_INDEX_ERR_NO_INTERRUPT                   _MK_ENUM_CONST(0)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_INDEX_ERR_INTERRUPT                      _MK_ENUM_CONST(1)

#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_END_BIT_ERR_SHIFT                        _MK_SHIFT_CONST(3)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_END_BIT_ERR_FIELD                        (_MK_MASK_CONST(0x1) << SDMMC_FORCE_EVENT_0_AUTO_CMD12_END_BIT_ERR_SHIFT)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_END_BIT_ERR_RANGE                        3:3
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_END_BIT_ERR_WOFFSET                      0x0
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_END_BIT_ERR_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_END_BIT_ERR_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_END_BIT_ERR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_END_BIT_ERR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_END_BIT_ERR_NO_INTERRUPT                 _MK_ENUM_CONST(0)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_END_BIT_ERR_INTERRUPT                    _MK_ENUM_CONST(1)

#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_CRC_ERR_SHIFT                    _MK_SHIFT_CONST(2)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_CRC_ERR_FIELD                    (_MK_MASK_CONST(0x1) << SDMMC_FORCE_EVENT_0_AUTO_CMD12_CRC_ERR_SHIFT)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_CRC_ERR_RANGE                    2:2
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_CRC_ERR_WOFFSET                  0x0
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_CRC_ERR_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_CRC_ERR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_CRC_ERR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_CRC_ERR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_CRC_ERR_NO_INTERRUPT                     _MK_ENUM_CONST(0)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_CRC_ERR_INTERRUPT                        _MK_ENUM_CONST(1)

#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_TIMEOUT_ERR_SHIFT                        _MK_SHIFT_CONST(1)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_TIMEOUT_ERR_FIELD                        (_MK_MASK_CONST(0x1) << SDMMC_FORCE_EVENT_0_AUTO_CMD12_TIMEOUT_ERR_SHIFT)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_TIMEOUT_ERR_RANGE                        1:1
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_TIMEOUT_ERR_WOFFSET                      0x0
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_TIMEOUT_ERR_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_TIMEOUT_ERR_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_TIMEOUT_ERR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_TIMEOUT_ERR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_TIMEOUT_ERR_NO_INTERRUPT                 _MK_ENUM_CONST(0)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_TIMEOUT_ERR_INTERRUPT                    _MK_ENUM_CONST(1)

#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_NOT_EXECUTED_SHIFT                       _MK_SHIFT_CONST(0)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_NOT_EXECUTED_FIELD                       (_MK_MASK_CONST(0x1) << SDMMC_FORCE_EVENT_0_AUTO_CMD12_NOT_EXECUTED_SHIFT)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_NOT_EXECUTED_RANGE                       0:0
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_NOT_EXECUTED_WOFFSET                     0x0
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_NOT_EXECUTED_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_NOT_EXECUTED_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_NOT_EXECUTED_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_NOT_EXECUTED_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_NOT_EXECUTED_NO_INTERRUPT                        _MK_ENUM_CONST(0)
#define SDMMC_FORCE_EVENT_0_AUTO_CMD12_NOT_EXECUTED_INTERRUPT                   _MK_ENUM_CONST(1)

// ADMA Error Status Register
//--------------------------------------------------------------
//ADMA_LENGTH_MISMATCH_ERR - ADMA Length Mismatch Error
//    This error occurs in the following 2 cases.
//      (1) While Block Count Enable being set, the total data length specified by the
//      Descriptor table is different from that specified by the Block Count and
//      Block Length.
//      (2) Total data length can not be divided by the block length.
//ADMA_ERR_STATE - ADMA Error State
//This field indicates the state of ADMA when error is occurred during ADMA data
//transfer. This field never indicates "10" because ADMA never stops in this state.
//-----------------------------------------------------------------------------
//|D01 - D00 |ADMA Error State when      | Contents of SYS_SDR register        |
//|          |   error is occurred       |                                     |
//-----------------------------------------------------------------------------| 
//|    00    | ST_STOP (Stop DMA)        |  Points next of the error descriptor|
//|    01    | ST_FDS (Fetch Descriptor) |  Points the error descriptor        |
//|    10    | Never set this state      |  (Not used)                         |
//|    11    | ST_TFR (Transfer Data)    |  Points the next of the error       |
//|          |                           |      descriptor                     |   
//-----------------------------------------------------------------------------| 

// Register SDMMC_ADMA_ERR_STATUS_0  
#define SDMMC_ADMA_ERR_STATUS_0                 _MK_ADDR_CONST(0x54)
#define SDMMC_ADMA_ERR_STATUS_0_SECURE                  0x0
#define SDMMC_ADMA_ERR_STATUS_0_WORD_COUNT                      0x1
#define SDMMC_ADMA_ERR_STATUS_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define SDMMC_ADMA_ERR_STATUS_0_RESET_MASK                      _MK_MASK_CONST(0x7)
#define SDMMC_ADMA_ERR_STATUS_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define SDMMC_ADMA_ERR_STATUS_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define SDMMC_ADMA_ERR_STATUS_0_READ_MASK                       _MK_MASK_CONST(0x7)
#define SDMMC_ADMA_ERR_STATUS_0_WRITE_MASK                      _MK_MASK_CONST(0x7)
#define SDMMC_ADMA_ERR_STATUS_0_ADMA_LENGTH_MISMATCH_ERR_SHIFT                  _MK_SHIFT_CONST(2)
#define SDMMC_ADMA_ERR_STATUS_0_ADMA_LENGTH_MISMATCH_ERR_FIELD                  (_MK_MASK_CONST(0x1) << SDMMC_ADMA_ERR_STATUS_0_ADMA_LENGTH_MISMATCH_ERR_SHIFT)
#define SDMMC_ADMA_ERR_STATUS_0_ADMA_LENGTH_MISMATCH_ERR_RANGE                  2:2
#define SDMMC_ADMA_ERR_STATUS_0_ADMA_LENGTH_MISMATCH_ERR_WOFFSET                        0x0
#define SDMMC_ADMA_ERR_STATUS_0_ADMA_LENGTH_MISMATCH_ERR_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_ADMA_ERR_STATUS_0_ADMA_LENGTH_MISMATCH_ERR_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define SDMMC_ADMA_ERR_STATUS_0_ADMA_LENGTH_MISMATCH_ERR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_ADMA_ERR_STATUS_0_ADMA_LENGTH_MISMATCH_ERR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define SDMMC_ADMA_ERR_STATUS_0_ADMA_LENGTH_MISMATCH_ERR_NO_ERR                 _MK_ENUM_CONST(0)
#define SDMMC_ADMA_ERR_STATUS_0_ADMA_LENGTH_MISMATCH_ERR_ERR                    _MK_ENUM_CONST(1)

#define SDMMC_ADMA_ERR_STATUS_0_ADMA_ERR_STATE_SHIFT                    _MK_SHIFT_CONST(0)
#define SDMMC_ADMA_ERR_STATUS_0_ADMA_ERR_STATE_FIELD                    (_MK_MASK_CONST(0x3) << SDMMC_ADMA_ERR_STATUS_0_ADMA_ERR_STATE_SHIFT)
#define SDMMC_ADMA_ERR_STATUS_0_ADMA_ERR_STATE_RANGE                    1:0
#define SDMMC_ADMA_ERR_STATUS_0_ADMA_ERR_STATE_WOFFSET                  0x0
#define SDMMC_ADMA_ERR_STATUS_0_ADMA_ERR_STATE_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_ADMA_ERR_STATUS_0_ADMA_ERR_STATE_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define SDMMC_ADMA_ERR_STATUS_0_ADMA_ERR_STATE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_ADMA_ERR_STATUS_0_ADMA_ERR_STATE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// ADMA System Address Register
//--------------------------------------------------------------
//This register holds byte address of executing command of the Descriptor table.
//32-bit Address Descriptor uses lower 32-bit of this register. At the start of ADMA,
//the Host Driver shall set start address of the Descriptor table. The ADMA
//increments this register address, which points to next line, when every fetching a
//Descriptor line. When the ADMA Error Interrupt is generated, this register shall hold
//valid Descriptor address depending on the ADMA state. The Host Driver shall
//program Descriptor Table on 32-bit boundary and set 32-bit boundary address to
//this register. ADMA2 ignores lower 2-bit of this register and assumes it to be 00b.

// Register SDMMC_ADMA_SYSTEM_ADDRESS_0  
#define SDMMC_ADMA_SYSTEM_ADDRESS_0                     _MK_ADDR_CONST(0x58)
#define SDMMC_ADMA_SYSTEM_ADDRESS_0_SECURE                      0x0
#define SDMMC_ADMA_SYSTEM_ADDRESS_0_WORD_COUNT                  0x1
#define SDMMC_ADMA_SYSTEM_ADDRESS_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define SDMMC_ADMA_SYSTEM_ADDRESS_0_RESET_MASK                  _MK_MASK_CONST(0xffffffff)
#define SDMMC_ADMA_SYSTEM_ADDRESS_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define SDMMC_ADMA_SYSTEM_ADDRESS_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SDMMC_ADMA_SYSTEM_ADDRESS_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define SDMMC_ADMA_SYSTEM_ADDRESS_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
#define SDMMC_ADMA_SYSTEM_ADDRESS_0_ADMA_SYSTEM_ADDRESS_SHIFT                   _MK_SHIFT_CONST(0)
#define SDMMC_ADMA_SYSTEM_ADDRESS_0_ADMA_SYSTEM_ADDRESS_FIELD                   (_MK_MASK_CONST(0xffffffff) << SDMMC_ADMA_SYSTEM_ADDRESS_0_ADMA_SYSTEM_ADDRESS_SHIFT)
#define SDMMC_ADMA_SYSTEM_ADDRESS_0_ADMA_SYSTEM_ADDRESS_RANGE                   31:0
#define SDMMC_ADMA_SYSTEM_ADDRESS_0_ADMA_SYSTEM_ADDRESS_WOFFSET                 0x0
#define SDMMC_ADMA_SYSTEM_ADDRESS_0_ADMA_SYSTEM_ADDRESS_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_ADMA_SYSTEM_ADDRESS_0_ADMA_SYSTEM_ADDRESS_DEFAULT_MASK                    _MK_MASK_CONST(0xffffffff)
#define SDMMC_ADMA_SYSTEM_ADDRESS_0_ADMA_SYSTEM_ADDRESS_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_ADMA_SYSTEM_ADDRESS_0_ADMA_SYSTEM_ADDRESS_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Reserved address 92 [0x5c] 
//DEBUG SELECTION REGISTER

// Register SDMMC_DEBUG_SELECTION_REGISTER_0  
#define SDMMC_DEBUG_SELECTION_REGISTER_0                        _MK_ADDR_CONST(0x60)
#define SDMMC_DEBUG_SELECTION_REGISTER_0_SECURE                         0x0
#define SDMMC_DEBUG_SELECTION_REGISTER_0_WORD_COUNT                     0x1
#define SDMMC_DEBUG_SELECTION_REGISTER_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define SDMMC_DEBUG_SELECTION_REGISTER_0_RESET_MASK                     _MK_MASK_CONST(0x1)
#define SDMMC_DEBUG_SELECTION_REGISTER_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define SDMMC_DEBUG_SELECTION_REGISTER_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define SDMMC_DEBUG_SELECTION_REGISTER_0_READ_MASK                      _MK_MASK_CONST(0x1)
#define SDMMC_DEBUG_SELECTION_REGISTER_0_WRITE_MASK                     _MK_MASK_CONST(0x0)
// 1 = CMD REGISTER, INTERRUPT STATUS,AHB_IFACE_MODULE.
// 0 = RECEIVER MODULE and FIFO CONTROL
#define SDMMC_DEBUG_SELECTION_REGISTER_0_DEBUG_SEL_SHIFT                        _MK_SHIFT_CONST(0)
#define SDMMC_DEBUG_SELECTION_REGISTER_0_DEBUG_SEL_FIELD                        (_MK_MASK_CONST(0x1) << SDMMC_DEBUG_SELECTION_REGISTER_0_DEBUG_SEL_SHIFT)
#define SDMMC_DEBUG_SELECTION_REGISTER_0_DEBUG_SEL_RANGE                        0:0
#define SDMMC_DEBUG_SELECTION_REGISTER_0_DEBUG_SEL_WOFFSET                      0x0
#define SDMMC_DEBUG_SELECTION_REGISTER_0_DEBUG_SEL_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_DEBUG_SELECTION_REGISTER_0_DEBUG_SEL_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SDMMC_DEBUG_SELECTION_REGISTER_0_DEBUG_SEL_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_DEBUG_SELECTION_REGISTER_0_DEBUG_SEL_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)


// Reserved address 100 [0x64] 

// Reserved address 104 [0x68] 

// Reserved address 108 [0x6c] 

// Reserved address 112 [0x70] 

// Reserved address 116 [0x74] 

// Reserved address 120 [0x78] 

// Reserved address 124 [0x7c] 

// Reserved address 128 [0x80] 

// Reserved address 132 [0x84] 

// Reserved address 136 [0x88] 

// Reserved address 140 [0x8c] 

// Reserved address 144 [0x90] 

// Reserved address 148 [0x94] 

// Reserved address 152 [0x98] 

// Reserved address 156 [0x9c] 

// Reserved address 160 [0xa0] 

// Reserved address 164 [0xa4] 

// Reserved address 168 [0xa8] 

// Reserved address 172 [0xac] 

// Reserved address 176 [0xb0] 

// Reserved address 180 [0xb4] 

// Reserved address 184 [0xb8] 

// Reserved address 188 [0xbc] 

// Reserved address 192 [0xc0] 

// Reserved address 196 [0xc4] 

// Reserved address 200 [0xc8] 

// Reserved address 204 [0xcc] 

// Reserved address 208 [0xd0] 

// Reserved address 212 [0xd4] 

// Reserved address 216 [0xd8] 

// Reserved address 220 [0xdc] 

// Reserved address 224 [0xe0] 

// Reserved address 228 [0xe4] 

// Reserved address 232 [0xe8] 

// Reserved address 236 [0xec] 
//SPI interrupt support register.

// Register SDMMC_SPI_INTERRUPT_SUPPORT_0  
#define SDMMC_SPI_INTERRUPT_SUPPORT_0                   _MK_ADDR_CONST(0xf0)
#define SDMMC_SPI_INTERRUPT_SUPPORT_0_SECURE                    0x0
#define SDMMC_SPI_INTERRUPT_SUPPORT_0_WORD_COUNT                        0x1
#define SDMMC_SPI_INTERRUPT_SUPPORT_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define SDMMC_SPI_INTERRUPT_SUPPORT_0_RESET_MASK                        _MK_MASK_CONST(0xff)
#define SDMMC_SPI_INTERRUPT_SUPPORT_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define SDMMC_SPI_INTERRUPT_SUPPORT_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SDMMC_SPI_INTERRUPT_SUPPORT_0_READ_MASK                         _MK_MASK_CONST(0xff)
#define SDMMC_SPI_INTERRUPT_SUPPORT_0_WRITE_MASK                        _MK_MASK_CONST(0x0)
//This bit is set to indicate the assertion of interrupts in SPI MODE at anytime
// Irrespective on the staus of card select. 
#define SDMMC_SPI_INTERRUPT_SUPPORT_0_SPI_INT_SUPPORT_SHIFT                     _MK_SHIFT_CONST(0)
#define SDMMC_SPI_INTERRUPT_SUPPORT_0_SPI_INT_SUPPORT_FIELD                     (_MK_MASK_CONST(0xff) << SDMMC_SPI_INTERRUPT_SUPPORT_0_SPI_INT_SUPPORT_SHIFT)
#define SDMMC_SPI_INTERRUPT_SUPPORT_0_SPI_INT_SUPPORT_RANGE                     7:0
#define SDMMC_SPI_INTERRUPT_SUPPORT_0_SPI_INT_SUPPORT_WOFFSET                   0x0
#define SDMMC_SPI_INTERRUPT_SUPPORT_0_SPI_INT_SUPPORT_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_SPI_INTERRUPT_SUPPORT_0_SPI_INT_SUPPORT_DEFAULT_MASK                      _MK_MASK_CONST(0xff)
#define SDMMC_SPI_INTERRUPT_SUPPORT_0_SPI_INT_SUPPORT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_SPI_INTERRUPT_SUPPORT_0_SPI_INT_SUPPORT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Reserved address 244 [0xf4] 

// Reserved address 248 [0xf8] 
// Slot Interrupt Status Register
//--------------------------------------------------------------
//VENDOR_VERSION_NUMBER - Vendor Version Number
//    This status is reserved for the vendor version number. The Host Driver
//    should not use this status.
//SPECIFICATION_VERSION_NUMBER - Specification Version Number
//    This status indicates the Host Controller Spec. Version. The upper and
//    lower 4-bits indicate the version.
//      00 SD Host Specification Version 1.00
//      01 SD Host Specification Version 2.00
//         Including the feature of the ADMA and Test Register,
//      others Reserved
//INTERRUPT_SIGNAL_FOR_EACH_SLOT - Interrupt Signal For Each Slot
//    These status bits indicate the logical OR of Interrupt Signal and Wakeup
//    Signal for each slot. A maximum of 8 slots can be defined. If one interrupt
//    signal is associated with multiple slots, the Host Driver can know which
//    interrupt is generated by reading these status bits. By a power on reset or by
//    setting Software Reset For All, the interrupt signal shall be de-asserted
//    and this status shall read 00h.
//      Bit 00 Slot 1
//      Bit 01 Slot 2
//      Bit 02 Slot 3
//      ...... ......
//      Bit 07 Slot 8

// Register SDMMC_SLOT_INTERRUPT_STATUS_0  
#define SDMMC_SLOT_INTERRUPT_STATUS_0                   _MK_ADDR_CONST(0xfc)
#define SDMMC_SLOT_INTERRUPT_STATUS_0_SECURE                    0x0
#define SDMMC_SLOT_INTERRUPT_STATUS_0_WORD_COUNT                        0x1
#define SDMMC_SLOT_INTERRUPT_STATUS_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define SDMMC_SLOT_INTERRUPT_STATUS_0_RESET_MASK                        _MK_MASK_CONST(0xffff00ff)
#define SDMMC_SLOT_INTERRUPT_STATUS_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define SDMMC_SLOT_INTERRUPT_STATUS_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SDMMC_SLOT_INTERRUPT_STATUS_0_READ_MASK                         _MK_MASK_CONST(0xffff00ff)
#define SDMMC_SLOT_INTERRUPT_STATUS_0_WRITE_MASK                        _MK_MASK_CONST(0x0)
#define SDMMC_SLOT_INTERRUPT_STATUS_0_VENDOR_VERSION_NUMBER_SHIFT                       _MK_SHIFT_CONST(24)
#define SDMMC_SLOT_INTERRUPT_STATUS_0_VENDOR_VERSION_NUMBER_FIELD                       (_MK_MASK_CONST(0xff) << SDMMC_SLOT_INTERRUPT_STATUS_0_VENDOR_VERSION_NUMBER_SHIFT)
#define SDMMC_SLOT_INTERRUPT_STATUS_0_VENDOR_VERSION_NUMBER_RANGE                       31:24
#define SDMMC_SLOT_INTERRUPT_STATUS_0_VENDOR_VERSION_NUMBER_WOFFSET                     0x0
#define SDMMC_SLOT_INTERRUPT_STATUS_0_VENDOR_VERSION_NUMBER_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_SLOT_INTERRUPT_STATUS_0_VENDOR_VERSION_NUMBER_DEFAULT_MASK                        _MK_MASK_CONST(0xff)
#define SDMMC_SLOT_INTERRUPT_STATUS_0_VENDOR_VERSION_NUMBER_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_SLOT_INTERRUPT_STATUS_0_VENDOR_VERSION_NUMBER_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

#define SDMMC_SLOT_INTERRUPT_STATUS_0_SPECIFICATION_VERSION_NUMBER_SHIFT                        _MK_SHIFT_CONST(16)
#define SDMMC_SLOT_INTERRUPT_STATUS_0_SPECIFICATION_VERSION_NUMBER_FIELD                        (_MK_MASK_CONST(0xff) << SDMMC_SLOT_INTERRUPT_STATUS_0_SPECIFICATION_VERSION_NUMBER_SHIFT)
#define SDMMC_SLOT_INTERRUPT_STATUS_0_SPECIFICATION_VERSION_NUMBER_RANGE                        23:16
#define SDMMC_SLOT_INTERRUPT_STATUS_0_SPECIFICATION_VERSION_NUMBER_WOFFSET                      0x0
#define SDMMC_SLOT_INTERRUPT_STATUS_0_SPECIFICATION_VERSION_NUMBER_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_SLOT_INTERRUPT_STATUS_0_SPECIFICATION_VERSION_NUMBER_DEFAULT_MASK                 _MK_MASK_CONST(0xff)
#define SDMMC_SLOT_INTERRUPT_STATUS_0_SPECIFICATION_VERSION_NUMBER_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_SLOT_INTERRUPT_STATUS_0_SPECIFICATION_VERSION_NUMBER_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

#define SDMMC_SLOT_INTERRUPT_STATUS_0_INTERRUPT_SIGNAL_FOR_EACH_SLOT_SHIFT                      _MK_SHIFT_CONST(0)
#define SDMMC_SLOT_INTERRUPT_STATUS_0_INTERRUPT_SIGNAL_FOR_EACH_SLOT_FIELD                      (_MK_MASK_CONST(0xff) << SDMMC_SLOT_INTERRUPT_STATUS_0_INTERRUPT_SIGNAL_FOR_EACH_SLOT_SHIFT)
#define SDMMC_SLOT_INTERRUPT_STATUS_0_INTERRUPT_SIGNAL_FOR_EACH_SLOT_RANGE                      7:0
#define SDMMC_SLOT_INTERRUPT_STATUS_0_INTERRUPT_SIGNAL_FOR_EACH_SLOT_WOFFSET                    0x0
#define SDMMC_SLOT_INTERRUPT_STATUS_0_INTERRUPT_SIGNAL_FOR_EACH_SLOT_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_SLOT_INTERRUPT_STATUS_0_INTERRUPT_SIGNAL_FOR_EACH_SLOT_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define SDMMC_SLOT_INTERRUPT_STATUS_0_INTERRUPT_SIGNAL_FOR_EACH_SLOT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_SLOT_INTERRUPT_STATUS_0_INTERRUPT_SIGNAL_FOR_EACH_SLOT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

//The following Registers are Vendor Specific Registers and are mapped to Vendor Specific Address Space(0x100 - 0x1FF)
//Vendor Clock Control Register

// Register SDMMC_VENDOR_CLOCK_CNTRL_0  
#define SDMMC_VENDOR_CLOCK_CNTRL_0                      _MK_ADDR_CONST(0x100)
#define SDMMC_VENDOR_CLOCK_CNTRL_0_SECURE                       0x0
#define SDMMC_VENDOR_CLOCK_CNTRL_0_WORD_COUNT                   0x1
#define SDMMC_VENDOR_CLOCK_CNTRL_0_RESET_VAL                    _MK_MASK_CONST(0x1)
#define SDMMC_VENDOR_CLOCK_CNTRL_0_RESET_MASK                   _MK_MASK_CONST(0x1)
#define SDMMC_VENDOR_CLOCK_CNTRL_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_CLOCK_CNTRL_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_CLOCK_CNTRL_0_READ_MASK                    _MK_MASK_CONST(0x1)
#define SDMMC_VENDOR_CLOCK_CNTRL_0_WRITE_MASK                   _MK_MASK_CONST(0x1)
//  This is set when sdmmc_clk is supplied by the CAR module.Prior to sdmmc_clk switch OFF.This bit should be written '0'.  Prior to sdmmc_clk switch OFF.This bit should be written '0'.
//  By writing zero,the asynchronous card interrupt is routed to the Interrupt controller.
#define SDMMC_VENDOR_CLOCK_CNTRL_0_SDMMC_CLK_SHIFT                      _MK_SHIFT_CONST(0)
#define SDMMC_VENDOR_CLOCK_CNTRL_0_SDMMC_CLK_FIELD                      (_MK_MASK_CONST(0x1) << SDMMC_VENDOR_CLOCK_CNTRL_0_SDMMC_CLK_SHIFT)
#define SDMMC_VENDOR_CLOCK_CNTRL_0_SDMMC_CLK_RANGE                      0:0
#define SDMMC_VENDOR_CLOCK_CNTRL_0_SDMMC_CLK_WOFFSET                    0x0
#define SDMMC_VENDOR_CLOCK_CNTRL_0_SDMMC_CLK_DEFAULT                    _MK_MASK_CONST(0x1)
#define SDMMC_VENDOR_CLOCK_CNTRL_0_SDMMC_CLK_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define SDMMC_VENDOR_CLOCK_CNTRL_0_SDMMC_CLK_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_CLOCK_CNTRL_0_SDMMC_CLK_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_CLOCK_CNTRL_0_SDMMC_CLK_DISABLE                    _MK_ENUM_CONST(0)
#define SDMMC_VENDOR_CLOCK_CNTRL_0_SDMMC_CLK_ENABLE                     _MK_ENUM_CONST(1)

//Vendor SPI Control Register

// Register SDMMC_VENDOR_SPI_CNTRL_0  
#define SDMMC_VENDOR_SPI_CNTRL_0                        _MK_ADDR_CONST(0x104)
#define SDMMC_VENDOR_SPI_CNTRL_0_SECURE                         0x0
#define SDMMC_VENDOR_SPI_CNTRL_0_WORD_COUNT                     0x1
#define SDMMC_VENDOR_SPI_CNTRL_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_SPI_CNTRL_0_RESET_MASK                     _MK_MASK_CONST(0x1)
#define SDMMC_VENDOR_SPI_CNTRL_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_SPI_CNTRL_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_SPI_CNTRL_0_READ_MASK                      _MK_MASK_CONST(0x1)
#define SDMMC_VENDOR_SPI_CNTRL_0_WRITE_MASK                     _MK_MASK_CONST(0x1)
//  This is a mirror bit.The SPI mode is set if this bit is set or CMD_XFER_MODE[7] is set  Writing 1 will drive the CS Low and writing zero will de-assert the CS Signal
#define SDMMC_VENDOR_SPI_CNTRL_0_SPI_MODE_SHIFT                 _MK_SHIFT_CONST(0)
#define SDMMC_VENDOR_SPI_CNTRL_0_SPI_MODE_FIELD                 (_MK_MASK_CONST(0x1) << SDMMC_VENDOR_SPI_CNTRL_0_SPI_MODE_SHIFT)
#define SDMMC_VENDOR_SPI_CNTRL_0_SPI_MODE_RANGE                 0:0
#define SDMMC_VENDOR_SPI_CNTRL_0_SPI_MODE_WOFFSET                       0x0
#define SDMMC_VENDOR_SPI_CNTRL_0_SPI_MODE_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_SPI_CNTRL_0_SPI_MODE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SDMMC_VENDOR_SPI_CNTRL_0_SPI_MODE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_SPI_CNTRL_0_SPI_MODE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_SPI_CNTRL_0_SPI_MODE_DISABLE                       _MK_ENUM_CONST(0)
#define SDMMC_VENDOR_SPI_CNTRL_0_SPI_MODE_ENABLE                        _MK_ENUM_CONST(1)

//SPI Interrupt Status Register
//The fields are valid when a SPI error has occured.

// Register SDMMC_VENDOR_SPI_INTR_STATUS_0  
#define SDMMC_VENDOR_SPI_INTR_STATUS_0                  _MK_ADDR_CONST(0x108)
#define SDMMC_VENDOR_SPI_INTR_STATUS_0_SECURE                   0x0
#define SDMMC_VENDOR_SPI_INTR_STATUS_0_WORD_COUNT                       0x1
#define SDMMC_VENDOR_SPI_INTR_STATUS_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_SPI_INTR_STATUS_0_RESET_MASK                       _MK_MASK_CONST(0x1ff)
#define SDMMC_VENDOR_SPI_INTR_STATUS_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_SPI_INTR_STATUS_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_SPI_INTR_STATUS_0_READ_MASK                        _MK_MASK_CONST(0x1ff)
#define SDMMC_VENDOR_SPI_INTR_STATUS_0_WRITE_MASK                       _MK_MASK_CONST(0x0)
//  Data Error Token,while read from card. 
#define SDMMC_VENDOR_SPI_INTR_STATUS_0_DAT_ERR_TOKEN_SHIFT                      _MK_SHIFT_CONST(5)
#define SDMMC_VENDOR_SPI_INTR_STATUS_0_DAT_ERR_TOKEN_FIELD                      (_MK_MASK_CONST(0xf) << SDMMC_VENDOR_SPI_INTR_STATUS_0_DAT_ERR_TOKEN_SHIFT)
#define SDMMC_VENDOR_SPI_INTR_STATUS_0_DAT_ERR_TOKEN_RANGE                      8:5
#define SDMMC_VENDOR_SPI_INTR_STATUS_0_DAT_ERR_TOKEN_WOFFSET                    0x0
#define SDMMC_VENDOR_SPI_INTR_STATUS_0_DAT_ERR_TOKEN_DEFAULT                    _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_SPI_INTR_STATUS_0_DAT_ERR_TOKEN_DEFAULT_MASK                       _MK_MASK_CONST(0xf)
#define SDMMC_VENDOR_SPI_INTR_STATUS_0_DAT_ERR_TOKEN_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_SPI_INTR_STATUS_0_DAT_ERR_TOKEN_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

//  Data Response while write to card  
#define SDMMC_VENDOR_SPI_INTR_STATUS_0_DAT_RESPONSE_SHIFT                       _MK_SHIFT_CONST(0)
#define SDMMC_VENDOR_SPI_INTR_STATUS_0_DAT_RESPONSE_FIELD                       (_MK_MASK_CONST(0x1f) << SDMMC_VENDOR_SPI_INTR_STATUS_0_DAT_RESPONSE_SHIFT)
#define SDMMC_VENDOR_SPI_INTR_STATUS_0_DAT_RESPONSE_RANGE                       4:0
#define SDMMC_VENDOR_SPI_INTR_STATUS_0_DAT_RESPONSE_WOFFSET                     0x0
#define SDMMC_VENDOR_SPI_INTR_STATUS_0_DAT_RESPONSE_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_SPI_INTR_STATUS_0_DAT_RESPONSE_DEFAULT_MASK                        _MK_MASK_CONST(0x1f)
#define SDMMC_VENDOR_SPI_INTR_STATUS_0_DAT_RESPONSE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_SPI_INTR_STATUS_0_DAT_RESPONSE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_SPI_INTR_STATUS_0_DAT_RESPONSE_DATA_ACCEPTED                       _MK_ENUM_CONST(5)
#define SDMMC_VENDOR_SPI_INTR_STATUS_0_DAT_RESPONSE_CRC_ERR                     _MK_ENUM_CONST(11)
#define SDMMC_VENDOR_SPI_INTR_STATUS_0_DAT_RESPONSE_WRITE_ERR                   _MK_ENUM_CONST(13)

//Vendor CEATA Control Register

// Register SDMMC_VENDOR_CEATA_CNTRL_0  
#define SDMMC_VENDOR_CEATA_CNTRL_0                      _MK_ADDR_CONST(0x10c)
#define SDMMC_VENDOR_CEATA_CNTRL_0_SECURE                       0x0
#define SDMMC_VENDOR_CEATA_CNTRL_0_WORD_COUNT                   0x1
#define SDMMC_VENDOR_CEATA_CNTRL_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_CEATA_CNTRL_0_RESET_MASK                   _MK_MASK_CONST(0x1)
#define SDMMC_VENDOR_CEATA_CNTRL_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_CEATA_CNTRL_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_CEATA_CNTRL_0_READ_MASK                    _MK_MASK_CONST(0x1)
#define SDMMC_VENDOR_CEATA_CNTRL_0_WRITE_MASK                   _MK_MASK_CONST(0x1)
//  If this bit is set to 1,the controller expects a Command completion signal from the card after the transfer.  If the CCS Signal doesnt come within Data Timeout Value the CEATA Error is flagged.
#define SDMMC_VENDOR_CEATA_CNTRL_0_CCS_SIGNAL_SHIFT                     _MK_SHIFT_CONST(0)
#define SDMMC_VENDOR_CEATA_CNTRL_0_CCS_SIGNAL_FIELD                     (_MK_MASK_CONST(0x1) << SDMMC_VENDOR_CEATA_CNTRL_0_CCS_SIGNAL_SHIFT)
#define SDMMC_VENDOR_CEATA_CNTRL_0_CCS_SIGNAL_RANGE                     0:0
#define SDMMC_VENDOR_CEATA_CNTRL_0_CCS_SIGNAL_WOFFSET                   0x0
#define SDMMC_VENDOR_CEATA_CNTRL_0_CCS_SIGNAL_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_CEATA_CNTRL_0_CCS_SIGNAL_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define SDMMC_VENDOR_CEATA_CNTRL_0_CCS_SIGNAL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_CEATA_CNTRL_0_CCS_SIGNAL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_CEATA_CNTRL_0_CCS_SIGNAL_DISABLE                   _MK_ENUM_CONST(0)
#define SDMMC_VENDOR_CEATA_CNTRL_0_CCS_SIGNAL_ENABLE                    _MK_ENUM_CONST(1)

//Vendor Boot Control Register
//This Register is used to configure Boot Mode to support MMC v4.3 cards.

// Register SDMMC_VENDOR_BOOT_CNTRL_0  
#define SDMMC_VENDOR_BOOT_CNTRL_0                       _MK_ADDR_CONST(0x110)
#define SDMMC_VENDOR_BOOT_CNTRL_0_SECURE                        0x0
#define SDMMC_VENDOR_BOOT_CNTRL_0_WORD_COUNT                    0x1
#define SDMMC_VENDOR_BOOT_CNTRL_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_BOOT_CNTRL_0_RESET_MASK                    _MK_MASK_CONST(0x3)
#define SDMMC_VENDOR_BOOT_CNTRL_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_BOOT_CNTRL_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_BOOT_CNTRL_0_READ_MASK                     _MK_MASK_CONST(0x3)
#define SDMMC_VENDOR_BOOT_CNTRL_0_WRITE_MASK                    _MK_MASK_CONST(0x3)
//  This bit is used to support Boot Option in MMC 4.3 version cards.  If set Boot acknowledgment is given by card else not given by card  
#define SDMMC_VENDOR_BOOT_CNTRL_0_BOOT_ACK_SHIFT                        _MK_SHIFT_CONST(1)
#define SDMMC_VENDOR_BOOT_CNTRL_0_BOOT_ACK_FIELD                        (_MK_MASK_CONST(0x1) << SDMMC_VENDOR_BOOT_CNTRL_0_BOOT_ACK_SHIFT)
#define SDMMC_VENDOR_BOOT_CNTRL_0_BOOT_ACK_RANGE                        1:1
#define SDMMC_VENDOR_BOOT_CNTRL_0_BOOT_ACK_WOFFSET                      0x0
#define SDMMC_VENDOR_BOOT_CNTRL_0_BOOT_ACK_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_BOOT_CNTRL_0_BOOT_ACK_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SDMMC_VENDOR_BOOT_CNTRL_0_BOOT_ACK_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_BOOT_CNTRL_0_BOOT_ACK_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_BOOT_CNTRL_0_BOOT_ACK_DISABLE                      _MK_ENUM_CONST(0)
#define SDMMC_VENDOR_BOOT_CNTRL_0_BOOT_ACK_ENABLE                       _MK_ENUM_CONST(1)

//  This bit enables/disable BootOption1.If set BootOption1 is enable,HW auto clears it when boot data is done.  Writing 0 terminates the BootOption1    
#define SDMMC_VENDOR_BOOT_CNTRL_0_BOOT_SHIFT                    _MK_SHIFT_CONST(0)
#define SDMMC_VENDOR_BOOT_CNTRL_0_BOOT_FIELD                    (_MK_MASK_CONST(0x1) << SDMMC_VENDOR_BOOT_CNTRL_0_BOOT_SHIFT)
#define SDMMC_VENDOR_BOOT_CNTRL_0_BOOT_RANGE                    0:0
#define SDMMC_VENDOR_BOOT_CNTRL_0_BOOT_WOFFSET                  0x0
#define SDMMC_VENDOR_BOOT_CNTRL_0_BOOT_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_BOOT_CNTRL_0_BOOT_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define SDMMC_VENDOR_BOOT_CNTRL_0_BOOT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_BOOT_CNTRL_0_BOOT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_BOOT_CNTRL_0_BOOT_DISABLE                  _MK_ENUM_CONST(0)
#define SDMMC_VENDOR_BOOT_CNTRL_0_BOOT_ENABLE                   _MK_ENUM_CONST(1)

//Vendor Boot Acknowledgment Timeout Register

// Register SDMMC_VENDOR_BOOT_ACK_TIMEOUT_0  
#define SDMMC_VENDOR_BOOT_ACK_TIMEOUT_0                 _MK_ADDR_CONST(0x114)
#define SDMMC_VENDOR_BOOT_ACK_TIMEOUT_0_SECURE                  0x0
#define SDMMC_VENDOR_BOOT_ACK_TIMEOUT_0_WORD_COUNT                      0x1
#define SDMMC_VENDOR_BOOT_ACK_TIMEOUT_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_BOOT_ACK_TIMEOUT_0_RESET_MASK                      _MK_MASK_CONST(0xfffff)
#define SDMMC_VENDOR_BOOT_ACK_TIMEOUT_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_BOOT_ACK_TIMEOUT_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_BOOT_ACK_TIMEOUT_0_READ_MASK                       _MK_MASK_CONST(0xfffff)
#define SDMMC_VENDOR_BOOT_ACK_TIMEOUT_0_WRITE_MASK                      _MK_MASK_CONST(0xfffff)
//  If Boot Acknowledgment is not recieved within the the programmed number of cycles. 
//  Boot Acknowledgement Timeout error occurs(VENDOR_SPECIFIC_ERR[0])
#define SDMMC_VENDOR_BOOT_ACK_TIMEOUT_0_VALUE_SHIFT                     _MK_SHIFT_CONST(0)
#define SDMMC_VENDOR_BOOT_ACK_TIMEOUT_0_VALUE_FIELD                     (_MK_MASK_CONST(0xfffff) << SDMMC_VENDOR_BOOT_ACK_TIMEOUT_0_VALUE_SHIFT)
#define SDMMC_VENDOR_BOOT_ACK_TIMEOUT_0_VALUE_RANGE                     19:0
#define SDMMC_VENDOR_BOOT_ACK_TIMEOUT_0_VALUE_WOFFSET                   0x0
#define SDMMC_VENDOR_BOOT_ACK_TIMEOUT_0_VALUE_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_BOOT_ACK_TIMEOUT_0_VALUE_DEFAULT_MASK                      _MK_MASK_CONST(0xfffff)
#define SDMMC_VENDOR_BOOT_ACK_TIMEOUT_0_VALUE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_BOOT_ACK_TIMEOUT_0_VALUE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

//Boot Data Timeout Register

// Register SDMMC_VENDOR_BOOT_DAT_TIMEOUT_0  
#define SDMMC_VENDOR_BOOT_DAT_TIMEOUT_0                 _MK_ADDR_CONST(0x118)
#define SDMMC_VENDOR_BOOT_DAT_TIMEOUT_0_SECURE                  0x0
#define SDMMC_VENDOR_BOOT_DAT_TIMEOUT_0_WORD_COUNT                      0x1
#define SDMMC_VENDOR_BOOT_DAT_TIMEOUT_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_BOOT_DAT_TIMEOUT_0_RESET_MASK                      _MK_MASK_CONST(0x1ffffff)
#define SDMMC_VENDOR_BOOT_DAT_TIMEOUT_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_BOOT_DAT_TIMEOUT_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_BOOT_DAT_TIMEOUT_0_READ_MASK                       _MK_MASK_CONST(0x1ffffff)
#define SDMMC_VENDOR_BOOT_DAT_TIMEOUT_0_WRITE_MASK                      _MK_MASK_CONST(0x1ffffff)
//  If Boot Data is not recieved within the the programmed number of cycles. Then Data Timeout error occurs.
#define SDMMC_VENDOR_BOOT_DAT_TIMEOUT_0_VALUE_SHIFT                     _MK_SHIFT_CONST(0)
#define SDMMC_VENDOR_BOOT_DAT_TIMEOUT_0_VALUE_FIELD                     (_MK_MASK_CONST(0x1ffffff) << SDMMC_VENDOR_BOOT_DAT_TIMEOUT_0_VALUE_SHIFT)
#define SDMMC_VENDOR_BOOT_DAT_TIMEOUT_0_VALUE_RANGE                     24:0
#define SDMMC_VENDOR_BOOT_DAT_TIMEOUT_0_VALUE_WOFFSET                   0x0
#define SDMMC_VENDOR_BOOT_DAT_TIMEOUT_0_VALUE_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_BOOT_DAT_TIMEOUT_0_VALUE_DEFAULT_MASK                      _MK_MASK_CONST(0x1ffffff)
#define SDMMC_VENDOR_BOOT_DAT_TIMEOUT_0_VALUE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_BOOT_DAT_TIMEOUT_0_VALUE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

//Debouce Counter Value Register
//The Debouce Counter runs on 32KHz clock. 
//Keeping the default value to 100ms = ( 100 * 32cycles/1ms) = 3200 cycles for 100ms = 0xC80

// Register SDMMC_VENDOR_DEBOUNCE_COUNT_0  
#define SDMMC_VENDOR_DEBOUNCE_COUNT_0                   _MK_ADDR_CONST(0x11c)
#define SDMMC_VENDOR_DEBOUNCE_COUNT_0_SECURE                    0x0
#define SDMMC_VENDOR_DEBOUNCE_COUNT_0_WORD_COUNT                        0x1
#define SDMMC_VENDOR_DEBOUNCE_COUNT_0_RESET_VAL                         _MK_MASK_CONST(0xc80)
#define SDMMC_VENDOR_DEBOUNCE_COUNT_0_RESET_MASK                        _MK_MASK_CONST(0xffffff)
#define SDMMC_VENDOR_DEBOUNCE_COUNT_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_DEBOUNCE_COUNT_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_DEBOUNCE_COUNT_0_READ_MASK                         _MK_MASK_CONST(0xffffff)
#define SDMMC_VENDOR_DEBOUNCE_COUNT_0_WRITE_MASK                        _MK_MASK_CONST(0xffffff)
//  The number of 32KHz clock cycles is programed to meet Debounce period of the card slot.
#define SDMMC_VENDOR_DEBOUNCE_COUNT_0_VALUE_SHIFT                       _MK_SHIFT_CONST(0)
#define SDMMC_VENDOR_DEBOUNCE_COUNT_0_VALUE_FIELD                       (_MK_MASK_CONST(0xffffff) << SDMMC_VENDOR_DEBOUNCE_COUNT_0_VALUE_SHIFT)
#define SDMMC_VENDOR_DEBOUNCE_COUNT_0_VALUE_RANGE                       23:0
#define SDMMC_VENDOR_DEBOUNCE_COUNT_0_VALUE_WOFFSET                     0x0
#define SDMMC_VENDOR_DEBOUNCE_COUNT_0_VALUE_DEFAULT                     _MK_MASK_CONST(0xc80)
#define SDMMC_VENDOR_DEBOUNCE_COUNT_0_VALUE_DEFAULT_MASK                        _MK_MASK_CONST(0xffffff)
#define SDMMC_VENDOR_DEBOUNCE_COUNT_0_VALUE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_DEBOUNCE_COUNT_0_VALUE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//Observation Bus Register
// This Register is used for Hardware Debug.
//     SEL[3:0]    Observation Data
//      0        {ip2cfg_soft_reset[31],dat2ip_clean_pipe[30],ahb_wrque_not_empty[29],num_ahb_pend_reqs[28:27],read_fifo_dat_present[26:24],dat_fifo_full_cnt[23:16],
//                admafsm_curr_state[15:14],datfsm_curr_state[13:9],cmdfsm_curr_state[8:5],sdmmc_engine_busy[4]} 
//      1        {pending_interrupts,num_bytes_pend_in_block[17:0],pend_ahb_req[6:0]}              
//      2        {num_of_blks_pending[15:0]}              
//      3        {curr_dma_xfer_addr[27:0]}
//      4        {no_of_dxptor_requested[15:0]}
//      5        {adma_cur_sys_addr[27:0]}
//      6        {cur_dxptor_contets[24:0]}
//      7        {total_adma_length_read[27:0]}

// Register SDMMC_VENDOR_OBS_BUS_0  
#define SDMMC_VENDOR_OBS_BUS_0                  _MK_ADDR_CONST(0x120)
#define SDMMC_VENDOR_OBS_BUS_0_SECURE                   0x0
#define SDMMC_VENDOR_OBS_BUS_0_WORD_COUNT                       0x1
#define SDMMC_VENDOR_OBS_BUS_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_OBS_BUS_0_RESET_MASK                       _MK_MASK_CONST(0xffffffff)
#define SDMMC_VENDOR_OBS_BUS_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_OBS_BUS_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_OBS_BUS_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define SDMMC_VENDOR_OBS_BUS_0_WRITE_MASK                       _MK_MASK_CONST(0xf)
//  Debug Information.
#define SDMMC_VENDOR_OBS_BUS_0_DATA_SHIFT                       _MK_SHIFT_CONST(4)
#define SDMMC_VENDOR_OBS_BUS_0_DATA_FIELD                       (_MK_MASK_CONST(0xfffffff) << SDMMC_VENDOR_OBS_BUS_0_DATA_SHIFT)
#define SDMMC_VENDOR_OBS_BUS_0_DATA_RANGE                       31:4
#define SDMMC_VENDOR_OBS_BUS_0_DATA_WOFFSET                     0x0
#define SDMMC_VENDOR_OBS_BUS_0_DATA_DEFAULT                     _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_OBS_BUS_0_DATA_DEFAULT_MASK                        _MK_MASK_CONST(0xfffffff)
#define SDMMC_VENDOR_OBS_BUS_0_DATA_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_OBS_BUS_0_DATA_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//  Debug Select.Values from 0 to 7 are valid. 
#define SDMMC_VENDOR_OBS_BUS_0_SEL_SHIFT                        _MK_SHIFT_CONST(0)
#define SDMMC_VENDOR_OBS_BUS_0_SEL_FIELD                        (_MK_MASK_CONST(0xf) << SDMMC_VENDOR_OBS_BUS_0_SEL_SHIFT)
#define SDMMC_VENDOR_OBS_BUS_0_SEL_RANGE                        3:0
#define SDMMC_VENDOR_OBS_BUS_0_SEL_WOFFSET                      0x0
#define SDMMC_VENDOR_OBS_BUS_0_SEL_DEFAULT                      _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_OBS_BUS_0_SEL_DEFAULT_MASK                 _MK_MASK_CONST(0xf)
#define SDMMC_VENDOR_OBS_BUS_0_SEL_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SDMMC_VENDOR_OBS_BUS_0_SEL_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)


//
// REGISTER LIST
//
#define LIST_ARSDMMC_REGS(_op_) \
_op_(SDMMC_SYSTEM_ADDRESS_0) \
_op_(SDMMC_BLOCK_SIZE_BLOCK_COUNT_0) \
_op_(SDMMC_ARGUMENT_0) \
_op_(SDMMC_CMD_XFER_MODE_0) \
_op_(SDMMC_RESPONSE_R0_R1_0) \
_op_(SDMMC_RESPONSE_R2_R3_0) \
_op_(SDMMC_RESPONSE_R4_R5_0) \
_op_(SDMMC_RESPONSE_R6_R7_0) \
_op_(SDMMC_BUFFER_DATA_PORT_0) \
_op_(SDMMC_PRESENT_STATE_0) \
_op_(SDMMC_POWER_CONTROL_HOST_0) \
_op_(SDMMC_SW_RESET_TIMEOUT_CTRL_CLOCK_CONTROL_0) \
_op_(SDMMC_INTERRUPT_STATUS_0) \
_op_(SDMMC_INTERRUPT_STATUS_ENABLE_0) \
_op_(SDMMC_INTERRUPT_SIGNAL_ENABLE_0) \
_op_(SDMMC_AUTO_CMD12_ERR_STATUS_0) \
_op_(SDMMC_CAPABILITIES_0) \
_op_(SDMMC_MAXIMUM_CURRENT_0) \
_op_(SDMMC_FORCE_EVENT_0) \
_op_(SDMMC_ADMA_ERR_STATUS_0) \
_op_(SDMMC_ADMA_SYSTEM_ADDRESS_0) \
_op_(SDMMC_DEBUG_SELECTION_REGISTER_0) \
_op_(SDMMC_SPI_INTERRUPT_SUPPORT_0) \
_op_(SDMMC_SLOT_INTERRUPT_STATUS_0) \
_op_(SDMMC_VENDOR_CLOCK_CNTRL_0) \
_op_(SDMMC_VENDOR_SPI_CNTRL_0) \
_op_(SDMMC_VENDOR_SPI_INTR_STATUS_0) \
_op_(SDMMC_VENDOR_CEATA_CNTRL_0) \
_op_(SDMMC_VENDOR_BOOT_CNTRL_0) \
_op_(SDMMC_VENDOR_BOOT_ACK_TIMEOUT_0) \
_op_(SDMMC_VENDOR_BOOT_DAT_TIMEOUT_0) \
_op_(SDMMC_VENDOR_DEBOUNCE_COUNT_0) \
_op_(SDMMC_VENDOR_OBS_BUS_0)


//
// ADDRESS SPACES
//

#define BASE_ADDRESS_SDMMC      0x00000000

//
// ARSDMMC REGISTER BANKS
//

#define SDMMC0_FIRST_REG 0x0000 // SDMMC_SYSTEM_ADDRESS_0
#define SDMMC0_LAST_REG 0x0040 // SDMMC_CAPABILITIES_0
#define SDMMC1_FIRST_REG 0x0048 // SDMMC_MAXIMUM_CURRENT_0
#define SDMMC1_LAST_REG 0x0048 // SDMMC_MAXIMUM_CURRENT_0
#define SDMMC2_FIRST_REG 0x0050 // SDMMC_FORCE_EVENT_0
#define SDMMC2_LAST_REG 0x0058 // SDMMC_ADMA_SYSTEM_ADDRESS_0
#define SDMMC3_FIRST_REG 0x0060 // SDMMC_DEBUG_SELECTION_REGISTER_0
#define SDMMC3_LAST_REG 0x0060 // SDMMC_DEBUG_SELECTION_REGISTER_0
#define SDMMC4_FIRST_REG 0x00f0 // SDMMC_SPI_INTERRUPT_SUPPORT_0
#define SDMMC4_LAST_REG 0x00f0 // SDMMC_SPI_INTERRUPT_SUPPORT_0
#define SDMMC5_FIRST_REG 0x00fc // SDMMC_SLOT_INTERRUPT_STATUS_0
#define SDMMC5_LAST_REG 0x0120 // SDMMC_VENDOR_OBS_BUS_0

#ifndef _MK_SHIFT_CONST
  #define _MK_SHIFT_CONST(_constant_) _constant_
#endif
#ifndef _MK_MASK_CONST
  #define _MK_MASK_CONST(_constant_) _constant_
#endif
#ifndef _MK_ENUM_CONST
  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
#endif
#ifndef _MK_ADDR_CONST
  #define _MK_ADDR_CONST(_constant_) _constant_
#endif

#endif // ifndef ___ARSDMMC_H_INC_
