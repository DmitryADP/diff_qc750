//
// DO NOT EDIT - generated by simspec!
//

#ifndef ___ARDISPLAY_H_INC_
#define ___ARDISPLAY_H_INC_
// generated from ardisplay_TEMPLATE.spec by TOT/cmod/display/tools/gen-ardisplay.pl - DO NOT EDIT
// --------------------------------------------------------------------------
// 
// Copyright (c) 2004, NVIDIA Corp.
// All Rights Reserved.
// 
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
// 
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
// 
// --------------------------------------------------------------------------
// 
// Display Controller register definition
//
// Display supports three windows: window A, window B, window C
// Window A is a graphics only window (does not support YUV data format) and it supports only
//   simple non-filtered up/down scaling via pixel and line replication/deletion.
// Window B is an overlay window which supports both RGB and YUV data format and it supports
//   filtered up/down scaling. Vertical filter is 2 tap with 16-phase resolution and
//   horizontal filter is 6-tap with 16-phase resolution.
// Window C is an overlay window which supports both RGB and YUV data format and it supports
//   filtered up/down scaling. Horizontal filter is 6-tap with 16-phase resolution.
//
// The Display Controller register consists of two template files:
//   1. ardisplay_TEMPLATE.spec: these registers are applicable to all display windows
//
//   2. ardisplay_b_TEMPLATE.spec: these registers are applicable to windows, A, B, or C.
//      There are three copies of these registers in DISPLAY. Window A, B, and C registers are 
//      copies of each other, except for differences in window features. The copies of a register 
//      in window A, B, and C share the same address. Register field DISPLAY_WINDOW_HEADER is 
//      used to control whether the subsequent programming goes to window A, B, or C registers, 
//      or any combination of them. Before reading these registers, DISPLAY_WINDOW_HEADER must 
//      be programmed to enable only one window, so that DISPLAY knows which register copy is 
//      being read.
//
//      Color palette: these appears as three instances of 256 32-bit registers with each register
//      consists of one RGB pixel so not all 32 bits in the registers are used. One instance is
//      used for window A, another instance is used for window B, and the third instance is used for 
//      window C. In reality, each instance is implemented as triple 256-words dual-port register 
//      file (2P RF) with one read port and one write port (1R1W) and with each word consisting of 1 
//      red/green/blue component. Read port of the color palettes are used for the corresponding 
//      window A, window B, or window C and write port of the color palettes are used for host write.
//      Note that the host cannot read these color palettes so it must cache this color palettes 
//      somewhere else to be able to read them. This is done to reduce area.
//
//Display Shadow Registers
//------------------------
//Display registers have three shadow types
// 1. Not shadowed
//      Writes to these registers take effect immediately.
// 2. Double buffered 
//      Each register has two copies: ASSEMBLY and ACTIVE. ACTIVE is the working copy.
//      These two copies share the same address/offset.
//      WRITE_MUX can be programmed to choose which copy the subsequent register writes goes to:
//      -- When set to ACTIVE, both ACTIVE and ASSEMBLY copies will be written
//      -- When set to ASSEMBLY, only ASSEMBLY copy will be written
//      READ_MUX can be programmed to choose which copy the subsequent register reads comes from.
//      If display is in STOP mode, ASSEMBLY copy is latched into ACTIVE copy immediately after 
//        (GENERAL/WIN_A/WIN_B/WIN_C)_ACT_REQ is programmed. In other modes the latching happens 
//        on the next frame boundary after (GENERAL/WIN_A/WIN_B/WIN_C)_ACT_REQ is programmed.
// 3. Triple buffered
//      Each register has three copies: ASSEMBLY, ARM, and ACTIVE. ACTIVE is the working copy.
//      ASSEMBLY and ACTIVE copies share the same address/offset, the ARM copy is located at the 
//      address/offset one bigger than the ASSEMBLY/ACTIVE copy.
//      WRITE_MUX can be programmed to choose which copy the subsequent register writes goes to:
//      -- When set to ACTIVE, all three copies will be written
//      -- When set to ASSEMBLY, only ASSEMBLY copy will be written
//      READ_MUX can be programmed to choose which copy the subsequent register reads comes from.
//      -- To read back ASSEMBLY or ACTIVE copy, set READ_MUX correctly before register reads.
//         These two copies share the same address.
//      -- To read back ARM copy, do not set READ_MUX, but read back the register/register-field
//         with "_NS" in their names, the offset of which is 1 bigger than its ASSEMBLY/ACTIVE
//         counterpart.
//      ASSEMBLY copy is latched into ARM copy immediately after (GENERAL/WIN_A/WIN_B/WIN_C)_UPDATE 
//        is programmed.
//      If display is in STOP mode, ARM copy is latched into ACTIVE copy immediately after 
//        (GENERAL/WIN_A/WIN_B/WIN_C)_ACT_REQ is programmed. In other modes the latching happens 
//        on the next frame boundary after (GENERAL/WIN_A/WIN_B/WIN_C)_ACT_REQ is programmed.
//
//Display Control modes
//---------------------
//The DISPLAY_COMMAND is used to set display control mode (CONTINUOUS, ONE-SHOT, or STOP).
//Display switches mode when CTROL_MODE is programmed to shadow register and then activated. 
//Display enters a mode when the register activation happens, either on frame boundary when 
//entering STOP mode, or immediately when exiting STOP mode.
//
//In STOP mode, display is in idle. Pixel clock is not running.
//In CONTINUOUS mode, display keeps regreshing the output frame by frame. This mode is mostly
//  used for the panels without internal frame buffer.
//In ONE-SHOT mode, display waits for a trigger before refreshing each frame. Between those
//  frames, display is in idle. This mode is usualy for the panels with internal frame buffer. 
//  (TVO is an exception. Since TV does not have internal frame buffer, TVO works in continuous 
//   mode and controls the pace. DISPLAY is thus set to ONE-SHOT mode to work as slave of TVO.
//   Other than that, it works much like CONTINUOUS mode.)
//
//In ONE-SHOT mode, there are different types of triggers as follows:
//  1. Input triggers:
//     Input trigger is to notify DISPLAY that a new memory surface is ready to be displayed.
//     i. Host trigger
//        Host trigger is requested when NC_HOST_TRIG_ENABLE is programmed. This register field
//        is in the same register as shadow register UPDATE/ACT_REQ so that the trigger can 
//        happen atomically with register updates for the new frame. When host trigger is 
//        requested within a frame, the requested frame will start immediately after the 
//        end of the current frame.
//     ii.Peer trigger
//        Peer trigger is requested when a peer (VI/EPP/MPE/2D...) sends over a full set of
//        buffer indexes for a complete frame. DISPLAY calculates the new buffer address
//        based on the buffer index received. Whether DISPLAY sends a frame immediately
//        depends on the value of WINDOW_A/B/C_NC_DISPLAY. If it is set to ENABLE, then
//        DISPLAY sends a frame immediately (unless being held off by output triggers),
//        otherwise DISPLAY does not send a new frame, though address change has already
//        taken effect.
//  2. Output triggers:
//     Output trigger is to notify DISPLAY that a panel is ready to receive data from DISPLAY.
//     i. TVO triggers. 
//        When TVO is enabled, DISPLAY waits until TVO sends over a vsync pulse, then sends
//        a new frame, regardless of whether an input trigger has happened.
//     ii.Tear effect signal triggers.
//        When MSF/SSF register field is set to ENABLE, DISPLAY holds off a frame requested by
//        input triggers until DISPALY receives a "ready" from the pins that connect to the 
//        tearing effect signals from the panel, then sends a new frame to panel. However, 
//        if no inpout trigger has been requested, DISPLAY does not send a new frame. That 
//        is different from the behavior of TVO triggers.
//
//In CONTINUOUS mode, the meaning of the triggers is different.
//  1. Input triggers:
//     Since in CONTINUOUS mode trigger happen automatically and repeatedly, trigger here
//     only affects the buffer address change on a window.
//     i. Host trigger
//        Host can change the buffer address and then write WIN_A/B/C_ACT_REQ to request the
//        buffer address change. Note that for syncpt logic, it can not tell if a WIN_A/B/C 
//        register activation indicates the change of address, so it behaves always like a 
//        change of address happens on any register activation requested by WIN_A/B/C_ACT_REQ.
//        As the result, RD_DONE/OP_DONE is returned.
//     ii.Peer trigger
//        When a peer (VI/EPP/MPE/2D...) sends over a full set of buffer indexes for a 
//        complete frame, the address is calculated and is used in next frame.
//  2. Output triggers:
//     These triggers are not applicable in CONTINUOUS mode. TVO_ENABLE and MSF/SSF_ENABLE
//     should never be set in CONTINUOUS mode.
//        
//     
//Sync Points
//-----------
//DISPLAY has 4 syncpt clients:
//GENERAL: 
// Conditions: 
// 0, IMMEDIATE      return INDX immediately
// 1, OP_DONE        not meaningful, same as IMMEDIATE
// 2, RD_DONE        not meaningful, same as IMMEDIATE
// 3, REG_WR_SAFE    returns INDX whenever it is safe to program GENERAL shadow registers.
//                   (when all previous GENERAL activation has happened)
// 4, HSPI           returns INDX whenever it is safe to send HSPI data
//                   (when all HSPI_*** registers are safe to be programmed)
// 5, FRAME_DONE     returns INDX on the next frame end
// 6, VPULSE3        returns INDX on the next vpulse3 leading edge
//                   (for timing sensitive operations if needed)
// 7, FRAME_START    returns INDX on the next frame start
//                   (currently for hardware testing, but can be used if needed)
//
//WIN_A:
// Conditions:
// 0, IMMEDIATE      return INDX immediately
// 1, OP_DONE        same as RD_DONE
// 2, RD_DONE        returns INDX when all WIN_A reads for frames activated before 
//                   the INCR_SYNCPT are complete. In ONE-SHOT mode with TVO disabled,
//                   this happens after the last row of window A display. In CONTINUOUS
//                   mode, or in ONE-SHOT mode with TVO enabled, this happens on the 
//                   last row of window A or on frame end (depending if the INCR_SYNCPT
//                   is issued before or after the window A last row).
// 3, REG_WR_SAFE    returns INDX whenever it is safe to program WIN_A shadow registers.
//                   (when all previous WIN_A activation has happened)
//
//WIN_B: similar to WIN_A
//WIN_C: similar to WIN_A
//
//DISPLAY continuous syncpt:
//VSYNC:             When enabled, return syncpt whenever a vblank start happens
//
//Raise actions (legacy)
//----------------------
//The Raise action is used to check the state of the display's command execution. The Raise 
//action can be enabled by itself or with other actions.
//The raise value is returned to the host controller if the current and all previous 
//commands have completed execution. If the command is executed with the delayed mode, 
//the raise is not returned till that command is executed at the end of the frame. 
//If there is no pending command when the Raise is issued, the raise value is returned 
//immediately.
//The raise value is a 4-bit number included in the command.
//
//Context switch acknowledge, regsiter reads, and raises are returned to the host through a 
//read fifo. However, because there may be more than one raise, read, or acknowledge available for 
//writing to the fifo in a certain cycle, there must be a priority encoder. Here is the priority:
// 1.  Context switch
// 2.  Register read
// 3.  SIGNAL_RAISE
// 4.  SIGNAL_RAISE1
// 5.  SIGNAL_RAISE2
// 6.  SIGNAL_RAISE3
// 7.  DISP_COMMAND_RAISE
// 8.  WIN_G_RAISE
// 9.  HSPI_RAISE
// 10. Refcount
//////////////////////////////////////////////////////////////////////
//
// These packets are for verification; they have no relevence to SW.
//

// Packet FAKE_DC_LPM
#define FAKE_DC_LPM_SIZE 21

#define FAKE_DC_LPM_CS_SHIFT                    _MK_SHIFT_CONST(0)
#define FAKE_DC_LPM_CS_FIELD                    (_MK_MASK_CONST(0x3) << FAKE_DC_LPM_CS_SHIFT)
#define FAKE_DC_LPM_CS_RANGE                    _MK_SHIFT_CONST(1):_MK_SHIFT_CONST(0)
#define FAKE_DC_LPM_CS_ROW                      0

#define FAKE_DC_LPM_CD_SHIFT                    _MK_SHIFT_CONST(2)
#define FAKE_DC_LPM_CD_FIELD                    (_MK_MASK_CONST(0x3f) << FAKE_DC_LPM_CD_SHIFT)
#define FAKE_DC_LPM_CD_RANGE                    _MK_SHIFT_CONST(7):_MK_SHIFT_CONST(2)
#define FAKE_DC_LPM_CD_ROW                      0

#define FAKE_DC_LPM_P_SHIFT                     _MK_SHIFT_CONST(8)
#define FAKE_DC_LPM_P_FIELD                     (_MK_MASK_CONST(0x3f) << FAKE_DC_LPM_P_SHIFT)
#define FAKE_DC_LPM_P_RANGE                     _MK_SHIFT_CONST(13):_MK_SHIFT_CONST(8)
#define FAKE_DC_LPM_P_ROW                       0

#define FAKE_DC_LPM_D_SHIFT                     _MK_SHIFT_CONST(14)
#define FAKE_DC_LPM_D_FIELD                     (_MK_MASK_CONST(0x7f) << FAKE_DC_LPM_D_SHIFT)
#define FAKE_DC_LPM_D_RANGE                     _MK_SHIFT_CONST(20):_MK_SHIFT_CONST(14)
#define FAKE_DC_LPM_D_ROW                       0


// Packet FAKE_DC_HSPI
#define FAKE_DC_HSPI_SIZE 44

#define FAKE_DC_HSPI_DC_SHIFT                   _MK_SHIFT_CONST(0)
#define FAKE_DC_HSPI_DC_FIELD                   (_MK_MASK_CONST(0x1) << FAKE_DC_HSPI_DC_SHIFT)
#define FAKE_DC_HSPI_DC_RANGE                   _MK_SHIFT_CONST(0):_MK_SHIFT_CONST(0)
#define FAKE_DC_HSPI_DC_ROW                     0

#define FAKE_DC_HSPI_SCS_SHIFT                  _MK_SHIFT_CONST(1)
#define FAKE_DC_HSPI_SCS_FIELD                  (_MK_MASK_CONST(0x1) << FAKE_DC_HSPI_SCS_SHIFT)
#define FAKE_DC_HSPI_SCS_RANGE                  _MK_SHIFT_CONST(1):_MK_SHIFT_CONST(1)
#define FAKE_DC_HSPI_SCS_ROW                    0

#define FAKE_DC_HSPI_DATA_SHIFT                 _MK_SHIFT_CONST(12)
#define FAKE_DC_HSPI_DATA_FIELD                 (_MK_MASK_CONST(0xffffff) << FAKE_DC_HSPI_DATA_SHIFT)
#define FAKE_DC_HSPI_DATA_RANGE                 _MK_SHIFT_CONST(35):_MK_SHIFT_CONST(12)
#define FAKE_DC_HSPI_DATA_ROW                   0

#define FAKE_DC_HSPI_SB_SHIFT                   _MK_SHIFT_CONST(36)
#define FAKE_DC_HSPI_SB_FIELD                   (_MK_MASK_CONST(0xff) << FAKE_DC_HSPI_SB_SHIFT)
#define FAKE_DC_HSPI_SB_RANGE                   _MK_SHIFT_CONST(43):_MK_SHIFT_CONST(36)
#define FAKE_DC_HSPI_SB_ROW                     0


// Packet DC_PIN_OUTPUT
#define DC_PIN_OUTPUT_SIZE 40

#define DC_PIN_OUTPUT_LD17_SHIFT                        _MK_SHIFT_CONST(0)
#define DC_PIN_OUTPUT_LD17_FIELD                        (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LD17_SHIFT)
#define DC_PIN_OUTPUT_LD17_RANGE                        _MK_SHIFT_CONST(0):_MK_SHIFT_CONST(0)
#define DC_PIN_OUTPUT_LD17_ROW                  0

#define DC_PIN_OUTPUT_LD16_SHIFT                        _MK_SHIFT_CONST(1)
#define DC_PIN_OUTPUT_LD16_FIELD                        (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LD16_SHIFT)
#define DC_PIN_OUTPUT_LD16_RANGE                        _MK_SHIFT_CONST(1):_MK_SHIFT_CONST(1)
#define DC_PIN_OUTPUT_LD16_ROW                  0

#define DC_PIN_OUTPUT_LD15_SHIFT                        _MK_SHIFT_CONST(2)
#define DC_PIN_OUTPUT_LD15_FIELD                        (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LD15_SHIFT)
#define DC_PIN_OUTPUT_LD15_RANGE                        _MK_SHIFT_CONST(2):_MK_SHIFT_CONST(2)
#define DC_PIN_OUTPUT_LD15_ROW                  0

#define DC_PIN_OUTPUT_LD14_SHIFT                        _MK_SHIFT_CONST(3)
#define DC_PIN_OUTPUT_LD14_FIELD                        (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LD14_SHIFT)
#define DC_PIN_OUTPUT_LD14_RANGE                        _MK_SHIFT_CONST(3):_MK_SHIFT_CONST(3)
#define DC_PIN_OUTPUT_LD14_ROW                  0

#define DC_PIN_OUTPUT_LD13_SHIFT                        _MK_SHIFT_CONST(4)
#define DC_PIN_OUTPUT_LD13_FIELD                        (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LD13_SHIFT)
#define DC_PIN_OUTPUT_LD13_RANGE                        _MK_SHIFT_CONST(4):_MK_SHIFT_CONST(4)
#define DC_PIN_OUTPUT_LD13_ROW                  0

#define DC_PIN_OUTPUT_LD12_SHIFT                        _MK_SHIFT_CONST(5)
#define DC_PIN_OUTPUT_LD12_FIELD                        (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LD12_SHIFT)
#define DC_PIN_OUTPUT_LD12_RANGE                        _MK_SHIFT_CONST(5):_MK_SHIFT_CONST(5)
#define DC_PIN_OUTPUT_LD12_ROW                  0

#define DC_PIN_OUTPUT_LD11_SHIFT                        _MK_SHIFT_CONST(6)
#define DC_PIN_OUTPUT_LD11_FIELD                        (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LD11_SHIFT)
#define DC_PIN_OUTPUT_LD11_RANGE                        _MK_SHIFT_CONST(6):_MK_SHIFT_CONST(6)
#define DC_PIN_OUTPUT_LD11_ROW                  0

#define DC_PIN_OUTPUT_LD10_SHIFT                        _MK_SHIFT_CONST(7)
#define DC_PIN_OUTPUT_LD10_FIELD                        (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LD10_SHIFT)
#define DC_PIN_OUTPUT_LD10_RANGE                        _MK_SHIFT_CONST(7):_MK_SHIFT_CONST(7)
#define DC_PIN_OUTPUT_LD10_ROW                  0

#define DC_PIN_OUTPUT_LD9_SHIFT                 _MK_SHIFT_CONST(8)
#define DC_PIN_OUTPUT_LD9_FIELD                 (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LD9_SHIFT)
#define DC_PIN_OUTPUT_LD9_RANGE                 _MK_SHIFT_CONST(8):_MK_SHIFT_CONST(8)
#define DC_PIN_OUTPUT_LD9_ROW                   0

#define DC_PIN_OUTPUT_LD8_SHIFT                 _MK_SHIFT_CONST(9)
#define DC_PIN_OUTPUT_LD8_FIELD                 (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LD8_SHIFT)
#define DC_PIN_OUTPUT_LD8_RANGE                 _MK_SHIFT_CONST(9):_MK_SHIFT_CONST(9)
#define DC_PIN_OUTPUT_LD8_ROW                   0

#define DC_PIN_OUTPUT_LD7_SHIFT                 _MK_SHIFT_CONST(10)
#define DC_PIN_OUTPUT_LD7_FIELD                 (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LD7_SHIFT)
#define DC_PIN_OUTPUT_LD7_RANGE                 _MK_SHIFT_CONST(10):_MK_SHIFT_CONST(10)
#define DC_PIN_OUTPUT_LD7_ROW                   0

#define DC_PIN_OUTPUT_LD6_SHIFT                 _MK_SHIFT_CONST(11)
#define DC_PIN_OUTPUT_LD6_FIELD                 (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LD6_SHIFT)
#define DC_PIN_OUTPUT_LD6_RANGE                 _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(11)
#define DC_PIN_OUTPUT_LD6_ROW                   0

#define DC_PIN_OUTPUT_LD5_SHIFT                 _MK_SHIFT_CONST(12)
#define DC_PIN_OUTPUT_LD5_FIELD                 (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LD5_SHIFT)
#define DC_PIN_OUTPUT_LD5_RANGE                 _MK_SHIFT_CONST(12):_MK_SHIFT_CONST(12)
#define DC_PIN_OUTPUT_LD5_ROW                   0

#define DC_PIN_OUTPUT_LD4_SHIFT                 _MK_SHIFT_CONST(13)
#define DC_PIN_OUTPUT_LD4_FIELD                 (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LD4_SHIFT)
#define DC_PIN_OUTPUT_LD4_RANGE                 _MK_SHIFT_CONST(13):_MK_SHIFT_CONST(13)
#define DC_PIN_OUTPUT_LD4_ROW                   0

#define DC_PIN_OUTPUT_LD3_SHIFT                 _MK_SHIFT_CONST(14)
#define DC_PIN_OUTPUT_LD3_FIELD                 (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LD3_SHIFT)
#define DC_PIN_OUTPUT_LD3_RANGE                 _MK_SHIFT_CONST(14):_MK_SHIFT_CONST(14)
#define DC_PIN_OUTPUT_LD3_ROW                   0

#define DC_PIN_OUTPUT_LD2_SHIFT                 _MK_SHIFT_CONST(15)
#define DC_PIN_OUTPUT_LD2_FIELD                 (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LD2_SHIFT)
#define DC_PIN_OUTPUT_LD2_RANGE                 _MK_SHIFT_CONST(15):_MK_SHIFT_CONST(15)
#define DC_PIN_OUTPUT_LD2_ROW                   0

#define DC_PIN_OUTPUT_LD1_SHIFT                 _MK_SHIFT_CONST(16)
#define DC_PIN_OUTPUT_LD1_FIELD                 (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LD1_SHIFT)
#define DC_PIN_OUTPUT_LD1_RANGE                 _MK_SHIFT_CONST(16):_MK_SHIFT_CONST(16)
#define DC_PIN_OUTPUT_LD1_ROW                   0

#define DC_PIN_OUTPUT_LD0_SHIFT                 _MK_SHIFT_CONST(17)
#define DC_PIN_OUTPUT_LD0_FIELD                 (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LD0_SHIFT)
#define DC_PIN_OUTPUT_LD0_RANGE                 _MK_SHIFT_CONST(17):_MK_SHIFT_CONST(17)
#define DC_PIN_OUTPUT_LD0_ROW                   0

#define DC_PIN_OUTPUT_LPW0_SHIFT                        _MK_SHIFT_CONST(18)
#define DC_PIN_OUTPUT_LPW0_FIELD                        (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LPW0_SHIFT)
#define DC_PIN_OUTPUT_LPW0_RANGE                        _MK_SHIFT_CONST(18):_MK_SHIFT_CONST(18)
#define DC_PIN_OUTPUT_LPW0_ROW                  0

#define DC_PIN_OUTPUT_LPW1_SHIFT                        _MK_SHIFT_CONST(19)
#define DC_PIN_OUTPUT_LPW1_FIELD                        (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LPW1_SHIFT)
#define DC_PIN_OUTPUT_LPW1_RANGE                        _MK_SHIFT_CONST(19):_MK_SHIFT_CONST(19)
#define DC_PIN_OUTPUT_LPW1_ROW                  0

#define DC_PIN_OUTPUT_LPW2_SHIFT                        _MK_SHIFT_CONST(20)
#define DC_PIN_OUTPUT_LPW2_FIELD                        (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LPW2_SHIFT)
#define DC_PIN_OUTPUT_LPW2_RANGE                        _MK_SHIFT_CONST(20):_MK_SHIFT_CONST(20)
#define DC_PIN_OUTPUT_LPW2_ROW                  0

#define DC_PIN_OUTPUT_LSC0_SHIFT                        _MK_SHIFT_CONST(21)
#define DC_PIN_OUTPUT_LSC0_FIELD                        (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LSC0_SHIFT)
#define DC_PIN_OUTPUT_LSC0_RANGE                        _MK_SHIFT_CONST(21):_MK_SHIFT_CONST(21)
#define DC_PIN_OUTPUT_LSC0_ROW                  0

#define DC_PIN_OUTPUT_LSC1_SHIFT                        _MK_SHIFT_CONST(22)
#define DC_PIN_OUTPUT_LSC1_FIELD                        (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LSC1_SHIFT)
#define DC_PIN_OUTPUT_LSC1_RANGE                        _MK_SHIFT_CONST(22):_MK_SHIFT_CONST(22)
#define DC_PIN_OUTPUT_LSC1_ROW                  0

#define DC_PIN_OUTPUT_LVS_SHIFT                 _MK_SHIFT_CONST(23)
#define DC_PIN_OUTPUT_LVS_FIELD                 (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LVS_SHIFT)
#define DC_PIN_OUTPUT_LVS_RANGE                 _MK_SHIFT_CONST(23):_MK_SHIFT_CONST(23)
#define DC_PIN_OUTPUT_LVS_ROW                   0

#define DC_PIN_OUTPUT_LHS_SHIFT                 _MK_SHIFT_CONST(24)
#define DC_PIN_OUTPUT_LHS_FIELD                 (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LHS_SHIFT)
#define DC_PIN_OUTPUT_LHS_RANGE                 _MK_SHIFT_CONST(24):_MK_SHIFT_CONST(24)
#define DC_PIN_OUTPUT_LHS_ROW                   0

#define DC_PIN_OUTPUT_LHP0_SHIFT                        _MK_SHIFT_CONST(25)
#define DC_PIN_OUTPUT_LHP0_FIELD                        (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LHP0_SHIFT)
#define DC_PIN_OUTPUT_LHP0_RANGE                        _MK_SHIFT_CONST(25):_MK_SHIFT_CONST(25)
#define DC_PIN_OUTPUT_LHP0_ROW                  0

#define DC_PIN_OUTPUT_LHP1_SHIFT                        _MK_SHIFT_CONST(26)
#define DC_PIN_OUTPUT_LHP1_FIELD                        (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LHP1_SHIFT)
#define DC_PIN_OUTPUT_LHP1_RANGE                        _MK_SHIFT_CONST(26):_MK_SHIFT_CONST(26)
#define DC_PIN_OUTPUT_LHP1_ROW                  0

#define DC_PIN_OUTPUT_LHP2_SHIFT                        _MK_SHIFT_CONST(27)
#define DC_PIN_OUTPUT_LHP2_FIELD                        (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LHP2_SHIFT)
#define DC_PIN_OUTPUT_LHP2_RANGE                        _MK_SHIFT_CONST(27):_MK_SHIFT_CONST(27)
#define DC_PIN_OUTPUT_LHP2_ROW                  0

#define DC_PIN_OUTPUT_LVP0_SHIFT                        _MK_SHIFT_CONST(28)
#define DC_PIN_OUTPUT_LVP0_FIELD                        (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LVP0_SHIFT)
#define DC_PIN_OUTPUT_LVP0_RANGE                        _MK_SHIFT_CONST(28):_MK_SHIFT_CONST(28)
#define DC_PIN_OUTPUT_LVP0_ROW                  0

#define DC_PIN_OUTPUT_LVP1_SHIFT                        _MK_SHIFT_CONST(29)
#define DC_PIN_OUTPUT_LVP1_FIELD                        (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LVP1_SHIFT)
#define DC_PIN_OUTPUT_LVP1_RANGE                        _MK_SHIFT_CONST(29):_MK_SHIFT_CONST(29)
#define DC_PIN_OUTPUT_LVP1_ROW                  0

#define DC_PIN_OUTPUT_LM0_SHIFT                 _MK_SHIFT_CONST(30)
#define DC_PIN_OUTPUT_LM0_FIELD                 (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LM0_SHIFT)
#define DC_PIN_OUTPUT_LM0_RANGE                 _MK_SHIFT_CONST(30):_MK_SHIFT_CONST(30)
#define DC_PIN_OUTPUT_LM0_ROW                   0

#define DC_PIN_OUTPUT_LM1_SHIFT                 _MK_SHIFT_CONST(31)
#define DC_PIN_OUTPUT_LM1_FIELD                 (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LM1_SHIFT)
#define DC_PIN_OUTPUT_LM1_RANGE                 _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(31)
#define DC_PIN_OUTPUT_LM1_ROW                   0

#define DC_PIN_OUTPUT_LDI_SHIFT                 _MK_SHIFT_CONST(32)
#define DC_PIN_OUTPUT_LDI_FIELD                 (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LDI_SHIFT)
#define DC_PIN_OUTPUT_LDI_RANGE                 _MK_SHIFT_CONST(32):_MK_SHIFT_CONST(32)
#define DC_PIN_OUTPUT_LDI_ROW                   0

#define DC_PIN_OUTPUT_LPP_SHIFT                 _MK_SHIFT_CONST(33)
#define DC_PIN_OUTPUT_LPP_FIELD                 (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LPP_SHIFT)
#define DC_PIN_OUTPUT_LPP_RANGE                 _MK_SHIFT_CONST(33):_MK_SHIFT_CONST(33)
#define DC_PIN_OUTPUT_LPP_ROW                   0

#define DC_PIN_OUTPUT_LSCK_SHIFT                        _MK_SHIFT_CONST(34)
#define DC_PIN_OUTPUT_LSCK_FIELD                        (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LSCK_SHIFT)
#define DC_PIN_OUTPUT_LSCK_RANGE                        _MK_SHIFT_CONST(34):_MK_SHIFT_CONST(34)
#define DC_PIN_OUTPUT_LSCK_ROW                  0

#define DC_PIN_OUTPUT_LSDA_SHIFT                        _MK_SHIFT_CONST(35)
#define DC_PIN_OUTPUT_LSDA_FIELD                        (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LSDA_SHIFT)
#define DC_PIN_OUTPUT_LSDA_RANGE                        _MK_SHIFT_CONST(35):_MK_SHIFT_CONST(35)
#define DC_PIN_OUTPUT_LSDA_ROW                  0

#define DC_PIN_OUTPUT_LCSN_SHIFT                        _MK_SHIFT_CONST(36)
#define DC_PIN_OUTPUT_LCSN_FIELD                        (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LCSN_SHIFT)
#define DC_PIN_OUTPUT_LCSN_RANGE                        _MK_SHIFT_CONST(36):_MK_SHIFT_CONST(36)
#define DC_PIN_OUTPUT_LCSN_ROW                  0

#define DC_PIN_OUTPUT_LDC_SHIFT                 _MK_SHIFT_CONST(37)
#define DC_PIN_OUTPUT_LDC_FIELD                 (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LDC_SHIFT)
#define DC_PIN_OUTPUT_LDC_RANGE                 _MK_SHIFT_CONST(37):_MK_SHIFT_CONST(37)
#define DC_PIN_OUTPUT_LDC_ROW                   0

#define DC_PIN_OUTPUT_LSPI_SHIFT                        _MK_SHIFT_CONST(38)
#define DC_PIN_OUTPUT_LSPI_FIELD                        (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LSPI_SHIFT)
#define DC_PIN_OUTPUT_LSPI_RANGE                        _MK_SHIFT_CONST(38):_MK_SHIFT_CONST(38)
#define DC_PIN_OUTPUT_LSPI_ROW                  0

#define DC_PIN_OUTPUT_LSDI_SHIFT                        _MK_SHIFT_CONST(39)
#define DC_PIN_OUTPUT_LSDI_FIELD                        (_MK_MASK_CONST(0x1) << DC_PIN_OUTPUT_LSDI_SHIFT)
#define DC_PIN_OUTPUT_LSDI_RANGE                        _MK_SHIFT_CONST(39):_MK_SHIFT_CONST(39)
#define DC_PIN_OUTPUT_LSDI_ROW                  0

// The RAISE packet should include the intended return channel.  This channel
// should be passed back to the host so the RAISE will be reflected in the
// correct channel.

// Packet RAISE
#define RAISE_SIZE 20

#define RAISE_RAISEVAL_SHIFT                    _MK_SHIFT_CONST(0)
#define RAISE_RAISEVAL_FIELD                    (_MK_MASK_CONST(0x1f) << RAISE_RAISEVAL_SHIFT)
#define RAISE_RAISEVAL_RANGE                    _MK_SHIFT_CONST(4):_MK_SHIFT_CONST(0)
#define RAISE_RAISEVAL_ROW                      0

// Channel at 19:16 to match some of the other host commands
#define RAISE_CHANNEL_SHIFT                     _MK_SHIFT_CONST(16)
#define RAISE_CHANNEL_FIELD                     (_MK_MASK_CONST(0xf) << RAISE_CHANNEL_SHIFT)
#define RAISE_CHANNEL_RANGE                     _MK_SHIFT_CONST(19):_MK_SHIFT_CONST(16)
#define RAISE_CHANNEL_ROW                       0

#define NV_DISPLAY_GENERAL_INCR_SYNCPT_NB_CONDS 8
// --------------------------------------------------------------------------
// 
// Copyright (c) 2004, NVIDIA Corp.
// All Rights Reserved.
// 
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
// 
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
// 
// --------------------------------------------------------------------------
// 

// Register DC_CMD_GENERAL_INCR_SYNCPT_0  
#define DC_CMD_GENERAL_INCR_SYNCPT_0                    _MK_ADDR_CONST(0x0)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_SECURE                     0x0
#define DC_CMD_GENERAL_INCR_SYNCPT_0_WORD_COUNT                         0x1
#define DC_CMD_GENERAL_INCR_SYNCPT_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_RESET_MASK                         _MK_MASK_CONST(0xffff)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_READ_MASK                  _MK_MASK_CONST(0xffff)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_WRITE_MASK                         _MK_MASK_CONST(0xffff)
// Condition mapped from raise/wait
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_COND_SHIFT                 _MK_SHIFT_CONST(8)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_COND_FIELD                 (_MK_MASK_CONST(0xff) << DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_COND_SHIFT)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_COND_RANGE                 15:8
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_COND_WOFFSET                       0x0
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_COND_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_COND_DEFAULT_MASK                  _MK_MASK_CONST(0xff)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_COND_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_COND_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_COND_IMMEDIATE                     _MK_ENUM_CONST(0)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_COND_OP_DONE                       _MK_ENUM_CONST(1)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_COND_RD_DONE                       _MK_ENUM_CONST(2)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_COND_REG_WR_SAFE                   _MK_ENUM_CONST(3)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_COND_HSPI                  _MK_ENUM_CONST(4)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_COND_FRAME_DONE                    _MK_ENUM_CONST(5)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_COND_VPULSE3                       _MK_ENUM_CONST(6)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_COND_FRAME_START                   _MK_ENUM_CONST(7)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_COND_COND_8                        _MK_ENUM_CONST(8)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_COND_COND_9                        _MK_ENUM_CONST(9)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_COND_COND_10                       _MK_ENUM_CONST(10)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_COND_COND_11                       _MK_ENUM_CONST(11)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_COND_COND_12                       _MK_ENUM_CONST(12)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_COND_COND_13                       _MK_ENUM_CONST(13)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_COND_COND_14                       _MK_ENUM_CONST(14)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_COND_COND_15                       _MK_ENUM_CONST(15)

// syncpt index value
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_INDX_SHIFT                 _MK_SHIFT_CONST(0)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_INDX_FIELD                 (_MK_MASK_CONST(0xff) << DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_INDX_SHIFT)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_INDX_RANGE                 7:0
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_INDX_WOFFSET                       0x0
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_INDX_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_INDX_DEFAULT_MASK                  _MK_MASK_CONST(0xff)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_INDX_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_GENERAL_INCR_SYNCPT_0_GENERAL_INDX_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register DC_CMD_GENERAL_INCR_SYNCPT_CNTRL_0  
#define DC_CMD_GENERAL_INCR_SYNCPT_CNTRL_0                      _MK_ADDR_CONST(0x1)
#define DC_CMD_GENERAL_INCR_SYNCPT_CNTRL_0_SECURE                       0x0
#define DC_CMD_GENERAL_INCR_SYNCPT_CNTRL_0_WORD_COUNT                   0x1
#define DC_CMD_GENERAL_INCR_SYNCPT_CNTRL_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define DC_CMD_GENERAL_INCR_SYNCPT_CNTRL_0_RESET_MASK                   _MK_MASK_CONST(0x101)
#define DC_CMD_GENERAL_INCR_SYNCPT_CNTRL_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_CMD_GENERAL_INCR_SYNCPT_CNTRL_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_CMD_GENERAL_INCR_SYNCPT_CNTRL_0_READ_MASK                    _MK_MASK_CONST(0x101)
#define DC_CMD_GENERAL_INCR_SYNCPT_CNTRL_0_WRITE_MASK                   _MK_MASK_CONST(0x101)
// If NO_STALL is 1, then when fifos are full,
// INCR_SYNCPT methods will be dropped and the
// INCR_SYNCPT_ERROR[COND] bit will be set.
// If NO_STALL is 0, then when fifos are full,
// the client host interface will be stalled.
#define DC_CMD_GENERAL_INCR_SYNCPT_CNTRL_0_GENERAL_INCR_SYNCPT_NO_STALL_SHIFT                   _MK_SHIFT_CONST(8)
#define DC_CMD_GENERAL_INCR_SYNCPT_CNTRL_0_GENERAL_INCR_SYNCPT_NO_STALL_FIELD                   (_MK_MASK_CONST(0x1) << DC_CMD_GENERAL_INCR_SYNCPT_CNTRL_0_GENERAL_INCR_SYNCPT_NO_STALL_SHIFT)
#define DC_CMD_GENERAL_INCR_SYNCPT_CNTRL_0_GENERAL_INCR_SYNCPT_NO_STALL_RANGE                   8:8
#define DC_CMD_GENERAL_INCR_SYNCPT_CNTRL_0_GENERAL_INCR_SYNCPT_NO_STALL_WOFFSET                 0x0
#define DC_CMD_GENERAL_INCR_SYNCPT_CNTRL_0_GENERAL_INCR_SYNCPT_NO_STALL_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_CMD_GENERAL_INCR_SYNCPT_CNTRL_0_GENERAL_INCR_SYNCPT_NO_STALL_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_CMD_GENERAL_INCR_SYNCPT_CNTRL_0_GENERAL_INCR_SYNCPT_NO_STALL_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_GENERAL_INCR_SYNCPT_CNTRL_0_GENERAL_INCR_SYNCPT_NO_STALL_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// If SOFT_RESET is set, then all internal state
// of the client syncpt block will be reset.
// To do soft reset, first set SOFT_RESET of
// all host1x clients affected, then clear all
// SOFT_RESETs.
#define DC_CMD_GENERAL_INCR_SYNCPT_CNTRL_0_GENERAL_INCR_SYNCPT_SOFT_RESET_SHIFT                 _MK_SHIFT_CONST(0)
#define DC_CMD_GENERAL_INCR_SYNCPT_CNTRL_0_GENERAL_INCR_SYNCPT_SOFT_RESET_FIELD                 (_MK_MASK_CONST(0x1) << DC_CMD_GENERAL_INCR_SYNCPT_CNTRL_0_GENERAL_INCR_SYNCPT_SOFT_RESET_SHIFT)
#define DC_CMD_GENERAL_INCR_SYNCPT_CNTRL_0_GENERAL_INCR_SYNCPT_SOFT_RESET_RANGE                 0:0
#define DC_CMD_GENERAL_INCR_SYNCPT_CNTRL_0_GENERAL_INCR_SYNCPT_SOFT_RESET_WOFFSET                       0x0
#define DC_CMD_GENERAL_INCR_SYNCPT_CNTRL_0_GENERAL_INCR_SYNCPT_SOFT_RESET_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_GENERAL_INCR_SYNCPT_CNTRL_0_GENERAL_INCR_SYNCPT_SOFT_RESET_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_CMD_GENERAL_INCR_SYNCPT_CNTRL_0_GENERAL_INCR_SYNCPT_SOFT_RESET_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_GENERAL_INCR_SYNCPT_CNTRL_0_GENERAL_INCR_SYNCPT_SOFT_RESET_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register DC_CMD_GENERAL_INCR_SYNCPT_ERROR_0  
#define DC_CMD_GENERAL_INCR_SYNCPT_ERROR_0                      _MK_ADDR_CONST(0x2)
#define DC_CMD_GENERAL_INCR_SYNCPT_ERROR_0_SECURE                       0x0
#define DC_CMD_GENERAL_INCR_SYNCPT_ERROR_0_WORD_COUNT                   0x1
#define DC_CMD_GENERAL_INCR_SYNCPT_ERROR_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define DC_CMD_GENERAL_INCR_SYNCPT_ERROR_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define DC_CMD_GENERAL_INCR_SYNCPT_ERROR_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_CMD_GENERAL_INCR_SYNCPT_ERROR_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_CMD_GENERAL_INCR_SYNCPT_ERROR_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define DC_CMD_GENERAL_INCR_SYNCPT_ERROR_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
// COND_STATUS[COND] is set if the fifo for COND overflows.
// This bit is sticky and will remain set until cleared.
// Cleared by writing 1.
#define DC_CMD_GENERAL_INCR_SYNCPT_ERROR_0_GENERAL_COND_STATUS_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_CMD_GENERAL_INCR_SYNCPT_ERROR_0_GENERAL_COND_STATUS_FIELD                    (_MK_MASK_CONST(0xffffffff) << DC_CMD_GENERAL_INCR_SYNCPT_ERROR_0_GENERAL_COND_STATUS_SHIFT)
#define DC_CMD_GENERAL_INCR_SYNCPT_ERROR_0_GENERAL_COND_STATUS_RANGE                    31:0
#define DC_CMD_GENERAL_INCR_SYNCPT_ERROR_0_GENERAL_COND_STATUS_WOFFSET                  0x0
#define DC_CMD_GENERAL_INCR_SYNCPT_ERROR_0_GENERAL_COND_STATUS_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_GENERAL_INCR_SYNCPT_ERROR_0_GENERAL_COND_STATUS_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_GENERAL_INCR_SYNCPT_ERROR_0_GENERAL_COND_STATUS_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_GENERAL_INCR_SYNCPT_ERROR_0_GENERAL_COND_STATUS_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// reserve locations for future expansion

// Reserved address 3 [0x3] 

// Reserved address 4 [0x4] 

// Reserved address 5 [0x5] 

// Reserved address 6 [0x6] 

// Reserved address 7 [0x7] 
// just in case names were redefined using macros
#define NV_DISPLAY_WIN_A_INCR_SYNCPT_NB_CONDS   4
// --------------------------------------------------------------------------
// 
// Copyright (c) 2004, NVIDIA Corp.
// All Rights Reserved.
// 
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
// 
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
// 
// --------------------------------------------------------------------------
// 

// Register DC_CMD_WIN_A_INCR_SYNCPT_0  
#define DC_CMD_WIN_A_INCR_SYNCPT_0                      _MK_ADDR_CONST(0x8)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_SECURE                       0x0
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WORD_COUNT                   0x1
#define DC_CMD_WIN_A_INCR_SYNCPT_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_RESET_MASK                   _MK_MASK_CONST(0xffff)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_READ_MASK                    _MK_MASK_CONST(0xffff)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WRITE_MASK                   _MK_MASK_CONST(0xffff)
// Condition mapped from raise/wait
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_COND_SHIFT                     _MK_SHIFT_CONST(8)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_COND_FIELD                     (_MK_MASK_CONST(0xff) << DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_COND_SHIFT)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_COND_RANGE                     15:8
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_COND_WOFFSET                   0x0
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_COND_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_COND_DEFAULT_MASK                      _MK_MASK_CONST(0xff)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_COND_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_COND_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_COND_IMMEDIATE                 _MK_ENUM_CONST(0)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_COND_OP_DONE                   _MK_ENUM_CONST(1)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_COND_RD_DONE                   _MK_ENUM_CONST(2)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_COND_REG_WR_SAFE                       _MK_ENUM_CONST(3)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_COND_COND_4                    _MK_ENUM_CONST(4)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_COND_COND_5                    _MK_ENUM_CONST(5)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_COND_COND_6                    _MK_ENUM_CONST(6)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_COND_COND_7                    _MK_ENUM_CONST(7)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_COND_COND_8                    _MK_ENUM_CONST(8)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_COND_COND_9                    _MK_ENUM_CONST(9)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_COND_COND_10                   _MK_ENUM_CONST(10)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_COND_COND_11                   _MK_ENUM_CONST(11)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_COND_COND_12                   _MK_ENUM_CONST(12)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_COND_COND_13                   _MK_ENUM_CONST(13)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_COND_COND_14                   _MK_ENUM_CONST(14)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_COND_COND_15                   _MK_ENUM_CONST(15)

// syncpt index value
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_INDX_SHIFT                     _MK_SHIFT_CONST(0)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_INDX_FIELD                     (_MK_MASK_CONST(0xff) << DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_INDX_SHIFT)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_INDX_RANGE                     7:0
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_INDX_WOFFSET                   0x0
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_INDX_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_INDX_DEFAULT_MASK                      _MK_MASK_CONST(0xff)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_INDX_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_A_INCR_SYNCPT_0_WIN_A_INDX_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register DC_CMD_WIN_A_INCR_SYNCPT_CNTRL_0  
#define DC_CMD_WIN_A_INCR_SYNCPT_CNTRL_0                        _MK_ADDR_CONST(0x9)
#define DC_CMD_WIN_A_INCR_SYNCPT_CNTRL_0_SECURE                         0x0
#define DC_CMD_WIN_A_INCR_SYNCPT_CNTRL_0_WORD_COUNT                     0x1
#define DC_CMD_WIN_A_INCR_SYNCPT_CNTRL_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_A_INCR_SYNCPT_CNTRL_0_RESET_MASK                     _MK_MASK_CONST(0x101)
#define DC_CMD_WIN_A_INCR_SYNCPT_CNTRL_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_A_INCR_SYNCPT_CNTRL_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_A_INCR_SYNCPT_CNTRL_0_READ_MASK                      _MK_MASK_CONST(0x101)
#define DC_CMD_WIN_A_INCR_SYNCPT_CNTRL_0_WRITE_MASK                     _MK_MASK_CONST(0x101)
// If NO_STALL is 1, then when fifos are full,
// INCR_SYNCPT methods will be dropped and the
// INCR_SYNCPT_ERROR[COND] bit will be set.
// If NO_STALL is 0, then when fifos are full,
// the client host interface will be stalled.
#define DC_CMD_WIN_A_INCR_SYNCPT_CNTRL_0_WIN_A_INCR_SYNCPT_NO_STALL_SHIFT                       _MK_SHIFT_CONST(8)
#define DC_CMD_WIN_A_INCR_SYNCPT_CNTRL_0_WIN_A_INCR_SYNCPT_NO_STALL_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_WIN_A_INCR_SYNCPT_CNTRL_0_WIN_A_INCR_SYNCPT_NO_STALL_SHIFT)
#define DC_CMD_WIN_A_INCR_SYNCPT_CNTRL_0_WIN_A_INCR_SYNCPT_NO_STALL_RANGE                       8:8
#define DC_CMD_WIN_A_INCR_SYNCPT_CNTRL_0_WIN_A_INCR_SYNCPT_NO_STALL_WOFFSET                     0x0
#define DC_CMD_WIN_A_INCR_SYNCPT_CNTRL_0_WIN_A_INCR_SYNCPT_NO_STALL_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_A_INCR_SYNCPT_CNTRL_0_WIN_A_INCR_SYNCPT_NO_STALL_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_WIN_A_INCR_SYNCPT_CNTRL_0_WIN_A_INCR_SYNCPT_NO_STALL_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_A_INCR_SYNCPT_CNTRL_0_WIN_A_INCR_SYNCPT_NO_STALL_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// If SOFT_RESET is set, then all internal state
// of the client syncpt block will be reset.
// To do soft reset, first set SOFT_RESET of
// all host1x clients affected, then clear all
// SOFT_RESETs.
#define DC_CMD_WIN_A_INCR_SYNCPT_CNTRL_0_WIN_A_INCR_SYNCPT_SOFT_RESET_SHIFT                     _MK_SHIFT_CONST(0)
#define DC_CMD_WIN_A_INCR_SYNCPT_CNTRL_0_WIN_A_INCR_SYNCPT_SOFT_RESET_FIELD                     (_MK_MASK_CONST(0x1) << DC_CMD_WIN_A_INCR_SYNCPT_CNTRL_0_WIN_A_INCR_SYNCPT_SOFT_RESET_SHIFT)
#define DC_CMD_WIN_A_INCR_SYNCPT_CNTRL_0_WIN_A_INCR_SYNCPT_SOFT_RESET_RANGE                     0:0
#define DC_CMD_WIN_A_INCR_SYNCPT_CNTRL_0_WIN_A_INCR_SYNCPT_SOFT_RESET_WOFFSET                   0x0
#define DC_CMD_WIN_A_INCR_SYNCPT_CNTRL_0_WIN_A_INCR_SYNCPT_SOFT_RESET_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_A_INCR_SYNCPT_CNTRL_0_WIN_A_INCR_SYNCPT_SOFT_RESET_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_CMD_WIN_A_INCR_SYNCPT_CNTRL_0_WIN_A_INCR_SYNCPT_SOFT_RESET_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_A_INCR_SYNCPT_CNTRL_0_WIN_A_INCR_SYNCPT_SOFT_RESET_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register DC_CMD_WIN_A_INCR_SYNCPT_ERROR_0  
#define DC_CMD_WIN_A_INCR_SYNCPT_ERROR_0                        _MK_ADDR_CONST(0xa)
#define DC_CMD_WIN_A_INCR_SYNCPT_ERROR_0_SECURE                         0x0
#define DC_CMD_WIN_A_INCR_SYNCPT_ERROR_0_WORD_COUNT                     0x1
#define DC_CMD_WIN_A_INCR_SYNCPT_ERROR_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_A_INCR_SYNCPT_ERROR_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_A_INCR_SYNCPT_ERROR_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_A_INCR_SYNCPT_ERROR_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_A_INCR_SYNCPT_ERROR_0_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define DC_CMD_WIN_A_INCR_SYNCPT_ERROR_0_WRITE_MASK                     _MK_MASK_CONST(0xffffffff)
// COND_STATUS[COND] is set if the fifo for COND overflows.
// This bit is sticky and will remain set until cleared.
// Cleared by writing 1.
#define DC_CMD_WIN_A_INCR_SYNCPT_ERROR_0_WIN_A_COND_STATUS_SHIFT                        _MK_SHIFT_CONST(0)
#define DC_CMD_WIN_A_INCR_SYNCPT_ERROR_0_WIN_A_COND_STATUS_FIELD                        (_MK_MASK_CONST(0xffffffff) << DC_CMD_WIN_A_INCR_SYNCPT_ERROR_0_WIN_A_COND_STATUS_SHIFT)
#define DC_CMD_WIN_A_INCR_SYNCPT_ERROR_0_WIN_A_COND_STATUS_RANGE                        31:0
#define DC_CMD_WIN_A_INCR_SYNCPT_ERROR_0_WIN_A_COND_STATUS_WOFFSET                      0x0
#define DC_CMD_WIN_A_INCR_SYNCPT_ERROR_0_WIN_A_COND_STATUS_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_A_INCR_SYNCPT_ERROR_0_WIN_A_COND_STATUS_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_A_INCR_SYNCPT_ERROR_0_WIN_A_COND_STATUS_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_A_INCR_SYNCPT_ERROR_0_WIN_A_COND_STATUS_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// reserve locations for future expansion

// Reserved address 11 [0xb] 

// Reserved address 12 [0xc] 

// Reserved address 13 [0xd] 

// Reserved address 14 [0xe] 

// Reserved address 15 [0xf] 
// just in case names were redefined using macros
#define NV_DISPLAY_WIN_B_INCR_SYNCPT_NB_CONDS   4
// --------------------------------------------------------------------------
// 
// Copyright (c) 2004, NVIDIA Corp.
// All Rights Reserved.
// 
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
// 
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
// 
// --------------------------------------------------------------------------
// 

// Register DC_CMD_WIN_B_INCR_SYNCPT_0  
#define DC_CMD_WIN_B_INCR_SYNCPT_0                      _MK_ADDR_CONST(0x10)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_SECURE                       0x0
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WORD_COUNT                   0x1
#define DC_CMD_WIN_B_INCR_SYNCPT_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_RESET_MASK                   _MK_MASK_CONST(0xffff)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_READ_MASK                    _MK_MASK_CONST(0xffff)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WRITE_MASK                   _MK_MASK_CONST(0xffff)
// Condition mapped from raise/wait
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_COND_SHIFT                     _MK_SHIFT_CONST(8)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_COND_FIELD                     (_MK_MASK_CONST(0xff) << DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_COND_SHIFT)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_COND_RANGE                     15:8
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_COND_WOFFSET                   0x0
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_COND_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_COND_DEFAULT_MASK                      _MK_MASK_CONST(0xff)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_COND_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_COND_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_COND_IMMEDIATE                 _MK_ENUM_CONST(0)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_COND_OP_DONE                   _MK_ENUM_CONST(1)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_COND_RD_DONE                   _MK_ENUM_CONST(2)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_COND_REG_WR_SAFE                       _MK_ENUM_CONST(3)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_COND_COND_4                    _MK_ENUM_CONST(4)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_COND_COND_5                    _MK_ENUM_CONST(5)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_COND_COND_6                    _MK_ENUM_CONST(6)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_COND_COND_7                    _MK_ENUM_CONST(7)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_COND_COND_8                    _MK_ENUM_CONST(8)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_COND_COND_9                    _MK_ENUM_CONST(9)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_COND_COND_10                   _MK_ENUM_CONST(10)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_COND_COND_11                   _MK_ENUM_CONST(11)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_COND_COND_12                   _MK_ENUM_CONST(12)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_COND_COND_13                   _MK_ENUM_CONST(13)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_COND_COND_14                   _MK_ENUM_CONST(14)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_COND_COND_15                   _MK_ENUM_CONST(15)

// syncpt index value
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_INDX_SHIFT                     _MK_SHIFT_CONST(0)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_INDX_FIELD                     (_MK_MASK_CONST(0xff) << DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_INDX_SHIFT)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_INDX_RANGE                     7:0
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_INDX_WOFFSET                   0x0
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_INDX_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_INDX_DEFAULT_MASK                      _MK_MASK_CONST(0xff)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_INDX_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_B_INCR_SYNCPT_0_WIN_B_INDX_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register DC_CMD_WIN_B_INCR_SYNCPT_CNTRL_0  
#define DC_CMD_WIN_B_INCR_SYNCPT_CNTRL_0                        _MK_ADDR_CONST(0x11)
#define DC_CMD_WIN_B_INCR_SYNCPT_CNTRL_0_SECURE                         0x0
#define DC_CMD_WIN_B_INCR_SYNCPT_CNTRL_0_WORD_COUNT                     0x1
#define DC_CMD_WIN_B_INCR_SYNCPT_CNTRL_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_B_INCR_SYNCPT_CNTRL_0_RESET_MASK                     _MK_MASK_CONST(0x101)
#define DC_CMD_WIN_B_INCR_SYNCPT_CNTRL_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_B_INCR_SYNCPT_CNTRL_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_B_INCR_SYNCPT_CNTRL_0_READ_MASK                      _MK_MASK_CONST(0x101)
#define DC_CMD_WIN_B_INCR_SYNCPT_CNTRL_0_WRITE_MASK                     _MK_MASK_CONST(0x101)
// If NO_STALL is 1, then when fifos are full,
// INCR_SYNCPT methods will be dropped and the
// INCR_SYNCPT_ERROR[COND] bit will be set.
// If NO_STALL is 0, then when fifos are full,
// the client host interface will be stalled.
#define DC_CMD_WIN_B_INCR_SYNCPT_CNTRL_0_WIN_B_INCR_SYNCPT_NO_STALL_SHIFT                       _MK_SHIFT_CONST(8)
#define DC_CMD_WIN_B_INCR_SYNCPT_CNTRL_0_WIN_B_INCR_SYNCPT_NO_STALL_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_WIN_B_INCR_SYNCPT_CNTRL_0_WIN_B_INCR_SYNCPT_NO_STALL_SHIFT)
#define DC_CMD_WIN_B_INCR_SYNCPT_CNTRL_0_WIN_B_INCR_SYNCPT_NO_STALL_RANGE                       8:8
#define DC_CMD_WIN_B_INCR_SYNCPT_CNTRL_0_WIN_B_INCR_SYNCPT_NO_STALL_WOFFSET                     0x0
#define DC_CMD_WIN_B_INCR_SYNCPT_CNTRL_0_WIN_B_INCR_SYNCPT_NO_STALL_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_B_INCR_SYNCPT_CNTRL_0_WIN_B_INCR_SYNCPT_NO_STALL_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_WIN_B_INCR_SYNCPT_CNTRL_0_WIN_B_INCR_SYNCPT_NO_STALL_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_B_INCR_SYNCPT_CNTRL_0_WIN_B_INCR_SYNCPT_NO_STALL_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// If SOFT_RESET is set, then all internal state
// of the client syncpt block will be reset.
// To do soft reset, first set SOFT_RESET of
// all host1x clients affected, then clear all
// SOFT_RESETs.
#define DC_CMD_WIN_B_INCR_SYNCPT_CNTRL_0_WIN_B_INCR_SYNCPT_SOFT_RESET_SHIFT                     _MK_SHIFT_CONST(0)
#define DC_CMD_WIN_B_INCR_SYNCPT_CNTRL_0_WIN_B_INCR_SYNCPT_SOFT_RESET_FIELD                     (_MK_MASK_CONST(0x1) << DC_CMD_WIN_B_INCR_SYNCPT_CNTRL_0_WIN_B_INCR_SYNCPT_SOFT_RESET_SHIFT)
#define DC_CMD_WIN_B_INCR_SYNCPT_CNTRL_0_WIN_B_INCR_SYNCPT_SOFT_RESET_RANGE                     0:0
#define DC_CMD_WIN_B_INCR_SYNCPT_CNTRL_0_WIN_B_INCR_SYNCPT_SOFT_RESET_WOFFSET                   0x0
#define DC_CMD_WIN_B_INCR_SYNCPT_CNTRL_0_WIN_B_INCR_SYNCPT_SOFT_RESET_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_B_INCR_SYNCPT_CNTRL_0_WIN_B_INCR_SYNCPT_SOFT_RESET_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_CMD_WIN_B_INCR_SYNCPT_CNTRL_0_WIN_B_INCR_SYNCPT_SOFT_RESET_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_B_INCR_SYNCPT_CNTRL_0_WIN_B_INCR_SYNCPT_SOFT_RESET_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register DC_CMD_WIN_B_INCR_SYNCPT_ERROR_0  
#define DC_CMD_WIN_B_INCR_SYNCPT_ERROR_0                        _MK_ADDR_CONST(0x12)
#define DC_CMD_WIN_B_INCR_SYNCPT_ERROR_0_SECURE                         0x0
#define DC_CMD_WIN_B_INCR_SYNCPT_ERROR_0_WORD_COUNT                     0x1
#define DC_CMD_WIN_B_INCR_SYNCPT_ERROR_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_B_INCR_SYNCPT_ERROR_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_B_INCR_SYNCPT_ERROR_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_B_INCR_SYNCPT_ERROR_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_B_INCR_SYNCPT_ERROR_0_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define DC_CMD_WIN_B_INCR_SYNCPT_ERROR_0_WRITE_MASK                     _MK_MASK_CONST(0xffffffff)
// COND_STATUS[COND] is set if the fifo for COND overflows.
// This bit is sticky and will remain set until cleared.
// Cleared by writing 1.
#define DC_CMD_WIN_B_INCR_SYNCPT_ERROR_0_WIN_B_COND_STATUS_SHIFT                        _MK_SHIFT_CONST(0)
#define DC_CMD_WIN_B_INCR_SYNCPT_ERROR_0_WIN_B_COND_STATUS_FIELD                        (_MK_MASK_CONST(0xffffffff) << DC_CMD_WIN_B_INCR_SYNCPT_ERROR_0_WIN_B_COND_STATUS_SHIFT)
#define DC_CMD_WIN_B_INCR_SYNCPT_ERROR_0_WIN_B_COND_STATUS_RANGE                        31:0
#define DC_CMD_WIN_B_INCR_SYNCPT_ERROR_0_WIN_B_COND_STATUS_WOFFSET                      0x0
#define DC_CMD_WIN_B_INCR_SYNCPT_ERROR_0_WIN_B_COND_STATUS_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_B_INCR_SYNCPT_ERROR_0_WIN_B_COND_STATUS_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_B_INCR_SYNCPT_ERROR_0_WIN_B_COND_STATUS_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_B_INCR_SYNCPT_ERROR_0_WIN_B_COND_STATUS_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// reserve locations for future expansion

// Reserved address 19 [0x13] 

// Reserved address 20 [0x14] 

// Reserved address 21 [0x15] 

// Reserved address 22 [0x16] 

// Reserved address 23 [0x17] 
// just in case names were redefined using macros
#define NV_DISPLAY_WIN_C_INCR_SYNCPT_NB_CONDS   4
// --------------------------------------------------------------------------
// 
// Copyright (c) 2004, NVIDIA Corp.
// All Rights Reserved.
// 
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
// 
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
// 
// --------------------------------------------------------------------------
// 

// Register DC_CMD_WIN_C_INCR_SYNCPT_0  
#define DC_CMD_WIN_C_INCR_SYNCPT_0                      _MK_ADDR_CONST(0x18)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_SECURE                       0x0
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WORD_COUNT                   0x1
#define DC_CMD_WIN_C_INCR_SYNCPT_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_RESET_MASK                   _MK_MASK_CONST(0xffff)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_READ_MASK                    _MK_MASK_CONST(0xffff)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WRITE_MASK                   _MK_MASK_CONST(0xffff)
// Condition mapped from raise/wait
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_COND_SHIFT                     _MK_SHIFT_CONST(8)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_COND_FIELD                     (_MK_MASK_CONST(0xff) << DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_COND_SHIFT)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_COND_RANGE                     15:8
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_COND_WOFFSET                   0x0
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_COND_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_COND_DEFAULT_MASK                      _MK_MASK_CONST(0xff)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_COND_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_COND_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_COND_IMMEDIATE                 _MK_ENUM_CONST(0)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_COND_OP_DONE                   _MK_ENUM_CONST(1)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_COND_RD_DONE                   _MK_ENUM_CONST(2)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_COND_REG_WR_SAFE                       _MK_ENUM_CONST(3)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_COND_COND_4                    _MK_ENUM_CONST(4)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_COND_COND_5                    _MK_ENUM_CONST(5)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_COND_COND_6                    _MK_ENUM_CONST(6)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_COND_COND_7                    _MK_ENUM_CONST(7)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_COND_COND_8                    _MK_ENUM_CONST(8)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_COND_COND_9                    _MK_ENUM_CONST(9)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_COND_COND_10                   _MK_ENUM_CONST(10)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_COND_COND_11                   _MK_ENUM_CONST(11)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_COND_COND_12                   _MK_ENUM_CONST(12)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_COND_COND_13                   _MK_ENUM_CONST(13)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_COND_COND_14                   _MK_ENUM_CONST(14)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_COND_COND_15                   _MK_ENUM_CONST(15)

// syncpt index value
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_INDX_SHIFT                     _MK_SHIFT_CONST(0)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_INDX_FIELD                     (_MK_MASK_CONST(0xff) << DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_INDX_SHIFT)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_INDX_RANGE                     7:0
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_INDX_WOFFSET                   0x0
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_INDX_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_INDX_DEFAULT_MASK                      _MK_MASK_CONST(0xff)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_INDX_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_C_INCR_SYNCPT_0_WIN_C_INDX_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register DC_CMD_WIN_C_INCR_SYNCPT_CNTRL_0  
#define DC_CMD_WIN_C_INCR_SYNCPT_CNTRL_0                        _MK_ADDR_CONST(0x19)
#define DC_CMD_WIN_C_INCR_SYNCPT_CNTRL_0_SECURE                         0x0
#define DC_CMD_WIN_C_INCR_SYNCPT_CNTRL_0_WORD_COUNT                     0x1
#define DC_CMD_WIN_C_INCR_SYNCPT_CNTRL_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_C_INCR_SYNCPT_CNTRL_0_RESET_MASK                     _MK_MASK_CONST(0x101)
#define DC_CMD_WIN_C_INCR_SYNCPT_CNTRL_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_C_INCR_SYNCPT_CNTRL_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_C_INCR_SYNCPT_CNTRL_0_READ_MASK                      _MK_MASK_CONST(0x101)
#define DC_CMD_WIN_C_INCR_SYNCPT_CNTRL_0_WRITE_MASK                     _MK_MASK_CONST(0x101)
// If NO_STALL is 1, then when fifos are full,
// INCR_SYNCPT methods will be dropped and the
// INCR_SYNCPT_ERROR[COND] bit will be set.
// If NO_STALL is 0, then when fifos are full,
// the client host interface will be stalled.
#define DC_CMD_WIN_C_INCR_SYNCPT_CNTRL_0_WIN_C_INCR_SYNCPT_NO_STALL_SHIFT                       _MK_SHIFT_CONST(8)
#define DC_CMD_WIN_C_INCR_SYNCPT_CNTRL_0_WIN_C_INCR_SYNCPT_NO_STALL_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_WIN_C_INCR_SYNCPT_CNTRL_0_WIN_C_INCR_SYNCPT_NO_STALL_SHIFT)
#define DC_CMD_WIN_C_INCR_SYNCPT_CNTRL_0_WIN_C_INCR_SYNCPT_NO_STALL_RANGE                       8:8
#define DC_CMD_WIN_C_INCR_SYNCPT_CNTRL_0_WIN_C_INCR_SYNCPT_NO_STALL_WOFFSET                     0x0
#define DC_CMD_WIN_C_INCR_SYNCPT_CNTRL_0_WIN_C_INCR_SYNCPT_NO_STALL_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_C_INCR_SYNCPT_CNTRL_0_WIN_C_INCR_SYNCPT_NO_STALL_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_WIN_C_INCR_SYNCPT_CNTRL_0_WIN_C_INCR_SYNCPT_NO_STALL_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_C_INCR_SYNCPT_CNTRL_0_WIN_C_INCR_SYNCPT_NO_STALL_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// If SOFT_RESET is set, then all internal state
// of the client syncpt block will be reset.
// To do soft reset, first set SOFT_RESET of
// all host1x clients affected, then clear all
// SOFT_RESETs.
#define DC_CMD_WIN_C_INCR_SYNCPT_CNTRL_0_WIN_C_INCR_SYNCPT_SOFT_RESET_SHIFT                     _MK_SHIFT_CONST(0)
#define DC_CMD_WIN_C_INCR_SYNCPT_CNTRL_0_WIN_C_INCR_SYNCPT_SOFT_RESET_FIELD                     (_MK_MASK_CONST(0x1) << DC_CMD_WIN_C_INCR_SYNCPT_CNTRL_0_WIN_C_INCR_SYNCPT_SOFT_RESET_SHIFT)
#define DC_CMD_WIN_C_INCR_SYNCPT_CNTRL_0_WIN_C_INCR_SYNCPT_SOFT_RESET_RANGE                     0:0
#define DC_CMD_WIN_C_INCR_SYNCPT_CNTRL_0_WIN_C_INCR_SYNCPT_SOFT_RESET_WOFFSET                   0x0
#define DC_CMD_WIN_C_INCR_SYNCPT_CNTRL_0_WIN_C_INCR_SYNCPT_SOFT_RESET_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_C_INCR_SYNCPT_CNTRL_0_WIN_C_INCR_SYNCPT_SOFT_RESET_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_CMD_WIN_C_INCR_SYNCPT_CNTRL_0_WIN_C_INCR_SYNCPT_SOFT_RESET_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_C_INCR_SYNCPT_CNTRL_0_WIN_C_INCR_SYNCPT_SOFT_RESET_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register DC_CMD_WIN_C_INCR_SYNCPT_ERROR_0  
#define DC_CMD_WIN_C_INCR_SYNCPT_ERROR_0                        _MK_ADDR_CONST(0x1a)
#define DC_CMD_WIN_C_INCR_SYNCPT_ERROR_0_SECURE                         0x0
#define DC_CMD_WIN_C_INCR_SYNCPT_ERROR_0_WORD_COUNT                     0x1
#define DC_CMD_WIN_C_INCR_SYNCPT_ERROR_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_C_INCR_SYNCPT_ERROR_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_C_INCR_SYNCPT_ERROR_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_C_INCR_SYNCPT_ERROR_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_C_INCR_SYNCPT_ERROR_0_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define DC_CMD_WIN_C_INCR_SYNCPT_ERROR_0_WRITE_MASK                     _MK_MASK_CONST(0xffffffff)
// COND_STATUS[COND] is set if the fifo for COND overflows.
// This bit is sticky and will remain set until cleared.
// Cleared by writing 1.
#define DC_CMD_WIN_C_INCR_SYNCPT_ERROR_0_WIN_C_COND_STATUS_SHIFT                        _MK_SHIFT_CONST(0)
#define DC_CMD_WIN_C_INCR_SYNCPT_ERROR_0_WIN_C_COND_STATUS_FIELD                        (_MK_MASK_CONST(0xffffffff) << DC_CMD_WIN_C_INCR_SYNCPT_ERROR_0_WIN_C_COND_STATUS_SHIFT)
#define DC_CMD_WIN_C_INCR_SYNCPT_ERROR_0_WIN_C_COND_STATUS_RANGE                        31:0
#define DC_CMD_WIN_C_INCR_SYNCPT_ERROR_0_WIN_C_COND_STATUS_WOFFSET                      0x0
#define DC_CMD_WIN_C_INCR_SYNCPT_ERROR_0_WIN_C_COND_STATUS_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_C_INCR_SYNCPT_ERROR_0_WIN_C_COND_STATUS_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_C_INCR_SYNCPT_ERROR_0_WIN_C_COND_STATUS_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_WIN_C_INCR_SYNCPT_ERROR_0_WIN_C_COND_STATUS_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// reserve locations for future expansion

// Reserved address 27 [0x1b] 

// Reserved address 28 [0x1c] 

// Reserved address 29 [0x1d] 

// Reserved address 30 [0x1e] 

// Reserved address 31 [0x1f] 
// just in case names were redefined using macros

// Reserved address 32 [0x20] 

// Reserved address 34 [0x22] 

// Reserved address 36 [0x24] 

// Reserved address 38 [0x26] 

// Register DC_CMD_CONT_SYNCPT_VSYNC_0  
#define DC_CMD_CONT_SYNCPT_VSYNC_0                      _MK_ADDR_CONST(0x28)
#define DC_CMD_CONT_SYNCPT_VSYNC_0_SECURE                       0x0
#define DC_CMD_CONT_SYNCPT_VSYNC_0_WORD_COUNT                   0x1
#define DC_CMD_CONT_SYNCPT_VSYNC_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define DC_CMD_CONT_SYNCPT_VSYNC_0_RESET_MASK                   _MK_MASK_CONST(0x100)
#define DC_CMD_CONT_SYNCPT_VSYNC_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_CMD_CONT_SYNCPT_VSYNC_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_CMD_CONT_SYNCPT_VSYNC_0_READ_MASK                    _MK_MASK_CONST(0x1ff)
#define DC_CMD_CONT_SYNCPT_VSYNC_0_WRITE_MASK                   _MK_MASK_CONST(0x1ff)
// return INDX (set HOST_CLRD packet TYPE field to SYNCPT)
#define DC_CMD_CONT_SYNCPT_VSYNC_0_VSYNC_INDX_SHIFT                     _MK_SHIFT_CONST(0)
#define DC_CMD_CONT_SYNCPT_VSYNC_0_VSYNC_INDX_FIELD                     (_MK_MASK_CONST(0xff) << DC_CMD_CONT_SYNCPT_VSYNC_0_VSYNC_INDX_SHIFT)
#define DC_CMD_CONT_SYNCPT_VSYNC_0_VSYNC_INDX_RANGE                     7:0
#define DC_CMD_CONT_SYNCPT_VSYNC_0_VSYNC_INDX_WOFFSET                   0x0
#define DC_CMD_CONT_SYNCPT_VSYNC_0_VSYNC_INDX_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_CONT_SYNCPT_VSYNC_0_VSYNC_INDX_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_CMD_CONT_SYNCPT_VSYNC_0_VSYNC_INDX_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_CMD_CONT_SYNCPT_VSYNC_0_VSYNC_INDX_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// on host read bus every time VSYNC (V-blank leading edge) happens  and VSYNC_EN is set
#define DC_CMD_CONT_SYNCPT_VSYNC_0_VSYNC_EN_SHIFT                       _MK_SHIFT_CONST(8)
#define DC_CMD_CONT_SYNCPT_VSYNC_0_VSYNC_EN_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_CONT_SYNCPT_VSYNC_0_VSYNC_EN_SHIFT)
#define DC_CMD_CONT_SYNCPT_VSYNC_0_VSYNC_EN_RANGE                       8:8
#define DC_CMD_CONT_SYNCPT_VSYNC_0_VSYNC_EN_WOFFSET                     0x0
#define DC_CMD_CONT_SYNCPT_VSYNC_0_VSYNC_EN_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_CONT_SYNCPT_VSYNC_0_VSYNC_EN_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_CONT_SYNCPT_VSYNC_0_VSYNC_EN_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_CONT_SYNCPT_VSYNC_0_VSYNC_EN_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_CONT_SYNCPT_VSYNC_0_VSYNC_EN_DISABLE                     _MK_ENUM_CONST(0)
#define DC_CMD_CONT_SYNCPT_VSYNC_0_VSYNC_EN_ENABLE                      _MK_ENUM_CONST(1)

// reserved for future MC expansion
//Context switch registers for class and channel
// Context switch register.  Should be common to all modules.  Includes the
// current channel/class (which is writable by SW) and the next channel/class
// (which the hardware sets when it receives a context switch).
// Context switch works like this:
// Any context switch request triggers an interrupt to the host and causes the
// new channel/class to be stored in NEXT_CHANNEL/NEXT_CLASS (see
// vmod/chexample).  SW sees that there is a context switch interrupt and does
// the necessary operations to make the module ready to receive traffic from
// the new context.  It clears the context switch interrupt and writes
// CURR_CHANNEL/CLASS to the same value as NEXT_CHANNEL/CLASS, which causes a
// context switch acknowledge packet to be sent to the host.  This completes
// the context switch and allows the host to continue sending data to the
// module.
// Context switches can also be pre-loaded.  If CURR_CLASS/CHANNEL are written
// and updated to the next CLASS/CHANNEL before the context switch request
// occurs, an acknowledge will be generated by the module and no interrupt will
// be triggered.  This is one way for software to avoid dealing with context
// switch interrupts.
// Another way to avoid context switch interrupts is to set the AUTO_ACK bit.
// This bit tells the module to automatically acknowledge any incoming context
// switch requests without triggering an interrupt.  CURR_* and NEXT_* will be
// updated by the module so they will always be current.

// Register DC_CMD_CTXSW_0  
#define DC_CMD_CTXSW_0                  _MK_ADDR_CONST(0x30)
#define DC_CMD_CTXSW_0_SECURE                   0x0
#define DC_CMD_CTXSW_0_WORD_COUNT                       0x1
#define DC_CMD_CTXSW_0_RESET_VAL                        _MK_MASK_CONST(0xf000f800)
#define DC_CMD_CTXSW_0_RESET_MASK                       _MK_MASK_CONST(0xf3fffbff)
#define DC_CMD_CTXSW_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define DC_CMD_CTXSW_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_CMD_CTXSW_0_READ_MASK                        _MK_MASK_CONST(0xf3fffbff)
#define DC_CMD_CTXSW_0_WRITE_MASK                       _MK_MASK_CONST(0xfbff)
// Current working class
#define DC_CMD_CTXSW_0_CURR_CLASS_SHIFT                 _MK_SHIFT_CONST(0)
#define DC_CMD_CTXSW_0_CURR_CLASS_FIELD                 (_MK_MASK_CONST(0x3ff) << DC_CMD_CTXSW_0_CURR_CLASS_SHIFT)
#define DC_CMD_CTXSW_0_CURR_CLASS_RANGE                 9:0
#define DC_CMD_CTXSW_0_CURR_CLASS_WOFFSET                       0x0
#define DC_CMD_CTXSW_0_CURR_CLASS_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_CTXSW_0_CURR_CLASS_DEFAULT_MASK                  _MK_MASK_CONST(0x3ff)
#define DC_CMD_CTXSW_0_CURR_CLASS_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_CTXSW_0_CURR_CLASS_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Automatically acknowledge any incoming context switch requests
#define DC_CMD_CTXSW_0_AUTO_ACK_SHIFT                   _MK_SHIFT_CONST(11)
#define DC_CMD_CTXSW_0_AUTO_ACK_FIELD                   (_MK_MASK_CONST(0x1) << DC_CMD_CTXSW_0_AUTO_ACK_SHIFT)
#define DC_CMD_CTXSW_0_AUTO_ACK_RANGE                   11:11
#define DC_CMD_CTXSW_0_AUTO_ACK_WOFFSET                 0x0
#define DC_CMD_CTXSW_0_AUTO_ACK_DEFAULT                 _MK_MASK_CONST(0x1)
#define DC_CMD_CTXSW_0_AUTO_ACK_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_CMD_CTXSW_0_AUTO_ACK_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_CTXSW_0_AUTO_ACK_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_CMD_CTXSW_0_AUTO_ACK_MANUAL                  _MK_ENUM_CONST(0)
#define DC_CMD_CTXSW_0_AUTO_ACK_AUTOACK                 _MK_ENUM_CONST(1)

// Current working channel, reset to 'invalid'
#define DC_CMD_CTXSW_0_CURR_CHANNEL_SHIFT                       _MK_SHIFT_CONST(12)
#define DC_CMD_CTXSW_0_CURR_CHANNEL_FIELD                       (_MK_MASK_CONST(0xf) << DC_CMD_CTXSW_0_CURR_CHANNEL_SHIFT)
#define DC_CMD_CTXSW_0_CURR_CHANNEL_RANGE                       15:12
#define DC_CMD_CTXSW_0_CURR_CHANNEL_WOFFSET                     0x0
#define DC_CMD_CTXSW_0_CURR_CHANNEL_DEFAULT                     _MK_MASK_CONST(0xf)
#define DC_CMD_CTXSW_0_CURR_CHANNEL_DEFAULT_MASK                        _MK_MASK_CONST(0xf)
#define DC_CMD_CTXSW_0_CURR_CHANNEL_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_CTXSW_0_CURR_CHANNEL_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Next requested class
#define DC_CMD_CTXSW_0_NEXT_CLASS_SHIFT                 _MK_SHIFT_CONST(16)
#define DC_CMD_CTXSW_0_NEXT_CLASS_FIELD                 (_MK_MASK_CONST(0x3ff) << DC_CMD_CTXSW_0_NEXT_CLASS_SHIFT)
#define DC_CMD_CTXSW_0_NEXT_CLASS_RANGE                 25:16
#define DC_CMD_CTXSW_0_NEXT_CLASS_WOFFSET                       0x0
#define DC_CMD_CTXSW_0_NEXT_CLASS_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_CTXSW_0_NEXT_CLASS_DEFAULT_MASK                  _MK_MASK_CONST(0x3ff)
#define DC_CMD_CTXSW_0_NEXT_CLASS_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_CTXSW_0_NEXT_CLASS_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Next requested channel
#define DC_CMD_CTXSW_0_NEXT_CHANNEL_SHIFT                       _MK_SHIFT_CONST(28)
#define DC_CMD_CTXSW_0_NEXT_CHANNEL_FIELD                       (_MK_MASK_CONST(0xf) << DC_CMD_CTXSW_0_NEXT_CHANNEL_SHIFT)
#define DC_CMD_CTXSW_0_NEXT_CHANNEL_RANGE                       31:28
#define DC_CMD_CTXSW_0_NEXT_CHANNEL_WOFFSET                     0x0
#define DC_CMD_CTXSW_0_NEXT_CHANNEL_DEFAULT                     _MK_MASK_CONST(0xf)
#define DC_CMD_CTXSW_0_NEXT_CHANNEL_DEFAULT_MASK                        _MK_MASK_CONST(0xf)
#define DC_CMD_CTXSW_0_NEXT_CHANNEL_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_CTXSW_0_NEXT_CHANNEL_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//
// Class: Display Command
//

// Register DC_CMD_DISPLAY_COMMAND_OPTION0_0  // Display Controller Option 0
//  This register is not effective until
//  DISPLAY_COMMAND is written.
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0                        _MK_ADDR_CONST(0x31)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SECURE                         0x0
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WORD_COUNT                     0x1
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_RESET_MASK                     _MK_MASK_CONST(0x700ff)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_READ_MASK                      _MK_MASK_CONST(0x700ff)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WRITE_MASK                     _MK_MASK_CONST(0x700ff)
// Main-Display Stop Frame (MSF) Polarity
//   0= Active high
//   1= Active low
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_POLARITY_SHIFT                     _MK_SHIFT_CONST(0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_POLARITY_FIELD                     (_MK_MASK_CONST(0x1) << DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_POLARITY_SHIFT)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_POLARITY_RANGE                     0:0
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_POLARITY_WOFFSET                   0x0
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_POLARITY_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_POLARITY_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_POLARITY_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_POLARITY_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// Main-Display Stop Frame (MSF) input  This is effective only in Non-Continuous
//  Display mode
//   0= Disabled
//   1= Enabled
//  When enabled, MSF signal can be input
//  through LSPI pin. When MSF is enabled a
//  trigger to send a frame in Non-Continuous
//  Display mode will be delayed until MSF is
//  active.
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_ENABLE_SHIFT                       _MK_SHIFT_CONST(1)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_ENABLE_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_ENABLE_SHIFT)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_ENABLE_RANGE                       1:1
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_ENABLE_WOFFSET                     0x0
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_ENABLE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_ENABLE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_ENABLE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_ENABLE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_ENABLE_DISABLE                     _MK_ENUM_CONST(0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_ENABLE_ENABLE                      _MK_ENUM_CONST(1)

// Source pin for the MSF input  Controls which pin will be used as the
//  source for the trigger input when MSF
//  mode is enabled. Note that although
//  the same pins are available for both MSF
//  and SSF, the order in the enum and hence
//  the values differs between the pins. This
//  is to maintain backwards compatibilty with
//  previous chips, which had a fixed mapping.
//  The init value and the first value in the
//  enum reflects this historical mapping.
//    0= LCD_SPI pin (legacy default)
//    1= LCD_DC  pin
//    2= LCD_SDI pin
//    3= RESERVED for future use.
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_SOURCE_SHIFT                       _MK_SHIFT_CONST(2)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_SOURCE_FIELD                       (_MK_MASK_CONST(0x3) << DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_SOURCE_SHIFT)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_SOURCE_RANGE                       3:2
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_SOURCE_WOFFSET                     0x0
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_SOURCE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_SOURCE_DEFAULT_MASK                        _MK_MASK_CONST(0x3)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_SOURCE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_SOURCE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_SOURCE_MSF_LSPI                    _MK_ENUM_CONST(0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_SOURCE_MSF_LDC                     _MK_ENUM_CONST(1)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_MSF_SOURCE_MSF_LSDI                    _MK_ENUM_CONST(2)

// Sub-Display Stop Frame (SSF) Polarity
//   0= Active high
//   1= Active low
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_POLARITY_SHIFT                     _MK_SHIFT_CONST(4)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_POLARITY_FIELD                     (_MK_MASK_CONST(0x1) << DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_POLARITY_SHIFT)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_POLARITY_RANGE                     4:4
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_POLARITY_WOFFSET                   0x0
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_POLARITY_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_POLARITY_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_POLARITY_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_POLARITY_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// Sub-Display Stop Frame (SSF) input  This is effective only in Non-Continuous
//  Display mode
//   0= Disabled
//   1= Enabled
//  When enabled, SSF signal can be input
//  through LDC pin. When SSF is enabled a
//  trigger to send a frame in Non-Continuous
//  Display mode will be delayed until SSF is
//  active.
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_ENABLE_SHIFT                       _MK_SHIFT_CONST(5)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_ENABLE_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_ENABLE_SHIFT)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_ENABLE_RANGE                       5:5
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_ENABLE_WOFFSET                     0x0
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_ENABLE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_ENABLE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_ENABLE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_ENABLE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_ENABLE_DISABLE                     _MK_ENUM_CONST(0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_ENABLE_ENABLE                      _MK_ENUM_CONST(1)

// Source pin for the SSF input  Controls which pin will be used as the
//  source for the trigger input when MSF
//  mode is enabled. Note that although
//  the same pins are available for both MSF
//  and SSF, the order in the enum and hence
//  the values differs between the pins. This
//  is to maintain backwards compatibilty with
//  previous chips, which had a fixed mapping.
//  The init value and the first value in the
//  enum reflects this historical mapping.
//    0= LCD_DC  pin (legacy default)
//    1= LCD_SPI pin
//    2= LCD_SDI pin
//    3= RESERVED for future use.
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_SOURCE_SHIFT                       _MK_SHIFT_CONST(6)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_SOURCE_FIELD                       (_MK_MASK_CONST(0x3) << DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_SOURCE_SHIFT)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_SOURCE_RANGE                       7:6
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_SOURCE_WOFFSET                     0x0
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_SOURCE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_SOURCE_DEFAULT_MASK                        _MK_MASK_CONST(0x3)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_SOURCE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_SOURCE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_SOURCE_SSF_LDC                     _MK_ENUM_CONST(0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_SOURCE_SSF_LSPI                    _MK_ENUM_CONST(1)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_SSF_SOURCE_SSF_LSDI                    _MK_ENUM_CONST(2)

// Window A Non-Continous Display  This is effective only in Non-Continuous
//  Display mode when window A buffer switching
//  is not controlled by host. If this bit is
//  enabled, a frame is sent whenever 
//  Window A buffer is switched.
//   0= Disabled
//   1= Enabled
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_A_NC_DISPLAY_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_A_NC_DISPLAY_FIELD                      (_MK_MASK_CONST(0x1) << DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_A_NC_DISPLAY_SHIFT)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_A_NC_DISPLAY_RANGE                      16:16
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_A_NC_DISPLAY_WOFFSET                    0x0
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_A_NC_DISPLAY_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_A_NC_DISPLAY_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_A_NC_DISPLAY_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_A_NC_DISPLAY_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_A_NC_DISPLAY_DISABLE                    _MK_ENUM_CONST(0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_A_NC_DISPLAY_ENABLE                     _MK_ENUM_CONST(1)

// Window B Non-Continous Display  This is effective only in Non-Continuous
//  Display mode when window B buffer switching
//  is not controlled by host. If this bit is
//  enabled, a frame is sent whenever 
//  Window B buffer is switched.
//   0= Disabled
//   1= Enabled
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_B_NC_DISPLAY_SHIFT                      _MK_SHIFT_CONST(17)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_B_NC_DISPLAY_FIELD                      (_MK_MASK_CONST(0x1) << DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_B_NC_DISPLAY_SHIFT)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_B_NC_DISPLAY_RANGE                      17:17
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_B_NC_DISPLAY_WOFFSET                    0x0
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_B_NC_DISPLAY_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_B_NC_DISPLAY_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_B_NC_DISPLAY_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_B_NC_DISPLAY_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_B_NC_DISPLAY_DISABLE                    _MK_ENUM_CONST(0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_B_NC_DISPLAY_ENABLE                     _MK_ENUM_CONST(1)

// Window C Non-Continous Display  This is effective only in Non-Continuous
//  Display mode when window B buffer switching
//  is not controlled by host. If this bit is
//  enabled, a frame is sent whenever 
//  Window B buffer is switched.
//   0= Disabled
//   1= Enabled
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_C_NC_DISPLAY_SHIFT                      _MK_SHIFT_CONST(18)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_C_NC_DISPLAY_FIELD                      (_MK_MASK_CONST(0x1) << DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_C_NC_DISPLAY_SHIFT)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_C_NC_DISPLAY_RANGE                      18:18
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_C_NC_DISPLAY_WOFFSET                    0x0
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_C_NC_DISPLAY_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_C_NC_DISPLAY_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_C_NC_DISPLAY_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_C_NC_DISPLAY_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_C_NC_DISPLAY_DISABLE                    _MK_ENUM_CONST(0)
#define DC_CMD_DISPLAY_COMMAND_OPTION0_0_WINDOW_C_NC_DISPLAY_ENABLE                     _MK_ENUM_CONST(1)


// Register DC_CMD_DISPLAY_COMMAND_0  // Display Command
#define DC_CMD_DISPLAY_COMMAND_0                        _MK_ADDR_CONST(0x32)
#define DC_CMD_DISPLAY_COMMAND_0_SECURE                         0x0
#define DC_CMD_DISPLAY_COMMAND_0_WORD_COUNT                     0x1
#define DC_CMD_DISPLAY_COMMAND_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_0_RESET_MASK                     _MK_MASK_CONST(0x61)
#define DC_CMD_DISPLAY_COMMAND_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_0_READ_MASK                      _MK_MASK_CONST(0x7fc00061)
#define DC_CMD_DISPLAY_COMMAND_0_WRITE_MASK                     _MK_MASK_CONST(0x7fc00061)
// Display Command Raise   0= disable
//   1= enable - raise vector will be returned
//      at the end of command completion
#define DC_CMD_DISPLAY_COMMAND_0_DISP_COMMAND_RAISE_SHIFT                       _MK_SHIFT_CONST(0)
#define DC_CMD_DISPLAY_COMMAND_0_DISP_COMMAND_RAISE_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_DISPLAY_COMMAND_0_DISP_COMMAND_RAISE_SHIFT)
#define DC_CMD_DISPLAY_COMMAND_0_DISP_COMMAND_RAISE_RANGE                       0:0
#define DC_CMD_DISPLAY_COMMAND_0_DISP_COMMAND_RAISE_WOFFSET                     0x0
#define DC_CMD_DISPLAY_COMMAND_0_DISP_COMMAND_RAISE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_0_DISP_COMMAND_RAISE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_DISPLAY_COMMAND_0_DISP_COMMAND_RAISE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_0_DISP_COMMAND_RAISE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_0_DISP_COMMAND_RAISE_DISABLE                     _MK_ENUM_CONST(0)
#define DC_CMD_DISPLAY_COMMAND_0_DISP_COMMAND_RAISE_ENABLE                      _MK_ENUM_CONST(1)

// Display Controller Mode   0= Stop Display, this can be used to
//      stop sending frame at the next
//      frame boundary. This is automatically
//      generated in Non-Continous Display
//      after sending one frame. If this is 
//      issued when display controller is
//      already stopped then there is no frame
//      sent. Raise vector (if raise is enabled)
//      is also returned immediately.
//      This command can also be used in
//      non-continuous display mode to stop
//      accepting non-host trigger conditions
//      from other clients.
//   1= Continuous Display, the display
//      controller will continuously send frame.
//      Continuous display mode can be stopped
//      by switching to Non-Continuous Display
//      or by issuing Stop Display.
//   2= Non-Continuous Display, the display
//      controller is forced to send one frame
//      of each active display and then wait for
//      the next time this command is issued or
//      for other (non-host) trigger conditions
//      to send frame. The sending of frames may
//      be delayed by MSF or SSF input signals
//      from the display device. If a Stop
//      Display is issued while in non-continous
//      display mode then non-host trigger
//      conditions will no longer be accepted
//      until the next time Non-Continuous
//      Display is issued
#define DC_CMD_DISPLAY_COMMAND_0_DISPLAY_CTRL_MODE_SHIFT                        _MK_SHIFT_CONST(5)
#define DC_CMD_DISPLAY_COMMAND_0_DISPLAY_CTRL_MODE_FIELD                        (_MK_MASK_CONST(0x3) << DC_CMD_DISPLAY_COMMAND_0_DISPLAY_CTRL_MODE_SHIFT)
#define DC_CMD_DISPLAY_COMMAND_0_DISPLAY_CTRL_MODE_RANGE                        6:5
#define DC_CMD_DISPLAY_COMMAND_0_DISPLAY_CTRL_MODE_WOFFSET                      0x0
#define DC_CMD_DISPLAY_COMMAND_0_DISPLAY_CTRL_MODE_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_0_DISPLAY_CTRL_MODE_DEFAULT_MASK                 _MK_MASK_CONST(0x3)
#define DC_CMD_DISPLAY_COMMAND_0_DISPLAY_CTRL_MODE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_0_DISPLAY_CTRL_MODE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_0_DISPLAY_CTRL_MODE_STOP                 _MK_ENUM_CONST(0)
#define DC_CMD_DISPLAY_COMMAND_0_DISPLAY_CTRL_MODE_C_DISPLAY                    _MK_ENUM_CONST(1)
#define DC_CMD_DISPLAY_COMMAND_0_DISPLAY_CTRL_MODE_NC_DISPLAY                   _MK_ENUM_CONST(2)

// Display Command Raise Vector
// This raise vector is at the next line or
//  frame boundary, depending on GENERAL_ACT_CNTR_SEL
#define DC_CMD_DISPLAY_COMMAND_0_DISP_COMMAND_RAISE_VECTOR_SHIFT                        _MK_SHIFT_CONST(22)
#define DC_CMD_DISPLAY_COMMAND_0_DISP_COMMAND_RAISE_VECTOR_FIELD                        (_MK_MASK_CONST(0x1f) << DC_CMD_DISPLAY_COMMAND_0_DISP_COMMAND_RAISE_VECTOR_SHIFT)
#define DC_CMD_DISPLAY_COMMAND_0_DISP_COMMAND_RAISE_VECTOR_RANGE                        26:22
#define DC_CMD_DISPLAY_COMMAND_0_DISP_COMMAND_RAISE_VECTOR_WOFFSET                      0x0
#define DC_CMD_DISPLAY_COMMAND_0_DISP_COMMAND_RAISE_VECTOR_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_0_DISP_COMMAND_RAISE_VECTOR_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_0_DISP_COMMAND_RAISE_VECTOR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_0_DISP_COMMAND_RAISE_VECTOR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Display Command Channel ID
#define DC_CMD_DISPLAY_COMMAND_0_DISP_COMMAND_RAISE_CHANNEL_ID_SHIFT                    _MK_SHIFT_CONST(27)
#define DC_CMD_DISPLAY_COMMAND_0_DISP_COMMAND_RAISE_CHANNEL_ID_FIELD                    (_MK_MASK_CONST(0xf) << DC_CMD_DISPLAY_COMMAND_0_DISP_COMMAND_RAISE_CHANNEL_ID_SHIFT)
#define DC_CMD_DISPLAY_COMMAND_0_DISP_COMMAND_RAISE_CHANNEL_ID_RANGE                    30:27
#define DC_CMD_DISPLAY_COMMAND_0_DISP_COMMAND_RAISE_CHANNEL_ID_WOFFSET                  0x0
#define DC_CMD_DISPLAY_COMMAND_0_DISP_COMMAND_RAISE_CHANNEL_ID_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_0_DISP_COMMAND_RAISE_CHANNEL_ID_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_0_DISP_COMMAND_RAISE_CHANNEL_ID_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_COMMAND_0_DISP_COMMAND_RAISE_CHANNEL_ID_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// When written, next occurance of the selected SIGNAL will cause a RAISE to be sent to the
// host.  Software must not write this register if a previous request (from previous write) is
// still outstanding. Added SIGNAL_RAISE_TYPE option so that multiple raises can be returned
// without software intervention. SIGNAL_RAISE1, SIGNAL_RAISE2, or SIGNAL_RAISE3 can be used
// if more than one source signal is needed. 

// Register DC_CMD_SIGNAL_RAISE_0  
#define DC_CMD_SIGNAL_RAISE_0                   _MK_ADDR_CONST(0x33)
#define DC_CMD_SIGNAL_RAISE_0_SECURE                    0x0
#define DC_CMD_SIGNAL_RAISE_0_WORD_COUNT                        0x1
#define DC_CMD_SIGNAL_RAISE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE_0_RESET_MASK                        _MK_MASK_CONST(0x1000)
#define DC_CMD_SIGNAL_RAISE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE_0_READ_MASK                         _MK_MASK_CONST(0xf171f)
#define DC_CMD_SIGNAL_RAISE_0_WRITE_MASK                        _MK_MASK_CONST(0xf171f)
// bit number to raise
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_VECTOR_SHIFT                 _MK_SHIFT_CONST(0)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_VECTOR_FIELD                 (_MK_MASK_CONST(0x1f) << DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_VECTOR_SHIFT)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_VECTOR_RANGE                 4:0
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_VECTOR_WOFFSET                       0x0
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_VECTOR_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_VECTOR_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_VECTOR_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_VECTOR_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// which signal to raise on   0= none, no raise sent back
//   1= Frame End signal
//   2= V Blank signal
//   3= V Pulse 3 signal
//   4= Rising edge of V Blank signal
//   5= Falling edge of V Blank signal
//   6= Rising edge of V Pulse 3 signal
//   7= Falling edge of V Pulse 3 signal
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_SELECT_SHIFT                 _MK_SHIFT_CONST(8)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_SELECT_FIELD                 (_MK_MASK_CONST(0x7) << DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_SELECT_SHIFT)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_SELECT_RANGE                 10:8
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_SELECT_WOFFSET                       0x0
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_SELECT_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_SELECT_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_SELECT_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_SELECT_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_SELECT_NONE                  _MK_ENUM_CONST(0)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_SELECT_FRAME_END                     _MK_ENUM_CONST(1)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_SELECT_VBLANK                        _MK_ENUM_CONST(2)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_SELECT_VPULSE3                       _MK_ENUM_CONST(3)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_SELECT_VBLANK_START                  _MK_ENUM_CONST(4)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_SELECT_VBLANK_END                    _MK_ENUM_CONST(5)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_SELECT_VPULSE3_START                 _MK_ENUM_CONST(6)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_SELECT_VPULSE3_END                   _MK_ENUM_CONST(7)

//   0= Oneshot, single raise returned   1= Continuous, raise is returned 
//      persistently whenever raise event is 
//      true until this register is reprogrammed
//      such that SIGNAL_RAISE_SELECT=NONE or
//      SIGNAL_RAISE_TYPE=ONESHOT
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_TYPE_SHIFT                   _MK_SHIFT_CONST(12)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_TYPE_FIELD                   (_MK_MASK_CONST(0x1) << DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_TYPE_SHIFT)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_TYPE_RANGE                   12:12
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_TYPE_WOFFSET                 0x0
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_TYPE_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_TYPE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_TYPE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_TYPE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_TYPE_ONESHOT                 _MK_ENUM_CONST(0)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_TYPE_CONT                    _MK_ENUM_CONST(1)

// Signal Raise Channel ID
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_CHANNEL_ID_SHIFT                     _MK_SHIFT_CONST(16)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_CHANNEL_ID_FIELD                     (_MK_MASK_CONST(0xf) << DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_CHANNEL_ID_SHIFT)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_CHANNEL_ID_RANGE                     19:16
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_CHANNEL_ID_WOFFSET                   0x0
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_CHANNEL_ID_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_CHANNEL_ID_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_CHANNEL_ID_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE_0_SIGNAL_RAISE_CHANNEL_ID_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Reserved address 52 [0x34] 
// Display Power Control

// Register DC_CMD_DISPLAY_POWER_CONTROL_0  // Display Power Control
#define DC_CMD_DISPLAY_POWER_CONTROL_0                  _MK_ADDR_CONST(0x36)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_SECURE                   0x0
#define DC_CMD_DISPLAY_POWER_CONTROL_0_WORD_COUNT                       0x1
#define DC_CMD_DISPLAY_POWER_CONTROL_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_RESET_MASK                       _MK_MASK_CONST(0x3050155)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_READ_MASK                        _MK_MASK_CONST(0x3050155)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_WRITE_MASK                       _MK_MASK_CONST(0x3050155)
// PW0 signal Enable   0= disable
//   1= enable
//  This signal controls the display H and V
//  counters. It must be enabled first and disabled
//  last during display power sequencing.
//  This signal can be output at the pad for
//  display power sequencing.
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW0_ENABLE_SHIFT                 _MK_SHIFT_CONST(0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW0_ENABLE_FIELD                 (_MK_MASK_CONST(0x1) << DC_CMD_DISPLAY_POWER_CONTROL_0_PW0_ENABLE_SHIFT)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW0_ENABLE_RANGE                 0:0
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW0_ENABLE_WOFFSET                       0x0
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW0_ENABLE_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW0_ENABLE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW0_ENABLE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW0_ENABLE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW0_ENABLE_DISABLE                       _MK_ENUM_CONST(0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW0_ENABLE_ENABLE                        _MK_ENUM_CONST(1)

// PW1 signal Enable   0= disable
//   1= enable
//  This signal can be output at the pad for
//  display power sequencing.
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW1_ENABLE_SHIFT                 _MK_SHIFT_CONST(2)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW1_ENABLE_FIELD                 (_MK_MASK_CONST(0x1) << DC_CMD_DISPLAY_POWER_CONTROL_0_PW1_ENABLE_SHIFT)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW1_ENABLE_RANGE                 2:2
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW1_ENABLE_WOFFSET                       0x0
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW1_ENABLE_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW1_ENABLE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW1_ENABLE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW1_ENABLE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW1_ENABLE_DISABLE                       _MK_ENUM_CONST(0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW1_ENABLE_ENABLE                        _MK_ENUM_CONST(1)

// PW2 signal Enable   0= disable
//   1= enable
//  This signal controls pixel data processing.
//  It should be enabled during V blank time.
//  This signal also controls the time when pin
//  polarity takes effect at the pad.
//  This signal can be output at the pad for
//  display power sequencing.
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW2_ENABLE_SHIFT                 _MK_SHIFT_CONST(4)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW2_ENABLE_FIELD                 (_MK_MASK_CONST(0x1) << DC_CMD_DISPLAY_POWER_CONTROL_0_PW2_ENABLE_SHIFT)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW2_ENABLE_RANGE                 4:4
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW2_ENABLE_WOFFSET                       0x0
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW2_ENABLE_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW2_ENABLE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW2_ENABLE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW2_ENABLE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW2_ENABLE_DISABLE                       _MK_ENUM_CONST(0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW2_ENABLE_ENABLE                        _MK_ENUM_CONST(1)

// PW3 signal Enable   0= disable
//   1= enable
//  This signal can be output at the pad for
//  display power sequencing.
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW3_ENABLE_SHIFT                 _MK_SHIFT_CONST(6)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW3_ENABLE_FIELD                 (_MK_MASK_CONST(0x1) << DC_CMD_DISPLAY_POWER_CONTROL_0_PW3_ENABLE_SHIFT)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW3_ENABLE_RANGE                 6:6
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW3_ENABLE_WOFFSET                       0x0
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW3_ENABLE_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW3_ENABLE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW3_ENABLE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW3_ENABLE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW3_ENABLE_DISABLE                       _MK_ENUM_CONST(0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW3_ENABLE_ENABLE                        _MK_ENUM_CONST(1)

// PW4 signal Enable   0= disable
//   1= enable
//  This signal can be output at the pad for
//  display power sequencing.
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW4_ENABLE_SHIFT                 _MK_SHIFT_CONST(8)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW4_ENABLE_FIELD                 (_MK_MASK_CONST(0x1) << DC_CMD_DISPLAY_POWER_CONTROL_0_PW4_ENABLE_SHIFT)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW4_ENABLE_RANGE                 8:8
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW4_ENABLE_WOFFSET                       0x0
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW4_ENABLE_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW4_ENABLE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW4_ENABLE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW4_ENABLE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW4_ENABLE_DISABLE                       _MK_ENUM_CONST(0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PW4_ENABLE_ENABLE                        _MK_ENUM_CONST(1)

// PM0 signal Enable   0= disable
//   1= enable
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PM0_ENABLE_SHIFT                 _MK_SHIFT_CONST(16)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PM0_ENABLE_FIELD                 (_MK_MASK_CONST(0x1) << DC_CMD_DISPLAY_POWER_CONTROL_0_PM0_ENABLE_SHIFT)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PM0_ENABLE_RANGE                 16:16
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PM0_ENABLE_WOFFSET                       0x0
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PM0_ENABLE_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PM0_ENABLE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PM0_ENABLE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PM0_ENABLE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PM0_ENABLE_DISABLE                       _MK_ENUM_CONST(0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PM0_ENABLE_ENABLE                        _MK_ENUM_CONST(1)

// PM1 signal Enable   0= disable
//   1= enable
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PM1_ENABLE_SHIFT                 _MK_SHIFT_CONST(18)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PM1_ENABLE_FIELD                 (_MK_MASK_CONST(0x1) << DC_CMD_DISPLAY_POWER_CONTROL_0_PM1_ENABLE_SHIFT)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PM1_ENABLE_RANGE                 18:18
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PM1_ENABLE_WOFFSET                       0x0
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PM1_ENABLE_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PM1_ENABLE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PM1_ENABLE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PM1_ENABLE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PM1_ENABLE_DISABLE                       _MK_ENUM_CONST(0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_PM1_ENABLE_ENABLE                        _MK_ENUM_CONST(1)

// SPI interface Enable   0= disable
//   1= enable - this enables clock to SPI
//      interface logic for Host SPI, IS SPI,
//      and LCD SPI.
#define DC_CMD_DISPLAY_POWER_CONTROL_0_SPI_ENABLE_SHIFT                 _MK_SHIFT_CONST(24)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_SPI_ENABLE_FIELD                 (_MK_MASK_CONST(0x1) << DC_CMD_DISPLAY_POWER_CONTROL_0_SPI_ENABLE_SHIFT)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_SPI_ENABLE_RANGE                 24:24
#define DC_CMD_DISPLAY_POWER_CONTROL_0_SPI_ENABLE_WOFFSET                       0x0
#define DC_CMD_DISPLAY_POWER_CONTROL_0_SPI_ENABLE_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_SPI_ENABLE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_SPI_ENABLE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_SPI_ENABLE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_SPI_ENABLE_DISABLE                       _MK_ENUM_CONST(0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_SPI_ENABLE_ENABLE                        _MK_ENUM_CONST(1)

// Host SPI write cycle Enable   0= disable
//   1= enable
//  SPI_ENABLE must be enabled also for this
//  bit to be effective.
#define DC_CMD_DISPLAY_POWER_CONTROL_0_HSPI_ENABLE_SHIFT                        _MK_SHIFT_CONST(25)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_HSPI_ENABLE_FIELD                        (_MK_MASK_CONST(0x1) << DC_CMD_DISPLAY_POWER_CONTROL_0_HSPI_ENABLE_SHIFT)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_HSPI_ENABLE_RANGE                        25:25
#define DC_CMD_DISPLAY_POWER_CONTROL_0_HSPI_ENABLE_WOFFSET                      0x0
#define DC_CMD_DISPLAY_POWER_CONTROL_0_HSPI_ENABLE_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_HSPI_ENABLE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_HSPI_ENABLE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_HSPI_ENABLE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_HSPI_ENABLE_DISABLE                      _MK_ENUM_CONST(0)
#define DC_CMD_DISPLAY_POWER_CONTROL_0_HSPI_ENABLE_ENABLE                       _MK_ENUM_CONST(1)

//
// Display Interrupt and Status
//

// Register DC_CMD_INT_STATUS_0  // Interrupt Status
//  This reflects status of all pending
//  interrupts which is valid as long as
//  the interrupt is not cleared even if the
//  interrupt is masked. A pending interrupt
//  can be cleared by writing a '1' to this
//  the corresponding interrupt status bit
//  in this register.
#define DC_CMD_INT_STATUS_0                     _MK_ADDR_CONST(0x37)
#define DC_CMD_INT_STATUS_0_SECURE                      0x0
#define DC_CMD_INT_STATUS_0_WORD_COUNT                  0x1
#define DC_CMD_INT_STATUS_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_READ_MASK                   _MK_MASK_CONST(0x1df79f)
#define DC_CMD_INT_STATUS_0_WRITE_MASK                  _MK_MASK_CONST(0x1df79f)
// Context Switch Interrupt Status
//  (this is cleared on write)
//   0= interrupt not pending
//   1= interrupt pending
#define DC_CMD_INT_STATUS_0_CTXSW_INT_SHIFT                     _MK_SHIFT_CONST(0)
#define DC_CMD_INT_STATUS_0_CTXSW_INT_FIELD                     (_MK_MASK_CONST(0x1) << DC_CMD_INT_STATUS_0_CTXSW_INT_SHIFT)
#define DC_CMD_INT_STATUS_0_CTXSW_INT_RANGE                     0:0
#define DC_CMD_INT_STATUS_0_CTXSW_INT_WOFFSET                   0x0
#define DC_CMD_INT_STATUS_0_CTXSW_INT_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_CTXSW_INT_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_CTXSW_INT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_CTXSW_INT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// Frame End Interrupt
//   0= interrupt not pending
//   1= interrupt pending
#define DC_CMD_INT_STATUS_0_FRAME_END_INT_SHIFT                 _MK_SHIFT_CONST(1)
#define DC_CMD_INT_STATUS_0_FRAME_END_INT_FIELD                 (_MK_MASK_CONST(0x1) << DC_CMD_INT_STATUS_0_FRAME_END_INT_SHIFT)
#define DC_CMD_INT_STATUS_0_FRAME_END_INT_RANGE                 1:1
#define DC_CMD_INT_STATUS_0_FRAME_END_INT_WOFFSET                       0x0
#define DC_CMD_INT_STATUS_0_FRAME_END_INT_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_FRAME_END_INT_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_FRAME_END_INT_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_FRAME_END_INT_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Vertical Blank Interrupt
//   0= interrupt not pending
//   1= interrupt pending
#define DC_CMD_INT_STATUS_0_V_BLANK_INT_SHIFT                   _MK_SHIFT_CONST(2)
#define DC_CMD_INT_STATUS_0_V_BLANK_INT_FIELD                   (_MK_MASK_CONST(0x1) << DC_CMD_INT_STATUS_0_V_BLANK_INT_SHIFT)
#define DC_CMD_INT_STATUS_0_V_BLANK_INT_RANGE                   2:2
#define DC_CMD_INT_STATUS_0_V_BLANK_INT_WOFFSET                 0x0
#define DC_CMD_INT_STATUS_0_V_BLANK_INT_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_V_BLANK_INT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_V_BLANK_INT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_V_BLANK_INT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Horizontal Blank Interrupt
//   0= interrupt not pending
//   1= interrupt pending
#define DC_CMD_INT_STATUS_0_H_BLANK_INT_SHIFT                   _MK_SHIFT_CONST(3)
#define DC_CMD_INT_STATUS_0_H_BLANK_INT_FIELD                   (_MK_MASK_CONST(0x1) << DC_CMD_INT_STATUS_0_H_BLANK_INT_SHIFT)
#define DC_CMD_INT_STATUS_0_H_BLANK_INT_RANGE                   3:3
#define DC_CMD_INT_STATUS_0_H_BLANK_INT_WOFFSET                 0x0
#define DC_CMD_INT_STATUS_0_H_BLANK_INT_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_H_BLANK_INT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_H_BLANK_INT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_H_BLANK_INT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Vertical Pulse 3 Interrupt
//   0= interrupt not pending
//   1= interrupt pending
#define DC_CMD_INT_STATUS_0_V_PULSE3_INT_SHIFT                  _MK_SHIFT_CONST(4)
#define DC_CMD_INT_STATUS_0_V_PULSE3_INT_FIELD                  (_MK_MASK_CONST(0x1) << DC_CMD_INT_STATUS_0_V_PULSE3_INT_SHIFT)
#define DC_CMD_INT_STATUS_0_V_PULSE3_INT_RANGE                  4:4
#define DC_CMD_INT_STATUS_0_V_PULSE3_INT_WOFFSET                        0x0
#define DC_CMD_INT_STATUS_0_V_PULSE3_INT_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_V_PULSE3_INT_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_V_PULSE3_INT_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_V_PULSE3_INT_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// SPI Busy Interrupt Status
//   0= interrupt not pending
//   1= interrupt pending
#define DC_CMD_INT_STATUS_0_SPI_BUSY_INT_SHIFT                  _MK_SHIFT_CONST(7)
#define DC_CMD_INT_STATUS_0_SPI_BUSY_INT_FIELD                  (_MK_MASK_CONST(0x1) << DC_CMD_INT_STATUS_0_SPI_BUSY_INT_SHIFT)
#define DC_CMD_INT_STATUS_0_SPI_BUSY_INT_RANGE                  7:7
#define DC_CMD_INT_STATUS_0_SPI_BUSY_INT_WOFFSET                        0x0
#define DC_CMD_INT_STATUS_0_SPI_BUSY_INT_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_SPI_BUSY_INT_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_SPI_BUSY_INT_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_SPI_BUSY_INT_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Window A Underflow Interrupt Status
//   0= interrupt not pending
//   1= interrupt pending
#define DC_CMD_INT_STATUS_0_WIN_A_UF_INT_SHIFT                  _MK_SHIFT_CONST(8)
#define DC_CMD_INT_STATUS_0_WIN_A_UF_INT_FIELD                  (_MK_MASK_CONST(0x1) << DC_CMD_INT_STATUS_0_WIN_A_UF_INT_SHIFT)
#define DC_CMD_INT_STATUS_0_WIN_A_UF_INT_RANGE                  8:8
#define DC_CMD_INT_STATUS_0_WIN_A_UF_INT_WOFFSET                        0x0
#define DC_CMD_INT_STATUS_0_WIN_A_UF_INT_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_WIN_A_UF_INT_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_WIN_A_UF_INT_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_WIN_A_UF_INT_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Window B Underflow Interrupt Status
//   0= interrupt not pending
//   1= interrupt pending
#define DC_CMD_INT_STATUS_0_WIN_B_UF_INT_SHIFT                  _MK_SHIFT_CONST(9)
#define DC_CMD_INT_STATUS_0_WIN_B_UF_INT_FIELD                  (_MK_MASK_CONST(0x1) << DC_CMD_INT_STATUS_0_WIN_B_UF_INT_SHIFT)
#define DC_CMD_INT_STATUS_0_WIN_B_UF_INT_RANGE                  9:9
#define DC_CMD_INT_STATUS_0_WIN_B_UF_INT_WOFFSET                        0x0
#define DC_CMD_INT_STATUS_0_WIN_B_UF_INT_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_WIN_B_UF_INT_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_WIN_B_UF_INT_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_WIN_B_UF_INT_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Window C Underflow Interrupt Status
//   0= interrupt not pending
//   1= interrupt pending
#define DC_CMD_INT_STATUS_0_WIN_C_UF_INT_SHIFT                  _MK_SHIFT_CONST(10)
#define DC_CMD_INT_STATUS_0_WIN_C_UF_INT_FIELD                  (_MK_MASK_CONST(0x1) << DC_CMD_INT_STATUS_0_WIN_C_UF_INT_SHIFT)
#define DC_CMD_INT_STATUS_0_WIN_C_UF_INT_RANGE                  10:10
#define DC_CMD_INT_STATUS_0_WIN_C_UF_INT_WOFFSET                        0x0
#define DC_CMD_INT_STATUS_0_WIN_C_UF_INT_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_WIN_C_UF_INT_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_WIN_C_UF_INT_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_WIN_C_UF_INT_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Main-Display Stop Frame Interrupt Status
//   0= interrupt not pending
//   1= interrupt pending
#define DC_CMD_INT_STATUS_0_MSF_INT_SHIFT                       _MK_SHIFT_CONST(12)
#define DC_CMD_INT_STATUS_0_MSF_INT_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_INT_STATUS_0_MSF_INT_SHIFT)
#define DC_CMD_INT_STATUS_0_MSF_INT_RANGE                       12:12
#define DC_CMD_INT_STATUS_0_MSF_INT_WOFFSET                     0x0
#define DC_CMD_INT_STATUS_0_MSF_INT_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_MSF_INT_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_MSF_INT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_MSF_INT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Sub-Display Stop Frame Interrupt Status
//   0= interrupt not pending
//   1= interrupt pending
#define DC_CMD_INT_STATUS_0_SSF_INT_SHIFT                       _MK_SHIFT_CONST(13)
#define DC_CMD_INT_STATUS_0_SSF_INT_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_INT_STATUS_0_SSF_INT_SHIFT)
#define DC_CMD_INT_STATUS_0_SSF_INT_RANGE                       13:13
#define DC_CMD_INT_STATUS_0_SSF_INT_WOFFSET                     0x0
#define DC_CMD_INT_STATUS_0_SSF_INT_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_SSF_INT_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_SSF_INT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_SSF_INT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Window A Overflow Interrupt Status
//   0= interrupt not pending
//   1= interrupt pending
#define DC_CMD_INT_STATUS_0_WIN_A_OF_INT_SHIFT                  _MK_SHIFT_CONST(14)
#define DC_CMD_INT_STATUS_0_WIN_A_OF_INT_FIELD                  (_MK_MASK_CONST(0x1) << DC_CMD_INT_STATUS_0_WIN_A_OF_INT_SHIFT)
#define DC_CMD_INT_STATUS_0_WIN_A_OF_INT_RANGE                  14:14
#define DC_CMD_INT_STATUS_0_WIN_A_OF_INT_WOFFSET                        0x0
#define DC_CMD_INT_STATUS_0_WIN_A_OF_INT_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_WIN_A_OF_INT_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_WIN_A_OF_INT_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_WIN_A_OF_INT_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Window B Overflow Interrupt Status
//   0= interrupt not pending
//   1= interrupt pending
#define DC_CMD_INT_STATUS_0_WIN_B_OF_INT_SHIFT                  _MK_SHIFT_CONST(15)
#define DC_CMD_INT_STATUS_0_WIN_B_OF_INT_FIELD                  (_MK_MASK_CONST(0x1) << DC_CMD_INT_STATUS_0_WIN_B_OF_INT_SHIFT)
#define DC_CMD_INT_STATUS_0_WIN_B_OF_INT_RANGE                  15:15
#define DC_CMD_INT_STATUS_0_WIN_B_OF_INT_WOFFSET                        0x0
#define DC_CMD_INT_STATUS_0_WIN_B_OF_INT_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_WIN_B_OF_INT_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_WIN_B_OF_INT_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_WIN_B_OF_INT_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Window C Overflow Interrupt Status
//   0= interrupt not pending
//   1= interrupt pending
#define DC_CMD_INT_STATUS_0_WIN_C_OF_INT_SHIFT                  _MK_SHIFT_CONST(16)
#define DC_CMD_INT_STATUS_0_WIN_C_OF_INT_FIELD                  (_MK_MASK_CONST(0x1) << DC_CMD_INT_STATUS_0_WIN_C_OF_INT_SHIFT)
#define DC_CMD_INT_STATUS_0_WIN_C_OF_INT_RANGE                  16:16
#define DC_CMD_INT_STATUS_0_WIN_C_OF_INT_WOFFSET                        0x0
#define DC_CMD_INT_STATUS_0_WIN_C_OF_INT_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_WIN_C_OF_INT_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_WIN_C_OF_INT_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_WIN_C_OF_INT_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// GPIO 0 Interrupt Status, connected to LPW0
//   0= interrupt not pending
//   1= interrupt pending
#define DC_CMD_INT_STATUS_0_GPIO_0_INT_SHIFT                    _MK_SHIFT_CONST(18)
#define DC_CMD_INT_STATUS_0_GPIO_0_INT_FIELD                    (_MK_MASK_CONST(0x1) << DC_CMD_INT_STATUS_0_GPIO_0_INT_SHIFT)
#define DC_CMD_INT_STATUS_0_GPIO_0_INT_RANGE                    18:18
#define DC_CMD_INT_STATUS_0_GPIO_0_INT_WOFFSET                  0x0
#define DC_CMD_INT_STATUS_0_GPIO_0_INT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_GPIO_0_INT_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_GPIO_0_INT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_GPIO_0_INT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// GPIO 1 Interrupt Status, connected to LPW1
//   0= interrupt not pending
//   1= interrupt pending
#define DC_CMD_INT_STATUS_0_GPIO_1_INT_SHIFT                    _MK_SHIFT_CONST(19)
#define DC_CMD_INT_STATUS_0_GPIO_1_INT_FIELD                    (_MK_MASK_CONST(0x1) << DC_CMD_INT_STATUS_0_GPIO_1_INT_SHIFT)
#define DC_CMD_INT_STATUS_0_GPIO_1_INT_RANGE                    19:19
#define DC_CMD_INT_STATUS_0_GPIO_1_INT_WOFFSET                  0x0
#define DC_CMD_INT_STATUS_0_GPIO_1_INT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_GPIO_1_INT_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_GPIO_1_INT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_GPIO_1_INT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// GPIO 2 Interrupt Status, connected to LPW2
//   0= interrupt not pending
//   1= interrupt pending
#define DC_CMD_INT_STATUS_0_GPIO_2_INT_SHIFT                    _MK_SHIFT_CONST(20)
#define DC_CMD_INT_STATUS_0_GPIO_2_INT_FIELD                    (_MK_MASK_CONST(0x1) << DC_CMD_INT_STATUS_0_GPIO_2_INT_SHIFT)
#define DC_CMD_INT_STATUS_0_GPIO_2_INT_RANGE                    20:20
#define DC_CMD_INT_STATUS_0_GPIO_2_INT_WOFFSET                  0x0
#define DC_CMD_INT_STATUS_0_GPIO_2_INT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_GPIO_2_INT_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_GPIO_2_INT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_STATUS_0_GPIO_2_INT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register DC_CMD_INT_MASK_0  // Interrupt Mask
// Setting bits in this register masked the
//  corresponding interrupt but does not
//  clear a pending interrupt and does not
//  prevent a pending interrupt to be generated.
//  Masking an interrupt also does not clear
//  a pending interrupt status and does not prevent
//  a pending interrupt status to be generated.
#define DC_CMD_INT_MASK_0                       _MK_ADDR_CONST(0x38)
#define DC_CMD_INT_MASK_0_SECURE                        0x0
#define DC_CMD_INT_MASK_0_WORD_COUNT                    0x1
#define DC_CMD_INT_MASK_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_RESET_MASK                    _MK_MASK_CONST(0x1df79f)
#define DC_CMD_INT_MASK_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_READ_MASK                     _MK_MASK_CONST(0x1df79f)
#define DC_CMD_INT_MASK_0_WRITE_MASK                    _MK_MASK_CONST(0x1df79f)
// Context Switch Interrupt Mask   0= interrupt masked
//   1= interrupt not masked
#define DC_CMD_INT_MASK_0_CTXSW_INT_MASK_SHIFT                  _MK_SHIFT_CONST(0)
#define DC_CMD_INT_MASK_0_CTXSW_INT_MASK_FIELD                  (_MK_MASK_CONST(0x1) << DC_CMD_INT_MASK_0_CTXSW_INT_MASK_SHIFT)
#define DC_CMD_INT_MASK_0_CTXSW_INT_MASK_RANGE                  0:0
#define DC_CMD_INT_MASK_0_CTXSW_INT_MASK_WOFFSET                        0x0
#define DC_CMD_INT_MASK_0_CTXSW_INT_MASK_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_CTXSW_INT_MASK_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_CMD_INT_MASK_0_CTXSW_INT_MASK_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_CTXSW_INT_MASK_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_CTXSW_INT_MASK_MASKED                 _MK_ENUM_CONST(0)
#define DC_CMD_INT_MASK_0_CTXSW_INT_MASK_NOTMASKED                      _MK_ENUM_CONST(1)

// Frame End Interrupt Mask   0= interrupt masked
//   1= interrupt not masked
#define DC_CMD_INT_MASK_0_FRAME_END_INT_MASK_SHIFT                      _MK_SHIFT_CONST(1)
#define DC_CMD_INT_MASK_0_FRAME_END_INT_MASK_FIELD                      (_MK_MASK_CONST(0x1) << DC_CMD_INT_MASK_0_FRAME_END_INT_MASK_SHIFT)
#define DC_CMD_INT_MASK_0_FRAME_END_INT_MASK_RANGE                      1:1
#define DC_CMD_INT_MASK_0_FRAME_END_INT_MASK_WOFFSET                    0x0
#define DC_CMD_INT_MASK_0_FRAME_END_INT_MASK_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_FRAME_END_INT_MASK_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_CMD_INT_MASK_0_FRAME_END_INT_MASK_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_FRAME_END_INT_MASK_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_FRAME_END_INT_MASK_MASKED                     _MK_ENUM_CONST(0)
#define DC_CMD_INT_MASK_0_FRAME_END_INT_MASK_NOTMASKED                  _MK_ENUM_CONST(1)

// Vertical Blank Interrupt Mask   0= interrupt masked
//   1= interrupt not masked
#define DC_CMD_INT_MASK_0_V_BLANK_INT_MASK_SHIFT                        _MK_SHIFT_CONST(2)
#define DC_CMD_INT_MASK_0_V_BLANK_INT_MASK_FIELD                        (_MK_MASK_CONST(0x1) << DC_CMD_INT_MASK_0_V_BLANK_INT_MASK_SHIFT)
#define DC_CMD_INT_MASK_0_V_BLANK_INT_MASK_RANGE                        2:2
#define DC_CMD_INT_MASK_0_V_BLANK_INT_MASK_WOFFSET                      0x0
#define DC_CMD_INT_MASK_0_V_BLANK_INT_MASK_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_V_BLANK_INT_MASK_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_CMD_INT_MASK_0_V_BLANK_INT_MASK_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_V_BLANK_INT_MASK_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_V_BLANK_INT_MASK_MASKED                       _MK_ENUM_CONST(0)
#define DC_CMD_INT_MASK_0_V_BLANK_INT_MASK_NOTMASKED                    _MK_ENUM_CONST(1)

// Horizontal Blank Interrupt Mask   0= interrupt masked
//   1= interrupt not masked
#define DC_CMD_INT_MASK_0_H_BLANK_INT_MASK_SHIFT                        _MK_SHIFT_CONST(3)
#define DC_CMD_INT_MASK_0_H_BLANK_INT_MASK_FIELD                        (_MK_MASK_CONST(0x1) << DC_CMD_INT_MASK_0_H_BLANK_INT_MASK_SHIFT)
#define DC_CMD_INT_MASK_0_H_BLANK_INT_MASK_RANGE                        3:3
#define DC_CMD_INT_MASK_0_H_BLANK_INT_MASK_WOFFSET                      0x0
#define DC_CMD_INT_MASK_0_H_BLANK_INT_MASK_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_H_BLANK_INT_MASK_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_CMD_INT_MASK_0_H_BLANK_INT_MASK_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_H_BLANK_INT_MASK_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_H_BLANK_INT_MASK_MASKED                       _MK_ENUM_CONST(0)
#define DC_CMD_INT_MASK_0_H_BLANK_INT_MASK_NOTMASKED                    _MK_ENUM_CONST(1)

// Vertical Pulse 3 Interrupt Mask   0= interrupt masked
//   1= interrupt not masked
#define DC_CMD_INT_MASK_0_V_PULSE3_INT_MASK_SHIFT                       _MK_SHIFT_CONST(4)
#define DC_CMD_INT_MASK_0_V_PULSE3_INT_MASK_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_INT_MASK_0_V_PULSE3_INT_MASK_SHIFT)
#define DC_CMD_INT_MASK_0_V_PULSE3_INT_MASK_RANGE                       4:4
#define DC_CMD_INT_MASK_0_V_PULSE3_INT_MASK_WOFFSET                     0x0
#define DC_CMD_INT_MASK_0_V_PULSE3_INT_MASK_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_V_PULSE3_INT_MASK_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_INT_MASK_0_V_PULSE3_INT_MASK_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_V_PULSE3_INT_MASK_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_V_PULSE3_INT_MASK_MASKED                      _MK_ENUM_CONST(0)
#define DC_CMD_INT_MASK_0_V_PULSE3_INT_MASK_NOTMASKED                   _MK_ENUM_CONST(1)

// SPI Busy Interrupt Mask   0= interrupt masked
//   1= interrupt not masked
#define DC_CMD_INT_MASK_0_SPI_BUSY_INT_MASK_SHIFT                       _MK_SHIFT_CONST(7)
#define DC_CMD_INT_MASK_0_SPI_BUSY_INT_MASK_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_INT_MASK_0_SPI_BUSY_INT_MASK_SHIFT)
#define DC_CMD_INT_MASK_0_SPI_BUSY_INT_MASK_RANGE                       7:7
#define DC_CMD_INT_MASK_0_SPI_BUSY_INT_MASK_WOFFSET                     0x0
#define DC_CMD_INT_MASK_0_SPI_BUSY_INT_MASK_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_SPI_BUSY_INT_MASK_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_INT_MASK_0_SPI_BUSY_INT_MASK_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_SPI_BUSY_INT_MASK_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_SPI_BUSY_INT_MASK_MASKED                      _MK_ENUM_CONST(0)
#define DC_CMD_INT_MASK_0_SPI_BUSY_INT_MASK_NOTMASKED                   _MK_ENUM_CONST(1)

// Window A Underflow Interrupt Mask   0= interrupt masked
//   1= interrupt not masked
#define DC_CMD_INT_MASK_0_WIN_A_UF_INT_MASK_SHIFT                       _MK_SHIFT_CONST(8)
#define DC_CMD_INT_MASK_0_WIN_A_UF_INT_MASK_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_INT_MASK_0_WIN_A_UF_INT_MASK_SHIFT)
#define DC_CMD_INT_MASK_0_WIN_A_UF_INT_MASK_RANGE                       8:8
#define DC_CMD_INT_MASK_0_WIN_A_UF_INT_MASK_WOFFSET                     0x0
#define DC_CMD_INT_MASK_0_WIN_A_UF_INT_MASK_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_WIN_A_UF_INT_MASK_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_INT_MASK_0_WIN_A_UF_INT_MASK_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_WIN_A_UF_INT_MASK_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_WIN_A_UF_INT_MASK_MASKED                      _MK_ENUM_CONST(0)
#define DC_CMD_INT_MASK_0_WIN_A_UF_INT_MASK_NOTMASKED                   _MK_ENUM_CONST(1)

// Window B Underflow Interrupt Mask   0= interrupt masked
//   1= interrupt not masked
#define DC_CMD_INT_MASK_0_WIN_B_UF_INT_MASK_SHIFT                       _MK_SHIFT_CONST(9)
#define DC_CMD_INT_MASK_0_WIN_B_UF_INT_MASK_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_INT_MASK_0_WIN_B_UF_INT_MASK_SHIFT)
#define DC_CMD_INT_MASK_0_WIN_B_UF_INT_MASK_RANGE                       9:9
#define DC_CMD_INT_MASK_0_WIN_B_UF_INT_MASK_WOFFSET                     0x0
#define DC_CMD_INT_MASK_0_WIN_B_UF_INT_MASK_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_WIN_B_UF_INT_MASK_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_INT_MASK_0_WIN_B_UF_INT_MASK_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_WIN_B_UF_INT_MASK_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_WIN_B_UF_INT_MASK_MASKED                      _MK_ENUM_CONST(0)
#define DC_CMD_INT_MASK_0_WIN_B_UF_INT_MASK_NOTMASKED                   _MK_ENUM_CONST(1)

// Window C Underflow Interrupt Mask   0= interrupt masked
//   1= interrupt not masked
#define DC_CMD_INT_MASK_0_WIN_C_UF_INT_MASK_SHIFT                       _MK_SHIFT_CONST(10)
#define DC_CMD_INT_MASK_0_WIN_C_UF_INT_MASK_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_INT_MASK_0_WIN_C_UF_INT_MASK_SHIFT)
#define DC_CMD_INT_MASK_0_WIN_C_UF_INT_MASK_RANGE                       10:10
#define DC_CMD_INT_MASK_0_WIN_C_UF_INT_MASK_WOFFSET                     0x0
#define DC_CMD_INT_MASK_0_WIN_C_UF_INT_MASK_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_WIN_C_UF_INT_MASK_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_INT_MASK_0_WIN_C_UF_INT_MASK_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_WIN_C_UF_INT_MASK_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_WIN_C_UF_INT_MASK_MASKED                      _MK_ENUM_CONST(0)
#define DC_CMD_INT_MASK_0_WIN_C_UF_INT_MASK_NOTMASKED                   _MK_ENUM_CONST(1)

// Main-Display Stop Frame Interrupt Mask   0= interrupt masked
//   1= interrupt not masked
#define DC_CMD_INT_MASK_0_MSF_INT_MASK_SHIFT                    _MK_SHIFT_CONST(12)
#define DC_CMD_INT_MASK_0_MSF_INT_MASK_FIELD                    (_MK_MASK_CONST(0x1) << DC_CMD_INT_MASK_0_MSF_INT_MASK_SHIFT)
#define DC_CMD_INT_MASK_0_MSF_INT_MASK_RANGE                    12:12
#define DC_CMD_INT_MASK_0_MSF_INT_MASK_WOFFSET                  0x0
#define DC_CMD_INT_MASK_0_MSF_INT_MASK_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_MSF_INT_MASK_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_CMD_INT_MASK_0_MSF_INT_MASK_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_MSF_INT_MASK_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_MSF_INT_MASK_MASKED                   _MK_ENUM_CONST(0)
#define DC_CMD_INT_MASK_0_MSF_INT_MASK_NOTMASKED                        _MK_ENUM_CONST(1)

// Sub-Display Stop Frame Interrupt Mask   0= interrupt masked
//   1= interrupt not masked
#define DC_CMD_INT_MASK_0_SSF_INT_MASK_SHIFT                    _MK_SHIFT_CONST(13)
#define DC_CMD_INT_MASK_0_SSF_INT_MASK_FIELD                    (_MK_MASK_CONST(0x1) << DC_CMD_INT_MASK_0_SSF_INT_MASK_SHIFT)
#define DC_CMD_INT_MASK_0_SSF_INT_MASK_RANGE                    13:13
#define DC_CMD_INT_MASK_0_SSF_INT_MASK_WOFFSET                  0x0
#define DC_CMD_INT_MASK_0_SSF_INT_MASK_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_SSF_INT_MASK_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_CMD_INT_MASK_0_SSF_INT_MASK_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_SSF_INT_MASK_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_SSF_INT_MASK_MASKED                   _MK_ENUM_CONST(0)
#define DC_CMD_INT_MASK_0_SSF_INT_MASK_NOTMASKED                        _MK_ENUM_CONST(1)

// Window A Overflow Interrupt Mask   0= interrupt masked
//   1= interrupt not masked
#define DC_CMD_INT_MASK_0_WIN_A_OF_INT_MASK_SHIFT                       _MK_SHIFT_CONST(14)
#define DC_CMD_INT_MASK_0_WIN_A_OF_INT_MASK_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_INT_MASK_0_WIN_A_OF_INT_MASK_SHIFT)
#define DC_CMD_INT_MASK_0_WIN_A_OF_INT_MASK_RANGE                       14:14
#define DC_CMD_INT_MASK_0_WIN_A_OF_INT_MASK_WOFFSET                     0x0
#define DC_CMD_INT_MASK_0_WIN_A_OF_INT_MASK_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_WIN_A_OF_INT_MASK_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_INT_MASK_0_WIN_A_OF_INT_MASK_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_WIN_A_OF_INT_MASK_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_WIN_A_OF_INT_MASK_MASKED                      _MK_ENUM_CONST(0)
#define DC_CMD_INT_MASK_0_WIN_A_OF_INT_MASK_NOTMASKED                   _MK_ENUM_CONST(1)

// Window B Overflow Interrupt Mask   0= interrupt masked
//   1= interrupt not masked
#define DC_CMD_INT_MASK_0_WIN_B_OF_INT_MASK_SHIFT                       _MK_SHIFT_CONST(15)
#define DC_CMD_INT_MASK_0_WIN_B_OF_INT_MASK_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_INT_MASK_0_WIN_B_OF_INT_MASK_SHIFT)
#define DC_CMD_INT_MASK_0_WIN_B_OF_INT_MASK_RANGE                       15:15
#define DC_CMD_INT_MASK_0_WIN_B_OF_INT_MASK_WOFFSET                     0x0
#define DC_CMD_INT_MASK_0_WIN_B_OF_INT_MASK_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_WIN_B_OF_INT_MASK_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_INT_MASK_0_WIN_B_OF_INT_MASK_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_WIN_B_OF_INT_MASK_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_WIN_B_OF_INT_MASK_MASKED                      _MK_ENUM_CONST(0)
#define DC_CMD_INT_MASK_0_WIN_B_OF_INT_MASK_NOTMASKED                   _MK_ENUM_CONST(1)

// Window C Overflow Interrupt Mask   0= interrupt masked
//   1= interrupt not masked
#define DC_CMD_INT_MASK_0_WIN_C_OF_INT_MASK_SHIFT                       _MK_SHIFT_CONST(16)
#define DC_CMD_INT_MASK_0_WIN_C_OF_INT_MASK_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_INT_MASK_0_WIN_C_OF_INT_MASK_SHIFT)
#define DC_CMD_INT_MASK_0_WIN_C_OF_INT_MASK_RANGE                       16:16
#define DC_CMD_INT_MASK_0_WIN_C_OF_INT_MASK_WOFFSET                     0x0
#define DC_CMD_INT_MASK_0_WIN_C_OF_INT_MASK_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_WIN_C_OF_INT_MASK_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_INT_MASK_0_WIN_C_OF_INT_MASK_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_WIN_C_OF_INT_MASK_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_WIN_C_OF_INT_MASK_MASKED                      _MK_ENUM_CONST(0)
#define DC_CMD_INT_MASK_0_WIN_C_OF_INT_MASK_NOTMASKED                   _MK_ENUM_CONST(1)

// GPIO 0 Interrupt Mask, connected to LPW0   0= interrupt masked
//   1= interrupt not masked
#define DC_CMD_INT_MASK_0_GPIO_0_INT_MASK_SHIFT                 _MK_SHIFT_CONST(18)
#define DC_CMD_INT_MASK_0_GPIO_0_INT_MASK_FIELD                 (_MK_MASK_CONST(0x1) << DC_CMD_INT_MASK_0_GPIO_0_INT_MASK_SHIFT)
#define DC_CMD_INT_MASK_0_GPIO_0_INT_MASK_RANGE                 18:18
#define DC_CMD_INT_MASK_0_GPIO_0_INT_MASK_WOFFSET                       0x0
#define DC_CMD_INT_MASK_0_GPIO_0_INT_MASK_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_GPIO_0_INT_MASK_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_CMD_INT_MASK_0_GPIO_0_INT_MASK_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_GPIO_0_INT_MASK_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_GPIO_0_INT_MASK_MASKED                        _MK_ENUM_CONST(0)
#define DC_CMD_INT_MASK_0_GPIO_0_INT_MASK_NOTMASKED                     _MK_ENUM_CONST(1)

// GPIO 1 Interrupt Mask, connected to LPW1   0= interrupt masked
//   1= interrupt not masked
#define DC_CMD_INT_MASK_0_GPIO_1_INT_MASK_SHIFT                 _MK_SHIFT_CONST(19)
#define DC_CMD_INT_MASK_0_GPIO_1_INT_MASK_FIELD                 (_MK_MASK_CONST(0x1) << DC_CMD_INT_MASK_0_GPIO_1_INT_MASK_SHIFT)
#define DC_CMD_INT_MASK_0_GPIO_1_INT_MASK_RANGE                 19:19
#define DC_CMD_INT_MASK_0_GPIO_1_INT_MASK_WOFFSET                       0x0
#define DC_CMD_INT_MASK_0_GPIO_1_INT_MASK_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_GPIO_1_INT_MASK_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_CMD_INT_MASK_0_GPIO_1_INT_MASK_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_GPIO_1_INT_MASK_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_GPIO_1_INT_MASK_MASKED                        _MK_ENUM_CONST(0)
#define DC_CMD_INT_MASK_0_GPIO_1_INT_MASK_NOTMASKED                     _MK_ENUM_CONST(1)

// GPIO 2 Interrupt Mask, connected to LPW2   0= interrupt masked
//   1= interrupt not masked
#define DC_CMD_INT_MASK_0_GPIO_2_INT_MASK_SHIFT                 _MK_SHIFT_CONST(20)
#define DC_CMD_INT_MASK_0_GPIO_2_INT_MASK_FIELD                 (_MK_MASK_CONST(0x1) << DC_CMD_INT_MASK_0_GPIO_2_INT_MASK_SHIFT)
#define DC_CMD_INT_MASK_0_GPIO_2_INT_MASK_RANGE                 20:20
#define DC_CMD_INT_MASK_0_GPIO_2_INT_MASK_WOFFSET                       0x0
#define DC_CMD_INT_MASK_0_GPIO_2_INT_MASK_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_GPIO_2_INT_MASK_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_CMD_INT_MASK_0_GPIO_2_INT_MASK_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_GPIO_2_INT_MASK_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_MASK_0_GPIO_2_INT_MASK_MASKED                        _MK_ENUM_CONST(0)
#define DC_CMD_INT_MASK_0_GPIO_2_INT_MASK_NOTMASKED                     _MK_ENUM_CONST(1)


// Register DC_CMD_INT_ENABLE_0  // Interrupt Enable
// Setting bits in this register enable
//  the corresponding interrrupt event to
//  generate a pending interrupt. Interrupt
//  output signal will be activated only if
//  the corresponding interrupt is not masked.
//  Disabling an interrupt will not clear
//  a corresponding pending interrupt - it
//  only prevent a new interrupt event to
//  generate a pending interrupt.
#define DC_CMD_INT_ENABLE_0                     _MK_ADDR_CONST(0x39)
#define DC_CMD_INT_ENABLE_0_SECURE                      0x0
#define DC_CMD_INT_ENABLE_0_WORD_COUNT                  0x1
#define DC_CMD_INT_ENABLE_0_RESET_VAL                   _MK_MASK_CONST(0x1)
#define DC_CMD_INT_ENABLE_0_RESET_MASK                  _MK_MASK_CONST(0x1df79f)
#define DC_CMD_INT_ENABLE_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_READ_MASK                   _MK_MASK_CONST(0x1df79f)
#define DC_CMD_INT_ENABLE_0_WRITE_MASK                  _MK_MASK_CONST(0x1df79f)
// Context Switch Interrupt Enable   0= interrupt disabled
//   1= interrupt enabled
#define DC_CMD_INT_ENABLE_0_CTXSW_INT_ENABLE_SHIFT                      _MK_SHIFT_CONST(0)
#define DC_CMD_INT_ENABLE_0_CTXSW_INT_ENABLE_FIELD                      (_MK_MASK_CONST(0x1) << DC_CMD_INT_ENABLE_0_CTXSW_INT_ENABLE_SHIFT)
#define DC_CMD_INT_ENABLE_0_CTXSW_INT_ENABLE_RANGE                      0:0
#define DC_CMD_INT_ENABLE_0_CTXSW_INT_ENABLE_WOFFSET                    0x0
#define DC_CMD_INT_ENABLE_0_CTXSW_INT_ENABLE_DEFAULT                    _MK_MASK_CONST(0x1)
#define DC_CMD_INT_ENABLE_0_CTXSW_INT_ENABLE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_CMD_INT_ENABLE_0_CTXSW_INT_ENABLE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_CTXSW_INT_ENABLE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_CTXSW_INT_ENABLE_DISABLE                    _MK_ENUM_CONST(0)
#define DC_CMD_INT_ENABLE_0_CTXSW_INT_ENABLE_ENABLE                     _MK_ENUM_CONST(1)

// Frame End Interrupt Enable   0= interrupt masked
//   1= interrupt not masked
#define DC_CMD_INT_ENABLE_0_FRAME_END_INT_ENABLE_SHIFT                  _MK_SHIFT_CONST(1)
#define DC_CMD_INT_ENABLE_0_FRAME_END_INT_ENABLE_FIELD                  (_MK_MASK_CONST(0x1) << DC_CMD_INT_ENABLE_0_FRAME_END_INT_ENABLE_SHIFT)
#define DC_CMD_INT_ENABLE_0_FRAME_END_INT_ENABLE_RANGE                  1:1
#define DC_CMD_INT_ENABLE_0_FRAME_END_INT_ENABLE_WOFFSET                        0x0
#define DC_CMD_INT_ENABLE_0_FRAME_END_INT_ENABLE_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_FRAME_END_INT_ENABLE_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_CMD_INT_ENABLE_0_FRAME_END_INT_ENABLE_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_FRAME_END_INT_ENABLE_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_FRAME_END_INT_ENABLE_DISABLE                        _MK_ENUM_CONST(0)
#define DC_CMD_INT_ENABLE_0_FRAME_END_INT_ENABLE_ENABLE                 _MK_ENUM_CONST(1)

// Vertical Blank Interrupt Enable   0= interrupt masked
//   1= interrupt not masked
#define DC_CMD_INT_ENABLE_0_V_BLANK_INT_ENABLE_SHIFT                    _MK_SHIFT_CONST(2)
#define DC_CMD_INT_ENABLE_0_V_BLANK_INT_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_CMD_INT_ENABLE_0_V_BLANK_INT_ENABLE_SHIFT)
#define DC_CMD_INT_ENABLE_0_V_BLANK_INT_ENABLE_RANGE                    2:2
#define DC_CMD_INT_ENABLE_0_V_BLANK_INT_ENABLE_WOFFSET                  0x0
#define DC_CMD_INT_ENABLE_0_V_BLANK_INT_ENABLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_V_BLANK_INT_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_CMD_INT_ENABLE_0_V_BLANK_INT_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_V_BLANK_INT_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_V_BLANK_INT_ENABLE_DISABLE                  _MK_ENUM_CONST(0)
#define DC_CMD_INT_ENABLE_0_V_BLANK_INT_ENABLE_ENABLE                   _MK_ENUM_CONST(1)

// Horizontal Blank Interrupt Enable   0= interrupt masked
//   1= interrupt not masked
#define DC_CMD_INT_ENABLE_0_H_BLANK_INT_ENABLE_SHIFT                    _MK_SHIFT_CONST(3)
#define DC_CMD_INT_ENABLE_0_H_BLANK_INT_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_CMD_INT_ENABLE_0_H_BLANK_INT_ENABLE_SHIFT)
#define DC_CMD_INT_ENABLE_0_H_BLANK_INT_ENABLE_RANGE                    3:3
#define DC_CMD_INT_ENABLE_0_H_BLANK_INT_ENABLE_WOFFSET                  0x0
#define DC_CMD_INT_ENABLE_0_H_BLANK_INT_ENABLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_H_BLANK_INT_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_CMD_INT_ENABLE_0_H_BLANK_INT_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_H_BLANK_INT_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_H_BLANK_INT_ENABLE_DISABLE                  _MK_ENUM_CONST(0)
#define DC_CMD_INT_ENABLE_0_H_BLANK_INT_ENABLE_ENABLE                   _MK_ENUM_CONST(1)

// Vertical Pulse 3 Interrupt Enable   0= interrupt masked
//   1= interrupt not masked
#define DC_CMD_INT_ENABLE_0_V_PULSE3_INT_ENABLE_SHIFT                   _MK_SHIFT_CONST(4)
#define DC_CMD_INT_ENABLE_0_V_PULSE3_INT_ENABLE_FIELD                   (_MK_MASK_CONST(0x1) << DC_CMD_INT_ENABLE_0_V_PULSE3_INT_ENABLE_SHIFT)
#define DC_CMD_INT_ENABLE_0_V_PULSE3_INT_ENABLE_RANGE                   4:4
#define DC_CMD_INT_ENABLE_0_V_PULSE3_INT_ENABLE_WOFFSET                 0x0
#define DC_CMD_INT_ENABLE_0_V_PULSE3_INT_ENABLE_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_V_PULSE3_INT_ENABLE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_CMD_INT_ENABLE_0_V_PULSE3_INT_ENABLE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_V_PULSE3_INT_ENABLE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_V_PULSE3_INT_ENABLE_DISABLE                 _MK_ENUM_CONST(0)
#define DC_CMD_INT_ENABLE_0_V_PULSE3_INT_ENABLE_ENABLE                  _MK_ENUM_CONST(1)

// SPI Busy Interrupt Enable   0= interrupt disabled
//   1= interrupt enabled
#define DC_CMD_INT_ENABLE_0_SPI_BUSY_INT_ENABLE_SHIFT                   _MK_SHIFT_CONST(7)
#define DC_CMD_INT_ENABLE_0_SPI_BUSY_INT_ENABLE_FIELD                   (_MK_MASK_CONST(0x1) << DC_CMD_INT_ENABLE_0_SPI_BUSY_INT_ENABLE_SHIFT)
#define DC_CMD_INT_ENABLE_0_SPI_BUSY_INT_ENABLE_RANGE                   7:7
#define DC_CMD_INT_ENABLE_0_SPI_BUSY_INT_ENABLE_WOFFSET                 0x0
#define DC_CMD_INT_ENABLE_0_SPI_BUSY_INT_ENABLE_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_SPI_BUSY_INT_ENABLE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_CMD_INT_ENABLE_0_SPI_BUSY_INT_ENABLE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_SPI_BUSY_INT_ENABLE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_SPI_BUSY_INT_ENABLE_DISABLE                 _MK_ENUM_CONST(0)
#define DC_CMD_INT_ENABLE_0_SPI_BUSY_INT_ENABLE_ENABLE                  _MK_ENUM_CONST(1)

// Window A Underflow Interrupt Enable   0= interrupt disabled
//   1= interrupt enabled
#define DC_CMD_INT_ENABLE_0_WIN_A_UF_INT_ENABLE_SHIFT                   _MK_SHIFT_CONST(8)
#define DC_CMD_INT_ENABLE_0_WIN_A_UF_INT_ENABLE_FIELD                   (_MK_MASK_CONST(0x1) << DC_CMD_INT_ENABLE_0_WIN_A_UF_INT_ENABLE_SHIFT)
#define DC_CMD_INT_ENABLE_0_WIN_A_UF_INT_ENABLE_RANGE                   8:8
#define DC_CMD_INT_ENABLE_0_WIN_A_UF_INT_ENABLE_WOFFSET                 0x0
#define DC_CMD_INT_ENABLE_0_WIN_A_UF_INT_ENABLE_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_WIN_A_UF_INT_ENABLE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_CMD_INT_ENABLE_0_WIN_A_UF_INT_ENABLE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_WIN_A_UF_INT_ENABLE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_WIN_A_UF_INT_ENABLE_DISABLE                 _MK_ENUM_CONST(0)
#define DC_CMD_INT_ENABLE_0_WIN_A_UF_INT_ENABLE_ENABLE                  _MK_ENUM_CONST(1)

// Window B Underflow Interrupt Enable   0= interrupt disabled
//   1= interrupt enabled
#define DC_CMD_INT_ENABLE_0_WIN_B_UF_INT_ENABLE_SHIFT                   _MK_SHIFT_CONST(9)
#define DC_CMD_INT_ENABLE_0_WIN_B_UF_INT_ENABLE_FIELD                   (_MK_MASK_CONST(0x1) << DC_CMD_INT_ENABLE_0_WIN_B_UF_INT_ENABLE_SHIFT)
#define DC_CMD_INT_ENABLE_0_WIN_B_UF_INT_ENABLE_RANGE                   9:9
#define DC_CMD_INT_ENABLE_0_WIN_B_UF_INT_ENABLE_WOFFSET                 0x0
#define DC_CMD_INT_ENABLE_0_WIN_B_UF_INT_ENABLE_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_WIN_B_UF_INT_ENABLE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_CMD_INT_ENABLE_0_WIN_B_UF_INT_ENABLE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_WIN_B_UF_INT_ENABLE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_WIN_B_UF_INT_ENABLE_DISABLE                 _MK_ENUM_CONST(0)
#define DC_CMD_INT_ENABLE_0_WIN_B_UF_INT_ENABLE_ENABLE                  _MK_ENUM_CONST(1)

// Window C Underflow Interrupt Enable   0= interrupt disabled
//   1= interrupt enabled
#define DC_CMD_INT_ENABLE_0_WIN_C_UF_INT_ENABLE_SHIFT                   _MK_SHIFT_CONST(10)
#define DC_CMD_INT_ENABLE_0_WIN_C_UF_INT_ENABLE_FIELD                   (_MK_MASK_CONST(0x1) << DC_CMD_INT_ENABLE_0_WIN_C_UF_INT_ENABLE_SHIFT)
#define DC_CMD_INT_ENABLE_0_WIN_C_UF_INT_ENABLE_RANGE                   10:10
#define DC_CMD_INT_ENABLE_0_WIN_C_UF_INT_ENABLE_WOFFSET                 0x0
#define DC_CMD_INT_ENABLE_0_WIN_C_UF_INT_ENABLE_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_WIN_C_UF_INT_ENABLE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_CMD_INT_ENABLE_0_WIN_C_UF_INT_ENABLE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_WIN_C_UF_INT_ENABLE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_WIN_C_UF_INT_ENABLE_DISABLE                 _MK_ENUM_CONST(0)
#define DC_CMD_INT_ENABLE_0_WIN_C_UF_INT_ENABLE_ENABLE                  _MK_ENUM_CONST(1)

// Main-Display Stop Frame Interrupt Enable   0= interrupt disabled
//   1= interrupt enabled
#define DC_CMD_INT_ENABLE_0_MSF_INT_ENABLE_SHIFT                        _MK_SHIFT_CONST(12)
#define DC_CMD_INT_ENABLE_0_MSF_INT_ENABLE_FIELD                        (_MK_MASK_CONST(0x1) << DC_CMD_INT_ENABLE_0_MSF_INT_ENABLE_SHIFT)
#define DC_CMD_INT_ENABLE_0_MSF_INT_ENABLE_RANGE                        12:12
#define DC_CMD_INT_ENABLE_0_MSF_INT_ENABLE_WOFFSET                      0x0
#define DC_CMD_INT_ENABLE_0_MSF_INT_ENABLE_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_MSF_INT_ENABLE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_CMD_INT_ENABLE_0_MSF_INT_ENABLE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_MSF_INT_ENABLE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_MSF_INT_ENABLE_DISABLE                      _MK_ENUM_CONST(0)
#define DC_CMD_INT_ENABLE_0_MSF_INT_ENABLE_ENABLE                       _MK_ENUM_CONST(1)

// Sub-Display Stop Frame Interrupt Enable   0= interrupt disabled
//   1= interrupt enabled
#define DC_CMD_INT_ENABLE_0_SSF_INT_ENABLE_SHIFT                        _MK_SHIFT_CONST(13)
#define DC_CMD_INT_ENABLE_0_SSF_INT_ENABLE_FIELD                        (_MK_MASK_CONST(0x1) << DC_CMD_INT_ENABLE_0_SSF_INT_ENABLE_SHIFT)
#define DC_CMD_INT_ENABLE_0_SSF_INT_ENABLE_RANGE                        13:13
#define DC_CMD_INT_ENABLE_0_SSF_INT_ENABLE_WOFFSET                      0x0
#define DC_CMD_INT_ENABLE_0_SSF_INT_ENABLE_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_SSF_INT_ENABLE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_CMD_INT_ENABLE_0_SSF_INT_ENABLE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_SSF_INT_ENABLE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_SSF_INT_ENABLE_DISABLE                      _MK_ENUM_CONST(0)
#define DC_CMD_INT_ENABLE_0_SSF_INT_ENABLE_ENABLE                       _MK_ENUM_CONST(1)

// Window A Overflow Interrupt Enable   0= interrupt disabled
//   1= interrupt enabled
#define DC_CMD_INT_ENABLE_0_WIN_A_OF_INT_ENABLE_SHIFT                   _MK_SHIFT_CONST(14)
#define DC_CMD_INT_ENABLE_0_WIN_A_OF_INT_ENABLE_FIELD                   (_MK_MASK_CONST(0x1) << DC_CMD_INT_ENABLE_0_WIN_A_OF_INT_ENABLE_SHIFT)
#define DC_CMD_INT_ENABLE_0_WIN_A_OF_INT_ENABLE_RANGE                   14:14
#define DC_CMD_INT_ENABLE_0_WIN_A_OF_INT_ENABLE_WOFFSET                 0x0
#define DC_CMD_INT_ENABLE_0_WIN_A_OF_INT_ENABLE_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_WIN_A_OF_INT_ENABLE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_CMD_INT_ENABLE_0_WIN_A_OF_INT_ENABLE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_WIN_A_OF_INT_ENABLE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_WIN_A_OF_INT_ENABLE_DISABLE                 _MK_ENUM_CONST(0)
#define DC_CMD_INT_ENABLE_0_WIN_A_OF_INT_ENABLE_ENABLE                  _MK_ENUM_CONST(1)

// Window B Overflow Interrupt Enable   0= interrupt disabled
//   1= interrupt enabled
#define DC_CMD_INT_ENABLE_0_WIN_B_OF_INT_ENABLE_SHIFT                   _MK_SHIFT_CONST(15)
#define DC_CMD_INT_ENABLE_0_WIN_B_OF_INT_ENABLE_FIELD                   (_MK_MASK_CONST(0x1) << DC_CMD_INT_ENABLE_0_WIN_B_OF_INT_ENABLE_SHIFT)
#define DC_CMD_INT_ENABLE_0_WIN_B_OF_INT_ENABLE_RANGE                   15:15
#define DC_CMD_INT_ENABLE_0_WIN_B_OF_INT_ENABLE_WOFFSET                 0x0
#define DC_CMD_INT_ENABLE_0_WIN_B_OF_INT_ENABLE_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_WIN_B_OF_INT_ENABLE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_CMD_INT_ENABLE_0_WIN_B_OF_INT_ENABLE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_WIN_B_OF_INT_ENABLE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_WIN_B_OF_INT_ENABLE_DISABLE                 _MK_ENUM_CONST(0)
#define DC_CMD_INT_ENABLE_0_WIN_B_OF_INT_ENABLE_ENABLE                  _MK_ENUM_CONST(1)

// Window C Overflow Interrupt Enable   0= interrupt disabled
//   1= interrupt enabled
#define DC_CMD_INT_ENABLE_0_WIN_C_OF_INT_ENABLE_SHIFT                   _MK_SHIFT_CONST(16)
#define DC_CMD_INT_ENABLE_0_WIN_C_OF_INT_ENABLE_FIELD                   (_MK_MASK_CONST(0x1) << DC_CMD_INT_ENABLE_0_WIN_C_OF_INT_ENABLE_SHIFT)
#define DC_CMD_INT_ENABLE_0_WIN_C_OF_INT_ENABLE_RANGE                   16:16
#define DC_CMD_INT_ENABLE_0_WIN_C_OF_INT_ENABLE_WOFFSET                 0x0
#define DC_CMD_INT_ENABLE_0_WIN_C_OF_INT_ENABLE_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_WIN_C_OF_INT_ENABLE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_CMD_INT_ENABLE_0_WIN_C_OF_INT_ENABLE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_WIN_C_OF_INT_ENABLE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_WIN_C_OF_INT_ENABLE_DISABLE                 _MK_ENUM_CONST(0)
#define DC_CMD_INT_ENABLE_0_WIN_C_OF_INT_ENABLE_ENABLE                  _MK_ENUM_CONST(1)

// Display GPIO_0 Interrupt Enable, connected to LPW0   0= interrupt disabled
//   1= interrupt enabled
#define DC_CMD_INT_ENABLE_0_GPIO_0_INT_ENABLE_SHIFT                     _MK_SHIFT_CONST(18)
#define DC_CMD_INT_ENABLE_0_GPIO_0_INT_ENABLE_FIELD                     (_MK_MASK_CONST(0x1) << DC_CMD_INT_ENABLE_0_GPIO_0_INT_ENABLE_SHIFT)
#define DC_CMD_INT_ENABLE_0_GPIO_0_INT_ENABLE_RANGE                     18:18
#define DC_CMD_INT_ENABLE_0_GPIO_0_INT_ENABLE_WOFFSET                   0x0
#define DC_CMD_INT_ENABLE_0_GPIO_0_INT_ENABLE_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_GPIO_0_INT_ENABLE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_CMD_INT_ENABLE_0_GPIO_0_INT_ENABLE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_GPIO_0_INT_ENABLE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_GPIO_0_INT_ENABLE_DISABLE                   _MK_ENUM_CONST(0)
#define DC_CMD_INT_ENABLE_0_GPIO_0_INT_ENABLE_ENABLE                    _MK_ENUM_CONST(1)

// Display GPIO_1 Interrupt Enable, connected to LPW1   0= interrupt disabled
//   1= interrupt enabled
#define DC_CMD_INT_ENABLE_0_GPIO_1_INT_ENABLE_SHIFT                     _MK_SHIFT_CONST(19)
#define DC_CMD_INT_ENABLE_0_GPIO_1_INT_ENABLE_FIELD                     (_MK_MASK_CONST(0x1) << DC_CMD_INT_ENABLE_0_GPIO_1_INT_ENABLE_SHIFT)
#define DC_CMD_INT_ENABLE_0_GPIO_1_INT_ENABLE_RANGE                     19:19
#define DC_CMD_INT_ENABLE_0_GPIO_1_INT_ENABLE_WOFFSET                   0x0
#define DC_CMD_INT_ENABLE_0_GPIO_1_INT_ENABLE_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_GPIO_1_INT_ENABLE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_CMD_INT_ENABLE_0_GPIO_1_INT_ENABLE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_GPIO_1_INT_ENABLE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_GPIO_1_INT_ENABLE_DISABLE                   _MK_ENUM_CONST(0)
#define DC_CMD_INT_ENABLE_0_GPIO_1_INT_ENABLE_ENABLE                    _MK_ENUM_CONST(1)

// Display GPIO_2 Interrupt Enable, connected to LPW2   0= interrupt disabled
//   1= interrupt enabled
#define DC_CMD_INT_ENABLE_0_GPIO_2_INT_ENABLE_SHIFT                     _MK_SHIFT_CONST(20)
#define DC_CMD_INT_ENABLE_0_GPIO_2_INT_ENABLE_FIELD                     (_MK_MASK_CONST(0x1) << DC_CMD_INT_ENABLE_0_GPIO_2_INT_ENABLE_SHIFT)
#define DC_CMD_INT_ENABLE_0_GPIO_2_INT_ENABLE_RANGE                     20:20
#define DC_CMD_INT_ENABLE_0_GPIO_2_INT_ENABLE_WOFFSET                   0x0
#define DC_CMD_INT_ENABLE_0_GPIO_2_INT_ENABLE_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_GPIO_2_INT_ENABLE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_CMD_INT_ENABLE_0_GPIO_2_INT_ENABLE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_GPIO_2_INT_ENABLE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_CMD_INT_ENABLE_0_GPIO_2_INT_ENABLE_DISABLE                   _MK_ENUM_CONST(0)
#define DC_CMD_INT_ENABLE_0_GPIO_2_INT_ENABLE_ENABLE                    _MK_ENUM_CONST(1)


// Register DC_CMD_INT_TYPE_0  // Interrupt Type
// Two interrupt types are available:
//  a. Edge interrupt - transition on input
//     signal/event generates pending interrupt
//  b. Level interrupt - active level on input
//     signal/event generates pending interrupt
#define DC_CMD_INT_TYPE_0                       _MK_ADDR_CONST(0x3a)
#define DC_CMD_INT_TYPE_0_SECURE                        0x0
#define DC_CMD_INT_TYPE_0_WORD_COUNT                    0x1
#define DC_CMD_INT_TYPE_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_RESET_MASK                    _MK_MASK_CONST(0x1df79e)
#define DC_CMD_INT_TYPE_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_READ_MASK                     _MK_MASK_CONST(0x1df79e)
#define DC_CMD_INT_TYPE_0_WRITE_MASK                    _MK_MASK_CONST(0x1df79e)
// Frame End Interrupt Type   0= edge interrupt
//   1= level interrupt
#define DC_CMD_INT_TYPE_0_FRAME_END_INT_TYPE_SHIFT                      _MK_SHIFT_CONST(1)
#define DC_CMD_INT_TYPE_0_FRAME_END_INT_TYPE_FIELD                      (_MK_MASK_CONST(0x1) << DC_CMD_INT_TYPE_0_FRAME_END_INT_TYPE_SHIFT)
#define DC_CMD_INT_TYPE_0_FRAME_END_INT_TYPE_RANGE                      1:1
#define DC_CMD_INT_TYPE_0_FRAME_END_INT_TYPE_WOFFSET                    0x0
#define DC_CMD_INT_TYPE_0_FRAME_END_INT_TYPE_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_FRAME_END_INT_TYPE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_CMD_INT_TYPE_0_FRAME_END_INT_TYPE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_FRAME_END_INT_TYPE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_FRAME_END_INT_TYPE_EDGE                       _MK_ENUM_CONST(0)
#define DC_CMD_INT_TYPE_0_FRAME_END_INT_TYPE_LEVEL                      _MK_ENUM_CONST(1)

// Vertical Blank Interrupt Type   0= edge interrupt
//   1= level interrupt
#define DC_CMD_INT_TYPE_0_V_BLANK_INT_TYPE_SHIFT                        _MK_SHIFT_CONST(2)
#define DC_CMD_INT_TYPE_0_V_BLANK_INT_TYPE_FIELD                        (_MK_MASK_CONST(0x1) << DC_CMD_INT_TYPE_0_V_BLANK_INT_TYPE_SHIFT)
#define DC_CMD_INT_TYPE_0_V_BLANK_INT_TYPE_RANGE                        2:2
#define DC_CMD_INT_TYPE_0_V_BLANK_INT_TYPE_WOFFSET                      0x0
#define DC_CMD_INT_TYPE_0_V_BLANK_INT_TYPE_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_V_BLANK_INT_TYPE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_CMD_INT_TYPE_0_V_BLANK_INT_TYPE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_V_BLANK_INT_TYPE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_V_BLANK_INT_TYPE_EDGE                 _MK_ENUM_CONST(0)
#define DC_CMD_INT_TYPE_0_V_BLANK_INT_TYPE_LEVEL                        _MK_ENUM_CONST(1)

// Horizontal Blank Interrupt Type   0= edge interrupt
//   1= level interrupt
#define DC_CMD_INT_TYPE_0_H_BLANK_INT_TYPE_SHIFT                        _MK_SHIFT_CONST(3)
#define DC_CMD_INT_TYPE_0_H_BLANK_INT_TYPE_FIELD                        (_MK_MASK_CONST(0x1) << DC_CMD_INT_TYPE_0_H_BLANK_INT_TYPE_SHIFT)
#define DC_CMD_INT_TYPE_0_H_BLANK_INT_TYPE_RANGE                        3:3
#define DC_CMD_INT_TYPE_0_H_BLANK_INT_TYPE_WOFFSET                      0x0
#define DC_CMD_INT_TYPE_0_H_BLANK_INT_TYPE_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_H_BLANK_INT_TYPE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_CMD_INT_TYPE_0_H_BLANK_INT_TYPE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_H_BLANK_INT_TYPE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_H_BLANK_INT_TYPE_EDGE                 _MK_ENUM_CONST(0)
#define DC_CMD_INT_TYPE_0_H_BLANK_INT_TYPE_LEVEL                        _MK_ENUM_CONST(1)

// Vertical Pulse 3 Interrupt Type   0= edge interrupt
//   1= level interrupt
#define DC_CMD_INT_TYPE_0_V_PULSE3_INT_TYPE_SHIFT                       _MK_SHIFT_CONST(4)
#define DC_CMD_INT_TYPE_0_V_PULSE3_INT_TYPE_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_INT_TYPE_0_V_PULSE3_INT_TYPE_SHIFT)
#define DC_CMD_INT_TYPE_0_V_PULSE3_INT_TYPE_RANGE                       4:4
#define DC_CMD_INT_TYPE_0_V_PULSE3_INT_TYPE_WOFFSET                     0x0
#define DC_CMD_INT_TYPE_0_V_PULSE3_INT_TYPE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_V_PULSE3_INT_TYPE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_INT_TYPE_0_V_PULSE3_INT_TYPE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_V_PULSE3_INT_TYPE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_V_PULSE3_INT_TYPE_EDGE                        _MK_ENUM_CONST(0)
#define DC_CMD_INT_TYPE_0_V_PULSE3_INT_TYPE_LEVEL                       _MK_ENUM_CONST(1)

// SPI Busy Interrupt Type   0= edge interrupt
//   1= level interrupt
#define DC_CMD_INT_TYPE_0_SPI_BUSY_INT_TYPE_SHIFT                       _MK_SHIFT_CONST(7)
#define DC_CMD_INT_TYPE_0_SPI_BUSY_INT_TYPE_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_INT_TYPE_0_SPI_BUSY_INT_TYPE_SHIFT)
#define DC_CMD_INT_TYPE_0_SPI_BUSY_INT_TYPE_RANGE                       7:7
#define DC_CMD_INT_TYPE_0_SPI_BUSY_INT_TYPE_WOFFSET                     0x0
#define DC_CMD_INT_TYPE_0_SPI_BUSY_INT_TYPE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_SPI_BUSY_INT_TYPE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_INT_TYPE_0_SPI_BUSY_INT_TYPE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_SPI_BUSY_INT_TYPE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_SPI_BUSY_INT_TYPE_EDGE                        _MK_ENUM_CONST(0)
#define DC_CMD_INT_TYPE_0_SPI_BUSY_INT_TYPE_LEVEL                       _MK_ENUM_CONST(1)

// Window A Underflow Interrupt Type   0= edge interrupt
//   1= level interrupt
#define DC_CMD_INT_TYPE_0_WIN_A_UF_INT_TYPE_SHIFT                       _MK_SHIFT_CONST(8)
#define DC_CMD_INT_TYPE_0_WIN_A_UF_INT_TYPE_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_INT_TYPE_0_WIN_A_UF_INT_TYPE_SHIFT)
#define DC_CMD_INT_TYPE_0_WIN_A_UF_INT_TYPE_RANGE                       8:8
#define DC_CMD_INT_TYPE_0_WIN_A_UF_INT_TYPE_WOFFSET                     0x0
#define DC_CMD_INT_TYPE_0_WIN_A_UF_INT_TYPE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_WIN_A_UF_INT_TYPE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_INT_TYPE_0_WIN_A_UF_INT_TYPE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_WIN_A_UF_INT_TYPE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_WIN_A_UF_INT_TYPE_EDGE                        _MK_ENUM_CONST(0)
#define DC_CMD_INT_TYPE_0_WIN_A_UF_INT_TYPE_LEVEL                       _MK_ENUM_CONST(1)

// Window B Underflow Interrupt Type   0= edge interrupt
//   1= level interrupt
#define DC_CMD_INT_TYPE_0_WIN_B_UF_INT_TYPE_SHIFT                       _MK_SHIFT_CONST(9)
#define DC_CMD_INT_TYPE_0_WIN_B_UF_INT_TYPE_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_INT_TYPE_0_WIN_B_UF_INT_TYPE_SHIFT)
#define DC_CMD_INT_TYPE_0_WIN_B_UF_INT_TYPE_RANGE                       9:9
#define DC_CMD_INT_TYPE_0_WIN_B_UF_INT_TYPE_WOFFSET                     0x0
#define DC_CMD_INT_TYPE_0_WIN_B_UF_INT_TYPE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_WIN_B_UF_INT_TYPE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_INT_TYPE_0_WIN_B_UF_INT_TYPE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_WIN_B_UF_INT_TYPE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_WIN_B_UF_INT_TYPE_EDGE                        _MK_ENUM_CONST(0)
#define DC_CMD_INT_TYPE_0_WIN_B_UF_INT_TYPE_LEVEL                       _MK_ENUM_CONST(1)

// Window C Underflow Interrupt Type   0= edge interrupt
//   1= level interrupt
#define DC_CMD_INT_TYPE_0_WIN_C_UF_INT_TYPE_SHIFT                       _MK_SHIFT_CONST(10)
#define DC_CMD_INT_TYPE_0_WIN_C_UF_INT_TYPE_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_INT_TYPE_0_WIN_C_UF_INT_TYPE_SHIFT)
#define DC_CMD_INT_TYPE_0_WIN_C_UF_INT_TYPE_RANGE                       10:10
#define DC_CMD_INT_TYPE_0_WIN_C_UF_INT_TYPE_WOFFSET                     0x0
#define DC_CMD_INT_TYPE_0_WIN_C_UF_INT_TYPE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_WIN_C_UF_INT_TYPE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_INT_TYPE_0_WIN_C_UF_INT_TYPE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_WIN_C_UF_INT_TYPE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_WIN_C_UF_INT_TYPE_EDGE                        _MK_ENUM_CONST(0)
#define DC_CMD_INT_TYPE_0_WIN_C_UF_INT_TYPE_LEVEL                       _MK_ENUM_CONST(1)

// Main-Display Stop Frame Interrupt Type   0= edge interrupt
//   1= level interrupt
#define DC_CMD_INT_TYPE_0_MSF_INT_TYPE_SHIFT                    _MK_SHIFT_CONST(12)
#define DC_CMD_INT_TYPE_0_MSF_INT_TYPE_FIELD                    (_MK_MASK_CONST(0x1) << DC_CMD_INT_TYPE_0_MSF_INT_TYPE_SHIFT)
#define DC_CMD_INT_TYPE_0_MSF_INT_TYPE_RANGE                    12:12
#define DC_CMD_INT_TYPE_0_MSF_INT_TYPE_WOFFSET                  0x0
#define DC_CMD_INT_TYPE_0_MSF_INT_TYPE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_MSF_INT_TYPE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_CMD_INT_TYPE_0_MSF_INT_TYPE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_MSF_INT_TYPE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_MSF_INT_TYPE_EDGE                     _MK_ENUM_CONST(0)
#define DC_CMD_INT_TYPE_0_MSF_INT_TYPE_LEVEL                    _MK_ENUM_CONST(1)

// Sub-Display Stop Frame Interrupt Type   0= edge interrupt
//   1= level interrupt
#define DC_CMD_INT_TYPE_0_SSF_INT_TYPE_SHIFT                    _MK_SHIFT_CONST(13)
#define DC_CMD_INT_TYPE_0_SSF_INT_TYPE_FIELD                    (_MK_MASK_CONST(0x1) << DC_CMD_INT_TYPE_0_SSF_INT_TYPE_SHIFT)
#define DC_CMD_INT_TYPE_0_SSF_INT_TYPE_RANGE                    13:13
#define DC_CMD_INT_TYPE_0_SSF_INT_TYPE_WOFFSET                  0x0
#define DC_CMD_INT_TYPE_0_SSF_INT_TYPE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_SSF_INT_TYPE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_CMD_INT_TYPE_0_SSF_INT_TYPE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_SSF_INT_TYPE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_SSF_INT_TYPE_EDGE                     _MK_ENUM_CONST(0)
#define DC_CMD_INT_TYPE_0_SSF_INT_TYPE_LEVEL                    _MK_ENUM_CONST(1)

// Window A Overflow Interrupt Type   0= edge interrupt
//   1= level interrupt
#define DC_CMD_INT_TYPE_0_WIN_A_OF_INT_TYPE_SHIFT                       _MK_SHIFT_CONST(14)
#define DC_CMD_INT_TYPE_0_WIN_A_OF_INT_TYPE_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_INT_TYPE_0_WIN_A_OF_INT_TYPE_SHIFT)
#define DC_CMD_INT_TYPE_0_WIN_A_OF_INT_TYPE_RANGE                       14:14
#define DC_CMD_INT_TYPE_0_WIN_A_OF_INT_TYPE_WOFFSET                     0x0
#define DC_CMD_INT_TYPE_0_WIN_A_OF_INT_TYPE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_WIN_A_OF_INT_TYPE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_INT_TYPE_0_WIN_A_OF_INT_TYPE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_WIN_A_OF_INT_TYPE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_WIN_A_OF_INT_TYPE_EDGE                        _MK_ENUM_CONST(0)
#define DC_CMD_INT_TYPE_0_WIN_A_OF_INT_TYPE_LEVEL                       _MK_ENUM_CONST(1)

// Window B Overflow Interrupt Type   0= edge interrupt
//   1= level interrupt
#define DC_CMD_INT_TYPE_0_WIN_B_OF_INT_TYPE_SHIFT                       _MK_SHIFT_CONST(15)
#define DC_CMD_INT_TYPE_0_WIN_B_OF_INT_TYPE_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_INT_TYPE_0_WIN_B_OF_INT_TYPE_SHIFT)
#define DC_CMD_INT_TYPE_0_WIN_B_OF_INT_TYPE_RANGE                       15:15
#define DC_CMD_INT_TYPE_0_WIN_B_OF_INT_TYPE_WOFFSET                     0x0
#define DC_CMD_INT_TYPE_0_WIN_B_OF_INT_TYPE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_WIN_B_OF_INT_TYPE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_INT_TYPE_0_WIN_B_OF_INT_TYPE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_WIN_B_OF_INT_TYPE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_WIN_B_OF_INT_TYPE_EDGE                        _MK_ENUM_CONST(0)
#define DC_CMD_INT_TYPE_0_WIN_B_OF_INT_TYPE_LEVEL                       _MK_ENUM_CONST(1)

// Window C Overflow Interrupt Type   0= edge interrupt
//   1= level interrupt
#define DC_CMD_INT_TYPE_0_WIN_C_OF_INT_TYPE_SHIFT                       _MK_SHIFT_CONST(16)
#define DC_CMD_INT_TYPE_0_WIN_C_OF_INT_TYPE_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_INT_TYPE_0_WIN_C_OF_INT_TYPE_SHIFT)
#define DC_CMD_INT_TYPE_0_WIN_C_OF_INT_TYPE_RANGE                       16:16
#define DC_CMD_INT_TYPE_0_WIN_C_OF_INT_TYPE_WOFFSET                     0x0
#define DC_CMD_INT_TYPE_0_WIN_C_OF_INT_TYPE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_WIN_C_OF_INT_TYPE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_INT_TYPE_0_WIN_C_OF_INT_TYPE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_WIN_C_OF_INT_TYPE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_WIN_C_OF_INT_TYPE_EDGE                        _MK_ENUM_CONST(0)
#define DC_CMD_INT_TYPE_0_WIN_C_OF_INT_TYPE_LEVEL                       _MK_ENUM_CONST(1)

// Display GPIO_0 Interrupt Type, connected to LPW0   0= edge interrupt
//   1= level interrupt
#define DC_CMD_INT_TYPE_0_GPIO_0_INT_TYPE_SHIFT                 _MK_SHIFT_CONST(18)
#define DC_CMD_INT_TYPE_0_GPIO_0_INT_TYPE_FIELD                 (_MK_MASK_CONST(0x1) << DC_CMD_INT_TYPE_0_GPIO_0_INT_TYPE_SHIFT)
#define DC_CMD_INT_TYPE_0_GPIO_0_INT_TYPE_RANGE                 18:18
#define DC_CMD_INT_TYPE_0_GPIO_0_INT_TYPE_WOFFSET                       0x0
#define DC_CMD_INT_TYPE_0_GPIO_0_INT_TYPE_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_GPIO_0_INT_TYPE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_CMD_INT_TYPE_0_GPIO_0_INT_TYPE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_GPIO_0_INT_TYPE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_GPIO_0_INT_TYPE_EDGE                  _MK_ENUM_CONST(0)
#define DC_CMD_INT_TYPE_0_GPIO_0_INT_TYPE_LEVEL                 _MK_ENUM_CONST(1)

// Display GPIO_1 Interrupt Type, connected to LPW1   0= edge interrupt
//   1= level interrupt
#define DC_CMD_INT_TYPE_0_GPIO_1_INT_TYPE_SHIFT                 _MK_SHIFT_CONST(19)
#define DC_CMD_INT_TYPE_0_GPIO_1_INT_TYPE_FIELD                 (_MK_MASK_CONST(0x1) << DC_CMD_INT_TYPE_0_GPIO_1_INT_TYPE_SHIFT)
#define DC_CMD_INT_TYPE_0_GPIO_1_INT_TYPE_RANGE                 19:19
#define DC_CMD_INT_TYPE_0_GPIO_1_INT_TYPE_WOFFSET                       0x0
#define DC_CMD_INT_TYPE_0_GPIO_1_INT_TYPE_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_GPIO_1_INT_TYPE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_CMD_INT_TYPE_0_GPIO_1_INT_TYPE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_GPIO_1_INT_TYPE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_GPIO_1_INT_TYPE_EDGE                  _MK_ENUM_CONST(0)
#define DC_CMD_INT_TYPE_0_GPIO_1_INT_TYPE_LEVEL                 _MK_ENUM_CONST(1)

// Display GPIO_2 Interrupt Type, connected to LPW2   0= edge interrupt
//   1= level interrupt
#define DC_CMD_INT_TYPE_0_GPIO_2_INT_TYPE_SHIFT                 _MK_SHIFT_CONST(20)
#define DC_CMD_INT_TYPE_0_GPIO_2_INT_TYPE_FIELD                 (_MK_MASK_CONST(0x1) << DC_CMD_INT_TYPE_0_GPIO_2_INT_TYPE_SHIFT)
#define DC_CMD_INT_TYPE_0_GPIO_2_INT_TYPE_RANGE                 20:20
#define DC_CMD_INT_TYPE_0_GPIO_2_INT_TYPE_WOFFSET                       0x0
#define DC_CMD_INT_TYPE_0_GPIO_2_INT_TYPE_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_GPIO_2_INT_TYPE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_CMD_INT_TYPE_0_GPIO_2_INT_TYPE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_GPIO_2_INT_TYPE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_TYPE_0_GPIO_2_INT_TYPE_EDGE                  _MK_ENUM_CONST(0)
#define DC_CMD_INT_TYPE_0_GPIO_2_INT_TYPE_LEVEL                 _MK_ENUM_CONST(1)


// Register DC_CMD_INT_POLARITY_0  // Interrupt Polarity
//  For edge interrupt, these bits specify
//  whether a pending interrupt is generated
//  on falling edge or on rising edge of the
//  corresponding input signal/event.
//  For level interrupt, these bits specify
//  whether a pending interrupt is generated
//  on low level or on high level of the
//  corresponding input signal/event.
//      0    rw   CTXSW_INT_POLARITY      init=0  // Context Switch Interrupt Polarity
//        enum ( LOW, HIGH )                      //   0= falling edge or low level interrupt
//                                                //   1= rising edge or high level interrupt
#define DC_CMD_INT_POLARITY_0                   _MK_ADDR_CONST(0x3b)
#define DC_CMD_INT_POLARITY_0_SECURE                    0x0
#define DC_CMD_INT_POLARITY_0_WORD_COUNT                        0x1
#define DC_CMD_INT_POLARITY_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_RESET_MASK                        _MK_MASK_CONST(0x1df79e)
#define DC_CMD_INT_POLARITY_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_READ_MASK                         _MK_MASK_CONST(0x1df79e)
#define DC_CMD_INT_POLARITY_0_WRITE_MASK                        _MK_MASK_CONST(0x1df79e)
// Frame End Interrupt Polarity   0= falling edge or low level interrupt
//   1= rising edge or high level interrupt
#define DC_CMD_INT_POLARITY_0_FRAME_END_INT_POLARITY_SHIFT                      _MK_SHIFT_CONST(1)
#define DC_CMD_INT_POLARITY_0_FRAME_END_INT_POLARITY_FIELD                      (_MK_MASK_CONST(0x1) << DC_CMD_INT_POLARITY_0_FRAME_END_INT_POLARITY_SHIFT)
#define DC_CMD_INT_POLARITY_0_FRAME_END_INT_POLARITY_RANGE                      1:1
#define DC_CMD_INT_POLARITY_0_FRAME_END_INT_POLARITY_WOFFSET                    0x0
#define DC_CMD_INT_POLARITY_0_FRAME_END_INT_POLARITY_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_FRAME_END_INT_POLARITY_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_CMD_INT_POLARITY_0_FRAME_END_INT_POLARITY_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_FRAME_END_INT_POLARITY_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_FRAME_END_INT_POLARITY_LOW                        _MK_ENUM_CONST(0)
#define DC_CMD_INT_POLARITY_0_FRAME_END_INT_POLARITY_HIGH                       _MK_ENUM_CONST(1)

// V Blank Interrupt Polarity   0= falling edge or low level interrupt
//   1= rising edge or high level interrupt
#define DC_CMD_INT_POLARITY_0_V_BLANK_INT_POLARITY_SHIFT                        _MK_SHIFT_CONST(2)
#define DC_CMD_INT_POLARITY_0_V_BLANK_INT_POLARITY_FIELD                        (_MK_MASK_CONST(0x1) << DC_CMD_INT_POLARITY_0_V_BLANK_INT_POLARITY_SHIFT)
#define DC_CMD_INT_POLARITY_0_V_BLANK_INT_POLARITY_RANGE                        2:2
#define DC_CMD_INT_POLARITY_0_V_BLANK_INT_POLARITY_WOFFSET                      0x0
#define DC_CMD_INT_POLARITY_0_V_BLANK_INT_POLARITY_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_V_BLANK_INT_POLARITY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_CMD_INT_POLARITY_0_V_BLANK_INT_POLARITY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_V_BLANK_INT_POLARITY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_V_BLANK_INT_POLARITY_LOW                  _MK_ENUM_CONST(0)
#define DC_CMD_INT_POLARITY_0_V_BLANK_INT_POLARITY_HIGH                 _MK_ENUM_CONST(1)

// H Blank Interrupt Polarity   0= falling edge or low level interrupt
//   1= rising edge or high level interrupt
#define DC_CMD_INT_POLARITY_0_H_BLANK_INT_POLARITY_SHIFT                        _MK_SHIFT_CONST(3)
#define DC_CMD_INT_POLARITY_0_H_BLANK_INT_POLARITY_FIELD                        (_MK_MASK_CONST(0x1) << DC_CMD_INT_POLARITY_0_H_BLANK_INT_POLARITY_SHIFT)
#define DC_CMD_INT_POLARITY_0_H_BLANK_INT_POLARITY_RANGE                        3:3
#define DC_CMD_INT_POLARITY_0_H_BLANK_INT_POLARITY_WOFFSET                      0x0
#define DC_CMD_INT_POLARITY_0_H_BLANK_INT_POLARITY_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_H_BLANK_INT_POLARITY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_CMD_INT_POLARITY_0_H_BLANK_INT_POLARITY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_H_BLANK_INT_POLARITY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_H_BLANK_INT_POLARITY_LOW                  _MK_ENUM_CONST(0)
#define DC_CMD_INT_POLARITY_0_H_BLANK_INT_POLARITY_HIGH                 _MK_ENUM_CONST(1)

// V Pulse 3 Interrupt Polarity   0= falling edge or low level interrupt
//   1= rising edge or high level interrupt
#define DC_CMD_INT_POLARITY_0_V_PULSE3_INT_POLARITY_SHIFT                       _MK_SHIFT_CONST(4)
#define DC_CMD_INT_POLARITY_0_V_PULSE3_INT_POLARITY_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_INT_POLARITY_0_V_PULSE3_INT_POLARITY_SHIFT)
#define DC_CMD_INT_POLARITY_0_V_PULSE3_INT_POLARITY_RANGE                       4:4
#define DC_CMD_INT_POLARITY_0_V_PULSE3_INT_POLARITY_WOFFSET                     0x0
#define DC_CMD_INT_POLARITY_0_V_PULSE3_INT_POLARITY_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_V_PULSE3_INT_POLARITY_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_INT_POLARITY_0_V_PULSE3_INT_POLARITY_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_V_PULSE3_INT_POLARITY_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_V_PULSE3_INT_POLARITY_LOW                 _MK_ENUM_CONST(0)
#define DC_CMD_INT_POLARITY_0_V_PULSE3_INT_POLARITY_HIGH                        _MK_ENUM_CONST(1)

// SPI Busy Interrupt Polarity   0= falling edge or low level interrupt
//   1= rising edge or high level interrupt
#define DC_CMD_INT_POLARITY_0_SPI_BUSY_INT_POLARITY_SHIFT                       _MK_SHIFT_CONST(7)
#define DC_CMD_INT_POLARITY_0_SPI_BUSY_INT_POLARITY_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_INT_POLARITY_0_SPI_BUSY_INT_POLARITY_SHIFT)
#define DC_CMD_INT_POLARITY_0_SPI_BUSY_INT_POLARITY_RANGE                       7:7
#define DC_CMD_INT_POLARITY_0_SPI_BUSY_INT_POLARITY_WOFFSET                     0x0
#define DC_CMD_INT_POLARITY_0_SPI_BUSY_INT_POLARITY_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_SPI_BUSY_INT_POLARITY_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_INT_POLARITY_0_SPI_BUSY_INT_POLARITY_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_SPI_BUSY_INT_POLARITY_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_SPI_BUSY_INT_POLARITY_LOW                 _MK_ENUM_CONST(0)
#define DC_CMD_INT_POLARITY_0_SPI_BUSY_INT_POLARITY_HIGH                        _MK_ENUM_CONST(1)

// Window A Underflow Interrupt Polarity   0= falling edge or low level interrupt
//   1= rising edge or high level interrupt
#define DC_CMD_INT_POLARITY_0_WIN_A_UF_INT_POLARITY_SHIFT                       _MK_SHIFT_CONST(8)
#define DC_CMD_INT_POLARITY_0_WIN_A_UF_INT_POLARITY_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_INT_POLARITY_0_WIN_A_UF_INT_POLARITY_SHIFT)
#define DC_CMD_INT_POLARITY_0_WIN_A_UF_INT_POLARITY_RANGE                       8:8
#define DC_CMD_INT_POLARITY_0_WIN_A_UF_INT_POLARITY_WOFFSET                     0x0
#define DC_CMD_INT_POLARITY_0_WIN_A_UF_INT_POLARITY_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_WIN_A_UF_INT_POLARITY_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_INT_POLARITY_0_WIN_A_UF_INT_POLARITY_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_WIN_A_UF_INT_POLARITY_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_WIN_A_UF_INT_POLARITY_LOW                 _MK_ENUM_CONST(0)
#define DC_CMD_INT_POLARITY_0_WIN_A_UF_INT_POLARITY_HIGH                        _MK_ENUM_CONST(1)

// Window B Underflow Interrupt Polarity   0= falling edge or low level interrupt
//   1= rising edge or high level interrupt
#define DC_CMD_INT_POLARITY_0_WIN_B_UF_INT_POLARITY_SHIFT                       _MK_SHIFT_CONST(9)
#define DC_CMD_INT_POLARITY_0_WIN_B_UF_INT_POLARITY_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_INT_POLARITY_0_WIN_B_UF_INT_POLARITY_SHIFT)
#define DC_CMD_INT_POLARITY_0_WIN_B_UF_INT_POLARITY_RANGE                       9:9
#define DC_CMD_INT_POLARITY_0_WIN_B_UF_INT_POLARITY_WOFFSET                     0x0
#define DC_CMD_INT_POLARITY_0_WIN_B_UF_INT_POLARITY_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_WIN_B_UF_INT_POLARITY_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_INT_POLARITY_0_WIN_B_UF_INT_POLARITY_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_WIN_B_UF_INT_POLARITY_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_WIN_B_UF_INT_POLARITY_LOW                 _MK_ENUM_CONST(0)
#define DC_CMD_INT_POLARITY_0_WIN_B_UF_INT_POLARITY_HIGH                        _MK_ENUM_CONST(1)

// Window C Underflow Interrupt Polarity   0= falling edge or low level interrupt
//   1= rising edge or high level interrupt
#define DC_CMD_INT_POLARITY_0_WIN_C_UF_INT_POLARITY_SHIFT                       _MK_SHIFT_CONST(10)
#define DC_CMD_INT_POLARITY_0_WIN_C_UF_INT_POLARITY_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_INT_POLARITY_0_WIN_C_UF_INT_POLARITY_SHIFT)
#define DC_CMD_INT_POLARITY_0_WIN_C_UF_INT_POLARITY_RANGE                       10:10
#define DC_CMD_INT_POLARITY_0_WIN_C_UF_INT_POLARITY_WOFFSET                     0x0
#define DC_CMD_INT_POLARITY_0_WIN_C_UF_INT_POLARITY_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_WIN_C_UF_INT_POLARITY_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_INT_POLARITY_0_WIN_C_UF_INT_POLARITY_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_WIN_C_UF_INT_POLARITY_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_WIN_C_UF_INT_POLARITY_LOW                 _MK_ENUM_CONST(0)
#define DC_CMD_INT_POLARITY_0_WIN_C_UF_INT_POLARITY_HIGH                        _MK_ENUM_CONST(1)

// Main-Display Stop Frame Interrupt Polarity   0= falling edge or low level interrupt
//   1= rising edge or high level interrupt
#define DC_CMD_INT_POLARITY_0_MSF_INT_POLARITY_SHIFT                    _MK_SHIFT_CONST(12)
#define DC_CMD_INT_POLARITY_0_MSF_INT_POLARITY_FIELD                    (_MK_MASK_CONST(0x1) << DC_CMD_INT_POLARITY_0_MSF_INT_POLARITY_SHIFT)
#define DC_CMD_INT_POLARITY_0_MSF_INT_POLARITY_RANGE                    12:12
#define DC_CMD_INT_POLARITY_0_MSF_INT_POLARITY_WOFFSET                  0x0
#define DC_CMD_INT_POLARITY_0_MSF_INT_POLARITY_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_MSF_INT_POLARITY_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_CMD_INT_POLARITY_0_MSF_INT_POLARITY_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_MSF_INT_POLARITY_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_MSF_INT_POLARITY_LOW                      _MK_ENUM_CONST(0)
#define DC_CMD_INT_POLARITY_0_MSF_INT_POLARITY_HIGH                     _MK_ENUM_CONST(1)

// Sub-Display Stop Frame Interrupt Polarity   0= falling edge or low level interrupt
//   1= rising edge or high level interrupt
#define DC_CMD_INT_POLARITY_0_SSF_INT_POLARITY_SHIFT                    _MK_SHIFT_CONST(13)
#define DC_CMD_INT_POLARITY_0_SSF_INT_POLARITY_FIELD                    (_MK_MASK_CONST(0x1) << DC_CMD_INT_POLARITY_0_SSF_INT_POLARITY_SHIFT)
#define DC_CMD_INT_POLARITY_0_SSF_INT_POLARITY_RANGE                    13:13
#define DC_CMD_INT_POLARITY_0_SSF_INT_POLARITY_WOFFSET                  0x0
#define DC_CMD_INT_POLARITY_0_SSF_INT_POLARITY_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_SSF_INT_POLARITY_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_CMD_INT_POLARITY_0_SSF_INT_POLARITY_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_SSF_INT_POLARITY_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_SSF_INT_POLARITY_LOW                      _MK_ENUM_CONST(0)
#define DC_CMD_INT_POLARITY_0_SSF_INT_POLARITY_HIGH                     _MK_ENUM_CONST(1)

// Window A Overflow Interrupt Polarity   0= falling edge or low level interrupt
//   1= rising edge or high level interrupt
#define DC_CMD_INT_POLARITY_0_WIN_A_OF_INT_POLARITY_SHIFT                       _MK_SHIFT_CONST(14)
#define DC_CMD_INT_POLARITY_0_WIN_A_OF_INT_POLARITY_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_INT_POLARITY_0_WIN_A_OF_INT_POLARITY_SHIFT)
#define DC_CMD_INT_POLARITY_0_WIN_A_OF_INT_POLARITY_RANGE                       14:14
#define DC_CMD_INT_POLARITY_0_WIN_A_OF_INT_POLARITY_WOFFSET                     0x0
#define DC_CMD_INT_POLARITY_0_WIN_A_OF_INT_POLARITY_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_WIN_A_OF_INT_POLARITY_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_INT_POLARITY_0_WIN_A_OF_INT_POLARITY_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_WIN_A_OF_INT_POLARITY_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_WIN_A_OF_INT_POLARITY_LOW                 _MK_ENUM_CONST(0)
#define DC_CMD_INT_POLARITY_0_WIN_A_OF_INT_POLARITY_HIGH                        _MK_ENUM_CONST(1)

// Window B Overflow Interrupt Polarity   0= falling edge or low level interrupt
//   1= rising edge or high level interrupt
#define DC_CMD_INT_POLARITY_0_WIN_B_OF_INT_POLARITY_SHIFT                       _MK_SHIFT_CONST(15)
#define DC_CMD_INT_POLARITY_0_WIN_B_OF_INT_POLARITY_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_INT_POLARITY_0_WIN_B_OF_INT_POLARITY_SHIFT)
#define DC_CMD_INT_POLARITY_0_WIN_B_OF_INT_POLARITY_RANGE                       15:15
#define DC_CMD_INT_POLARITY_0_WIN_B_OF_INT_POLARITY_WOFFSET                     0x0
#define DC_CMD_INT_POLARITY_0_WIN_B_OF_INT_POLARITY_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_WIN_B_OF_INT_POLARITY_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_INT_POLARITY_0_WIN_B_OF_INT_POLARITY_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_WIN_B_OF_INT_POLARITY_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_WIN_B_OF_INT_POLARITY_LOW                 _MK_ENUM_CONST(0)
#define DC_CMD_INT_POLARITY_0_WIN_B_OF_INT_POLARITY_HIGH                        _MK_ENUM_CONST(1)

//  Window C Overflow Interrupt Polarity   0= falling edge or low level interrupt
//   1= rising edge or high level interrupt
#define DC_CMD_INT_POLARITY_0_WIN_C_OF_INT_POLARITY_SHIFT                       _MK_SHIFT_CONST(16)
#define DC_CMD_INT_POLARITY_0_WIN_C_OF_INT_POLARITY_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_INT_POLARITY_0_WIN_C_OF_INT_POLARITY_SHIFT)
#define DC_CMD_INT_POLARITY_0_WIN_C_OF_INT_POLARITY_RANGE                       16:16
#define DC_CMD_INT_POLARITY_0_WIN_C_OF_INT_POLARITY_WOFFSET                     0x0
#define DC_CMD_INT_POLARITY_0_WIN_C_OF_INT_POLARITY_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_WIN_C_OF_INT_POLARITY_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_INT_POLARITY_0_WIN_C_OF_INT_POLARITY_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_WIN_C_OF_INT_POLARITY_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_WIN_C_OF_INT_POLARITY_LOW                 _MK_ENUM_CONST(0)
#define DC_CMD_INT_POLARITY_0_WIN_C_OF_INT_POLARITY_HIGH                        _MK_ENUM_CONST(1)

// Display GPIO_0 Interrupt Interrupt Polarity, connected to LPW0   0= falling edge or low level interrupt
//   1= rising edge or high level interrupt
#define DC_CMD_INT_POLARITY_0_GPIO_0_INT_POLARITY_SHIFT                 _MK_SHIFT_CONST(18)
#define DC_CMD_INT_POLARITY_0_GPIO_0_INT_POLARITY_FIELD                 (_MK_MASK_CONST(0x1) << DC_CMD_INT_POLARITY_0_GPIO_0_INT_POLARITY_SHIFT)
#define DC_CMD_INT_POLARITY_0_GPIO_0_INT_POLARITY_RANGE                 18:18
#define DC_CMD_INT_POLARITY_0_GPIO_0_INT_POLARITY_WOFFSET                       0x0
#define DC_CMD_INT_POLARITY_0_GPIO_0_INT_POLARITY_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_GPIO_0_INT_POLARITY_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_CMD_INT_POLARITY_0_GPIO_0_INT_POLARITY_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_GPIO_0_INT_POLARITY_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_GPIO_0_INT_POLARITY_LOW                   _MK_ENUM_CONST(0)
#define DC_CMD_INT_POLARITY_0_GPIO_0_INT_POLARITY_HIGH                  _MK_ENUM_CONST(1)

// Display GPIO_1 Interrupt Interrupt Polarity, connected to LPW1   0= falling edge or low level interrupt
//   1= rising edge or high level interrupt
#define DC_CMD_INT_POLARITY_0_GPIO_1_INT_POLARITY_SHIFT                 _MK_SHIFT_CONST(19)
#define DC_CMD_INT_POLARITY_0_GPIO_1_INT_POLARITY_FIELD                 (_MK_MASK_CONST(0x1) << DC_CMD_INT_POLARITY_0_GPIO_1_INT_POLARITY_SHIFT)
#define DC_CMD_INT_POLARITY_0_GPIO_1_INT_POLARITY_RANGE                 19:19
#define DC_CMD_INT_POLARITY_0_GPIO_1_INT_POLARITY_WOFFSET                       0x0
#define DC_CMD_INT_POLARITY_0_GPIO_1_INT_POLARITY_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_GPIO_1_INT_POLARITY_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_CMD_INT_POLARITY_0_GPIO_1_INT_POLARITY_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_GPIO_1_INT_POLARITY_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_GPIO_1_INT_POLARITY_LOW                   _MK_ENUM_CONST(0)
#define DC_CMD_INT_POLARITY_0_GPIO_1_INT_POLARITY_HIGH                  _MK_ENUM_CONST(1)

// Display GPIO_2 Interrupt Interrupt Polarity, connected to LPW2   0= falling edge or low level interrupt
//   1= rising edge or high level interrupt
#define DC_CMD_INT_POLARITY_0_GPIO_2_INT_POLARITY_SHIFT                 _MK_SHIFT_CONST(20)
#define DC_CMD_INT_POLARITY_0_GPIO_2_INT_POLARITY_FIELD                 (_MK_MASK_CONST(0x1) << DC_CMD_INT_POLARITY_0_GPIO_2_INT_POLARITY_SHIFT)
#define DC_CMD_INT_POLARITY_0_GPIO_2_INT_POLARITY_RANGE                 20:20
#define DC_CMD_INT_POLARITY_0_GPIO_2_INT_POLARITY_WOFFSET                       0x0
#define DC_CMD_INT_POLARITY_0_GPIO_2_INT_POLARITY_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_GPIO_2_INT_POLARITY_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_CMD_INT_POLARITY_0_GPIO_2_INT_POLARITY_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_GPIO_2_INT_POLARITY_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_CMD_INT_POLARITY_0_GPIO_2_INT_POLARITY_LOW                   _MK_ENUM_CONST(0)
#define DC_CMD_INT_POLARITY_0_GPIO_2_INT_POLARITY_HIGH                  _MK_ENUM_CONST(1)

// When written, next occurance of the selected SIGNAL will cause a RAISE to be sent to the
// host.  Software must not write this register if a previous request (from previous write) is
// still outstanding. Added SIGNAL_RAISE1_TYPE option so that multiple raises can be returned
// without software intervention.

// Register DC_CMD_SIGNAL_RAISE1_0  
#define DC_CMD_SIGNAL_RAISE1_0                  _MK_ADDR_CONST(0x3c)
#define DC_CMD_SIGNAL_RAISE1_0_SECURE                   0x0
#define DC_CMD_SIGNAL_RAISE1_0_WORD_COUNT                       0x1
#define DC_CMD_SIGNAL_RAISE1_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE1_0_RESET_MASK                       _MK_MASK_CONST(0x1000)
#define DC_CMD_SIGNAL_RAISE1_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE1_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE1_0_READ_MASK                        _MK_MASK_CONST(0xf171f)
#define DC_CMD_SIGNAL_RAISE1_0_WRITE_MASK                       _MK_MASK_CONST(0xf171f)
// bit number to raise
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_VECTOR_SHIFT                       _MK_SHIFT_CONST(0)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_VECTOR_FIELD                       (_MK_MASK_CONST(0x1f) << DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_VECTOR_SHIFT)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_VECTOR_RANGE                       4:0
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_VECTOR_WOFFSET                     0x0
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_VECTOR_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_VECTOR_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_VECTOR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_VECTOR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// which signal to raise on   0= none, no raise sent back
//   1= Frame End signal
//   2= V Blank signal
//   3= V Pulse 3 signal
//   4= Rising edge of V Blank signal
//   5= Falling edge of V Blank signal
//   6= Rising edge of V Pulse 3 signal
//   7= Falling edge of V Pulse 3 signal
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_SELECT_SHIFT                       _MK_SHIFT_CONST(8)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_SELECT_FIELD                       (_MK_MASK_CONST(0x7) << DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_SELECT_SHIFT)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_SELECT_RANGE                       10:8
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_SELECT_WOFFSET                     0x0
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_SELECT_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_SELECT_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_SELECT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_SELECT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_SELECT_NONE                        _MK_ENUM_CONST(0)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_SELECT_FRAME_END                   _MK_ENUM_CONST(1)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_SELECT_VBLANK                      _MK_ENUM_CONST(2)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_SELECT_VPULSE3                     _MK_ENUM_CONST(3)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_SELECT_VBLANK_START                        _MK_ENUM_CONST(4)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_SELECT_VBLANK_END                  _MK_ENUM_CONST(5)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_SELECT_VPULSE3_START                       _MK_ENUM_CONST(6)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_SELECT_VPULSE3_END                 _MK_ENUM_CONST(7)

//   0= Oneshot, single raise returned   1= Continuous, raise is returned 
//      persistently whenever raise event is 
//      true until this register is reprogrammed
//      such that SIGNAL_RAISE1_SELECT=NONE or
//      SIGNAL_RAISE1_TYPE=ONESHOT
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_TYPE_SHIFT                 _MK_SHIFT_CONST(12)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_TYPE_FIELD                 (_MK_MASK_CONST(0x1) << DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_TYPE_SHIFT)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_TYPE_RANGE                 12:12
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_TYPE_WOFFSET                       0x0
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_TYPE_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_TYPE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_TYPE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_TYPE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_TYPE_ONESHOT                       _MK_ENUM_CONST(0)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_TYPE_CONT                  _MK_ENUM_CONST(1)

// Signal Raise Channel ID
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_CHANNEL_ID_SHIFT                   _MK_SHIFT_CONST(16)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_CHANNEL_ID_FIELD                   (_MK_MASK_CONST(0xf) << DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_CHANNEL_ID_SHIFT)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_CHANNEL_ID_RANGE                   19:16
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_CHANNEL_ID_WOFFSET                 0x0
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_CHANNEL_ID_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_CHANNEL_ID_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_CHANNEL_ID_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE1_0_SIGNAL_RAISE1_CHANNEL_ID_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// When written, next occurance of the selected SIGNAL will cause a RAISE to be sent to the
// host.  Software must not write this register if a previous request (from previous write) is
// still outstanding. Added SIGNAL_RAISE2_TYPE option so that multiple raises can be returned
// without software intervention.

// Register DC_CMD_SIGNAL_RAISE2_0  
#define DC_CMD_SIGNAL_RAISE2_0                  _MK_ADDR_CONST(0x3d)
#define DC_CMD_SIGNAL_RAISE2_0_SECURE                   0x0
#define DC_CMD_SIGNAL_RAISE2_0_WORD_COUNT                       0x1
#define DC_CMD_SIGNAL_RAISE2_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE2_0_RESET_MASK                       _MK_MASK_CONST(0x1000)
#define DC_CMD_SIGNAL_RAISE2_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE2_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE2_0_READ_MASK                        _MK_MASK_CONST(0xf171f)
#define DC_CMD_SIGNAL_RAISE2_0_WRITE_MASK                       _MK_MASK_CONST(0xf171f)
// bit number to raise
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_VECTOR_SHIFT                       _MK_SHIFT_CONST(0)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_VECTOR_FIELD                       (_MK_MASK_CONST(0x1f) << DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_VECTOR_SHIFT)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_VECTOR_RANGE                       4:0
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_VECTOR_WOFFSET                     0x0
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_VECTOR_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_VECTOR_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_VECTOR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_VECTOR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// which signal to raise on   0= none, no raise sent back
//   1= Frame End signal
//   2= V Blank signal
//   3= V Pulse 3 signal
//   4= Rising edge of V Blank signal
//   5= Falling edge of V Blank signal
//   6= Rising edge of V Pulse 3 signal
//   7= Falling edge of V Pulse 3 signal
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_SELECT_SHIFT                       _MK_SHIFT_CONST(8)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_SELECT_FIELD                       (_MK_MASK_CONST(0x7) << DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_SELECT_SHIFT)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_SELECT_RANGE                       10:8
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_SELECT_WOFFSET                     0x0
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_SELECT_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_SELECT_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_SELECT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_SELECT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_SELECT_NONE                        _MK_ENUM_CONST(0)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_SELECT_FRAME_END                   _MK_ENUM_CONST(1)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_SELECT_VBLANK                      _MK_ENUM_CONST(2)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_SELECT_VPULSE3                     _MK_ENUM_CONST(3)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_SELECT_VBLANK_START                        _MK_ENUM_CONST(4)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_SELECT_VBLANK_END                  _MK_ENUM_CONST(5)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_SELECT_VPULSE3_START                       _MK_ENUM_CONST(6)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_SELECT_VPULSE3_END                 _MK_ENUM_CONST(7)

//   0= Oneshot, single raise returned   1= Continuous, raise is returned 
//      persistently whenever raise event is 
//      true until this register is reprogrammed
//      such that SIGNAL_RAISE2_SELECT=NONE or
//      SIGNAL_RAISE2_TYPE=ONESHOT
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_TYPE_SHIFT                 _MK_SHIFT_CONST(12)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_TYPE_FIELD                 (_MK_MASK_CONST(0x1) << DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_TYPE_SHIFT)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_TYPE_RANGE                 12:12
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_TYPE_WOFFSET                       0x0
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_TYPE_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_TYPE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_TYPE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_TYPE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_TYPE_ONESHOT                       _MK_ENUM_CONST(0)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_TYPE_CONT                  _MK_ENUM_CONST(1)

// Signal Raise Channel ID
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_CHANNEL_ID_SHIFT                   _MK_SHIFT_CONST(16)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_CHANNEL_ID_FIELD                   (_MK_MASK_CONST(0xf) << DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_CHANNEL_ID_SHIFT)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_CHANNEL_ID_RANGE                   19:16
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_CHANNEL_ID_WOFFSET                 0x0
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_CHANNEL_ID_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_CHANNEL_ID_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_CHANNEL_ID_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE2_0_SIGNAL_RAISE2_CHANNEL_ID_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// When written, next occurance of the selected SIGNAL will cause a RAISE to be sent to the
// host.  Software must not write this register if a previous request (from previous write) is
// still outstanding. Added SIGNAL_RAISE3_TYPE option so that multiple raises can be returned
// without software intervention.

// Register DC_CMD_SIGNAL_RAISE3_0  
#define DC_CMD_SIGNAL_RAISE3_0                  _MK_ADDR_CONST(0x3e)
#define DC_CMD_SIGNAL_RAISE3_0_SECURE                   0x0
#define DC_CMD_SIGNAL_RAISE3_0_WORD_COUNT                       0x1
#define DC_CMD_SIGNAL_RAISE3_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE3_0_RESET_MASK                       _MK_MASK_CONST(0x1000)
#define DC_CMD_SIGNAL_RAISE3_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE3_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE3_0_READ_MASK                        _MK_MASK_CONST(0xf171f)
#define DC_CMD_SIGNAL_RAISE3_0_WRITE_MASK                       _MK_MASK_CONST(0xf171f)
// bit number to raise
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_VECTOR_SHIFT                       _MK_SHIFT_CONST(0)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_VECTOR_FIELD                       (_MK_MASK_CONST(0x1f) << DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_VECTOR_SHIFT)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_VECTOR_RANGE                       4:0
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_VECTOR_WOFFSET                     0x0
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_VECTOR_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_VECTOR_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_VECTOR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_VECTOR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// which signal to raise on   0= none, no raise sent back
//   1= Frame End signal
//   2= V Blank signal
//   3= V Pulse 3 signal
//   4= Rising edge of V Blank signal
//   5= Falling edge of V Blank signal
//   6= Rising edge of V Pulse 3 signal
//   7= Falling edge of V Pulse 3 signal
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_SELECT_SHIFT                       _MK_SHIFT_CONST(8)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_SELECT_FIELD                       (_MK_MASK_CONST(0x7) << DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_SELECT_SHIFT)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_SELECT_RANGE                       10:8
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_SELECT_WOFFSET                     0x0
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_SELECT_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_SELECT_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_SELECT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_SELECT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_SELECT_NONE                        _MK_ENUM_CONST(0)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_SELECT_FRAME_END                   _MK_ENUM_CONST(1)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_SELECT_VBLANK                      _MK_ENUM_CONST(2)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_SELECT_VPULSE3                     _MK_ENUM_CONST(3)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_SELECT_VBLANK_START                        _MK_ENUM_CONST(4)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_SELECT_VBLANK_END                  _MK_ENUM_CONST(5)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_SELECT_VPULSE3_START                       _MK_ENUM_CONST(6)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_SELECT_VPULSE3_END                 _MK_ENUM_CONST(7)

//   0= Oneshot, single raise returned   1= Continuous, raise is returned 
//      persistently whenever raise event is 
//      true until this register is reprogrammed
//      such that SIGNAL_RAISE3_SELECT=NONE or
//      SIGNAL_RAISE3_TYPE=ONESHOT
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_TYPE_SHIFT                 _MK_SHIFT_CONST(12)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_TYPE_FIELD                 (_MK_MASK_CONST(0x1) << DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_TYPE_SHIFT)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_TYPE_RANGE                 12:12
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_TYPE_WOFFSET                       0x0
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_TYPE_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_TYPE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_TYPE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_TYPE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_TYPE_ONESHOT                       _MK_ENUM_CONST(0)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_TYPE_CONT                  _MK_ENUM_CONST(1)

// Signal Raise Channel ID
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_CHANNEL_ID_SHIFT                   _MK_SHIFT_CONST(16)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_CHANNEL_ID_FIELD                   (_MK_MASK_CONST(0xf) << DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_CHANNEL_ID_SHIFT)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_CHANNEL_ID_RANGE                   19:16
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_CHANNEL_ID_WOFFSET                 0x0
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_CHANNEL_ID_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_CHANNEL_ID_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_CHANNEL_ID_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_SIGNAL_RAISE3_0_SIGNAL_RAISE3_CHANNEL_ID_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Reserved address 63 [0x3f] 

// Register DC_CMD_STATE_ACCESS_0  // Double/triple buffers read and write access control
#define DC_CMD_STATE_ACCESS_0                   _MK_ADDR_CONST(0x40)
#define DC_CMD_STATE_ACCESS_0_SECURE                    0x0
#define DC_CMD_STATE_ACCESS_0_WORD_COUNT                        0x1
#define DC_CMD_STATE_ACCESS_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_ACCESS_0_RESET_MASK                        _MK_MASK_CONST(0x5)
#define DC_CMD_STATE_ACCESS_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_ACCESS_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_ACCESS_0_READ_MASK                         _MK_MASK_CONST(0x5)
#define DC_CMD_STATE_ACCESS_0_WRITE_MASK                        _MK_MASK_CONST(0x5)
// Read access control   0= read assembly state
//   1= read active state
// Arm state register read is not controled by this mux,
// but by reading the registers with "_NS" suffix
#define DC_CMD_STATE_ACCESS_0_READ_MUX_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_CMD_STATE_ACCESS_0_READ_MUX_FIELD                    (_MK_MASK_CONST(0x1) << DC_CMD_STATE_ACCESS_0_READ_MUX_SHIFT)
#define DC_CMD_STATE_ACCESS_0_READ_MUX_RANGE                    0:0
#define DC_CMD_STATE_ACCESS_0_READ_MUX_WOFFSET                  0x0
#define DC_CMD_STATE_ACCESS_0_READ_MUX_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_ACCESS_0_READ_MUX_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_CMD_STATE_ACCESS_0_READ_MUX_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_ACCESS_0_READ_MUX_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_ACCESS_0_READ_MUX_ASSEMBLY                 _MK_ENUM_CONST(0)
#define DC_CMD_STATE_ACCESS_0_READ_MUX_ACTIVE                   _MK_ENUM_CONST(1)

// Write access control   0= write assembly state
//   1= write active state
// When set to ACTIVE, rgister writes also propogate to assembly set
// for double buffered registers, to both assembly and arm set for
// triple buffered registers.
#define DC_CMD_STATE_ACCESS_0_WRITE_MUX_SHIFT                   _MK_SHIFT_CONST(2)
#define DC_CMD_STATE_ACCESS_0_WRITE_MUX_FIELD                   (_MK_MASK_CONST(0x1) << DC_CMD_STATE_ACCESS_0_WRITE_MUX_SHIFT)
#define DC_CMD_STATE_ACCESS_0_WRITE_MUX_RANGE                   2:2
#define DC_CMD_STATE_ACCESS_0_WRITE_MUX_WOFFSET                 0x0
#define DC_CMD_STATE_ACCESS_0_WRITE_MUX_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_ACCESS_0_WRITE_MUX_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_CMD_STATE_ACCESS_0_WRITE_MUX_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_ACCESS_0_WRITE_MUX_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_ACCESS_0_WRITE_MUX_ASSEMBLY                        _MK_ENUM_CONST(0)
#define DC_CMD_STATE_ACCESS_0_WRITE_MUX_ACTIVE                  _MK_ENUM_CONST(1)

// State control register for activating/arming new reigster state
// Restrictions :
// -- ACT_REQ can not be programmed at the same time the corresponding "UPDATE" is programmed.
//    If so desired, it should be split into two consecutive writes to this register.

// Register DC_CMD_STATE_CONTROL_0  // State Control for activating/arming new register state.
#define DC_CMD_STATE_CONTROL_0                  _MK_ADDR_CONST(0x41)
#define DC_CMD_STATE_CONTROL_0_SECURE                   0x0
#define DC_CMD_STATE_CONTROL_0_WORD_COUNT                       0x1
#define DC_CMD_STATE_CONTROL_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_RESET_MASK                       _MK_MASK_CONST(0x1000f0f)
#define DC_CMD_STATE_CONTROL_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_READ_MASK                        _MK_MASK_CONST(0x1000f0f)
#define DC_CMD_STATE_CONTROL_0_WRITE_MASK                       _MK_MASK_CONST(0x1000f0f)
// Non-window-specific   0= no req pending/req completed
//   1= activation requested/pending
#define DC_CMD_STATE_CONTROL_0_GENERAL_ACT_REQ_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_CMD_STATE_CONTROL_0_GENERAL_ACT_REQ_FIELD                    (_MK_MASK_CONST(0x1) << DC_CMD_STATE_CONTROL_0_GENERAL_ACT_REQ_SHIFT)
#define DC_CMD_STATE_CONTROL_0_GENERAL_ACT_REQ_RANGE                    0:0
#define DC_CMD_STATE_CONTROL_0_GENERAL_ACT_REQ_WOFFSET                  0x0
#define DC_CMD_STATE_CONTROL_0_GENERAL_ACT_REQ_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_GENERAL_ACT_REQ_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_CMD_STATE_CONTROL_0_GENERAL_ACT_REQ_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_GENERAL_ACT_REQ_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_GENERAL_ACT_REQ_DISABLE                  _MK_ENUM_CONST(0)
#define DC_CMD_STATE_CONTROL_0_GENERAL_ACT_REQ_ENABLE                   _MK_ENUM_CONST(1)

// Window A activation request   0= no req pending/req completed
//   1= activation requested/pending
#define DC_CMD_STATE_CONTROL_0_WIN_A_ACT_REQ_SHIFT                      _MK_SHIFT_CONST(1)
#define DC_CMD_STATE_CONTROL_0_WIN_A_ACT_REQ_FIELD                      (_MK_MASK_CONST(0x1) << DC_CMD_STATE_CONTROL_0_WIN_A_ACT_REQ_SHIFT)
#define DC_CMD_STATE_CONTROL_0_WIN_A_ACT_REQ_RANGE                      1:1
#define DC_CMD_STATE_CONTROL_0_WIN_A_ACT_REQ_WOFFSET                    0x0
#define DC_CMD_STATE_CONTROL_0_WIN_A_ACT_REQ_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_WIN_A_ACT_REQ_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_CMD_STATE_CONTROL_0_WIN_A_ACT_REQ_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_WIN_A_ACT_REQ_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_WIN_A_ACT_REQ_DISABLE                    _MK_ENUM_CONST(0)
#define DC_CMD_STATE_CONTROL_0_WIN_A_ACT_REQ_ENABLE                     _MK_ENUM_CONST(1)

// Window B activation request   0= no req pending/req completed
//   1= activation requested/pending
#define DC_CMD_STATE_CONTROL_0_WIN_B_ACT_REQ_SHIFT                      _MK_SHIFT_CONST(2)
#define DC_CMD_STATE_CONTROL_0_WIN_B_ACT_REQ_FIELD                      (_MK_MASK_CONST(0x1) << DC_CMD_STATE_CONTROL_0_WIN_B_ACT_REQ_SHIFT)
#define DC_CMD_STATE_CONTROL_0_WIN_B_ACT_REQ_RANGE                      2:2
#define DC_CMD_STATE_CONTROL_0_WIN_B_ACT_REQ_WOFFSET                    0x0
#define DC_CMD_STATE_CONTROL_0_WIN_B_ACT_REQ_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_WIN_B_ACT_REQ_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_CMD_STATE_CONTROL_0_WIN_B_ACT_REQ_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_WIN_B_ACT_REQ_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_WIN_B_ACT_REQ_DISABLE                    _MK_ENUM_CONST(0)
#define DC_CMD_STATE_CONTROL_0_WIN_B_ACT_REQ_ENABLE                     _MK_ENUM_CONST(1)

// Window C activation request   0= no req pending/req completed
//   1= activation requested/pending
#define DC_CMD_STATE_CONTROL_0_WIN_C_ACT_REQ_SHIFT                      _MK_SHIFT_CONST(3)
#define DC_CMD_STATE_CONTROL_0_WIN_C_ACT_REQ_FIELD                      (_MK_MASK_CONST(0x1) << DC_CMD_STATE_CONTROL_0_WIN_C_ACT_REQ_SHIFT)
#define DC_CMD_STATE_CONTROL_0_WIN_C_ACT_REQ_RANGE                      3:3
#define DC_CMD_STATE_CONTROL_0_WIN_C_ACT_REQ_WOFFSET                    0x0
#define DC_CMD_STATE_CONTROL_0_WIN_C_ACT_REQ_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_WIN_C_ACT_REQ_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_CMD_STATE_CONTROL_0_WIN_C_ACT_REQ_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_WIN_C_ACT_REQ_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_WIN_C_ACT_REQ_DISABLE                    _MK_ENUM_CONST(0)
#define DC_CMD_STATE_CONTROL_0_WIN_C_ACT_REQ_ENABLE                     _MK_ENUM_CONST(1)

// Trigger for arming state (from assembly to armed state) for a subset of the triple buffered registers.
// This register is also known as "Update Register"
//   0= disable, 1= enable
#define DC_CMD_STATE_CONTROL_0_GENERAL_UPDATE_SHIFT                     _MK_SHIFT_CONST(8)
#define DC_CMD_STATE_CONTROL_0_GENERAL_UPDATE_FIELD                     (_MK_MASK_CONST(0x1) << DC_CMD_STATE_CONTROL_0_GENERAL_UPDATE_SHIFT)
#define DC_CMD_STATE_CONTROL_0_GENERAL_UPDATE_RANGE                     8:8
#define DC_CMD_STATE_CONTROL_0_GENERAL_UPDATE_WOFFSET                   0x0
#define DC_CMD_STATE_CONTROL_0_GENERAL_UPDATE_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_GENERAL_UPDATE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_CMD_STATE_CONTROL_0_GENERAL_UPDATE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_GENERAL_UPDATE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_GENERAL_UPDATE_DISABLE                   _MK_ENUM_CONST(0)
#define DC_CMD_STATE_CONTROL_0_GENERAL_UPDATE_ENABLE                    _MK_ENUM_CONST(1)

// Trigger for arming state (from assembly to armed state) for the win A subset of the triple buffered registers.
// This register is also known as "Update Register"
//   0= disable, 1= enable
#define DC_CMD_STATE_CONTROL_0_WIN_A_UPDATE_SHIFT                       _MK_SHIFT_CONST(9)
#define DC_CMD_STATE_CONTROL_0_WIN_A_UPDATE_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_STATE_CONTROL_0_WIN_A_UPDATE_SHIFT)
#define DC_CMD_STATE_CONTROL_0_WIN_A_UPDATE_RANGE                       9:9
#define DC_CMD_STATE_CONTROL_0_WIN_A_UPDATE_WOFFSET                     0x0
#define DC_CMD_STATE_CONTROL_0_WIN_A_UPDATE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_WIN_A_UPDATE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_STATE_CONTROL_0_WIN_A_UPDATE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_WIN_A_UPDATE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_WIN_A_UPDATE_DISABLE                     _MK_ENUM_CONST(0)
#define DC_CMD_STATE_CONTROL_0_WIN_A_UPDATE_ENABLE                      _MK_ENUM_CONST(1)

// Trigger for arming state (from assembly to armed state) for the win B subset of the triple buffered registers.
// This register is also known as "Update Register"
//   0= disable, 1= enable
#define DC_CMD_STATE_CONTROL_0_WIN_B_UPDATE_SHIFT                       _MK_SHIFT_CONST(10)
#define DC_CMD_STATE_CONTROL_0_WIN_B_UPDATE_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_STATE_CONTROL_0_WIN_B_UPDATE_SHIFT)
#define DC_CMD_STATE_CONTROL_0_WIN_B_UPDATE_RANGE                       10:10
#define DC_CMD_STATE_CONTROL_0_WIN_B_UPDATE_WOFFSET                     0x0
#define DC_CMD_STATE_CONTROL_0_WIN_B_UPDATE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_WIN_B_UPDATE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_STATE_CONTROL_0_WIN_B_UPDATE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_WIN_B_UPDATE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_WIN_B_UPDATE_DISABLE                     _MK_ENUM_CONST(0)
#define DC_CMD_STATE_CONTROL_0_WIN_B_UPDATE_ENABLE                      _MK_ENUM_CONST(1)

// Trigger for arming state (from assembly to armed state) for the win C subset of the triple buffered registers.
// This register is also known as "Update Register"
//   0= disable, 1= enable
#define DC_CMD_STATE_CONTROL_0_WIN_C_UPDATE_SHIFT                       _MK_SHIFT_CONST(11)
#define DC_CMD_STATE_CONTROL_0_WIN_C_UPDATE_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_STATE_CONTROL_0_WIN_C_UPDATE_SHIFT)
#define DC_CMD_STATE_CONTROL_0_WIN_C_UPDATE_RANGE                       11:11
#define DC_CMD_STATE_CONTROL_0_WIN_C_UPDATE_WOFFSET                     0x0
#define DC_CMD_STATE_CONTROL_0_WIN_C_UPDATE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_WIN_C_UPDATE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_STATE_CONTROL_0_WIN_C_UPDATE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_WIN_C_UPDATE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_WIN_C_UPDATE_DISABLE                     _MK_ENUM_CONST(0)
#define DC_CMD_STATE_CONTROL_0_WIN_C_UPDATE_ENABLE                      _MK_ENUM_CONST(1)

// Host trigger enable. Effective only in Non-continuous mode. The exception is that when TVO is enabled, this trigger
// is ignored so as not to corrupt TV output.
// Note that when this field is enabled, GENERAL_ACT_REQ 
// must be enabled at the same time.
//   0= disable: no frame is triggered 
#define DC_CMD_STATE_CONTROL_0_NC_HOST_TRIG_ENABLE_SHIFT                        _MK_SHIFT_CONST(24)
#define DC_CMD_STATE_CONTROL_0_NC_HOST_TRIG_ENABLE_FIELD                        (_MK_MASK_CONST(0x1) << DC_CMD_STATE_CONTROL_0_NC_HOST_TRIG_ENABLE_SHIFT)
#define DC_CMD_STATE_CONTROL_0_NC_HOST_TRIG_ENABLE_RANGE                        24:24
#define DC_CMD_STATE_CONTROL_0_NC_HOST_TRIG_ENABLE_WOFFSET                      0x0
#define DC_CMD_STATE_CONTROL_0_NC_HOST_TRIG_ENABLE_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_NC_HOST_TRIG_ENABLE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_CMD_STATE_CONTROL_0_NC_HOST_TRIG_ENABLE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_NC_HOST_TRIG_ENABLE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_CMD_STATE_CONTROL_0_NC_HOST_TRIG_ENABLE_DISABLE                      _MK_ENUM_CONST(0)
#define DC_CMD_STATE_CONTROL_0_NC_HOST_TRIG_ENABLE_ENABLE                       _MK_ENUM_CONST(1)

// Class: Display Window Programming Header

// Register DC_CMD_DISPLAY_WINDOW_HEADER_0  // Display Window Header for programming
//  display windows and their corresponding
//  buffer start addresses. 
#define DC_CMD_DISPLAY_WINDOW_HEADER_0                  _MK_ADDR_CONST(0x42)
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_SECURE                   0x0
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WORD_COUNT                       0x1
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_RESET_MASK                       _MK_MASK_CONST(0x70)
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_READ_MASK                        _MK_MASK_CONST(0x70)
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WRITE_MASK                       _MK_MASK_CONST(0x70)
// Window A Select   0= disable window A programming
//   1= enable window A programming
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_A_SELECT_SHIFT                    _MK_SHIFT_CONST(4)
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_A_SELECT_FIELD                    (_MK_MASK_CONST(0x1) << DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_A_SELECT_SHIFT)
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_A_SELECT_RANGE                    4:4
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_A_SELECT_WOFFSET                  0x0
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_A_SELECT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_A_SELECT_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_A_SELECT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_A_SELECT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_A_SELECT_DISABLE                  _MK_ENUM_CONST(0)
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_A_SELECT_ENABLE                   _MK_ENUM_CONST(1)

// Window B Select   0= disable window B programming
//   1= enable window B programming
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_B_SELECT_SHIFT                    _MK_SHIFT_CONST(5)
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_B_SELECT_FIELD                    (_MK_MASK_CONST(0x1) << DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_B_SELECT_SHIFT)
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_B_SELECT_RANGE                    5:5
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_B_SELECT_WOFFSET                  0x0
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_B_SELECT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_B_SELECT_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_B_SELECT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_B_SELECT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_B_SELECT_DISABLE                  _MK_ENUM_CONST(0)
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_B_SELECT_ENABLE                   _MK_ENUM_CONST(1)

// Window C Select   0= disable window C programming
//   1= enable window C programming
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_C_SELECT_SHIFT                    _MK_SHIFT_CONST(6)
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_C_SELECT_FIELD                    (_MK_MASK_CONST(0x1) << DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_C_SELECT_SHIFT)
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_C_SELECT_RANGE                    6:6
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_C_SELECT_WOFFSET                  0x0
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_C_SELECT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_C_SELECT_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_C_SELECT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_C_SELECT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_C_SELECT_DISABLE                  _MK_ENUM_CONST(0)
#define DC_CMD_DISPLAY_WINDOW_HEADER_0_WINDOW_C_SELECT_ENABLE                   _MK_ENUM_CONST(1)

// Register activation options

// Register DC_CMD_REG_ACT_CONTROL_0  // Register activation options
#define DC_CMD_REG_ACT_CONTROL_0                        _MK_ADDR_CONST(0x43)
#define DC_CMD_REG_ACT_CONTROL_0_SECURE                         0x0
#define DC_CMD_REG_ACT_CONTROL_0_WORD_COUNT                     0x1
#define DC_CMD_REG_ACT_CONTROL_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define DC_CMD_REG_ACT_CONTROL_0_RESET_MASK                     _MK_MASK_CONST(0x55)
#define DC_CMD_REG_ACT_CONTROL_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define DC_CMD_REG_ACT_CONTROL_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_CMD_REG_ACT_CONTROL_0_READ_MASK                      _MK_MASK_CONST(0x55)
#define DC_CMD_REG_ACT_CONTROL_0_WRITE_MASK                     _MK_MASK_CONST(0x55)
// Select which counter to use for general activation   0= vertical counter
//   1= horizontal counter
#define DC_CMD_REG_ACT_CONTROL_0_GENERAL_ACT_CNTR_SEL_SHIFT                     _MK_SHIFT_CONST(0)
#define DC_CMD_REG_ACT_CONTROL_0_GENERAL_ACT_CNTR_SEL_FIELD                     (_MK_MASK_CONST(0x1) << DC_CMD_REG_ACT_CONTROL_0_GENERAL_ACT_CNTR_SEL_SHIFT)
#define DC_CMD_REG_ACT_CONTROL_0_GENERAL_ACT_CNTR_SEL_RANGE                     0:0
#define DC_CMD_REG_ACT_CONTROL_0_GENERAL_ACT_CNTR_SEL_WOFFSET                   0x0
#define DC_CMD_REG_ACT_CONTROL_0_GENERAL_ACT_CNTR_SEL_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_CMD_REG_ACT_CONTROL_0_GENERAL_ACT_CNTR_SEL_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_CMD_REG_ACT_CONTROL_0_GENERAL_ACT_CNTR_SEL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_CMD_REG_ACT_CONTROL_0_GENERAL_ACT_CNTR_SEL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_CMD_REG_ACT_CONTROL_0_GENERAL_ACT_CNTR_SEL_VCOUNTER                  _MK_ENUM_CONST(0)
#define DC_CMD_REG_ACT_CONTROL_0_GENERAL_ACT_CNTR_SEL_HCOUNTER                  _MK_ENUM_CONST(1)

// Select which counter to use for window A activation   0= vertical counter
//   1= horizontal counter
#define DC_CMD_REG_ACT_CONTROL_0_WIN_A_ACT_CNTR_SEL_SHIFT                       _MK_SHIFT_CONST(2)
#define DC_CMD_REG_ACT_CONTROL_0_WIN_A_ACT_CNTR_SEL_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_REG_ACT_CONTROL_0_WIN_A_ACT_CNTR_SEL_SHIFT)
#define DC_CMD_REG_ACT_CONTROL_0_WIN_A_ACT_CNTR_SEL_RANGE                       2:2
#define DC_CMD_REG_ACT_CONTROL_0_WIN_A_ACT_CNTR_SEL_WOFFSET                     0x0
#define DC_CMD_REG_ACT_CONTROL_0_WIN_A_ACT_CNTR_SEL_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_REG_ACT_CONTROL_0_WIN_A_ACT_CNTR_SEL_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_REG_ACT_CONTROL_0_WIN_A_ACT_CNTR_SEL_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_REG_ACT_CONTROL_0_WIN_A_ACT_CNTR_SEL_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_REG_ACT_CONTROL_0_WIN_A_ACT_CNTR_SEL_VCOUNTER                    _MK_ENUM_CONST(0)
#define DC_CMD_REG_ACT_CONTROL_0_WIN_A_ACT_CNTR_SEL_HCOUNTER                    _MK_ENUM_CONST(1)

// Select which counter to use for window B activation   0= vertical counter
//   1= horizontal counter
#define DC_CMD_REG_ACT_CONTROL_0_WIN_B_ACT_CNTR_SEL_SHIFT                       _MK_SHIFT_CONST(4)
#define DC_CMD_REG_ACT_CONTROL_0_WIN_B_ACT_CNTR_SEL_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_REG_ACT_CONTROL_0_WIN_B_ACT_CNTR_SEL_SHIFT)
#define DC_CMD_REG_ACT_CONTROL_0_WIN_B_ACT_CNTR_SEL_RANGE                       4:4
#define DC_CMD_REG_ACT_CONTROL_0_WIN_B_ACT_CNTR_SEL_WOFFSET                     0x0
#define DC_CMD_REG_ACT_CONTROL_0_WIN_B_ACT_CNTR_SEL_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_REG_ACT_CONTROL_0_WIN_B_ACT_CNTR_SEL_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_REG_ACT_CONTROL_0_WIN_B_ACT_CNTR_SEL_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_REG_ACT_CONTROL_0_WIN_B_ACT_CNTR_SEL_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_REG_ACT_CONTROL_0_WIN_B_ACT_CNTR_SEL_VCOUNTER                    _MK_ENUM_CONST(0)
#define DC_CMD_REG_ACT_CONTROL_0_WIN_B_ACT_CNTR_SEL_HCOUNTER                    _MK_ENUM_CONST(1)

// Select which counter to use for window C activation   0= vertical counter
//   1= horizontal counter
#define DC_CMD_REG_ACT_CONTROL_0_WIN_C_ACT_CNTR_SEL_SHIFT                       _MK_SHIFT_CONST(6)
#define DC_CMD_REG_ACT_CONTROL_0_WIN_C_ACT_CNTR_SEL_FIELD                       (_MK_MASK_CONST(0x1) << DC_CMD_REG_ACT_CONTROL_0_WIN_C_ACT_CNTR_SEL_SHIFT)
#define DC_CMD_REG_ACT_CONTROL_0_WIN_C_ACT_CNTR_SEL_RANGE                       6:6
#define DC_CMD_REG_ACT_CONTROL_0_WIN_C_ACT_CNTR_SEL_WOFFSET                     0x0
#define DC_CMD_REG_ACT_CONTROL_0_WIN_C_ACT_CNTR_SEL_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_CMD_REG_ACT_CONTROL_0_WIN_C_ACT_CNTR_SEL_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_CMD_REG_ACT_CONTROL_0_WIN_C_ACT_CNTR_SEL_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_CMD_REG_ACT_CONTROL_0_WIN_C_ACT_CNTR_SEL_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_CMD_REG_ACT_CONTROL_0_WIN_C_ACT_CNTR_SEL_VCOUNTER                    _MK_ENUM_CONST(0)
#define DC_CMD_REG_ACT_CONTROL_0_WIN_C_ACT_CNTR_SEL_HCOUNTER                    _MK_ENUM_CONST(1)

// CRC is provided for at speed testing and diagnostic. When CRC is enabled, the CRC logic
// waits for the next VSync pulse or the one after that (depending on CRC_WAIT) and then it
// captures one frame of data at the end of display pipeline and computes the CRC value.
// After, one frame of data is captured, the CRC logic will stop capturing data. 
// When CRC_INTPU_DATA = FULLL_FRAME, DISPLAY_COMMAND.DISPLAY_CTRL_MODE should be programmed 
// to C_DISPLAY so that CRC works properly.
// When CRC_INTPU_DATA = ACTIVE_DATA, it can work on both NC_DISPLAY and C_DISPLAY modes,
// and can work for multiple frames if CRC is checked, disabled, and re-enabled after
// the end of frame v-active area and before next vsync.
// CRC logic takes 8-bit of control signals and 24-bit RGB pixel after dither and after display
// color (R and B) swap option.
// Input [31:0] into CRC depends on CRC_INPUT_DATA. If programmed as FULL_FRAME, input data is 
// {LVP1, LPV0, LHP2, LHP1, LHP0, VSYNC, HSYNC, ACTIVE, R[7:0], G[7:0], B[7:0]} and CRC runs
// over the entire frame (including blank). If programmed as ACTIVE_DATA, input data is 
// {R[7:0], G[7:0], B[7:0]} and CRC runs only during active display area.

// Register DC_COM_CRC_CONTROL_0  // CRC Control
#define DC_COM_CRC_CONTROL_0                    _MK_ADDR_CONST(0x300)
#define DC_COM_CRC_CONTROL_0_SECURE                     0x0
#define DC_COM_CRC_CONTROL_0_WORD_COUNT                         0x1
#define DC_COM_CRC_CONTROL_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define DC_COM_CRC_CONTROL_0_RESET_MASK                         _MK_MASK_CONST(0xf)
#define DC_COM_CRC_CONTROL_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define DC_COM_CRC_CONTROL_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_CRC_CONTROL_0_READ_MASK                  _MK_MASK_CONST(0xf)
#define DC_COM_CRC_CONTROL_0_WRITE_MASK                         _MK_MASK_CONST(0xf)
// CRC Enable   0= disable
//   1= enable
#define DC_COM_CRC_CONTROL_0_CRC_ENABLE_SHIFT                   _MK_SHIFT_CONST(0)
#define DC_COM_CRC_CONTROL_0_CRC_ENABLE_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_CRC_CONTROL_0_CRC_ENABLE_SHIFT)
#define DC_COM_CRC_CONTROL_0_CRC_ENABLE_RANGE                   0:0
#define DC_COM_CRC_CONTROL_0_CRC_ENABLE_WOFFSET                 0x0
#define DC_COM_CRC_CONTROL_0_CRC_ENABLE_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_CRC_CONTROL_0_CRC_ENABLE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_CRC_CONTROL_0_CRC_ENABLE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_CRC_CONTROL_0_CRC_ENABLE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_COM_CRC_CONTROL_0_CRC_ENABLE_DISABLE                 _MK_ENUM_CONST(0)
#define DC_COM_CRC_CONTROL_0_CRC_ENABLE_ENABLE                  _MK_ENUM_CONST(1)

// CRC Wait
//   0= 1 Vsync
//   1= 2 Vsync
#define DC_COM_CRC_CONTROL_0_CRC_WAIT_SHIFT                     _MK_SHIFT_CONST(1)
#define DC_COM_CRC_CONTROL_0_CRC_WAIT_FIELD                     (_MK_MASK_CONST(0x1) << DC_COM_CRC_CONTROL_0_CRC_WAIT_SHIFT)
#define DC_COM_CRC_CONTROL_0_CRC_WAIT_RANGE                     1:1
#define DC_COM_CRC_CONTROL_0_CRC_WAIT_WOFFSET                   0x0
#define DC_COM_CRC_CONTROL_0_CRC_WAIT_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_CRC_CONTROL_0_CRC_WAIT_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_COM_CRC_CONTROL_0_CRC_WAIT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_CRC_CONTROL_0_CRC_WAIT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// CRC input data   0= Full frame (RGB data and control)
//   1= Active display (Only RGB data) 
#define DC_COM_CRC_CONTROL_0_CRC_INPUT_DATA_SHIFT                       _MK_SHIFT_CONST(2)
#define DC_COM_CRC_CONTROL_0_CRC_INPUT_DATA_FIELD                       (_MK_MASK_CONST(0x1) << DC_COM_CRC_CONTROL_0_CRC_INPUT_DATA_SHIFT)
#define DC_COM_CRC_CONTROL_0_CRC_INPUT_DATA_RANGE                       2:2
#define DC_COM_CRC_CONTROL_0_CRC_INPUT_DATA_WOFFSET                     0x0
#define DC_COM_CRC_CONTROL_0_CRC_INPUT_DATA_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_CRC_CONTROL_0_CRC_INPUT_DATA_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_COM_CRC_CONTROL_0_CRC_INPUT_DATA_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_CRC_CONTROL_0_CRC_INPUT_DATA_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_CRC_CONTROL_0_CRC_INPUT_DATA_FULL_FRAME                  _MK_ENUM_CONST(0)
#define DC_COM_CRC_CONTROL_0_CRC_INPUT_DATA_ACTIVE_DATA                 _MK_ENUM_CONST(1)

// CRC always: calculate CRC for every following frames  Must use with CRC_INPUT_DATA == ACTIVE_DATA
//  if enabled, CRC_WAIT field is ignored.
//   0= disable
//   1= enable
#define DC_COM_CRC_CONTROL_0_CRC_ALWAYS_SHIFT                   _MK_SHIFT_CONST(3)
#define DC_COM_CRC_CONTROL_0_CRC_ALWAYS_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_CRC_CONTROL_0_CRC_ALWAYS_SHIFT)
#define DC_COM_CRC_CONTROL_0_CRC_ALWAYS_RANGE                   3:3
#define DC_COM_CRC_CONTROL_0_CRC_ALWAYS_WOFFSET                 0x0
#define DC_COM_CRC_CONTROL_0_CRC_ALWAYS_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_CRC_CONTROL_0_CRC_ALWAYS_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_CRC_CONTROL_0_CRC_ALWAYS_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_CRC_CONTROL_0_CRC_ALWAYS_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_COM_CRC_CONTROL_0_CRC_ALWAYS_DISABLE                 _MK_ENUM_CONST(0)
#define DC_COM_CRC_CONTROL_0_CRC_ALWAYS_ENABLE                  _MK_ENUM_CONST(1)

// CRC Checksum
// This register can be read by host after CRC logic stops capturing data.

// Register DC_COM_CRC_CHECKSUM_0  // CRC Checksum
#define DC_COM_CRC_CHECKSUM_0                   _MK_ADDR_CONST(0x301)
#define DC_COM_CRC_CHECKSUM_0_SECURE                    0x0
#define DC_COM_CRC_CHECKSUM_0_WORD_COUNT                        0x1
#define DC_COM_CRC_CHECKSUM_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_COM_CRC_CHECKSUM_0_RESET_MASK                        _MK_MASK_CONST(0xffffffff)
#define DC_COM_CRC_CHECKSUM_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_COM_CRC_CHECKSUM_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_COM_CRC_CHECKSUM_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define DC_COM_CRC_CHECKSUM_0_WRITE_MASK                        _MK_MASK_CONST(0x0)
// CRC Checksum
#define DC_COM_CRC_CHECKSUM_0_CRC_CHECKSUM_SHIFT                        _MK_SHIFT_CONST(0)
#define DC_COM_CRC_CHECKSUM_0_CRC_CHECKSUM_FIELD                        (_MK_MASK_CONST(0xffffffff) << DC_COM_CRC_CHECKSUM_0_CRC_CHECKSUM_SHIFT)
#define DC_COM_CRC_CHECKSUM_0_CRC_CHECKSUM_RANGE                        31:0
#define DC_COM_CRC_CHECKSUM_0_CRC_CHECKSUM_WOFFSET                      0x0
#define DC_COM_CRC_CHECKSUM_0_CRC_CHECKSUM_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_CRC_CHECKSUM_0_CRC_CHECKSUM_DEFAULT_MASK                 _MK_MASK_CONST(0xffffffff)
#define DC_COM_CRC_CHECKSUM_0_CRC_CHECKSUM_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_CRC_CHECKSUM_0_CRC_CHECKSUM_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Pin Output Enable registers

// Register DC_COM_PIN_OUTPUT_ENABLE0_0  // Pin Output Enable 0
#define DC_COM_PIN_OUTPUT_ENABLE0_0                     _MK_ADDR_CONST(0x302)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_SECURE                      0x0
#define DC_COM_PIN_OUTPUT_ENABLE0_0_WORD_COUNT                  0x1
#define DC_COM_PIN_OUTPUT_ENABLE0_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_RESET_MASK                  _MK_MASK_CONST(0x55555555)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_READ_MASK                   _MK_MASK_CONST(0x55555555)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_WRITE_MASK                  _MK_MASK_CONST(0x55555555)
// LD0 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD0_OUTPUT_ENABLE_SHIFT                     _MK_SHIFT_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD0_OUTPUT_ENABLE_FIELD                     (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE0_0_LD0_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD0_OUTPUT_ENABLE_RANGE                     0:0
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD0_OUTPUT_ENABLE_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD0_OUTPUT_ENABLE_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD0_OUTPUT_ENABLE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD0_OUTPUT_ENABLE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD0_OUTPUT_ENABLE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD0_OUTPUT_ENABLE_ENABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD0_OUTPUT_ENABLE_DISABLE                   _MK_ENUM_CONST(1)

// LD1 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD1_OUTPUT_ENABLE_SHIFT                     _MK_SHIFT_CONST(2)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD1_OUTPUT_ENABLE_FIELD                     (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE0_0_LD1_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD1_OUTPUT_ENABLE_RANGE                     2:2
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD1_OUTPUT_ENABLE_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD1_OUTPUT_ENABLE_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD1_OUTPUT_ENABLE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD1_OUTPUT_ENABLE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD1_OUTPUT_ENABLE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD1_OUTPUT_ENABLE_ENABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD1_OUTPUT_ENABLE_DISABLE                   _MK_ENUM_CONST(1)

// LD2 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD2_OUTPUT_ENABLE_SHIFT                     _MK_SHIFT_CONST(4)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD2_OUTPUT_ENABLE_FIELD                     (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE0_0_LD2_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD2_OUTPUT_ENABLE_RANGE                     4:4
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD2_OUTPUT_ENABLE_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD2_OUTPUT_ENABLE_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD2_OUTPUT_ENABLE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD2_OUTPUT_ENABLE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD2_OUTPUT_ENABLE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD2_OUTPUT_ENABLE_ENABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD2_OUTPUT_ENABLE_DISABLE                   _MK_ENUM_CONST(1)

// LD3 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD3_OUTPUT_ENABLE_SHIFT                     _MK_SHIFT_CONST(6)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD3_OUTPUT_ENABLE_FIELD                     (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE0_0_LD3_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD3_OUTPUT_ENABLE_RANGE                     6:6
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD3_OUTPUT_ENABLE_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD3_OUTPUT_ENABLE_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD3_OUTPUT_ENABLE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD3_OUTPUT_ENABLE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD3_OUTPUT_ENABLE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD3_OUTPUT_ENABLE_ENABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD3_OUTPUT_ENABLE_DISABLE                   _MK_ENUM_CONST(1)

// LD4 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD4_OUTPUT_ENABLE_SHIFT                     _MK_SHIFT_CONST(8)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD4_OUTPUT_ENABLE_FIELD                     (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE0_0_LD4_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD4_OUTPUT_ENABLE_RANGE                     8:8
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD4_OUTPUT_ENABLE_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD4_OUTPUT_ENABLE_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD4_OUTPUT_ENABLE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD4_OUTPUT_ENABLE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD4_OUTPUT_ENABLE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD4_OUTPUT_ENABLE_ENABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD4_OUTPUT_ENABLE_DISABLE                   _MK_ENUM_CONST(1)

// LD5 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD5_OUTPUT_ENABLE_SHIFT                     _MK_SHIFT_CONST(10)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD5_OUTPUT_ENABLE_FIELD                     (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE0_0_LD5_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD5_OUTPUT_ENABLE_RANGE                     10:10
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD5_OUTPUT_ENABLE_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD5_OUTPUT_ENABLE_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD5_OUTPUT_ENABLE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD5_OUTPUT_ENABLE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD5_OUTPUT_ENABLE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD5_OUTPUT_ENABLE_ENABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD5_OUTPUT_ENABLE_DISABLE                   _MK_ENUM_CONST(1)

// LD6 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD6_OUTPUT_ENABLE_SHIFT                     _MK_SHIFT_CONST(12)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD6_OUTPUT_ENABLE_FIELD                     (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE0_0_LD6_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD6_OUTPUT_ENABLE_RANGE                     12:12
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD6_OUTPUT_ENABLE_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD6_OUTPUT_ENABLE_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD6_OUTPUT_ENABLE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD6_OUTPUT_ENABLE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD6_OUTPUT_ENABLE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD6_OUTPUT_ENABLE_ENABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD6_OUTPUT_ENABLE_DISABLE                   _MK_ENUM_CONST(1)

// LD7 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD7_OUTPUT_ENABLE_SHIFT                     _MK_SHIFT_CONST(14)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD7_OUTPUT_ENABLE_FIELD                     (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE0_0_LD7_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD7_OUTPUT_ENABLE_RANGE                     14:14
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD7_OUTPUT_ENABLE_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD7_OUTPUT_ENABLE_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD7_OUTPUT_ENABLE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD7_OUTPUT_ENABLE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD7_OUTPUT_ENABLE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD7_OUTPUT_ENABLE_ENABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD7_OUTPUT_ENABLE_DISABLE                   _MK_ENUM_CONST(1)

// LD8 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD8_OUTPUT_ENABLE_SHIFT                     _MK_SHIFT_CONST(16)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD8_OUTPUT_ENABLE_FIELD                     (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE0_0_LD8_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD8_OUTPUT_ENABLE_RANGE                     16:16
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD8_OUTPUT_ENABLE_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD8_OUTPUT_ENABLE_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD8_OUTPUT_ENABLE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD8_OUTPUT_ENABLE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD8_OUTPUT_ENABLE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD8_OUTPUT_ENABLE_ENABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD8_OUTPUT_ENABLE_DISABLE                   _MK_ENUM_CONST(1)

// LD9 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD9_OUTPUT_ENABLE_SHIFT                     _MK_SHIFT_CONST(18)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD9_OUTPUT_ENABLE_FIELD                     (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE0_0_LD9_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD9_OUTPUT_ENABLE_RANGE                     18:18
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD9_OUTPUT_ENABLE_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD9_OUTPUT_ENABLE_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD9_OUTPUT_ENABLE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD9_OUTPUT_ENABLE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD9_OUTPUT_ENABLE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD9_OUTPUT_ENABLE_ENABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD9_OUTPUT_ENABLE_DISABLE                   _MK_ENUM_CONST(1)

// LD10 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD10_OUTPUT_ENABLE_SHIFT                    _MK_SHIFT_CONST(20)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD10_OUTPUT_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE0_0_LD10_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD10_OUTPUT_ENABLE_RANGE                    20:20
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD10_OUTPUT_ENABLE_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD10_OUTPUT_ENABLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD10_OUTPUT_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD10_OUTPUT_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD10_OUTPUT_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD10_OUTPUT_ENABLE_ENABLE                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD10_OUTPUT_ENABLE_DISABLE                  _MK_ENUM_CONST(1)

// LD11 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD11_OUTPUT_ENABLE_SHIFT                    _MK_SHIFT_CONST(22)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD11_OUTPUT_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE0_0_LD11_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD11_OUTPUT_ENABLE_RANGE                    22:22
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD11_OUTPUT_ENABLE_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD11_OUTPUT_ENABLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD11_OUTPUT_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD11_OUTPUT_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD11_OUTPUT_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD11_OUTPUT_ENABLE_ENABLE                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD11_OUTPUT_ENABLE_DISABLE                  _MK_ENUM_CONST(1)

// LD12 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD12_OUTPUT_ENABLE_SHIFT                    _MK_SHIFT_CONST(24)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD12_OUTPUT_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE0_0_LD12_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD12_OUTPUT_ENABLE_RANGE                    24:24
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD12_OUTPUT_ENABLE_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD12_OUTPUT_ENABLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD12_OUTPUT_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD12_OUTPUT_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD12_OUTPUT_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD12_OUTPUT_ENABLE_ENABLE                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD12_OUTPUT_ENABLE_DISABLE                  _MK_ENUM_CONST(1)

// LD13 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD13_OUTPUT_ENABLE_SHIFT                    _MK_SHIFT_CONST(26)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD13_OUTPUT_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE0_0_LD13_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD13_OUTPUT_ENABLE_RANGE                    26:26
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD13_OUTPUT_ENABLE_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD13_OUTPUT_ENABLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD13_OUTPUT_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD13_OUTPUT_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD13_OUTPUT_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD13_OUTPUT_ENABLE_ENABLE                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD13_OUTPUT_ENABLE_DISABLE                  _MK_ENUM_CONST(1)

// LD14 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD14_OUTPUT_ENABLE_SHIFT                    _MK_SHIFT_CONST(28)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD14_OUTPUT_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE0_0_LD14_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD14_OUTPUT_ENABLE_RANGE                    28:28
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD14_OUTPUT_ENABLE_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD14_OUTPUT_ENABLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD14_OUTPUT_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD14_OUTPUT_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD14_OUTPUT_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD14_OUTPUT_ENABLE_ENABLE                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD14_OUTPUT_ENABLE_DISABLE                  _MK_ENUM_CONST(1)

// LD15 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD15_OUTPUT_ENABLE_SHIFT                    _MK_SHIFT_CONST(30)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD15_OUTPUT_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE0_0_LD15_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD15_OUTPUT_ENABLE_RANGE                    30:30
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD15_OUTPUT_ENABLE_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD15_OUTPUT_ENABLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD15_OUTPUT_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD15_OUTPUT_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD15_OUTPUT_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD15_OUTPUT_ENABLE_ENABLE                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE0_0_LD15_OUTPUT_ENABLE_DISABLE                  _MK_ENUM_CONST(1)


// Register DC_COM_PIN_OUTPUT_ENABLE1_0  // Pin Output Enable 1
#define DC_COM_PIN_OUTPUT_ENABLE1_0                     _MK_ADDR_CONST(0x303)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_SECURE                      0x0
#define DC_COM_PIN_OUTPUT_ENABLE1_0_WORD_COUNT                  0x1
#define DC_COM_PIN_OUTPUT_ENABLE1_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_RESET_MASK                  _MK_MASK_CONST(0x55150005)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_READ_MASK                   _MK_MASK_CONST(0x55150005)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_WRITE_MASK                  _MK_MASK_CONST(0x55150005)
// LD16 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LD16_OUTPUT_ENABLE_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LD16_OUTPUT_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE1_0_LD16_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LD16_OUTPUT_ENABLE_RANGE                    0:0
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LD16_OUTPUT_ENABLE_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LD16_OUTPUT_ENABLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LD16_OUTPUT_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LD16_OUTPUT_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LD16_OUTPUT_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LD16_OUTPUT_ENABLE_ENABLE                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LD16_OUTPUT_ENABLE_DISABLE                  _MK_ENUM_CONST(1)

// LD17 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LD17_OUTPUT_ENABLE_SHIFT                    _MK_SHIFT_CONST(2)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LD17_OUTPUT_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE1_0_LD17_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LD17_OUTPUT_ENABLE_RANGE                    2:2
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LD17_OUTPUT_ENABLE_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LD17_OUTPUT_ENABLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LD17_OUTPUT_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LD17_OUTPUT_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LD17_OUTPUT_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LD17_OUTPUT_ENABLE_ENABLE                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LD17_OUTPUT_ENABLE_DISABLE                  _MK_ENUM_CONST(1)

// LPW0 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW0_OUTPUT_ENABLE_SHIFT                    _MK_SHIFT_CONST(16)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW0_OUTPUT_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE1_0_LPW0_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW0_OUTPUT_ENABLE_RANGE                    16:16
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW0_OUTPUT_ENABLE_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW0_OUTPUT_ENABLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW0_OUTPUT_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW0_OUTPUT_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW0_OUTPUT_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW0_OUTPUT_ENABLE_ENABLE                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW0_OUTPUT_ENABLE_DISABLE                  _MK_ENUM_CONST(1)

// LPW1 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW1_OUTPUT_ENABLE_SHIFT                    _MK_SHIFT_CONST(18)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW1_OUTPUT_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE1_0_LPW1_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW1_OUTPUT_ENABLE_RANGE                    18:18
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW1_OUTPUT_ENABLE_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW1_OUTPUT_ENABLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW1_OUTPUT_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW1_OUTPUT_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW1_OUTPUT_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW1_OUTPUT_ENABLE_ENABLE                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW1_OUTPUT_ENABLE_DISABLE                  _MK_ENUM_CONST(1)

// LPW2 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW2_OUTPUT_ENABLE_SHIFT                    _MK_SHIFT_CONST(20)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW2_OUTPUT_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE1_0_LPW2_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW2_OUTPUT_ENABLE_RANGE                    20:20
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW2_OUTPUT_ENABLE_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW2_OUTPUT_ENABLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW2_OUTPUT_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW2_OUTPUT_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW2_OUTPUT_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW2_OUTPUT_ENABLE_ENABLE                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LPW2_OUTPUT_ENABLE_DISABLE                  _MK_ENUM_CONST(1)

// LSC0 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LSC0_OUTPUT_ENABLE_SHIFT                    _MK_SHIFT_CONST(24)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LSC0_OUTPUT_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE1_0_LSC0_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LSC0_OUTPUT_ENABLE_RANGE                    24:24
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LSC0_OUTPUT_ENABLE_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LSC0_OUTPUT_ENABLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LSC0_OUTPUT_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LSC0_OUTPUT_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LSC0_OUTPUT_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LSC0_OUTPUT_ENABLE_ENABLE                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LSC0_OUTPUT_ENABLE_DISABLE                  _MK_ENUM_CONST(1)

// LSC1 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LSC1_OUTPUT_ENABLE_SHIFT                    _MK_SHIFT_CONST(26)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LSC1_OUTPUT_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE1_0_LSC1_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LSC1_OUTPUT_ENABLE_RANGE                    26:26
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LSC1_OUTPUT_ENABLE_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LSC1_OUTPUT_ENABLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LSC1_OUTPUT_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LSC1_OUTPUT_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LSC1_OUTPUT_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LSC1_OUTPUT_ENABLE_ENABLE                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LSC1_OUTPUT_ENABLE_DISABLE                  _MK_ENUM_CONST(1)

// LVS pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LVS_OUTPUT_ENABLE_SHIFT                     _MK_SHIFT_CONST(28)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LVS_OUTPUT_ENABLE_FIELD                     (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE1_0_LVS_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LVS_OUTPUT_ENABLE_RANGE                     28:28
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LVS_OUTPUT_ENABLE_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LVS_OUTPUT_ENABLE_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LVS_OUTPUT_ENABLE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LVS_OUTPUT_ENABLE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LVS_OUTPUT_ENABLE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LVS_OUTPUT_ENABLE_ENABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LVS_OUTPUT_ENABLE_DISABLE                   _MK_ENUM_CONST(1)

// LHS pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LHS_OUTPUT_ENABLE_SHIFT                     _MK_SHIFT_CONST(30)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LHS_OUTPUT_ENABLE_FIELD                     (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE1_0_LHS_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LHS_OUTPUT_ENABLE_RANGE                     30:30
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LHS_OUTPUT_ENABLE_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LHS_OUTPUT_ENABLE_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LHS_OUTPUT_ENABLE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LHS_OUTPUT_ENABLE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LHS_OUTPUT_ENABLE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LHS_OUTPUT_ENABLE_ENABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE1_0_LHS_OUTPUT_ENABLE_DISABLE                   _MK_ENUM_CONST(1)


// Register DC_COM_PIN_OUTPUT_ENABLE2_0  // Pin Output Enable 2
#define DC_COM_PIN_OUTPUT_ENABLE2_0                     _MK_ADDR_CONST(0x304)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_SECURE                      0x0
#define DC_COM_PIN_OUTPUT_ENABLE2_0_WORD_COUNT                  0x1
#define DC_COM_PIN_OUTPUT_ENABLE2_0_RESET_VAL                   _MK_MASK_CONST(0x510104)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_RESET_MASK                  _MK_MASK_CONST(0x550515)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_READ_MASK                   _MK_MASK_CONST(0x550515)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_WRITE_MASK                  _MK_MASK_CONST(0x550515)
// LHP0 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP0_OUTPUT_ENABLE_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP0_OUTPUT_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE2_0_LHP0_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP0_OUTPUT_ENABLE_RANGE                    0:0
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP0_OUTPUT_ENABLE_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP0_OUTPUT_ENABLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP0_OUTPUT_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP0_OUTPUT_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP0_OUTPUT_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP0_OUTPUT_ENABLE_ENABLE                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP0_OUTPUT_ENABLE_DISABLE                  _MK_ENUM_CONST(1)

// LHP1 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP1_OUTPUT_ENABLE_SHIFT                    _MK_SHIFT_CONST(2)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP1_OUTPUT_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE2_0_LHP1_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP1_OUTPUT_ENABLE_RANGE                    2:2
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP1_OUTPUT_ENABLE_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP1_OUTPUT_ENABLE_DEFAULT                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP1_OUTPUT_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP1_OUTPUT_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP1_OUTPUT_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP1_OUTPUT_ENABLE_ENABLE                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP1_OUTPUT_ENABLE_DISABLE                  _MK_ENUM_CONST(1)

// LHP2 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP2_OUTPUT_ENABLE_SHIFT                    _MK_SHIFT_CONST(4)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP2_OUTPUT_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE2_0_LHP2_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP2_OUTPUT_ENABLE_RANGE                    4:4
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP2_OUTPUT_ENABLE_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP2_OUTPUT_ENABLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP2_OUTPUT_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP2_OUTPUT_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP2_OUTPUT_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP2_OUTPUT_ENABLE_ENABLE                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LHP2_OUTPUT_ENABLE_DISABLE                  _MK_ENUM_CONST(1)

// LVP0 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LVP0_OUTPUT_ENABLE_SHIFT                    _MK_SHIFT_CONST(8)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LVP0_OUTPUT_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE2_0_LVP0_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LVP0_OUTPUT_ENABLE_RANGE                    8:8
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LVP0_OUTPUT_ENABLE_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LVP0_OUTPUT_ENABLE_DEFAULT                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LVP0_OUTPUT_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LVP0_OUTPUT_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LVP0_OUTPUT_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LVP0_OUTPUT_ENABLE_ENABLE                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LVP0_OUTPUT_ENABLE_DISABLE                  _MK_ENUM_CONST(1)

// LVP1 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LVP1_OUTPUT_ENABLE_SHIFT                    _MK_SHIFT_CONST(10)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LVP1_OUTPUT_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE2_0_LVP1_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LVP1_OUTPUT_ENABLE_RANGE                    10:10
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LVP1_OUTPUT_ENABLE_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LVP1_OUTPUT_ENABLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LVP1_OUTPUT_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LVP1_OUTPUT_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LVP1_OUTPUT_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LVP1_OUTPUT_ENABLE_ENABLE                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LVP1_OUTPUT_ENABLE_DISABLE                  _MK_ENUM_CONST(1)

// LM0 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LM0_OUTPUT_ENABLE_SHIFT                     _MK_SHIFT_CONST(16)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LM0_OUTPUT_ENABLE_FIELD                     (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE2_0_LM0_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LM0_OUTPUT_ENABLE_RANGE                     16:16
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LM0_OUTPUT_ENABLE_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LM0_OUTPUT_ENABLE_DEFAULT                   _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LM0_OUTPUT_ENABLE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LM0_OUTPUT_ENABLE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LM0_OUTPUT_ENABLE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LM0_OUTPUT_ENABLE_ENABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LM0_OUTPUT_ENABLE_DISABLE                   _MK_ENUM_CONST(1)

// LM1 pin output enable   0= enable
//   1= disable
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LM1_OUTPUT_ENABLE_SHIFT                     _MK_SHIFT_CONST(18)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LM1_OUTPUT_ENABLE_FIELD                     (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE2_0_LM1_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LM1_OUTPUT_ENABLE_RANGE                     18:18
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LM1_OUTPUT_ENABLE_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LM1_OUTPUT_ENABLE_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LM1_OUTPUT_ENABLE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LM1_OUTPUT_ENABLE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LM1_OUTPUT_ENABLE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LM1_OUTPUT_ENABLE_ENABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LM1_OUTPUT_ENABLE_DISABLE                   _MK_ENUM_CONST(1)

// LDI pin output enable   0= enable
//   1= disable (default after reset)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LDI_OUTPUT_ENABLE_SHIFT                     _MK_SHIFT_CONST(20)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LDI_OUTPUT_ENABLE_FIELD                     (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE2_0_LDI_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LDI_OUTPUT_ENABLE_RANGE                     20:20
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LDI_OUTPUT_ENABLE_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LDI_OUTPUT_ENABLE_DEFAULT                   _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LDI_OUTPUT_ENABLE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LDI_OUTPUT_ENABLE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LDI_OUTPUT_ENABLE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LDI_OUTPUT_ENABLE_ENABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LDI_OUTPUT_ENABLE_DISABLE                   _MK_ENUM_CONST(1)

// LPP pin output enable   0= enable
//   1= disable (default after reset)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LPP_OUTPUT_ENABLE_SHIFT                     _MK_SHIFT_CONST(22)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LPP_OUTPUT_ENABLE_FIELD                     (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE2_0_LPP_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LPP_OUTPUT_ENABLE_RANGE                     22:22
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LPP_OUTPUT_ENABLE_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LPP_OUTPUT_ENABLE_DEFAULT                   _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LPP_OUTPUT_ENABLE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LPP_OUTPUT_ENABLE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LPP_OUTPUT_ENABLE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LPP_OUTPUT_ENABLE_ENABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE2_0_LPP_OUTPUT_ENABLE_DISABLE                   _MK_ENUM_CONST(1)


// Register DC_COM_PIN_OUTPUT_ENABLE3_0  // Pin Output Enable 3
#define DC_COM_PIN_OUTPUT_ENABLE3_0                     _MK_ADDR_CONST(0x305)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_SECURE                      0x0
#define DC_COM_PIN_OUTPUT_ENABLE3_0_WORD_COUNT                  0x1
#define DC_COM_PIN_OUTPUT_ENABLE3_0_RESET_VAL                   _MK_MASK_CONST(0x555)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_RESET_MASK                  _MK_MASK_CONST(0x555)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_READ_MASK                   _MK_MASK_CONST(0x555)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_WRITE_MASK                  _MK_MASK_CONST(0x555)
// LSCK pin output enable   0= enable
//   1= disable (default after reset)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSCK_OUTPUT_ENABLE_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSCK_OUTPUT_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE3_0_LSCK_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSCK_OUTPUT_ENABLE_RANGE                    0:0
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSCK_OUTPUT_ENABLE_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSCK_OUTPUT_ENABLE_DEFAULT                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSCK_OUTPUT_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSCK_OUTPUT_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSCK_OUTPUT_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSCK_OUTPUT_ENABLE_ENABLE                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSCK_OUTPUT_ENABLE_DISABLE                  _MK_ENUM_CONST(1)

// LSDA pin output enable   0= enable
//   1= disable (default after reset)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSDA_OUTPUT_ENABLE_SHIFT                    _MK_SHIFT_CONST(2)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSDA_OUTPUT_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE3_0_LSDA_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSDA_OUTPUT_ENABLE_RANGE                    2:2
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSDA_OUTPUT_ENABLE_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSDA_OUTPUT_ENABLE_DEFAULT                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSDA_OUTPUT_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSDA_OUTPUT_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSDA_OUTPUT_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSDA_OUTPUT_ENABLE_ENABLE                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSDA_OUTPUT_ENABLE_DISABLE                  _MK_ENUM_CONST(1)

// LCSN pin output enable   0= enable
//   1= disable (default after reset)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LCSN_OUTPUT_ENABLE_SHIFT                    _MK_SHIFT_CONST(4)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LCSN_OUTPUT_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE3_0_LCSN_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LCSN_OUTPUT_ENABLE_RANGE                    4:4
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LCSN_OUTPUT_ENABLE_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LCSN_OUTPUT_ENABLE_DEFAULT                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LCSN_OUTPUT_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LCSN_OUTPUT_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LCSN_OUTPUT_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LCSN_OUTPUT_ENABLE_ENABLE                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LCSN_OUTPUT_ENABLE_DISABLE                  _MK_ENUM_CONST(1)

// LDC pin output enable   0= enable
//   1= disable (default after reset)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LDC_OUTPUT_ENABLE_SHIFT                     _MK_SHIFT_CONST(6)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LDC_OUTPUT_ENABLE_FIELD                     (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE3_0_LDC_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LDC_OUTPUT_ENABLE_RANGE                     6:6
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LDC_OUTPUT_ENABLE_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LDC_OUTPUT_ENABLE_DEFAULT                   _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LDC_OUTPUT_ENABLE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LDC_OUTPUT_ENABLE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LDC_OUTPUT_ENABLE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LDC_OUTPUT_ENABLE_ENABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LDC_OUTPUT_ENABLE_DISABLE                   _MK_ENUM_CONST(1)

// LSPI pin output enable   0= enable
//   1= disable (default after reset)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSPI_OUTPUT_ENABLE_SHIFT                    _MK_SHIFT_CONST(8)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSPI_OUTPUT_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE3_0_LSPI_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSPI_OUTPUT_ENABLE_RANGE                    8:8
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSPI_OUTPUT_ENABLE_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSPI_OUTPUT_ENABLE_DEFAULT                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSPI_OUTPUT_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSPI_OUTPUT_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSPI_OUTPUT_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSPI_OUTPUT_ENABLE_ENABLE                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSPI_OUTPUT_ENABLE_DISABLE                  _MK_ENUM_CONST(1)

// LSDI pin output enable   0= enable
//   1= disable (default after reset)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSDI_OUTPUT_ENABLE_SHIFT                    _MK_SHIFT_CONST(10)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSDI_OUTPUT_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_ENABLE3_0_LSDI_OUTPUT_ENABLE_SHIFT)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSDI_OUTPUT_ENABLE_RANGE                    10:10
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSDI_OUTPUT_ENABLE_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSDI_OUTPUT_ENABLE_DEFAULT                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSDI_OUTPUT_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSDI_OUTPUT_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSDI_OUTPUT_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSDI_OUTPUT_ENABLE_ENABLE                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_ENABLE3_0_LSDI_OUTPUT_ENABLE_DISABLE                  _MK_ENUM_CONST(1)

// Pin Output Polarity registers

// Register DC_COM_PIN_OUTPUT_POLARITY0_0  // Pin Output Polarity 0
#define DC_COM_PIN_OUTPUT_POLARITY0_0                   _MK_ADDR_CONST(0x306)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_SECURE                    0x0
#define DC_COM_PIN_OUTPUT_POLARITY0_0_WORD_COUNT                        0x1
#define DC_COM_PIN_OUTPUT_POLARITY0_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_RESET_MASK                        _MK_MASK_CONST(0x55555555)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_READ_MASK                         _MK_MASK_CONST(0x55555555)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_WRITE_MASK                        _MK_MASK_CONST(0x55555555)
// LD0 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD0_OUTPUT_POLARITY_SHIFT                 _MK_SHIFT_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD0_OUTPUT_POLARITY_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY0_0_LD0_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD0_OUTPUT_POLARITY_RANGE                 0:0
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD0_OUTPUT_POLARITY_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD0_OUTPUT_POLARITY_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD0_OUTPUT_POLARITY_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD0_OUTPUT_POLARITY_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD0_OUTPUT_POLARITY_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD0_OUTPUT_POLARITY_HIGH                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD0_OUTPUT_POLARITY_LOW                   _MK_ENUM_CONST(1)

// LD1 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD1_OUTPUT_POLARITY_SHIFT                 _MK_SHIFT_CONST(2)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD1_OUTPUT_POLARITY_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY0_0_LD1_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD1_OUTPUT_POLARITY_RANGE                 2:2
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD1_OUTPUT_POLARITY_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD1_OUTPUT_POLARITY_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD1_OUTPUT_POLARITY_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD1_OUTPUT_POLARITY_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD1_OUTPUT_POLARITY_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD1_OUTPUT_POLARITY_HIGH                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD1_OUTPUT_POLARITY_LOW                   _MK_ENUM_CONST(1)

// LD2 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD2_OUTPUT_POLARITY_SHIFT                 _MK_SHIFT_CONST(4)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD2_OUTPUT_POLARITY_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY0_0_LD2_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD2_OUTPUT_POLARITY_RANGE                 4:4
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD2_OUTPUT_POLARITY_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD2_OUTPUT_POLARITY_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD2_OUTPUT_POLARITY_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD2_OUTPUT_POLARITY_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD2_OUTPUT_POLARITY_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD2_OUTPUT_POLARITY_HIGH                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD2_OUTPUT_POLARITY_LOW                   _MK_ENUM_CONST(1)

// LD3 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD3_OUTPUT_POLARITY_SHIFT                 _MK_SHIFT_CONST(6)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD3_OUTPUT_POLARITY_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY0_0_LD3_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD3_OUTPUT_POLARITY_RANGE                 6:6
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD3_OUTPUT_POLARITY_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD3_OUTPUT_POLARITY_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD3_OUTPUT_POLARITY_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD3_OUTPUT_POLARITY_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD3_OUTPUT_POLARITY_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD3_OUTPUT_POLARITY_HIGH                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD3_OUTPUT_POLARITY_LOW                   _MK_ENUM_CONST(1)

// LD4 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD4_OUTPUT_POLARITY_SHIFT                 _MK_SHIFT_CONST(8)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD4_OUTPUT_POLARITY_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY0_0_LD4_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD4_OUTPUT_POLARITY_RANGE                 8:8
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD4_OUTPUT_POLARITY_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD4_OUTPUT_POLARITY_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD4_OUTPUT_POLARITY_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD4_OUTPUT_POLARITY_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD4_OUTPUT_POLARITY_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD4_OUTPUT_POLARITY_HIGH                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD4_OUTPUT_POLARITY_LOW                   _MK_ENUM_CONST(1)

// LD5 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD5_OUTPUT_POLARITY_SHIFT                 _MK_SHIFT_CONST(10)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD5_OUTPUT_POLARITY_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY0_0_LD5_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD5_OUTPUT_POLARITY_RANGE                 10:10
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD5_OUTPUT_POLARITY_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD5_OUTPUT_POLARITY_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD5_OUTPUT_POLARITY_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD5_OUTPUT_POLARITY_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD5_OUTPUT_POLARITY_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD5_OUTPUT_POLARITY_HIGH                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD5_OUTPUT_POLARITY_LOW                   _MK_ENUM_CONST(1)

// LD6 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD6_OUTPUT_POLARITY_SHIFT                 _MK_SHIFT_CONST(12)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD6_OUTPUT_POLARITY_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY0_0_LD6_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD6_OUTPUT_POLARITY_RANGE                 12:12
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD6_OUTPUT_POLARITY_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD6_OUTPUT_POLARITY_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD6_OUTPUT_POLARITY_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD6_OUTPUT_POLARITY_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD6_OUTPUT_POLARITY_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD6_OUTPUT_POLARITY_HIGH                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD6_OUTPUT_POLARITY_LOW                   _MK_ENUM_CONST(1)

// LD7 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD7_OUTPUT_POLARITY_SHIFT                 _MK_SHIFT_CONST(14)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD7_OUTPUT_POLARITY_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY0_0_LD7_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD7_OUTPUT_POLARITY_RANGE                 14:14
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD7_OUTPUT_POLARITY_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD7_OUTPUT_POLARITY_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD7_OUTPUT_POLARITY_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD7_OUTPUT_POLARITY_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD7_OUTPUT_POLARITY_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD7_OUTPUT_POLARITY_HIGH                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD7_OUTPUT_POLARITY_LOW                   _MK_ENUM_CONST(1)

// LD8 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD8_OUTPUT_POLARITY_SHIFT                 _MK_SHIFT_CONST(16)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD8_OUTPUT_POLARITY_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY0_0_LD8_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD8_OUTPUT_POLARITY_RANGE                 16:16
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD8_OUTPUT_POLARITY_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD8_OUTPUT_POLARITY_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD8_OUTPUT_POLARITY_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD8_OUTPUT_POLARITY_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD8_OUTPUT_POLARITY_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD8_OUTPUT_POLARITY_HIGH                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD8_OUTPUT_POLARITY_LOW                   _MK_ENUM_CONST(1)

// LD9 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD9_OUTPUT_POLARITY_SHIFT                 _MK_SHIFT_CONST(18)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD9_OUTPUT_POLARITY_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY0_0_LD9_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD9_OUTPUT_POLARITY_RANGE                 18:18
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD9_OUTPUT_POLARITY_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD9_OUTPUT_POLARITY_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD9_OUTPUT_POLARITY_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD9_OUTPUT_POLARITY_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD9_OUTPUT_POLARITY_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD9_OUTPUT_POLARITY_HIGH                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD9_OUTPUT_POLARITY_LOW                   _MK_ENUM_CONST(1)

// LD10 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD10_OUTPUT_POLARITY_SHIFT                        _MK_SHIFT_CONST(20)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD10_OUTPUT_POLARITY_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY0_0_LD10_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD10_OUTPUT_POLARITY_RANGE                        20:20
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD10_OUTPUT_POLARITY_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD10_OUTPUT_POLARITY_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD10_OUTPUT_POLARITY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD10_OUTPUT_POLARITY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD10_OUTPUT_POLARITY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD10_OUTPUT_POLARITY_HIGH                 _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD10_OUTPUT_POLARITY_LOW                  _MK_ENUM_CONST(1)

// LD11 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD11_OUTPUT_POLARITY_SHIFT                        _MK_SHIFT_CONST(22)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD11_OUTPUT_POLARITY_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY0_0_LD11_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD11_OUTPUT_POLARITY_RANGE                        22:22
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD11_OUTPUT_POLARITY_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD11_OUTPUT_POLARITY_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD11_OUTPUT_POLARITY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD11_OUTPUT_POLARITY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD11_OUTPUT_POLARITY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD11_OUTPUT_POLARITY_HIGH                 _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD11_OUTPUT_POLARITY_LOW                  _MK_ENUM_CONST(1)

// LD12 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD12_OUTPUT_POLARITY_SHIFT                        _MK_SHIFT_CONST(24)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD12_OUTPUT_POLARITY_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY0_0_LD12_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD12_OUTPUT_POLARITY_RANGE                        24:24
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD12_OUTPUT_POLARITY_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD12_OUTPUT_POLARITY_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD12_OUTPUT_POLARITY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD12_OUTPUT_POLARITY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD12_OUTPUT_POLARITY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD12_OUTPUT_POLARITY_HIGH                 _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD12_OUTPUT_POLARITY_LOW                  _MK_ENUM_CONST(1)

// LD13 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD13_OUTPUT_POLARITY_SHIFT                        _MK_SHIFT_CONST(26)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD13_OUTPUT_POLARITY_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY0_0_LD13_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD13_OUTPUT_POLARITY_RANGE                        26:26
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD13_OUTPUT_POLARITY_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD13_OUTPUT_POLARITY_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD13_OUTPUT_POLARITY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD13_OUTPUT_POLARITY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD13_OUTPUT_POLARITY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD13_OUTPUT_POLARITY_HIGH                 _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD13_OUTPUT_POLARITY_LOW                  _MK_ENUM_CONST(1)

// LD14 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD14_OUTPUT_POLARITY_SHIFT                        _MK_SHIFT_CONST(28)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD14_OUTPUT_POLARITY_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY0_0_LD14_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD14_OUTPUT_POLARITY_RANGE                        28:28
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD14_OUTPUT_POLARITY_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD14_OUTPUT_POLARITY_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD14_OUTPUT_POLARITY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD14_OUTPUT_POLARITY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD14_OUTPUT_POLARITY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD14_OUTPUT_POLARITY_HIGH                 _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD14_OUTPUT_POLARITY_LOW                  _MK_ENUM_CONST(1)

// LD15 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD15_OUTPUT_POLARITY_SHIFT                        _MK_SHIFT_CONST(30)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD15_OUTPUT_POLARITY_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY0_0_LD15_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD15_OUTPUT_POLARITY_RANGE                        30:30
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD15_OUTPUT_POLARITY_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD15_OUTPUT_POLARITY_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD15_OUTPUT_POLARITY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD15_OUTPUT_POLARITY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD15_OUTPUT_POLARITY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD15_OUTPUT_POLARITY_HIGH                 _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY0_0_LD15_OUTPUT_POLARITY_LOW                  _MK_ENUM_CONST(1)


// Register DC_COM_PIN_OUTPUT_POLARITY1_0  // Pin Output Polarity 1
#define DC_COM_PIN_OUTPUT_POLARITY1_0                   _MK_ADDR_CONST(0x307)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_SECURE                    0x0
#define DC_COM_PIN_OUTPUT_POLARITY1_0_WORD_COUNT                        0x1
#define DC_COM_PIN_OUTPUT_POLARITY1_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_RESET_MASK                        _MK_MASK_CONST(0x55150005)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_READ_MASK                         _MK_MASK_CONST(0x55150005)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_WRITE_MASK                        _MK_MASK_CONST(0x55150005)
// LD16 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LD16_OUTPUT_POLARITY_SHIFT                        _MK_SHIFT_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LD16_OUTPUT_POLARITY_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY1_0_LD16_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LD16_OUTPUT_POLARITY_RANGE                        0:0
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LD16_OUTPUT_POLARITY_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LD16_OUTPUT_POLARITY_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LD16_OUTPUT_POLARITY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LD16_OUTPUT_POLARITY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LD16_OUTPUT_POLARITY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LD16_OUTPUT_POLARITY_HIGH                 _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LD16_OUTPUT_POLARITY_LOW                  _MK_ENUM_CONST(1)

// LD17 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LD17_OUTPUT_POLARITY_SHIFT                        _MK_SHIFT_CONST(2)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LD17_OUTPUT_POLARITY_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY1_0_LD17_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LD17_OUTPUT_POLARITY_RANGE                        2:2
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LD17_OUTPUT_POLARITY_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LD17_OUTPUT_POLARITY_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LD17_OUTPUT_POLARITY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LD17_OUTPUT_POLARITY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LD17_OUTPUT_POLARITY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LD17_OUTPUT_POLARITY_HIGH                 _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LD17_OUTPUT_POLARITY_LOW                  _MK_ENUM_CONST(1)

// LPW0 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW0_OUTPUT_POLARITY_SHIFT                        _MK_SHIFT_CONST(16)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW0_OUTPUT_POLARITY_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY1_0_LPW0_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW0_OUTPUT_POLARITY_RANGE                        16:16
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW0_OUTPUT_POLARITY_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW0_OUTPUT_POLARITY_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW0_OUTPUT_POLARITY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW0_OUTPUT_POLARITY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW0_OUTPUT_POLARITY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW0_OUTPUT_POLARITY_HIGH                 _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW0_OUTPUT_POLARITY_LOW                  _MK_ENUM_CONST(1)

// LPW1 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW1_OUTPUT_POLARITY_SHIFT                        _MK_SHIFT_CONST(18)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW1_OUTPUT_POLARITY_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY1_0_LPW1_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW1_OUTPUT_POLARITY_RANGE                        18:18
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW1_OUTPUT_POLARITY_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW1_OUTPUT_POLARITY_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW1_OUTPUT_POLARITY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW1_OUTPUT_POLARITY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW1_OUTPUT_POLARITY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW1_OUTPUT_POLARITY_HIGH                 _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW1_OUTPUT_POLARITY_LOW                  _MK_ENUM_CONST(1)

// LPW2 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW2_OUTPUT_POLARITY_SHIFT                        _MK_SHIFT_CONST(20)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW2_OUTPUT_POLARITY_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY1_0_LPW2_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW2_OUTPUT_POLARITY_RANGE                        20:20
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW2_OUTPUT_POLARITY_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW2_OUTPUT_POLARITY_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW2_OUTPUT_POLARITY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW2_OUTPUT_POLARITY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW2_OUTPUT_POLARITY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW2_OUTPUT_POLARITY_HIGH                 _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LPW2_OUTPUT_POLARITY_LOW                  _MK_ENUM_CONST(1)

// LSC0 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LSC0_OUTPUT_POLARITY_SHIFT                        _MK_SHIFT_CONST(24)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LSC0_OUTPUT_POLARITY_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY1_0_LSC0_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LSC0_OUTPUT_POLARITY_RANGE                        24:24
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LSC0_OUTPUT_POLARITY_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LSC0_OUTPUT_POLARITY_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LSC0_OUTPUT_POLARITY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LSC0_OUTPUT_POLARITY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LSC0_OUTPUT_POLARITY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LSC0_OUTPUT_POLARITY_HIGH                 _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LSC0_OUTPUT_POLARITY_LOW                  _MK_ENUM_CONST(1)

// LSC1 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LSC1_OUTPUT_POLARITY_SHIFT                        _MK_SHIFT_CONST(26)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LSC1_OUTPUT_POLARITY_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY1_0_LSC1_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LSC1_OUTPUT_POLARITY_RANGE                        26:26
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LSC1_OUTPUT_POLARITY_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LSC1_OUTPUT_POLARITY_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LSC1_OUTPUT_POLARITY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LSC1_OUTPUT_POLARITY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LSC1_OUTPUT_POLARITY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LSC1_OUTPUT_POLARITY_HIGH                 _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LSC1_OUTPUT_POLARITY_LOW                  _MK_ENUM_CONST(1)

// LVS pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LVS_OUTPUT_POLARITY_SHIFT                 _MK_SHIFT_CONST(28)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LVS_OUTPUT_POLARITY_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY1_0_LVS_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LVS_OUTPUT_POLARITY_RANGE                 28:28
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LVS_OUTPUT_POLARITY_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LVS_OUTPUT_POLARITY_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LVS_OUTPUT_POLARITY_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LVS_OUTPUT_POLARITY_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LVS_OUTPUT_POLARITY_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LVS_OUTPUT_POLARITY_HIGH                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LVS_OUTPUT_POLARITY_LOW                   _MK_ENUM_CONST(1)

// LHS pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LHS_OUTPUT_POLARITY_SHIFT                 _MK_SHIFT_CONST(30)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LHS_OUTPUT_POLARITY_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY1_0_LHS_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LHS_OUTPUT_POLARITY_RANGE                 30:30
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LHS_OUTPUT_POLARITY_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LHS_OUTPUT_POLARITY_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LHS_OUTPUT_POLARITY_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LHS_OUTPUT_POLARITY_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LHS_OUTPUT_POLARITY_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LHS_OUTPUT_POLARITY_HIGH                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY1_0_LHS_OUTPUT_POLARITY_LOW                   _MK_ENUM_CONST(1)


// Register DC_COM_PIN_OUTPUT_POLARITY2_0  // Pin Output Polarity 2
#define DC_COM_PIN_OUTPUT_POLARITY2_0                   _MK_ADDR_CONST(0x308)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_SECURE                    0x0
#define DC_COM_PIN_OUTPUT_POLARITY2_0_WORD_COUNT                        0x1
#define DC_COM_PIN_OUTPUT_POLARITY2_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_RESET_MASK                        _MK_MASK_CONST(0x550515)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_READ_MASK                         _MK_MASK_CONST(0x550515)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_WRITE_MASK                        _MK_MASK_CONST(0x550515)
// LHP0 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP0_OUTPUT_POLARITY_SHIFT                        _MK_SHIFT_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP0_OUTPUT_POLARITY_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY2_0_LHP0_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP0_OUTPUT_POLARITY_RANGE                        0:0
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP0_OUTPUT_POLARITY_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP0_OUTPUT_POLARITY_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP0_OUTPUT_POLARITY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP0_OUTPUT_POLARITY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP0_OUTPUT_POLARITY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP0_OUTPUT_POLARITY_HIGH                 _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP0_OUTPUT_POLARITY_LOW                  _MK_ENUM_CONST(1)

// LHP1 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP1_OUTPUT_POLARITY_SHIFT                        _MK_SHIFT_CONST(2)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP1_OUTPUT_POLARITY_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY2_0_LHP1_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP1_OUTPUT_POLARITY_RANGE                        2:2
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP1_OUTPUT_POLARITY_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP1_OUTPUT_POLARITY_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP1_OUTPUT_POLARITY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP1_OUTPUT_POLARITY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP1_OUTPUT_POLARITY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP1_OUTPUT_POLARITY_HIGH                 _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP1_OUTPUT_POLARITY_LOW                  _MK_ENUM_CONST(1)

// LHP2 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP2_OUTPUT_POLARITY_SHIFT                        _MK_SHIFT_CONST(4)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP2_OUTPUT_POLARITY_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY2_0_LHP2_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP2_OUTPUT_POLARITY_RANGE                        4:4
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP2_OUTPUT_POLARITY_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP2_OUTPUT_POLARITY_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP2_OUTPUT_POLARITY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP2_OUTPUT_POLARITY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP2_OUTPUT_POLARITY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP2_OUTPUT_POLARITY_HIGH                 _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LHP2_OUTPUT_POLARITY_LOW                  _MK_ENUM_CONST(1)

// LVP0 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LVP0_OUTPUT_POLARITY_SHIFT                        _MK_SHIFT_CONST(8)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LVP0_OUTPUT_POLARITY_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY2_0_LVP0_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LVP0_OUTPUT_POLARITY_RANGE                        8:8
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LVP0_OUTPUT_POLARITY_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LVP0_OUTPUT_POLARITY_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LVP0_OUTPUT_POLARITY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LVP0_OUTPUT_POLARITY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LVP0_OUTPUT_POLARITY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LVP0_OUTPUT_POLARITY_HIGH                 _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LVP0_OUTPUT_POLARITY_LOW                  _MK_ENUM_CONST(1)

// LVP1 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LVP1_OUTPUT_POLARITY_SHIFT                        _MK_SHIFT_CONST(10)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LVP1_OUTPUT_POLARITY_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY2_0_LVP1_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LVP1_OUTPUT_POLARITY_RANGE                        10:10
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LVP1_OUTPUT_POLARITY_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LVP1_OUTPUT_POLARITY_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LVP1_OUTPUT_POLARITY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LVP1_OUTPUT_POLARITY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LVP1_OUTPUT_POLARITY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LVP1_OUTPUT_POLARITY_HIGH                 _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LVP1_OUTPUT_POLARITY_LOW                  _MK_ENUM_CONST(1)

// LM0 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LM0_OUTPUT_POLARITY_SHIFT                 _MK_SHIFT_CONST(16)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LM0_OUTPUT_POLARITY_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY2_0_LM0_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LM0_OUTPUT_POLARITY_RANGE                 16:16
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LM0_OUTPUT_POLARITY_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LM0_OUTPUT_POLARITY_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LM0_OUTPUT_POLARITY_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LM0_OUTPUT_POLARITY_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LM0_OUTPUT_POLARITY_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LM0_OUTPUT_POLARITY_HIGH                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LM0_OUTPUT_POLARITY_LOW                   _MK_ENUM_CONST(1)

// LM1 pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LM1_OUTPUT_POLARITY_SHIFT                 _MK_SHIFT_CONST(18)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LM1_OUTPUT_POLARITY_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY2_0_LM1_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LM1_OUTPUT_POLARITY_RANGE                 18:18
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LM1_OUTPUT_POLARITY_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LM1_OUTPUT_POLARITY_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LM1_OUTPUT_POLARITY_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LM1_OUTPUT_POLARITY_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LM1_OUTPUT_POLARITY_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LM1_OUTPUT_POLARITY_HIGH                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LM1_OUTPUT_POLARITY_LOW                   _MK_ENUM_CONST(1)

// LDI pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LDI_OUTPUT_POLARITY_SHIFT                 _MK_SHIFT_CONST(20)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LDI_OUTPUT_POLARITY_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY2_0_LDI_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LDI_OUTPUT_POLARITY_RANGE                 20:20
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LDI_OUTPUT_POLARITY_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LDI_OUTPUT_POLARITY_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LDI_OUTPUT_POLARITY_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LDI_OUTPUT_POLARITY_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LDI_OUTPUT_POLARITY_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LDI_OUTPUT_POLARITY_HIGH                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LDI_OUTPUT_POLARITY_LOW                   _MK_ENUM_CONST(1)

// LPP pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LPP_OUTPUT_POLARITY_SHIFT                 _MK_SHIFT_CONST(22)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LPP_OUTPUT_POLARITY_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY2_0_LPP_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LPP_OUTPUT_POLARITY_RANGE                 22:22
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LPP_OUTPUT_POLARITY_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LPP_OUTPUT_POLARITY_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LPP_OUTPUT_POLARITY_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LPP_OUTPUT_POLARITY_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LPP_OUTPUT_POLARITY_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LPP_OUTPUT_POLARITY_HIGH                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY2_0_LPP_OUTPUT_POLARITY_LOW                   _MK_ENUM_CONST(1)


// Register DC_COM_PIN_OUTPUT_POLARITY3_0  // Pin Output Polarity 3
#define DC_COM_PIN_OUTPUT_POLARITY3_0                   _MK_ADDR_CONST(0x309)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_SECURE                    0x0
#define DC_COM_PIN_OUTPUT_POLARITY3_0_WORD_COUNT                        0x1
#define DC_COM_PIN_OUTPUT_POLARITY3_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_RESET_MASK                        _MK_MASK_CONST(0x555)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_READ_MASK                         _MK_MASK_CONST(0x555)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_WRITE_MASK                        _MK_MASK_CONST(0x555)
// LSCK pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSCK_OUTPUT_POLARITY_SHIFT                        _MK_SHIFT_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSCK_OUTPUT_POLARITY_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY3_0_LSCK_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSCK_OUTPUT_POLARITY_RANGE                        0:0
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSCK_OUTPUT_POLARITY_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSCK_OUTPUT_POLARITY_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSCK_OUTPUT_POLARITY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSCK_OUTPUT_POLARITY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSCK_OUTPUT_POLARITY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSCK_OUTPUT_POLARITY_HIGH                 _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSCK_OUTPUT_POLARITY_LOW                  _MK_ENUM_CONST(1)

// LSDA pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSDA_OUTPUT_POLARITY_SHIFT                        _MK_SHIFT_CONST(2)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSDA_OUTPUT_POLARITY_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY3_0_LSDA_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSDA_OUTPUT_POLARITY_RANGE                        2:2
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSDA_OUTPUT_POLARITY_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSDA_OUTPUT_POLARITY_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSDA_OUTPUT_POLARITY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSDA_OUTPUT_POLARITY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSDA_OUTPUT_POLARITY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSDA_OUTPUT_POLARITY_HIGH                 _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSDA_OUTPUT_POLARITY_LOW                  _MK_ENUM_CONST(1)

// LCSN pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LCSN_OUTPUT_POLARITY_SHIFT                        _MK_SHIFT_CONST(4)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LCSN_OUTPUT_POLARITY_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY3_0_LCSN_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LCSN_OUTPUT_POLARITY_RANGE                        4:4
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LCSN_OUTPUT_POLARITY_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LCSN_OUTPUT_POLARITY_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LCSN_OUTPUT_POLARITY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LCSN_OUTPUT_POLARITY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LCSN_OUTPUT_POLARITY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LCSN_OUTPUT_POLARITY_HIGH                 _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LCSN_OUTPUT_POLARITY_LOW                  _MK_ENUM_CONST(1)

// LDC pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LDC_OUTPUT_POLARITY_SHIFT                 _MK_SHIFT_CONST(6)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LDC_OUTPUT_POLARITY_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY3_0_LDC_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LDC_OUTPUT_POLARITY_RANGE                 6:6
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LDC_OUTPUT_POLARITY_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LDC_OUTPUT_POLARITY_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LDC_OUTPUT_POLARITY_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LDC_OUTPUT_POLARITY_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LDC_OUTPUT_POLARITY_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LDC_OUTPUT_POLARITY_HIGH                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LDC_OUTPUT_POLARITY_LOW                   _MK_ENUM_CONST(1)

// LSPI pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSPI_OUTPUT_POLARITY_SHIFT                        _MK_SHIFT_CONST(8)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSPI_OUTPUT_POLARITY_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY3_0_LSPI_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSPI_OUTPUT_POLARITY_RANGE                        8:8
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSPI_OUTPUT_POLARITY_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSPI_OUTPUT_POLARITY_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSPI_OUTPUT_POLARITY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSPI_OUTPUT_POLARITY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSPI_OUTPUT_POLARITY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSPI_OUTPUT_POLARITY_HIGH                 _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSPI_OUTPUT_POLARITY_LOW                  _MK_ENUM_CONST(1)

// LSDI pin output polarity   0= active high
//   1= active low
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSDI_OUTPUT_POLARITY_SHIFT                        _MK_SHIFT_CONST(10)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSDI_OUTPUT_POLARITY_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_POLARITY3_0_LSDI_OUTPUT_POLARITY_SHIFT)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSDI_OUTPUT_POLARITY_RANGE                        10:10
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSDI_OUTPUT_POLARITY_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSDI_OUTPUT_POLARITY_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSDI_OUTPUT_POLARITY_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSDI_OUTPUT_POLARITY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSDI_OUTPUT_POLARITY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSDI_OUTPUT_POLARITY_HIGH                 _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_POLARITY3_0_LSDI_OUTPUT_POLARITY_LOW                  _MK_ENUM_CONST(1)

// Pin Output data registers
// To change output data, the corresponding mask should be disabled (not masked).

// Register DC_COM_PIN_OUTPUT_DATA0_0  // Pin Output Data 0
#define DC_COM_PIN_OUTPUT_DATA0_0                       _MK_ADDR_CONST(0x30a)
#define DC_COM_PIN_OUTPUT_DATA0_0_SECURE                        0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_WORD_COUNT                    0x1
#define DC_COM_PIN_OUTPUT_DATA0_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_RESET_MASK                    _MK_MASK_CONST(0xffffffff)
#define DC_COM_PIN_OUTPUT_DATA0_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_READ_MASK                     _MK_MASK_CONST(0x55555555)
#define DC_COM_PIN_OUTPUT_DATA0_0_WRITE_MASK                    _MK_MASK_CONST(0xffffffff)
// LD0 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA0_0_LD0_OUTPUT_DATA_SHIFT                 _MK_SHIFT_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD0_OUTPUT_DATA_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD0_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD0_OUTPUT_DATA_RANGE                 0:0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD0_OUTPUT_DATA_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD0_OUTPUT_DATA_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD0_OUTPUT_DATA_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD0_OUTPUT_DATA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD0_OUTPUT_DATA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD0_OUTPUT_DATA_LOW                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD0_OUTPUT_DATA_HIGH                  _MK_ENUM_CONST(1)

// LD0 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA0_0_LD0_OUTPUT_DATA_MASK_SHIFT                    _MK_SHIFT_CONST(1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD0_OUTPUT_DATA_MASK_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD0_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD0_OUTPUT_DATA_MASK_RANGE                    1:1
#define DC_COM_PIN_OUTPUT_DATA0_0_LD0_OUTPUT_DATA_MASK_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD0_OUTPUT_DATA_MASK_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD0_OUTPUT_DATA_MASK_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD0_OUTPUT_DATA_MASK_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD0_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD0_OUTPUT_DATA_MASK_MASKED                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD0_OUTPUT_DATA_MASK_NOTMASKED                        _MK_ENUM_CONST(1)

// LD1 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA0_0_LD1_OUTPUT_DATA_SHIFT                 _MK_SHIFT_CONST(2)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD1_OUTPUT_DATA_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD1_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD1_OUTPUT_DATA_RANGE                 2:2
#define DC_COM_PIN_OUTPUT_DATA0_0_LD1_OUTPUT_DATA_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD1_OUTPUT_DATA_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD1_OUTPUT_DATA_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD1_OUTPUT_DATA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD1_OUTPUT_DATA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD1_OUTPUT_DATA_LOW                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD1_OUTPUT_DATA_HIGH                  _MK_ENUM_CONST(1)

// LD1 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA0_0_LD1_OUTPUT_DATA_MASK_SHIFT                    _MK_SHIFT_CONST(3)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD1_OUTPUT_DATA_MASK_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD1_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD1_OUTPUT_DATA_MASK_RANGE                    3:3
#define DC_COM_PIN_OUTPUT_DATA0_0_LD1_OUTPUT_DATA_MASK_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD1_OUTPUT_DATA_MASK_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD1_OUTPUT_DATA_MASK_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD1_OUTPUT_DATA_MASK_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD1_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD1_OUTPUT_DATA_MASK_MASKED                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD1_OUTPUT_DATA_MASK_NOTMASKED                        _MK_ENUM_CONST(1)

// LD2 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA0_0_LD2_OUTPUT_DATA_SHIFT                 _MK_SHIFT_CONST(4)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD2_OUTPUT_DATA_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD2_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD2_OUTPUT_DATA_RANGE                 4:4
#define DC_COM_PIN_OUTPUT_DATA0_0_LD2_OUTPUT_DATA_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD2_OUTPUT_DATA_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD2_OUTPUT_DATA_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD2_OUTPUT_DATA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD2_OUTPUT_DATA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD2_OUTPUT_DATA_LOW                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD2_OUTPUT_DATA_HIGH                  _MK_ENUM_CONST(1)

// LD2 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA0_0_LD2_OUTPUT_DATA_MASK_SHIFT                    _MK_SHIFT_CONST(5)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD2_OUTPUT_DATA_MASK_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD2_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD2_OUTPUT_DATA_MASK_RANGE                    5:5
#define DC_COM_PIN_OUTPUT_DATA0_0_LD2_OUTPUT_DATA_MASK_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD2_OUTPUT_DATA_MASK_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD2_OUTPUT_DATA_MASK_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD2_OUTPUT_DATA_MASK_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD2_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD2_OUTPUT_DATA_MASK_MASKED                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD2_OUTPUT_DATA_MASK_NOTMASKED                        _MK_ENUM_CONST(1)

// LD3 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA0_0_LD3_OUTPUT_DATA_SHIFT                 _MK_SHIFT_CONST(6)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD3_OUTPUT_DATA_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD3_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD3_OUTPUT_DATA_RANGE                 6:6
#define DC_COM_PIN_OUTPUT_DATA0_0_LD3_OUTPUT_DATA_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD3_OUTPUT_DATA_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD3_OUTPUT_DATA_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD3_OUTPUT_DATA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD3_OUTPUT_DATA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD3_OUTPUT_DATA_LOW                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD3_OUTPUT_DATA_HIGH                  _MK_ENUM_CONST(1)

// LD3 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA0_0_LD3_OUTPUT_DATA_MASK_SHIFT                    _MK_SHIFT_CONST(7)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD3_OUTPUT_DATA_MASK_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD3_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD3_OUTPUT_DATA_MASK_RANGE                    7:7
#define DC_COM_PIN_OUTPUT_DATA0_0_LD3_OUTPUT_DATA_MASK_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD3_OUTPUT_DATA_MASK_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD3_OUTPUT_DATA_MASK_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD3_OUTPUT_DATA_MASK_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD3_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD3_OUTPUT_DATA_MASK_MASKED                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD3_OUTPUT_DATA_MASK_NOTMASKED                        _MK_ENUM_CONST(1)

// LD4 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA0_0_LD4_OUTPUT_DATA_SHIFT                 _MK_SHIFT_CONST(8)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD4_OUTPUT_DATA_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD4_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD4_OUTPUT_DATA_RANGE                 8:8
#define DC_COM_PIN_OUTPUT_DATA0_0_LD4_OUTPUT_DATA_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD4_OUTPUT_DATA_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD4_OUTPUT_DATA_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD4_OUTPUT_DATA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD4_OUTPUT_DATA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD4_OUTPUT_DATA_LOW                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD4_OUTPUT_DATA_HIGH                  _MK_ENUM_CONST(1)

// LD4 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA0_0_LD4_OUTPUT_DATA_MASK_SHIFT                    _MK_SHIFT_CONST(9)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD4_OUTPUT_DATA_MASK_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD4_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD4_OUTPUT_DATA_MASK_RANGE                    9:9
#define DC_COM_PIN_OUTPUT_DATA0_0_LD4_OUTPUT_DATA_MASK_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD4_OUTPUT_DATA_MASK_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD4_OUTPUT_DATA_MASK_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD4_OUTPUT_DATA_MASK_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD4_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD4_OUTPUT_DATA_MASK_MASKED                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD4_OUTPUT_DATA_MASK_NOTMASKED                        _MK_ENUM_CONST(1)

// LD5 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA0_0_LD5_OUTPUT_DATA_SHIFT                 _MK_SHIFT_CONST(10)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD5_OUTPUT_DATA_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD5_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD5_OUTPUT_DATA_RANGE                 10:10
#define DC_COM_PIN_OUTPUT_DATA0_0_LD5_OUTPUT_DATA_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD5_OUTPUT_DATA_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD5_OUTPUT_DATA_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD5_OUTPUT_DATA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD5_OUTPUT_DATA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD5_OUTPUT_DATA_LOW                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD5_OUTPUT_DATA_HIGH                  _MK_ENUM_CONST(1)

// LD5 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA0_0_LD5_OUTPUT_DATA_MASK_SHIFT                    _MK_SHIFT_CONST(11)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD5_OUTPUT_DATA_MASK_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD5_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD5_OUTPUT_DATA_MASK_RANGE                    11:11
#define DC_COM_PIN_OUTPUT_DATA0_0_LD5_OUTPUT_DATA_MASK_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD5_OUTPUT_DATA_MASK_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD5_OUTPUT_DATA_MASK_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD5_OUTPUT_DATA_MASK_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD5_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD5_OUTPUT_DATA_MASK_MASKED                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD5_OUTPUT_DATA_MASK_NOTMASKED                        _MK_ENUM_CONST(1)

// LD6 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA0_0_LD6_OUTPUT_DATA_SHIFT                 _MK_SHIFT_CONST(12)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD6_OUTPUT_DATA_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD6_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD6_OUTPUT_DATA_RANGE                 12:12
#define DC_COM_PIN_OUTPUT_DATA0_0_LD6_OUTPUT_DATA_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD6_OUTPUT_DATA_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD6_OUTPUT_DATA_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD6_OUTPUT_DATA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD6_OUTPUT_DATA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD6_OUTPUT_DATA_LOW                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD6_OUTPUT_DATA_HIGH                  _MK_ENUM_CONST(1)

// LD6 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA0_0_LD6_OUTPUT_DATA_MASK_SHIFT                    _MK_SHIFT_CONST(13)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD6_OUTPUT_DATA_MASK_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD6_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD6_OUTPUT_DATA_MASK_RANGE                    13:13
#define DC_COM_PIN_OUTPUT_DATA0_0_LD6_OUTPUT_DATA_MASK_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD6_OUTPUT_DATA_MASK_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD6_OUTPUT_DATA_MASK_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD6_OUTPUT_DATA_MASK_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD6_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD6_OUTPUT_DATA_MASK_MASKED                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD6_OUTPUT_DATA_MASK_NOTMASKED                        _MK_ENUM_CONST(1)

// LD7 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA0_0_LD7_OUTPUT_DATA_SHIFT                 _MK_SHIFT_CONST(14)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD7_OUTPUT_DATA_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD7_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD7_OUTPUT_DATA_RANGE                 14:14
#define DC_COM_PIN_OUTPUT_DATA0_0_LD7_OUTPUT_DATA_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD7_OUTPUT_DATA_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD7_OUTPUT_DATA_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD7_OUTPUT_DATA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD7_OUTPUT_DATA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD7_OUTPUT_DATA_LOW                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD7_OUTPUT_DATA_HIGH                  _MK_ENUM_CONST(1)

// LD7 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA0_0_LD7_OUTPUT_DATA_MASK_SHIFT                    _MK_SHIFT_CONST(15)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD7_OUTPUT_DATA_MASK_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD7_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD7_OUTPUT_DATA_MASK_RANGE                    15:15
#define DC_COM_PIN_OUTPUT_DATA0_0_LD7_OUTPUT_DATA_MASK_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD7_OUTPUT_DATA_MASK_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD7_OUTPUT_DATA_MASK_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD7_OUTPUT_DATA_MASK_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD7_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD7_OUTPUT_DATA_MASK_MASKED                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD7_OUTPUT_DATA_MASK_NOTMASKED                        _MK_ENUM_CONST(1)

// LD8 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA0_0_LD8_OUTPUT_DATA_SHIFT                 _MK_SHIFT_CONST(16)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD8_OUTPUT_DATA_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD8_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD8_OUTPUT_DATA_RANGE                 16:16
#define DC_COM_PIN_OUTPUT_DATA0_0_LD8_OUTPUT_DATA_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD8_OUTPUT_DATA_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD8_OUTPUT_DATA_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD8_OUTPUT_DATA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD8_OUTPUT_DATA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD8_OUTPUT_DATA_LOW                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD8_OUTPUT_DATA_HIGH                  _MK_ENUM_CONST(1)

// LD8 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA0_0_LD8_OUTPUT_DATA_MASK_SHIFT                    _MK_SHIFT_CONST(17)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD8_OUTPUT_DATA_MASK_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD8_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD8_OUTPUT_DATA_MASK_RANGE                    17:17
#define DC_COM_PIN_OUTPUT_DATA0_0_LD8_OUTPUT_DATA_MASK_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD8_OUTPUT_DATA_MASK_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD8_OUTPUT_DATA_MASK_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD8_OUTPUT_DATA_MASK_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD8_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD8_OUTPUT_DATA_MASK_MASKED                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD8_OUTPUT_DATA_MASK_NOTMASKED                        _MK_ENUM_CONST(1)

// LD9 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA0_0_LD9_OUTPUT_DATA_SHIFT                 _MK_SHIFT_CONST(18)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD9_OUTPUT_DATA_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD9_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD9_OUTPUT_DATA_RANGE                 18:18
#define DC_COM_PIN_OUTPUT_DATA0_0_LD9_OUTPUT_DATA_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD9_OUTPUT_DATA_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD9_OUTPUT_DATA_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD9_OUTPUT_DATA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD9_OUTPUT_DATA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD9_OUTPUT_DATA_LOW                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD9_OUTPUT_DATA_HIGH                  _MK_ENUM_CONST(1)

// LD9 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA0_0_LD9_OUTPUT_DATA_MASK_SHIFT                    _MK_SHIFT_CONST(19)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD9_OUTPUT_DATA_MASK_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD9_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD9_OUTPUT_DATA_MASK_RANGE                    19:19
#define DC_COM_PIN_OUTPUT_DATA0_0_LD9_OUTPUT_DATA_MASK_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD9_OUTPUT_DATA_MASK_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD9_OUTPUT_DATA_MASK_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD9_OUTPUT_DATA_MASK_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD9_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD9_OUTPUT_DATA_MASK_MASKED                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD9_OUTPUT_DATA_MASK_NOTMASKED                        _MK_ENUM_CONST(1)

// LD10 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA0_0_LD10_OUTPUT_DATA_SHIFT                        _MK_SHIFT_CONST(20)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD10_OUTPUT_DATA_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD10_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD10_OUTPUT_DATA_RANGE                        20:20
#define DC_COM_PIN_OUTPUT_DATA0_0_LD10_OUTPUT_DATA_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD10_OUTPUT_DATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD10_OUTPUT_DATA_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD10_OUTPUT_DATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD10_OUTPUT_DATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD10_OUTPUT_DATA_LOW                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD10_OUTPUT_DATA_HIGH                 _MK_ENUM_CONST(1)

// LD10 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA0_0_LD10_OUTPUT_DATA_MASK_SHIFT                   _MK_SHIFT_CONST(21)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD10_OUTPUT_DATA_MASK_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD10_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD10_OUTPUT_DATA_MASK_RANGE                   21:21
#define DC_COM_PIN_OUTPUT_DATA0_0_LD10_OUTPUT_DATA_MASK_WOFFSET                 0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD10_OUTPUT_DATA_MASK_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD10_OUTPUT_DATA_MASK_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD10_OUTPUT_DATA_MASK_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD10_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD10_OUTPUT_DATA_MASK_MASKED                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD10_OUTPUT_DATA_MASK_NOTMASKED                       _MK_ENUM_CONST(1)

// LD11 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA0_0_LD11_OUTPUT_DATA_SHIFT                        _MK_SHIFT_CONST(22)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD11_OUTPUT_DATA_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD11_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD11_OUTPUT_DATA_RANGE                        22:22
#define DC_COM_PIN_OUTPUT_DATA0_0_LD11_OUTPUT_DATA_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD11_OUTPUT_DATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD11_OUTPUT_DATA_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD11_OUTPUT_DATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD11_OUTPUT_DATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD11_OUTPUT_DATA_LOW                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD11_OUTPUT_DATA_HIGH                 _MK_ENUM_CONST(1)

// LD11 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA0_0_LD11_OUTPUT_DATA_MASK_SHIFT                   _MK_SHIFT_CONST(23)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD11_OUTPUT_DATA_MASK_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD11_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD11_OUTPUT_DATA_MASK_RANGE                   23:23
#define DC_COM_PIN_OUTPUT_DATA0_0_LD11_OUTPUT_DATA_MASK_WOFFSET                 0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD11_OUTPUT_DATA_MASK_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD11_OUTPUT_DATA_MASK_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD11_OUTPUT_DATA_MASK_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD11_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD11_OUTPUT_DATA_MASK_MASKED                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD11_OUTPUT_DATA_MASK_NOTMASKED                       _MK_ENUM_CONST(1)

// LD12 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA0_0_LD12_OUTPUT_DATA_SHIFT                        _MK_SHIFT_CONST(24)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD12_OUTPUT_DATA_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD12_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD12_OUTPUT_DATA_RANGE                        24:24
#define DC_COM_PIN_OUTPUT_DATA0_0_LD12_OUTPUT_DATA_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD12_OUTPUT_DATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD12_OUTPUT_DATA_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD12_OUTPUT_DATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD12_OUTPUT_DATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD12_OUTPUT_DATA_LOW                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD12_OUTPUT_DATA_HIGH                 _MK_ENUM_CONST(1)

// LD12 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA0_0_LD12_OUTPUT_DATA_MASK_SHIFT                   _MK_SHIFT_CONST(25)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD12_OUTPUT_DATA_MASK_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD12_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD12_OUTPUT_DATA_MASK_RANGE                   25:25
#define DC_COM_PIN_OUTPUT_DATA0_0_LD12_OUTPUT_DATA_MASK_WOFFSET                 0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD12_OUTPUT_DATA_MASK_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD12_OUTPUT_DATA_MASK_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD12_OUTPUT_DATA_MASK_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD12_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD12_OUTPUT_DATA_MASK_MASKED                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD12_OUTPUT_DATA_MASK_NOTMASKED                       _MK_ENUM_CONST(1)

// LD13 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA0_0_LD13_OUTPUT_DATA_SHIFT                        _MK_SHIFT_CONST(26)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD13_OUTPUT_DATA_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD13_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD13_OUTPUT_DATA_RANGE                        26:26
#define DC_COM_PIN_OUTPUT_DATA0_0_LD13_OUTPUT_DATA_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD13_OUTPUT_DATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD13_OUTPUT_DATA_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD13_OUTPUT_DATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD13_OUTPUT_DATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD13_OUTPUT_DATA_LOW                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD13_OUTPUT_DATA_HIGH                 _MK_ENUM_CONST(1)

// LD13 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA0_0_LD13_OUTPUT_DATA_MASK_SHIFT                   _MK_SHIFT_CONST(27)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD13_OUTPUT_DATA_MASK_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD13_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD13_OUTPUT_DATA_MASK_RANGE                   27:27
#define DC_COM_PIN_OUTPUT_DATA0_0_LD13_OUTPUT_DATA_MASK_WOFFSET                 0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD13_OUTPUT_DATA_MASK_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD13_OUTPUT_DATA_MASK_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD13_OUTPUT_DATA_MASK_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD13_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD13_OUTPUT_DATA_MASK_MASKED                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD13_OUTPUT_DATA_MASK_NOTMASKED                       _MK_ENUM_CONST(1)

// LD14 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA0_0_LD14_OUTPUT_DATA_SHIFT                        _MK_SHIFT_CONST(28)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD14_OUTPUT_DATA_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD14_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD14_OUTPUT_DATA_RANGE                        28:28
#define DC_COM_PIN_OUTPUT_DATA0_0_LD14_OUTPUT_DATA_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD14_OUTPUT_DATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD14_OUTPUT_DATA_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD14_OUTPUT_DATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD14_OUTPUT_DATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD14_OUTPUT_DATA_LOW                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD14_OUTPUT_DATA_HIGH                 _MK_ENUM_CONST(1)

// LD14 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA0_0_LD14_OUTPUT_DATA_MASK_SHIFT                   _MK_SHIFT_CONST(29)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD14_OUTPUT_DATA_MASK_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD14_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD14_OUTPUT_DATA_MASK_RANGE                   29:29
#define DC_COM_PIN_OUTPUT_DATA0_0_LD14_OUTPUT_DATA_MASK_WOFFSET                 0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD14_OUTPUT_DATA_MASK_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD14_OUTPUT_DATA_MASK_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD14_OUTPUT_DATA_MASK_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD14_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD14_OUTPUT_DATA_MASK_MASKED                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD14_OUTPUT_DATA_MASK_NOTMASKED                       _MK_ENUM_CONST(1)

// LD15 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA0_0_LD15_OUTPUT_DATA_SHIFT                        _MK_SHIFT_CONST(30)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD15_OUTPUT_DATA_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD15_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD15_OUTPUT_DATA_RANGE                        30:30
#define DC_COM_PIN_OUTPUT_DATA0_0_LD15_OUTPUT_DATA_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD15_OUTPUT_DATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD15_OUTPUT_DATA_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD15_OUTPUT_DATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD15_OUTPUT_DATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD15_OUTPUT_DATA_LOW                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD15_OUTPUT_DATA_HIGH                 _MK_ENUM_CONST(1)

// LD15 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA0_0_LD15_OUTPUT_DATA_MASK_SHIFT                   _MK_SHIFT_CONST(31)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD15_OUTPUT_DATA_MASK_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA0_0_LD15_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD15_OUTPUT_DATA_MASK_RANGE                   31:31
#define DC_COM_PIN_OUTPUT_DATA0_0_LD15_OUTPUT_DATA_MASK_WOFFSET                 0x0
#define DC_COM_PIN_OUTPUT_DATA0_0_LD15_OUTPUT_DATA_MASK_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD15_OUTPUT_DATA_MASK_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD15_OUTPUT_DATA_MASK_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD15_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD15_OUTPUT_DATA_MASK_MASKED                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA0_0_LD15_OUTPUT_DATA_MASK_NOTMASKED                       _MK_ENUM_CONST(1)


// Register DC_COM_PIN_OUTPUT_DATA1_0  // Pin Output Data 1
#define DC_COM_PIN_OUTPUT_DATA1_0                       _MK_ADDR_CONST(0x30b)
#define DC_COM_PIN_OUTPUT_DATA1_0_SECURE                        0x0
#define DC_COM_PIN_OUTPUT_DATA1_0_WORD_COUNT                    0x1
#define DC_COM_PIN_OUTPUT_DATA1_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_RESET_MASK                    _MK_MASK_CONST(0xff3f000f)
#define DC_COM_PIN_OUTPUT_DATA1_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_READ_MASK                     _MK_MASK_CONST(0x55150005)
#define DC_COM_PIN_OUTPUT_DATA1_0_WRITE_MASK                    _MK_MASK_CONST(0xff3f000f)
// LD16 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA1_0_LD16_OUTPUT_DATA_SHIFT                        _MK_SHIFT_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LD16_OUTPUT_DATA_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA1_0_LD16_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA1_0_LD16_OUTPUT_DATA_RANGE                        0:0
#define DC_COM_PIN_OUTPUT_DATA1_0_LD16_OUTPUT_DATA_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_DATA1_0_LD16_OUTPUT_DATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LD16_OUTPUT_DATA_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA1_0_LD16_OUTPUT_DATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LD16_OUTPUT_DATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LD16_OUTPUT_DATA_LOW                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LD16_OUTPUT_DATA_HIGH                 _MK_ENUM_CONST(1)

// LD16 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA1_0_LD16_OUTPUT_DATA_MASK_SHIFT                   _MK_SHIFT_CONST(1)
#define DC_COM_PIN_OUTPUT_DATA1_0_LD16_OUTPUT_DATA_MASK_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA1_0_LD16_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA1_0_LD16_OUTPUT_DATA_MASK_RANGE                   1:1
#define DC_COM_PIN_OUTPUT_DATA1_0_LD16_OUTPUT_DATA_MASK_WOFFSET                 0x0
#define DC_COM_PIN_OUTPUT_DATA1_0_LD16_OUTPUT_DATA_MASK_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LD16_OUTPUT_DATA_MASK_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA1_0_LD16_OUTPUT_DATA_MASK_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LD16_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LD16_OUTPUT_DATA_MASK_MASKED                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LD16_OUTPUT_DATA_MASK_NOTMASKED                       _MK_ENUM_CONST(1)

// LD17 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA1_0_LD17_OUTPUT_DATA_SHIFT                        _MK_SHIFT_CONST(2)
#define DC_COM_PIN_OUTPUT_DATA1_0_LD17_OUTPUT_DATA_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA1_0_LD17_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA1_0_LD17_OUTPUT_DATA_RANGE                        2:2
#define DC_COM_PIN_OUTPUT_DATA1_0_LD17_OUTPUT_DATA_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_DATA1_0_LD17_OUTPUT_DATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LD17_OUTPUT_DATA_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA1_0_LD17_OUTPUT_DATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LD17_OUTPUT_DATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LD17_OUTPUT_DATA_LOW                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LD17_OUTPUT_DATA_HIGH                 _MK_ENUM_CONST(1)

// LD17 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA1_0_LD17_OUTPUT_DATA_MASK_SHIFT                   _MK_SHIFT_CONST(3)
#define DC_COM_PIN_OUTPUT_DATA1_0_LD17_OUTPUT_DATA_MASK_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA1_0_LD17_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA1_0_LD17_OUTPUT_DATA_MASK_RANGE                   3:3
#define DC_COM_PIN_OUTPUT_DATA1_0_LD17_OUTPUT_DATA_MASK_WOFFSET                 0x0
#define DC_COM_PIN_OUTPUT_DATA1_0_LD17_OUTPUT_DATA_MASK_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LD17_OUTPUT_DATA_MASK_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA1_0_LD17_OUTPUT_DATA_MASK_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LD17_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LD17_OUTPUT_DATA_MASK_MASKED                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LD17_OUTPUT_DATA_MASK_NOTMASKED                       _MK_ENUM_CONST(1)

// LPW0 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW0_OUTPUT_DATA_SHIFT                        _MK_SHIFT_CONST(16)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW0_OUTPUT_DATA_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA1_0_LPW0_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW0_OUTPUT_DATA_RANGE                        16:16
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW0_OUTPUT_DATA_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW0_OUTPUT_DATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW0_OUTPUT_DATA_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW0_OUTPUT_DATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW0_OUTPUT_DATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW0_OUTPUT_DATA_LOW                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW0_OUTPUT_DATA_HIGH                 _MK_ENUM_CONST(1)

// LPW0 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW0_OUTPUT_DATA_MASK_SHIFT                   _MK_SHIFT_CONST(17)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW0_OUTPUT_DATA_MASK_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA1_0_LPW0_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW0_OUTPUT_DATA_MASK_RANGE                   17:17
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW0_OUTPUT_DATA_MASK_WOFFSET                 0x0
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW0_OUTPUT_DATA_MASK_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW0_OUTPUT_DATA_MASK_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW0_OUTPUT_DATA_MASK_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW0_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW0_OUTPUT_DATA_MASK_MASKED                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW0_OUTPUT_DATA_MASK_NOTMASKED                       _MK_ENUM_CONST(1)

// LPW1 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW1_OUTPUT_DATA_SHIFT                        _MK_SHIFT_CONST(18)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW1_OUTPUT_DATA_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA1_0_LPW1_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW1_OUTPUT_DATA_RANGE                        18:18
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW1_OUTPUT_DATA_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW1_OUTPUT_DATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW1_OUTPUT_DATA_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW1_OUTPUT_DATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW1_OUTPUT_DATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW1_OUTPUT_DATA_LOW                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW1_OUTPUT_DATA_HIGH                 _MK_ENUM_CONST(1)

// LPW1 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW1_OUTPUT_DATA_MASK_SHIFT                   _MK_SHIFT_CONST(19)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW1_OUTPUT_DATA_MASK_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA1_0_LPW1_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW1_OUTPUT_DATA_MASK_RANGE                   19:19
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW1_OUTPUT_DATA_MASK_WOFFSET                 0x0
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW1_OUTPUT_DATA_MASK_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW1_OUTPUT_DATA_MASK_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW1_OUTPUT_DATA_MASK_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW1_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW1_OUTPUT_DATA_MASK_MASKED                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW1_OUTPUT_DATA_MASK_NOTMASKED                       _MK_ENUM_CONST(1)

// LPW2 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW2_OUTPUT_DATA_SHIFT                        _MK_SHIFT_CONST(20)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW2_OUTPUT_DATA_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA1_0_LPW2_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW2_OUTPUT_DATA_RANGE                        20:20
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW2_OUTPUT_DATA_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW2_OUTPUT_DATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW2_OUTPUT_DATA_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW2_OUTPUT_DATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW2_OUTPUT_DATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW2_OUTPUT_DATA_LOW                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW2_OUTPUT_DATA_HIGH                 _MK_ENUM_CONST(1)

// LPW2 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW2_OUTPUT_DATA_MASK_SHIFT                   _MK_SHIFT_CONST(21)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW2_OUTPUT_DATA_MASK_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA1_0_LPW2_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW2_OUTPUT_DATA_MASK_RANGE                   21:21
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW2_OUTPUT_DATA_MASK_WOFFSET                 0x0
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW2_OUTPUT_DATA_MASK_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW2_OUTPUT_DATA_MASK_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW2_OUTPUT_DATA_MASK_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW2_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW2_OUTPUT_DATA_MASK_MASKED                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LPW2_OUTPUT_DATA_MASK_NOTMASKED                       _MK_ENUM_CONST(1)

// LSC0 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC0_OUTPUT_DATA_SHIFT                        _MK_SHIFT_CONST(24)
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC0_OUTPUT_DATA_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA1_0_LSC0_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC0_OUTPUT_DATA_RANGE                        24:24
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC0_OUTPUT_DATA_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC0_OUTPUT_DATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC0_OUTPUT_DATA_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC0_OUTPUT_DATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC0_OUTPUT_DATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC0_OUTPUT_DATA_LOW                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC0_OUTPUT_DATA_HIGH                 _MK_ENUM_CONST(1)

// LSC0 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC0_OUTPUT_DATA_MASK_SHIFT                   _MK_SHIFT_CONST(25)
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC0_OUTPUT_DATA_MASK_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA1_0_LSC0_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC0_OUTPUT_DATA_MASK_RANGE                   25:25
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC0_OUTPUT_DATA_MASK_WOFFSET                 0x0
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC0_OUTPUT_DATA_MASK_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC0_OUTPUT_DATA_MASK_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC0_OUTPUT_DATA_MASK_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC0_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC0_OUTPUT_DATA_MASK_MASKED                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC0_OUTPUT_DATA_MASK_NOTMASKED                       _MK_ENUM_CONST(1)

// LSC1 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC1_OUTPUT_DATA_SHIFT                        _MK_SHIFT_CONST(26)
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC1_OUTPUT_DATA_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA1_0_LSC1_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC1_OUTPUT_DATA_RANGE                        26:26
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC1_OUTPUT_DATA_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC1_OUTPUT_DATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC1_OUTPUT_DATA_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC1_OUTPUT_DATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC1_OUTPUT_DATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC1_OUTPUT_DATA_LOW                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC1_OUTPUT_DATA_HIGH                 _MK_ENUM_CONST(1)

// LSC1 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC1_OUTPUT_DATA_MASK_SHIFT                   _MK_SHIFT_CONST(27)
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC1_OUTPUT_DATA_MASK_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA1_0_LSC1_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC1_OUTPUT_DATA_MASK_RANGE                   27:27
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC1_OUTPUT_DATA_MASK_WOFFSET                 0x0
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC1_OUTPUT_DATA_MASK_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC1_OUTPUT_DATA_MASK_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC1_OUTPUT_DATA_MASK_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC1_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC1_OUTPUT_DATA_MASK_MASKED                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LSC1_OUTPUT_DATA_MASK_NOTMASKED                       _MK_ENUM_CONST(1)

// LVS pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA1_0_LVS_OUTPUT_DATA_SHIFT                 _MK_SHIFT_CONST(28)
#define DC_COM_PIN_OUTPUT_DATA1_0_LVS_OUTPUT_DATA_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA1_0_LVS_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA1_0_LVS_OUTPUT_DATA_RANGE                 28:28
#define DC_COM_PIN_OUTPUT_DATA1_0_LVS_OUTPUT_DATA_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_DATA1_0_LVS_OUTPUT_DATA_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LVS_OUTPUT_DATA_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA1_0_LVS_OUTPUT_DATA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LVS_OUTPUT_DATA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LVS_OUTPUT_DATA_LOW                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LVS_OUTPUT_DATA_HIGH                  _MK_ENUM_CONST(1)

// LVS pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA1_0_LVS_OUTPUT_DATA_MASK_SHIFT                    _MK_SHIFT_CONST(29)
#define DC_COM_PIN_OUTPUT_DATA1_0_LVS_OUTPUT_DATA_MASK_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA1_0_LVS_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA1_0_LVS_OUTPUT_DATA_MASK_RANGE                    29:29
#define DC_COM_PIN_OUTPUT_DATA1_0_LVS_OUTPUT_DATA_MASK_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_DATA1_0_LVS_OUTPUT_DATA_MASK_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LVS_OUTPUT_DATA_MASK_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA1_0_LVS_OUTPUT_DATA_MASK_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LVS_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LVS_OUTPUT_DATA_MASK_MASKED                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LVS_OUTPUT_DATA_MASK_NOTMASKED                        _MK_ENUM_CONST(1)

// LHS pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA1_0_LHS_OUTPUT_DATA_SHIFT                 _MK_SHIFT_CONST(30)
#define DC_COM_PIN_OUTPUT_DATA1_0_LHS_OUTPUT_DATA_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA1_0_LHS_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA1_0_LHS_OUTPUT_DATA_RANGE                 30:30
#define DC_COM_PIN_OUTPUT_DATA1_0_LHS_OUTPUT_DATA_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_DATA1_0_LHS_OUTPUT_DATA_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LHS_OUTPUT_DATA_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA1_0_LHS_OUTPUT_DATA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LHS_OUTPUT_DATA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LHS_OUTPUT_DATA_LOW                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LHS_OUTPUT_DATA_HIGH                  _MK_ENUM_CONST(1)

// LHS pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA1_0_LHS_OUTPUT_DATA_MASK_SHIFT                    _MK_SHIFT_CONST(31)
#define DC_COM_PIN_OUTPUT_DATA1_0_LHS_OUTPUT_DATA_MASK_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA1_0_LHS_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA1_0_LHS_OUTPUT_DATA_MASK_RANGE                    31:31
#define DC_COM_PIN_OUTPUT_DATA1_0_LHS_OUTPUT_DATA_MASK_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_DATA1_0_LHS_OUTPUT_DATA_MASK_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LHS_OUTPUT_DATA_MASK_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA1_0_LHS_OUTPUT_DATA_MASK_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LHS_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LHS_OUTPUT_DATA_MASK_MASKED                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA1_0_LHS_OUTPUT_DATA_MASK_NOTMASKED                        _MK_ENUM_CONST(1)


// Register DC_COM_PIN_OUTPUT_DATA2_0  // Pin Output Data 2
#define DC_COM_PIN_OUTPUT_DATA2_0                       _MK_ADDR_CONST(0x30c)
#define DC_COM_PIN_OUTPUT_DATA2_0_SECURE                        0x0
#define DC_COM_PIN_OUTPUT_DATA2_0_WORD_COUNT                    0x1
#define DC_COM_PIN_OUTPUT_DATA2_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_RESET_MASK                    _MK_MASK_CONST(0xff0f3f)
#define DC_COM_PIN_OUTPUT_DATA2_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_READ_MASK                     _MK_MASK_CONST(0x550515)
#define DC_COM_PIN_OUTPUT_DATA2_0_WRITE_MASK                    _MK_MASK_CONST(0xff0f3f)
// LHP0 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP0_OUTPUT_DATA_SHIFT                        _MK_SHIFT_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP0_OUTPUT_DATA_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA2_0_LHP0_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP0_OUTPUT_DATA_RANGE                        0:0
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP0_OUTPUT_DATA_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP0_OUTPUT_DATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP0_OUTPUT_DATA_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP0_OUTPUT_DATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP0_OUTPUT_DATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP0_OUTPUT_DATA_LOW                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP0_OUTPUT_DATA_HIGH                 _MK_ENUM_CONST(1)

// LHP0 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP0_OUTPUT_DATA_MASK_SHIFT                   _MK_SHIFT_CONST(1)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP0_OUTPUT_DATA_MASK_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA2_0_LHP0_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP0_OUTPUT_DATA_MASK_RANGE                   1:1
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP0_OUTPUT_DATA_MASK_WOFFSET                 0x0
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP0_OUTPUT_DATA_MASK_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP0_OUTPUT_DATA_MASK_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP0_OUTPUT_DATA_MASK_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP0_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP0_OUTPUT_DATA_MASK_MASKED                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP0_OUTPUT_DATA_MASK_NOTMASKED                       _MK_ENUM_CONST(1)

// LHP1 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP1_OUTPUT_DATA_SHIFT                        _MK_SHIFT_CONST(2)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP1_OUTPUT_DATA_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA2_0_LHP1_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP1_OUTPUT_DATA_RANGE                        2:2
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP1_OUTPUT_DATA_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP1_OUTPUT_DATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP1_OUTPUT_DATA_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP1_OUTPUT_DATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP1_OUTPUT_DATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP1_OUTPUT_DATA_LOW                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP1_OUTPUT_DATA_HIGH                 _MK_ENUM_CONST(1)

// LHP1 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP1_OUTPUT_DATA_MASK_SHIFT                   _MK_SHIFT_CONST(3)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP1_OUTPUT_DATA_MASK_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA2_0_LHP1_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP1_OUTPUT_DATA_MASK_RANGE                   3:3
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP1_OUTPUT_DATA_MASK_WOFFSET                 0x0
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP1_OUTPUT_DATA_MASK_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP1_OUTPUT_DATA_MASK_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP1_OUTPUT_DATA_MASK_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP1_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP1_OUTPUT_DATA_MASK_MASKED                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP1_OUTPUT_DATA_MASK_NOTMASKED                       _MK_ENUM_CONST(1)

// LHP2 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP2_OUTPUT_DATA_SHIFT                        _MK_SHIFT_CONST(4)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP2_OUTPUT_DATA_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA2_0_LHP2_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP2_OUTPUT_DATA_RANGE                        4:4
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP2_OUTPUT_DATA_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP2_OUTPUT_DATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP2_OUTPUT_DATA_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP2_OUTPUT_DATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP2_OUTPUT_DATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP2_OUTPUT_DATA_LOW                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP2_OUTPUT_DATA_HIGH                 _MK_ENUM_CONST(1)

// LHP2 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP2_OUTPUT_DATA_MASK_SHIFT                   _MK_SHIFT_CONST(5)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP2_OUTPUT_DATA_MASK_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA2_0_LHP2_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP2_OUTPUT_DATA_MASK_RANGE                   5:5
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP2_OUTPUT_DATA_MASK_WOFFSET                 0x0
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP2_OUTPUT_DATA_MASK_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP2_OUTPUT_DATA_MASK_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP2_OUTPUT_DATA_MASK_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP2_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP2_OUTPUT_DATA_MASK_MASKED                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LHP2_OUTPUT_DATA_MASK_NOTMASKED                       _MK_ENUM_CONST(1)

// LVP0 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP0_OUTPUT_DATA_SHIFT                        _MK_SHIFT_CONST(8)
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP0_OUTPUT_DATA_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA2_0_LVP0_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP0_OUTPUT_DATA_RANGE                        8:8
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP0_OUTPUT_DATA_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP0_OUTPUT_DATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP0_OUTPUT_DATA_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP0_OUTPUT_DATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP0_OUTPUT_DATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP0_OUTPUT_DATA_LOW                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP0_OUTPUT_DATA_HIGH                 _MK_ENUM_CONST(1)

// LVP0 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP0_OUTPUT_DATA_MASK_SHIFT                   _MK_SHIFT_CONST(9)
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP0_OUTPUT_DATA_MASK_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA2_0_LVP0_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP0_OUTPUT_DATA_MASK_RANGE                   9:9
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP0_OUTPUT_DATA_MASK_WOFFSET                 0x0
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP0_OUTPUT_DATA_MASK_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP0_OUTPUT_DATA_MASK_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP0_OUTPUT_DATA_MASK_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP0_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP0_OUTPUT_DATA_MASK_MASKED                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP0_OUTPUT_DATA_MASK_NOTMASKED                       _MK_ENUM_CONST(1)

// LVP1 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP1_OUTPUT_DATA_SHIFT                        _MK_SHIFT_CONST(10)
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP1_OUTPUT_DATA_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA2_0_LVP1_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP1_OUTPUT_DATA_RANGE                        10:10
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP1_OUTPUT_DATA_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP1_OUTPUT_DATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP1_OUTPUT_DATA_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP1_OUTPUT_DATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP1_OUTPUT_DATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP1_OUTPUT_DATA_LOW                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP1_OUTPUT_DATA_HIGH                 _MK_ENUM_CONST(1)

// LVP1 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP1_OUTPUT_DATA_MASK_SHIFT                   _MK_SHIFT_CONST(11)
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP1_OUTPUT_DATA_MASK_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA2_0_LVP1_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP1_OUTPUT_DATA_MASK_RANGE                   11:11
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP1_OUTPUT_DATA_MASK_WOFFSET                 0x0
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP1_OUTPUT_DATA_MASK_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP1_OUTPUT_DATA_MASK_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP1_OUTPUT_DATA_MASK_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP1_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP1_OUTPUT_DATA_MASK_MASKED                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LVP1_OUTPUT_DATA_MASK_NOTMASKED                       _MK_ENUM_CONST(1)

// LM0 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA2_0_LM0_OUTPUT_DATA_SHIFT                 _MK_SHIFT_CONST(16)
#define DC_COM_PIN_OUTPUT_DATA2_0_LM0_OUTPUT_DATA_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA2_0_LM0_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA2_0_LM0_OUTPUT_DATA_RANGE                 16:16
#define DC_COM_PIN_OUTPUT_DATA2_0_LM0_OUTPUT_DATA_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_DATA2_0_LM0_OUTPUT_DATA_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LM0_OUTPUT_DATA_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA2_0_LM0_OUTPUT_DATA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LM0_OUTPUT_DATA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LM0_OUTPUT_DATA_LOW                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LM0_OUTPUT_DATA_HIGH                  _MK_ENUM_CONST(1)

// LM0 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA2_0_LM0_OUTPUT_DATA_MASK_SHIFT                    _MK_SHIFT_CONST(17)
#define DC_COM_PIN_OUTPUT_DATA2_0_LM0_OUTPUT_DATA_MASK_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA2_0_LM0_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA2_0_LM0_OUTPUT_DATA_MASK_RANGE                    17:17
#define DC_COM_PIN_OUTPUT_DATA2_0_LM0_OUTPUT_DATA_MASK_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_DATA2_0_LM0_OUTPUT_DATA_MASK_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LM0_OUTPUT_DATA_MASK_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA2_0_LM0_OUTPUT_DATA_MASK_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LM0_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LM0_OUTPUT_DATA_MASK_MASKED                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LM0_OUTPUT_DATA_MASK_NOTMASKED                        _MK_ENUM_CONST(1)

// LM1 pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA2_0_LM1_OUTPUT_DATA_SHIFT                 _MK_SHIFT_CONST(18)
#define DC_COM_PIN_OUTPUT_DATA2_0_LM1_OUTPUT_DATA_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA2_0_LM1_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA2_0_LM1_OUTPUT_DATA_RANGE                 18:18
#define DC_COM_PIN_OUTPUT_DATA2_0_LM1_OUTPUT_DATA_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_DATA2_0_LM1_OUTPUT_DATA_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LM1_OUTPUT_DATA_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA2_0_LM1_OUTPUT_DATA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LM1_OUTPUT_DATA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LM1_OUTPUT_DATA_LOW                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LM1_OUTPUT_DATA_HIGH                  _MK_ENUM_CONST(1)

// LM1 pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA2_0_LM1_OUTPUT_DATA_MASK_SHIFT                    _MK_SHIFT_CONST(19)
#define DC_COM_PIN_OUTPUT_DATA2_0_LM1_OUTPUT_DATA_MASK_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA2_0_LM1_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA2_0_LM1_OUTPUT_DATA_MASK_RANGE                    19:19
#define DC_COM_PIN_OUTPUT_DATA2_0_LM1_OUTPUT_DATA_MASK_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_DATA2_0_LM1_OUTPUT_DATA_MASK_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LM1_OUTPUT_DATA_MASK_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA2_0_LM1_OUTPUT_DATA_MASK_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LM1_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LM1_OUTPUT_DATA_MASK_MASKED                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LM1_OUTPUT_DATA_MASK_NOTMASKED                        _MK_ENUM_CONST(1)

// LDI pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA2_0_LDI_OUTPUT_DATA_SHIFT                 _MK_SHIFT_CONST(20)
#define DC_COM_PIN_OUTPUT_DATA2_0_LDI_OUTPUT_DATA_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA2_0_LDI_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA2_0_LDI_OUTPUT_DATA_RANGE                 20:20
#define DC_COM_PIN_OUTPUT_DATA2_0_LDI_OUTPUT_DATA_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_DATA2_0_LDI_OUTPUT_DATA_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LDI_OUTPUT_DATA_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA2_0_LDI_OUTPUT_DATA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LDI_OUTPUT_DATA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LDI_OUTPUT_DATA_LOW                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LDI_OUTPUT_DATA_HIGH                  _MK_ENUM_CONST(1)

// LDI pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA2_0_LDI_OUTPUT_DATA_MASK_SHIFT                    _MK_SHIFT_CONST(21)
#define DC_COM_PIN_OUTPUT_DATA2_0_LDI_OUTPUT_DATA_MASK_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA2_0_LDI_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA2_0_LDI_OUTPUT_DATA_MASK_RANGE                    21:21
#define DC_COM_PIN_OUTPUT_DATA2_0_LDI_OUTPUT_DATA_MASK_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_DATA2_0_LDI_OUTPUT_DATA_MASK_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LDI_OUTPUT_DATA_MASK_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA2_0_LDI_OUTPUT_DATA_MASK_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LDI_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LDI_OUTPUT_DATA_MASK_MASKED                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LDI_OUTPUT_DATA_MASK_NOTMASKED                        _MK_ENUM_CONST(1)

// LPP pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA2_0_LPP_OUTPUT_DATA_SHIFT                 _MK_SHIFT_CONST(22)
#define DC_COM_PIN_OUTPUT_DATA2_0_LPP_OUTPUT_DATA_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA2_0_LPP_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA2_0_LPP_OUTPUT_DATA_RANGE                 22:22
#define DC_COM_PIN_OUTPUT_DATA2_0_LPP_OUTPUT_DATA_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_DATA2_0_LPP_OUTPUT_DATA_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LPP_OUTPUT_DATA_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA2_0_LPP_OUTPUT_DATA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LPP_OUTPUT_DATA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LPP_OUTPUT_DATA_LOW                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LPP_OUTPUT_DATA_HIGH                  _MK_ENUM_CONST(1)

// LPP pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA2_0_LPP_OUTPUT_DATA_MASK_SHIFT                    _MK_SHIFT_CONST(23)
#define DC_COM_PIN_OUTPUT_DATA2_0_LPP_OUTPUT_DATA_MASK_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA2_0_LPP_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA2_0_LPP_OUTPUT_DATA_MASK_RANGE                    23:23
#define DC_COM_PIN_OUTPUT_DATA2_0_LPP_OUTPUT_DATA_MASK_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_DATA2_0_LPP_OUTPUT_DATA_MASK_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LPP_OUTPUT_DATA_MASK_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA2_0_LPP_OUTPUT_DATA_MASK_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LPP_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LPP_OUTPUT_DATA_MASK_MASKED                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA2_0_LPP_OUTPUT_DATA_MASK_NOTMASKED                        _MK_ENUM_CONST(1)

// Pin Output data registers

// Register DC_COM_PIN_OUTPUT_DATA3_0  // Pin Output Data 3
#define DC_COM_PIN_OUTPUT_DATA3_0                       _MK_ADDR_CONST(0x30d)
#define DC_COM_PIN_OUTPUT_DATA3_0_SECURE                        0x0
#define DC_COM_PIN_OUTPUT_DATA3_0_WORD_COUNT                    0x1
#define DC_COM_PIN_OUTPUT_DATA3_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_RESET_MASK                    _MK_MASK_CONST(0xfff)
#define DC_COM_PIN_OUTPUT_DATA3_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_READ_MASK                     _MK_MASK_CONST(0x555)
#define DC_COM_PIN_OUTPUT_DATA3_0_WRITE_MASK                    _MK_MASK_CONST(0xfff)
// LSCK pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA3_0_LSCK_OUTPUT_DATA_SHIFT                        _MK_SHIFT_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSCK_OUTPUT_DATA_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA3_0_LSCK_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSCK_OUTPUT_DATA_RANGE                        0:0
#define DC_COM_PIN_OUTPUT_DATA3_0_LSCK_OUTPUT_DATA_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_DATA3_0_LSCK_OUTPUT_DATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSCK_OUTPUT_DATA_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSCK_OUTPUT_DATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSCK_OUTPUT_DATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSCK_OUTPUT_DATA_LOW                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSCK_OUTPUT_DATA_HIGH                 _MK_ENUM_CONST(1)

// LSCK pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA3_0_LSCK_OUTPUT_DATA_MASK_SHIFT                   _MK_SHIFT_CONST(1)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSCK_OUTPUT_DATA_MASK_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA3_0_LSCK_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSCK_OUTPUT_DATA_MASK_RANGE                   1:1
#define DC_COM_PIN_OUTPUT_DATA3_0_LSCK_OUTPUT_DATA_MASK_WOFFSET                 0x0
#define DC_COM_PIN_OUTPUT_DATA3_0_LSCK_OUTPUT_DATA_MASK_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSCK_OUTPUT_DATA_MASK_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSCK_OUTPUT_DATA_MASK_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSCK_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSCK_OUTPUT_DATA_MASK_MASKED                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSCK_OUTPUT_DATA_MASK_NOTMASKED                       _MK_ENUM_CONST(1)

// LSDA pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDA_OUTPUT_DATA_SHIFT                        _MK_SHIFT_CONST(2)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDA_OUTPUT_DATA_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA3_0_LSDA_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDA_OUTPUT_DATA_RANGE                        2:2
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDA_OUTPUT_DATA_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDA_OUTPUT_DATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDA_OUTPUT_DATA_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDA_OUTPUT_DATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDA_OUTPUT_DATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDA_OUTPUT_DATA_LOW                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDA_OUTPUT_DATA_HIGH                 _MK_ENUM_CONST(1)

// LSDA pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDA_OUTPUT_DATA_MASK_SHIFT                   _MK_SHIFT_CONST(3)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDA_OUTPUT_DATA_MASK_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA3_0_LSDA_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDA_OUTPUT_DATA_MASK_RANGE                   3:3
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDA_OUTPUT_DATA_MASK_WOFFSET                 0x0
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDA_OUTPUT_DATA_MASK_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDA_OUTPUT_DATA_MASK_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDA_OUTPUT_DATA_MASK_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDA_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDA_OUTPUT_DATA_MASK_MASKED                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDA_OUTPUT_DATA_MASK_NOTMASKED                       _MK_ENUM_CONST(1)

// LCSN pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA3_0_LCSN_OUTPUT_DATA_SHIFT                        _MK_SHIFT_CONST(4)
#define DC_COM_PIN_OUTPUT_DATA3_0_LCSN_OUTPUT_DATA_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA3_0_LCSN_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA3_0_LCSN_OUTPUT_DATA_RANGE                        4:4
#define DC_COM_PIN_OUTPUT_DATA3_0_LCSN_OUTPUT_DATA_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_DATA3_0_LCSN_OUTPUT_DATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LCSN_OUTPUT_DATA_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA3_0_LCSN_OUTPUT_DATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LCSN_OUTPUT_DATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LCSN_OUTPUT_DATA_LOW                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LCSN_OUTPUT_DATA_HIGH                 _MK_ENUM_CONST(1)

// LCSN pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA3_0_LCSN_OUTPUT_DATA_MASK_SHIFT                   _MK_SHIFT_CONST(5)
#define DC_COM_PIN_OUTPUT_DATA3_0_LCSN_OUTPUT_DATA_MASK_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA3_0_LCSN_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA3_0_LCSN_OUTPUT_DATA_MASK_RANGE                   5:5
#define DC_COM_PIN_OUTPUT_DATA3_0_LCSN_OUTPUT_DATA_MASK_WOFFSET                 0x0
#define DC_COM_PIN_OUTPUT_DATA3_0_LCSN_OUTPUT_DATA_MASK_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LCSN_OUTPUT_DATA_MASK_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA3_0_LCSN_OUTPUT_DATA_MASK_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LCSN_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LCSN_OUTPUT_DATA_MASK_MASKED                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LCSN_OUTPUT_DATA_MASK_NOTMASKED                       _MK_ENUM_CONST(1)

// LDC pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA3_0_LDC_OUTPUT_DATA_SHIFT                 _MK_SHIFT_CONST(6)
#define DC_COM_PIN_OUTPUT_DATA3_0_LDC_OUTPUT_DATA_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA3_0_LDC_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA3_0_LDC_OUTPUT_DATA_RANGE                 6:6
#define DC_COM_PIN_OUTPUT_DATA3_0_LDC_OUTPUT_DATA_WOFFSET                       0x0
#define DC_COM_PIN_OUTPUT_DATA3_0_LDC_OUTPUT_DATA_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LDC_OUTPUT_DATA_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA3_0_LDC_OUTPUT_DATA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LDC_OUTPUT_DATA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LDC_OUTPUT_DATA_LOW                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LDC_OUTPUT_DATA_HIGH                  _MK_ENUM_CONST(1)

// LDC pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA3_0_LDC_OUTPUT_DATA_MASK_SHIFT                    _MK_SHIFT_CONST(7)
#define DC_COM_PIN_OUTPUT_DATA3_0_LDC_OUTPUT_DATA_MASK_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA3_0_LDC_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA3_0_LDC_OUTPUT_DATA_MASK_RANGE                    7:7
#define DC_COM_PIN_OUTPUT_DATA3_0_LDC_OUTPUT_DATA_MASK_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_DATA3_0_LDC_OUTPUT_DATA_MASK_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LDC_OUTPUT_DATA_MASK_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA3_0_LDC_OUTPUT_DATA_MASK_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LDC_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LDC_OUTPUT_DATA_MASK_MASKED                   _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LDC_OUTPUT_DATA_MASK_NOTMASKED                        _MK_ENUM_CONST(1)

// LSPI pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA3_0_LSPI_OUTPUT_DATA_SHIFT                        _MK_SHIFT_CONST(8)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSPI_OUTPUT_DATA_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA3_0_LSPI_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSPI_OUTPUT_DATA_RANGE                        8:8
#define DC_COM_PIN_OUTPUT_DATA3_0_LSPI_OUTPUT_DATA_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_DATA3_0_LSPI_OUTPUT_DATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSPI_OUTPUT_DATA_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSPI_OUTPUT_DATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSPI_OUTPUT_DATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSPI_OUTPUT_DATA_LOW                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSPI_OUTPUT_DATA_HIGH                 _MK_ENUM_CONST(1)

// LSPI pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA3_0_LSPI_OUTPUT_DATA_MASK_SHIFT                   _MK_SHIFT_CONST(9)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSPI_OUTPUT_DATA_MASK_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA3_0_LSPI_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSPI_OUTPUT_DATA_MASK_RANGE                   9:9
#define DC_COM_PIN_OUTPUT_DATA3_0_LSPI_OUTPUT_DATA_MASK_WOFFSET                 0x0
#define DC_COM_PIN_OUTPUT_DATA3_0_LSPI_OUTPUT_DATA_MASK_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSPI_OUTPUT_DATA_MASK_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSPI_OUTPUT_DATA_MASK_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSPI_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSPI_OUTPUT_DATA_MASK_MASKED                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSPI_OUTPUT_DATA_MASK_NOTMASKED                       _MK_ENUM_CONST(1)

// LSDI pin output data   0= low
//   1= high
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDI_OUTPUT_DATA_SHIFT                        _MK_SHIFT_CONST(10)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDI_OUTPUT_DATA_FIELD                        (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA3_0_LSDI_OUTPUT_DATA_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDI_OUTPUT_DATA_RANGE                        10:10
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDI_OUTPUT_DATA_WOFFSET                      0x0
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDI_OUTPUT_DATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDI_OUTPUT_DATA_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDI_OUTPUT_DATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDI_OUTPUT_DATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDI_OUTPUT_DATA_LOW                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDI_OUTPUT_DATA_HIGH                 _MK_ENUM_CONST(1)

// LSDI pin output data mask   0= masked
//   1= not masked
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDI_OUTPUT_DATA_MASK_SHIFT                   _MK_SHIFT_CONST(11)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDI_OUTPUT_DATA_MASK_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_OUTPUT_DATA3_0_LSDI_OUTPUT_DATA_MASK_SHIFT)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDI_OUTPUT_DATA_MASK_RANGE                   11:11
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDI_OUTPUT_DATA_MASK_WOFFSET                 0x0
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDI_OUTPUT_DATA_MASK_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDI_OUTPUT_DATA_MASK_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDI_OUTPUT_DATA_MASK_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDI_OUTPUT_DATA_MASK_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDI_OUTPUT_DATA_MASK_MASKED                  _MK_ENUM_CONST(0)
#define DC_COM_PIN_OUTPUT_DATA3_0_LSDI_OUTPUT_DATA_MASK_NOTMASKED                       _MK_ENUM_CONST(1)

// Pin Input Enable registers

// Register DC_COM_PIN_INPUT_ENABLE0_0  // Pin Input Enable 0
#define DC_COM_PIN_INPUT_ENABLE0_0                      _MK_ADDR_CONST(0x30e)
#define DC_COM_PIN_INPUT_ENABLE0_0_SECURE                       0x0
#define DC_COM_PIN_INPUT_ENABLE0_0_WORD_COUNT                   0x1
#define DC_COM_PIN_INPUT_ENABLE0_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_RESET_MASK                   _MK_MASK_CONST(0x55555555)
#define DC_COM_PIN_INPUT_ENABLE0_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_READ_MASK                    _MK_MASK_CONST(0x55555555)
#define DC_COM_PIN_INPUT_ENABLE0_0_WRITE_MASK                   _MK_MASK_CONST(0x55555555)
// LD0 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE0_0_LD0_INPUT_ENABLE_SHIFT                       _MK_SHIFT_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD0_INPUT_ENABLE_FIELD                       (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE0_0_LD0_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD0_INPUT_ENABLE_RANGE                       0:0
#define DC_COM_PIN_INPUT_ENABLE0_0_LD0_INPUT_ENABLE_WOFFSET                     0x0
#define DC_COM_PIN_INPUT_ENABLE0_0_LD0_INPUT_ENABLE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD0_INPUT_ENABLE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD0_INPUT_ENABLE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD0_INPUT_ENABLE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD0_INPUT_ENABLE_DISABLE                     _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD0_INPUT_ENABLE_ENABLE                      _MK_ENUM_CONST(1)

// LD1 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE0_0_LD1_INPUT_ENABLE_SHIFT                       _MK_SHIFT_CONST(2)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD1_INPUT_ENABLE_FIELD                       (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE0_0_LD1_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD1_INPUT_ENABLE_RANGE                       2:2
#define DC_COM_PIN_INPUT_ENABLE0_0_LD1_INPUT_ENABLE_WOFFSET                     0x0
#define DC_COM_PIN_INPUT_ENABLE0_0_LD1_INPUT_ENABLE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD1_INPUT_ENABLE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD1_INPUT_ENABLE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD1_INPUT_ENABLE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD1_INPUT_ENABLE_DISABLE                     _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD1_INPUT_ENABLE_ENABLE                      _MK_ENUM_CONST(1)

// LD2 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE0_0_LD2_INPUT_ENABLE_SHIFT                       _MK_SHIFT_CONST(4)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD2_INPUT_ENABLE_FIELD                       (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE0_0_LD2_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD2_INPUT_ENABLE_RANGE                       4:4
#define DC_COM_PIN_INPUT_ENABLE0_0_LD2_INPUT_ENABLE_WOFFSET                     0x0
#define DC_COM_PIN_INPUT_ENABLE0_0_LD2_INPUT_ENABLE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD2_INPUT_ENABLE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD2_INPUT_ENABLE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD2_INPUT_ENABLE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD2_INPUT_ENABLE_DISABLE                     _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD2_INPUT_ENABLE_ENABLE                      _MK_ENUM_CONST(1)

// LD3 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE0_0_LD3_INPUT_ENABLE_SHIFT                       _MK_SHIFT_CONST(6)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD3_INPUT_ENABLE_FIELD                       (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE0_0_LD3_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD3_INPUT_ENABLE_RANGE                       6:6
#define DC_COM_PIN_INPUT_ENABLE0_0_LD3_INPUT_ENABLE_WOFFSET                     0x0
#define DC_COM_PIN_INPUT_ENABLE0_0_LD3_INPUT_ENABLE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD3_INPUT_ENABLE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD3_INPUT_ENABLE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD3_INPUT_ENABLE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD3_INPUT_ENABLE_DISABLE                     _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD3_INPUT_ENABLE_ENABLE                      _MK_ENUM_CONST(1)

// LD4 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE0_0_LD4_INPUT_ENABLE_SHIFT                       _MK_SHIFT_CONST(8)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD4_INPUT_ENABLE_FIELD                       (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE0_0_LD4_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD4_INPUT_ENABLE_RANGE                       8:8
#define DC_COM_PIN_INPUT_ENABLE0_0_LD4_INPUT_ENABLE_WOFFSET                     0x0
#define DC_COM_PIN_INPUT_ENABLE0_0_LD4_INPUT_ENABLE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD4_INPUT_ENABLE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD4_INPUT_ENABLE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD4_INPUT_ENABLE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD4_INPUT_ENABLE_DISABLE                     _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD4_INPUT_ENABLE_ENABLE                      _MK_ENUM_CONST(1)

// LD5 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE0_0_LD5_INPUT_ENABLE_SHIFT                       _MK_SHIFT_CONST(10)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD5_INPUT_ENABLE_FIELD                       (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE0_0_LD5_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD5_INPUT_ENABLE_RANGE                       10:10
#define DC_COM_PIN_INPUT_ENABLE0_0_LD5_INPUT_ENABLE_WOFFSET                     0x0
#define DC_COM_PIN_INPUT_ENABLE0_0_LD5_INPUT_ENABLE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD5_INPUT_ENABLE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD5_INPUT_ENABLE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD5_INPUT_ENABLE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD5_INPUT_ENABLE_DISABLE                     _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD5_INPUT_ENABLE_ENABLE                      _MK_ENUM_CONST(1)

// LD6 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE0_0_LD6_INPUT_ENABLE_SHIFT                       _MK_SHIFT_CONST(12)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD6_INPUT_ENABLE_FIELD                       (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE0_0_LD6_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD6_INPUT_ENABLE_RANGE                       12:12
#define DC_COM_PIN_INPUT_ENABLE0_0_LD6_INPUT_ENABLE_WOFFSET                     0x0
#define DC_COM_PIN_INPUT_ENABLE0_0_LD6_INPUT_ENABLE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD6_INPUT_ENABLE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD6_INPUT_ENABLE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD6_INPUT_ENABLE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD6_INPUT_ENABLE_DISABLE                     _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD6_INPUT_ENABLE_ENABLE                      _MK_ENUM_CONST(1)

// LD7 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE0_0_LD7_INPUT_ENABLE_SHIFT                       _MK_SHIFT_CONST(14)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD7_INPUT_ENABLE_FIELD                       (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE0_0_LD7_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD7_INPUT_ENABLE_RANGE                       14:14
#define DC_COM_PIN_INPUT_ENABLE0_0_LD7_INPUT_ENABLE_WOFFSET                     0x0
#define DC_COM_PIN_INPUT_ENABLE0_0_LD7_INPUT_ENABLE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD7_INPUT_ENABLE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD7_INPUT_ENABLE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD7_INPUT_ENABLE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD7_INPUT_ENABLE_DISABLE                     _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD7_INPUT_ENABLE_ENABLE                      _MK_ENUM_CONST(1)

// LD8 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE0_0_LD8_INPUT_ENABLE_SHIFT                       _MK_SHIFT_CONST(16)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD8_INPUT_ENABLE_FIELD                       (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE0_0_LD8_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD8_INPUT_ENABLE_RANGE                       16:16
#define DC_COM_PIN_INPUT_ENABLE0_0_LD8_INPUT_ENABLE_WOFFSET                     0x0
#define DC_COM_PIN_INPUT_ENABLE0_0_LD8_INPUT_ENABLE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD8_INPUT_ENABLE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD8_INPUT_ENABLE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD8_INPUT_ENABLE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD8_INPUT_ENABLE_DISABLE                     _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD8_INPUT_ENABLE_ENABLE                      _MK_ENUM_CONST(1)

// LD9 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE0_0_LD9_INPUT_ENABLE_SHIFT                       _MK_SHIFT_CONST(18)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD9_INPUT_ENABLE_FIELD                       (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE0_0_LD9_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD9_INPUT_ENABLE_RANGE                       18:18
#define DC_COM_PIN_INPUT_ENABLE0_0_LD9_INPUT_ENABLE_WOFFSET                     0x0
#define DC_COM_PIN_INPUT_ENABLE0_0_LD9_INPUT_ENABLE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD9_INPUT_ENABLE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD9_INPUT_ENABLE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD9_INPUT_ENABLE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD9_INPUT_ENABLE_DISABLE                     _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD9_INPUT_ENABLE_ENABLE                      _MK_ENUM_CONST(1)

// LD10 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE0_0_LD10_INPUT_ENABLE_SHIFT                      _MK_SHIFT_CONST(20)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD10_INPUT_ENABLE_FIELD                      (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE0_0_LD10_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD10_INPUT_ENABLE_RANGE                      20:20
#define DC_COM_PIN_INPUT_ENABLE0_0_LD10_INPUT_ENABLE_WOFFSET                    0x0
#define DC_COM_PIN_INPUT_ENABLE0_0_LD10_INPUT_ENABLE_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD10_INPUT_ENABLE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD10_INPUT_ENABLE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD10_INPUT_ENABLE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD10_INPUT_ENABLE_DISABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD10_INPUT_ENABLE_ENABLE                     _MK_ENUM_CONST(1)

// LD11 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE0_0_LD11_INPUT_ENABLE_SHIFT                      _MK_SHIFT_CONST(22)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD11_INPUT_ENABLE_FIELD                      (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE0_0_LD11_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD11_INPUT_ENABLE_RANGE                      22:22
#define DC_COM_PIN_INPUT_ENABLE0_0_LD11_INPUT_ENABLE_WOFFSET                    0x0
#define DC_COM_PIN_INPUT_ENABLE0_0_LD11_INPUT_ENABLE_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD11_INPUT_ENABLE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD11_INPUT_ENABLE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD11_INPUT_ENABLE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD11_INPUT_ENABLE_DISABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD11_INPUT_ENABLE_ENABLE                     _MK_ENUM_CONST(1)

// LD12 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE0_0_LD12_INPUT_ENABLE_SHIFT                      _MK_SHIFT_CONST(24)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD12_INPUT_ENABLE_FIELD                      (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE0_0_LD12_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD12_INPUT_ENABLE_RANGE                      24:24
#define DC_COM_PIN_INPUT_ENABLE0_0_LD12_INPUT_ENABLE_WOFFSET                    0x0
#define DC_COM_PIN_INPUT_ENABLE0_0_LD12_INPUT_ENABLE_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD12_INPUT_ENABLE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD12_INPUT_ENABLE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD12_INPUT_ENABLE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD12_INPUT_ENABLE_DISABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD12_INPUT_ENABLE_ENABLE                     _MK_ENUM_CONST(1)

// LD13 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE0_0_LD13_INPUT_ENABLE_SHIFT                      _MK_SHIFT_CONST(26)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD13_INPUT_ENABLE_FIELD                      (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE0_0_LD13_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD13_INPUT_ENABLE_RANGE                      26:26
#define DC_COM_PIN_INPUT_ENABLE0_0_LD13_INPUT_ENABLE_WOFFSET                    0x0
#define DC_COM_PIN_INPUT_ENABLE0_0_LD13_INPUT_ENABLE_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD13_INPUT_ENABLE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD13_INPUT_ENABLE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD13_INPUT_ENABLE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD13_INPUT_ENABLE_DISABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD13_INPUT_ENABLE_ENABLE                     _MK_ENUM_CONST(1)

// LD14 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE0_0_LD14_INPUT_ENABLE_SHIFT                      _MK_SHIFT_CONST(28)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD14_INPUT_ENABLE_FIELD                      (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE0_0_LD14_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD14_INPUT_ENABLE_RANGE                      28:28
#define DC_COM_PIN_INPUT_ENABLE0_0_LD14_INPUT_ENABLE_WOFFSET                    0x0
#define DC_COM_PIN_INPUT_ENABLE0_0_LD14_INPUT_ENABLE_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD14_INPUT_ENABLE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD14_INPUT_ENABLE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD14_INPUT_ENABLE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD14_INPUT_ENABLE_DISABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD14_INPUT_ENABLE_ENABLE                     _MK_ENUM_CONST(1)

// LD15 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE0_0_LD15_INPUT_ENABLE_SHIFT                      _MK_SHIFT_CONST(30)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD15_INPUT_ENABLE_FIELD                      (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE0_0_LD15_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD15_INPUT_ENABLE_RANGE                      30:30
#define DC_COM_PIN_INPUT_ENABLE0_0_LD15_INPUT_ENABLE_WOFFSET                    0x0
#define DC_COM_PIN_INPUT_ENABLE0_0_LD15_INPUT_ENABLE_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD15_INPUT_ENABLE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD15_INPUT_ENABLE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD15_INPUT_ENABLE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD15_INPUT_ENABLE_DISABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE0_0_LD15_INPUT_ENABLE_ENABLE                     _MK_ENUM_CONST(1)


// Register DC_COM_PIN_INPUT_ENABLE1_0  // Pin Input Enable 1
#define DC_COM_PIN_INPUT_ENABLE1_0                      _MK_ADDR_CONST(0x30f)
#define DC_COM_PIN_INPUT_ENABLE1_0_SECURE                       0x0
#define DC_COM_PIN_INPUT_ENABLE1_0_WORD_COUNT                   0x1
#define DC_COM_PIN_INPUT_ENABLE1_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_RESET_MASK                   _MK_MASK_CONST(0x55150005)
#define DC_COM_PIN_INPUT_ENABLE1_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_READ_MASK                    _MK_MASK_CONST(0x55150005)
#define DC_COM_PIN_INPUT_ENABLE1_0_WRITE_MASK                   _MK_MASK_CONST(0x55150005)
// LD16 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE1_0_LD16_INPUT_ENABLE_SHIFT                      _MK_SHIFT_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LD16_INPUT_ENABLE_FIELD                      (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE1_0_LD16_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE1_0_LD16_INPUT_ENABLE_RANGE                      0:0
#define DC_COM_PIN_INPUT_ENABLE1_0_LD16_INPUT_ENABLE_WOFFSET                    0x0
#define DC_COM_PIN_INPUT_ENABLE1_0_LD16_INPUT_ENABLE_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LD16_INPUT_ENABLE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE1_0_LD16_INPUT_ENABLE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LD16_INPUT_ENABLE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LD16_INPUT_ENABLE_DISABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LD16_INPUT_ENABLE_ENABLE                     _MK_ENUM_CONST(1)

// LD17 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE1_0_LD17_INPUT_ENABLE_SHIFT                      _MK_SHIFT_CONST(2)
#define DC_COM_PIN_INPUT_ENABLE1_0_LD17_INPUT_ENABLE_FIELD                      (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE1_0_LD17_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE1_0_LD17_INPUT_ENABLE_RANGE                      2:2
#define DC_COM_PIN_INPUT_ENABLE1_0_LD17_INPUT_ENABLE_WOFFSET                    0x0
#define DC_COM_PIN_INPUT_ENABLE1_0_LD17_INPUT_ENABLE_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LD17_INPUT_ENABLE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE1_0_LD17_INPUT_ENABLE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LD17_INPUT_ENABLE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LD17_INPUT_ENABLE_DISABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LD17_INPUT_ENABLE_ENABLE                     _MK_ENUM_CONST(1)

// LPW0 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW0_INPUT_ENABLE_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW0_INPUT_ENABLE_FIELD                      (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE1_0_LPW0_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW0_INPUT_ENABLE_RANGE                      16:16
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW0_INPUT_ENABLE_WOFFSET                    0x0
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW0_INPUT_ENABLE_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW0_INPUT_ENABLE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW0_INPUT_ENABLE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW0_INPUT_ENABLE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW0_INPUT_ENABLE_DISABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW0_INPUT_ENABLE_ENABLE                     _MK_ENUM_CONST(1)

// LPW1 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW1_INPUT_ENABLE_SHIFT                      _MK_SHIFT_CONST(18)
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW1_INPUT_ENABLE_FIELD                      (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE1_0_LPW1_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW1_INPUT_ENABLE_RANGE                      18:18
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW1_INPUT_ENABLE_WOFFSET                    0x0
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW1_INPUT_ENABLE_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW1_INPUT_ENABLE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW1_INPUT_ENABLE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW1_INPUT_ENABLE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW1_INPUT_ENABLE_DISABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW1_INPUT_ENABLE_ENABLE                     _MK_ENUM_CONST(1)

// LPW2 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW2_INPUT_ENABLE_SHIFT                      _MK_SHIFT_CONST(20)
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW2_INPUT_ENABLE_FIELD                      (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE1_0_LPW2_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW2_INPUT_ENABLE_RANGE                      20:20
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW2_INPUT_ENABLE_WOFFSET                    0x0
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW2_INPUT_ENABLE_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW2_INPUT_ENABLE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW2_INPUT_ENABLE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW2_INPUT_ENABLE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW2_INPUT_ENABLE_DISABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LPW2_INPUT_ENABLE_ENABLE                     _MK_ENUM_CONST(1)

// LSC0 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE1_0_LSC0_INPUT_ENABLE_SHIFT                      _MK_SHIFT_CONST(24)
#define DC_COM_PIN_INPUT_ENABLE1_0_LSC0_INPUT_ENABLE_FIELD                      (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE1_0_LSC0_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE1_0_LSC0_INPUT_ENABLE_RANGE                      24:24
#define DC_COM_PIN_INPUT_ENABLE1_0_LSC0_INPUT_ENABLE_WOFFSET                    0x0
#define DC_COM_PIN_INPUT_ENABLE1_0_LSC0_INPUT_ENABLE_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LSC0_INPUT_ENABLE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE1_0_LSC0_INPUT_ENABLE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LSC0_INPUT_ENABLE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LSC0_INPUT_ENABLE_DISABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LSC0_INPUT_ENABLE_ENABLE                     _MK_ENUM_CONST(1)

// LSC1 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE1_0_LSC1_INPUT_ENABLE_SHIFT                      _MK_SHIFT_CONST(26)
#define DC_COM_PIN_INPUT_ENABLE1_0_LSC1_INPUT_ENABLE_FIELD                      (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE1_0_LSC1_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE1_0_LSC1_INPUT_ENABLE_RANGE                      26:26
#define DC_COM_PIN_INPUT_ENABLE1_0_LSC1_INPUT_ENABLE_WOFFSET                    0x0
#define DC_COM_PIN_INPUT_ENABLE1_0_LSC1_INPUT_ENABLE_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LSC1_INPUT_ENABLE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE1_0_LSC1_INPUT_ENABLE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LSC1_INPUT_ENABLE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LSC1_INPUT_ENABLE_DISABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LSC1_INPUT_ENABLE_ENABLE                     _MK_ENUM_CONST(1)

// LVS pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE1_0_LVS_INPUT_ENABLE_SHIFT                       _MK_SHIFT_CONST(28)
#define DC_COM_PIN_INPUT_ENABLE1_0_LVS_INPUT_ENABLE_FIELD                       (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE1_0_LVS_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE1_0_LVS_INPUT_ENABLE_RANGE                       28:28
#define DC_COM_PIN_INPUT_ENABLE1_0_LVS_INPUT_ENABLE_WOFFSET                     0x0
#define DC_COM_PIN_INPUT_ENABLE1_0_LVS_INPUT_ENABLE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LVS_INPUT_ENABLE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE1_0_LVS_INPUT_ENABLE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LVS_INPUT_ENABLE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LVS_INPUT_ENABLE_DISABLE                     _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LVS_INPUT_ENABLE_ENABLE                      _MK_ENUM_CONST(1)

// LHS pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE1_0_LHS_INPUT_ENABLE_SHIFT                       _MK_SHIFT_CONST(30)
#define DC_COM_PIN_INPUT_ENABLE1_0_LHS_INPUT_ENABLE_FIELD                       (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE1_0_LHS_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE1_0_LHS_INPUT_ENABLE_RANGE                       30:30
#define DC_COM_PIN_INPUT_ENABLE1_0_LHS_INPUT_ENABLE_WOFFSET                     0x0
#define DC_COM_PIN_INPUT_ENABLE1_0_LHS_INPUT_ENABLE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LHS_INPUT_ENABLE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE1_0_LHS_INPUT_ENABLE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LHS_INPUT_ENABLE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LHS_INPUT_ENABLE_DISABLE                     _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE1_0_LHS_INPUT_ENABLE_ENABLE                      _MK_ENUM_CONST(1)


// Register DC_COM_PIN_INPUT_ENABLE2_0  // Pin Input Enable 2
#define DC_COM_PIN_INPUT_ENABLE2_0                      _MK_ADDR_CONST(0x310)
#define DC_COM_PIN_INPUT_ENABLE2_0_SECURE                       0x0
#define DC_COM_PIN_INPUT_ENABLE2_0_WORD_COUNT                   0x1
#define DC_COM_PIN_INPUT_ENABLE2_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_RESET_MASK                   _MK_MASK_CONST(0x550515)
#define DC_COM_PIN_INPUT_ENABLE2_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_READ_MASK                    _MK_MASK_CONST(0x550515)
#define DC_COM_PIN_INPUT_ENABLE2_0_WRITE_MASK                   _MK_MASK_CONST(0x550515)
// LHP0 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP0_INPUT_ENABLE_SHIFT                      _MK_SHIFT_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP0_INPUT_ENABLE_FIELD                      (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE2_0_LHP0_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP0_INPUT_ENABLE_RANGE                      0:0
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP0_INPUT_ENABLE_WOFFSET                    0x0
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP0_INPUT_ENABLE_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP0_INPUT_ENABLE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP0_INPUT_ENABLE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP0_INPUT_ENABLE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP0_INPUT_ENABLE_DISABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP0_INPUT_ENABLE_ENABLE                     _MK_ENUM_CONST(1)

// LHP1 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP1_INPUT_ENABLE_SHIFT                      _MK_SHIFT_CONST(2)
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP1_INPUT_ENABLE_FIELD                      (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE2_0_LHP1_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP1_INPUT_ENABLE_RANGE                      2:2
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP1_INPUT_ENABLE_WOFFSET                    0x0
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP1_INPUT_ENABLE_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP1_INPUT_ENABLE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP1_INPUT_ENABLE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP1_INPUT_ENABLE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP1_INPUT_ENABLE_DISABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP1_INPUT_ENABLE_ENABLE                     _MK_ENUM_CONST(1)

// LHP2 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP2_INPUT_ENABLE_SHIFT                      _MK_SHIFT_CONST(4)
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP2_INPUT_ENABLE_FIELD                      (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE2_0_LHP2_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP2_INPUT_ENABLE_RANGE                      4:4
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP2_INPUT_ENABLE_WOFFSET                    0x0
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP2_INPUT_ENABLE_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP2_INPUT_ENABLE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP2_INPUT_ENABLE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP2_INPUT_ENABLE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP2_INPUT_ENABLE_DISABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LHP2_INPUT_ENABLE_ENABLE                     _MK_ENUM_CONST(1)

// LVP0 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE2_0_LVP0_INPUT_ENABLE_SHIFT                      _MK_SHIFT_CONST(8)
#define DC_COM_PIN_INPUT_ENABLE2_0_LVP0_INPUT_ENABLE_FIELD                      (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE2_0_LVP0_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE2_0_LVP0_INPUT_ENABLE_RANGE                      8:8
#define DC_COM_PIN_INPUT_ENABLE2_0_LVP0_INPUT_ENABLE_WOFFSET                    0x0
#define DC_COM_PIN_INPUT_ENABLE2_0_LVP0_INPUT_ENABLE_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LVP0_INPUT_ENABLE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE2_0_LVP0_INPUT_ENABLE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LVP0_INPUT_ENABLE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LVP0_INPUT_ENABLE_DISABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LVP0_INPUT_ENABLE_ENABLE                     _MK_ENUM_CONST(1)

// LVP1 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE2_0_LVP1_INPUT_ENABLE_SHIFT                      _MK_SHIFT_CONST(10)
#define DC_COM_PIN_INPUT_ENABLE2_0_LVP1_INPUT_ENABLE_FIELD                      (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE2_0_LVP1_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE2_0_LVP1_INPUT_ENABLE_RANGE                      10:10
#define DC_COM_PIN_INPUT_ENABLE2_0_LVP1_INPUT_ENABLE_WOFFSET                    0x0
#define DC_COM_PIN_INPUT_ENABLE2_0_LVP1_INPUT_ENABLE_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LVP1_INPUT_ENABLE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE2_0_LVP1_INPUT_ENABLE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LVP1_INPUT_ENABLE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LVP1_INPUT_ENABLE_DISABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LVP1_INPUT_ENABLE_ENABLE                     _MK_ENUM_CONST(1)

// LM0 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE2_0_LM0_INPUT_ENABLE_SHIFT                       _MK_SHIFT_CONST(16)
#define DC_COM_PIN_INPUT_ENABLE2_0_LM0_INPUT_ENABLE_FIELD                       (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE2_0_LM0_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE2_0_LM0_INPUT_ENABLE_RANGE                       16:16
#define DC_COM_PIN_INPUT_ENABLE2_0_LM0_INPUT_ENABLE_WOFFSET                     0x0
#define DC_COM_PIN_INPUT_ENABLE2_0_LM0_INPUT_ENABLE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LM0_INPUT_ENABLE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE2_0_LM0_INPUT_ENABLE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LM0_INPUT_ENABLE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LM0_INPUT_ENABLE_DISABLE                     _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LM0_INPUT_ENABLE_ENABLE                      _MK_ENUM_CONST(1)

// LM1 pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE2_0_LM1_INPUT_ENABLE_SHIFT                       _MK_SHIFT_CONST(18)
#define DC_COM_PIN_INPUT_ENABLE2_0_LM1_INPUT_ENABLE_FIELD                       (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE2_0_LM1_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE2_0_LM1_INPUT_ENABLE_RANGE                       18:18
#define DC_COM_PIN_INPUT_ENABLE2_0_LM1_INPUT_ENABLE_WOFFSET                     0x0
#define DC_COM_PIN_INPUT_ENABLE2_0_LM1_INPUT_ENABLE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LM1_INPUT_ENABLE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE2_0_LM1_INPUT_ENABLE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LM1_INPUT_ENABLE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LM1_INPUT_ENABLE_DISABLE                     _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LM1_INPUT_ENABLE_ENABLE                      _MK_ENUM_CONST(1)

// LDI pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE2_0_LDI_INPUT_ENABLE_SHIFT                       _MK_SHIFT_CONST(20)
#define DC_COM_PIN_INPUT_ENABLE2_0_LDI_INPUT_ENABLE_FIELD                       (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE2_0_LDI_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE2_0_LDI_INPUT_ENABLE_RANGE                       20:20
#define DC_COM_PIN_INPUT_ENABLE2_0_LDI_INPUT_ENABLE_WOFFSET                     0x0
#define DC_COM_PIN_INPUT_ENABLE2_0_LDI_INPUT_ENABLE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LDI_INPUT_ENABLE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE2_0_LDI_INPUT_ENABLE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LDI_INPUT_ENABLE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LDI_INPUT_ENABLE_DISABLE                     _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LDI_INPUT_ENABLE_ENABLE                      _MK_ENUM_CONST(1)

// LPP pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE2_0_LPP_INPUT_ENABLE_SHIFT                       _MK_SHIFT_CONST(22)
#define DC_COM_PIN_INPUT_ENABLE2_0_LPP_INPUT_ENABLE_FIELD                       (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE2_0_LPP_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE2_0_LPP_INPUT_ENABLE_RANGE                       22:22
#define DC_COM_PIN_INPUT_ENABLE2_0_LPP_INPUT_ENABLE_WOFFSET                     0x0
#define DC_COM_PIN_INPUT_ENABLE2_0_LPP_INPUT_ENABLE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LPP_INPUT_ENABLE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE2_0_LPP_INPUT_ENABLE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LPP_INPUT_ENABLE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LPP_INPUT_ENABLE_DISABLE                     _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE2_0_LPP_INPUT_ENABLE_ENABLE                      _MK_ENUM_CONST(1)


// Register DC_COM_PIN_INPUT_ENABLE3_0  // Pin Input Enable 3
#define DC_COM_PIN_INPUT_ENABLE3_0                      _MK_ADDR_CONST(0x311)
#define DC_COM_PIN_INPUT_ENABLE3_0_SECURE                       0x0
#define DC_COM_PIN_INPUT_ENABLE3_0_WORD_COUNT                   0x1
#define DC_COM_PIN_INPUT_ENABLE3_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE3_0_RESET_MASK                   _MK_MASK_CONST(0x555)
#define DC_COM_PIN_INPUT_ENABLE3_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE3_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE3_0_READ_MASK                    _MK_MASK_CONST(0x555)
#define DC_COM_PIN_INPUT_ENABLE3_0_WRITE_MASK                   _MK_MASK_CONST(0x555)
// LSCK pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE3_0_LSCK_INPUT_ENABLE_SHIFT                      _MK_SHIFT_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE3_0_LSCK_INPUT_ENABLE_FIELD                      (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE3_0_LSCK_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE3_0_LSCK_INPUT_ENABLE_RANGE                      0:0
#define DC_COM_PIN_INPUT_ENABLE3_0_LSCK_INPUT_ENABLE_WOFFSET                    0x0
#define DC_COM_PIN_INPUT_ENABLE3_0_LSCK_INPUT_ENABLE_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE3_0_LSCK_INPUT_ENABLE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE3_0_LSCK_INPUT_ENABLE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE3_0_LSCK_INPUT_ENABLE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE3_0_LSCK_INPUT_ENABLE_DISABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE3_0_LSCK_INPUT_ENABLE_ENABLE                     _MK_ENUM_CONST(1)

// LSDA pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE3_0_LSDA_INPUT_ENABLE_SHIFT                      _MK_SHIFT_CONST(2)
#define DC_COM_PIN_INPUT_ENABLE3_0_LSDA_INPUT_ENABLE_FIELD                      (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE3_0_LSDA_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE3_0_LSDA_INPUT_ENABLE_RANGE                      2:2
#define DC_COM_PIN_INPUT_ENABLE3_0_LSDA_INPUT_ENABLE_WOFFSET                    0x0
#define DC_COM_PIN_INPUT_ENABLE3_0_LSDA_INPUT_ENABLE_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE3_0_LSDA_INPUT_ENABLE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE3_0_LSDA_INPUT_ENABLE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE3_0_LSDA_INPUT_ENABLE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE3_0_LSDA_INPUT_ENABLE_DISABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE3_0_LSDA_INPUT_ENABLE_ENABLE                     _MK_ENUM_CONST(1)

// LCSN pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE3_0_LCSN_INPUT_ENABLE_SHIFT                      _MK_SHIFT_CONST(4)
#define DC_COM_PIN_INPUT_ENABLE3_0_LCSN_INPUT_ENABLE_FIELD                      (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE3_0_LCSN_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE3_0_LCSN_INPUT_ENABLE_RANGE                      4:4
#define DC_COM_PIN_INPUT_ENABLE3_0_LCSN_INPUT_ENABLE_WOFFSET                    0x0
#define DC_COM_PIN_INPUT_ENABLE3_0_LCSN_INPUT_ENABLE_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE3_0_LCSN_INPUT_ENABLE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE3_0_LCSN_INPUT_ENABLE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE3_0_LCSN_INPUT_ENABLE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE3_0_LCSN_INPUT_ENABLE_DISABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE3_0_LCSN_INPUT_ENABLE_ENABLE                     _MK_ENUM_CONST(1)

// LDC pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE3_0_LDC_INPUT_ENABLE_SHIFT                       _MK_SHIFT_CONST(6)
#define DC_COM_PIN_INPUT_ENABLE3_0_LDC_INPUT_ENABLE_FIELD                       (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE3_0_LDC_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE3_0_LDC_INPUT_ENABLE_RANGE                       6:6
#define DC_COM_PIN_INPUT_ENABLE3_0_LDC_INPUT_ENABLE_WOFFSET                     0x0
#define DC_COM_PIN_INPUT_ENABLE3_0_LDC_INPUT_ENABLE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE3_0_LDC_INPUT_ENABLE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE3_0_LDC_INPUT_ENABLE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE3_0_LDC_INPUT_ENABLE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE3_0_LDC_INPUT_ENABLE_DISABLE                     _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE3_0_LDC_INPUT_ENABLE_ENABLE                      _MK_ENUM_CONST(1)

// LSPI pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE3_0_LSPI_INPUT_ENABLE_SHIFT                      _MK_SHIFT_CONST(8)
#define DC_COM_PIN_INPUT_ENABLE3_0_LSPI_INPUT_ENABLE_FIELD                      (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE3_0_LSPI_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE3_0_LSPI_INPUT_ENABLE_RANGE                      8:8
#define DC_COM_PIN_INPUT_ENABLE3_0_LSPI_INPUT_ENABLE_WOFFSET                    0x0
#define DC_COM_PIN_INPUT_ENABLE3_0_LSPI_INPUT_ENABLE_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE3_0_LSPI_INPUT_ENABLE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE3_0_LSPI_INPUT_ENABLE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE3_0_LSPI_INPUT_ENABLE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE3_0_LSPI_INPUT_ENABLE_DISABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE3_0_LSPI_INPUT_ENABLE_ENABLE                     _MK_ENUM_CONST(1)

// LSDI pin input enable   0= disable
//   1= enable
#define DC_COM_PIN_INPUT_ENABLE3_0_LSDI_INPUT_ENABLE_SHIFT                      _MK_SHIFT_CONST(10)
#define DC_COM_PIN_INPUT_ENABLE3_0_LSDI_INPUT_ENABLE_FIELD                      (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_ENABLE3_0_LSDI_INPUT_ENABLE_SHIFT)
#define DC_COM_PIN_INPUT_ENABLE3_0_LSDI_INPUT_ENABLE_RANGE                      10:10
#define DC_COM_PIN_INPUT_ENABLE3_0_LSDI_INPUT_ENABLE_WOFFSET                    0x0
#define DC_COM_PIN_INPUT_ENABLE3_0_LSDI_INPUT_ENABLE_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE3_0_LSDI_INPUT_ENABLE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_ENABLE3_0_LSDI_INPUT_ENABLE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE3_0_LSDI_INPUT_ENABLE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_ENABLE3_0_LSDI_INPUT_ENABLE_DISABLE                    _MK_ENUM_CONST(0)
#define DC_COM_PIN_INPUT_ENABLE3_0_LSDI_INPUT_ENABLE_ENABLE                     _MK_ENUM_CONST(1)

// Pin Input Data registers (read-only)

// Register DC_COM_PIN_INPUT_DATA0_0  // Pin Input Data 0
#define DC_COM_PIN_INPUT_DATA0_0                        _MK_ADDR_CONST(0x312)
#define DC_COM_PIN_INPUT_DATA0_0_SECURE                         0x0
#define DC_COM_PIN_INPUT_DATA0_0_WORD_COUNT                     0x1
#define DC_COM_PIN_INPUT_DATA0_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_RESET_MASK                     _MK_MASK_CONST(0x3ffff)
#define DC_COM_PIN_INPUT_DATA0_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_READ_MASK                      _MK_MASK_CONST(0x3ffff)
#define DC_COM_PIN_INPUT_DATA0_0_WRITE_MASK                     _MK_MASK_CONST(0x0)
// LD0 pin input data
#define DC_COM_PIN_INPUT_DATA0_0_LD0_INPUT_DATA_SHIFT                   _MK_SHIFT_CONST(0)
#define DC_COM_PIN_INPUT_DATA0_0_LD0_INPUT_DATA_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA0_0_LD0_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA0_0_LD0_INPUT_DATA_RANGE                   0:0
#define DC_COM_PIN_INPUT_DATA0_0_LD0_INPUT_DATA_WOFFSET                 0x0
#define DC_COM_PIN_INPUT_DATA0_0_LD0_INPUT_DATA_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD0_INPUT_DATA_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA0_0_LD0_INPUT_DATA_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD0_INPUT_DATA_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// LD1 pin input data
#define DC_COM_PIN_INPUT_DATA0_0_LD1_INPUT_DATA_SHIFT                   _MK_SHIFT_CONST(1)
#define DC_COM_PIN_INPUT_DATA0_0_LD1_INPUT_DATA_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA0_0_LD1_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA0_0_LD1_INPUT_DATA_RANGE                   1:1
#define DC_COM_PIN_INPUT_DATA0_0_LD1_INPUT_DATA_WOFFSET                 0x0
#define DC_COM_PIN_INPUT_DATA0_0_LD1_INPUT_DATA_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD1_INPUT_DATA_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA0_0_LD1_INPUT_DATA_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD1_INPUT_DATA_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// LD2 pin input data
#define DC_COM_PIN_INPUT_DATA0_0_LD2_INPUT_DATA_SHIFT                   _MK_SHIFT_CONST(2)
#define DC_COM_PIN_INPUT_DATA0_0_LD2_INPUT_DATA_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA0_0_LD2_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA0_0_LD2_INPUT_DATA_RANGE                   2:2
#define DC_COM_PIN_INPUT_DATA0_0_LD2_INPUT_DATA_WOFFSET                 0x0
#define DC_COM_PIN_INPUT_DATA0_0_LD2_INPUT_DATA_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD2_INPUT_DATA_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA0_0_LD2_INPUT_DATA_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD2_INPUT_DATA_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// LD3 pin input data
#define DC_COM_PIN_INPUT_DATA0_0_LD3_INPUT_DATA_SHIFT                   _MK_SHIFT_CONST(3)
#define DC_COM_PIN_INPUT_DATA0_0_LD3_INPUT_DATA_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA0_0_LD3_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA0_0_LD3_INPUT_DATA_RANGE                   3:3
#define DC_COM_PIN_INPUT_DATA0_0_LD3_INPUT_DATA_WOFFSET                 0x0
#define DC_COM_PIN_INPUT_DATA0_0_LD3_INPUT_DATA_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD3_INPUT_DATA_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA0_0_LD3_INPUT_DATA_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD3_INPUT_DATA_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// LD4 pin input data
#define DC_COM_PIN_INPUT_DATA0_0_LD4_INPUT_DATA_SHIFT                   _MK_SHIFT_CONST(4)
#define DC_COM_PIN_INPUT_DATA0_0_LD4_INPUT_DATA_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA0_0_LD4_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA0_0_LD4_INPUT_DATA_RANGE                   4:4
#define DC_COM_PIN_INPUT_DATA0_0_LD4_INPUT_DATA_WOFFSET                 0x0
#define DC_COM_PIN_INPUT_DATA0_0_LD4_INPUT_DATA_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD4_INPUT_DATA_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA0_0_LD4_INPUT_DATA_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD4_INPUT_DATA_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// LD5 pin input data
#define DC_COM_PIN_INPUT_DATA0_0_LD5_INPUT_DATA_SHIFT                   _MK_SHIFT_CONST(5)
#define DC_COM_PIN_INPUT_DATA0_0_LD5_INPUT_DATA_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA0_0_LD5_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA0_0_LD5_INPUT_DATA_RANGE                   5:5
#define DC_COM_PIN_INPUT_DATA0_0_LD5_INPUT_DATA_WOFFSET                 0x0
#define DC_COM_PIN_INPUT_DATA0_0_LD5_INPUT_DATA_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD5_INPUT_DATA_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA0_0_LD5_INPUT_DATA_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD5_INPUT_DATA_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// LD6 pin input data
#define DC_COM_PIN_INPUT_DATA0_0_LD6_INPUT_DATA_SHIFT                   _MK_SHIFT_CONST(6)
#define DC_COM_PIN_INPUT_DATA0_0_LD6_INPUT_DATA_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA0_0_LD6_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA0_0_LD6_INPUT_DATA_RANGE                   6:6
#define DC_COM_PIN_INPUT_DATA0_0_LD6_INPUT_DATA_WOFFSET                 0x0
#define DC_COM_PIN_INPUT_DATA0_0_LD6_INPUT_DATA_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD6_INPUT_DATA_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA0_0_LD6_INPUT_DATA_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD6_INPUT_DATA_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// LD7 pin input data
#define DC_COM_PIN_INPUT_DATA0_0_LD7_INPUT_DATA_SHIFT                   _MK_SHIFT_CONST(7)
#define DC_COM_PIN_INPUT_DATA0_0_LD7_INPUT_DATA_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA0_0_LD7_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA0_0_LD7_INPUT_DATA_RANGE                   7:7
#define DC_COM_PIN_INPUT_DATA0_0_LD7_INPUT_DATA_WOFFSET                 0x0
#define DC_COM_PIN_INPUT_DATA0_0_LD7_INPUT_DATA_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD7_INPUT_DATA_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA0_0_LD7_INPUT_DATA_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD7_INPUT_DATA_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// LD8 pin input data
#define DC_COM_PIN_INPUT_DATA0_0_LD8_INPUT_DATA_SHIFT                   _MK_SHIFT_CONST(8)
#define DC_COM_PIN_INPUT_DATA0_0_LD8_INPUT_DATA_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA0_0_LD8_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA0_0_LD8_INPUT_DATA_RANGE                   8:8
#define DC_COM_PIN_INPUT_DATA0_0_LD8_INPUT_DATA_WOFFSET                 0x0
#define DC_COM_PIN_INPUT_DATA0_0_LD8_INPUT_DATA_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD8_INPUT_DATA_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA0_0_LD8_INPUT_DATA_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD8_INPUT_DATA_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// LD9 pin input data
#define DC_COM_PIN_INPUT_DATA0_0_LD9_INPUT_DATA_SHIFT                   _MK_SHIFT_CONST(9)
#define DC_COM_PIN_INPUT_DATA0_0_LD9_INPUT_DATA_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA0_0_LD9_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA0_0_LD9_INPUT_DATA_RANGE                   9:9
#define DC_COM_PIN_INPUT_DATA0_0_LD9_INPUT_DATA_WOFFSET                 0x0
#define DC_COM_PIN_INPUT_DATA0_0_LD9_INPUT_DATA_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD9_INPUT_DATA_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA0_0_LD9_INPUT_DATA_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD9_INPUT_DATA_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// LD10 pin input data
#define DC_COM_PIN_INPUT_DATA0_0_LD10_INPUT_DATA_SHIFT                  _MK_SHIFT_CONST(10)
#define DC_COM_PIN_INPUT_DATA0_0_LD10_INPUT_DATA_FIELD                  (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA0_0_LD10_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA0_0_LD10_INPUT_DATA_RANGE                  10:10
#define DC_COM_PIN_INPUT_DATA0_0_LD10_INPUT_DATA_WOFFSET                        0x0
#define DC_COM_PIN_INPUT_DATA0_0_LD10_INPUT_DATA_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD10_INPUT_DATA_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA0_0_LD10_INPUT_DATA_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD10_INPUT_DATA_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// LD11 pin input data
#define DC_COM_PIN_INPUT_DATA0_0_LD11_INPUT_DATA_SHIFT                  _MK_SHIFT_CONST(11)
#define DC_COM_PIN_INPUT_DATA0_0_LD11_INPUT_DATA_FIELD                  (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA0_0_LD11_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA0_0_LD11_INPUT_DATA_RANGE                  11:11
#define DC_COM_PIN_INPUT_DATA0_0_LD11_INPUT_DATA_WOFFSET                        0x0
#define DC_COM_PIN_INPUT_DATA0_0_LD11_INPUT_DATA_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD11_INPUT_DATA_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA0_0_LD11_INPUT_DATA_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD11_INPUT_DATA_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// LD12 pin input data
#define DC_COM_PIN_INPUT_DATA0_0_LD12_INPUT_DATA_SHIFT                  _MK_SHIFT_CONST(12)
#define DC_COM_PIN_INPUT_DATA0_0_LD12_INPUT_DATA_FIELD                  (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA0_0_LD12_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA0_0_LD12_INPUT_DATA_RANGE                  12:12
#define DC_COM_PIN_INPUT_DATA0_0_LD12_INPUT_DATA_WOFFSET                        0x0
#define DC_COM_PIN_INPUT_DATA0_0_LD12_INPUT_DATA_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD12_INPUT_DATA_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA0_0_LD12_INPUT_DATA_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD12_INPUT_DATA_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// LD13 pin input data
#define DC_COM_PIN_INPUT_DATA0_0_LD13_INPUT_DATA_SHIFT                  _MK_SHIFT_CONST(13)
#define DC_COM_PIN_INPUT_DATA0_0_LD13_INPUT_DATA_FIELD                  (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA0_0_LD13_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA0_0_LD13_INPUT_DATA_RANGE                  13:13
#define DC_COM_PIN_INPUT_DATA0_0_LD13_INPUT_DATA_WOFFSET                        0x0
#define DC_COM_PIN_INPUT_DATA0_0_LD13_INPUT_DATA_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD13_INPUT_DATA_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA0_0_LD13_INPUT_DATA_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD13_INPUT_DATA_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// LD14 pin input data
#define DC_COM_PIN_INPUT_DATA0_0_LD14_INPUT_DATA_SHIFT                  _MK_SHIFT_CONST(14)
#define DC_COM_PIN_INPUT_DATA0_0_LD14_INPUT_DATA_FIELD                  (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA0_0_LD14_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA0_0_LD14_INPUT_DATA_RANGE                  14:14
#define DC_COM_PIN_INPUT_DATA0_0_LD14_INPUT_DATA_WOFFSET                        0x0
#define DC_COM_PIN_INPUT_DATA0_0_LD14_INPUT_DATA_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD14_INPUT_DATA_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA0_0_LD14_INPUT_DATA_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD14_INPUT_DATA_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// LD15 pin input data
#define DC_COM_PIN_INPUT_DATA0_0_LD15_INPUT_DATA_SHIFT                  _MK_SHIFT_CONST(15)
#define DC_COM_PIN_INPUT_DATA0_0_LD15_INPUT_DATA_FIELD                  (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA0_0_LD15_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA0_0_LD15_INPUT_DATA_RANGE                  15:15
#define DC_COM_PIN_INPUT_DATA0_0_LD15_INPUT_DATA_WOFFSET                        0x0
#define DC_COM_PIN_INPUT_DATA0_0_LD15_INPUT_DATA_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD15_INPUT_DATA_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA0_0_LD15_INPUT_DATA_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD15_INPUT_DATA_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// LD16 pin input data
#define DC_COM_PIN_INPUT_DATA0_0_LD16_INPUT_DATA_SHIFT                  _MK_SHIFT_CONST(16)
#define DC_COM_PIN_INPUT_DATA0_0_LD16_INPUT_DATA_FIELD                  (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA0_0_LD16_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA0_0_LD16_INPUT_DATA_RANGE                  16:16
#define DC_COM_PIN_INPUT_DATA0_0_LD16_INPUT_DATA_WOFFSET                        0x0
#define DC_COM_PIN_INPUT_DATA0_0_LD16_INPUT_DATA_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD16_INPUT_DATA_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA0_0_LD16_INPUT_DATA_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD16_INPUT_DATA_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// LD17 pin input data
#define DC_COM_PIN_INPUT_DATA0_0_LD17_INPUT_DATA_SHIFT                  _MK_SHIFT_CONST(17)
#define DC_COM_PIN_INPUT_DATA0_0_LD17_INPUT_DATA_FIELD                  (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA0_0_LD17_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA0_0_LD17_INPUT_DATA_RANGE                  17:17
#define DC_COM_PIN_INPUT_DATA0_0_LD17_INPUT_DATA_WOFFSET                        0x0
#define DC_COM_PIN_INPUT_DATA0_0_LD17_INPUT_DATA_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD17_INPUT_DATA_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA0_0_LD17_INPUT_DATA_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA0_0_LD17_INPUT_DATA_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register DC_COM_PIN_INPUT_DATA1_0  // Pin Input Data 1
#define DC_COM_PIN_INPUT_DATA1_0                        _MK_ADDR_CONST(0x313)
#define DC_COM_PIN_INPUT_DATA1_0_SECURE                         0x0
#define DC_COM_PIN_INPUT_DATA1_0_WORD_COUNT                     0x1
#define DC_COM_PIN_INPUT_DATA1_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_RESET_MASK                     _MK_MASK_CONST(0x3ff37f7)
#define DC_COM_PIN_INPUT_DATA1_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_READ_MASK                      _MK_MASK_CONST(0x3ff37f7)
#define DC_COM_PIN_INPUT_DATA1_0_WRITE_MASK                     _MK_MASK_CONST(0x0)
// LPW0 pin input data
#define DC_COM_PIN_INPUT_DATA1_0_LPW0_INPUT_DATA_SHIFT                  _MK_SHIFT_CONST(0)
#define DC_COM_PIN_INPUT_DATA1_0_LPW0_INPUT_DATA_FIELD                  (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA1_0_LPW0_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA1_0_LPW0_INPUT_DATA_RANGE                  0:0
#define DC_COM_PIN_INPUT_DATA1_0_LPW0_INPUT_DATA_WOFFSET                        0x0
#define DC_COM_PIN_INPUT_DATA1_0_LPW0_INPUT_DATA_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LPW0_INPUT_DATA_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA1_0_LPW0_INPUT_DATA_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LPW0_INPUT_DATA_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// LPW1 pin input data
#define DC_COM_PIN_INPUT_DATA1_0_LPW1_INPUT_DATA_SHIFT                  _MK_SHIFT_CONST(1)
#define DC_COM_PIN_INPUT_DATA1_0_LPW1_INPUT_DATA_FIELD                  (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA1_0_LPW1_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA1_0_LPW1_INPUT_DATA_RANGE                  1:1
#define DC_COM_PIN_INPUT_DATA1_0_LPW1_INPUT_DATA_WOFFSET                        0x0
#define DC_COM_PIN_INPUT_DATA1_0_LPW1_INPUT_DATA_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LPW1_INPUT_DATA_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA1_0_LPW1_INPUT_DATA_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LPW1_INPUT_DATA_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// LPW2 pin input data
#define DC_COM_PIN_INPUT_DATA1_0_LPW2_INPUT_DATA_SHIFT                  _MK_SHIFT_CONST(2)
#define DC_COM_PIN_INPUT_DATA1_0_LPW2_INPUT_DATA_FIELD                  (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA1_0_LPW2_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA1_0_LPW2_INPUT_DATA_RANGE                  2:2
#define DC_COM_PIN_INPUT_DATA1_0_LPW2_INPUT_DATA_WOFFSET                        0x0
#define DC_COM_PIN_INPUT_DATA1_0_LPW2_INPUT_DATA_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LPW2_INPUT_DATA_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA1_0_LPW2_INPUT_DATA_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LPW2_INPUT_DATA_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// LSC0 pin input data
#define DC_COM_PIN_INPUT_DATA1_0_LSC0_INPUT_DATA_SHIFT                  _MK_SHIFT_CONST(4)
#define DC_COM_PIN_INPUT_DATA1_0_LSC0_INPUT_DATA_FIELD                  (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA1_0_LSC0_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA1_0_LSC0_INPUT_DATA_RANGE                  4:4
#define DC_COM_PIN_INPUT_DATA1_0_LSC0_INPUT_DATA_WOFFSET                        0x0
#define DC_COM_PIN_INPUT_DATA1_0_LSC0_INPUT_DATA_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LSC0_INPUT_DATA_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA1_0_LSC0_INPUT_DATA_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LSC0_INPUT_DATA_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// LSC1 pin input data
#define DC_COM_PIN_INPUT_DATA1_0_LSC1_INPUT_DATA_SHIFT                  _MK_SHIFT_CONST(5)
#define DC_COM_PIN_INPUT_DATA1_0_LSC1_INPUT_DATA_FIELD                  (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA1_0_LSC1_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA1_0_LSC1_INPUT_DATA_RANGE                  5:5
#define DC_COM_PIN_INPUT_DATA1_0_LSC1_INPUT_DATA_WOFFSET                        0x0
#define DC_COM_PIN_INPUT_DATA1_0_LSC1_INPUT_DATA_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LSC1_INPUT_DATA_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA1_0_LSC1_INPUT_DATA_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LSC1_INPUT_DATA_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// LVS pin input data
#define DC_COM_PIN_INPUT_DATA1_0_LVS_INPUT_DATA_SHIFT                   _MK_SHIFT_CONST(6)
#define DC_COM_PIN_INPUT_DATA1_0_LVS_INPUT_DATA_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA1_0_LVS_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA1_0_LVS_INPUT_DATA_RANGE                   6:6
#define DC_COM_PIN_INPUT_DATA1_0_LVS_INPUT_DATA_WOFFSET                 0x0
#define DC_COM_PIN_INPUT_DATA1_0_LVS_INPUT_DATA_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LVS_INPUT_DATA_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA1_0_LVS_INPUT_DATA_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LVS_INPUT_DATA_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// LHS pin input data
#define DC_COM_PIN_INPUT_DATA1_0_LHS_INPUT_DATA_SHIFT                   _MK_SHIFT_CONST(7)
#define DC_COM_PIN_INPUT_DATA1_0_LHS_INPUT_DATA_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA1_0_LHS_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA1_0_LHS_INPUT_DATA_RANGE                   7:7
#define DC_COM_PIN_INPUT_DATA1_0_LHS_INPUT_DATA_WOFFSET                 0x0
#define DC_COM_PIN_INPUT_DATA1_0_LHS_INPUT_DATA_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LHS_INPUT_DATA_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA1_0_LHS_INPUT_DATA_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LHS_INPUT_DATA_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// LHP0 pin input data
#define DC_COM_PIN_INPUT_DATA1_0_LHP0_INPUT_DATA_SHIFT                  _MK_SHIFT_CONST(8)
#define DC_COM_PIN_INPUT_DATA1_0_LHP0_INPUT_DATA_FIELD                  (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA1_0_LHP0_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA1_0_LHP0_INPUT_DATA_RANGE                  8:8
#define DC_COM_PIN_INPUT_DATA1_0_LHP0_INPUT_DATA_WOFFSET                        0x0
#define DC_COM_PIN_INPUT_DATA1_0_LHP0_INPUT_DATA_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LHP0_INPUT_DATA_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA1_0_LHP0_INPUT_DATA_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LHP0_INPUT_DATA_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// LHP1 pin input data
#define DC_COM_PIN_INPUT_DATA1_0_LHP1_INPUT_DATA_SHIFT                  _MK_SHIFT_CONST(9)
#define DC_COM_PIN_INPUT_DATA1_0_LHP1_INPUT_DATA_FIELD                  (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA1_0_LHP1_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA1_0_LHP1_INPUT_DATA_RANGE                  9:9
#define DC_COM_PIN_INPUT_DATA1_0_LHP1_INPUT_DATA_WOFFSET                        0x0
#define DC_COM_PIN_INPUT_DATA1_0_LHP1_INPUT_DATA_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LHP1_INPUT_DATA_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA1_0_LHP1_INPUT_DATA_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LHP1_INPUT_DATA_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// LHP2 pin input data
#define DC_COM_PIN_INPUT_DATA1_0_LHP2_INPUT_DATA_SHIFT                  _MK_SHIFT_CONST(10)
#define DC_COM_PIN_INPUT_DATA1_0_LHP2_INPUT_DATA_FIELD                  (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA1_0_LHP2_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA1_0_LHP2_INPUT_DATA_RANGE                  10:10
#define DC_COM_PIN_INPUT_DATA1_0_LHP2_INPUT_DATA_WOFFSET                        0x0
#define DC_COM_PIN_INPUT_DATA1_0_LHP2_INPUT_DATA_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LHP2_INPUT_DATA_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA1_0_LHP2_INPUT_DATA_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LHP2_INPUT_DATA_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// LVP0 pin input data
#define DC_COM_PIN_INPUT_DATA1_0_LVP0_INPUT_DATA_SHIFT                  _MK_SHIFT_CONST(12)
#define DC_COM_PIN_INPUT_DATA1_0_LVP0_INPUT_DATA_FIELD                  (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA1_0_LVP0_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA1_0_LVP0_INPUT_DATA_RANGE                  12:12
#define DC_COM_PIN_INPUT_DATA1_0_LVP0_INPUT_DATA_WOFFSET                        0x0
#define DC_COM_PIN_INPUT_DATA1_0_LVP0_INPUT_DATA_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LVP0_INPUT_DATA_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA1_0_LVP0_INPUT_DATA_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LVP0_INPUT_DATA_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// LVP1 pin input data
#define DC_COM_PIN_INPUT_DATA1_0_LVP1_INPUT_DATA_SHIFT                  _MK_SHIFT_CONST(13)
#define DC_COM_PIN_INPUT_DATA1_0_LVP1_INPUT_DATA_FIELD                  (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA1_0_LVP1_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA1_0_LVP1_INPUT_DATA_RANGE                  13:13
#define DC_COM_PIN_INPUT_DATA1_0_LVP1_INPUT_DATA_WOFFSET                        0x0
#define DC_COM_PIN_INPUT_DATA1_0_LVP1_INPUT_DATA_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LVP1_INPUT_DATA_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA1_0_LVP1_INPUT_DATA_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LVP1_INPUT_DATA_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// LM0 pin input data
#define DC_COM_PIN_INPUT_DATA1_0_LM0_INPUT_DATA_SHIFT                   _MK_SHIFT_CONST(16)
#define DC_COM_PIN_INPUT_DATA1_0_LM0_INPUT_DATA_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA1_0_LM0_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA1_0_LM0_INPUT_DATA_RANGE                   16:16
#define DC_COM_PIN_INPUT_DATA1_0_LM0_INPUT_DATA_WOFFSET                 0x0
#define DC_COM_PIN_INPUT_DATA1_0_LM0_INPUT_DATA_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LM0_INPUT_DATA_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA1_0_LM0_INPUT_DATA_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LM0_INPUT_DATA_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// LM1 pin input data
#define DC_COM_PIN_INPUT_DATA1_0_LM1_INPUT_DATA_SHIFT                   _MK_SHIFT_CONST(17)
#define DC_COM_PIN_INPUT_DATA1_0_LM1_INPUT_DATA_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA1_0_LM1_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA1_0_LM1_INPUT_DATA_RANGE                   17:17
#define DC_COM_PIN_INPUT_DATA1_0_LM1_INPUT_DATA_WOFFSET                 0x0
#define DC_COM_PIN_INPUT_DATA1_0_LM1_INPUT_DATA_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LM1_INPUT_DATA_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA1_0_LM1_INPUT_DATA_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LM1_INPUT_DATA_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// LDI pin input data
#define DC_COM_PIN_INPUT_DATA1_0_LDI_INPUT_DATA_SHIFT                   _MK_SHIFT_CONST(18)
#define DC_COM_PIN_INPUT_DATA1_0_LDI_INPUT_DATA_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA1_0_LDI_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA1_0_LDI_INPUT_DATA_RANGE                   18:18
#define DC_COM_PIN_INPUT_DATA1_0_LDI_INPUT_DATA_WOFFSET                 0x0
#define DC_COM_PIN_INPUT_DATA1_0_LDI_INPUT_DATA_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LDI_INPUT_DATA_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA1_0_LDI_INPUT_DATA_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LDI_INPUT_DATA_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// LPP pin input data
#define DC_COM_PIN_INPUT_DATA1_0_LPP_INPUT_DATA_SHIFT                   _MK_SHIFT_CONST(19)
#define DC_COM_PIN_INPUT_DATA1_0_LPP_INPUT_DATA_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA1_0_LPP_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA1_0_LPP_INPUT_DATA_RANGE                   19:19
#define DC_COM_PIN_INPUT_DATA1_0_LPP_INPUT_DATA_WOFFSET                 0x0
#define DC_COM_PIN_INPUT_DATA1_0_LPP_INPUT_DATA_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LPP_INPUT_DATA_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA1_0_LPP_INPUT_DATA_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LPP_INPUT_DATA_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// LSCK pin input data
#define DC_COM_PIN_INPUT_DATA1_0_LSCK_INPUT_DATA_SHIFT                  _MK_SHIFT_CONST(20)
#define DC_COM_PIN_INPUT_DATA1_0_LSCK_INPUT_DATA_FIELD                  (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA1_0_LSCK_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA1_0_LSCK_INPUT_DATA_RANGE                  20:20
#define DC_COM_PIN_INPUT_DATA1_0_LSCK_INPUT_DATA_WOFFSET                        0x0
#define DC_COM_PIN_INPUT_DATA1_0_LSCK_INPUT_DATA_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LSCK_INPUT_DATA_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA1_0_LSCK_INPUT_DATA_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LSCK_INPUT_DATA_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// LSDA pin input data
#define DC_COM_PIN_INPUT_DATA1_0_LSDA_INPUT_DATA_SHIFT                  _MK_SHIFT_CONST(21)
#define DC_COM_PIN_INPUT_DATA1_0_LSDA_INPUT_DATA_FIELD                  (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA1_0_LSDA_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA1_0_LSDA_INPUT_DATA_RANGE                  21:21
#define DC_COM_PIN_INPUT_DATA1_0_LSDA_INPUT_DATA_WOFFSET                        0x0
#define DC_COM_PIN_INPUT_DATA1_0_LSDA_INPUT_DATA_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LSDA_INPUT_DATA_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA1_0_LSDA_INPUT_DATA_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LSDA_INPUT_DATA_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// LCSN pin input data
#define DC_COM_PIN_INPUT_DATA1_0_LCSN_INPUT_DATA_SHIFT                  _MK_SHIFT_CONST(22)
#define DC_COM_PIN_INPUT_DATA1_0_LCSN_INPUT_DATA_FIELD                  (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA1_0_LCSN_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA1_0_LCSN_INPUT_DATA_RANGE                  22:22
#define DC_COM_PIN_INPUT_DATA1_0_LCSN_INPUT_DATA_WOFFSET                        0x0
#define DC_COM_PIN_INPUT_DATA1_0_LCSN_INPUT_DATA_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LCSN_INPUT_DATA_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA1_0_LCSN_INPUT_DATA_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LCSN_INPUT_DATA_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// LDC  pin input data
#define DC_COM_PIN_INPUT_DATA1_0_LDC_INPUT_DATA_SHIFT                   _MK_SHIFT_CONST(23)
#define DC_COM_PIN_INPUT_DATA1_0_LDC_INPUT_DATA_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA1_0_LDC_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA1_0_LDC_INPUT_DATA_RANGE                   23:23
#define DC_COM_PIN_INPUT_DATA1_0_LDC_INPUT_DATA_WOFFSET                 0x0
#define DC_COM_PIN_INPUT_DATA1_0_LDC_INPUT_DATA_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LDC_INPUT_DATA_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA1_0_LDC_INPUT_DATA_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LDC_INPUT_DATA_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// LSPI pin input data
#define DC_COM_PIN_INPUT_DATA1_0_LSPI_INPUT_DATA_SHIFT                  _MK_SHIFT_CONST(24)
#define DC_COM_PIN_INPUT_DATA1_0_LSPI_INPUT_DATA_FIELD                  (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA1_0_LSPI_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA1_0_LSPI_INPUT_DATA_RANGE                  24:24
#define DC_COM_PIN_INPUT_DATA1_0_LSPI_INPUT_DATA_WOFFSET                        0x0
#define DC_COM_PIN_INPUT_DATA1_0_LSPI_INPUT_DATA_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LSPI_INPUT_DATA_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA1_0_LSPI_INPUT_DATA_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LSPI_INPUT_DATA_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// LSDI pin input data
#define DC_COM_PIN_INPUT_DATA1_0_LSDI_INPUT_DATA_SHIFT                  _MK_SHIFT_CONST(25)
#define DC_COM_PIN_INPUT_DATA1_0_LSDI_INPUT_DATA_FIELD                  (_MK_MASK_CONST(0x1) << DC_COM_PIN_INPUT_DATA1_0_LSDI_INPUT_DATA_SHIFT)
#define DC_COM_PIN_INPUT_DATA1_0_LSDI_INPUT_DATA_RANGE                  25:25
#define DC_COM_PIN_INPUT_DATA1_0_LSDI_INPUT_DATA_WOFFSET                        0x0
#define DC_COM_PIN_INPUT_DATA1_0_LSDI_INPUT_DATA_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LSDI_INPUT_DATA_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_COM_PIN_INPUT_DATA1_0_LSDI_INPUT_DATA_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_INPUT_DATA1_0_LSDI_INPUT_DATA_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Pin Output Select
//  3 bits are used to select output on each pins and they are defined as follows:
// |------|---------------------------------------------------------------------------------|
// |      |                               PIN OUTPUT SELECT                                 |
// | Pad  |    0     |    1     |    2     |    3     |    4     |   5    |   6    |   7    |
// | Name |----------|----------|----------|----------|----------|--------|--------|--------|
// |      |  Output  |  Output  |  Output  |  Output  |  Output  | Output | Output | Output |
// |      |  Signal  |  Signal  |  Signal  |  Signal  |  Signal  | Signal | Signal | Signal |
// |------|----------|----------|----------|----------|----------|--------|--------|--------|
// | LD17 |   LD17   | LD17 Out |  LPD17   |    0     |    0     |   0    |   0    |   0    |
// | LD16 |   LD16   | LD16 Out |  LPD16   |    0     |    0     |   0    |   0    |   0    |
// | LD15 |   LD15   | LD15 Out |  LPD15   |    0     |    0     |   0    |   0    |   0    |
// | LD14 |   LD14   | LD14 Out |  LPD14   |    0     |    0     |   0    |   0    |   0    |
// | LD13 |   LD13   | LD13 Out |  LPD13   |    0     |    0     |   0    |   0    |   0    |
// | LD12 |   LD12   | LD12 Out |  LPD12   |    0     |    0     |   0    |   0    |   0    |
// | LD11 |   LD11   | LD11 Out |  LPD11   |    0     |    0     |   0    |   0    |   0    |
// | LD10 |   LD10   | LD10 Out |  LPD10   |    0     |   SD2    |   0    |   0    |   0    |
// | LD9  |   LD9    | LD9 Out  |  LPD9    |    0     |   SD2_   |   0    |   0    |   0    |
// | LD8  |   LD8    | LD8 Out  |  LPD8    |    0     |   STP    |   0    |   0    |   0    |
// | LD7  |   LD7    | LD7 Out  |  LPD7    |    0     |   SDT    |   0    |   0    |   0    |
// | LD6  |   LD6    | LD6 Out  |  LPD6    |    0     |   STH    |   0    |   0    |   0    |
// | LD5  |   LD5    | LD5 Out  |  LPD5    |    0     |   SD1    |   0    |   0    |   0    |
// | LD4  |   LD4    | LD4 Out  |  LPD4    |    0     |   SD1_   |   0    |   0    |   0    |
// | LD3  |   LD3    | LD3 Out  |  LPD3    |    0     |   SD0    |   0    |   0    |   0    |
// | LD2  |   LD2    | LD2 Out  |  LPD2    |    0     |   SD0_   |   0    |   0    |   0    |
// | LD1  |   LD1    | LD1 Out  |  LPD1    |    0     |   SC     |   0    |   0    |   0    |
// | LD0  |   LD0    | LD0 Out  |  LPD0    |    0     |   SC_    |   0    |   0    |   0    |
// |      |          |          |          |          |          |        |        |        |
// | LPW0 |   PW0    | LPW0 Out |   PW1    |   PM0    |   PW2    |  MD0   |  LPD4  |  LSDA  |
// | LPW1 |   PW1    | LPW1 Out |   PW2    |   PM1    |   PW3    |  MD1   |  LPD8  |  PW4   |
// | LPW2 |   PW2    | LPW2 Out |   PW3    |   PM0    |   PW4    |  MD2   |  LPD5  |  PW1   |
// | LSC0 |   SC0    | LSC0 Out |    0     |    0     |    0     |   0    |   0    |   0    |
// | LSC1 |   SC1    | LSC1 Out |   DE     |    0     |    0     |   0    |   0    |  LSCK  |
// | LVS  |  Vsync   | LVS Out  |    0     |   PM1    |    0     |  MD3   |   0    |   0    |
// | LHS  |  Hsync   | LHS Out  |    0     |   PM0    |    0     |  MD2   |   0    |   0    |
// |      |          |          |          |          |          |        |        |        |
// | LHP0 | H Pulse 0| LHP0 Out |   LD21   |   PM0    |    0     |  MD0   |  LPD7  |   0    |
// | LHP1 | H Pulse 1| LHP1 Out |   LD18   |   PM1    |    0     |  MD1   |  LPD0  |   0    |
// | LHP2 | H Pulse 2| LHP2 Out |   LD19   |   PM0    | V Pulse 2|  MD2   | Hsync  |   0    |
// | LVP0 | V Pulse 0| LVP0 Out |    0     |   PM0    |    0     |  MD3   |V Pulse1|  LDC   |
// | LVP1 | V Pulse 1| LVP1 Out |   LD20   |   PM1    |   PW4    |  MD3   |  LPD6  |   0    |
// |      |          |          |          |          |          |        |        |        |
// | LM0  |   M0     | LM0 Out  | H Pulse 0|   PM0    | V Pulse 2|  MD0   |   DE   |  SCS_  |
// | LM1  |   M1     | LM1 Out  |   LD21   |   PM1    | V Pulse 3|  MD1   |  LPD1  |   0    |
// | LDI  |   DI     | LDI Out  |   LD22   |   PM0    |   SCS_   |  MD2   |  LPD2  |   0    |
// | LPP  |   PP     | LPP Out  |   LD23   |   PM1    | V Pulse 3|  MD3   |  LPD3  |   0    |
// | LSCK |   SCK    | LSCK Out |    0     |   PM0    |    0     |  MD0   |  LPD3  |   0    |
// | LSDA |   SDA    | LSDA Out |   SCS_   |   PM1    |    0     |  MD1   |  LPD4  |   0    |
// | LCS_ |   SCS_   | LCS_ Out |   LD22   |   PM0    |   DE     |  MD2   |  LPD5  |   0    |
// | LDC  |   SDC    | LDC Out  |  Vsync   |   PM1    | V Pulse 1|  MD3   |  LPD6  |   0    |
// | LSPI | SPI busy | LSPI Out |   DE     |   PM0    |  DC Clk  |  MD0   |   0    |   0    |
// | LSDI |   SDI    | LSDI Out |    0     |   PM1    |    0     |  MD1   |   0    |   0    |
// |      |          |          |          |          |          |        |        |        |
// |------|----------|----------|----------|----------|----------|--------|--------|--------|
//
// Notes:
// 1. LD[23-0]  contain pixel data for 1-pixel/1-clock parallel interface
// 2. LPD[17-0] contain pixel data for non 1-pixel/1-clock parallel interface
// 3. If output select is set to 1, then corresponding Pin Output Data register value is output
//    (pin is used as general purpose output).
// 4. If output select is set to 1 AND display is in 2p1c18 (aka notebook) mode, then all outputs
//    are overloaded as described in nv bug 295009. NB this doesn't apply to lsc1 which must be 
//    programmed to output-select==0 to get the clock signal.
// 5. For dual display, each display has its own instance of the above pad macro. Set up each 
//    display according to the panel interface and insure that pins are used by only one display.
//    A set of registers outside of display, PIN_MUX_CTL_**, control which one out of 4 inputs,
//    including display and displayb, go to the pads.
//

// Register DC_COM_PIN_OUTPUT_SELECT0_0  // Pin Output Select 0
#define DC_COM_PIN_OUTPUT_SELECT0_0                     _MK_ADDR_CONST(0x314)
#define DC_COM_PIN_OUTPUT_SELECT0_0_SECURE                      0x0
#define DC_COM_PIN_OUTPUT_SELECT0_0_WORD_COUNT                  0x1
#define DC_COM_PIN_OUTPUT_SELECT0_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT0_0_RESET_MASK                  _MK_MASK_CONST(0x77777777)
#define DC_COM_PIN_OUTPUT_SELECT0_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT0_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT0_0_READ_MASK                   _MK_MASK_CONST(0x77777777)
#define DC_COM_PIN_OUTPUT_SELECT0_0_WRITE_MASK                  _MK_MASK_CONST(0x77777777)
// LD0 pin output select
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD0_OUTPUT_SELECT_SHIFT                     _MK_SHIFT_CONST(0)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD0_OUTPUT_SELECT_FIELD                     (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT0_0_LD0_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD0_OUTPUT_SELECT_RANGE                     2:0
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD0_OUTPUT_SELECT_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD0_OUTPUT_SELECT_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD0_OUTPUT_SELECT_DEFAULT_MASK                      _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD0_OUTPUT_SELECT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD0_OUTPUT_SELECT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// LD1 pin output select
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD1_OUTPUT_SELECT_SHIFT                     _MK_SHIFT_CONST(4)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD1_OUTPUT_SELECT_FIELD                     (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT0_0_LD1_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD1_OUTPUT_SELECT_RANGE                     6:4
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD1_OUTPUT_SELECT_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD1_OUTPUT_SELECT_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD1_OUTPUT_SELECT_DEFAULT_MASK                      _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD1_OUTPUT_SELECT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD1_OUTPUT_SELECT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// LD2 pin output select
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD2_OUTPUT_SELECT_SHIFT                     _MK_SHIFT_CONST(8)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD2_OUTPUT_SELECT_FIELD                     (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT0_0_LD2_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD2_OUTPUT_SELECT_RANGE                     10:8
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD2_OUTPUT_SELECT_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD2_OUTPUT_SELECT_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD2_OUTPUT_SELECT_DEFAULT_MASK                      _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD2_OUTPUT_SELECT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD2_OUTPUT_SELECT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// LD3 pin output select
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD3_OUTPUT_SELECT_SHIFT                     _MK_SHIFT_CONST(12)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD3_OUTPUT_SELECT_FIELD                     (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT0_0_LD3_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD3_OUTPUT_SELECT_RANGE                     14:12
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD3_OUTPUT_SELECT_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD3_OUTPUT_SELECT_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD3_OUTPUT_SELECT_DEFAULT_MASK                      _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD3_OUTPUT_SELECT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD3_OUTPUT_SELECT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// LD4 pin output select
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD4_OUTPUT_SELECT_SHIFT                     _MK_SHIFT_CONST(16)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD4_OUTPUT_SELECT_FIELD                     (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT0_0_LD4_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD4_OUTPUT_SELECT_RANGE                     18:16
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD4_OUTPUT_SELECT_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD4_OUTPUT_SELECT_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD4_OUTPUT_SELECT_DEFAULT_MASK                      _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD4_OUTPUT_SELECT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD4_OUTPUT_SELECT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// LD5 pin output select
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD5_OUTPUT_SELECT_SHIFT                     _MK_SHIFT_CONST(20)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD5_OUTPUT_SELECT_FIELD                     (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT0_0_LD5_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD5_OUTPUT_SELECT_RANGE                     22:20
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD5_OUTPUT_SELECT_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD5_OUTPUT_SELECT_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD5_OUTPUT_SELECT_DEFAULT_MASK                      _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD5_OUTPUT_SELECT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD5_OUTPUT_SELECT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// LD6 pin output select
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD6_OUTPUT_SELECT_SHIFT                     _MK_SHIFT_CONST(24)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD6_OUTPUT_SELECT_FIELD                     (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT0_0_LD6_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD6_OUTPUT_SELECT_RANGE                     26:24
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD6_OUTPUT_SELECT_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD6_OUTPUT_SELECT_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD6_OUTPUT_SELECT_DEFAULT_MASK                      _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD6_OUTPUT_SELECT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD6_OUTPUT_SELECT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// LD7 pin output select
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD7_OUTPUT_SELECT_SHIFT                     _MK_SHIFT_CONST(28)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD7_OUTPUT_SELECT_FIELD                     (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT0_0_LD7_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD7_OUTPUT_SELECT_RANGE                     30:28
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD7_OUTPUT_SELECT_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD7_OUTPUT_SELECT_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD7_OUTPUT_SELECT_DEFAULT_MASK                      _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD7_OUTPUT_SELECT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT0_0_LD7_OUTPUT_SELECT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register DC_COM_PIN_OUTPUT_SELECT1_0  // Pin Output Select 1
#define DC_COM_PIN_OUTPUT_SELECT1_0                     _MK_ADDR_CONST(0x315)
#define DC_COM_PIN_OUTPUT_SELECT1_0_SECURE                      0x0
#define DC_COM_PIN_OUTPUT_SELECT1_0_WORD_COUNT                  0x1
#define DC_COM_PIN_OUTPUT_SELECT1_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT1_0_RESET_MASK                  _MK_MASK_CONST(0x77777777)
#define DC_COM_PIN_OUTPUT_SELECT1_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT1_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT1_0_READ_MASK                   _MK_MASK_CONST(0x77777777)
#define DC_COM_PIN_OUTPUT_SELECT1_0_WRITE_MASK                  _MK_MASK_CONST(0x77777777)
// LD8 pin output select
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD8_OUTPUT_SELECT_SHIFT                     _MK_SHIFT_CONST(0)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD8_OUTPUT_SELECT_FIELD                     (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT1_0_LD8_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD8_OUTPUT_SELECT_RANGE                     2:0
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD8_OUTPUT_SELECT_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD8_OUTPUT_SELECT_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD8_OUTPUT_SELECT_DEFAULT_MASK                      _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD8_OUTPUT_SELECT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD8_OUTPUT_SELECT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// LD9 pin output select
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD9_OUTPUT_SELECT_SHIFT                     _MK_SHIFT_CONST(4)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD9_OUTPUT_SELECT_FIELD                     (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT1_0_LD9_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD9_OUTPUT_SELECT_RANGE                     6:4
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD9_OUTPUT_SELECT_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD9_OUTPUT_SELECT_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD9_OUTPUT_SELECT_DEFAULT_MASK                      _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD9_OUTPUT_SELECT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD9_OUTPUT_SELECT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// LD10 pin output select
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD10_OUTPUT_SELECT_SHIFT                    _MK_SHIFT_CONST(8)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD10_OUTPUT_SELECT_FIELD                    (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT1_0_LD10_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD10_OUTPUT_SELECT_RANGE                    10:8
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD10_OUTPUT_SELECT_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD10_OUTPUT_SELECT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD10_OUTPUT_SELECT_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD10_OUTPUT_SELECT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD10_OUTPUT_SELECT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// LD11 pin output select
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD11_OUTPUT_SELECT_SHIFT                    _MK_SHIFT_CONST(12)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD11_OUTPUT_SELECT_FIELD                    (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT1_0_LD11_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD11_OUTPUT_SELECT_RANGE                    14:12
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD11_OUTPUT_SELECT_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD11_OUTPUT_SELECT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD11_OUTPUT_SELECT_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD11_OUTPUT_SELECT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD11_OUTPUT_SELECT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// LD12 pin output select
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD12_OUTPUT_SELECT_SHIFT                    _MK_SHIFT_CONST(16)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD12_OUTPUT_SELECT_FIELD                    (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT1_0_LD12_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD12_OUTPUT_SELECT_RANGE                    18:16
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD12_OUTPUT_SELECT_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD12_OUTPUT_SELECT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD12_OUTPUT_SELECT_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD12_OUTPUT_SELECT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD12_OUTPUT_SELECT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// LD13 pin output select
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD13_OUTPUT_SELECT_SHIFT                    _MK_SHIFT_CONST(20)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD13_OUTPUT_SELECT_FIELD                    (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT1_0_LD13_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD13_OUTPUT_SELECT_RANGE                    22:20
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD13_OUTPUT_SELECT_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD13_OUTPUT_SELECT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD13_OUTPUT_SELECT_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD13_OUTPUT_SELECT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD13_OUTPUT_SELECT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// LD14 pin output select
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD14_OUTPUT_SELECT_SHIFT                    _MK_SHIFT_CONST(24)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD14_OUTPUT_SELECT_FIELD                    (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT1_0_LD14_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD14_OUTPUT_SELECT_RANGE                    26:24
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD14_OUTPUT_SELECT_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD14_OUTPUT_SELECT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD14_OUTPUT_SELECT_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD14_OUTPUT_SELECT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD14_OUTPUT_SELECT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// LD15 pin output select
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD15_OUTPUT_SELECT_SHIFT                    _MK_SHIFT_CONST(28)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD15_OUTPUT_SELECT_FIELD                    (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT1_0_LD15_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD15_OUTPUT_SELECT_RANGE                    30:28
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD15_OUTPUT_SELECT_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD15_OUTPUT_SELECT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD15_OUTPUT_SELECT_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD15_OUTPUT_SELECT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT1_0_LD15_OUTPUT_SELECT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register DC_COM_PIN_OUTPUT_SELECT2_0  // Pin Output Select 2
#define DC_COM_PIN_OUTPUT_SELECT2_0                     _MK_ADDR_CONST(0x316)
#define DC_COM_PIN_OUTPUT_SELECT2_0_SECURE                      0x0
#define DC_COM_PIN_OUTPUT_SELECT2_0_WORD_COUNT                  0x1
#define DC_COM_PIN_OUTPUT_SELECT2_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT2_0_RESET_MASK                  _MK_MASK_CONST(0x77)
#define DC_COM_PIN_OUTPUT_SELECT2_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT2_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT2_0_READ_MASK                   _MK_MASK_CONST(0x77)
#define DC_COM_PIN_OUTPUT_SELECT2_0_WRITE_MASK                  _MK_MASK_CONST(0x77)
// LD16 pin output select
#define DC_COM_PIN_OUTPUT_SELECT2_0_LD16_OUTPUT_SELECT_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_COM_PIN_OUTPUT_SELECT2_0_LD16_OUTPUT_SELECT_FIELD                    (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT2_0_LD16_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT2_0_LD16_OUTPUT_SELECT_RANGE                    2:0
#define DC_COM_PIN_OUTPUT_SELECT2_0_LD16_OUTPUT_SELECT_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_SELECT2_0_LD16_OUTPUT_SELECT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT2_0_LD16_OUTPUT_SELECT_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT2_0_LD16_OUTPUT_SELECT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT2_0_LD16_OUTPUT_SELECT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// LD17 pin output select
#define DC_COM_PIN_OUTPUT_SELECT2_0_LD17_OUTPUT_SELECT_SHIFT                    _MK_SHIFT_CONST(4)
#define DC_COM_PIN_OUTPUT_SELECT2_0_LD17_OUTPUT_SELECT_FIELD                    (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT2_0_LD17_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT2_0_LD17_OUTPUT_SELECT_RANGE                    6:4
#define DC_COM_PIN_OUTPUT_SELECT2_0_LD17_OUTPUT_SELECT_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_SELECT2_0_LD17_OUTPUT_SELECT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT2_0_LD17_OUTPUT_SELECT_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT2_0_LD17_OUTPUT_SELECT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT2_0_LD17_OUTPUT_SELECT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register DC_COM_PIN_OUTPUT_SELECT3_0  // Pin Output Select 3
#define DC_COM_PIN_OUTPUT_SELECT3_0                     _MK_ADDR_CONST(0x317)
#define DC_COM_PIN_OUTPUT_SELECT3_0_SECURE                      0x0
#define DC_COM_PIN_OUTPUT_SELECT3_0_WORD_COUNT                  0x1
#define DC_COM_PIN_OUTPUT_SELECT3_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT3_0_RESET_MASK                  _MK_MASK_CONST(0x77770777)
#define DC_COM_PIN_OUTPUT_SELECT3_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT3_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT3_0_READ_MASK                   _MK_MASK_CONST(0x77770777)
#define DC_COM_PIN_OUTPUT_SELECT3_0_WRITE_MASK                  _MK_MASK_CONST(0x77770777)
// LPW0 pin output select
#define DC_COM_PIN_OUTPUT_SELECT3_0_LPW0_OUTPUT_SELECT_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LPW0_OUTPUT_SELECT_FIELD                    (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT3_0_LPW0_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LPW0_OUTPUT_SELECT_RANGE                    2:0
#define DC_COM_PIN_OUTPUT_SELECT3_0_LPW0_OUTPUT_SELECT_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_SELECT3_0_LPW0_OUTPUT_SELECT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LPW0_OUTPUT_SELECT_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LPW0_OUTPUT_SELECT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LPW0_OUTPUT_SELECT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// LPW1 pin output select
#define DC_COM_PIN_OUTPUT_SELECT3_0_LPW1_OUTPUT_SELECT_SHIFT                    _MK_SHIFT_CONST(4)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LPW1_OUTPUT_SELECT_FIELD                    (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT3_0_LPW1_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LPW1_OUTPUT_SELECT_RANGE                    6:4
#define DC_COM_PIN_OUTPUT_SELECT3_0_LPW1_OUTPUT_SELECT_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_SELECT3_0_LPW1_OUTPUT_SELECT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LPW1_OUTPUT_SELECT_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LPW1_OUTPUT_SELECT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LPW1_OUTPUT_SELECT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// LPW2 pin output select
#define DC_COM_PIN_OUTPUT_SELECT3_0_LPW2_OUTPUT_SELECT_SHIFT                    _MK_SHIFT_CONST(8)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LPW2_OUTPUT_SELECT_FIELD                    (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT3_0_LPW2_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LPW2_OUTPUT_SELECT_RANGE                    10:8
#define DC_COM_PIN_OUTPUT_SELECT3_0_LPW2_OUTPUT_SELECT_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_SELECT3_0_LPW2_OUTPUT_SELECT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LPW2_OUTPUT_SELECT_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LPW2_OUTPUT_SELECT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LPW2_OUTPUT_SELECT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// LSC0 pin output select
#define DC_COM_PIN_OUTPUT_SELECT3_0_LSC0_OUTPUT_SELECT_SHIFT                    _MK_SHIFT_CONST(16)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LSC0_OUTPUT_SELECT_FIELD                    (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT3_0_LSC0_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LSC0_OUTPUT_SELECT_RANGE                    18:16
#define DC_COM_PIN_OUTPUT_SELECT3_0_LSC0_OUTPUT_SELECT_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_SELECT3_0_LSC0_OUTPUT_SELECT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LSC0_OUTPUT_SELECT_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LSC0_OUTPUT_SELECT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LSC0_OUTPUT_SELECT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// LSC1 pin output select
#define DC_COM_PIN_OUTPUT_SELECT3_0_LSC1_OUTPUT_SELECT_SHIFT                    _MK_SHIFT_CONST(20)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LSC1_OUTPUT_SELECT_FIELD                    (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT3_0_LSC1_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LSC1_OUTPUT_SELECT_RANGE                    22:20
#define DC_COM_PIN_OUTPUT_SELECT3_0_LSC1_OUTPUT_SELECT_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_SELECT3_0_LSC1_OUTPUT_SELECT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LSC1_OUTPUT_SELECT_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LSC1_OUTPUT_SELECT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LSC1_OUTPUT_SELECT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// LVS pin output select
#define DC_COM_PIN_OUTPUT_SELECT3_0_LVS_OUTPUT_SELECT_SHIFT                     _MK_SHIFT_CONST(24)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LVS_OUTPUT_SELECT_FIELD                     (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT3_0_LVS_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LVS_OUTPUT_SELECT_RANGE                     26:24
#define DC_COM_PIN_OUTPUT_SELECT3_0_LVS_OUTPUT_SELECT_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_SELECT3_0_LVS_OUTPUT_SELECT_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LVS_OUTPUT_SELECT_DEFAULT_MASK                      _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LVS_OUTPUT_SELECT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LVS_OUTPUT_SELECT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// LHS pin output select
#define DC_COM_PIN_OUTPUT_SELECT3_0_LHS_OUTPUT_SELECT_SHIFT                     _MK_SHIFT_CONST(28)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LHS_OUTPUT_SELECT_FIELD                     (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT3_0_LHS_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LHS_OUTPUT_SELECT_RANGE                     30:28
#define DC_COM_PIN_OUTPUT_SELECT3_0_LHS_OUTPUT_SELECT_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_SELECT3_0_LHS_OUTPUT_SELECT_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LHS_OUTPUT_SELECT_DEFAULT_MASK                      _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LHS_OUTPUT_SELECT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT3_0_LHS_OUTPUT_SELECT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register DC_COM_PIN_OUTPUT_SELECT4_0  // Pin Output Select 4
#define DC_COM_PIN_OUTPUT_SELECT4_0                     _MK_ADDR_CONST(0x318)
#define DC_COM_PIN_OUTPUT_SELECT4_0_SECURE                      0x0
#define DC_COM_PIN_OUTPUT_SELECT4_0_WORD_COUNT                  0x1
#define DC_COM_PIN_OUTPUT_SELECT4_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT4_0_RESET_MASK                  _MK_MASK_CONST(0x770777)
#define DC_COM_PIN_OUTPUT_SELECT4_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT4_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT4_0_READ_MASK                   _MK_MASK_CONST(0x770777)
#define DC_COM_PIN_OUTPUT_SELECT4_0_WRITE_MASK                  _MK_MASK_CONST(0x770777)
// LHP0 pin output select
#define DC_COM_PIN_OUTPUT_SELECT4_0_LHP0_OUTPUT_SELECT_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_COM_PIN_OUTPUT_SELECT4_0_LHP0_OUTPUT_SELECT_FIELD                    (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT4_0_LHP0_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT4_0_LHP0_OUTPUT_SELECT_RANGE                    2:0
#define DC_COM_PIN_OUTPUT_SELECT4_0_LHP0_OUTPUT_SELECT_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_SELECT4_0_LHP0_OUTPUT_SELECT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT4_0_LHP0_OUTPUT_SELECT_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT4_0_LHP0_OUTPUT_SELECT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT4_0_LHP0_OUTPUT_SELECT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// LHP1 pin output select
#define DC_COM_PIN_OUTPUT_SELECT4_0_LHP1_OUTPUT_SELECT_SHIFT                    _MK_SHIFT_CONST(4)
#define DC_COM_PIN_OUTPUT_SELECT4_0_LHP1_OUTPUT_SELECT_FIELD                    (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT4_0_LHP1_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT4_0_LHP1_OUTPUT_SELECT_RANGE                    6:4
#define DC_COM_PIN_OUTPUT_SELECT4_0_LHP1_OUTPUT_SELECT_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_SELECT4_0_LHP1_OUTPUT_SELECT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT4_0_LHP1_OUTPUT_SELECT_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT4_0_LHP1_OUTPUT_SELECT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT4_0_LHP1_OUTPUT_SELECT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// LHP2 pin output select
#define DC_COM_PIN_OUTPUT_SELECT4_0_LHP2_OUTPUT_SELECT_SHIFT                    _MK_SHIFT_CONST(8)
#define DC_COM_PIN_OUTPUT_SELECT4_0_LHP2_OUTPUT_SELECT_FIELD                    (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT4_0_LHP2_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT4_0_LHP2_OUTPUT_SELECT_RANGE                    10:8
#define DC_COM_PIN_OUTPUT_SELECT4_0_LHP2_OUTPUT_SELECT_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_SELECT4_0_LHP2_OUTPUT_SELECT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT4_0_LHP2_OUTPUT_SELECT_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT4_0_LHP2_OUTPUT_SELECT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT4_0_LHP2_OUTPUT_SELECT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// LVP0 pin output select
#define DC_COM_PIN_OUTPUT_SELECT4_0_LVP0_OUTPUT_SELECT_SHIFT                    _MK_SHIFT_CONST(16)
#define DC_COM_PIN_OUTPUT_SELECT4_0_LVP0_OUTPUT_SELECT_FIELD                    (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT4_0_LVP0_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT4_0_LVP0_OUTPUT_SELECT_RANGE                    18:16
#define DC_COM_PIN_OUTPUT_SELECT4_0_LVP0_OUTPUT_SELECT_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_SELECT4_0_LVP0_OUTPUT_SELECT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT4_0_LVP0_OUTPUT_SELECT_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT4_0_LVP0_OUTPUT_SELECT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT4_0_LVP0_OUTPUT_SELECT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// LVP1 pin output select
#define DC_COM_PIN_OUTPUT_SELECT4_0_LVP1_OUTPUT_SELECT_SHIFT                    _MK_SHIFT_CONST(20)
#define DC_COM_PIN_OUTPUT_SELECT4_0_LVP1_OUTPUT_SELECT_FIELD                    (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT4_0_LVP1_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT4_0_LVP1_OUTPUT_SELECT_RANGE                    22:20
#define DC_COM_PIN_OUTPUT_SELECT4_0_LVP1_OUTPUT_SELECT_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_SELECT4_0_LVP1_OUTPUT_SELECT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT4_0_LVP1_OUTPUT_SELECT_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT4_0_LVP1_OUTPUT_SELECT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT4_0_LVP1_OUTPUT_SELECT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register DC_COM_PIN_OUTPUT_SELECT5_0  // Pin Output Select 5
#define DC_COM_PIN_OUTPUT_SELECT5_0                     _MK_ADDR_CONST(0x319)
#define DC_COM_PIN_OUTPUT_SELECT5_0_SECURE                      0x0
#define DC_COM_PIN_OUTPUT_SELECT5_0_WORD_COUNT                  0x1
#define DC_COM_PIN_OUTPUT_SELECT5_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT5_0_RESET_MASK                  _MK_MASK_CONST(0x7777)
#define DC_COM_PIN_OUTPUT_SELECT5_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT5_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT5_0_READ_MASK                   _MK_MASK_CONST(0x7777)
#define DC_COM_PIN_OUTPUT_SELECT5_0_WRITE_MASK                  _MK_MASK_CONST(0x7777)
// LM0 pin output select
#define DC_COM_PIN_OUTPUT_SELECT5_0_LM0_OUTPUT_SELECT_SHIFT                     _MK_SHIFT_CONST(0)
#define DC_COM_PIN_OUTPUT_SELECT5_0_LM0_OUTPUT_SELECT_FIELD                     (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT5_0_LM0_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT5_0_LM0_OUTPUT_SELECT_RANGE                     2:0
#define DC_COM_PIN_OUTPUT_SELECT5_0_LM0_OUTPUT_SELECT_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_SELECT5_0_LM0_OUTPUT_SELECT_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT5_0_LM0_OUTPUT_SELECT_DEFAULT_MASK                      _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT5_0_LM0_OUTPUT_SELECT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT5_0_LM0_OUTPUT_SELECT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// LM1 pin output select
#define DC_COM_PIN_OUTPUT_SELECT5_0_LM1_OUTPUT_SELECT_SHIFT                     _MK_SHIFT_CONST(4)
#define DC_COM_PIN_OUTPUT_SELECT5_0_LM1_OUTPUT_SELECT_FIELD                     (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT5_0_LM1_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT5_0_LM1_OUTPUT_SELECT_RANGE                     6:4
#define DC_COM_PIN_OUTPUT_SELECT5_0_LM1_OUTPUT_SELECT_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_SELECT5_0_LM1_OUTPUT_SELECT_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT5_0_LM1_OUTPUT_SELECT_DEFAULT_MASK                      _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT5_0_LM1_OUTPUT_SELECT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT5_0_LM1_OUTPUT_SELECT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// LDI pin output select
#define DC_COM_PIN_OUTPUT_SELECT5_0_LDI_OUTPUT_SELECT_SHIFT                     _MK_SHIFT_CONST(8)
#define DC_COM_PIN_OUTPUT_SELECT5_0_LDI_OUTPUT_SELECT_FIELD                     (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT5_0_LDI_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT5_0_LDI_OUTPUT_SELECT_RANGE                     10:8
#define DC_COM_PIN_OUTPUT_SELECT5_0_LDI_OUTPUT_SELECT_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_SELECT5_0_LDI_OUTPUT_SELECT_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT5_0_LDI_OUTPUT_SELECT_DEFAULT_MASK                      _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT5_0_LDI_OUTPUT_SELECT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT5_0_LDI_OUTPUT_SELECT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// LPP pin output select
#define DC_COM_PIN_OUTPUT_SELECT5_0_LPP_OUTPUT_SELECT_SHIFT                     _MK_SHIFT_CONST(12)
#define DC_COM_PIN_OUTPUT_SELECT5_0_LPP_OUTPUT_SELECT_FIELD                     (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT5_0_LPP_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT5_0_LPP_OUTPUT_SELECT_RANGE                     14:12
#define DC_COM_PIN_OUTPUT_SELECT5_0_LPP_OUTPUT_SELECT_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_SELECT5_0_LPP_OUTPUT_SELECT_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT5_0_LPP_OUTPUT_SELECT_DEFAULT_MASK                      _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT5_0_LPP_OUTPUT_SELECT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT5_0_LPP_OUTPUT_SELECT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register DC_COM_PIN_OUTPUT_SELECT6_0  // Pin Output Select 6
#define DC_COM_PIN_OUTPUT_SELECT6_0                     _MK_ADDR_CONST(0x31a)
#define DC_COM_PIN_OUTPUT_SELECT6_0_SECURE                      0x0
#define DC_COM_PIN_OUTPUT_SELECT6_0_WORD_COUNT                  0x1
#define DC_COM_PIN_OUTPUT_SELECT6_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT6_0_RESET_MASK                  _MK_MASK_CONST(0x777777)
#define DC_COM_PIN_OUTPUT_SELECT6_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT6_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT6_0_READ_MASK                   _MK_MASK_CONST(0x777777)
#define DC_COM_PIN_OUTPUT_SELECT6_0_WRITE_MASK                  _MK_MASK_CONST(0x777777)
// LSCK pin output select
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSCK_OUTPUT_SELECT_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSCK_OUTPUT_SELECT_FIELD                    (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT6_0_LSCK_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSCK_OUTPUT_SELECT_RANGE                    2:0
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSCK_OUTPUT_SELECT_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSCK_OUTPUT_SELECT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSCK_OUTPUT_SELECT_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSCK_OUTPUT_SELECT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSCK_OUTPUT_SELECT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// LSDA pin output select
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSDA_OUTPUT_SELECT_SHIFT                    _MK_SHIFT_CONST(4)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSDA_OUTPUT_SELECT_FIELD                    (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT6_0_LSDA_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSDA_OUTPUT_SELECT_RANGE                    6:4
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSDA_OUTPUT_SELECT_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSDA_OUTPUT_SELECT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSDA_OUTPUT_SELECT_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSDA_OUTPUT_SELECT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSDA_OUTPUT_SELECT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// LCSN pin output select
#define DC_COM_PIN_OUTPUT_SELECT6_0_LCSN_OUTPUT_SELECT_SHIFT                    _MK_SHIFT_CONST(8)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LCSN_OUTPUT_SELECT_FIELD                    (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT6_0_LCSN_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LCSN_OUTPUT_SELECT_RANGE                    10:8
#define DC_COM_PIN_OUTPUT_SELECT6_0_LCSN_OUTPUT_SELECT_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_SELECT6_0_LCSN_OUTPUT_SELECT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LCSN_OUTPUT_SELECT_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LCSN_OUTPUT_SELECT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LCSN_OUTPUT_SELECT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// LDC  pin output select
#define DC_COM_PIN_OUTPUT_SELECT6_0_LDC_OUTPUT_SELECT_SHIFT                     _MK_SHIFT_CONST(12)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LDC_OUTPUT_SELECT_FIELD                     (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT6_0_LDC_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LDC_OUTPUT_SELECT_RANGE                     14:12
#define DC_COM_PIN_OUTPUT_SELECT6_0_LDC_OUTPUT_SELECT_WOFFSET                   0x0
#define DC_COM_PIN_OUTPUT_SELECT6_0_LDC_OUTPUT_SELECT_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LDC_OUTPUT_SELECT_DEFAULT_MASK                      _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LDC_OUTPUT_SELECT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LDC_OUTPUT_SELECT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// LSPI pin output select
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSPI_OUTPUT_SELECT_SHIFT                    _MK_SHIFT_CONST(16)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSPI_OUTPUT_SELECT_FIELD                    (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT6_0_LSPI_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSPI_OUTPUT_SELECT_RANGE                    18:16
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSPI_OUTPUT_SELECT_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSPI_OUTPUT_SELECT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSPI_OUTPUT_SELECT_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSPI_OUTPUT_SELECT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSPI_OUTPUT_SELECT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// LSDI pin output select
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSDI_OUTPUT_SELECT_SHIFT                    _MK_SHIFT_CONST(20)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSDI_OUTPUT_SELECT_FIELD                    (_MK_MASK_CONST(0x7) << DC_COM_PIN_OUTPUT_SELECT6_0_LSDI_OUTPUT_SELECT_SHIFT)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSDI_OUTPUT_SELECT_RANGE                    22:20
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSDI_OUTPUT_SELECT_WOFFSET                  0x0
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSDI_OUTPUT_SELECT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSDI_OUTPUT_SELECT_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSDI_OUTPUT_SELECT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_OUTPUT_SELECT6_0_LSDI_OUTPUT_SELECT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Pin Miscellaneous Control

// Register DC_COM_PIN_MISC_CONTROL_0  // Pin Miscelaneous Control
#define DC_COM_PIN_MISC_CONTROL_0                       _MK_ADDR_CONST(0x31b)
#define DC_COM_PIN_MISC_CONTROL_0_SECURE                        0x0
#define DC_COM_PIN_MISC_CONTROL_0_WORD_COUNT                    0x1
#define DC_COM_PIN_MISC_CONTROL_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_MISC_CONTROL_0_RESET_MASK                    _MK_MASK_CONST(0x4)
#define DC_COM_PIN_MISC_CONTROL_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define DC_COM_PIN_MISC_CONTROL_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_PIN_MISC_CONTROL_0_READ_MASK                     _MK_MASK_CONST(0x4)
#define DC_COM_PIN_MISC_CONTROL_0_WRITE_MASK                    _MK_MASK_CONST(0x4)
// Display Clock (DCLK) Enable   0= disable
//   1= enable display clock to be output on
//      LSPI pin (LSPI output select must be
//      appropriately programmed for this to be
//      effective)
#define DC_COM_PIN_MISC_CONTROL_0_DISP_CLOCK_OUTPUT_SHIFT                       _MK_SHIFT_CONST(2)
#define DC_COM_PIN_MISC_CONTROL_0_DISP_CLOCK_OUTPUT_FIELD                       (_MK_MASK_CONST(0x1) << DC_COM_PIN_MISC_CONTROL_0_DISP_CLOCK_OUTPUT_SHIFT)
#define DC_COM_PIN_MISC_CONTROL_0_DISP_CLOCK_OUTPUT_RANGE                       2:2
#define DC_COM_PIN_MISC_CONTROL_0_DISP_CLOCK_OUTPUT_WOFFSET                     0x0
#define DC_COM_PIN_MISC_CONTROL_0_DISP_CLOCK_OUTPUT_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_MISC_CONTROL_0_DISP_CLOCK_OUTPUT_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_COM_PIN_MISC_CONTROL_0_DISP_CLOCK_OUTPUT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PIN_MISC_CONTROL_0_DISP_CLOCK_OUTPUT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PIN_MISC_CONTROL_0_DISP_CLOCK_OUTPUT_DISABLE                     _MK_ENUM_CONST(0)
#define DC_COM_PIN_MISC_CONTROL_0_DISP_CLOCK_OUTPUT_ENABLE                      _MK_ENUM_CONST(1)

//
// Class: Pulse Width Modulation
//
// PM0 signal is programmable pulse width modulation signal that can be output on several pins.
// The control register should be initialized once before PM0 is enabled.
// Note that the period is expressed as multiples of 4 times the divider value.
// The actual period - in clock cycles - is given by:
// period = (1 + PM0_CLOCK_DIVIDER) * ((PM0_PERIOD + 1) * 4)

// Register DC_COM_PM0_CONTROL_0  // PM0 signal Control
#define DC_COM_PM0_CONTROL_0                    _MK_ADDR_CONST(0x31c)
#define DC_COM_PM0_CONTROL_0_SECURE                     0x0
#define DC_COM_PM0_CONTROL_0_WORD_COUNT                         0x1
#define DC_COM_PM0_CONTROL_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define DC_COM_PM0_CONTROL_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define DC_COM_PM0_CONTROL_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define DC_COM_PM0_CONTROL_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_PM0_CONTROL_0_READ_MASK                  _MK_MASK_CONST(0xfc03f3)
#define DC_COM_PM0_CONTROL_0_WRITE_MASK                         _MK_MASK_CONST(0xfc03f3)
// PM0 Clock Select
//   0= output of shift clock divider
//   1= pixel clock
//   2= line clock
//   3= frame clock
//  Notes: 
//  1) Pixel clock, line clock, and
//  frame clock is running only when PW0 signal
//  is enabled.
//  2) In non-continuous mode, shift clock and pixel
//  clock run continuously, but line clock and 
//  frame clock only run while a frame is being sent. 
#define DC_COM_PM0_CONTROL_0_PM0_CLOCK_SELECT_SHIFT                     _MK_SHIFT_CONST(0)
#define DC_COM_PM0_CONTROL_0_PM0_CLOCK_SELECT_FIELD                     (_MK_MASK_CONST(0x3) << DC_COM_PM0_CONTROL_0_PM0_CLOCK_SELECT_SHIFT)
#define DC_COM_PM0_CONTROL_0_PM0_CLOCK_SELECT_RANGE                     1:0
#define DC_COM_PM0_CONTROL_0_PM0_CLOCK_SELECT_WOFFSET                   0x0
#define DC_COM_PM0_CONTROL_0_PM0_CLOCK_SELECT_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PM0_CONTROL_0_PM0_CLOCK_SELECT_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PM0_CONTROL_0_PM0_CLOCK_SELECT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PM0_CONTROL_0_PM0_CLOCK_SELECT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// PM0 Clock Divider (1 to 64)
//
#define DC_COM_PM0_CONTROL_0_PM0_CLOCK_DIVIDER_SHIFT                    _MK_SHIFT_CONST(4)
#define DC_COM_PM0_CONTROL_0_PM0_CLOCK_DIVIDER_FIELD                    (_MK_MASK_CONST(0x3f) << DC_COM_PM0_CONTROL_0_PM0_CLOCK_DIVIDER_SHIFT)
#define DC_COM_PM0_CONTROL_0_PM0_CLOCK_DIVIDER_RANGE                    9:4
#define DC_COM_PM0_CONTROL_0_PM0_CLOCK_DIVIDER_WOFFSET                  0x0
#define DC_COM_PM0_CONTROL_0_PM0_CLOCK_DIVIDER_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PM0_CONTROL_0_PM0_CLOCK_DIVIDER_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PM0_CONTROL_0_PM0_CLOCK_DIVIDER_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PM0_CONTROL_0_PM0_CLOCK_DIVIDER_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// PM0 Period (4, 8, ... , 256 clock cycles)
//
#define DC_COM_PM0_CONTROL_0_PM0_PERIOD_SHIFT                   _MK_SHIFT_CONST(18)
#define DC_COM_PM0_CONTROL_0_PM0_PERIOD_FIELD                   (_MK_MASK_CONST(0x3f) << DC_COM_PM0_CONTROL_0_PM0_PERIOD_SHIFT)
#define DC_COM_PM0_CONTROL_0_PM0_PERIOD_RANGE                   23:18
#define DC_COM_PM0_CONTROL_0_PM0_PERIOD_WOFFSET                 0x0
#define DC_COM_PM0_CONTROL_0_PM0_PERIOD_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PM0_CONTROL_0_PM0_PERIOD_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_PM0_CONTROL_0_PM0_PERIOD_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PM0_CONTROL_0_PM0_PERIOD_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// A counter repeatedly counts up from 0 to ((PM0_PERIOD << 2) + 3) pre-scaled cycles.
// The period always starts with the output value == 1. After DUTY_CYCLE number
// of pre-scaled cycles, the output value is cleared for the remainder of the period.
// In order to output constant 0, simply set the DUTY_CYCLE to 0.
// To output a constant 1, set DUTY_CYCLE to be any value greater than ((PM0_PERIOD << 2) + 3).

// Register DC_COM_PM0_DUTY_CYCLE_0  // PM0 Duty Cycle
#define DC_COM_PM0_DUTY_CYCLE_0                 _MK_ADDR_CONST(0x31d)
#define DC_COM_PM0_DUTY_CYCLE_0_SECURE                  0x0
#define DC_COM_PM0_DUTY_CYCLE_0_WORD_COUNT                      0x1
#define DC_COM_PM0_DUTY_CYCLE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define DC_COM_PM0_DUTY_CYCLE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PM0_DUTY_CYCLE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define DC_COM_PM0_DUTY_CYCLE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define DC_COM_PM0_DUTY_CYCLE_0_READ_MASK                       _MK_MASK_CONST(0x1ff)
#define DC_COM_PM0_DUTY_CYCLE_0_WRITE_MASK                      _MK_MASK_CONST(0x1ff)
// PM0 Duty Cycle (or D)
//   From 1/P to D/P pulse high time where P
//   is the period.
#define DC_COM_PM0_DUTY_CYCLE_0_PM0_DUTY_CYCLE_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_COM_PM0_DUTY_CYCLE_0_PM0_DUTY_CYCLE_FIELD                    (_MK_MASK_CONST(0x1ff) << DC_COM_PM0_DUTY_CYCLE_0_PM0_DUTY_CYCLE_SHIFT)
#define DC_COM_PM0_DUTY_CYCLE_0_PM0_DUTY_CYCLE_RANGE                    8:0
#define DC_COM_PM0_DUTY_CYCLE_0_PM0_DUTY_CYCLE_WOFFSET                  0x0
#define DC_COM_PM0_DUTY_CYCLE_0_PM0_DUTY_CYCLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PM0_DUTY_CYCLE_0_PM0_DUTY_CYCLE_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PM0_DUTY_CYCLE_0_PM0_DUTY_CYCLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PM0_DUTY_CYCLE_0_PM0_DUTY_CYCLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// PM1 signal is programmable pulse width modulation signal that can be output on several pins.
// The control register register should be initialized once before PM1 is enabled.
// The actual period - in clock cycles - is given by:
// period = (1 + PM1_CLOCK_DIVIDER) * ((PM1_PERIOD + 1) * 4)

// Register DC_COM_PM1_CONTROL_0  // PM1 signal Control
#define DC_COM_PM1_CONTROL_0                    _MK_ADDR_CONST(0x31e)
#define DC_COM_PM1_CONTROL_0_SECURE                     0x0
#define DC_COM_PM1_CONTROL_0_WORD_COUNT                         0x1
#define DC_COM_PM1_CONTROL_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define DC_COM_PM1_CONTROL_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define DC_COM_PM1_CONTROL_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define DC_COM_PM1_CONTROL_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_PM1_CONTROL_0_READ_MASK                  _MK_MASK_CONST(0xfc03f3)
#define DC_COM_PM1_CONTROL_0_WRITE_MASK                         _MK_MASK_CONST(0xfc03f3)
// PM1 Clock Select
//   0= output of shift clock divider
//   1= pixel clock
//   2= line clock
//   3= frame clock
//  Notes: 
//  1) Pixel clock, line clock, and
//  frame clock is running only when PW0 signal
//  is enabled.
//  2) In non-continuous mode, shift clock and pixel
//  clock run continuously, but line clock and 
//  frame clock only run while a frame is being sent. 
#define DC_COM_PM1_CONTROL_0_PM1_CLOCK_SELECT_SHIFT                     _MK_SHIFT_CONST(0)
#define DC_COM_PM1_CONTROL_0_PM1_CLOCK_SELECT_FIELD                     (_MK_MASK_CONST(0x3) << DC_COM_PM1_CONTROL_0_PM1_CLOCK_SELECT_SHIFT)
#define DC_COM_PM1_CONTROL_0_PM1_CLOCK_SELECT_RANGE                     1:0
#define DC_COM_PM1_CONTROL_0_PM1_CLOCK_SELECT_WOFFSET                   0x0
#define DC_COM_PM1_CONTROL_0_PM1_CLOCK_SELECT_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_PM1_CONTROL_0_PM1_CLOCK_SELECT_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PM1_CONTROL_0_PM1_CLOCK_SELECT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_PM1_CONTROL_0_PM1_CLOCK_SELECT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// PM1 Clock Divider (1 to 64)
//
#define DC_COM_PM1_CONTROL_0_PM1_CLOCK_DIVIDER_SHIFT                    _MK_SHIFT_CONST(4)
#define DC_COM_PM1_CONTROL_0_PM1_CLOCK_DIVIDER_FIELD                    (_MK_MASK_CONST(0x3f) << DC_COM_PM1_CONTROL_0_PM1_CLOCK_DIVIDER_SHIFT)
#define DC_COM_PM1_CONTROL_0_PM1_CLOCK_DIVIDER_RANGE                    9:4
#define DC_COM_PM1_CONTROL_0_PM1_CLOCK_DIVIDER_WOFFSET                  0x0
#define DC_COM_PM1_CONTROL_0_PM1_CLOCK_DIVIDER_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PM1_CONTROL_0_PM1_CLOCK_DIVIDER_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PM1_CONTROL_0_PM1_CLOCK_DIVIDER_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PM1_CONTROL_0_PM1_CLOCK_DIVIDER_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// PM1 Period (4, 8, ... , 256 clock cycles)
//
#define DC_COM_PM1_CONTROL_0_PM1_PERIOD_SHIFT                   _MK_SHIFT_CONST(18)
#define DC_COM_PM1_CONTROL_0_PM1_PERIOD_FIELD                   (_MK_MASK_CONST(0x3f) << DC_COM_PM1_CONTROL_0_PM1_PERIOD_SHIFT)
#define DC_COM_PM1_CONTROL_0_PM1_PERIOD_RANGE                   23:18
#define DC_COM_PM1_CONTROL_0_PM1_PERIOD_WOFFSET                 0x0
#define DC_COM_PM1_CONTROL_0_PM1_PERIOD_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_PM1_CONTROL_0_PM1_PERIOD_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_PM1_CONTROL_0_PM1_PERIOD_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_PM1_CONTROL_0_PM1_PERIOD_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// A counter repeatedly counts up from 0 to ((PM1_PERIOD << 2) + 3) pre-scaled cycles.
// The period always starts with the output value == 1. After DUTY_CYCLE number
// of pre-scaled cycles, the output value is cleared for the remainder of the period.
// In order to output constant 0, simply set the DUTY_CYCLE to 0.
// To output a constant 1, set DUTY_CYCLE to be any value greater than ((PM1_PERIOD << 2) + 3).

// Register DC_COM_PM1_DUTY_CYCLE_0  // PM1 Duty Cycle
#define DC_COM_PM1_DUTY_CYCLE_0                 _MK_ADDR_CONST(0x31f)
#define DC_COM_PM1_DUTY_CYCLE_0_SECURE                  0x0
#define DC_COM_PM1_DUTY_CYCLE_0_WORD_COUNT                      0x1
#define DC_COM_PM1_DUTY_CYCLE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define DC_COM_PM1_DUTY_CYCLE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_PM1_DUTY_CYCLE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define DC_COM_PM1_DUTY_CYCLE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define DC_COM_PM1_DUTY_CYCLE_0_READ_MASK                       _MK_MASK_CONST(0x1ff)
#define DC_COM_PM1_DUTY_CYCLE_0_WRITE_MASK                      _MK_MASK_CONST(0x1ff)
// PM1 Duty Cycle
//   from 1/P to P/P pulse high time where P
//   is the period.
#define DC_COM_PM1_DUTY_CYCLE_0_PM1_DUTY_CYCLE_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_COM_PM1_DUTY_CYCLE_0_PM1_DUTY_CYCLE_FIELD                    (_MK_MASK_CONST(0x1ff) << DC_COM_PM1_DUTY_CYCLE_0_PM1_DUTY_CYCLE_SHIFT)
#define DC_COM_PM1_DUTY_CYCLE_0_PM1_DUTY_CYCLE_RANGE                    8:0
#define DC_COM_PM1_DUTY_CYCLE_0_PM1_DUTY_CYCLE_WOFFSET                  0x0
#define DC_COM_PM1_DUTY_CYCLE_0_PM1_DUTY_CYCLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_PM1_DUTY_CYCLE_0_PM1_DUTY_CYCLE_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_PM1_DUTY_CYCLE_0_PM1_DUTY_CYCLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_PM1_DUTY_CYCLE_0_PM1_DUTY_CYCLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//
// Class: Serial Peripheral Interface (SPI)
//
// SPI interface is a 3-pin or 4-pin serial interface which is typically used to program
//  registers in diplay device. However, for display with built-in frame buffer, it can also be
//  be used to write pixel data to the built-in frame buffer.
//  Currently only write cycles are supported.
// LCD SPI interface signals consists of:
//  1. SPI Clock (SCK) which can be output on LSCK pin.
//  2. SPI Data (SDA) which can be output on LSDA pin.
//  3. Optional SPI Data/Command (SDC) which can be output on LDC pin.
//  4. Main-Display SPI Chip Select (Main SCS_) signal which can be output on LCS_ pin
//  5. Sub-Display  SPI Chip Select (Sub  SCS_) signal which can be output on LM0 or LDI or
//     LSDA pins - this is only used only if there is a sub display
//  Theoretically if two LCD panels (main and sub displays) are connected, then SPI interface
//  can be connected to both LCD panels and shared between the two panels.
//  In this case two Chip Select pins are required and LCS_ should be connected to the main
//  display and other pin has to be selected to output the sub display SCS_.
//  Internally two SPI chip select signals (lmscs_ and lsscs_ for main and sub display SPI
//  chip select) are generated.
// When SPI is enabled, there are three possible SPI transactions:
//  a. SPI write can be triggered by host by writing to HSPI_CS_DC register
//  b. SPI write can be triggered to send pixel data from frame buffer
//  c. SPI write can be triggered to send Initialization Sequence (IS). Frame initialization
//     sequence is sent one line prior to active display line.
// For LCD SPI, pixel data can only be sent to either Main-Display or Sub-Display but not to
//  both but host SPI and IS SPI can be sent to both Main and Sub displays simultanenously.
// In case a. and c. the SPI root clock is derived from output of shift clock divider which is
//   then further divided by SPI_CLK_DIVIDER. For both cases, the SPI number of bits/cycle is
//   determined by SPI_BITS_PER_CYCLE and the SPI data direction is determined by
//   SPI_DATA_DIRECTION.
// In case b. the SPI root clock is derived from output of shift clock divider with no further
//   division. For this case, the SPI number of bits/cycle is determined by correct programming
//   of pixel clock divider.
// If case a. is enabled at the same time with case b. and c. then host SPI triggers is delayed
//   to the beginning of horizontal display active time of a line that does not have IS SPI or
//   LCD SPI cycles. This means that if all cases are enabled, the vertical blank time must be
//   at least 2 lines otherwise host SPI cycles cannot be executed.
//

// Register DC_COM_SPI_CONTROL_0  // SPI Control
#define DC_COM_SPI_CONTROL_0                    _MK_ADDR_CONST(0x320)
#define DC_COM_SPI_CONTROL_0_SECURE                     0x0
#define DC_COM_SPI_CONTROL_0_WORD_COUNT                         0x1
#define DC_COM_SPI_CONTROL_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define DC_COM_SPI_CONTROL_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define DC_COM_SPI_CONTROL_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define DC_COM_SPI_CONTROL_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_SPI_CONTROL_0_READ_MASK                  _MK_MASK_CONST(0x31f00fb)
#define DC_COM_SPI_CONTROL_0_WRITE_MASK                         _MK_MASK_CONST(0x31f00fb)
// SPI Serial Clock Control
//   0= SCK rising edge is active edge
//      1-clock chip select and no SCK clock
//      edge to latch chip select
//   1= SCK rising edge is active edge
//      2-clock chip select with SCK rising
//      clock edge to latch it
//   2= SCK falling edge is active edge
//      1-clock chip select and no SCK clock
//      edge to latch chip select
//   3= SCK falling edge is active edge
//      2-clock chip select with SCK falling
//      clock edge to latch it
//  This is valid for Host, IS, and LCD SPI
#define DC_COM_SPI_CONTROL_0_SPI_SERIAL_CLK_CONTROL_SHIFT                       _MK_SHIFT_CONST(0)
#define DC_COM_SPI_CONTROL_0_SPI_SERIAL_CLK_CONTROL_FIELD                       (_MK_MASK_CONST(0x3) << DC_COM_SPI_CONTROL_0_SPI_SERIAL_CLK_CONTROL_SHIFT)
#define DC_COM_SPI_CONTROL_0_SPI_SERIAL_CLK_CONTROL_RANGE                       1:0
#define DC_COM_SPI_CONTROL_0_SPI_SERIAL_CLK_CONTROL_WOFFSET                     0x0
#define DC_COM_SPI_CONTROL_0_SPI_SERIAL_CLK_CONTROL_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_SPI_CONTROL_0_SPI_SERIAL_CLK_CONTROL_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_COM_SPI_CONTROL_0_SPI_SERIAL_CLK_CONTROL_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_SPI_CONTROL_0_SPI_SERIAL_CLK_CONTROL_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// SPI Data Direction   0= msb to lsb
//   1= lsb to msb
//  This is valid for Host SPI and for sending
//  initialization sequence (IS SPI) only.
//  Note that data direction does not affect the
//  start byte direction (always msb to lsb) and
//  position (always first 8-bit of serial data)
//  for SPI16SB mode.
#define DC_COM_SPI_CONTROL_0_SPI_DATA_DIRECTION_SHIFT                   _MK_SHIFT_CONST(3)
#define DC_COM_SPI_CONTROL_0_SPI_DATA_DIRECTION_FIELD                   (_MK_MASK_CONST(0x1) << DC_COM_SPI_CONTROL_0_SPI_DATA_DIRECTION_SHIFT)
#define DC_COM_SPI_CONTROL_0_SPI_DATA_DIRECTION_RANGE                   3:3
#define DC_COM_SPI_CONTROL_0_SPI_DATA_DIRECTION_WOFFSET                 0x0
#define DC_COM_SPI_CONTROL_0_SPI_DATA_DIRECTION_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_SPI_CONTROL_0_SPI_DATA_DIRECTION_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_SPI_CONTROL_0_SPI_DATA_DIRECTION_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_SPI_CONTROL_0_SPI_DATA_DIRECTION_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_COM_SPI_CONTROL_0_SPI_DATA_DIRECTION_MSB2LSB                 _MK_ENUM_CONST(0)
#define DC_COM_SPI_CONTROL_0_SPI_DATA_DIRECTION_LSB2MSB                 _MK_ENUM_CONST(1)

// SPI Bits per Cycle  This is valid for Host and IS SPI only.
//  This parameter determines the number of
//  bits/cycle when SPI is used for host write
//  or for sending initialization sequence.
//  If SPI is used for sending pixel data to the
//  display then pixel clock divider determines
//  the SPI bits/cycle.
//  SPI8DC  is  8-bit SPI plus data/command bit
//  SPI16DC is 16-bit SPI plus data/command bit
//  SPI16SB is 16-bit SPI plus an 8-bit start
//     byte preceding the 16-bit data.
#define DC_COM_SPI_CONTROL_0_SPI_BITS_PER_CYCLE_SHIFT                   _MK_SHIFT_CONST(4)
#define DC_COM_SPI_CONTROL_0_SPI_BITS_PER_CYCLE_FIELD                   (_MK_MASK_CONST(0xf) << DC_COM_SPI_CONTROL_0_SPI_BITS_PER_CYCLE_SHIFT)
#define DC_COM_SPI_CONTROL_0_SPI_BITS_PER_CYCLE_RANGE                   7:4
#define DC_COM_SPI_CONTROL_0_SPI_BITS_PER_CYCLE_WOFFSET                 0x0
#define DC_COM_SPI_CONTROL_0_SPI_BITS_PER_CYCLE_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_SPI_CONTROL_0_SPI_BITS_PER_CYCLE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_SPI_CONTROL_0_SPI_BITS_PER_CYCLE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_SPI_CONTROL_0_SPI_BITS_PER_CYCLE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_COM_SPI_CONTROL_0_SPI_BITS_PER_CYCLE_SPI8                    _MK_ENUM_CONST(0)
#define DC_COM_SPI_CONTROL_0_SPI_BITS_PER_CYCLE_SPI8DC                  _MK_ENUM_CONST(1)
#define DC_COM_SPI_CONTROL_0_SPI_BITS_PER_CYCLE_SPI12                   _MK_ENUM_CONST(2)
#define DC_COM_SPI_CONTROL_0_SPI_BITS_PER_CYCLE_SPI16                   _MK_ENUM_CONST(3)
#define DC_COM_SPI_CONTROL_0_SPI_BITS_PER_CYCLE_SPI16DC                 _MK_ENUM_CONST(4)
#define DC_COM_SPI_CONTROL_0_SPI_BITS_PER_CYCLE_SPI16SB                 _MK_ENUM_CONST(5)
#define DC_COM_SPI_CONTROL_0_SPI_BITS_PER_CYCLE_SPI18                   _MK_ENUM_CONST(6)
#define DC_COM_SPI_CONTROL_0_SPI_BITS_PER_CYCLE_SPI24                   _MK_ENUM_CONST(7)

// SPI Clock Divider (1 to 32)
//  This clock divider is used only if SPI is
//  enabled for host writes (Host SPI) or for
//  sending initialization sequence (IS SPI).
//  Programmed value is 1 less than the desired
//  (actual) clock divider value.
//  This parameter is forced to 0 (clock divide
//  by 1) for LCD SPI.
#define DC_COM_SPI_CONTROL_0_SPI_CLK_DIVIDER_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_COM_SPI_CONTROL_0_SPI_CLK_DIVIDER_FIELD                      (_MK_MASK_CONST(0x1f) << DC_COM_SPI_CONTROL_0_SPI_CLK_DIVIDER_SHIFT)
#define DC_COM_SPI_CONTROL_0_SPI_CLK_DIVIDER_RANGE                      20:16
#define DC_COM_SPI_CONTROL_0_SPI_CLK_DIVIDER_WOFFSET                    0x0
#define DC_COM_SPI_CONTROL_0_SPI_CLK_DIVIDER_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_SPI_CONTROL_0_SPI_CLK_DIVIDER_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_SPI_CONTROL_0_SPI_CLK_DIVIDER_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_SPI_CONTROL_0_SPI_CLK_DIVIDER_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// SPI Status Enable
//   00= SPI status disable
//   01= SPI status enabled for host SPI only
//   10= SPI status enabled for IS and LCD SPI
//       only
//   11= SPI status enabled for all SPI cycles
//  SPI status is reflected in SPI_BUSY bit and
//  can generate interrupt.
//  SPI status indicates when SPI module is busy
//  (SPI write cycles are in progress) so its
//  falling edge should be used to generate
//  interrupt.
//  SPI status can also be output on LSPI pin.
//  When Host SPI is triggered, the SPI busy is
//  asserted within three display clock cycles
//  after the end of the host write cycle.
//  SPI status is disabled when SPI_ENABLE bit
//  is disabled.
#define DC_COM_SPI_CONTROL_0_SPI_STATUS_ENABLE_SHIFT                    _MK_SHIFT_CONST(24)
#define DC_COM_SPI_CONTROL_0_SPI_STATUS_ENABLE_FIELD                    (_MK_MASK_CONST(0x3) << DC_COM_SPI_CONTROL_0_SPI_STATUS_ENABLE_SHIFT)
#define DC_COM_SPI_CONTROL_0_SPI_STATUS_ENABLE_RANGE                    25:24
#define DC_COM_SPI_CONTROL_0_SPI_STATUS_ENABLE_WOFFSET                  0x0
#define DC_COM_SPI_CONTROL_0_SPI_STATUS_ENABLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_SPI_CONTROL_0_SPI_STATUS_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_SPI_CONTROL_0_SPI_STATUS_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_SPI_CONTROL_0_SPI_STATUS_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// SPI Start Bytes are used only for SPI16SB mode (start byte plus 16-bit data)
//  Note that data direction does not affect the start byte direction (always msb to lsb) and
//  position (always first 8-bit of serial data).

// Register DC_COM_SPI_START_BYTE_0  // SPI Start Byte
#define DC_COM_SPI_START_BYTE_0                 _MK_ADDR_CONST(0x321)
#define DC_COM_SPI_START_BYTE_0_SECURE                  0x0
#define DC_COM_SPI_START_BYTE_0_WORD_COUNT                      0x1
#define DC_COM_SPI_START_BYTE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define DC_COM_SPI_START_BYTE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_SPI_START_BYTE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define DC_COM_SPI_START_BYTE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define DC_COM_SPI_START_BYTE_0_READ_MASK                       _MK_MASK_CONST(0xffff)
#define DC_COM_SPI_START_BYTE_0_WRITE_MASK                      _MK_MASK_CONST(0xffff)
// SPI Data Start Byte
//  This is valid for Host, IS, and LCD SPI.
#define DC_COM_SPI_START_BYTE_0_SPI_DATA_START_BYTE_SHIFT                       _MK_SHIFT_CONST(0)
#define DC_COM_SPI_START_BYTE_0_SPI_DATA_START_BYTE_FIELD                       (_MK_MASK_CONST(0xff) << DC_COM_SPI_START_BYTE_0_SPI_DATA_START_BYTE_SHIFT)
#define DC_COM_SPI_START_BYTE_0_SPI_DATA_START_BYTE_RANGE                       7:0
#define DC_COM_SPI_START_BYTE_0_SPI_DATA_START_BYTE_WOFFSET                     0x0
#define DC_COM_SPI_START_BYTE_0_SPI_DATA_START_BYTE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_SPI_START_BYTE_0_SPI_DATA_START_BYTE_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_COM_SPI_START_BYTE_0_SPI_DATA_START_BYTE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_SPI_START_BYTE_0_SPI_DATA_START_BYTE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// SPI Command Start Byte
//  This is valid for Host, IS, and LCD SPI.
#define DC_COM_SPI_START_BYTE_0_SPI_COMMAND_START_BYTE_SHIFT                    _MK_SHIFT_CONST(8)
#define DC_COM_SPI_START_BYTE_0_SPI_COMMAND_START_BYTE_FIELD                    (_MK_MASK_CONST(0xff) << DC_COM_SPI_START_BYTE_0_SPI_COMMAND_START_BYTE_SHIFT)
#define DC_COM_SPI_START_BYTE_0_SPI_COMMAND_START_BYTE_RANGE                    15:8
#define DC_COM_SPI_START_BYTE_0_SPI_COMMAND_START_BYTE_WOFFSET                  0x0
#define DC_COM_SPI_START_BYTE_0_SPI_COMMAND_START_BYTE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_SPI_START_BYTE_0_SPI_COMMAND_START_BYTE_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_SPI_START_BYTE_0_SPI_COMMAND_START_BYTE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_SPI_START_BYTE_0_SPI_COMMAND_START_BYTE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// These registers are used to send write data for Host SPI write cycles (HSPI_ENABLE = 1).
//
// For the tables below, these abbreviations of the registers are used: 
//  HSPIWDA = HSPI_WRITE_DATA_A
//  HSPIWDB = HSPI_WRITE_DATA_B
//  HSPIWDC = HSPI_WRITE_DATA_C
//  HSPIWDD = HSPI_WRITE_DATA_D
//  HSPIMCS = HSPI_MAIN_CS
//  HSPISCS = HSPI_SUB_CS
//  HSPIDC  = HSPI_DC
//
// For 8-bit SPI, up to 4 write cycles can be performed (SPI_BITS_PER_CYCLE equals SPI8)
//  
//   Write cycle        0               1               2               3
//   ----------------------------------------------------------------------------
//   data           HSPIWDA[7-0]    HSPIWDA[15-8]   HSPIWDB[7-0]    HSPIWDB[15-8]
//   Main SCS_      HSPIMCS[0]      HSPIMCS[1]      HSPIMCS[2]      HSPIMCS[3]
//   Sub SCS_       HSPISCS[0]      HSPISCS[1]      HSPISCS[2]      HSPICSC[3]
//   SDC             HSPIDC[0]       HSPIDC[1]       HSPIDC[2]       HSPIDC[3]
//
// For SPI8DC mode, a 9-bit SPI,  the first data bit sent comes from HSPI_DC 
//  register and the other eight bits come as shown in 
//  the table below. Up to 4 write cycles can be performed.
//   Write cycle             0                         1           
//   ----------------------------------------------------------------------------
//   data           HSPIDC[0],HSPIWDA[7-0]    HSPIDC[1],HSPIWDA[15-8] 
//   Main SCS_          HSPIMCS[0]                HSPIMCS[1]  
//   Sub SCS_           HSPISCS[0]                HSPISCS[1]  
//   SDC                HSPIDC[0]                 HSPIDC[1]   
//  
//   Write cycle             2                         3             
//   ----------------------------------------------------------------------------
//   data           HSPIDC[2],HSPIWDB[7-0]    HSPIDC[3],HSPIWDB[15-8]
//   Main SCS_          HSPIMCS[2]                HSPIMCS[3]
//   Sub SCS_           HSPISCS[2]                HSPICSC[3]
//   SDC                 HSPIDC[2]                 HSPIDC[3]
//
// For 12-bit SPI, up to 4 write cycles can be performed (SPI12)
//   Write cycle        0               1               2               3
//   ----------------------------------------------------------------------------
//   data           HSPIWDA[11-0]   HSPIWDB[11-0]   HSPIWDC[11-0]   HSPIWDD[11-0]
//   Main SCS_      HSPIMCS[0]      HSPIMCS[1]      HSPIMCS[2]      HSPIMCS[3]
//   Sub SCS_       HSPISCS[0]      HSPISCS[1]      HSPISCS[2]      HSPISCS[3]
//   SDC             HSPIDC[0]       HSPIDC[1]       HSPIDC[2]       HSPIDC[3] 
//
// For 16-bit SPI, up to 4 write cycles can be performed (SPI16, SPI16SB)
// Note for SPI16SB mode, the first write cycle will be the start byte followed
//  by write cycle 0, as shown in the table below.
//   Write cycle        0               1               2               3
//   ----------------------------------------------------------------------------
//   data           HSPIWDA[15-0]   HSPIWDB[15-0]   HSPIWDC[15-0]   HSPIWDD[15-0]
//   Main SCS_      HSPIMCS[0]      HSPIMCS[1]      HSPIMCS[2]      HSPIMCS[3]
//   Sub SCS_       HSPISCS[0]      HSPISCS[1]      HSPISCS[2]      HSPISCS[3]
//   SDC             HSPIDC[0]       HSPIDC[1]       HSPIDC[2]       HSPIDC[3] 
//
// For SPI16DC mode, a 17-bit SPI,  the first data bit sent comes from HSPI_DC 
//  register and the other sixteen bits come as shown in the table below. Up to 
//  4 write cycles can be performed.
//   Write cycle             0                         1           
//   ----------------------------------------------------------------------------
//   data           HSPIDC[0],HSPIWDA[15-0]   HSPIDC[1],HSPIWDB[15-0] 
//   Main SCS_          HSPIMCS[0]                HSPIMCS[1]    
//   Sub SCS_           HSPISCS[0]                HSPISCS[1]    
//   SDC                 HSPIDC[0]                 HSPIDC[1]
//
//   Write cycle            2                          3
//   ----------------------------------------------------------------------------
//   data           HSPIDC[2],HSPIWDC[15-0]   HSPIDC[3],HSPIWDD[15-0]
//   Main SCS_          HSPIMCS[2]               HSPIMCS[3]
//   Sub SCS_           HSPISCS[2]               HSPISCS[3]
//   SDC                 HSPIDC[2]                HSPIDC[3] 
//  
//
//
// For 18-bit SPI, up to 2 write cycles can be performed (SPI18)
//   Write cycle                0                               1
//   ----------------------------------------------------------------------------
//   data           HSPIWDB[1-0],HSPIWDA[15-0]      HSPIWDC[1-0],HSPIWDD[15-0]
//   Main SCS_              HSPIMCS[0]                      HSPIMCS[1]
//   Sub SCS_               HSPISCS[0]                      HSPISCS[1]
//   SDC                     HSPIDC[0]                       HSPIDC[1]
//
// For 24-bit SPI, up to 2 write cycles can be performed (SPI24)
//   Write cycle                0                               1
//   ----------------------------------------------------------------------------
//   data           HSPIWDB[7-0],HSPIWDA[15-0]      HSPIWDC[7-0],HSPIWDD[15-0]
//   Main SCS_              HSPIMCS[0]                      HSPIMCS[1]
//   Sub SCS_               HSPISCS[0]                      HSPISCS[1]
//   SDC                     HSPIDC[0]                       HSPIDC[1]
//

// Register DC_COM_HSPI_WRITE_DATA_AB_0  // Host SPI Write Data A & B
#define DC_COM_HSPI_WRITE_DATA_AB_0                     _MK_ADDR_CONST(0x322)
#define DC_COM_HSPI_WRITE_DATA_AB_0_SECURE                      0x0
#define DC_COM_HSPI_WRITE_DATA_AB_0_WORD_COUNT                  0x1
#define DC_COM_HSPI_WRITE_DATA_AB_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_WRITE_DATA_AB_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_WRITE_DATA_AB_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_WRITE_DATA_AB_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_WRITE_DATA_AB_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define DC_COM_HSPI_WRITE_DATA_AB_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Host SPI Write Data A bits 15-0
#define DC_COM_HSPI_WRITE_DATA_AB_0_HSPI_WRITE_DATA_A_SHIFT                     _MK_SHIFT_CONST(0)
#define DC_COM_HSPI_WRITE_DATA_AB_0_HSPI_WRITE_DATA_A_FIELD                     (_MK_MASK_CONST(0xffff) << DC_COM_HSPI_WRITE_DATA_AB_0_HSPI_WRITE_DATA_A_SHIFT)
#define DC_COM_HSPI_WRITE_DATA_AB_0_HSPI_WRITE_DATA_A_RANGE                     15:0
#define DC_COM_HSPI_WRITE_DATA_AB_0_HSPI_WRITE_DATA_A_WOFFSET                   0x0
#define DC_COM_HSPI_WRITE_DATA_AB_0_HSPI_WRITE_DATA_A_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_WRITE_DATA_AB_0_HSPI_WRITE_DATA_A_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_WRITE_DATA_AB_0_HSPI_WRITE_DATA_A_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_WRITE_DATA_AB_0_HSPI_WRITE_DATA_A_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// Host SPI Write Data B bits 15-0
#define DC_COM_HSPI_WRITE_DATA_AB_0_HSPI_WRITE_DATA_B_SHIFT                     _MK_SHIFT_CONST(16)
#define DC_COM_HSPI_WRITE_DATA_AB_0_HSPI_WRITE_DATA_B_FIELD                     (_MK_MASK_CONST(0xffff) << DC_COM_HSPI_WRITE_DATA_AB_0_HSPI_WRITE_DATA_B_SHIFT)
#define DC_COM_HSPI_WRITE_DATA_AB_0_HSPI_WRITE_DATA_B_RANGE                     31:16
#define DC_COM_HSPI_WRITE_DATA_AB_0_HSPI_WRITE_DATA_B_WOFFSET                   0x0
#define DC_COM_HSPI_WRITE_DATA_AB_0_HSPI_WRITE_DATA_B_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_WRITE_DATA_AB_0_HSPI_WRITE_DATA_B_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_WRITE_DATA_AB_0_HSPI_WRITE_DATA_B_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_WRITE_DATA_AB_0_HSPI_WRITE_DATA_B_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register DC_COM_HSPI_WRITE_DATA_CD_0  // Host SPI Write Data C & D
#define DC_COM_HSPI_WRITE_DATA_CD_0                     _MK_ADDR_CONST(0x323)
#define DC_COM_HSPI_WRITE_DATA_CD_0_SECURE                      0x0
#define DC_COM_HSPI_WRITE_DATA_CD_0_WORD_COUNT                  0x1
#define DC_COM_HSPI_WRITE_DATA_CD_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_WRITE_DATA_CD_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_WRITE_DATA_CD_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_WRITE_DATA_CD_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_WRITE_DATA_CD_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define DC_COM_HSPI_WRITE_DATA_CD_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Host SPI Write Data C bits 15-0
#define DC_COM_HSPI_WRITE_DATA_CD_0_HSPI_WRITE_DATA_C_SHIFT                     _MK_SHIFT_CONST(0)
#define DC_COM_HSPI_WRITE_DATA_CD_0_HSPI_WRITE_DATA_C_FIELD                     (_MK_MASK_CONST(0xffff) << DC_COM_HSPI_WRITE_DATA_CD_0_HSPI_WRITE_DATA_C_SHIFT)
#define DC_COM_HSPI_WRITE_DATA_CD_0_HSPI_WRITE_DATA_C_RANGE                     15:0
#define DC_COM_HSPI_WRITE_DATA_CD_0_HSPI_WRITE_DATA_C_WOFFSET                   0x0
#define DC_COM_HSPI_WRITE_DATA_CD_0_HSPI_WRITE_DATA_C_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_WRITE_DATA_CD_0_HSPI_WRITE_DATA_C_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_WRITE_DATA_CD_0_HSPI_WRITE_DATA_C_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_WRITE_DATA_CD_0_HSPI_WRITE_DATA_C_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// Host SPI Write Data D bits 15-0
#define DC_COM_HSPI_WRITE_DATA_CD_0_HSPI_WRITE_DATA_D_SHIFT                     _MK_SHIFT_CONST(16)
#define DC_COM_HSPI_WRITE_DATA_CD_0_HSPI_WRITE_DATA_D_FIELD                     (_MK_MASK_CONST(0xffff) << DC_COM_HSPI_WRITE_DATA_CD_0_HSPI_WRITE_DATA_D_SHIFT)
#define DC_COM_HSPI_WRITE_DATA_CD_0_HSPI_WRITE_DATA_D_RANGE                     31:16
#define DC_COM_HSPI_WRITE_DATA_CD_0_HSPI_WRITE_DATA_D_WOFFSET                   0x0
#define DC_COM_HSPI_WRITE_DATA_CD_0_HSPI_WRITE_DATA_D_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_WRITE_DATA_CD_0_HSPI_WRITE_DATA_D_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_WRITE_DATA_CD_0_HSPI_WRITE_DATA_D_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_WRITE_DATA_CD_0_HSPI_WRITE_DATA_D_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// A write to this register will trigger the Host SPI write cycle if SPI_ENABLE and HSPI_ENABLE
//  are both enabled. Writing to this register with HSPI_RAISE enabled will cause the raise
//  vector to be returned after all the host SPI cycles are completed. Up to four host SPI
//  cycles can be executed with a single trigger.
//  This register should not be written if previous host SPI write cycle is in progress.
//  HSPI_MAIN_CS and HSPI_SUB_CS controls the main and sub display chip selects and therefore
//  also determine how many SPI write cycles to main and sub displays and the write data
//  position.
//  HSPI_MAIN_CS or HSPI_SUB_CS should be programmed to have at least one valid cycle when programming
//  HSPI_CS_DC register.

// Register DC_COM_HSPI_CS_DC_0  // Host SPI Chip Select and Data/Command_
#define DC_COM_HSPI_CS_DC_0                     _MK_ADDR_CONST(0x324)
#define DC_COM_HSPI_CS_DC_0_SECURE                      0x0
#define DC_COM_HSPI_CS_DC_0_WORD_COUNT                  0x1
#define DC_COM_HSPI_CS_DC_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_CS_DC_0_RESET_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_HSPI_CS_DC_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_CS_DC_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_CS_DC_0_READ_MASK                   _MK_MASK_CONST(0x1f0ffff1)
#define DC_COM_HSPI_CS_DC_0_WRITE_MASK                  _MK_MASK_CONST(0x1f0ffff1)
// Host SPI Raise   0= disable
//   1= enable - raise vector will be returned
//      at the end of the host SPI write cycles
#define DC_COM_HSPI_CS_DC_0_HSPI_RAISE_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_COM_HSPI_CS_DC_0_HSPI_RAISE_FIELD                    (_MK_MASK_CONST(0x1) << DC_COM_HSPI_CS_DC_0_HSPI_RAISE_SHIFT)
#define DC_COM_HSPI_CS_DC_0_HSPI_RAISE_RANGE                    0:0
#define DC_COM_HSPI_CS_DC_0_HSPI_RAISE_WOFFSET                  0x0
#define DC_COM_HSPI_CS_DC_0_HSPI_RAISE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_CS_DC_0_HSPI_RAISE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_COM_HSPI_CS_DC_0_HSPI_RAISE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_CS_DC_0_HSPI_RAISE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_CS_DC_0_HSPI_RAISE_DISABLE                  _MK_ENUM_CONST(0)
#define DC_COM_HSPI_CS_DC_0_HSPI_RAISE_ENABLE                   _MK_ENUM_CONST(1)

// Host SPI Data/Command_ (SDC)
//   0= Command cycle (SDC=0)
//   1= Data cycle (SDC=1)
//  This is valid for Host SPI only.
//  Each bit of this parameter corresponds to
//  the four possible host SPI cycles.
#define DC_COM_HSPI_CS_DC_0_HSPI_DC_SHIFT                       _MK_SHIFT_CONST(4)
#define DC_COM_HSPI_CS_DC_0_HSPI_DC_FIELD                       (_MK_MASK_CONST(0xf) << DC_COM_HSPI_CS_DC_0_HSPI_DC_SHIFT)
#define DC_COM_HSPI_CS_DC_0_HSPI_DC_RANGE                       7:4
#define DC_COM_HSPI_CS_DC_0_HSPI_DC_WOFFSET                     0x0
#define DC_COM_HSPI_CS_DC_0_HSPI_DC_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_CS_DC_0_HSPI_DC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_CS_DC_0_HSPI_DC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_CS_DC_0_HSPI_DC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Host SPI Main display Chip Select (Main SCS_)
//   0= Main display not selected (Main SCS_=1)
//   1= Main display selected (Main SCS_=0)
//  This is valid for Host SPI only.
//  Each bit of this parameter corresponds to
//  the four possible host SPI cycles.
#define DC_COM_HSPI_CS_DC_0_HSPI_MAIN_CS_SHIFT                  _MK_SHIFT_CONST(8)
#define DC_COM_HSPI_CS_DC_0_HSPI_MAIN_CS_FIELD                  (_MK_MASK_CONST(0xf) << DC_COM_HSPI_CS_DC_0_HSPI_MAIN_CS_SHIFT)
#define DC_COM_HSPI_CS_DC_0_HSPI_MAIN_CS_RANGE                  11:8
#define DC_COM_HSPI_CS_DC_0_HSPI_MAIN_CS_WOFFSET                        0x0
#define DC_COM_HSPI_CS_DC_0_HSPI_MAIN_CS_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_CS_DC_0_HSPI_MAIN_CS_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_CS_DC_0_HSPI_MAIN_CS_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_CS_DC_0_HSPI_MAIN_CS_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Host SPI Sub display Chip Select (Sub SCS_)
//   0= Sub display not selected (Sub SCS_=1)
//   1= Sub display selected (Sub SCS_=0)
//  This is valid for Host SPI only.
//  Each bit of this parameter corresponds to
//  the four possible host SPI cycles.
#define DC_COM_HSPI_CS_DC_0_HSPI_SUB_CS_SHIFT                   _MK_SHIFT_CONST(12)
#define DC_COM_HSPI_CS_DC_0_HSPI_SUB_CS_FIELD                   (_MK_MASK_CONST(0xf) << DC_COM_HSPI_CS_DC_0_HSPI_SUB_CS_SHIFT)
#define DC_COM_HSPI_CS_DC_0_HSPI_SUB_CS_RANGE                   15:12
#define DC_COM_HSPI_CS_DC_0_HSPI_SUB_CS_WOFFSET                 0x0
#define DC_COM_HSPI_CS_DC_0_HSPI_SUB_CS_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_CS_DC_0_HSPI_SUB_CS_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_CS_DC_0_HSPI_SUB_CS_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_CS_DC_0_HSPI_SUB_CS_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Win G Channel ID
#define DC_COM_HSPI_CS_DC_0_HSPI_RAISE_CHANNEL_ID_SHIFT                 _MK_SHIFT_CONST(16)
#define DC_COM_HSPI_CS_DC_0_HSPI_RAISE_CHANNEL_ID_FIELD                 (_MK_MASK_CONST(0xf) << DC_COM_HSPI_CS_DC_0_HSPI_RAISE_CHANNEL_ID_SHIFT)
#define DC_COM_HSPI_CS_DC_0_HSPI_RAISE_CHANNEL_ID_RANGE                 19:16
#define DC_COM_HSPI_CS_DC_0_HSPI_RAISE_CHANNEL_ID_WOFFSET                       0x0
#define DC_COM_HSPI_CS_DC_0_HSPI_RAISE_CHANNEL_ID_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_CS_DC_0_HSPI_RAISE_CHANNEL_ID_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_CS_DC_0_HSPI_RAISE_CHANNEL_ID_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_CS_DC_0_HSPI_RAISE_CHANNEL_ID_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Host SPI Raise Vector
//  This raise vector is returned after all the
//  triggered host SPI cycles are executed.
#define DC_COM_HSPI_CS_DC_0_HSPI_RAISE_VECTOR_SHIFT                     _MK_SHIFT_CONST(24)
#define DC_COM_HSPI_CS_DC_0_HSPI_RAISE_VECTOR_FIELD                     (_MK_MASK_CONST(0x1f) << DC_COM_HSPI_CS_DC_0_HSPI_RAISE_VECTOR_SHIFT)
#define DC_COM_HSPI_CS_DC_0_HSPI_RAISE_VECTOR_RANGE                     28:24
#define DC_COM_HSPI_CS_DC_0_HSPI_RAISE_VECTOR_WOFFSET                   0x0
#define DC_COM_HSPI_CS_DC_0_HSPI_RAISE_VECTOR_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_CS_DC_0_HSPI_RAISE_VECTOR_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_CS_DC_0_HSPI_RAISE_VECTOR_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_COM_HSPI_CS_DC_0_HSPI_RAISE_VECTOR_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

//
// Class: Software Scratch Registers
//

// Register DC_COM_SCRATCH_REGISTER_A_0  // Scratch Register A
#define DC_COM_SCRATCH_REGISTER_A_0                     _MK_ADDR_CONST(0x325)
#define DC_COM_SCRATCH_REGISTER_A_0_SECURE                      0x0
#define DC_COM_SCRATCH_REGISTER_A_0_WORD_COUNT                  0x1
#define DC_COM_SCRATCH_REGISTER_A_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define DC_COM_SCRATCH_REGISTER_A_0_RESET_MASK                  _MK_MASK_CONST(0xffffffff)
#define DC_COM_SCRATCH_REGISTER_A_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define DC_COM_SCRATCH_REGISTER_A_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_SCRATCH_REGISTER_A_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define DC_COM_SCRATCH_REGISTER_A_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Scratch Register A
#define DC_COM_SCRATCH_REGISTER_A_0_SCRATCH_REGISTER_A_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_COM_SCRATCH_REGISTER_A_0_SCRATCH_REGISTER_A_FIELD                    (_MK_MASK_CONST(0xffffffff) << DC_COM_SCRATCH_REGISTER_A_0_SCRATCH_REGISTER_A_SHIFT)
#define DC_COM_SCRATCH_REGISTER_A_0_SCRATCH_REGISTER_A_RANGE                    31:0
#define DC_COM_SCRATCH_REGISTER_A_0_SCRATCH_REGISTER_A_WOFFSET                  0x0
#define DC_COM_SCRATCH_REGISTER_A_0_SCRATCH_REGISTER_A_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_SCRATCH_REGISTER_A_0_SCRATCH_REGISTER_A_DEFAULT_MASK                     _MK_MASK_CONST(0xffffffff)
#define DC_COM_SCRATCH_REGISTER_A_0_SCRATCH_REGISTER_A_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_SCRATCH_REGISTER_A_0_SCRATCH_REGISTER_A_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register DC_COM_SCRATCH_REGISTER_B_0  // Scratch Register B
#define DC_COM_SCRATCH_REGISTER_B_0                     _MK_ADDR_CONST(0x326)
#define DC_COM_SCRATCH_REGISTER_B_0_SECURE                      0x0
#define DC_COM_SCRATCH_REGISTER_B_0_WORD_COUNT                  0x1
#define DC_COM_SCRATCH_REGISTER_B_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define DC_COM_SCRATCH_REGISTER_B_0_RESET_MASK                  _MK_MASK_CONST(0xffffffff)
#define DC_COM_SCRATCH_REGISTER_B_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define DC_COM_SCRATCH_REGISTER_B_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_COM_SCRATCH_REGISTER_B_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define DC_COM_SCRATCH_REGISTER_B_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Scratch Register B
#define DC_COM_SCRATCH_REGISTER_B_0_SCRATCH_REGISTER_B_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_COM_SCRATCH_REGISTER_B_0_SCRATCH_REGISTER_B_FIELD                    (_MK_MASK_CONST(0xffffffff) << DC_COM_SCRATCH_REGISTER_B_0_SCRATCH_REGISTER_B_SHIFT)
#define DC_COM_SCRATCH_REGISTER_B_0_SCRATCH_REGISTER_B_RANGE                    31:0
#define DC_COM_SCRATCH_REGISTER_B_0_SCRATCH_REGISTER_B_WOFFSET                  0x0
#define DC_COM_SCRATCH_REGISTER_B_0_SCRATCH_REGISTER_B_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_COM_SCRATCH_REGISTER_B_0_SCRATCH_REGISTER_B_DEFAULT_MASK                     _MK_MASK_CONST(0xffffffff)
#define DC_COM_SCRATCH_REGISTER_B_0_SCRATCH_REGISTER_B_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_SCRATCH_REGISTER_B_0_SCRATCH_REGISTER_B_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register DC_COM_GPIO_CTRL_0  // Display GPIO control, including debounce control
#define DC_COM_GPIO_CTRL_0                      _MK_ADDR_CONST(0x327)
#define DC_COM_GPIO_CTRL_0_SECURE                       0x0
#define DC_COM_GPIO_CTRL_0_WORD_COUNT                   0x1
#define DC_COM_GPIO_CTRL_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define DC_COM_GPIO_CTRL_0_RESET_MASK                   _MK_MASK_CONST(0x7)
#define DC_COM_GPIO_CTRL_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_COM_GPIO_CTRL_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_COM_GPIO_CTRL_0_READ_MASK                    _MK_MASK_CONST(0x7)
#define DC_COM_GPIO_CTRL_0_WRITE_MASK                   _MK_MASK_CONST(0x7)
// maps to display pin lpw0   0= disable, 1= enable
#define DC_COM_GPIO_CTRL_0_GPIO_0_DEBOUNCE_ENABLE_SHIFT                 _MK_SHIFT_CONST(0)
#define DC_COM_GPIO_CTRL_0_GPIO_0_DEBOUNCE_ENABLE_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_GPIO_CTRL_0_GPIO_0_DEBOUNCE_ENABLE_SHIFT)
#define DC_COM_GPIO_CTRL_0_GPIO_0_DEBOUNCE_ENABLE_RANGE                 0:0
#define DC_COM_GPIO_CTRL_0_GPIO_0_DEBOUNCE_ENABLE_WOFFSET                       0x0
#define DC_COM_GPIO_CTRL_0_GPIO_0_DEBOUNCE_ENABLE_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_GPIO_CTRL_0_GPIO_0_DEBOUNCE_ENABLE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_GPIO_CTRL_0_GPIO_0_DEBOUNCE_ENABLE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_GPIO_CTRL_0_GPIO_0_DEBOUNCE_ENABLE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_GPIO_CTRL_0_GPIO_0_DEBOUNCE_ENABLE_DISABLE                       _MK_ENUM_CONST(0)
#define DC_COM_GPIO_CTRL_0_GPIO_0_DEBOUNCE_ENABLE_ENABLE                        _MK_ENUM_CONST(1)

// maps to display pin lpw1   0= disable, 1= enable
#define DC_COM_GPIO_CTRL_0_GPIO_1_DEBOUNCE_ENABLE_SHIFT                 _MK_SHIFT_CONST(1)
#define DC_COM_GPIO_CTRL_0_GPIO_1_DEBOUNCE_ENABLE_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_GPIO_CTRL_0_GPIO_1_DEBOUNCE_ENABLE_SHIFT)
#define DC_COM_GPIO_CTRL_0_GPIO_1_DEBOUNCE_ENABLE_RANGE                 1:1
#define DC_COM_GPIO_CTRL_0_GPIO_1_DEBOUNCE_ENABLE_WOFFSET                       0x0
#define DC_COM_GPIO_CTRL_0_GPIO_1_DEBOUNCE_ENABLE_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_GPIO_CTRL_0_GPIO_1_DEBOUNCE_ENABLE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_GPIO_CTRL_0_GPIO_1_DEBOUNCE_ENABLE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_GPIO_CTRL_0_GPIO_1_DEBOUNCE_ENABLE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_GPIO_CTRL_0_GPIO_1_DEBOUNCE_ENABLE_DISABLE                       _MK_ENUM_CONST(0)
#define DC_COM_GPIO_CTRL_0_GPIO_1_DEBOUNCE_ENABLE_ENABLE                        _MK_ENUM_CONST(1)

// maps to display pin lpw2   0= disable, 1= enable
#define DC_COM_GPIO_CTRL_0_GPIO_2_DEBOUNCE_ENABLE_SHIFT                 _MK_SHIFT_CONST(2)
#define DC_COM_GPIO_CTRL_0_GPIO_2_DEBOUNCE_ENABLE_FIELD                 (_MK_MASK_CONST(0x1) << DC_COM_GPIO_CTRL_0_GPIO_2_DEBOUNCE_ENABLE_SHIFT)
#define DC_COM_GPIO_CTRL_0_GPIO_2_DEBOUNCE_ENABLE_RANGE                 2:2
#define DC_COM_GPIO_CTRL_0_GPIO_2_DEBOUNCE_ENABLE_WOFFSET                       0x0
#define DC_COM_GPIO_CTRL_0_GPIO_2_DEBOUNCE_ENABLE_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_COM_GPIO_CTRL_0_GPIO_2_DEBOUNCE_ENABLE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_COM_GPIO_CTRL_0_GPIO_2_DEBOUNCE_ENABLE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_COM_GPIO_CTRL_0_GPIO_2_DEBOUNCE_ENABLE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_COM_GPIO_CTRL_0_GPIO_2_DEBOUNCE_ENABLE_DISABLE                       _MK_ENUM_CONST(0)
#define DC_COM_GPIO_CTRL_0_GPIO_2_DEBOUNCE_ENABLE_ENABLE                        _MK_ENUM_CONST(1)

// MARKER
// The MARKER value sets the interval at which the debounce finite state machines
// associated with each GPIO input pin evaluate input transitions.
// An input transition must be stable for at least 4 consecutive MARKER ticks before it is propagated through the debounce circuit.
// MARKER is in display clock tick units. The actual 'gravity delay' of a debounce FSM is 4 * Tmarker, where Tmarker = MARKER * (APB clock duration).
// For a 100 MHz display clock, a MARKER setting of 10,000,000 results in a gravity delay of 4x100 mS.

// Register DC_COM_GPIO_DEBOUNCE_COUNTER_0  // Display GPIO debounce counter, provides mark_en to debounce logic
#define DC_COM_GPIO_DEBOUNCE_COUNTER_0                  _MK_ADDR_CONST(0x328)
#define DC_COM_GPIO_DEBOUNCE_COUNTER_0_SECURE                   0x0
#define DC_COM_GPIO_DEBOUNCE_COUNTER_0_WORD_COUNT                       0x1
#define DC_COM_GPIO_DEBOUNCE_COUNTER_0_RESET_VAL                        _MK_MASK_CONST(0x400)
#define DC_COM_GPIO_DEBOUNCE_COUNTER_0_RESET_MASK                       _MK_MASK_CONST(0xffffffff)
#define DC_COM_GPIO_DEBOUNCE_COUNTER_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define DC_COM_GPIO_DEBOUNCE_COUNTER_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_COM_GPIO_DEBOUNCE_COUNTER_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define DC_COM_GPIO_DEBOUNCE_COUNTER_0_WRITE_MASK                       _MK_MASK_CONST(0xffffffff)
#define DC_COM_GPIO_DEBOUNCE_COUNTER_0_DEBOUNCE_COUNTER_SHIFT                   _MK_SHIFT_CONST(0)
#define DC_COM_GPIO_DEBOUNCE_COUNTER_0_DEBOUNCE_COUNTER_FIELD                   (_MK_MASK_CONST(0xffffffff) << DC_COM_GPIO_DEBOUNCE_COUNTER_0_DEBOUNCE_COUNTER_SHIFT)
#define DC_COM_GPIO_DEBOUNCE_COUNTER_0_DEBOUNCE_COUNTER_RANGE                   31:0
#define DC_COM_GPIO_DEBOUNCE_COUNTER_0_DEBOUNCE_COUNTER_WOFFSET                 0x0
#define DC_COM_GPIO_DEBOUNCE_COUNTER_0_DEBOUNCE_COUNTER_DEFAULT                 _MK_MASK_CONST(0x400)
#define DC_COM_GPIO_DEBOUNCE_COUNTER_0_DEBOUNCE_COUNTER_DEFAULT_MASK                    _MK_MASK_CONST(0xffffffff)
#define DC_COM_GPIO_DEBOUNCE_COUNTER_0_DEBOUNCE_COUNTER_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_GPIO_DEBOUNCE_COUNTER_0_DEBOUNCE_COUNTER_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// CRC Checksum latched
// This register is a latched version of CRC_CHECKSUM. Latching happends at frame end.
// Note: CRC_INPUT_DATA needs to be set to ACTIVE_DATA if this register is used.
//  In full frame mode, crc is frozen two cycles after frame end due to pipelining,
//  so only in active area mode, crc is consistent and independent of display control
//  mode, and can be checked continuously frame by frame.

// Register DC_COM_CRC_CHECKSUM_LATCHED_0  // CRC Checksum latched
#define DC_COM_CRC_CHECKSUM_LATCHED_0                   _MK_ADDR_CONST(0x329)
#define DC_COM_CRC_CHECKSUM_LATCHED_0_SECURE                    0x0
#define DC_COM_CRC_CHECKSUM_LATCHED_0_WORD_COUNT                        0x1
#define DC_COM_CRC_CHECKSUM_LATCHED_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_COM_CRC_CHECKSUM_LATCHED_0_RESET_MASK                        _MK_MASK_CONST(0xffffffff)
#define DC_COM_CRC_CHECKSUM_LATCHED_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_COM_CRC_CHECKSUM_LATCHED_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_COM_CRC_CHECKSUM_LATCHED_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define DC_COM_CRC_CHECKSUM_LATCHED_0_WRITE_MASK                        _MK_MASK_CONST(0x0)
// CRC Checksum latched
#define DC_COM_CRC_CHECKSUM_LATCHED_0_CRC_CHECKSUM_LATCHED_SHIFT                        _MK_SHIFT_CONST(0)
#define DC_COM_CRC_CHECKSUM_LATCHED_0_CRC_CHECKSUM_LATCHED_FIELD                        (_MK_MASK_CONST(0xffffffff) << DC_COM_CRC_CHECKSUM_LATCHED_0_CRC_CHECKSUM_LATCHED_SHIFT)
#define DC_COM_CRC_CHECKSUM_LATCHED_0_CRC_CHECKSUM_LATCHED_RANGE                        31:0
#define DC_COM_CRC_CHECKSUM_LATCHED_0_CRC_CHECKSUM_LATCHED_WOFFSET                      0x0
#define DC_COM_CRC_CHECKSUM_LATCHED_0_CRC_CHECKSUM_LATCHED_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_COM_CRC_CHECKSUM_LATCHED_0_CRC_CHECKSUM_LATCHED_DEFAULT_MASK                 _MK_MASK_CONST(0xffffffff)
#define DC_COM_CRC_CHECKSUM_LATCHED_0_CRC_CHECKSUM_LATCHED_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_COM_CRC_CHECKSUM_LATCHED_0_CRC_CHECKSUM_LATCHED_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// 
// Display Controller register definition
//
// Display Controller -=DISP=- display register definition.
// These registers control -=DISP=- display only but not including the -=DISP=-
// display window parameters.
//
// Display Signal Options 0

// Register DC_DISP_DISP_SIGNAL_OPTIONS0_0  // Display Signal Options 0
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0                  _MK_ADDR_CONST(0x400)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_SECURE                   0x0
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_WORD_COUNT                       0x1
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_RESET_MASK                       _MK_MASK_CONST(0x51d1500)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_READ_MASK                        _MK_MASK_CONST(0x51d1500)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_WRITE_MASK                       _MK_MASK_CONST(0x51d1500)
// H Pulse 0 Enable   0= disable
//   1= enable
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE0_ENABLE_SHIFT                    _MK_SHIFT_CONST(8)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE0_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE0_ENABLE_SHIFT)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE0_ENABLE_RANGE                    8:8
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE0_ENABLE_WOFFSET                  0x0
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE0_ENABLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE0_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE0_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE0_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE0_ENABLE_DISABLE                  _MK_ENUM_CONST(0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE0_ENABLE_ENABLE                   _MK_ENUM_CONST(1)

// H Pulse 1 Enable   0= disable
//   1= enable
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE1_ENABLE_SHIFT                    _MK_SHIFT_CONST(10)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE1_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE1_ENABLE_SHIFT)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE1_ENABLE_RANGE                    10:10
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE1_ENABLE_WOFFSET                  0x0
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE1_ENABLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE1_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE1_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE1_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE1_ENABLE_DISABLE                  _MK_ENUM_CONST(0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE1_ENABLE_ENABLE                   _MK_ENUM_CONST(1)

// H Pulse 2 Enable   0= disable
//   1= enable
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE2_ENABLE_SHIFT                    _MK_SHIFT_CONST(12)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE2_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE2_ENABLE_SHIFT)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE2_ENABLE_RANGE                    12:12
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE2_ENABLE_WOFFSET                  0x0
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE2_ENABLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE2_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE2_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE2_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE2_ENABLE_DISABLE                  _MK_ENUM_CONST(0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_H_PULSE2_ENABLE_ENABLE                   _MK_ENUM_CONST(1)

// V Pulse 0 Enable   0= disable
//   1= enable
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE0_ENABLE_SHIFT                    _MK_SHIFT_CONST(16)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE0_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE0_ENABLE_SHIFT)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE0_ENABLE_RANGE                    16:16
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE0_ENABLE_WOFFSET                  0x0
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE0_ENABLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE0_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE0_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE0_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE0_ENABLE_DISABLE                  _MK_ENUM_CONST(0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE0_ENABLE_ENABLE                   _MK_ENUM_CONST(1)

// V Pulse 1 Enable   0= disable
//   1= enable
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE1_ENABLE_SHIFT                    _MK_SHIFT_CONST(18)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE1_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE1_ENABLE_SHIFT)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE1_ENABLE_RANGE                    18:18
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE1_ENABLE_WOFFSET                  0x0
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE1_ENABLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE1_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE1_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE1_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE1_ENABLE_DISABLE                  _MK_ENUM_CONST(0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE1_ENABLE_ENABLE                   _MK_ENUM_CONST(1)

// V Pulse 2 Enable   0= disable
//   1= enable
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE2_ENABLE_SHIFT                    _MK_SHIFT_CONST(19)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE2_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE2_ENABLE_SHIFT)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE2_ENABLE_RANGE                    19:19
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE2_ENABLE_WOFFSET                  0x0
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE2_ENABLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE2_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE2_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE2_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE2_ENABLE_DISABLE                  _MK_ENUM_CONST(0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE2_ENABLE_ENABLE                   _MK_ENUM_CONST(1)

// V Pulse 3 Enable   0= disable
//   1= enable
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE3_ENABLE_SHIFT                    _MK_SHIFT_CONST(20)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE3_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE3_ENABLE_SHIFT)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE3_ENABLE_RANGE                    20:20
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE3_ENABLE_WOFFSET                  0x0
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE3_ENABLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE3_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE3_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE3_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE3_ENABLE_DISABLE                  _MK_ENUM_CONST(0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_V_PULSE3_ENABLE_ENABLE                   _MK_ENUM_CONST(1)

// M0 Enable   0= disable
//   1= enable
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_M0_ENABLE_SHIFT                  _MK_SHIFT_CONST(24)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_M0_ENABLE_FIELD                  (_MK_MASK_CONST(0x1) << DC_DISP_DISP_SIGNAL_OPTIONS0_0_M0_ENABLE_SHIFT)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_M0_ENABLE_RANGE                  24:24
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_M0_ENABLE_WOFFSET                        0x0
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_M0_ENABLE_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_M0_ENABLE_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_M0_ENABLE_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_M0_ENABLE_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_M0_ENABLE_DISABLE                        _MK_ENUM_CONST(0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_M0_ENABLE_ENABLE                 _MK_ENUM_CONST(1)

// M1 Enable   0= disable
//   1= enable
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_M1_ENABLE_SHIFT                  _MK_SHIFT_CONST(26)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_M1_ENABLE_FIELD                  (_MK_MASK_CONST(0x1) << DC_DISP_DISP_SIGNAL_OPTIONS0_0_M1_ENABLE_SHIFT)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_M1_ENABLE_RANGE                  26:26
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_M1_ENABLE_WOFFSET                        0x0
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_M1_ENABLE_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_M1_ENABLE_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_M1_ENABLE_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_M1_ENABLE_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_M1_ENABLE_DISABLE                        _MK_ENUM_CONST(0)
#define DC_DISP_DISP_SIGNAL_OPTIONS0_0_M1_ENABLE_ENABLE                 _MK_ENUM_CONST(1)

// Display Signal Options 1

// Register DC_DISP_DISP_SIGNAL_OPTIONS1_0  // Display Signal Options 1
#define DC_DISP_DISP_SIGNAL_OPTIONS1_0                  _MK_ADDR_CONST(0x401)
#define DC_DISP_DISP_SIGNAL_OPTIONS1_0_SECURE                   0x0
#define DC_DISP_DISP_SIGNAL_OPTIONS1_0_WORD_COUNT                       0x1
#define DC_DISP_DISP_SIGNAL_OPTIONS1_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS1_0_RESET_MASK                       _MK_MASK_CONST(0x50000)
#define DC_DISP_DISP_SIGNAL_OPTIONS1_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS1_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS1_0_READ_MASK                        _MK_MASK_CONST(0x50000)
#define DC_DISP_DISP_SIGNAL_OPTIONS1_0_WRITE_MASK                       _MK_MASK_CONST(0x50000)
// DI Enable   0= disable
//   1= enable
#define DC_DISP_DISP_SIGNAL_OPTIONS1_0_DI_ENABLE_SHIFT                  _MK_SHIFT_CONST(16)
#define DC_DISP_DISP_SIGNAL_OPTIONS1_0_DI_ENABLE_FIELD                  (_MK_MASK_CONST(0x1) << DC_DISP_DISP_SIGNAL_OPTIONS1_0_DI_ENABLE_SHIFT)
#define DC_DISP_DISP_SIGNAL_OPTIONS1_0_DI_ENABLE_RANGE                  16:16
#define DC_DISP_DISP_SIGNAL_OPTIONS1_0_DI_ENABLE_WOFFSET                        0x0
#define DC_DISP_DISP_SIGNAL_OPTIONS1_0_DI_ENABLE_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS1_0_DI_ENABLE_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_DISP_DISP_SIGNAL_OPTIONS1_0_DI_ENABLE_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS1_0_DI_ENABLE_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS1_0_DI_ENABLE_DISABLE                        _MK_ENUM_CONST(0)
#define DC_DISP_DISP_SIGNAL_OPTIONS1_0_DI_ENABLE_ENABLE                 _MK_ENUM_CONST(1)

// PP Enable   0= disable
//   1= enable
#define DC_DISP_DISP_SIGNAL_OPTIONS1_0_PP_ENABLE_SHIFT                  _MK_SHIFT_CONST(18)
#define DC_DISP_DISP_SIGNAL_OPTIONS1_0_PP_ENABLE_FIELD                  (_MK_MASK_CONST(0x1) << DC_DISP_DISP_SIGNAL_OPTIONS1_0_PP_ENABLE_SHIFT)
#define DC_DISP_DISP_SIGNAL_OPTIONS1_0_PP_ENABLE_RANGE                  18:18
#define DC_DISP_DISP_SIGNAL_OPTIONS1_0_PP_ENABLE_WOFFSET                        0x0
#define DC_DISP_DISP_SIGNAL_OPTIONS1_0_PP_ENABLE_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS1_0_PP_ENABLE_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_DISP_DISP_SIGNAL_OPTIONS1_0_PP_ENABLE_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS1_0_PP_ENABLE_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_SIGNAL_OPTIONS1_0_PP_ENABLE_DISABLE                        _MK_ENUM_CONST(0)
#define DC_DISP_DISP_SIGNAL_OPTIONS1_0_PP_ENABLE_ENABLE                 _MK_ENUM_CONST(1)

// Display Window Options

// Register DC_DISP_DISP_WIN_OPTIONS_0  // Display Window Options
#define DC_DISP_DISP_WIN_OPTIONS_0                      _MK_ADDR_CONST(0x402)
#define DC_DISP_DISP_WIN_OPTIONS_0_SECURE                       0x0
#define DC_DISP_DISP_WIN_OPTIONS_0_WORD_COUNT                   0x1
#define DC_DISP_DISP_WIN_OPTIONS_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_WIN_OPTIONS_0_RESET_MASK                   _MK_MASK_CONST(0x70010000)
#define DC_DISP_DISP_WIN_OPTIONS_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_WIN_OPTIONS_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_WIN_OPTIONS_0_READ_MASK                    _MK_MASK_CONST(0x70010000)
#define DC_DISP_DISP_WIN_OPTIONS_0_WRITE_MASK                   _MK_MASK_CONST(0x70010000)
// Cursor Enable   0= disable
//   1= enable
#define DC_DISP_DISP_WIN_OPTIONS_0_CURSOR_ENABLE_SHIFT                  _MK_SHIFT_CONST(16)
#define DC_DISP_DISP_WIN_OPTIONS_0_CURSOR_ENABLE_FIELD                  (_MK_MASK_CONST(0x1) << DC_DISP_DISP_WIN_OPTIONS_0_CURSOR_ENABLE_SHIFT)
#define DC_DISP_DISP_WIN_OPTIONS_0_CURSOR_ENABLE_RANGE                  16:16
#define DC_DISP_DISP_WIN_OPTIONS_0_CURSOR_ENABLE_WOFFSET                        0x0
#define DC_DISP_DISP_WIN_OPTIONS_0_CURSOR_ENABLE_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_WIN_OPTIONS_0_CURSOR_ENABLE_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_DISP_DISP_WIN_OPTIONS_0_CURSOR_ENABLE_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_WIN_OPTIONS_0_CURSOR_ENABLE_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_WIN_OPTIONS_0_CURSOR_ENABLE_DISABLE                        _MK_ENUM_CONST(0)
#define DC_DISP_DISP_WIN_OPTIONS_0_CURSOR_ENABLE_ENABLE                 _MK_ENUM_CONST(1)

// TVO Enable   0= disable
//   1= enable
// Steps to start displaying on TV 
// (The order of the first 3 steps can freely change):
// -- Program and enable TVO module
// -- Program DISPLAY_CTRL_MODE to NC_DISPLAY
// -- Program the ASSEMBLY shadow copy of this register 
//    field with ENABLE
// -- Program GENERAL_ACT_REQ to activate the shadow
#define DC_DISP_DISP_WIN_OPTIONS_0_TVO_ENABLE_SHIFT                     _MK_SHIFT_CONST(28)
#define DC_DISP_DISP_WIN_OPTIONS_0_TVO_ENABLE_FIELD                     (_MK_MASK_CONST(0x1) << DC_DISP_DISP_WIN_OPTIONS_0_TVO_ENABLE_SHIFT)
#define DC_DISP_DISP_WIN_OPTIONS_0_TVO_ENABLE_RANGE                     28:28
#define DC_DISP_DISP_WIN_OPTIONS_0_TVO_ENABLE_WOFFSET                   0x0
#define DC_DISP_DISP_WIN_OPTIONS_0_TVO_ENABLE_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_WIN_OPTIONS_0_TVO_ENABLE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_DISP_DISP_WIN_OPTIONS_0_TVO_ENABLE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_WIN_OPTIONS_0_TVO_ENABLE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_WIN_OPTIONS_0_TVO_ENABLE_DISABLE                   _MK_ENUM_CONST(0)
#define DC_DISP_DISP_WIN_OPTIONS_0_TVO_ENABLE_ENABLE                    _MK_ENUM_CONST(1)

// MIPI Display Serial Interface Enable   0 = disable
//   1 = enable
// The DSI unit must also be seperately enabled
// in it's own register space in order to use
// DSI functionality.
#define DC_DISP_DISP_WIN_OPTIONS_0_DSI_ENABLE_SHIFT                     _MK_SHIFT_CONST(29)
#define DC_DISP_DISP_WIN_OPTIONS_0_DSI_ENABLE_FIELD                     (_MK_MASK_CONST(0x1) << DC_DISP_DISP_WIN_OPTIONS_0_DSI_ENABLE_SHIFT)
#define DC_DISP_DISP_WIN_OPTIONS_0_DSI_ENABLE_RANGE                     29:29
#define DC_DISP_DISP_WIN_OPTIONS_0_DSI_ENABLE_WOFFSET                   0x0
#define DC_DISP_DISP_WIN_OPTIONS_0_DSI_ENABLE_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_WIN_OPTIONS_0_DSI_ENABLE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_DISP_DISP_WIN_OPTIONS_0_DSI_ENABLE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_WIN_OPTIONS_0_DSI_ENABLE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_WIN_OPTIONS_0_DSI_ENABLE_DISABLE                   _MK_ENUM_CONST(0)
#define DC_DISP_DISP_WIN_OPTIONS_0_DSI_ENABLE_ENABLE                    _MK_ENUM_CONST(1)

// HDMI interface   0 = disable
//   1 = enable
// The HDMI unit must also be seperately enabled
// in it's own register space in order to use
// HDMI functionality.
#define DC_DISP_DISP_WIN_OPTIONS_0_HDMI_ENABLE_SHIFT                    _MK_SHIFT_CONST(30)
#define DC_DISP_DISP_WIN_OPTIONS_0_HDMI_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_DISP_DISP_WIN_OPTIONS_0_HDMI_ENABLE_SHIFT)
#define DC_DISP_DISP_WIN_OPTIONS_0_HDMI_ENABLE_RANGE                    30:30
#define DC_DISP_DISP_WIN_OPTIONS_0_HDMI_ENABLE_WOFFSET                  0x0
#define DC_DISP_DISP_WIN_OPTIONS_0_HDMI_ENABLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_WIN_OPTIONS_0_HDMI_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_DISP_DISP_WIN_OPTIONS_0_HDMI_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_WIN_OPTIONS_0_HDMI_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_WIN_OPTIONS_0_HDMI_ENABLE_DISABLE                  _MK_ENUM_CONST(0)
#define DC_DISP_DISP_WIN_OPTIONS_0_HDMI_ENABLE_ENABLE                   _MK_ENUM_CONST(1)

// Display Memory High Priority Threshold
// This controls high priority request for memory read access for each display window and for
//  cursor. High priority request threshold should be increased in scenarios where memory
//  access latency is high.

// Register DC_DISP_MEM_HIGH_PRIORITY_0  // Memory High Priority request control
#define DC_DISP_MEM_HIGH_PRIORITY_0                     _MK_ADDR_CONST(0x403)
#define DC_DISP_MEM_HIGH_PRIORITY_0_SECURE                      0x0
#define DC_DISP_MEM_HIGH_PRIORITY_0_WORD_COUNT                  0x1
#define DC_DISP_MEM_HIGH_PRIORITY_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define DC_DISP_MEM_HIGH_PRIORITY_0_RESET_MASK                  _MK_MASK_CONST(0x77f7fff)
#define DC_DISP_MEM_HIGH_PRIORITY_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define DC_DISP_MEM_HIGH_PRIORITY_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_MEM_HIGH_PRIORITY_0_READ_MASK                   _MK_MASK_CONST(0x77f7fff)
#define DC_DISP_MEM_HIGH_PRIORITY_0_WRITE_MASK                  _MK_MASK_CONST(0x77f7fff)
// Window A Memory High Priority threshold
//  Memory access for this  window is high
//  priority if the number of filled entries
//  in the return data fifo is less than or equal
//  to this value. Setting this parameter to 0
//  disables high priority memory request.
#define DC_DISP_MEM_HIGH_PRIORITY_0_CBR_DISPLAY0A2MC_HPTH_SHIFT                 _MK_SHIFT_CONST(0)
#define DC_DISP_MEM_HIGH_PRIORITY_0_CBR_DISPLAY0A2MC_HPTH_FIELD                 (_MK_MASK_CONST(0xff) << DC_DISP_MEM_HIGH_PRIORITY_0_CBR_DISPLAY0A2MC_HPTH_SHIFT)
#define DC_DISP_MEM_HIGH_PRIORITY_0_CBR_DISPLAY0A2MC_HPTH_RANGE                 7:0
#define DC_DISP_MEM_HIGH_PRIORITY_0_CBR_DISPLAY0A2MC_HPTH_WOFFSET                       0x0
#define DC_DISP_MEM_HIGH_PRIORITY_0_CBR_DISPLAY0A2MC_HPTH_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_MEM_HIGH_PRIORITY_0_CBR_DISPLAY0A2MC_HPTH_DEFAULT_MASK                  _MK_MASK_CONST(0xff)
#define DC_DISP_MEM_HIGH_PRIORITY_0_CBR_DISPLAY0A2MC_HPTH_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_MEM_HIGH_PRIORITY_0_CBR_DISPLAY0A2MC_HPTH_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Window B Memory High Priority threshold
//  Memory access for this  window is high
//  priority if the number of filled entries
//  in the return data fifo is less than or equal
//  to this value. Setting this parameter to 0
//  disables high priority memory request.
//  This register is used for both window B0 and B1
#define DC_DISP_MEM_HIGH_PRIORITY_0_CBR_DISPLAYB2MC_HPTH_SHIFT                  _MK_SHIFT_CONST(8)
#define DC_DISP_MEM_HIGH_PRIORITY_0_CBR_DISPLAYB2MC_HPTH_FIELD                  (_MK_MASK_CONST(0x7f) << DC_DISP_MEM_HIGH_PRIORITY_0_CBR_DISPLAYB2MC_HPTH_SHIFT)
#define DC_DISP_MEM_HIGH_PRIORITY_0_CBR_DISPLAYB2MC_HPTH_RANGE                  14:8
#define DC_DISP_MEM_HIGH_PRIORITY_0_CBR_DISPLAYB2MC_HPTH_WOFFSET                        0x0
#define DC_DISP_MEM_HIGH_PRIORITY_0_CBR_DISPLAYB2MC_HPTH_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_MEM_HIGH_PRIORITY_0_CBR_DISPLAYB2MC_HPTH_DEFAULT_MASK                   _MK_MASK_CONST(0x7f)
#define DC_DISP_MEM_HIGH_PRIORITY_0_CBR_DISPLAYB2MC_HPTH_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_MEM_HIGH_PRIORITY_0_CBR_DISPLAYB2MC_HPTH_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Window C Memory High Priority threshold 
//  Memory access for this  window is high
//  priority if the number of filled entries
//  in the return data fifo is less than or equal
//  to this value. Setting this parameter to 0
//  disables high priority memory request.
#define DC_DISP_MEM_HIGH_PRIORITY_0_CBR_DISPLAY0C2MC_HPTH_SHIFT                 _MK_SHIFT_CONST(16)
#define DC_DISP_MEM_HIGH_PRIORITY_0_CBR_DISPLAY0C2MC_HPTH_FIELD                 (_MK_MASK_CONST(0x7f) << DC_DISP_MEM_HIGH_PRIORITY_0_CBR_DISPLAY0C2MC_HPTH_SHIFT)
#define DC_DISP_MEM_HIGH_PRIORITY_0_CBR_DISPLAY0C2MC_HPTH_RANGE                 22:16
#define DC_DISP_MEM_HIGH_PRIORITY_0_CBR_DISPLAY0C2MC_HPTH_WOFFSET                       0x0
#define DC_DISP_MEM_HIGH_PRIORITY_0_CBR_DISPLAY0C2MC_HPTH_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_MEM_HIGH_PRIORITY_0_CBR_DISPLAY0C2MC_HPTH_DEFAULT_MASK                  _MK_MASK_CONST(0x7f)
#define DC_DISP_MEM_HIGH_PRIORITY_0_CBR_DISPLAY0C2MC_HPTH_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_MEM_HIGH_PRIORITY_0_CBR_DISPLAY0C2MC_HPTH_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Cursor Memory High Priority enable
//   0= memory access for cursor is normal
//      priority
//   1= memory access for cursor is high
//      priority
#define DC_DISP_MEM_HIGH_PRIORITY_0_CSR_DISPLAYHC2MC_HPTH_SHIFT                 _MK_SHIFT_CONST(24)
#define DC_DISP_MEM_HIGH_PRIORITY_0_CSR_DISPLAYHC2MC_HPTH_FIELD                 (_MK_MASK_CONST(0x7) << DC_DISP_MEM_HIGH_PRIORITY_0_CSR_DISPLAYHC2MC_HPTH_SHIFT)
#define DC_DISP_MEM_HIGH_PRIORITY_0_CSR_DISPLAYHC2MC_HPTH_RANGE                 26:24
#define DC_DISP_MEM_HIGH_PRIORITY_0_CSR_DISPLAYHC2MC_HPTH_WOFFSET                       0x0
#define DC_DISP_MEM_HIGH_PRIORITY_0_CSR_DISPLAYHC2MC_HPTH_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_MEM_HIGH_PRIORITY_0_CSR_DISPLAYHC2MC_HPTH_DEFAULT_MASK                  _MK_MASK_CONST(0x7)
#define DC_DISP_MEM_HIGH_PRIORITY_0_CSR_DISPLAYHC2MC_HPTH_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_MEM_HIGH_PRIORITY_0_CSR_DISPLAYHC2MC_HPTH_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Display Memory High Priority Timer
// The high-priority assertion can be delayed by a number of memory clock cycles indicated by the timer.
// This creates an hysteresis effect, avoiding setting the high-priority for very short periods of time,
// which may or may not be desirable.

// Register DC_DISP_MEM_HIGH_PRIORITY_TIMER_0  // Memory High Priority request control
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0                       _MK_ADDR_CONST(0x404)
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_SECURE                        0x0
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_WORD_COUNT                    0x1
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_RESET_MASK                    _MK_MASK_CONST(0x3f3f3f3f)
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_READ_MASK                     _MK_MASK_CONST(0x3f3f3f3f)
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_WRITE_MASK                    _MK_MASK_CONST(0x3f3f3f3f)
// Window A Memory High Priority timer
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CBR_DISPLAY0A2MC_HPTM_SHIFT                   _MK_SHIFT_CONST(0)
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CBR_DISPLAY0A2MC_HPTM_FIELD                   (_MK_MASK_CONST(0x3f) << DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CBR_DISPLAY0A2MC_HPTM_SHIFT)
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CBR_DISPLAY0A2MC_HPTM_RANGE                   5:0
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CBR_DISPLAY0A2MC_HPTM_WOFFSET                 0x0
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CBR_DISPLAY0A2MC_HPTM_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CBR_DISPLAY0A2MC_HPTM_DEFAULT_MASK                    _MK_MASK_CONST(0x3f)
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CBR_DISPLAY0A2MC_HPTM_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CBR_DISPLAY0A2MC_HPTM_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Window B Memory High Priority timer
// This register is used for both window B0 and B1       
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CBR_DISPLAYB2MC_HPTM_SHIFT                    _MK_SHIFT_CONST(8)
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CBR_DISPLAYB2MC_HPTM_FIELD                    (_MK_MASK_CONST(0x3f) << DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CBR_DISPLAYB2MC_HPTM_SHIFT)
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CBR_DISPLAYB2MC_HPTM_RANGE                    13:8
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CBR_DISPLAYB2MC_HPTM_WOFFSET                  0x0
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CBR_DISPLAYB2MC_HPTM_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CBR_DISPLAYB2MC_HPTM_DEFAULT_MASK                     _MK_MASK_CONST(0x3f)
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CBR_DISPLAYB2MC_HPTM_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CBR_DISPLAYB2MC_HPTM_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Window C Memory High Priority timer 
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CBR_DISPLAY0C2MC_HPTM_SHIFT                   _MK_SHIFT_CONST(16)
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CBR_DISPLAY0C2MC_HPTM_FIELD                   (_MK_MASK_CONST(0x3f) << DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CBR_DISPLAY0C2MC_HPTM_SHIFT)
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CBR_DISPLAY0C2MC_HPTM_RANGE                   21:16
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CBR_DISPLAY0C2MC_HPTM_WOFFSET                 0x0
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CBR_DISPLAY0C2MC_HPTM_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CBR_DISPLAY0C2MC_HPTM_DEFAULT_MASK                    _MK_MASK_CONST(0x3f)
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CBR_DISPLAY0C2MC_HPTM_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CBR_DISPLAY0C2MC_HPTM_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Cursor Memory High Priority timer
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CSR_DISPLAYHC2MC_HPTM_SHIFT                   _MK_SHIFT_CONST(24)
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CSR_DISPLAYHC2MC_HPTM_FIELD                   (_MK_MASK_CONST(0x3f) << DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CSR_DISPLAYHC2MC_HPTM_SHIFT)
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CSR_DISPLAYHC2MC_HPTM_RANGE                   29:24
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CSR_DISPLAYHC2MC_HPTM_WOFFSET                 0x0
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CSR_DISPLAYHC2MC_HPTM_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CSR_DISPLAYHC2MC_HPTM_DEFAULT_MASK                    _MK_MASK_CONST(0x3f)
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CSR_DISPLAYHC2MC_HPTM_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_MEM_HIGH_PRIORITY_TIMER_0_CSR_DISPLAYHC2MC_HPTM_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

//
// Class: Display Standard Timings
// 
// Programming of display timing registers must meet these restrictions:
//  Constraint 1: H_REF_TO_SYNC + H_SYNC_WIDTH + H_BACK_PORCH > 11.
//  Constraint 2: V_REF_TO_SYNC + V_SYNC_WIDTH + V_BACK_PORCH > 1.
//  Constraint 3: V_FRONT_PORCH + V_SYNC_WIDTH + V_BACK_PORCH > 1 (vertical blank).
//  Constraint 4: V_SYNC_WIDTH >= 1
//                H_SYNC_WIDTH >= 1
//  Constraint 5: V_REF_TO_SYNC >= 1
//                H_REF_TO_SYNC >= 0
//  Constraint 6: V_FRONT_PORT >= (V_REF_TO_SYNC + 1)
//                H_FRONT_PORT >= (H_REF_TO_SYNC + 1)
//  Constraint 7: H_DISP_ACTIVE >= 16
//                V_DISP_ACTIVE >= 16
//
// Timing diagram:
// -- This diagram applies to both vertical and horizontal timing 
// -- Back porch is the only parameter that can be negative
//                                 _____________                                                      ____
// h/v sync ______________________|             |____________________________________________________|  
//                   ^            ^             ^                                                    ^
//       _____               sync-head       sync-end          __________________                sync-head
// data  XXXXX|_______________________________________________|XXXXXXXXXXXXXXXXXX|________________________
//                   ^                                        ^                         ^     
//               ref-point                                                          ref-point
//       ----><---front-porch----><-sync-width-><-back-porch-><---active-area---><---front-porch----><-sync
//                   <-reftosync->
// 
// constrnt 1,2      <---------------------------------------> (> 11 horizontally, > 1 vertically)
// constrnt 3 <----------------------------------------------> (> 1 vertically)
// 
// h/v total                      <----------------------------------------------------------------->
// one frame         <------------------------------------------------------------------>
//               frame-start                                                        frame-end
//
// This register specifies display timing options for HSYNC and VSYNC

// Register DC_DISP_DISP_TIMING_OPTIONS_0  // Display Timing_Options
#define DC_DISP_DISP_TIMING_OPTIONS_0                   _MK_ADDR_CONST(0x405)
#define DC_DISP_DISP_TIMING_OPTIONS_0_SECURE                    0x0
#define DC_DISP_DISP_TIMING_OPTIONS_0_WORD_COUNT                        0x1
#define DC_DISP_DISP_TIMING_OPTIONS_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_TIMING_OPTIONS_0_RESET_MASK                        _MK_MASK_CONST(0x1fff)
#define DC_DISP_DISP_TIMING_OPTIONS_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_TIMING_OPTIONS_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_TIMING_OPTIONS_0_READ_MASK                         _MK_MASK_CONST(0x1fff)
#define DC_DISP_DISP_TIMING_OPTIONS_0_WRITE_MASK                        _MK_MASK_CONST(0x1fff)
// VSYNC Horizontal Position
//  This parameter specifies the position where
//  VSYNC can toggle with respect to H reference
//  point.
#define DC_DISP_DISP_TIMING_OPTIONS_0_VSYNC_H_POSITION_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_DISP_TIMING_OPTIONS_0_VSYNC_H_POSITION_FIELD                    (_MK_MASK_CONST(0x1fff) << DC_DISP_DISP_TIMING_OPTIONS_0_VSYNC_H_POSITION_SHIFT)
#define DC_DISP_DISP_TIMING_OPTIONS_0_VSYNC_H_POSITION_RANGE                    12:0
#define DC_DISP_DISP_TIMING_OPTIONS_0_VSYNC_H_POSITION_WOFFSET                  0x0
#define DC_DISP_DISP_TIMING_OPTIONS_0_VSYNC_H_POSITION_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_TIMING_OPTIONS_0_VSYNC_H_POSITION_DEFAULT_MASK                     _MK_MASK_CONST(0x1fff)
#define DC_DISP_DISP_TIMING_OPTIONS_0_VSYNC_H_POSITION_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_TIMING_OPTIONS_0_VSYNC_H_POSITION_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// This register specifies the start position of HSYNC and VSYNC with respect to H and V
//  reference point (line and frame start) correspondingly. The H and V reference points
//  correspond to the time when H and V display timing counter is re-initialized to zero
//  correspondingly.
// The H reference point also determines the point where V display timing counter is
//  is incremented so this point the horizontal relationship between HSYNC and VSYNC.
// NOTE: VSYNC's rising/falling edge is fixed at H reference point zero. In the future,
//  we may want to add a horizontal position offset so that VSYNC can occur after HSYNC.

// Register DC_DISP_REF_TO_SYNC_0  // H/V Reference to Sync
#define DC_DISP_REF_TO_SYNC_0                   _MK_ADDR_CONST(0x406)
#define DC_DISP_REF_TO_SYNC_0_SECURE                    0x0
#define DC_DISP_REF_TO_SYNC_0_WORD_COUNT                        0x1
#define DC_DISP_REF_TO_SYNC_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_REF_TO_SYNC_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_REF_TO_SYNC_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_REF_TO_SYNC_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_REF_TO_SYNC_0_READ_MASK                         _MK_MASK_CONST(0x1fff1fff)
#define DC_DISP_REF_TO_SYNC_0_WRITE_MASK                        _MK_MASK_CONST(0x1fff1fff)
// H reference to HSYNC
//  (minimum 0 pixel clock)
#define DC_DISP_REF_TO_SYNC_0_H_REF_TO_SYNC_SHIFT                       _MK_SHIFT_CONST(0)
#define DC_DISP_REF_TO_SYNC_0_H_REF_TO_SYNC_FIELD                       (_MK_MASK_CONST(0x1fff) << DC_DISP_REF_TO_SYNC_0_H_REF_TO_SYNC_SHIFT)
#define DC_DISP_REF_TO_SYNC_0_H_REF_TO_SYNC_RANGE                       12:0
#define DC_DISP_REF_TO_SYNC_0_H_REF_TO_SYNC_WOFFSET                     0x0
#define DC_DISP_REF_TO_SYNC_0_H_REF_TO_SYNC_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_REF_TO_SYNC_0_H_REF_TO_SYNC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_REF_TO_SYNC_0_H_REF_TO_SYNC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_REF_TO_SYNC_0_H_REF_TO_SYNC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// V reference to VSYNC
//  (minimum 1 line clock)
#define DC_DISP_REF_TO_SYNC_0_V_REF_TO_SYNC_SHIFT                       _MK_SHIFT_CONST(16)
#define DC_DISP_REF_TO_SYNC_0_V_REF_TO_SYNC_FIELD                       (_MK_MASK_CONST(0x1fff) << DC_DISP_REF_TO_SYNC_0_V_REF_TO_SYNC_SHIFT)
#define DC_DISP_REF_TO_SYNC_0_V_REF_TO_SYNC_RANGE                       28:16
#define DC_DISP_REF_TO_SYNC_0_V_REF_TO_SYNC_WOFFSET                     0x0
#define DC_DISP_REF_TO_SYNC_0_V_REF_TO_SYNC_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_REF_TO_SYNC_0_V_REF_TO_SYNC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_REF_TO_SYNC_0_V_REF_TO_SYNC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_REF_TO_SYNC_0_V_REF_TO_SYNC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// This register specifies the width of HSYNC and VSYNC pulses.
// Check the comment for REF_TO_SYNC for programming restrictions.

// Register DC_DISP_SYNC_WIDTH_0  // H/V SYNC Pulse Width
#define DC_DISP_SYNC_WIDTH_0                    _MK_ADDR_CONST(0x407)
#define DC_DISP_SYNC_WIDTH_0_SECURE                     0x0
#define DC_DISP_SYNC_WIDTH_0_WORD_COUNT                         0x1
#define DC_DISP_SYNC_WIDTH_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define DC_DISP_SYNC_WIDTH_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define DC_DISP_SYNC_WIDTH_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define DC_DISP_SYNC_WIDTH_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_SYNC_WIDTH_0_READ_MASK                  _MK_MASK_CONST(0x1fff1fff)
#define DC_DISP_SYNC_WIDTH_0_WRITE_MASK                         _MK_MASK_CONST(0x1fff1fff)
// HSYNC pulse width
//  (minimum 1 pixel clock)
#define DC_DISP_SYNC_WIDTH_0_H_SYNC_WIDTH_SHIFT                 _MK_SHIFT_CONST(0)
#define DC_DISP_SYNC_WIDTH_0_H_SYNC_WIDTH_FIELD                 (_MK_MASK_CONST(0x1fff) << DC_DISP_SYNC_WIDTH_0_H_SYNC_WIDTH_SHIFT)
#define DC_DISP_SYNC_WIDTH_0_H_SYNC_WIDTH_RANGE                 12:0
#define DC_DISP_SYNC_WIDTH_0_H_SYNC_WIDTH_WOFFSET                       0x0
#define DC_DISP_SYNC_WIDTH_0_H_SYNC_WIDTH_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SYNC_WIDTH_0_H_SYNC_WIDTH_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_SYNC_WIDTH_0_H_SYNC_WIDTH_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SYNC_WIDTH_0_H_SYNC_WIDTH_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// VSYNC pulse width
//  (minimum 1 line clock)
#define DC_DISP_SYNC_WIDTH_0_V_SYNC_WIDTH_SHIFT                 _MK_SHIFT_CONST(16)
#define DC_DISP_SYNC_WIDTH_0_V_SYNC_WIDTH_FIELD                 (_MK_MASK_CONST(0x1fff) << DC_DISP_SYNC_WIDTH_0_V_SYNC_WIDTH_SHIFT)
#define DC_DISP_SYNC_WIDTH_0_V_SYNC_WIDTH_RANGE                 28:16
#define DC_DISP_SYNC_WIDTH_0_V_SYNC_WIDTH_WOFFSET                       0x0
#define DC_DISP_SYNC_WIDTH_0_V_SYNC_WIDTH_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SYNC_WIDTH_0_V_SYNC_WIDTH_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_SYNC_WIDTH_0_V_SYNC_WIDTH_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SYNC_WIDTH_0_V_SYNC_WIDTH_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// This register specifies the distance between H/V SYNC trailing edge to beginning of display
//  active area. This is 2's complement value and negative value indicates that H/V SYNC
//  overlaps with the corresponding display active area.
// Check the comment for REF_TO_SYNC for programming restrictions.

// Register DC_DISP_BACK_PORCH_0  // H/V Back Porch
#define DC_DISP_BACK_PORCH_0                    _MK_ADDR_CONST(0x408)
#define DC_DISP_BACK_PORCH_0_SECURE                     0x0
#define DC_DISP_BACK_PORCH_0_WORD_COUNT                         0x1
#define DC_DISP_BACK_PORCH_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define DC_DISP_BACK_PORCH_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define DC_DISP_BACK_PORCH_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define DC_DISP_BACK_PORCH_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_BACK_PORCH_0_READ_MASK                  _MK_MASK_CONST(0x1fff1fff)
#define DC_DISP_BACK_PORCH_0_WRITE_MASK                         _MK_MASK_CONST(0x1fff1fff)
// H back porch
#define DC_DISP_BACK_PORCH_0_H_BACK_PORCH_SHIFT                 _MK_SHIFT_CONST(0)
#define DC_DISP_BACK_PORCH_0_H_BACK_PORCH_FIELD                 (_MK_MASK_CONST(0x1fff) << DC_DISP_BACK_PORCH_0_H_BACK_PORCH_SHIFT)
#define DC_DISP_BACK_PORCH_0_H_BACK_PORCH_RANGE                 12:0
#define DC_DISP_BACK_PORCH_0_H_BACK_PORCH_WOFFSET                       0x0
#define DC_DISP_BACK_PORCH_0_H_BACK_PORCH_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_BACK_PORCH_0_H_BACK_PORCH_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_BACK_PORCH_0_H_BACK_PORCH_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_BACK_PORCH_0_H_BACK_PORCH_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// V back porch
#define DC_DISP_BACK_PORCH_0_V_BACK_PORCH_SHIFT                 _MK_SHIFT_CONST(16)
#define DC_DISP_BACK_PORCH_0_V_BACK_PORCH_FIELD                 (_MK_MASK_CONST(0x1fff) << DC_DISP_BACK_PORCH_0_V_BACK_PORCH_SHIFT)
#define DC_DISP_BACK_PORCH_0_V_BACK_PORCH_RANGE                 28:16
#define DC_DISP_BACK_PORCH_0_V_BACK_PORCH_WOFFSET                       0x0
#define DC_DISP_BACK_PORCH_0_V_BACK_PORCH_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_BACK_PORCH_0_V_BACK_PORCH_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_BACK_PORCH_0_V_BACK_PORCH_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_BACK_PORCH_0_V_BACK_PORCH_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// This register specifies the width of H/V display active area.
// Check the comment for REF_TO_SYNC for programming restrictions.

// Register DC_DISP_DISP_ACTIVE_0  // H/V Display Active width
#define DC_DISP_DISP_ACTIVE_0                   _MK_ADDR_CONST(0x409)
#define DC_DISP_DISP_ACTIVE_0_SECURE                    0x0
#define DC_DISP_DISP_ACTIVE_0_WORD_COUNT                        0x1
#define DC_DISP_DISP_ACTIVE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_ACTIVE_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_ACTIVE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_ACTIVE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_ACTIVE_0_READ_MASK                         _MK_MASK_CONST(0x1fff1fff)
#define DC_DISP_DISP_ACTIVE_0_WRITE_MASK                        _MK_MASK_CONST(0x1fff1fff)
// H display active width
//  (minimum 16 pixels)
#define DC_DISP_DISP_ACTIVE_0_H_DISP_ACTIVE_SHIFT                       _MK_SHIFT_CONST(0)
#define DC_DISP_DISP_ACTIVE_0_H_DISP_ACTIVE_FIELD                       (_MK_MASK_CONST(0x1fff) << DC_DISP_DISP_ACTIVE_0_H_DISP_ACTIVE_SHIFT)
#define DC_DISP_DISP_ACTIVE_0_H_DISP_ACTIVE_RANGE                       12:0
#define DC_DISP_DISP_ACTIVE_0_H_DISP_ACTIVE_WOFFSET                     0x0
#define DC_DISP_DISP_ACTIVE_0_H_DISP_ACTIVE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_ACTIVE_0_H_DISP_ACTIVE_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_ACTIVE_0_H_DISP_ACTIVE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_ACTIVE_0_H_DISP_ACTIVE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// V display active width
//  (minimum 16 lines)
#define DC_DISP_DISP_ACTIVE_0_V_DISP_ACTIVE_SHIFT                       _MK_SHIFT_CONST(16)
#define DC_DISP_DISP_ACTIVE_0_V_DISP_ACTIVE_FIELD                       (_MK_MASK_CONST(0x1fff) << DC_DISP_DISP_ACTIVE_0_V_DISP_ACTIVE_SHIFT)
#define DC_DISP_DISP_ACTIVE_0_V_DISP_ACTIVE_RANGE                       28:16
#define DC_DISP_DISP_ACTIVE_0_V_DISP_ACTIVE_WOFFSET                     0x0
#define DC_DISP_DISP_ACTIVE_0_V_DISP_ACTIVE_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_ACTIVE_0_V_DISP_ACTIVE_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_ACTIVE_0_V_DISP_ACTIVE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_ACTIVE_0_V_DISP_ACTIVE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// This register specifies the distance between end of H/V display active area to the
//  leading edge of the corresponding H/V SYNC.
// Design Note: H/V active end plus the H/V front porch value minus the H/V reference to
//  H/VSYNC determines the the H/V total (final H/V count value for the H/V display counter).
// Check the comment for REF_TO_SYNC for programming restrictions.

// Register DC_DISP_FRONT_PORCH_0  // H/V Front Porch
#define DC_DISP_FRONT_PORCH_0                   _MK_ADDR_CONST(0x40a)
#define DC_DISP_FRONT_PORCH_0_SECURE                    0x0
#define DC_DISP_FRONT_PORCH_0_WORD_COUNT                        0x1
#define DC_DISP_FRONT_PORCH_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_FRONT_PORCH_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_FRONT_PORCH_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_FRONT_PORCH_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_FRONT_PORCH_0_READ_MASK                         _MK_MASK_CONST(0x1fff1fff)
#define DC_DISP_FRONT_PORCH_0_WRITE_MASK                        _MK_MASK_CONST(0x1fff1fff)
// HSYNC front porch
//  (minimum -=PS_=-H_REF_TO_SYNC + 1)
#define DC_DISP_FRONT_PORCH_0_H_FRONT_PORCH_SHIFT                       _MK_SHIFT_CONST(0)
#define DC_DISP_FRONT_PORCH_0_H_FRONT_PORCH_FIELD                       (_MK_MASK_CONST(0x1fff) << DC_DISP_FRONT_PORCH_0_H_FRONT_PORCH_SHIFT)
#define DC_DISP_FRONT_PORCH_0_H_FRONT_PORCH_RANGE                       12:0
#define DC_DISP_FRONT_PORCH_0_H_FRONT_PORCH_WOFFSET                     0x0
#define DC_DISP_FRONT_PORCH_0_H_FRONT_PORCH_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_FRONT_PORCH_0_H_FRONT_PORCH_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_FRONT_PORCH_0_H_FRONT_PORCH_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_FRONT_PORCH_0_H_FRONT_PORCH_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// VSYNC front porch
//  (minimum -=PS_=-V_REF_TO_SYNC + 1)
#define DC_DISP_FRONT_PORCH_0_V_FRONT_PORCH_SHIFT                       _MK_SHIFT_CONST(16)
#define DC_DISP_FRONT_PORCH_0_V_FRONT_PORCH_FIELD                       (_MK_MASK_CONST(0x1fff) << DC_DISP_FRONT_PORCH_0_V_FRONT_PORCH_SHIFT)
#define DC_DISP_FRONT_PORCH_0_V_FRONT_PORCH_RANGE                       28:16
#define DC_DISP_FRONT_PORCH_0_V_FRONT_PORCH_WOFFSET                     0x0
#define DC_DISP_FRONT_PORCH_0_V_FRONT_PORCH_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_FRONT_PORCH_0_V_FRONT_PORCH_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_FRONT_PORCH_0_V_FRONT_PORCH_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_FRONT_PORCH_0_V_FRONT_PORCH_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//
// Class: Display Extended Timings
//
// Horizontal pulse 0 is programmable pulse that repeats every line.
// In the NORMAL mode, this signal can have several pulses (A to D) per line with programmable
//  witdh as defined by the pairs of start and end positions. The pulses must not overlap
//  and must occur in sequence: pulse A, then pulse B, etc.
//  In this case, the Enable field must be set to one of the End position. If the Enable field
//  is set to one of the Start position then the pulse generator will stop as if the Enable
//  field is set to the previous End position. If Enable field is set to Start A position then
//  no pulse is generated.
// In the ONE_CLOCK mode this signal can have up to twice the number of pulses per line with
//  each pulse having a width of 1 pixel clock. In this mode, the position of the one-clock
//  pulses correspond to the enabled Start and End positions.
// Regardless of the mode, the pulse generator processes the pairs of start and end position
//  sequentially in the order of: Start A, End A, Start B, End B, etc.
//  So these start/end positions should be programmed in increasing order. If any of the
//  positions are programmed in non-increasing order (has invalid value) then the pulse
//  generator will stop at the last valid position.
// Polarity adjustment is made prior to V display qualification.
// This register specifies options for Horizontal pulse 0.

// Register DC_DISP_H_PULSE0_CONTROL_0  // H Pulse 0 Control
#define DC_DISP_H_PULSE0_CONTROL_0                      _MK_ADDR_CONST(0x40b)
#define DC_DISP_H_PULSE0_CONTROL_0_SECURE                       0x0
#define DC_DISP_H_PULSE0_CONTROL_0_WORD_COUNT                   0x1
#define DC_DISP_H_PULSE0_CONTROL_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_CONTROL_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_CONTROL_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_CONTROL_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_CONTROL_0_READ_MASK                    _MK_MASK_CONST(0xfd8)
#define DC_DISP_H_PULSE0_CONTROL_0_WRITE_MASK                   _MK_MASK_CONST(0xfd8)
// H Pulse 0 Mode   0= Normal mode
//   1= Single-clock mode
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_MODE_SHIFT                  _MK_SHIFT_CONST(3)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_MODE_FIELD                  (_MK_MASK_CONST(0x1) << DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_MODE_SHIFT)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_MODE_RANGE                  3:3
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_MODE_WOFFSET                        0x0
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_MODE_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_MODE_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_MODE_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_MODE_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_MODE_NORMAL                 _MK_ENUM_CONST(0)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_MODE_ONE_CLOCK                      _MK_ENUM_CONST(1)

// H Pulse 0 Polarity   0= High
//   1= Low
//  Polarity adjustment is done before the
//  vertical qualifier is applied.
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_POLARITY_SHIFT                      _MK_SHIFT_CONST(4)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_POLARITY_FIELD                      (_MK_MASK_CONST(0x1) << DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_POLARITY_SHIFT)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_POLARITY_RANGE                      4:4
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_POLARITY_WOFFSET                    0x0
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_POLARITY_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_POLARITY_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_POLARITY_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_POLARITY_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_POLARITY_HIGH                       _MK_ENUM_CONST(0)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_POLARITY_LOW                        _MK_ENUM_CONST(1)

// H Pulse 0 Vertical Qualifier   0= always running
//   2= run during vertical active area
//   3= run during vertical active plus 1 line
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_V_QUAL_SHIFT                        _MK_SHIFT_CONST(6)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_V_QUAL_FIELD                        (_MK_MASK_CONST(0x3) << DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_V_QUAL_SHIFT)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_V_QUAL_RANGE                        7:6
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_V_QUAL_WOFFSET                      0x0
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_V_QUAL_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_V_QUAL_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_V_QUAL_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_V_QUAL_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_V_QUAL_ALWAYS                       _MK_ENUM_CONST(0)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_V_QUAL_VACTIVE                      _MK_ENUM_CONST(2)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_V_QUAL_VACTIVE1                     _MK_ENUM_CONST(3)

// H Pulse 0 Last point   0= end on Start A position
//   1= end on End A position
//   2= end on Start B position
//   3= end on End B position
//   4= end on Start C position
//   5= end on End C position
//   6= end on Start D position
//   7= end on End D position
//   others= reserved
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_LAST_SHIFT                  _MK_SHIFT_CONST(8)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_LAST_FIELD                  (_MK_MASK_CONST(0xf) << DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_LAST_SHIFT)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_LAST_RANGE                  11:8
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_LAST_WOFFSET                        0x0
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_LAST_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_LAST_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_LAST_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_LAST_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_LAST_START_A                        _MK_ENUM_CONST(0)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_LAST_END_A                  _MK_ENUM_CONST(1)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_LAST_START_B                        _MK_ENUM_CONST(2)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_LAST_END_B                  _MK_ENUM_CONST(3)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_LAST_START_C                        _MK_ENUM_CONST(4)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_LAST_END_C                  _MK_ENUM_CONST(5)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_LAST_START_D                        _MK_ENUM_CONST(6)
#define DC_DISP_H_PULSE0_CONTROL_0_H_PULSE0_LAST_END_D                  _MK_ENUM_CONST(7)


// Register DC_DISP_H_PULSE0_POSITION_A_0  // H Pulse 0 Position A
#define DC_DISP_H_PULSE0_POSITION_A_0                   _MK_ADDR_CONST(0x40c)
#define DC_DISP_H_PULSE0_POSITION_A_0_SECURE                    0x0
#define DC_DISP_H_PULSE0_POSITION_A_0_WORD_COUNT                        0x1
#define DC_DISP_H_PULSE0_POSITION_A_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_A_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_A_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_A_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_A_0_READ_MASK                         _MK_MASK_CONST(0x1fff1fff)
#define DC_DISP_H_PULSE0_POSITION_A_0_WRITE_MASK                        _MK_MASK_CONST(0x1fff1fff)
// H Pulse 0 Start A
//  (minimum 0)
#define DC_DISP_H_PULSE0_POSITION_A_0_H_PULSE0_START_A_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_H_PULSE0_POSITION_A_0_H_PULSE0_START_A_FIELD                    (_MK_MASK_CONST(0x1fff) << DC_DISP_H_PULSE0_POSITION_A_0_H_PULSE0_START_A_SHIFT)
#define DC_DISP_H_PULSE0_POSITION_A_0_H_PULSE0_START_A_RANGE                    12:0
#define DC_DISP_H_PULSE0_POSITION_A_0_H_PULSE0_START_A_WOFFSET                  0x0
#define DC_DISP_H_PULSE0_POSITION_A_0_H_PULSE0_START_A_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_A_0_H_PULSE0_START_A_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_A_0_H_PULSE0_START_A_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_A_0_H_PULSE0_START_A_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// H Pulse 0 End A
//  (minimum -=PS_=-H_PULSE0_START_A+1)
#define DC_DISP_H_PULSE0_POSITION_A_0_H_PULSE0_END_A_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_H_PULSE0_POSITION_A_0_H_PULSE0_END_A_FIELD                      (_MK_MASK_CONST(0x1fff) << DC_DISP_H_PULSE0_POSITION_A_0_H_PULSE0_END_A_SHIFT)
#define DC_DISP_H_PULSE0_POSITION_A_0_H_PULSE0_END_A_RANGE                      28:16
#define DC_DISP_H_PULSE0_POSITION_A_0_H_PULSE0_END_A_WOFFSET                    0x0
#define DC_DISP_H_PULSE0_POSITION_A_0_H_PULSE0_END_A_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_A_0_H_PULSE0_END_A_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_A_0_H_PULSE0_END_A_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_A_0_H_PULSE0_END_A_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register DC_DISP_H_PULSE0_POSITION_B_0  // H Pulse 0 Position B
#define DC_DISP_H_PULSE0_POSITION_B_0                   _MK_ADDR_CONST(0x40d)
#define DC_DISP_H_PULSE0_POSITION_B_0_SECURE                    0x0
#define DC_DISP_H_PULSE0_POSITION_B_0_WORD_COUNT                        0x1
#define DC_DISP_H_PULSE0_POSITION_B_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_B_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_B_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_B_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_B_0_READ_MASK                         _MK_MASK_CONST(0x1fff1fff)
#define DC_DISP_H_PULSE0_POSITION_B_0_WRITE_MASK                        _MK_MASK_CONST(0x1fff1fff)
// H Pulse 0 Start B
//  (minimum -=PS_=-H_PULSE0_END_A+1)
#define DC_DISP_H_PULSE0_POSITION_B_0_H_PULSE0_START_B_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_H_PULSE0_POSITION_B_0_H_PULSE0_START_B_FIELD                    (_MK_MASK_CONST(0x1fff) << DC_DISP_H_PULSE0_POSITION_B_0_H_PULSE0_START_B_SHIFT)
#define DC_DISP_H_PULSE0_POSITION_B_0_H_PULSE0_START_B_RANGE                    12:0
#define DC_DISP_H_PULSE0_POSITION_B_0_H_PULSE0_START_B_WOFFSET                  0x0
#define DC_DISP_H_PULSE0_POSITION_B_0_H_PULSE0_START_B_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_B_0_H_PULSE0_START_B_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_B_0_H_PULSE0_START_B_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_B_0_H_PULSE0_START_B_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// H Pulse 0 End B
//  (minimum -=PS_=-H_PULSE0_START_B+1)
#define DC_DISP_H_PULSE0_POSITION_B_0_H_PULSE0_END_B_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_H_PULSE0_POSITION_B_0_H_PULSE0_END_B_FIELD                      (_MK_MASK_CONST(0x1fff) << DC_DISP_H_PULSE0_POSITION_B_0_H_PULSE0_END_B_SHIFT)
#define DC_DISP_H_PULSE0_POSITION_B_0_H_PULSE0_END_B_RANGE                      28:16
#define DC_DISP_H_PULSE0_POSITION_B_0_H_PULSE0_END_B_WOFFSET                    0x0
#define DC_DISP_H_PULSE0_POSITION_B_0_H_PULSE0_END_B_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_B_0_H_PULSE0_END_B_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_B_0_H_PULSE0_END_B_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_B_0_H_PULSE0_END_B_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register DC_DISP_H_PULSE0_POSITION_C_0  // H Pulse 0 Position C
#define DC_DISP_H_PULSE0_POSITION_C_0                   _MK_ADDR_CONST(0x40e)
#define DC_DISP_H_PULSE0_POSITION_C_0_SECURE                    0x0
#define DC_DISP_H_PULSE0_POSITION_C_0_WORD_COUNT                        0x1
#define DC_DISP_H_PULSE0_POSITION_C_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_C_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_C_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_C_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_C_0_READ_MASK                         _MK_MASK_CONST(0x1fff1fff)
#define DC_DISP_H_PULSE0_POSITION_C_0_WRITE_MASK                        _MK_MASK_CONST(0x1fff1fff)
// H Pulse 0 Start C
//  (minimum -=PS_=-H_PULSE0_END_B+1)
#define DC_DISP_H_PULSE0_POSITION_C_0_H_PULSE0_START_C_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_H_PULSE0_POSITION_C_0_H_PULSE0_START_C_FIELD                    (_MK_MASK_CONST(0x1fff) << DC_DISP_H_PULSE0_POSITION_C_0_H_PULSE0_START_C_SHIFT)
#define DC_DISP_H_PULSE0_POSITION_C_0_H_PULSE0_START_C_RANGE                    12:0
#define DC_DISP_H_PULSE0_POSITION_C_0_H_PULSE0_START_C_WOFFSET                  0x0
#define DC_DISP_H_PULSE0_POSITION_C_0_H_PULSE0_START_C_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_C_0_H_PULSE0_START_C_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_C_0_H_PULSE0_START_C_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_C_0_H_PULSE0_START_C_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// H Pulse 0 End C
//  (minimum -=PS_=-H_PULSE0_START_C+1)
#define DC_DISP_H_PULSE0_POSITION_C_0_H_PULSE0_END_C_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_H_PULSE0_POSITION_C_0_H_PULSE0_END_C_FIELD                      (_MK_MASK_CONST(0x1fff) << DC_DISP_H_PULSE0_POSITION_C_0_H_PULSE0_END_C_SHIFT)
#define DC_DISP_H_PULSE0_POSITION_C_0_H_PULSE0_END_C_RANGE                      28:16
#define DC_DISP_H_PULSE0_POSITION_C_0_H_PULSE0_END_C_WOFFSET                    0x0
#define DC_DISP_H_PULSE0_POSITION_C_0_H_PULSE0_END_C_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_C_0_H_PULSE0_END_C_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_C_0_H_PULSE0_END_C_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_C_0_H_PULSE0_END_C_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register DC_DISP_H_PULSE0_POSITION_D_0  // H Pulse 0 Position D
#define DC_DISP_H_PULSE0_POSITION_D_0                   _MK_ADDR_CONST(0x40f)
#define DC_DISP_H_PULSE0_POSITION_D_0_SECURE                    0x0
#define DC_DISP_H_PULSE0_POSITION_D_0_WORD_COUNT                        0x1
#define DC_DISP_H_PULSE0_POSITION_D_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_D_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_D_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_D_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_D_0_READ_MASK                         _MK_MASK_CONST(0x1fff1fff)
#define DC_DISP_H_PULSE0_POSITION_D_0_WRITE_MASK                        _MK_MASK_CONST(0x1fff1fff)
// H Pulse 0 Start D
//  (minimum -=PS_=-H_PULSE0_END_C+1)
#define DC_DISP_H_PULSE0_POSITION_D_0_H_PULSE0_START_D_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_H_PULSE0_POSITION_D_0_H_PULSE0_START_D_FIELD                    (_MK_MASK_CONST(0x1fff) << DC_DISP_H_PULSE0_POSITION_D_0_H_PULSE0_START_D_SHIFT)
#define DC_DISP_H_PULSE0_POSITION_D_0_H_PULSE0_START_D_RANGE                    12:0
#define DC_DISP_H_PULSE0_POSITION_D_0_H_PULSE0_START_D_WOFFSET                  0x0
#define DC_DISP_H_PULSE0_POSITION_D_0_H_PULSE0_START_D_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_D_0_H_PULSE0_START_D_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_D_0_H_PULSE0_START_D_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_D_0_H_PULSE0_START_D_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// H Pulse 0 End D
//  (minimum -=PS_=-H_PULSE0_START_D+1)
#define DC_DISP_H_PULSE0_POSITION_D_0_H_PULSE0_END_D_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_H_PULSE0_POSITION_D_0_H_PULSE0_END_D_FIELD                      (_MK_MASK_CONST(0x1fff) << DC_DISP_H_PULSE0_POSITION_D_0_H_PULSE0_END_D_SHIFT)
#define DC_DISP_H_PULSE0_POSITION_D_0_H_PULSE0_END_D_RANGE                      28:16
#define DC_DISP_H_PULSE0_POSITION_D_0_H_PULSE0_END_D_WOFFSET                    0x0
#define DC_DISP_H_PULSE0_POSITION_D_0_H_PULSE0_END_D_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_D_0_H_PULSE0_END_D_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_D_0_H_PULSE0_END_D_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE0_POSITION_D_0_H_PULSE0_END_D_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Horizontal pulse 1 is programmable pulse that repeats every line.
// In the NORMAL mode, this signal can have several pulses (A to D) per line with programmable
//  witdh as defined by the pairs of start and end positions. The pulses must not overlap
//  and must occur in sequence: pulse A, then pulse B, etc.
//  In this case, the Enable field must be set to one of the End position. If the Enable field
//  is set to one of the Start position then the pulse generator will stop as if the Enable
//  field is set to the previous End position. If Enable field is set to Start A position then
//  no pulse is generated.
// In the ONE_CLOCK mode this signal can have up to twice the number of pulses per line with
//  each pulse having a width of 1 pixel clock. In this mode, the position of the one-clock
//  pulses correspond to the enabled Start and End positions.
// Regardless of the mode, the pulse generator processes the pairs of start and end position
//  sequentially in the order of: Start A, End A, Start B, End B, etc.
//  So these start/end positions should be programmed in increasing order. If any of the
//  positions are programmed in non-increasing order (has invalid value) then the pulse
//  generator will stop at the last valid position.
// Polarity adjustment is made prior to V display qualification.
// This register specifies options for Horizontal pulse 1.

// Register DC_DISP_H_PULSE1_CONTROL_0  // H Pulse 1 Control
#define DC_DISP_H_PULSE1_CONTROL_0                      _MK_ADDR_CONST(0x410)
#define DC_DISP_H_PULSE1_CONTROL_0_SECURE                       0x0
#define DC_DISP_H_PULSE1_CONTROL_0_WORD_COUNT                   0x1
#define DC_DISP_H_PULSE1_CONTROL_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_CONTROL_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_CONTROL_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_CONTROL_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_CONTROL_0_READ_MASK                    _MK_MASK_CONST(0xfd8)
#define DC_DISP_H_PULSE1_CONTROL_0_WRITE_MASK                   _MK_MASK_CONST(0xfd8)
// H Pulse 1 Mode   0= Normal mode
//   1= Single-clock mode
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_MODE_SHIFT                  _MK_SHIFT_CONST(3)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_MODE_FIELD                  (_MK_MASK_CONST(0x1) << DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_MODE_SHIFT)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_MODE_RANGE                  3:3
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_MODE_WOFFSET                        0x0
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_MODE_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_MODE_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_MODE_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_MODE_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_MODE_NORMAL                 _MK_ENUM_CONST(0)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_MODE_ONE_CLOCK                      _MK_ENUM_CONST(1)

// H Pulse 1 Polarity   0= High
//   1= Low
//  Polarity adjustment is done before the
//  vertical qualifier is applied
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_POLARITY_SHIFT                      _MK_SHIFT_CONST(4)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_POLARITY_FIELD                      (_MK_MASK_CONST(0x1) << DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_POLARITY_SHIFT)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_POLARITY_RANGE                      4:4
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_POLARITY_WOFFSET                    0x0
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_POLARITY_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_POLARITY_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_POLARITY_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_POLARITY_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_POLARITY_HIGH                       _MK_ENUM_CONST(0)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_POLARITY_LOW                        _MK_ENUM_CONST(1)

// H Pulse 1 Vertical Qualifier   0= always running
//   2= run during vertical active area
//   3= run during vertical active plus 1 line
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_V_QUAL_SHIFT                        _MK_SHIFT_CONST(6)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_V_QUAL_FIELD                        (_MK_MASK_CONST(0x3) << DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_V_QUAL_SHIFT)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_V_QUAL_RANGE                        7:6
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_V_QUAL_WOFFSET                      0x0
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_V_QUAL_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_V_QUAL_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_V_QUAL_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_V_QUAL_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_V_QUAL_ALWAYS                       _MK_ENUM_CONST(0)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_V_QUAL_VACTIVE                      _MK_ENUM_CONST(2)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_V_QUAL_VACTIVE1                     _MK_ENUM_CONST(3)

// H Pulse 1 Last point   0= end on Start A position
//   1= end on End A position
//   2= end on Start B position
//   3= end on End B position
//   4= end on Start C position
//   5= end on End C position
//   6= end on Start D position
//   7= end on End D position
//   others= reserved
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_LAST_SHIFT                  _MK_SHIFT_CONST(8)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_LAST_FIELD                  (_MK_MASK_CONST(0xf) << DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_LAST_SHIFT)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_LAST_RANGE                  11:8
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_LAST_WOFFSET                        0x0
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_LAST_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_LAST_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_LAST_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_LAST_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_LAST_START_A                        _MK_ENUM_CONST(0)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_LAST_END_A                  _MK_ENUM_CONST(1)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_LAST_START_B                        _MK_ENUM_CONST(2)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_LAST_END_B                  _MK_ENUM_CONST(3)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_LAST_START_C                        _MK_ENUM_CONST(4)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_LAST_END_C                  _MK_ENUM_CONST(5)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_LAST_START_D                        _MK_ENUM_CONST(6)
#define DC_DISP_H_PULSE1_CONTROL_0_H_PULSE1_LAST_END_D                  _MK_ENUM_CONST(7)


// Register DC_DISP_H_PULSE1_POSITION_A_0  // H Pulse 1 Position A
#define DC_DISP_H_PULSE1_POSITION_A_0                   _MK_ADDR_CONST(0x411)
#define DC_DISP_H_PULSE1_POSITION_A_0_SECURE                    0x0
#define DC_DISP_H_PULSE1_POSITION_A_0_WORD_COUNT                        0x1
#define DC_DISP_H_PULSE1_POSITION_A_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_A_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_A_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_A_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_A_0_READ_MASK                         _MK_MASK_CONST(0x1fff1fff)
#define DC_DISP_H_PULSE1_POSITION_A_0_WRITE_MASK                        _MK_MASK_CONST(0x1fff1fff)
// H Pulse 1 Start A
//  (minimum 0)
#define DC_DISP_H_PULSE1_POSITION_A_0_H_PULSE1_START_A_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_H_PULSE1_POSITION_A_0_H_PULSE1_START_A_FIELD                    (_MK_MASK_CONST(0x1fff) << DC_DISP_H_PULSE1_POSITION_A_0_H_PULSE1_START_A_SHIFT)
#define DC_DISP_H_PULSE1_POSITION_A_0_H_PULSE1_START_A_RANGE                    12:0
#define DC_DISP_H_PULSE1_POSITION_A_0_H_PULSE1_START_A_WOFFSET                  0x0
#define DC_DISP_H_PULSE1_POSITION_A_0_H_PULSE1_START_A_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_A_0_H_PULSE1_START_A_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_A_0_H_PULSE1_START_A_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_A_0_H_PULSE1_START_A_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// H Pulse 1 End A
//  (minimum -=PS_=-H_PULSE1_START_A+1)
#define DC_DISP_H_PULSE1_POSITION_A_0_H_PULSE1_END_A_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_H_PULSE1_POSITION_A_0_H_PULSE1_END_A_FIELD                      (_MK_MASK_CONST(0x1fff) << DC_DISP_H_PULSE1_POSITION_A_0_H_PULSE1_END_A_SHIFT)
#define DC_DISP_H_PULSE1_POSITION_A_0_H_PULSE1_END_A_RANGE                      28:16
#define DC_DISP_H_PULSE1_POSITION_A_0_H_PULSE1_END_A_WOFFSET                    0x0
#define DC_DISP_H_PULSE1_POSITION_A_0_H_PULSE1_END_A_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_A_0_H_PULSE1_END_A_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_A_0_H_PULSE1_END_A_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_A_0_H_PULSE1_END_A_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register DC_DISP_H_PULSE1_POSITION_B_0  // H Pulse 1 Position B
#define DC_DISP_H_PULSE1_POSITION_B_0                   _MK_ADDR_CONST(0x412)
#define DC_DISP_H_PULSE1_POSITION_B_0_SECURE                    0x0
#define DC_DISP_H_PULSE1_POSITION_B_0_WORD_COUNT                        0x1
#define DC_DISP_H_PULSE1_POSITION_B_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_B_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_B_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_B_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_B_0_READ_MASK                         _MK_MASK_CONST(0x1fff1fff)
#define DC_DISP_H_PULSE1_POSITION_B_0_WRITE_MASK                        _MK_MASK_CONST(0x1fff1fff)
// H Pulse 1 Start B
//  (minimum -=PS_=-H_PULSE1_END_A+1)
#define DC_DISP_H_PULSE1_POSITION_B_0_H_PULSE1_START_B_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_H_PULSE1_POSITION_B_0_H_PULSE1_START_B_FIELD                    (_MK_MASK_CONST(0x1fff) << DC_DISP_H_PULSE1_POSITION_B_0_H_PULSE1_START_B_SHIFT)
#define DC_DISP_H_PULSE1_POSITION_B_0_H_PULSE1_START_B_RANGE                    12:0
#define DC_DISP_H_PULSE1_POSITION_B_0_H_PULSE1_START_B_WOFFSET                  0x0
#define DC_DISP_H_PULSE1_POSITION_B_0_H_PULSE1_START_B_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_B_0_H_PULSE1_START_B_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_B_0_H_PULSE1_START_B_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_B_0_H_PULSE1_START_B_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// H Pulse 1 End B
//  (minimum -=PS_=-H_PULSE1_START_B+1)
#define DC_DISP_H_PULSE1_POSITION_B_0_H_PULSE1_END_B_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_H_PULSE1_POSITION_B_0_H_PULSE1_END_B_FIELD                      (_MK_MASK_CONST(0x1fff) << DC_DISP_H_PULSE1_POSITION_B_0_H_PULSE1_END_B_SHIFT)
#define DC_DISP_H_PULSE1_POSITION_B_0_H_PULSE1_END_B_RANGE                      28:16
#define DC_DISP_H_PULSE1_POSITION_B_0_H_PULSE1_END_B_WOFFSET                    0x0
#define DC_DISP_H_PULSE1_POSITION_B_0_H_PULSE1_END_B_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_B_0_H_PULSE1_END_B_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_B_0_H_PULSE1_END_B_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_B_0_H_PULSE1_END_B_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register DC_DISP_H_PULSE1_POSITION_C_0  // H Pulse 1 Position C
#define DC_DISP_H_PULSE1_POSITION_C_0                   _MK_ADDR_CONST(0x413)
#define DC_DISP_H_PULSE1_POSITION_C_0_SECURE                    0x0
#define DC_DISP_H_PULSE1_POSITION_C_0_WORD_COUNT                        0x1
#define DC_DISP_H_PULSE1_POSITION_C_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_C_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_C_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_C_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_C_0_READ_MASK                         _MK_MASK_CONST(0x1fff1fff)
#define DC_DISP_H_PULSE1_POSITION_C_0_WRITE_MASK                        _MK_MASK_CONST(0x1fff1fff)
// H Pulse 1 Start C
//  (minimum -=PS_=-H_PULSE1_END_B+1)
#define DC_DISP_H_PULSE1_POSITION_C_0_H_PULSE1_START_C_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_H_PULSE1_POSITION_C_0_H_PULSE1_START_C_FIELD                    (_MK_MASK_CONST(0x1fff) << DC_DISP_H_PULSE1_POSITION_C_0_H_PULSE1_START_C_SHIFT)
#define DC_DISP_H_PULSE1_POSITION_C_0_H_PULSE1_START_C_RANGE                    12:0
#define DC_DISP_H_PULSE1_POSITION_C_0_H_PULSE1_START_C_WOFFSET                  0x0
#define DC_DISP_H_PULSE1_POSITION_C_0_H_PULSE1_START_C_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_C_0_H_PULSE1_START_C_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_C_0_H_PULSE1_START_C_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_C_0_H_PULSE1_START_C_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// H Pulse 1 End C
//  (minimum -=PS_=-H_PULSE1_START_C+1)
#define DC_DISP_H_PULSE1_POSITION_C_0_H_PULSE1_END_C_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_H_PULSE1_POSITION_C_0_H_PULSE1_END_C_FIELD                      (_MK_MASK_CONST(0x1fff) << DC_DISP_H_PULSE1_POSITION_C_0_H_PULSE1_END_C_SHIFT)
#define DC_DISP_H_PULSE1_POSITION_C_0_H_PULSE1_END_C_RANGE                      28:16
#define DC_DISP_H_PULSE1_POSITION_C_0_H_PULSE1_END_C_WOFFSET                    0x0
#define DC_DISP_H_PULSE1_POSITION_C_0_H_PULSE1_END_C_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_C_0_H_PULSE1_END_C_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_C_0_H_PULSE1_END_C_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_C_0_H_PULSE1_END_C_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register DC_DISP_H_PULSE1_POSITION_D_0  // H Pulse 1 Position D
#define DC_DISP_H_PULSE1_POSITION_D_0                   _MK_ADDR_CONST(0x414)
#define DC_DISP_H_PULSE1_POSITION_D_0_SECURE                    0x0
#define DC_DISP_H_PULSE1_POSITION_D_0_WORD_COUNT                        0x1
#define DC_DISP_H_PULSE1_POSITION_D_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_D_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_D_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_D_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_D_0_READ_MASK                         _MK_MASK_CONST(0x1fff1fff)
#define DC_DISP_H_PULSE1_POSITION_D_0_WRITE_MASK                        _MK_MASK_CONST(0x1fff1fff)
// H Pulse 1 Start D
//  (minimum -=PS_=-H_PULSE1_END_C+1)
#define DC_DISP_H_PULSE1_POSITION_D_0_H_PULSE1_START_D_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_H_PULSE1_POSITION_D_0_H_PULSE1_START_D_FIELD                    (_MK_MASK_CONST(0x1fff) << DC_DISP_H_PULSE1_POSITION_D_0_H_PULSE1_START_D_SHIFT)
#define DC_DISP_H_PULSE1_POSITION_D_0_H_PULSE1_START_D_RANGE                    12:0
#define DC_DISP_H_PULSE1_POSITION_D_0_H_PULSE1_START_D_WOFFSET                  0x0
#define DC_DISP_H_PULSE1_POSITION_D_0_H_PULSE1_START_D_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_D_0_H_PULSE1_START_D_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_D_0_H_PULSE1_START_D_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_D_0_H_PULSE1_START_D_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// H Pulse 1 End D
//  (minimum -=PS_=-H_PULSE1_START_D+1)
#define DC_DISP_H_PULSE1_POSITION_D_0_H_PULSE1_END_D_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_H_PULSE1_POSITION_D_0_H_PULSE1_END_D_FIELD                      (_MK_MASK_CONST(0x1fff) << DC_DISP_H_PULSE1_POSITION_D_0_H_PULSE1_END_D_SHIFT)
#define DC_DISP_H_PULSE1_POSITION_D_0_H_PULSE1_END_D_RANGE                      28:16
#define DC_DISP_H_PULSE1_POSITION_D_0_H_PULSE1_END_D_WOFFSET                    0x0
#define DC_DISP_H_PULSE1_POSITION_D_0_H_PULSE1_END_D_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_D_0_H_PULSE1_END_D_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_D_0_H_PULSE1_END_D_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE1_POSITION_D_0_H_PULSE1_END_D_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Horizontal pulse 2 is programmable pulse that repeats every line.
// In the NORMAL mode, this signal can have several pulses (A to D) per line with programmable
//  witdh as defined by the pairs of start and end positions. The pulses must not overlap
//  and must occur in sequence: pulse A, then pulse B, etc.
//  In this case, the Enable field must be set to one of the End position. If the Enable field
//  is set to one of the Start position then the pulse generator will stop as if the Enable
//  field is set to the previous End position. If Enable field is set to Start A position then
//  no pulse is generated.
// In the ONE_CLOCK mode this signal can have up to twice the number of pulses per line with
//  each pulse having a width of 1 pixel clock. In this mode, the position of the one-clock
//  pulses correspond to the enabled Start and End positions.
// Regardless of the mode, the pulse generator processes the pairs of start and end position
//  sequentially in the order of: Start A, End A, Start B, End B, etc.
//  So these start/end positions should be programmed in increasing order. If any of the
//  positions are programmed in non-increasing order (has invalid value) then the pulse
//  generator will stop at the last valid position.
// Polarity adjustment is made prior to V display qualification.
// This register specifies options for Horizontal pulse 2.

// Register DC_DISP_H_PULSE2_CONTROL_0  // H Pulse 2 Control
#define DC_DISP_H_PULSE2_CONTROL_0                      _MK_ADDR_CONST(0x415)
#define DC_DISP_H_PULSE2_CONTROL_0_SECURE                       0x0
#define DC_DISP_H_PULSE2_CONTROL_0_WORD_COUNT                   0x1
#define DC_DISP_H_PULSE2_CONTROL_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_CONTROL_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_CONTROL_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_CONTROL_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_CONTROL_0_READ_MASK                    _MK_MASK_CONST(0xfd8)
#define DC_DISP_H_PULSE2_CONTROL_0_WRITE_MASK                   _MK_MASK_CONST(0xfd8)
// H Pulse 2 Mode   0= Normal mode
//   1= Single-clock mode
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_MODE_SHIFT                  _MK_SHIFT_CONST(3)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_MODE_FIELD                  (_MK_MASK_CONST(0x1) << DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_MODE_SHIFT)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_MODE_RANGE                  3:3
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_MODE_WOFFSET                        0x0
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_MODE_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_MODE_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_MODE_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_MODE_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_MODE_NORMAL                 _MK_ENUM_CONST(0)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_MODE_ONE_CLOCK                      _MK_ENUM_CONST(1)

// H Pulse 2 Polarity   0= High
//   1= Low
//  Polarity adjustment is done before the
//  vertical qualifier is applied
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_POLARITY_SHIFT                      _MK_SHIFT_CONST(4)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_POLARITY_FIELD                      (_MK_MASK_CONST(0x1) << DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_POLARITY_SHIFT)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_POLARITY_RANGE                      4:4
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_POLARITY_WOFFSET                    0x0
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_POLARITY_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_POLARITY_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_POLARITY_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_POLARITY_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_POLARITY_HIGH                       _MK_ENUM_CONST(0)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_POLARITY_LOW                        _MK_ENUM_CONST(1)

// H Pulse 2 Vertical Qualifier   0= always running
//   2= run during vertical active area
//   3= run during vertical active plus 1 line
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_V_QUAL_SHIFT                        _MK_SHIFT_CONST(6)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_V_QUAL_FIELD                        (_MK_MASK_CONST(0x3) << DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_V_QUAL_SHIFT)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_V_QUAL_RANGE                        7:6
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_V_QUAL_WOFFSET                      0x0
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_V_QUAL_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_V_QUAL_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_V_QUAL_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_V_QUAL_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_V_QUAL_ALWAYS                       _MK_ENUM_CONST(0)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_V_QUAL_VACTIVE                      _MK_ENUM_CONST(2)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_V_QUAL_VACTIVE1                     _MK_ENUM_CONST(3)

// H Pulse 2 Last point   0= end on Start A position
//   1= end on End A position
//   2= end on Start B position
//   3= end on End B position
//   4= end on Start C position
//   5= end on End C position
//   6= end on Start D position
//   7= end on End D position
//   others= reserved
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_LAST_SHIFT                  _MK_SHIFT_CONST(8)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_LAST_FIELD                  (_MK_MASK_CONST(0xf) << DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_LAST_SHIFT)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_LAST_RANGE                  11:8
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_LAST_WOFFSET                        0x0
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_LAST_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_LAST_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_LAST_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_LAST_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_LAST_START_A                        _MK_ENUM_CONST(0)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_LAST_END_A                  _MK_ENUM_CONST(1)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_LAST_START_B                        _MK_ENUM_CONST(2)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_LAST_END_B                  _MK_ENUM_CONST(3)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_LAST_START_C                        _MK_ENUM_CONST(4)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_LAST_END_C                  _MK_ENUM_CONST(5)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_LAST_START_D                        _MK_ENUM_CONST(6)
#define DC_DISP_H_PULSE2_CONTROL_0_H_PULSE2_LAST_END_D                  _MK_ENUM_CONST(7)


// Register DC_DISP_H_PULSE2_POSITION_A_0  // H Pulse 2 Position A
#define DC_DISP_H_PULSE2_POSITION_A_0                   _MK_ADDR_CONST(0x416)
#define DC_DISP_H_PULSE2_POSITION_A_0_SECURE                    0x0
#define DC_DISP_H_PULSE2_POSITION_A_0_WORD_COUNT                        0x1
#define DC_DISP_H_PULSE2_POSITION_A_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_A_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_A_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_A_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_A_0_READ_MASK                         _MK_MASK_CONST(0x1fff1fff)
#define DC_DISP_H_PULSE2_POSITION_A_0_WRITE_MASK                        _MK_MASK_CONST(0x1fff1fff)
// H Pulse 2 Start A
//  (minimum 0)
#define DC_DISP_H_PULSE2_POSITION_A_0_H_PULSE2_START_A_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_H_PULSE2_POSITION_A_0_H_PULSE2_START_A_FIELD                    (_MK_MASK_CONST(0x1fff) << DC_DISP_H_PULSE2_POSITION_A_0_H_PULSE2_START_A_SHIFT)
#define DC_DISP_H_PULSE2_POSITION_A_0_H_PULSE2_START_A_RANGE                    12:0
#define DC_DISP_H_PULSE2_POSITION_A_0_H_PULSE2_START_A_WOFFSET                  0x0
#define DC_DISP_H_PULSE2_POSITION_A_0_H_PULSE2_START_A_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_A_0_H_PULSE2_START_A_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_A_0_H_PULSE2_START_A_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_A_0_H_PULSE2_START_A_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// H Pulse 2 End A
//  (minimum -=PS_=-H_PULSE2_START_A+1)
#define DC_DISP_H_PULSE2_POSITION_A_0_H_PULSE2_END_A_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_H_PULSE2_POSITION_A_0_H_PULSE2_END_A_FIELD                      (_MK_MASK_CONST(0x1fff) << DC_DISP_H_PULSE2_POSITION_A_0_H_PULSE2_END_A_SHIFT)
#define DC_DISP_H_PULSE2_POSITION_A_0_H_PULSE2_END_A_RANGE                      28:16
#define DC_DISP_H_PULSE2_POSITION_A_0_H_PULSE2_END_A_WOFFSET                    0x0
#define DC_DISP_H_PULSE2_POSITION_A_0_H_PULSE2_END_A_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_A_0_H_PULSE2_END_A_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_A_0_H_PULSE2_END_A_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_A_0_H_PULSE2_END_A_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register DC_DISP_H_PULSE2_POSITION_B_0  // H Pulse 2 position B
#define DC_DISP_H_PULSE2_POSITION_B_0                   _MK_ADDR_CONST(0x417)
#define DC_DISP_H_PULSE2_POSITION_B_0_SECURE                    0x0
#define DC_DISP_H_PULSE2_POSITION_B_0_WORD_COUNT                        0x1
#define DC_DISP_H_PULSE2_POSITION_B_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_B_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_B_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_B_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_B_0_READ_MASK                         _MK_MASK_CONST(0x1fff1fff)
#define DC_DISP_H_PULSE2_POSITION_B_0_WRITE_MASK                        _MK_MASK_CONST(0x1fff1fff)
// H Pulse 2 Start B
//  (minimum -=PS_=-H_PULSE2_END_A+1)
#define DC_DISP_H_PULSE2_POSITION_B_0_H_PULSE2_START_B_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_H_PULSE2_POSITION_B_0_H_PULSE2_START_B_FIELD                    (_MK_MASK_CONST(0x1fff) << DC_DISP_H_PULSE2_POSITION_B_0_H_PULSE2_START_B_SHIFT)
#define DC_DISP_H_PULSE2_POSITION_B_0_H_PULSE2_START_B_RANGE                    12:0
#define DC_DISP_H_PULSE2_POSITION_B_0_H_PULSE2_START_B_WOFFSET                  0x0
#define DC_DISP_H_PULSE2_POSITION_B_0_H_PULSE2_START_B_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_B_0_H_PULSE2_START_B_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_B_0_H_PULSE2_START_B_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_B_0_H_PULSE2_START_B_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// H Pulse 2 End B
//  (minimum -=PS_=-H_PULSE2_START_B+1)
#define DC_DISP_H_PULSE2_POSITION_B_0_H_PULSE2_END_B_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_H_PULSE2_POSITION_B_0_H_PULSE2_END_B_FIELD                      (_MK_MASK_CONST(0x1fff) << DC_DISP_H_PULSE2_POSITION_B_0_H_PULSE2_END_B_SHIFT)
#define DC_DISP_H_PULSE2_POSITION_B_0_H_PULSE2_END_B_RANGE                      28:16
#define DC_DISP_H_PULSE2_POSITION_B_0_H_PULSE2_END_B_WOFFSET                    0x0
#define DC_DISP_H_PULSE2_POSITION_B_0_H_PULSE2_END_B_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_B_0_H_PULSE2_END_B_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_B_0_H_PULSE2_END_B_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_B_0_H_PULSE2_END_B_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register DC_DISP_H_PULSE2_POSITION_C_0  // H Pulse 2 Position C
#define DC_DISP_H_PULSE2_POSITION_C_0                   _MK_ADDR_CONST(0x418)
#define DC_DISP_H_PULSE2_POSITION_C_0_SECURE                    0x0
#define DC_DISP_H_PULSE2_POSITION_C_0_WORD_COUNT                        0x1
#define DC_DISP_H_PULSE2_POSITION_C_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_C_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_C_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_C_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_C_0_READ_MASK                         _MK_MASK_CONST(0x1fff1fff)
#define DC_DISP_H_PULSE2_POSITION_C_0_WRITE_MASK                        _MK_MASK_CONST(0x1fff1fff)
// H Pulse 2 Start C
//  (minimum -=PS_=-H_PULSE2_END_B+1)
#define DC_DISP_H_PULSE2_POSITION_C_0_H_PULSE2_START_C_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_H_PULSE2_POSITION_C_0_H_PULSE2_START_C_FIELD                    (_MK_MASK_CONST(0x1fff) << DC_DISP_H_PULSE2_POSITION_C_0_H_PULSE2_START_C_SHIFT)
#define DC_DISP_H_PULSE2_POSITION_C_0_H_PULSE2_START_C_RANGE                    12:0
#define DC_DISP_H_PULSE2_POSITION_C_0_H_PULSE2_START_C_WOFFSET                  0x0
#define DC_DISP_H_PULSE2_POSITION_C_0_H_PULSE2_START_C_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_C_0_H_PULSE2_START_C_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_C_0_H_PULSE2_START_C_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_C_0_H_PULSE2_START_C_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// H Pulse 2 End C
//  (minimum -=PS_=-H_PULSE2_START_C+1)
#define DC_DISP_H_PULSE2_POSITION_C_0_H_PULSE2_END_C_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_H_PULSE2_POSITION_C_0_H_PULSE2_END_C_FIELD                      (_MK_MASK_CONST(0x1fff) << DC_DISP_H_PULSE2_POSITION_C_0_H_PULSE2_END_C_SHIFT)
#define DC_DISP_H_PULSE2_POSITION_C_0_H_PULSE2_END_C_RANGE                      28:16
#define DC_DISP_H_PULSE2_POSITION_C_0_H_PULSE2_END_C_WOFFSET                    0x0
#define DC_DISP_H_PULSE2_POSITION_C_0_H_PULSE2_END_C_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_C_0_H_PULSE2_END_C_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_C_0_H_PULSE2_END_C_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_C_0_H_PULSE2_END_C_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register DC_DISP_H_PULSE2_POSITION_D_0  // H Pulse 2 Position D
#define DC_DISP_H_PULSE2_POSITION_D_0                   _MK_ADDR_CONST(0x419)
#define DC_DISP_H_PULSE2_POSITION_D_0_SECURE                    0x0
#define DC_DISP_H_PULSE2_POSITION_D_0_WORD_COUNT                        0x1
#define DC_DISP_H_PULSE2_POSITION_D_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_D_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_D_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_D_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_D_0_READ_MASK                         _MK_MASK_CONST(0x1fff1fff)
#define DC_DISP_H_PULSE2_POSITION_D_0_WRITE_MASK                        _MK_MASK_CONST(0x1fff1fff)
// H Pulse 2 Start D
//  (minimum -=PS_=-H_PULSE2_END_C+1)
#define DC_DISP_H_PULSE2_POSITION_D_0_H_PULSE2_START_D_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_H_PULSE2_POSITION_D_0_H_PULSE2_START_D_FIELD                    (_MK_MASK_CONST(0x1fff) << DC_DISP_H_PULSE2_POSITION_D_0_H_PULSE2_START_D_SHIFT)
#define DC_DISP_H_PULSE2_POSITION_D_0_H_PULSE2_START_D_RANGE                    12:0
#define DC_DISP_H_PULSE2_POSITION_D_0_H_PULSE2_START_D_WOFFSET                  0x0
#define DC_DISP_H_PULSE2_POSITION_D_0_H_PULSE2_START_D_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_D_0_H_PULSE2_START_D_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_D_0_H_PULSE2_START_D_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_D_0_H_PULSE2_START_D_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// H Pulse 2 End D
//  (minimum -=PS_=-H_PULSE2_START_D+1)
#define DC_DISP_H_PULSE2_POSITION_D_0_H_PULSE2_END_D_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_H_PULSE2_POSITION_D_0_H_PULSE2_END_D_FIELD                      (_MK_MASK_CONST(0x1fff) << DC_DISP_H_PULSE2_POSITION_D_0_H_PULSE2_END_D_SHIFT)
#define DC_DISP_H_PULSE2_POSITION_D_0_H_PULSE2_END_D_RANGE                      28:16
#define DC_DISP_H_PULSE2_POSITION_D_0_H_PULSE2_END_D_WOFFSET                    0x0
#define DC_DISP_H_PULSE2_POSITION_D_0_H_PULSE2_END_D_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_D_0_H_PULSE2_END_D_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_D_0_H_PULSE2_END_D_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_H_PULSE2_POSITION_D_0_H_PULSE2_END_D_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Vertical pulse 0 is programmable pulse that repeats every frame.
// This signal can have several pulses (A to C) per frame with programmable witdh as defined
//  by the pairs of start and end positions. The pulses must not overlap and must occur
//  in sequence: pulse A, then pulse B, etc.
//  In this case, the Enable field must be set to one of the End position. If the Enable field
//  is set to one of the Start position then the pulse generator will stop as if the Enable
//  field is set to the previous End position. If Enable field is set to Start A position then
//  no pulse is generated.
// The pulse generator processes the pairs of start and end position sequentially in the order
//  of: Start A, End A, Start B, End B, etc.
//  So these start/end positions should be programmed in increasing order. If any of the
//  positions are programmed in non-increasing order (has invalid value) then the pulse
//  generator will stop at the last valid position.
// This register specifies options for Vertical pulse 0.

// Register DC_DISP_V_PULSE0_CONTROL_0  // V Pulse 0 Control
#define DC_DISP_V_PULSE0_CONTROL_0                      _MK_ADDR_CONST(0x41a)
#define DC_DISP_V_PULSE0_CONTROL_0_SECURE                       0x0
#define DC_DISP_V_PULSE0_CONTROL_0_WORD_COUNT                   0x1
#define DC_DISP_V_PULSE0_CONTROL_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_CONTROL_0_RESET_MASK                   _MK_MASK_CONST(0x1fff0000)
#define DC_DISP_V_PULSE0_CONTROL_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_CONTROL_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_CONTROL_0_READ_MASK                    _MK_MASK_CONST(0x1fff0fd0)
#define DC_DISP_V_PULSE0_CONTROL_0_WRITE_MASK                   _MK_MASK_CONST(0x1fff0fd0)
// V Pulse 0 Polarity   0= High
//   1= Low
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_POLARITY_SHIFT                      _MK_SHIFT_CONST(4)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_POLARITY_FIELD                      (_MK_MASK_CONST(0x1) << DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_POLARITY_SHIFT)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_POLARITY_RANGE                      4:4
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_POLARITY_WOFFSET                    0x0
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_POLARITY_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_POLARITY_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_POLARITY_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_POLARITY_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_POLARITY_HIGH                       _MK_ENUM_CONST(0)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_POLARITY_LOW                        _MK_ENUM_CONST(1)

// V Pulse 0 Delay   0= no delay
//   1= 1-line delay
//   2= 2-line delay
//   3= reserved
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_DELAY_SHIFT                 _MK_SHIFT_CONST(6)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_DELAY_FIELD                 (_MK_MASK_CONST(0x3) << DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_DELAY_SHIFT)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_DELAY_RANGE                 7:6
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_DELAY_WOFFSET                       0x0
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_DELAY_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_DELAY_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_DELAY_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_DELAY_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_DELAY_NODELAY                       _MK_ENUM_CONST(0)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_DELAY_DELAY1                        _MK_ENUM_CONST(1)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_DELAY_DELAY2                        _MK_ENUM_CONST(2)

// V Pulse 0 Last point   0= end on Start A position
//   1= end on End A position
//   2= end on Start B position
//   3= end on End B position
//   4= end on Start C position
//   5= end on End C position
//   others= reserved
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_LAST_SHIFT                  _MK_SHIFT_CONST(8)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_LAST_FIELD                  (_MK_MASK_CONST(0xf) << DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_LAST_SHIFT)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_LAST_RANGE                  11:8
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_LAST_WOFFSET                        0x0
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_LAST_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_LAST_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_LAST_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_LAST_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_LAST_START_A                        _MK_ENUM_CONST(0)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_LAST_END_A                  _MK_ENUM_CONST(1)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_LAST_START_B                        _MK_ENUM_CONST(2)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_LAST_END_B                  _MK_ENUM_CONST(3)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_LAST_START_C                        _MK_ENUM_CONST(4)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_LAST_END_C                  _MK_ENUM_CONST(5)

// V Pulse 0 Horizontal Position
//  This parameter specifies the position where
//  V Pulse 0 can toggle with respect to H reference
//  point.
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_H_POSITION_SHIFT                    _MK_SHIFT_CONST(16)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_H_POSITION_FIELD                    (_MK_MASK_CONST(0x1fff) << DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_H_POSITION_SHIFT)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_H_POSITION_RANGE                    28:16
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_H_POSITION_WOFFSET                  0x0
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_H_POSITION_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_H_POSITION_DEFAULT_MASK                     _MK_MASK_CONST(0x1fff)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_H_POSITION_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_CONTROL_0_V_PULSE0_H_POSITION_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register DC_DISP_V_PULSE0_POSITION_A_0  // V Pulse 0 Position A
#define DC_DISP_V_PULSE0_POSITION_A_0                   _MK_ADDR_CONST(0x41b)
#define DC_DISP_V_PULSE0_POSITION_A_0_SECURE                    0x0
#define DC_DISP_V_PULSE0_POSITION_A_0_WORD_COUNT                        0x1
#define DC_DISP_V_PULSE0_POSITION_A_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_A_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_A_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_A_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_A_0_READ_MASK                         _MK_MASK_CONST(0x1fff1fff)
#define DC_DISP_V_PULSE0_POSITION_A_0_WRITE_MASK                        _MK_MASK_CONST(0x1fff1fff)
// V Pulse 0 Start A
//  (minimum 0)
#define DC_DISP_V_PULSE0_POSITION_A_0_V_PULSE0_START_A_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_V_PULSE0_POSITION_A_0_V_PULSE0_START_A_FIELD                    (_MK_MASK_CONST(0x1fff) << DC_DISP_V_PULSE0_POSITION_A_0_V_PULSE0_START_A_SHIFT)
#define DC_DISP_V_PULSE0_POSITION_A_0_V_PULSE0_START_A_RANGE                    12:0
#define DC_DISP_V_PULSE0_POSITION_A_0_V_PULSE0_START_A_WOFFSET                  0x0
#define DC_DISP_V_PULSE0_POSITION_A_0_V_PULSE0_START_A_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_A_0_V_PULSE0_START_A_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_A_0_V_PULSE0_START_A_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_A_0_V_PULSE0_START_A_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// V Pulse 0 End A
//  (minimum -=PS_=-V_PULSE0_START_A+1)
#define DC_DISP_V_PULSE0_POSITION_A_0_V_PULSE0_END_A_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_V_PULSE0_POSITION_A_0_V_PULSE0_END_A_FIELD                      (_MK_MASK_CONST(0x1fff) << DC_DISP_V_PULSE0_POSITION_A_0_V_PULSE0_END_A_SHIFT)
#define DC_DISP_V_PULSE0_POSITION_A_0_V_PULSE0_END_A_RANGE                      28:16
#define DC_DISP_V_PULSE0_POSITION_A_0_V_PULSE0_END_A_WOFFSET                    0x0
#define DC_DISP_V_PULSE0_POSITION_A_0_V_PULSE0_END_A_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_A_0_V_PULSE0_END_A_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_A_0_V_PULSE0_END_A_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_A_0_V_PULSE0_END_A_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register DC_DISP_V_PULSE0_POSITION_B_0  // V Pulse 0 Position B
#define DC_DISP_V_PULSE0_POSITION_B_0                   _MK_ADDR_CONST(0x41c)
#define DC_DISP_V_PULSE0_POSITION_B_0_SECURE                    0x0
#define DC_DISP_V_PULSE0_POSITION_B_0_WORD_COUNT                        0x1
#define DC_DISP_V_PULSE0_POSITION_B_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_B_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_B_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_B_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_B_0_READ_MASK                         _MK_MASK_CONST(0x1fff1fff)
#define DC_DISP_V_PULSE0_POSITION_B_0_WRITE_MASK                        _MK_MASK_CONST(0x1fff1fff)
// V Pulse 0 Start B
//  (minimum -=PS_=-V_PULSE0_END_A+1)
#define DC_DISP_V_PULSE0_POSITION_B_0_V_PULSE0_START_B_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_V_PULSE0_POSITION_B_0_V_PULSE0_START_B_FIELD                    (_MK_MASK_CONST(0x1fff) << DC_DISP_V_PULSE0_POSITION_B_0_V_PULSE0_START_B_SHIFT)
#define DC_DISP_V_PULSE0_POSITION_B_0_V_PULSE0_START_B_RANGE                    12:0
#define DC_DISP_V_PULSE0_POSITION_B_0_V_PULSE0_START_B_WOFFSET                  0x0
#define DC_DISP_V_PULSE0_POSITION_B_0_V_PULSE0_START_B_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_B_0_V_PULSE0_START_B_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_B_0_V_PULSE0_START_B_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_B_0_V_PULSE0_START_B_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// V Pulse 0 End B
//  (minimum -=PS_=-V_PULSE0_START_B+1)
#define DC_DISP_V_PULSE0_POSITION_B_0_V_PULSE0_END_B_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_V_PULSE0_POSITION_B_0_V_PULSE0_END_B_FIELD                      (_MK_MASK_CONST(0x1fff) << DC_DISP_V_PULSE0_POSITION_B_0_V_PULSE0_END_B_SHIFT)
#define DC_DISP_V_PULSE0_POSITION_B_0_V_PULSE0_END_B_RANGE                      28:16
#define DC_DISP_V_PULSE0_POSITION_B_0_V_PULSE0_END_B_WOFFSET                    0x0
#define DC_DISP_V_PULSE0_POSITION_B_0_V_PULSE0_END_B_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_B_0_V_PULSE0_END_B_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_B_0_V_PULSE0_END_B_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_B_0_V_PULSE0_END_B_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register DC_DISP_V_PULSE0_POSITION_C_0  // V Pulse 0 Position C
#define DC_DISP_V_PULSE0_POSITION_C_0                   _MK_ADDR_CONST(0x41d)
#define DC_DISP_V_PULSE0_POSITION_C_0_SECURE                    0x0
#define DC_DISP_V_PULSE0_POSITION_C_0_WORD_COUNT                        0x1
#define DC_DISP_V_PULSE0_POSITION_C_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_C_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_C_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_C_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_C_0_READ_MASK                         _MK_MASK_CONST(0x1fff1fff)
#define DC_DISP_V_PULSE0_POSITION_C_0_WRITE_MASK                        _MK_MASK_CONST(0x1fff1fff)
// V Pulse 0 Start C
//  (minimum -=PS_=-V_PULSE0_END_B+1)
#define DC_DISP_V_PULSE0_POSITION_C_0_V_PULSE0_START_C_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_V_PULSE0_POSITION_C_0_V_PULSE0_START_C_FIELD                    (_MK_MASK_CONST(0x1fff) << DC_DISP_V_PULSE0_POSITION_C_0_V_PULSE0_START_C_SHIFT)
#define DC_DISP_V_PULSE0_POSITION_C_0_V_PULSE0_START_C_RANGE                    12:0
#define DC_DISP_V_PULSE0_POSITION_C_0_V_PULSE0_START_C_WOFFSET                  0x0
#define DC_DISP_V_PULSE0_POSITION_C_0_V_PULSE0_START_C_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_C_0_V_PULSE0_START_C_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_C_0_V_PULSE0_START_C_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_C_0_V_PULSE0_START_C_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// V Pulse 0 End C
//  (minimum -=PS_=-V_PULSE0_START_C+1)
#define DC_DISP_V_PULSE0_POSITION_C_0_V_PULSE0_END_C_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_V_PULSE0_POSITION_C_0_V_PULSE0_END_C_FIELD                      (_MK_MASK_CONST(0x1fff) << DC_DISP_V_PULSE0_POSITION_C_0_V_PULSE0_END_C_SHIFT)
#define DC_DISP_V_PULSE0_POSITION_C_0_V_PULSE0_END_C_RANGE                      28:16
#define DC_DISP_V_PULSE0_POSITION_C_0_V_PULSE0_END_C_WOFFSET                    0x0
#define DC_DISP_V_PULSE0_POSITION_C_0_V_PULSE0_END_C_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_C_0_V_PULSE0_END_C_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_C_0_V_PULSE0_END_C_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE0_POSITION_C_0_V_PULSE0_END_C_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Vertical pulse 1 is programmable pulse that repeats every frame.
// This signal can have several pulses (A to C) per frame with programmable witdh as defined
//  by the pairs of start and end positions. The pulses must not overlap and must occur
//  in sequence: pulse A, then pulse B, etc.
//  In this case, the Enable field must be set to one of the End position. If the Enable field
//  is set to one of the Start position then the pulse generator will stop as if the Enable
//  field is set to the previous End position. If Enable field is set to Start A position then
//  no pulse is generated.
// The pulse generator processes the pairs of start and end position sequentially in the order
//  of: Start A, End A, Start B, End B, etc.
//  So these start/end positions should be programmed in increasing order. If any of the
//  positions are programmed in non-increasing order (has invalid value) then the pulse
//  generator will stop at the last valid position.
// This register specifies options for Vertical pulse 1.

// Register DC_DISP_V_PULSE1_CONTROL_0  // V pulse 1 Control
#define DC_DISP_V_PULSE1_CONTROL_0                      _MK_ADDR_CONST(0x41e)
#define DC_DISP_V_PULSE1_CONTROL_0_SECURE                       0x0
#define DC_DISP_V_PULSE1_CONTROL_0_WORD_COUNT                   0x1
#define DC_DISP_V_PULSE1_CONTROL_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_CONTROL_0_RESET_MASK                   _MK_MASK_CONST(0x1fff0000)
#define DC_DISP_V_PULSE1_CONTROL_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_CONTROL_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_CONTROL_0_READ_MASK                    _MK_MASK_CONST(0x1fff0fd0)
#define DC_DISP_V_PULSE1_CONTROL_0_WRITE_MASK                   _MK_MASK_CONST(0x1fff0fd0)
// V pulse 1 Polarity   0= High
//   1= Low
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_POLARITY_SHIFT                      _MK_SHIFT_CONST(4)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_POLARITY_FIELD                      (_MK_MASK_CONST(0x1) << DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_POLARITY_SHIFT)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_POLARITY_RANGE                      4:4
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_POLARITY_WOFFSET                    0x0
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_POLARITY_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_POLARITY_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_POLARITY_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_POLARITY_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_POLARITY_HIGH                       _MK_ENUM_CONST(0)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_POLARITY_LOW                        _MK_ENUM_CONST(1)

// V pulse 1 Delay   0= no delay
//   1= 1-line delay
//   2= 2-line delay
//   3= reserved
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_DELAY_SHIFT                 _MK_SHIFT_CONST(6)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_DELAY_FIELD                 (_MK_MASK_CONST(0x3) << DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_DELAY_SHIFT)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_DELAY_RANGE                 7:6
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_DELAY_WOFFSET                       0x0
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_DELAY_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_DELAY_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_DELAY_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_DELAY_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_DELAY_NODELAY                       _MK_ENUM_CONST(0)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_DELAY_DELAY1                        _MK_ENUM_CONST(1)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_DELAY_DELAY2                        _MK_ENUM_CONST(2)

// V pulse 1 Last point   0= end on Start A position
//   1= end on End A position
//   2= end on Start B position
//   3= end on End B position
//   4= end on Start C position
//   5= end on End C position
//   others= reserved
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_LAST_SHIFT                  _MK_SHIFT_CONST(8)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_LAST_FIELD                  (_MK_MASK_CONST(0xf) << DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_LAST_SHIFT)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_LAST_RANGE                  11:8
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_LAST_WOFFSET                        0x0
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_LAST_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_LAST_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_LAST_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_LAST_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_LAST_START_A                        _MK_ENUM_CONST(0)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_LAST_END_A                  _MK_ENUM_CONST(1)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_LAST_START_B                        _MK_ENUM_CONST(2)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_LAST_END_B                  _MK_ENUM_CONST(3)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_LAST_START_C                        _MK_ENUM_CONST(4)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_LAST_END_C                  _MK_ENUM_CONST(5)

// V Pulse 1 Horizontal Position
//  This parameter specifies the position where
//  V Pulse 1 can toggle with respect to H reference
//  point.
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_H_POSITION_SHIFT                    _MK_SHIFT_CONST(16)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_H_POSITION_FIELD                    (_MK_MASK_CONST(0x1fff) << DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_H_POSITION_SHIFT)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_H_POSITION_RANGE                    28:16
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_H_POSITION_WOFFSET                  0x0
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_H_POSITION_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_H_POSITION_DEFAULT_MASK                     _MK_MASK_CONST(0x1fff)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_H_POSITION_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_CONTROL_0_V_PULSE1_H_POSITION_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register DC_DISP_V_PULSE1_POSITION_A_0  // V Pulse 1 Position A
#define DC_DISP_V_PULSE1_POSITION_A_0                   _MK_ADDR_CONST(0x41f)
#define DC_DISP_V_PULSE1_POSITION_A_0_SECURE                    0x0
#define DC_DISP_V_PULSE1_POSITION_A_0_WORD_COUNT                        0x1
#define DC_DISP_V_PULSE1_POSITION_A_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_A_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_A_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_A_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_A_0_READ_MASK                         _MK_MASK_CONST(0x1fff1fff)
#define DC_DISP_V_PULSE1_POSITION_A_0_WRITE_MASK                        _MK_MASK_CONST(0x1fff1fff)
// V Pulse 1 Start A
//  (minimum 0)
#define DC_DISP_V_PULSE1_POSITION_A_0_V_PULSE1_START_A_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_V_PULSE1_POSITION_A_0_V_PULSE1_START_A_FIELD                    (_MK_MASK_CONST(0x1fff) << DC_DISP_V_PULSE1_POSITION_A_0_V_PULSE1_START_A_SHIFT)
#define DC_DISP_V_PULSE1_POSITION_A_0_V_PULSE1_START_A_RANGE                    12:0
#define DC_DISP_V_PULSE1_POSITION_A_0_V_PULSE1_START_A_WOFFSET                  0x0
#define DC_DISP_V_PULSE1_POSITION_A_0_V_PULSE1_START_A_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_A_0_V_PULSE1_START_A_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_A_0_V_PULSE1_START_A_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_A_0_V_PULSE1_START_A_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// V Pulse 1 End A
//  (minimum -=PS_=-V_PULSE1_START_A+1)
#define DC_DISP_V_PULSE1_POSITION_A_0_V_PULSE1_END_A_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_V_PULSE1_POSITION_A_0_V_PULSE1_END_A_FIELD                      (_MK_MASK_CONST(0x1fff) << DC_DISP_V_PULSE1_POSITION_A_0_V_PULSE1_END_A_SHIFT)
#define DC_DISP_V_PULSE1_POSITION_A_0_V_PULSE1_END_A_RANGE                      28:16
#define DC_DISP_V_PULSE1_POSITION_A_0_V_PULSE1_END_A_WOFFSET                    0x0
#define DC_DISP_V_PULSE1_POSITION_A_0_V_PULSE1_END_A_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_A_0_V_PULSE1_END_A_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_A_0_V_PULSE1_END_A_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_A_0_V_PULSE1_END_A_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register DC_DISP_V_PULSE1_POSITION_B_0  // V Pulse 1 Position B
#define DC_DISP_V_PULSE1_POSITION_B_0                   _MK_ADDR_CONST(0x420)
#define DC_DISP_V_PULSE1_POSITION_B_0_SECURE                    0x0
#define DC_DISP_V_PULSE1_POSITION_B_0_WORD_COUNT                        0x1
#define DC_DISP_V_PULSE1_POSITION_B_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_B_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_B_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_B_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_B_0_READ_MASK                         _MK_MASK_CONST(0x1fff1fff)
#define DC_DISP_V_PULSE1_POSITION_B_0_WRITE_MASK                        _MK_MASK_CONST(0x1fff1fff)
// V Pulse 1 Start B
//  (minimum -=PS_=-V_PULSE1_END_A+1)
#define DC_DISP_V_PULSE1_POSITION_B_0_V_PULSE1_START_B_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_V_PULSE1_POSITION_B_0_V_PULSE1_START_B_FIELD                    (_MK_MASK_CONST(0x1fff) << DC_DISP_V_PULSE1_POSITION_B_0_V_PULSE1_START_B_SHIFT)
#define DC_DISP_V_PULSE1_POSITION_B_0_V_PULSE1_START_B_RANGE                    12:0
#define DC_DISP_V_PULSE1_POSITION_B_0_V_PULSE1_START_B_WOFFSET                  0x0
#define DC_DISP_V_PULSE1_POSITION_B_0_V_PULSE1_START_B_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_B_0_V_PULSE1_START_B_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_B_0_V_PULSE1_START_B_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_B_0_V_PULSE1_START_B_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// V Pulse 1 End B
//  (minimum -=PS_=-V_PULSE1_START_B+1)
#define DC_DISP_V_PULSE1_POSITION_B_0_V_PULSE1_END_B_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_V_PULSE1_POSITION_B_0_V_PULSE1_END_B_FIELD                      (_MK_MASK_CONST(0x1fff) << DC_DISP_V_PULSE1_POSITION_B_0_V_PULSE1_END_B_SHIFT)
#define DC_DISP_V_PULSE1_POSITION_B_0_V_PULSE1_END_B_RANGE                      28:16
#define DC_DISP_V_PULSE1_POSITION_B_0_V_PULSE1_END_B_WOFFSET                    0x0
#define DC_DISP_V_PULSE1_POSITION_B_0_V_PULSE1_END_B_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_B_0_V_PULSE1_END_B_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_B_0_V_PULSE1_END_B_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_B_0_V_PULSE1_END_B_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register DC_DISP_V_PULSE1_POSITION_C_0  // V Pulse 1 Position C
#define DC_DISP_V_PULSE1_POSITION_C_0                   _MK_ADDR_CONST(0x421)
#define DC_DISP_V_PULSE1_POSITION_C_0_SECURE                    0x0
#define DC_DISP_V_PULSE1_POSITION_C_0_WORD_COUNT                        0x1
#define DC_DISP_V_PULSE1_POSITION_C_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_C_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_C_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_C_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_C_0_READ_MASK                         _MK_MASK_CONST(0x1fff1fff)
#define DC_DISP_V_PULSE1_POSITION_C_0_WRITE_MASK                        _MK_MASK_CONST(0x1fff1fff)
// V Pulse 1 Start C
//  (minimum -=PS_=-V_PULSE1_END_B+1)
#define DC_DISP_V_PULSE1_POSITION_C_0_V_PULSE1_START_C_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_V_PULSE1_POSITION_C_0_V_PULSE1_START_C_FIELD                    (_MK_MASK_CONST(0x1fff) << DC_DISP_V_PULSE1_POSITION_C_0_V_PULSE1_START_C_SHIFT)
#define DC_DISP_V_PULSE1_POSITION_C_0_V_PULSE1_START_C_RANGE                    12:0
#define DC_DISP_V_PULSE1_POSITION_C_0_V_PULSE1_START_C_WOFFSET                  0x0
#define DC_DISP_V_PULSE1_POSITION_C_0_V_PULSE1_START_C_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_C_0_V_PULSE1_START_C_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_C_0_V_PULSE1_START_C_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_C_0_V_PULSE1_START_C_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// V Pulse 1 End C
//  (minimum -=PS_=-V_PULSE1_START_C+1)
#define DC_DISP_V_PULSE1_POSITION_C_0_V_PULSE1_END_C_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_V_PULSE1_POSITION_C_0_V_PULSE1_END_C_FIELD                      (_MK_MASK_CONST(0x1fff) << DC_DISP_V_PULSE1_POSITION_C_0_V_PULSE1_END_C_SHIFT)
#define DC_DISP_V_PULSE1_POSITION_C_0_V_PULSE1_END_C_RANGE                      28:16
#define DC_DISP_V_PULSE1_POSITION_C_0_V_PULSE1_END_C_WOFFSET                    0x0
#define DC_DISP_V_PULSE1_POSITION_C_0_V_PULSE1_END_C_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_C_0_V_PULSE1_END_C_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_C_0_V_PULSE1_END_C_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE1_POSITION_C_0_V_PULSE1_END_C_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Vertical pulse 2 is programmable pulse that repeats every frame.
// This signal can have one pulse (A) per frame with programmable witdh as defined
//  by the pair of start and end positions.
//  In this case, the Enable field must be set to one of the End position. If the Enable field
//  is set to one of the Start position then the pulse generator will stop as if the Enable
//  field is set to the previous End position. If Enable field is set to Start A position then
//  no pulse is generated.
//  So these start/end positions should be programmed in increasing order. If any of the
//  positions are programmed in non-increasing order (has invalid value) then the pulse
//  generator will stop at the last valid position.
// This register specifies options for Vertical pulse 2.

// Register DC_DISP_V_PULSE2_CONTROL_0  // V pulse 2 Control
#define DC_DISP_V_PULSE2_CONTROL_0                      _MK_ADDR_CONST(0x422)
#define DC_DISP_V_PULSE2_CONTROL_0_SECURE                       0x0
#define DC_DISP_V_PULSE2_CONTROL_0_WORD_COUNT                   0x1
#define DC_DISP_V_PULSE2_CONTROL_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE2_CONTROL_0_RESET_MASK                   _MK_MASK_CONST(0x1fff0000)
#define DC_DISP_V_PULSE2_CONTROL_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE2_CONTROL_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE2_CONTROL_0_READ_MASK                    _MK_MASK_CONST(0x1fff0110)
#define DC_DISP_V_PULSE2_CONTROL_0_WRITE_MASK                   _MK_MASK_CONST(0x1fff0110)
// V pulse 2 Polarity   0= High
//   1= Low
#define DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_POLARITY_SHIFT                      _MK_SHIFT_CONST(4)
#define DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_POLARITY_FIELD                      (_MK_MASK_CONST(0x1) << DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_POLARITY_SHIFT)
#define DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_POLARITY_RANGE                      4:4
#define DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_POLARITY_WOFFSET                    0x0
#define DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_POLARITY_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_POLARITY_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_POLARITY_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_POLARITY_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_POLARITY_HIGH                       _MK_ENUM_CONST(0)
#define DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_POLARITY_LOW                        _MK_ENUM_CONST(1)

// V pulse 2 Last point   0= end on Start A position
//   1= end on End A position
//   others= reserved
#define DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_LAST_SHIFT                  _MK_SHIFT_CONST(8)
#define DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_LAST_FIELD                  (_MK_MASK_CONST(0x1) << DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_LAST_SHIFT)
#define DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_LAST_RANGE                  8:8
#define DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_LAST_WOFFSET                        0x0
#define DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_LAST_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_LAST_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_LAST_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_LAST_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_LAST_START_A                        _MK_ENUM_CONST(0)
#define DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_LAST_END_A                  _MK_ENUM_CONST(1)

// V Pulse 2 Horizontal Position
//  This parameter specifies the position where
//  V Pulse 2 can toggle with respect to H reference
//  point.
#define DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_H_POSITION_SHIFT                    _MK_SHIFT_CONST(16)
#define DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_H_POSITION_FIELD                    (_MK_MASK_CONST(0x1fff) << DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_H_POSITION_SHIFT)
#define DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_H_POSITION_RANGE                    28:16
#define DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_H_POSITION_WOFFSET                  0x0
#define DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_H_POSITION_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_H_POSITION_DEFAULT_MASK                     _MK_MASK_CONST(0x1fff)
#define DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_H_POSITION_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE2_CONTROL_0_V_PULSE2_H_POSITION_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register DC_DISP_V_PULSE2_POSITION_A_0  // V Pulse 2 Position A
#define DC_DISP_V_PULSE2_POSITION_A_0                   _MK_ADDR_CONST(0x423)
#define DC_DISP_V_PULSE2_POSITION_A_0_SECURE                    0x0
#define DC_DISP_V_PULSE2_POSITION_A_0_WORD_COUNT                        0x1
#define DC_DISP_V_PULSE2_POSITION_A_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE2_POSITION_A_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE2_POSITION_A_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE2_POSITION_A_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE2_POSITION_A_0_READ_MASK                         _MK_MASK_CONST(0x1fff1fff)
#define DC_DISP_V_PULSE2_POSITION_A_0_WRITE_MASK                        _MK_MASK_CONST(0x1fff1fff)
// V Pulse 2 Start A
//  (minimum 0)
#define DC_DISP_V_PULSE2_POSITION_A_0_V_PULSE2_START_A_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_V_PULSE2_POSITION_A_0_V_PULSE2_START_A_FIELD                    (_MK_MASK_CONST(0x1fff) << DC_DISP_V_PULSE2_POSITION_A_0_V_PULSE2_START_A_SHIFT)
#define DC_DISP_V_PULSE2_POSITION_A_0_V_PULSE2_START_A_RANGE                    12:0
#define DC_DISP_V_PULSE2_POSITION_A_0_V_PULSE2_START_A_WOFFSET                  0x0
#define DC_DISP_V_PULSE2_POSITION_A_0_V_PULSE2_START_A_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE2_POSITION_A_0_V_PULSE2_START_A_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE2_POSITION_A_0_V_PULSE2_START_A_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE2_POSITION_A_0_V_PULSE2_START_A_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// V Pulse 2 End A
//  (minimum -=PS_=-V_PULSE2_START_A+1)
#define DC_DISP_V_PULSE2_POSITION_A_0_V_PULSE2_END_A_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_V_PULSE2_POSITION_A_0_V_PULSE2_END_A_FIELD                      (_MK_MASK_CONST(0x1fff) << DC_DISP_V_PULSE2_POSITION_A_0_V_PULSE2_END_A_SHIFT)
#define DC_DISP_V_PULSE2_POSITION_A_0_V_PULSE2_END_A_RANGE                      28:16
#define DC_DISP_V_PULSE2_POSITION_A_0_V_PULSE2_END_A_WOFFSET                    0x0
#define DC_DISP_V_PULSE2_POSITION_A_0_V_PULSE2_END_A_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE2_POSITION_A_0_V_PULSE2_END_A_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE2_POSITION_A_0_V_PULSE2_END_A_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE2_POSITION_A_0_V_PULSE2_END_A_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Vertical pulse 3 is programmable pulse that repeats every frame.
// This signal can have one pulse (A) per frame with programmable witdh as defined
//  by the pair of start and end positions.
//  In this case, the Enable field must be set to one of the End position. If the Enable field
//  is set to one of the Start position then the pulse generator will stop as if the Enable
//  field is set to the previous End position. If Enable field is set to Start A position then
//  no pulse is generated.
//  So these start/end positions should be programmed in increasing order. If any of the
//  positions are programmed in non-increasing order (has invalid value) then the pulse
//  generator will stop at the last valid position.
// This register specifies options for Vertical pulse 2.

// Register DC_DISP_V_PULSE3_CONTROL_0  // V pulse 3 Control
#define DC_DISP_V_PULSE3_CONTROL_0                      _MK_ADDR_CONST(0x424)
#define DC_DISP_V_PULSE3_CONTROL_0_SECURE                       0x0
#define DC_DISP_V_PULSE3_CONTROL_0_WORD_COUNT                   0x1
#define DC_DISP_V_PULSE3_CONTROL_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE3_CONTROL_0_RESET_MASK                   _MK_MASK_CONST(0x1fff0010)
#define DC_DISP_V_PULSE3_CONTROL_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE3_CONTROL_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE3_CONTROL_0_READ_MASK                    _MK_MASK_CONST(0x1fff0110)
#define DC_DISP_V_PULSE3_CONTROL_0_WRITE_MASK                   _MK_MASK_CONST(0x1fff0110)
// V pulse 3 Polarity   0= High
//   1= Low
#define DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_POLARITY_SHIFT                      _MK_SHIFT_CONST(4)
#define DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_POLARITY_FIELD                      (_MK_MASK_CONST(0x1) << DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_POLARITY_SHIFT)
#define DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_POLARITY_RANGE                      4:4
#define DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_POLARITY_WOFFSET                    0x0
#define DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_POLARITY_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_POLARITY_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_POLARITY_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_POLARITY_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_POLARITY_HIGH                       _MK_ENUM_CONST(0)
#define DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_POLARITY_LOW                        _MK_ENUM_CONST(1)

// V pulse 3 Last point   0= end on Start A position
//   1= end on End A position
//   others= reserved
#define DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_LAST_SHIFT                  _MK_SHIFT_CONST(8)
#define DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_LAST_FIELD                  (_MK_MASK_CONST(0x1) << DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_LAST_SHIFT)
#define DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_LAST_RANGE                  8:8
#define DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_LAST_WOFFSET                        0x0
#define DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_LAST_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_LAST_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_LAST_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_LAST_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_LAST_START_A                        _MK_ENUM_CONST(0)
#define DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_LAST_END_A                  _MK_ENUM_CONST(1)

// V Pulse 3 Horizontal Position
//  This parameter specifies the position where
//  V Pulse 3 can toggle with respect to H reference
//  point.
#define DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_H_POSITION_SHIFT                    _MK_SHIFT_CONST(16)
#define DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_H_POSITION_FIELD                    (_MK_MASK_CONST(0x1fff) << DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_H_POSITION_SHIFT)
#define DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_H_POSITION_RANGE                    28:16
#define DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_H_POSITION_WOFFSET                  0x0
#define DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_H_POSITION_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_H_POSITION_DEFAULT_MASK                     _MK_MASK_CONST(0x1fff)
#define DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_H_POSITION_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE3_CONTROL_0_V_PULSE3_H_POSITION_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register DC_DISP_V_PULSE3_POSITION_A_0  // V Pulse 3 Position A
#define DC_DISP_V_PULSE3_POSITION_A_0                   _MK_ADDR_CONST(0x425)
#define DC_DISP_V_PULSE3_POSITION_A_0_SECURE                    0x0
#define DC_DISP_V_PULSE3_POSITION_A_0_WORD_COUNT                        0x1
#define DC_DISP_V_PULSE3_POSITION_A_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE3_POSITION_A_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE3_POSITION_A_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE3_POSITION_A_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE3_POSITION_A_0_READ_MASK                         _MK_MASK_CONST(0x1fff1fff)
#define DC_DISP_V_PULSE3_POSITION_A_0_WRITE_MASK                        _MK_MASK_CONST(0x1fff1fff)
// V Pulse 3 Start A
//  (minimum 0)
#define DC_DISP_V_PULSE3_POSITION_A_0_V_PULSE3_START_A_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_V_PULSE3_POSITION_A_0_V_PULSE3_START_A_FIELD                    (_MK_MASK_CONST(0x1fff) << DC_DISP_V_PULSE3_POSITION_A_0_V_PULSE3_START_A_SHIFT)
#define DC_DISP_V_PULSE3_POSITION_A_0_V_PULSE3_START_A_RANGE                    12:0
#define DC_DISP_V_PULSE3_POSITION_A_0_V_PULSE3_START_A_WOFFSET                  0x0
#define DC_DISP_V_PULSE3_POSITION_A_0_V_PULSE3_START_A_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE3_POSITION_A_0_V_PULSE3_START_A_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE3_POSITION_A_0_V_PULSE3_START_A_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE3_POSITION_A_0_V_PULSE3_START_A_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// V Pulse 3 End A
//  (minimum -=PS_=-V_PULSE3_START_A+1)
#define DC_DISP_V_PULSE3_POSITION_A_0_V_PULSE3_END_A_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_V_PULSE3_POSITION_A_0_V_PULSE3_END_A_FIELD                      (_MK_MASK_CONST(0x1fff) << DC_DISP_V_PULSE3_POSITION_A_0_V_PULSE3_END_A_SHIFT)
#define DC_DISP_V_PULSE3_POSITION_A_0_V_PULSE3_END_A_RANGE                      28:16
#define DC_DISP_V_PULSE3_POSITION_A_0_V_PULSE3_END_A_WOFFSET                    0x0
#define DC_DISP_V_PULSE3_POSITION_A_0_V_PULSE3_END_A_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE3_POSITION_A_0_V_PULSE3_END_A_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE3_POSITION_A_0_V_PULSE3_END_A_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_V_PULSE3_POSITION_A_0_V_PULSE3_END_A_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Display M0 signal
// M0 signal can be generated either using a line (horizontal) or a frame (vertical) clock and
//   it can be horizontally positioned with respect to H reference point.
//   This signal is typically output on LM0 pin.
// This register specifies options for M0 signal.

// Register DC_DISP_M0_CONTROL_0  // M0 Control
#define DC_DISP_M0_CONTROL_0                    _MK_ADDR_CONST(0x426)
#define DC_DISP_M0_CONTROL_0_SECURE                     0x0
#define DC_DISP_M0_CONTROL_0_WORD_COUNT                         0x1
#define DC_DISP_M0_CONTROL_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define DC_DISP_M0_CONTROL_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define DC_DISP_M0_CONTROL_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define DC_DISP_M0_CONTROL_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_M0_CONTROL_0_READ_MASK                  _MK_MASK_CONST(0x1fff1ff3)
#define DC_DISP_M0_CONTROL_0_WRITE_MASK                         _MK_MASK_CONST(0x1fff1ff3)
// M0 Clock Select   00= pixel clock (for diagnostic)
//   01= reserved
//   10= line clock
//   11= frame clock
#define DC_DISP_M0_CONTROL_0_M0_CLOCK_SELECT_SHIFT                      _MK_SHIFT_CONST(0)
#define DC_DISP_M0_CONTROL_0_M0_CLOCK_SELECT_FIELD                      (_MK_MASK_CONST(0x3) << DC_DISP_M0_CONTROL_0_M0_CLOCK_SELECT_SHIFT)
#define DC_DISP_M0_CONTROL_0_M0_CLOCK_SELECT_RANGE                      1:0
#define DC_DISP_M0_CONTROL_0_M0_CLOCK_SELECT_WOFFSET                    0x0
#define DC_DISP_M0_CONTROL_0_M0_CLOCK_SELECT_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_M0_CONTROL_0_M0_CLOCK_SELECT_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_M0_CONTROL_0_M0_CLOCK_SELECT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_M0_CONTROL_0_M0_CLOCK_SELECT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_M0_CONTROL_0_M0_CLOCK_SELECT_PCLK                       _MK_ENUM_CONST(0)
#define DC_DISP_M0_CONTROL_0_M0_CLOCK_SELECT_LCLK                       _MK_ENUM_CONST(2)
#define DC_DISP_M0_CONTROL_0_M0_CLOCK_SELECT_FCLK                       _MK_ENUM_CONST(3)

// M0 Phase Control   00= free-running
//   01= reserved
//   10= reset at beginning of vertical active
//       display
//   11= invert at beginning of frame
//  This should be set to free-running if
//  frame clock is used.
#define DC_DISP_M0_CONTROL_0_M0_PHASE_CONTROL_SHIFT                     _MK_SHIFT_CONST(4)
#define DC_DISP_M0_CONTROL_0_M0_PHASE_CONTROL_FIELD                     (_MK_MASK_CONST(0x3) << DC_DISP_M0_CONTROL_0_M0_PHASE_CONTROL_SHIFT)
#define DC_DISP_M0_CONTROL_0_M0_PHASE_CONTROL_RANGE                     5:4
#define DC_DISP_M0_CONTROL_0_M0_PHASE_CONTROL_WOFFSET                   0x0
#define DC_DISP_M0_CONTROL_0_M0_PHASE_CONTROL_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_M0_CONTROL_0_M0_PHASE_CONTROL_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_M0_CONTROL_0_M0_PHASE_CONTROL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_M0_CONTROL_0_M0_PHASE_CONTROL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_M0_CONTROL_0_M0_PHASE_CONTROL_FREE_RUN                  _MK_ENUM_CONST(0)
#define DC_DISP_M0_CONTROL_0_M0_PHASE_CONTROL_VACTIVE_RESTART                   _MK_ENUM_CONST(2)
#define DC_DISP_M0_CONTROL_0_M0_PHASE_CONTROL_FRAME_INVERT                      _MK_ENUM_CONST(3)

// M0 Phase Reset  This bit is effective only when M0 is not
//  free running.
//   0= frequency (phase) counter is not reset
//   1= frequency (phase) counter is reset at
//      beginning of vertical active display if
//      phase control is set to VACTIVE_RESTART
//      or at beginning of frame if phase
//      control is set to FRAME_INVERT
#define DC_DISP_M0_CONTROL_0_M0_PHASE_RESET_SHIFT                       _MK_SHIFT_CONST(6)
#define DC_DISP_M0_CONTROL_0_M0_PHASE_RESET_FIELD                       (_MK_MASK_CONST(0x1) << DC_DISP_M0_CONTROL_0_M0_PHASE_RESET_SHIFT)
#define DC_DISP_M0_CONTROL_0_M0_PHASE_RESET_RANGE                       6:6
#define DC_DISP_M0_CONTROL_0_M0_PHASE_RESET_WOFFSET                     0x0
#define DC_DISP_M0_CONTROL_0_M0_PHASE_RESET_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_M0_CONTROL_0_M0_PHASE_RESET_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_M0_CONTROL_0_M0_PHASE_RESET_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_M0_CONTROL_0_M0_PHASE_RESET_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_M0_CONTROL_0_M0_PHASE_RESET_DISABLE                     _MK_ENUM_CONST(0)
#define DC_DISP_M0_CONTROL_0_M0_PHASE_RESET_ENABLE                      _MK_ENUM_CONST(1)

// M0 Polarity   0= High
//   1= Low
//  Polarity adjustment is applied last after
//  phase control is applied.
#define DC_DISP_M0_CONTROL_0_M0_POLARITY_SHIFT                  _MK_SHIFT_CONST(7)
#define DC_DISP_M0_CONTROL_0_M0_POLARITY_FIELD                  (_MK_MASK_CONST(0x1) << DC_DISP_M0_CONTROL_0_M0_POLARITY_SHIFT)
#define DC_DISP_M0_CONTROL_0_M0_POLARITY_RANGE                  7:7
#define DC_DISP_M0_CONTROL_0_M0_POLARITY_WOFFSET                        0x0
#define DC_DISP_M0_CONTROL_0_M0_POLARITY_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_M0_CONTROL_0_M0_POLARITY_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_M0_CONTROL_0_M0_POLARITY_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_M0_CONTROL_0_M0_POLARITY_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_M0_CONTROL_0_M0_POLARITY_HIGH                   _MK_ENUM_CONST(0)
#define DC_DISP_M0_CONTROL_0_M0_POLARITY_LOW                    _MK_ENUM_CONST(1)

// M0 Period
//  This should be program to the half of the
//  desired M0 period (in lines) minus 1.
#define DC_DISP_M0_CONTROL_0_M0_PERIOD_SHIFT                    _MK_SHIFT_CONST(8)
#define DC_DISP_M0_CONTROL_0_M0_PERIOD_FIELD                    (_MK_MASK_CONST(0x1f) << DC_DISP_M0_CONTROL_0_M0_PERIOD_SHIFT)
#define DC_DISP_M0_CONTROL_0_M0_PERIOD_RANGE                    12:8
#define DC_DISP_M0_CONTROL_0_M0_PERIOD_WOFFSET                  0x0
#define DC_DISP_M0_CONTROL_0_M0_PERIOD_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_M0_CONTROL_0_M0_PERIOD_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_M0_CONTROL_0_M0_PERIOD_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_M0_CONTROL_0_M0_PERIOD_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// M0 Horizontal Position
//  This parameter specifies the position where
//  M0 can toggle with respect to H reference
//  point.
#define DC_DISP_M0_CONTROL_0_M0_H_POSITION_SHIFT                        _MK_SHIFT_CONST(16)
#define DC_DISP_M0_CONTROL_0_M0_H_POSITION_FIELD                        (_MK_MASK_CONST(0x1fff) << DC_DISP_M0_CONTROL_0_M0_H_POSITION_SHIFT)
#define DC_DISP_M0_CONTROL_0_M0_H_POSITION_RANGE                        28:16
#define DC_DISP_M0_CONTROL_0_M0_H_POSITION_WOFFSET                      0x0
#define DC_DISP_M0_CONTROL_0_M0_H_POSITION_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_M0_CONTROL_0_M0_H_POSITION_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_M0_CONTROL_0_M0_H_POSITION_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_M0_CONTROL_0_M0_H_POSITION_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Display M1 signal
// M1 signal can be generated either using a line (horizontal) or a frame (vertical) clock and
//  it can be horizontally positioned with respect to H reference point.
//  This signal is typically output on LM1 pin.
// This register specifies options for M1 signal.

// Register DC_DISP_M1_CONTROL_0  // M1 Control
#define DC_DISP_M1_CONTROL_0                    _MK_ADDR_CONST(0x427)
#define DC_DISP_M1_CONTROL_0_SECURE                     0x0
#define DC_DISP_M1_CONTROL_0_WORD_COUNT                         0x1
#define DC_DISP_M1_CONTROL_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define DC_DISP_M1_CONTROL_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define DC_DISP_M1_CONTROL_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define DC_DISP_M1_CONTROL_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_M1_CONTROL_0_READ_MASK                  _MK_MASK_CONST(0x1fff1ff3)
#define DC_DISP_M1_CONTROL_0_WRITE_MASK                         _MK_MASK_CONST(0x1fff1ff3)
// M1 Clock Select   00= pixel clock (for diagnostic)
//   01= synchronous to M0 provided that M0 is
//       generated using line clock. This will
//       not work if M0 is not generated using
//       line clock.
//       In this case, M1 is controlled by
//       -=PS_=-M0_PHASE_RESET and -=PS_=-M0_PERIOD,
//       -=PS_=-M1_PHASE_CONTROL and -=PS_=-M1_POLARITY.
//   10= line clock
//   11= frame clock
#define DC_DISP_M1_CONTROL_0_M1_CLOCK_SELECT_SHIFT                      _MK_SHIFT_CONST(0)
#define DC_DISP_M1_CONTROL_0_M1_CLOCK_SELECT_FIELD                      (_MK_MASK_CONST(0x3) << DC_DISP_M1_CONTROL_0_M1_CLOCK_SELECT_SHIFT)
#define DC_DISP_M1_CONTROL_0_M1_CLOCK_SELECT_RANGE                      1:0
#define DC_DISP_M1_CONTROL_0_M1_CLOCK_SELECT_WOFFSET                    0x0
#define DC_DISP_M1_CONTROL_0_M1_CLOCK_SELECT_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_M1_CONTROL_0_M1_CLOCK_SELECT_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_M1_CONTROL_0_M1_CLOCK_SELECT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_M1_CONTROL_0_M1_CLOCK_SELECT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_M1_CONTROL_0_M1_CLOCK_SELECT_PCLK                       _MK_ENUM_CONST(0)
#define DC_DISP_M1_CONTROL_0_M1_CLOCK_SELECT_M0SYNC                     _MK_ENUM_CONST(1)
#define DC_DISP_M1_CONTROL_0_M1_CLOCK_SELECT_LCLK                       _MK_ENUM_CONST(2)
#define DC_DISP_M1_CONTROL_0_M1_CLOCK_SELECT_FCLK                       _MK_ENUM_CONST(3)

// M1 Phase Control   00= free-running
//   01= reserved
//   10= reset at beginning of vertical active
//       display
//   11= invert at beginning of frame
//  This should be set to free-running if
//  frame clock is used.
#define DC_DISP_M1_CONTROL_0_M1_PHASE_CONTROL_SHIFT                     _MK_SHIFT_CONST(4)
#define DC_DISP_M1_CONTROL_0_M1_PHASE_CONTROL_FIELD                     (_MK_MASK_CONST(0x3) << DC_DISP_M1_CONTROL_0_M1_PHASE_CONTROL_SHIFT)
#define DC_DISP_M1_CONTROL_0_M1_PHASE_CONTROL_RANGE                     5:4
#define DC_DISP_M1_CONTROL_0_M1_PHASE_CONTROL_WOFFSET                   0x0
#define DC_DISP_M1_CONTROL_0_M1_PHASE_CONTROL_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_M1_CONTROL_0_M1_PHASE_CONTROL_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_M1_CONTROL_0_M1_PHASE_CONTROL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_M1_CONTROL_0_M1_PHASE_CONTROL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_M1_CONTROL_0_M1_PHASE_CONTROL_FREE_RUN                  _MK_ENUM_CONST(0)
#define DC_DISP_M1_CONTROL_0_M1_PHASE_CONTROL_VACTIVE_RESTART                   _MK_ENUM_CONST(2)
#define DC_DISP_M1_CONTROL_0_M1_PHASE_CONTROL_FRAME_INVERT                      _MK_ENUM_CONST(3)

// M1 Phase Reset  This bit is effective only when M1 is not
//  free running.
//   0= frequency (phase) counter is not reset
//   1= frequency (phase) counter is reset at
//      beginning of vertical active display if
//      phase control is set to VACTIVE_RESTART
//      or at beginning of frame if phase
//      control is set to FRAME_INVERT
#define DC_DISP_M1_CONTROL_0_M1_PHASE_RESET_SHIFT                       _MK_SHIFT_CONST(6)
#define DC_DISP_M1_CONTROL_0_M1_PHASE_RESET_FIELD                       (_MK_MASK_CONST(0x1) << DC_DISP_M1_CONTROL_0_M1_PHASE_RESET_SHIFT)
#define DC_DISP_M1_CONTROL_0_M1_PHASE_RESET_RANGE                       6:6
#define DC_DISP_M1_CONTROL_0_M1_PHASE_RESET_WOFFSET                     0x0
#define DC_DISP_M1_CONTROL_0_M1_PHASE_RESET_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_M1_CONTROL_0_M1_PHASE_RESET_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_M1_CONTROL_0_M1_PHASE_RESET_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_M1_CONTROL_0_M1_PHASE_RESET_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_M1_CONTROL_0_M1_PHASE_RESET_DISABLE                     _MK_ENUM_CONST(0)
#define DC_DISP_M1_CONTROL_0_M1_PHASE_RESET_ENABLE                      _MK_ENUM_CONST(1)

// M1 Polarity   0= High
//   1= Low
//  Polarity adjustment is applied last after
//  phase control is applied.
#define DC_DISP_M1_CONTROL_0_M1_POLARITY_SHIFT                  _MK_SHIFT_CONST(7)
#define DC_DISP_M1_CONTROL_0_M1_POLARITY_FIELD                  (_MK_MASK_CONST(0x1) << DC_DISP_M1_CONTROL_0_M1_POLARITY_SHIFT)
#define DC_DISP_M1_CONTROL_0_M1_POLARITY_RANGE                  7:7
#define DC_DISP_M1_CONTROL_0_M1_POLARITY_WOFFSET                        0x0
#define DC_DISP_M1_CONTROL_0_M1_POLARITY_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_M1_CONTROL_0_M1_POLARITY_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_M1_CONTROL_0_M1_POLARITY_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_M1_CONTROL_0_M1_POLARITY_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_M1_CONTROL_0_M1_POLARITY_HIGH                   _MK_ENUM_CONST(0)
#define DC_DISP_M1_CONTROL_0_M1_POLARITY_LOW                    _MK_ENUM_CONST(1)

// M1 Period
//  This should be program to the half of the
//  desired M1 period (in lines) minus 1.
#define DC_DISP_M1_CONTROL_0_M1_PERIOD_SHIFT                    _MK_SHIFT_CONST(8)
#define DC_DISP_M1_CONTROL_0_M1_PERIOD_FIELD                    (_MK_MASK_CONST(0x1f) << DC_DISP_M1_CONTROL_0_M1_PERIOD_SHIFT)
#define DC_DISP_M1_CONTROL_0_M1_PERIOD_RANGE                    12:8
#define DC_DISP_M1_CONTROL_0_M1_PERIOD_WOFFSET                  0x0
#define DC_DISP_M1_CONTROL_0_M1_PERIOD_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_M1_CONTROL_0_M1_PERIOD_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_M1_CONTROL_0_M1_PERIOD_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_M1_CONTROL_0_M1_PERIOD_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// M1 Horizontal Position
//  This parameter specifies the position where
//  M0 can toggle with respect to H reference
//  point.
#define DC_DISP_M1_CONTROL_0_M1_H_POSITION_SHIFT                        _MK_SHIFT_CONST(16)
#define DC_DISP_M1_CONTROL_0_M1_H_POSITION_FIELD                        (_MK_MASK_CONST(0x1fff) << DC_DISP_M1_CONTROL_0_M1_H_POSITION_SHIFT)
#define DC_DISP_M1_CONTROL_0_M1_H_POSITION_RANGE                        28:16
#define DC_DISP_M1_CONTROL_0_M1_H_POSITION_WOFFSET                      0x0
#define DC_DISP_M1_CONTROL_0_M1_H_POSITION_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_M1_CONTROL_0_M1_H_POSITION_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_M1_CONTROL_0_M1_H_POSITION_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_M1_CONTROL_0_M1_H_POSITION_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Display Data Inversion (DI) signal generation
// This signal is typically needed to control data inversion for PWM panels and is typically
//  output on LDI pin.
// Horizontal position of this signal with respect to horizontal reference point can be
//  programmed.
// DI signal together with M0 may also be used to control the actual pixel data inversion.
//  Pixel data may be controlled by either DI only or by (DI ^ M0) as specified by
//  -=PS_=-PIXDATA_INV_SELECT. The inversion control signal is then used to control pixel data
//  inversion as specified by -=PS_=-PIXDATA_INV_CONTROL. Note that even if the DI signal is
//  disabled, pixel data inversion could still occur depending on the setting of
//  -=PS_=-PIXDATA_INV_CONTROL. Data inversion is limited to only active area. For the purpose of
//  pixel data inversion, DI and M0 signals are used before the corresponding horizontal
//  positioning so that these signals are always stable during active area.
// In case M0 signal is used to control data inversion then it should be generated using line
//  clock. M0 polarity control is not accounted when M0 is used to generate DI signal or to
//  control pixel data inversion.
// This register specifies options for DI signal as well as pixel data inversion.

// Register DC_DISP_DI_CONTROL_0  // DI Control
#define DC_DISP_DI_CONTROL_0                    _MK_ADDR_CONST(0x428)
#define DC_DISP_DI_CONTROL_0_SECURE                     0x0
#define DC_DISP_DI_CONTROL_0_WORD_COUNT                         0x1
#define DC_DISP_DI_CONTROL_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define DC_DISP_DI_CONTROL_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define DC_DISP_DI_CONTROL_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define DC_DISP_DI_CONTROL_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_DI_CONTROL_0_READ_MASK                  _MK_MASK_CONST(0x1fff00d3)
#define DC_DISP_DI_CONTROL_0_WRITE_MASK                         _MK_MASK_CONST(0x1fff00d3)
// DI signal Mode
//   00= DI is always low
//   01= DI is always high
//   10= DI is forced high every time M0 (before
//       polarity adjustment) toggles from low
//       to high; otherwise then DI toggles
//       every line
//   11= DI has same frequency (phase) as M0
//       (before M0 polarity adjustment)
#define DC_DISP_DI_CONTROL_0_DI_MODE_SHIFT                      _MK_SHIFT_CONST(0)
#define DC_DISP_DI_CONTROL_0_DI_MODE_FIELD                      (_MK_MASK_CONST(0x3) << DC_DISP_DI_CONTROL_0_DI_MODE_SHIFT)
#define DC_DISP_DI_CONTROL_0_DI_MODE_RANGE                      1:0
#define DC_DISP_DI_CONTROL_0_DI_MODE_WOFFSET                    0x0
#define DC_DISP_DI_CONTROL_0_DI_MODE_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_DI_CONTROL_0_DI_MODE_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_DI_CONTROL_0_DI_MODE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_DI_CONTROL_0_DI_MODE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Pixel Data Inversion Select   0= DI signal controls pixel data inversion
//   1= (DI xor M0) controls pixel data
//      inversion.
#define DC_DISP_DI_CONTROL_0_PIXDATA_INV_SELECT_SHIFT                   _MK_SHIFT_CONST(4)
#define DC_DISP_DI_CONTROL_0_PIXDATA_INV_SELECT_FIELD                   (_MK_MASK_CONST(0x1) << DC_DISP_DI_CONTROL_0_PIXDATA_INV_SELECT_SHIFT)
#define DC_DISP_DI_CONTROL_0_PIXDATA_INV_SELECT_RANGE                   4:4
#define DC_DISP_DI_CONTROL_0_PIXDATA_INV_SELECT_WOFFSET                 0x0
#define DC_DISP_DI_CONTROL_0_PIXDATA_INV_SELECT_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_DI_CONTROL_0_PIXDATA_INV_SELECT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_DI_CONTROL_0_PIXDATA_INV_SELECT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_DI_CONTROL_0_PIXDATA_INV_SELECT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_DI_CONTROL_0_PIXDATA_INV_SELECT_DI                      _MK_ENUM_CONST(0)
#define DC_DISP_DI_CONTROL_0_PIXDATA_INV_SELECT_DIXORM0                 _MK_ENUM_CONST(1)

// Pixel Data Inversion Control  The control signal for pixel data inversion
//  is defined by -=PS_=-PIXDATA_INV_SELECT
//   00= no pixel data inversion regardless of
//       control signal state.
//   01= Pixels 0, 2, 4 ... are inverted if
//       control signal is high.
//       Pixels 1, 3, 5 ... are inverted if
//       control signal is low.
//   10= Pixels 1, 3, 5 ... are inverted if
//       control signal is high.
//       Pixels 0, 2, 4 ... are inverted if
//       control signal is low.
//   11= all pixel data is inverted if control
//       signal is high.
//  NOTE: Pixel data inversion is NOT supported
//    for 2-pixel/3-clock 12-bit parallel
//    display data format !!!
#define DC_DISP_DI_CONTROL_0_PIXDATA_INV_CONTROL_SHIFT                  _MK_SHIFT_CONST(6)
#define DC_DISP_DI_CONTROL_0_PIXDATA_INV_CONTROL_FIELD                  (_MK_MASK_CONST(0x3) << DC_DISP_DI_CONTROL_0_PIXDATA_INV_CONTROL_SHIFT)
#define DC_DISP_DI_CONTROL_0_PIXDATA_INV_CONTROL_RANGE                  7:6
#define DC_DISP_DI_CONTROL_0_PIXDATA_INV_CONTROL_WOFFSET                        0x0
#define DC_DISP_DI_CONTROL_0_PIXDATA_INV_CONTROL_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_DI_CONTROL_0_PIXDATA_INV_CONTROL_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_DI_CONTROL_0_PIXDATA_INV_CONTROL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_DI_CONTROL_0_PIXDATA_INV_CONTROL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_DI_CONTROL_0_PIXDATA_INV_CONTROL_NOINV                  _MK_ENUM_CONST(0)
#define DC_DISP_DI_CONTROL_0_PIXDATA_INV_CONTROL_EVENINV                        _MK_ENUM_CONST(1)
#define DC_DISP_DI_CONTROL_0_PIXDATA_INV_CONTROL_ODDINV                 _MK_ENUM_CONST(2)
#define DC_DISP_DI_CONTROL_0_PIXDATA_INV_CONTROL_ALLINV                 _MK_ENUM_CONST(3)

// DI signal Horizontal Position
//  This parameter specifies the position where
//  DI signal can toggle with respect to H
//  reference point. It should not be programmed
//  larger than -=PS_=-PP_H_POSITION if DI is used to
//  control PP signal generation.
#define DC_DISP_DI_CONTROL_0_DI_H_POSITION_SHIFT                        _MK_SHIFT_CONST(16)
#define DC_DISP_DI_CONTROL_0_DI_H_POSITION_FIELD                        (_MK_MASK_CONST(0x1fff) << DC_DISP_DI_CONTROL_0_DI_H_POSITION_SHIFT)
#define DC_DISP_DI_CONTROL_0_DI_H_POSITION_RANGE                        28:16
#define DC_DISP_DI_CONTROL_0_DI_H_POSITION_WOFFSET                      0x0
#define DC_DISP_DI_CONTROL_0_DI_H_POSITION_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_DI_CONTROL_0_DI_H_POSITION_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_DI_CONTROL_0_DI_H_POSITION_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_DI_CONTROL_0_DI_H_POSITION_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Display Programmable Pulse (PP) signal generation
// PP signal generation logic can generate up to 128 pulses per line internally and the PP
//  pulse select registers determines which of the 128 pulses will be output. Any of the 128
//  internally generated pulse can be independently selected as output if they occur within
//  one line time.
// PP signal is typically output on LPP pin.
// Note that DI signal may impact PP generation as controlled by -=PS_=-PP_REVERSAL_CONTROL.
// PP signal generation may be delayed (positioned) from H reference point (line start)
// controlled by -=PS_=-PP_H_DELAY. Delaying PP may cause the last few internal PP pulses to
// overflow to the next line.
// PP is always generated using the display clock after the shift clock divider.
// This register specifies options for PP signal.

// Register DC_DISP_PP_CONTROL_0  // PP Control
#define DC_DISP_PP_CONTROL_0                    _MK_ADDR_CONST(0x429)
#define DC_DISP_PP_CONTROL_0_SECURE                     0x0
#define DC_DISP_PP_CONTROL_0_WORD_COUNT                         0x1
#define DC_DISP_PP_CONTROL_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define DC_DISP_PP_CONTROL_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define DC_DISP_PP_CONTROL_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define DC_DISP_PP_CONTROL_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_PP_CONTROL_0_READ_MASK                  _MK_MASK_CONST(0xffff)
#define DC_DISP_PP_CONTROL_0_WRITE_MASK                         _MK_MASK_CONST(0xffff)
// PP Direction (incrementing or decrementing)   0= always from pulse 0 to 127 (regardless
//       of DI signal)
//   1= 0 to 127 if DI=0 and 127 to 0 if DI=1
//   2= 127 to 0 if DI=0 and 0 to 127 if DI=1
//   3= always 127 to 0 regardless of DI
#define DC_DISP_PP_CONTROL_0_PP_DIRECTION_SHIFT                 _MK_SHIFT_CONST(0)
#define DC_DISP_PP_CONTROL_0_PP_DIRECTION_FIELD                 (_MK_MASK_CONST(0x3) << DC_DISP_PP_CONTROL_0_PP_DIRECTION_SHIFT)
#define DC_DISP_PP_CONTROL_0_PP_DIRECTION_RANGE                 1:0
#define DC_DISP_PP_CONTROL_0_PP_DIRECTION_WOFFSET                       0x0
#define DC_DISP_PP_CONTROL_0_PP_DIRECTION_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_PP_CONTROL_0_PP_DIRECTION_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_PP_CONTROL_0_PP_DIRECTION_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_PP_CONTROL_0_PP_DIRECTION_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_PP_CONTROL_0_PP_DIRECTION_ALWAYS_INC                    _MK_ENUM_CONST(0)
#define DC_DISP_PP_CONTROL_0_PP_DIRECTION_INC_IF_DI0                    _MK_ENUM_CONST(1)
#define DC_DISP_PP_CONTROL_0_PP_DIRECTION_DEC_IF_DI0                    _MK_ENUM_CONST(2)
#define DC_DISP_PP_CONTROL_0_PP_DIRECTION_ALWAYS_DEC                    _MK_ENUM_CONST(3)

// PP Vertical Qualifier   0= free running (not qualified)
//   1= V Pulse 1 qualified
//   2= V Pulse 2 qualified
//   3= V Pulse 3 qualified
#define DC_DISP_PP_CONTROL_0_PP_V_QUALIFIER_SHIFT                       _MK_SHIFT_CONST(2)
#define DC_DISP_PP_CONTROL_0_PP_V_QUALIFIER_FIELD                       (_MK_MASK_CONST(0x3) << DC_DISP_PP_CONTROL_0_PP_V_QUALIFIER_SHIFT)
#define DC_DISP_PP_CONTROL_0_PP_V_QUALIFIER_RANGE                       3:2
#define DC_DISP_PP_CONTROL_0_PP_V_QUALIFIER_WOFFSET                     0x0
#define DC_DISP_PP_CONTROL_0_PP_V_QUALIFIER_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_PP_CONTROL_0_PP_V_QUALIFIER_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_PP_CONTROL_0_PP_V_QUALIFIER_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_PP_CONTROL_0_PP_V_QUALIFIER_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_PP_CONTROL_0_PP_V_QUALIFIER_FREE_RUN                    _MK_ENUM_CONST(0)
#define DC_DISP_PP_CONTROL_0_PP_V_QUALIFIER_VPULSE1                     _MK_ENUM_CONST(1)
#define DC_DISP_PP_CONTROL_0_PP_V_QUALIFIER_VPULSE2                     _MK_ENUM_CONST(2)
#define DC_DISP_PP_CONTROL_0_PP_V_QUALIFIER_VPULSE3                     _MK_ENUM_CONST(3)

// PP signal Horizontal Delay (0 to 15)
//  This parameter specifies the position where
//  PP signal generation starts with respect to
//  H reference point. If DI is used to generate
//  PP signal then this parameter should not
//  be smaller than -=PS_=-DI_H_POSITION.
//
#define DC_DISP_PP_CONTROL_0_PP_H_DELAY_SHIFT                   _MK_SHIFT_CONST(4)
#define DC_DISP_PP_CONTROL_0_PP_H_DELAY_FIELD                   (_MK_MASK_CONST(0xf) << DC_DISP_PP_CONTROL_0_PP_H_DELAY_SHIFT)
#define DC_DISP_PP_CONTROL_0_PP_H_DELAY_RANGE                   7:4
#define DC_DISP_PP_CONTROL_0_PP_H_DELAY_WOFFSET                 0x0
#define DC_DISP_PP_CONTROL_0_PP_H_DELAY_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_PP_CONTROL_0_PP_H_DELAY_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_PP_CONTROL_0_PP_H_DELAY_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_PP_CONTROL_0_PP_H_DELAY_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// PP High Pulse width (1 to 16)
//
#define DC_DISP_PP_CONTROL_0_PP_HIGH_PULSE_SHIFT                        _MK_SHIFT_CONST(8)
#define DC_DISP_PP_CONTROL_0_PP_HIGH_PULSE_FIELD                        (_MK_MASK_CONST(0xf) << DC_DISP_PP_CONTROL_0_PP_HIGH_PULSE_SHIFT)
#define DC_DISP_PP_CONTROL_0_PP_HIGH_PULSE_RANGE                        11:8
#define DC_DISP_PP_CONTROL_0_PP_HIGH_PULSE_WOFFSET                      0x0
#define DC_DISP_PP_CONTROL_0_PP_HIGH_PULSE_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_PP_CONTROL_0_PP_HIGH_PULSE_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_PP_CONTROL_0_PP_HIGH_PULSE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_PP_CONTROL_0_PP_HIGH_PULSE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// PP Low Pulse width (1 to 16)
//
#define DC_DISP_PP_CONTROL_0_PP_LOW_PULSE_SHIFT                 _MK_SHIFT_CONST(12)
#define DC_DISP_PP_CONTROL_0_PP_LOW_PULSE_FIELD                 (_MK_MASK_CONST(0xf) << DC_DISP_PP_CONTROL_0_PP_LOW_PULSE_SHIFT)
#define DC_DISP_PP_CONTROL_0_PP_LOW_PULSE_RANGE                 15:12
#define DC_DISP_PP_CONTROL_0_PP_LOW_PULSE_WOFFSET                       0x0
#define DC_DISP_PP_CONTROL_0_PP_LOW_PULSE_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_PP_CONTROL_0_PP_LOW_PULSE_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_PP_CONTROL_0_PP_LOW_PULSE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_PP_CONTROL_0_PP_LOW_PULSE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// The next 4 registers and -=PS_=-PP_DIRECTION which of the internal 128 pulses to be output.
//  Each bit in the four registers correspond to one internal pulse.

// Register DC_DISP_PP_SELECT_A_0  // PP Select A
#define DC_DISP_PP_SELECT_A_0                   _MK_ADDR_CONST(0x42a)
#define DC_DISP_PP_SELECT_A_0_SECURE                    0x0
#define DC_DISP_PP_SELECT_A_0_WORD_COUNT                        0x1
#define DC_DISP_PP_SELECT_A_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_PP_SELECT_A_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_PP_SELECT_A_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_PP_SELECT_A_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_PP_SELECT_A_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define DC_DISP_PP_SELECT_A_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// PP Select bits 31 to 0
#define DC_DISP_PP_SELECT_A_0_PP_SELECT_A_SHIFT                 _MK_SHIFT_CONST(0)
#define DC_DISP_PP_SELECT_A_0_PP_SELECT_A_FIELD                 (_MK_MASK_CONST(0xffffffff) << DC_DISP_PP_SELECT_A_0_PP_SELECT_A_SHIFT)
#define DC_DISP_PP_SELECT_A_0_PP_SELECT_A_RANGE                 31:0
#define DC_DISP_PP_SELECT_A_0_PP_SELECT_A_WOFFSET                       0x0
#define DC_DISP_PP_SELECT_A_0_PP_SELECT_A_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_PP_SELECT_A_0_PP_SELECT_A_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_PP_SELECT_A_0_PP_SELECT_A_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_PP_SELECT_A_0_PP_SELECT_A_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register DC_DISP_PP_SELECT_B_0  // PP Select B
#define DC_DISP_PP_SELECT_B_0                   _MK_ADDR_CONST(0x42b)
#define DC_DISP_PP_SELECT_B_0_SECURE                    0x0
#define DC_DISP_PP_SELECT_B_0_WORD_COUNT                        0x1
#define DC_DISP_PP_SELECT_B_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_PP_SELECT_B_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_PP_SELECT_B_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_PP_SELECT_B_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_PP_SELECT_B_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define DC_DISP_PP_SELECT_B_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// PP Select bits 63 to 32
#define DC_DISP_PP_SELECT_B_0_PP_SELECT_B_SHIFT                 _MK_SHIFT_CONST(0)
#define DC_DISP_PP_SELECT_B_0_PP_SELECT_B_FIELD                 (_MK_MASK_CONST(0xffffffff) << DC_DISP_PP_SELECT_B_0_PP_SELECT_B_SHIFT)
#define DC_DISP_PP_SELECT_B_0_PP_SELECT_B_RANGE                 31:0
#define DC_DISP_PP_SELECT_B_0_PP_SELECT_B_WOFFSET                       0x0
#define DC_DISP_PP_SELECT_B_0_PP_SELECT_B_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_PP_SELECT_B_0_PP_SELECT_B_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_PP_SELECT_B_0_PP_SELECT_B_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_PP_SELECT_B_0_PP_SELECT_B_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register DC_DISP_PP_SELECT_C_0  // PP Select C
#define DC_DISP_PP_SELECT_C_0                   _MK_ADDR_CONST(0x42c)
#define DC_DISP_PP_SELECT_C_0_SECURE                    0x0
#define DC_DISP_PP_SELECT_C_0_WORD_COUNT                        0x1
#define DC_DISP_PP_SELECT_C_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_PP_SELECT_C_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_PP_SELECT_C_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_PP_SELECT_C_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_PP_SELECT_C_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define DC_DISP_PP_SELECT_C_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// PP Select bits 95 to 64
#define DC_DISP_PP_SELECT_C_0_PP_SELECT_C_SHIFT                 _MK_SHIFT_CONST(0)
#define DC_DISP_PP_SELECT_C_0_PP_SELECT_C_FIELD                 (_MK_MASK_CONST(0xffffffff) << DC_DISP_PP_SELECT_C_0_PP_SELECT_C_SHIFT)
#define DC_DISP_PP_SELECT_C_0_PP_SELECT_C_RANGE                 31:0
#define DC_DISP_PP_SELECT_C_0_PP_SELECT_C_WOFFSET                       0x0
#define DC_DISP_PP_SELECT_C_0_PP_SELECT_C_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_PP_SELECT_C_0_PP_SELECT_C_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_PP_SELECT_C_0_PP_SELECT_C_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_PP_SELECT_C_0_PP_SELECT_C_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register DC_DISP_PP_SELECT_D_0  // PP Select D
#define DC_DISP_PP_SELECT_D_0                   _MK_ADDR_CONST(0x42d)
#define DC_DISP_PP_SELECT_D_0_SECURE                    0x0
#define DC_DISP_PP_SELECT_D_0_WORD_COUNT                        0x1
#define DC_DISP_PP_SELECT_D_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_PP_SELECT_D_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_PP_SELECT_D_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_PP_SELECT_D_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_PP_SELECT_D_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define DC_DISP_PP_SELECT_D_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// PP Select bits 127 to 96
#define DC_DISP_PP_SELECT_D_0_PP_SELECT_D_SHIFT                 _MK_SHIFT_CONST(0)
#define DC_DISP_PP_SELECT_D_0_PP_SELECT_D_FIELD                 (_MK_MASK_CONST(0xffffffff) << DC_DISP_PP_SELECT_D_0_PP_SELECT_D_SHIFT)
#define DC_DISP_PP_SELECT_D_0_PP_SELECT_D_RANGE                 31:0
#define DC_DISP_PP_SELECT_D_0_PP_SELECT_D_WOFFSET                       0x0
#define DC_DISP_PP_SELECT_D_0_PP_SELECT_D_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_PP_SELECT_D_0_PP_SELECT_D_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_PP_SELECT_D_0_PP_SELECT_D_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_PP_SELECT_D_0_PP_SELECT_D_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//
// Class: Display Interface Settings
//
// This register controls generation of shift clock to the display and internal pixel clock.
// Internal display pipeline runs with pixel clock and processes 1 pixel per clock.

// Register DC_DISP_DISP_CLOCK_CONTROL_0  // Display Clock Control
// Shift clock divider is used to divide root clock for display controller module to
//  generate internal shift clock for shifting data to the display. Output of this
//  divider is typically used to generate the external shift clock which is sent
//  to the display (SC0 and/or SC1) except for 1-pixel/1-clock parallel display.
//  The output of this divider is also used to generate Programmable Pulse (PP) signal.
//  For 1-pixel/1-clock parallel display, SC0 and SC1 are generated using the output
//  of pixel clock divider which can be set to 1, 2, or 4 for 1-pixel/1-clock parallel
//  display. The reason pixel clock divider 2 and 4 are allowed for 1-pixel/1-clock
//  parallel display interface is so that the clock that generates PP can be generated
//  with 2x or 4x higher frequency than pixel clock and therefore can produce higher
//  resolution PP pulse positions.
//  For all cases of parallel display, SC0 and SC1 can be further divided by 1, 2 or 4.
#define DC_DISP_DISP_CLOCK_CONTROL_0                    _MK_ADDR_CONST(0x42e)
#define DC_DISP_DISP_CLOCK_CONTROL_0_SECURE                     0x0
#define DC_DISP_DISP_CLOCK_CONTROL_0_WORD_COUNT                         0x1
#define DC_DISP_DISP_CLOCK_CONTROL_0_RESET_VAL                  _MK_MASK_CONST(0x6)
#define DC_DISP_DISP_CLOCK_CONTROL_0_RESET_MASK                         _MK_MASK_CONST(0xfff)
#define DC_DISP_DISP_CLOCK_CONTROL_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_CLOCK_CONTROL_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_CLOCK_CONTROL_0_READ_MASK                  _MK_MASK_CONST(0xfff)
#define DC_DISP_DISP_CLOCK_CONTROL_0_WRITE_MASK                         _MK_MASK_CONST(0xfff)
// Shift Clock Divider
//   0   = divide by 1
//   1   = divide by 1.5
//   2   = divide by 2
//   3   = divide by 2.5
//   4   = divide by 3
//    :       :
//    :       :
//   254 = divide by 128
//   255 = divide by 128.5
// Pixel clock divider is used to divide output of internal shift clock divider to
//  generate internal pixel clock which is used to clock the internal horizontal and
//  vertical counters.
// This divider also determine the output format for parallel interface, serial interface,
//  and LCD SPI interface in conjunction with Display Data Format parameter.
// For 1-pixel/1-clock parallel display interface, valid settings are PCD1, PCD2, and
//  PCD4. Note that the main reason to use PCD2 and PCD4 is to get higher frequency
//  PP clock because the PP clock is always generated from the output of shift clock
//  divider.
// For non 1-pixel/1-clock parallel display interface, valid settings are, PCD1H
//  (2-pixel/3-clock), PCD2 (1-pixel/2-clock), and PCD3 (1-pixel/3-clock).
// For 1-channel serial display interface, valid settings are PCD3 (3-bpp 1-ch),
//  PCD4 (3-bpp 1-ch), PCD6 (6-bpp 1-ch), PCD9 (9-bpp 1-ch), PCD12 (12-bpp 1-ch),
//  PCD16 (16-bpp 1-ch), PCD18 (18-bpp 1-ch).
// For 2-channel serial display interface, valid settings are PCD2 (3-bpp 2-ch),
//  PCD3 (6-bpp 2-ch), PCD6 (12-bpp 2-ch), PCD8 (16-bpp 2-ch), PCD9 (18-bpp 2-ch).
// For 3-channel serial display interface, valid settings are PCD1 (3-bpp 3-ch),
//  PCD2 (6-bpp 3-ch), PCD3 (9-bpp 3-ch), PCD4 (12-bpp 3-ch), PCD6 (18-bpp 3-ch).
// For LCD SPI interface, valid settings are PCD12 (B4G4R4), PCD16 (B5G6R5),
//  PCD18 (B6G6R6), PCD24 (B8G8R8), PCD8 (B5G6R5 with data/command bit), 
//  PCD6 (B5G6R5 with data/command start byte - depending on data/command bit),
//  PCD4 (P8 for spi8), PCD9 (B5G6R5 with chip select deassertion at 8-bit boundary, spi16x2),
//  PCD3 (P8 for spidc), PCD2 (B5G6R5 with data/command bit and chip select deassertion 
//  at 9-bit boundary, spi16x2dc), and PCD13 (spi12p2, no chip select deassertion between
//  pairs of pixels).
#define DC_DISP_DISP_CLOCK_CONTROL_0_SHIFT_CLK_DIVIDER_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_DISP_CLOCK_CONTROL_0_SHIFT_CLK_DIVIDER_FIELD                    (_MK_MASK_CONST(0xff) << DC_DISP_DISP_CLOCK_CONTROL_0_SHIFT_CLK_DIVIDER_SHIFT)
#define DC_DISP_DISP_CLOCK_CONTROL_0_SHIFT_CLK_DIVIDER_RANGE                    7:0
#define DC_DISP_DISP_CLOCK_CONTROL_0_SHIFT_CLK_DIVIDER_WOFFSET                  0x0
#define DC_DISP_DISP_CLOCK_CONTROL_0_SHIFT_CLK_DIVIDER_DEFAULT                  _MK_MASK_CONST(0x6)
#define DC_DISP_DISP_CLOCK_CONTROL_0_SHIFT_CLK_DIVIDER_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define DC_DISP_DISP_CLOCK_CONTROL_0_SHIFT_CLK_DIVIDER_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_CLOCK_CONTROL_0_SHIFT_CLK_DIVIDER_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Pixel Clock Divider   0000= divide by 1
//   0001= divide by 1.5
//   0010= divide by 2
//   0011= divide by 3
//   0100= divide by 4
//   0101= divide by 6
//   0110= divide by 8
//   0111= divide by 9 
//   1000= divide by 12
//   1001= divide by 16
//   1010= divide by 18
//   1011= divide by 24
//   1100= divide by 13
//   other= reserved
#define DC_DISP_DISP_CLOCK_CONTROL_0_PIXEL_CLK_DIVIDER_SHIFT                    _MK_SHIFT_CONST(8)
#define DC_DISP_DISP_CLOCK_CONTROL_0_PIXEL_CLK_DIVIDER_FIELD                    (_MK_MASK_CONST(0xf) << DC_DISP_DISP_CLOCK_CONTROL_0_PIXEL_CLK_DIVIDER_SHIFT)
#define DC_DISP_DISP_CLOCK_CONTROL_0_PIXEL_CLK_DIVIDER_RANGE                    11:8
#define DC_DISP_DISP_CLOCK_CONTROL_0_PIXEL_CLK_DIVIDER_WOFFSET                  0x0
#define DC_DISP_DISP_CLOCK_CONTROL_0_PIXEL_CLK_DIVIDER_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_CLOCK_CONTROL_0_PIXEL_CLK_DIVIDER_DEFAULT_MASK                     _MK_MASK_CONST(0xf)
#define DC_DISP_DISP_CLOCK_CONTROL_0_PIXEL_CLK_DIVIDER_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_CLOCK_CONTROL_0_PIXEL_CLK_DIVIDER_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_CLOCK_CONTROL_0_PIXEL_CLK_DIVIDER_PCD1                     _MK_ENUM_CONST(0)
#define DC_DISP_DISP_CLOCK_CONTROL_0_PIXEL_CLK_DIVIDER_PCD1H                    _MK_ENUM_CONST(1)
#define DC_DISP_DISP_CLOCK_CONTROL_0_PIXEL_CLK_DIVIDER_PCD2                     _MK_ENUM_CONST(2)
#define DC_DISP_DISP_CLOCK_CONTROL_0_PIXEL_CLK_DIVIDER_PCD3                     _MK_ENUM_CONST(3)
#define DC_DISP_DISP_CLOCK_CONTROL_0_PIXEL_CLK_DIVIDER_PCD4                     _MK_ENUM_CONST(4)
#define DC_DISP_DISP_CLOCK_CONTROL_0_PIXEL_CLK_DIVIDER_PCD6                     _MK_ENUM_CONST(5)
#define DC_DISP_DISP_CLOCK_CONTROL_0_PIXEL_CLK_DIVIDER_PCD8                     _MK_ENUM_CONST(6)
#define DC_DISP_DISP_CLOCK_CONTROL_0_PIXEL_CLK_DIVIDER_PCD9                     _MK_ENUM_CONST(7)
#define DC_DISP_DISP_CLOCK_CONTROL_0_PIXEL_CLK_DIVIDER_PCD12                    _MK_ENUM_CONST(8)
#define DC_DISP_DISP_CLOCK_CONTROL_0_PIXEL_CLK_DIVIDER_PCD16                    _MK_ENUM_CONST(9)
#define DC_DISP_DISP_CLOCK_CONTROL_0_PIXEL_CLK_DIVIDER_PCD18                    _MK_ENUM_CONST(10)
#define DC_DISP_DISP_CLOCK_CONTROL_0_PIXEL_CLK_DIVIDER_PCD24                    _MK_ENUM_CONST(11)
#define DC_DISP_DISP_CLOCK_CONTROL_0_PIXEL_CLK_DIVIDER_PCD13                    _MK_ENUM_CONST(12)

// This register specifies display interface options

// Register DC_DISP_DISP_INTERFACE_CONTROL_0  // Display Interface Control
#define DC_DISP_DISP_INTERFACE_CONTROL_0                        _MK_ADDR_CONST(0x42f)
#define DC_DISP_DISP_INTERFACE_CONTROL_0_SECURE                         0x0
#define DC_DISP_DISP_INTERFACE_CONTROL_0_WORD_COUNT                     0x1
#define DC_DISP_DISP_INTERFACE_CONTROL_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_INTERFACE_CONTROL_0_RESET_MASK                     _MK_MASK_CONST(0x30f)
#define DC_DISP_DISP_INTERFACE_CONTROL_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_INTERFACE_CONTROL_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_INTERFACE_CONTROL_0_READ_MASK                      _MK_MASK_CONST(0x30f)
#define DC_DISP_DISP_INTERFACE_CONTROL_0_WRITE_MASK                     _MK_MASK_CONST(0x30f)
// Display Data Format  Pixel Clock Divider is used together with
//  this parameter to determine the exact
//   display data format.
#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_FORMAT_SHIFT                 _MK_SHIFT_CONST(0)
#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_FORMAT_FIELD                 (_MK_MASK_CONST(0xf) << DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_FORMAT_SHIFT)
#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_FORMAT_RANGE                 3:0
#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_FORMAT_WOFFSET                       0x0
#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_FORMAT_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_FORMAT_DEFAULT_MASK                  _MK_MASK_CONST(0xf)
#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_FORMAT_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_FORMAT_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_FORMAT_DF1P1C                        _MK_ENUM_CONST(0)    // //   0= 1-pixel/1-clock up to 24-bit parallel

#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_FORMAT_DF1P2C24B                     _MK_ENUM_CONST(1)    // //   1= 1-pixel/2-clock 24-bit parallel

#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_FORMAT_DF1P2C18B                     _MK_ENUM_CONST(2)    // //   2= 1-pixel/2-clock 18-bit parallel or
//        2-pixel/3-clock 12-bit parallel or
//        1-pixel/3-clock 18-bit parallel
// NOTE: for 2-pixel/3-clock 12-bit parallel,
//  the horizontal display active time must be
//  even number of pixels.

#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_FORMAT_DF1P2C16B                     _MK_ENUM_CONST(3)    // //   3= 1-pixel/2-clock 16-bit parallel

#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_FORMAT_DF1S                  _MK_ENUM_CONST(4)    // //   4= 1-channel serial
// NOTE: 1-/2-/3-channel serial display
//  interface supported is a low-voltage
//  differential serial interface.

#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_FORMAT_DF2S                  _MK_ENUM_CONST(5)    // //   5= 2-channel serial

#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_FORMAT_DF3S                  _MK_ENUM_CONST(6)    // //   6= 3-channel serial

#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_FORMAT_DFSPI                 _MK_ENUM_CONST(7)    // //   7= SPI serial

#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_FORMAT_DF1P3C24B                     _MK_ENUM_CONST(8)    // //   8= 1-pixel/3-clock 24-bit parallel

#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_FORMAT_DF2P1C18B                     _MK_ENUM_CONST(9)    // //   9= 2-pixel/1-clock 18-bit parallel


// Display Data Alignment  This is effective for parallel display data
//  format and the associated Initialization
//  Sequence (IS).
//   0= Output data is MSB-aligned
//      For 1-pixel/1-clock parallel display
//      the output data ordering is the same
//      regardless of display Base Color Size.
//      For 1-pixel/1-clock parallel display
//      data alignment is optimized for 18-bpp
//      so the 24-bit data ordering is:
//       LD[5:0]   is blue  data bits 7-2
//       LD[11:6]  is green data bits 7-2
//       LD[17:12] is red   data bits 7-2
//       LD[19:18] is blue  data bits 1-0
//       LD[21:20] is green data bits 1-0
//       LD[23:22] is red   data bits 1-0
//      Note that LD18 to LD23 signals are
//      multiplexed with control pins (see Pin
//      Output Select definition)
//   1= Output data is LSB-aligned
//      For 1-pixel/1-clock parallel display
//      the output data ordering is determined
//      by display Base Color Size.
//      For 1-pixel/1-clock parallel display
//      data alignment is optimized for 24-bpp
//      as follows:
//       LD[7:0]   is blue  data bits 7-0
//       LD[15:8]  is green data bits 7-0
//       LD[23:16] is red   data bits 7-0
//      Note that LD18 to LD23 signals are
//      multiplexed with control pins (see Pin
//      Output Select definition)
#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_ALIGNMENT_SHIFT                      _MK_SHIFT_CONST(8)
#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_ALIGNMENT_FIELD                      (_MK_MASK_CONST(0x1) << DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_ALIGNMENT_SHIFT)
#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_ALIGNMENT_RANGE                      8:8
#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_ALIGNMENT_WOFFSET                    0x0
#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_ALIGNMENT_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_ALIGNMENT_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_ALIGNMENT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_ALIGNMENT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_ALIGNMENT_MSB                        _MK_ENUM_CONST(0)
#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_ALIGNMENT_LSB                        _MK_ENUM_CONST(1)

// Display Data Order  This is effective only for 1-pixel/2-clock
//  16-/18-/24- bit parallel interface
//   0= Red pixel is output in the first clock
//      and blue pixel is output in the second
//      cycle
//   1= Blue pixel is output in the first clock
//      cycle and red pixel is output in the
//      second clock cycle
#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_ORDER_SHIFT                  _MK_SHIFT_CONST(9)
#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_ORDER_FIELD                  (_MK_MASK_CONST(0x1) << DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_ORDER_SHIFT)
#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_ORDER_RANGE                  9:9
#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_ORDER_WOFFSET                        0x0
#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_ORDER_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_ORDER_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_ORDER_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_ORDER_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_ORDER_RED_BLUE                       _MK_ENUM_CONST(0)
#define DC_DISP_DISP_INTERFACE_CONTROL_0_DISP_DATA_ORDER_BLUE_RED                       _MK_ENUM_CONST(1)


// Register DC_DISP_DISP_COLOR_CONTROL_0  // Display Color Control
#define DC_DISP_DISP_COLOR_CONTROL_0                    _MK_ADDR_CONST(0x430)
#define DC_DISP_DISP_COLOR_CONTROL_0_SECURE                     0x0
#define DC_DISP_DISP_COLOR_CONTROL_0_WORD_COUNT                         0x1
#define DC_DISP_DISP_COLOR_CONTROL_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_RESET_MASK                         _MK_MASK_CONST(0xf05300f)
#define DC_DISP_DISP_COLOR_CONTROL_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_READ_MASK                  _MK_MASK_CONST(0xf07330f)
#define DC_DISP_DISP_COLOR_CONTROL_0_WRITE_MASK                         _MK_MASK_CONST(0xf07330f)
// Display Base Color Size  This parameter determines the number of bits
//  per color after dither.
//   0= 6 bits
//   1= 1 bit
//   2= 2 bits
//   3= 3 bits
//   4= 4 bits
//   5= 5 bits
//   6= 5 bits for R,B and 6 bits for G
//   7= 3 bits for R,G and 2 bits for B
//   8= 8 bits, this also forces dither to be
//      disabled. This setting can be used
//      to output 24-bit data in 1-pixel/clock
//      parallel display data format.
#define DC_DISP_DISP_COLOR_CONTROL_0_BASE_COLOR_SIZE_SHIFT                      _MK_SHIFT_CONST(0)
#define DC_DISP_DISP_COLOR_CONTROL_0_BASE_COLOR_SIZE_FIELD                      (_MK_MASK_CONST(0xf) << DC_DISP_DISP_COLOR_CONTROL_0_BASE_COLOR_SIZE_SHIFT)
#define DC_DISP_DISP_COLOR_CONTROL_0_BASE_COLOR_SIZE_RANGE                      3:0
#define DC_DISP_DISP_COLOR_CONTROL_0_BASE_COLOR_SIZE_WOFFSET                    0x0
#define DC_DISP_DISP_COLOR_CONTROL_0_BASE_COLOR_SIZE_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_BASE_COLOR_SIZE_DEFAULT_MASK                       _MK_MASK_CONST(0xf)
#define DC_DISP_DISP_COLOR_CONTROL_0_BASE_COLOR_SIZE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_BASE_COLOR_SIZE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_BASE_COLOR_SIZE_BASE666                    _MK_ENUM_CONST(0)
#define DC_DISP_DISP_COLOR_CONTROL_0_BASE_COLOR_SIZE_BASE111                    _MK_ENUM_CONST(1)
#define DC_DISP_DISP_COLOR_CONTROL_0_BASE_COLOR_SIZE_BASE222                    _MK_ENUM_CONST(2)
#define DC_DISP_DISP_COLOR_CONTROL_0_BASE_COLOR_SIZE_BASE333                    _MK_ENUM_CONST(3)
#define DC_DISP_DISP_COLOR_CONTROL_0_BASE_COLOR_SIZE_BASE444                    _MK_ENUM_CONST(4)
#define DC_DISP_DISP_COLOR_CONTROL_0_BASE_COLOR_SIZE_BASE555                    _MK_ENUM_CONST(5)
#define DC_DISP_DISP_COLOR_CONTROL_0_BASE_COLOR_SIZE_BASE565                    _MK_ENUM_CONST(6)
#define DC_DISP_DISP_COLOR_CONTROL_0_BASE_COLOR_SIZE_BASE332                    _MK_ENUM_CONST(7)
#define DC_DISP_DISP_COLOR_CONTROL_0_BASE_COLOR_SIZE_BASE888                    _MK_ENUM_CONST(8)

// Dither Control   00= dither disabled
//   01= reserved
//   10= ordered dither
//   11= error-diffusion dither
// Design Note: initial dither matrix (where d is 2 dither bits)
//      d=00        d=01        d=10        d=11
//   ---------   ---------   ---------   ---------
//   | 0 | 0 |   | 1 | 0 |   | 0 | 1 |   | 0 | 1 |
//   ---------   ---------   ---------   ---------
//   | 0 | 0 |   | 0 | 0 |   | 1 | 0 |   | 1 | 1 |
//   ---------   ---------   ---------   ---------
// Note: 0 in the matrix specifies no addition to base color
//       1 in the matrix specifies incrementation of base color (with saturation)
#define DC_DISP_DISP_COLOR_CONTROL_0_DITHER_CONTROL_SHIFT                       _MK_SHIFT_CONST(8)
#define DC_DISP_DISP_COLOR_CONTROL_0_DITHER_CONTROL_FIELD                       (_MK_MASK_CONST(0x3) << DC_DISP_DISP_COLOR_CONTROL_0_DITHER_CONTROL_SHIFT)
#define DC_DISP_DISP_COLOR_CONTROL_0_DITHER_CONTROL_RANGE                       9:8
#define DC_DISP_DISP_COLOR_CONTROL_0_DITHER_CONTROL_WOFFSET                     0x0
#define DC_DISP_DISP_COLOR_CONTROL_0_DITHER_CONTROL_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_DITHER_CONTROL_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_DITHER_CONTROL_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_DITHER_CONTROL_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_DITHER_CONTROL_DISABLE                     _MK_ENUM_CONST(0)
#define DC_DISP_DISP_COLOR_CONTROL_0_DITHER_CONTROL_ORDERED                     _MK_ENUM_CONST(2)
#define DC_DISP_DISP_COLOR_CONTROL_0_DITHER_CONTROL_ERRDIFF                     _MK_ENUM_CONST(3)

// Ordered Dither Frame Rotation
//  This parameter specifies the rotation
//  frequency of the dither matrix in terms of
//  number of frames. If programmed to 0, there
//  is no dither matrix rotation. If programmed
//  to N where N is larger than 0, the dither
//  matrix is rotated clockwise every N frame.
#define DC_DISP_DISP_COLOR_CONTROL_0_ORD_DITHER_ROTATION_SHIFT                  _MK_SHIFT_CONST(12)
#define DC_DISP_DISP_COLOR_CONTROL_0_ORD_DITHER_ROTATION_FIELD                  (_MK_MASK_CONST(0x3) << DC_DISP_DISP_COLOR_CONTROL_0_ORD_DITHER_ROTATION_SHIFT)
#define DC_DISP_DISP_COLOR_CONTROL_0_ORD_DITHER_ROTATION_RANGE                  13:12
#define DC_DISP_DISP_COLOR_CONTROL_0_ORD_DITHER_ROTATION_WOFFSET                        0x0
#define DC_DISP_DISP_COLOR_CONTROL_0_ORD_DITHER_ROTATION_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_ORD_DITHER_ROTATION_DEFAULT_MASK                   _MK_MASK_CONST(0x3)
#define DC_DISP_DISP_COLOR_CONTROL_0_ORD_DITHER_ROTATION_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_ORD_DITHER_ROTATION_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Display Color Swap   0= RGB (normal)
//   1= BGR (red-blue reverse)
#define DC_DISP_DISP_COLOR_CONTROL_0_DISP_COLOR_SWAP_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_DISP_COLOR_CONTROL_0_DISP_COLOR_SWAP_FIELD                      (_MK_MASK_CONST(0x1) << DC_DISP_DISP_COLOR_CONTROL_0_DISP_COLOR_SWAP_SHIFT)
#define DC_DISP_DISP_COLOR_CONTROL_0_DISP_COLOR_SWAP_RANGE                      16:16
#define DC_DISP_DISP_COLOR_CONTROL_0_DISP_COLOR_SWAP_WOFFSET                    0x0
#define DC_DISP_DISP_COLOR_CONTROL_0_DISP_COLOR_SWAP_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_DISP_COLOR_SWAP_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_DISP_DISP_COLOR_CONTROL_0_DISP_COLOR_SWAP_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_DISP_COLOR_SWAP_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_DISP_COLOR_SWAP_RGB                        _MK_ENUM_CONST(0)
#define DC_DISP_DISP_COLOR_CONTROL_0_DISP_COLOR_SWAP_BGR                        _MK_ENUM_CONST(1)

// Blank Color
//   0= zeros
//   1= ones
// Non Base Color applies to least significant color bits which are not part of base
// color and it has higher priority over Border Color but lower priority over Blank
// color.
#define DC_DISP_DISP_COLOR_CONTROL_0_BLANK_COLOR_SHIFT                  _MK_SHIFT_CONST(17)
#define DC_DISP_DISP_COLOR_CONTROL_0_BLANK_COLOR_FIELD                  (_MK_MASK_CONST(0x1) << DC_DISP_DISP_COLOR_CONTROL_0_BLANK_COLOR_SHIFT)
#define DC_DISP_DISP_COLOR_CONTROL_0_BLANK_COLOR_RANGE                  17:17
#define DC_DISP_DISP_COLOR_CONTROL_0_BLANK_COLOR_WOFFSET                        0x0
#define DC_DISP_DISP_COLOR_CONTROL_0_BLANK_COLOR_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_BLANK_COLOR_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_BLANK_COLOR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_BLANK_COLOR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Non Base Color
//   0= zeros
//   1= ones
// MD0-3 signals are general purpose mode signals that can be output in various pins
//  (see Pin Output Select) to configure the display device.
//  These bits are effective at start of frame. Typically these can be programmed
//  in shadow register which takes effect on the next frame.
#define DC_DISP_DISP_COLOR_CONTROL_0_NON_BASE_COLOR_SHIFT                       _MK_SHIFT_CONST(18)
#define DC_DISP_DISP_COLOR_CONTROL_0_NON_BASE_COLOR_FIELD                       (_MK_MASK_CONST(0x1) << DC_DISP_DISP_COLOR_CONTROL_0_NON_BASE_COLOR_SHIFT)
#define DC_DISP_DISP_COLOR_CONTROL_0_NON_BASE_COLOR_RANGE                       18:18
#define DC_DISP_DISP_COLOR_CONTROL_0_NON_BASE_COLOR_WOFFSET                     0x0
#define DC_DISP_DISP_COLOR_CONTROL_0_NON_BASE_COLOR_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_NON_BASE_COLOR_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_DISP_DISP_COLOR_CONTROL_0_NON_BASE_COLOR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_NON_BASE_COLOR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// LCD Mode 0 signal   0= low
//   1= high
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD0_SHIFT                      _MK_SHIFT_CONST(24)
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD0_FIELD                      (_MK_MASK_CONST(0x1) << DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD0_SHIFT)
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD0_RANGE                      24:24
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD0_WOFFSET                    0x0
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD0_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD0_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD0_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD0_LOW                        _MK_ENUM_CONST(0)
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD0_HIGH                       _MK_ENUM_CONST(1)

// LCD Mode 1 signal   0= low
//   1= high
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD1_SHIFT                      _MK_SHIFT_CONST(25)
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD1_FIELD                      (_MK_MASK_CONST(0x1) << DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD1_SHIFT)
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD1_RANGE                      25:25
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD1_WOFFSET                    0x0
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD1_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD1_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD1_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD1_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD1_LOW                        _MK_ENUM_CONST(0)
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD1_HIGH                       _MK_ENUM_CONST(1)

// LCD Mode 2 signal   0= low
//   1= high
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD2_SHIFT                      _MK_SHIFT_CONST(26)
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD2_FIELD                      (_MK_MASK_CONST(0x1) << DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD2_SHIFT)
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD2_RANGE                      26:26
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD2_WOFFSET                    0x0
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD2_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD2_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD2_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD2_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD2_LOW                        _MK_ENUM_CONST(0)
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD2_HIGH                       _MK_ENUM_CONST(1)

// LCD Mode 3 signal   0= low
//   1= high
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD3_SHIFT                      _MK_SHIFT_CONST(27)
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD3_FIELD                      (_MK_MASK_CONST(0x1) << DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD3_SHIFT)
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD3_RANGE                      27:27
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD3_WOFFSET                    0x0
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD3_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD3_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD3_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD3_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD3_LOW                        _MK_ENUM_CONST(0)
#define DC_DISP_DISP_COLOR_CONTROL_0_LCD_MD3_HIGH                       _MK_ENUM_CONST(1)

// This register specifies options for both display shift clock 0 (SC0) and display shift
//  clock 1 (SC1).
// SC0 signal is typically output on LSC0 pin and SC1 signal is typically output on LSC1 pin.

// Register DC_DISP_SHIFT_CLOCK_OPTIONS_0  // Shift Clock options
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0                   _MK_ADDR_CONST(0x431)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SECURE                    0x0
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_WORD_COUNT                        0x1
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_RESET_MASK                        _MK_MASK_CONST(0xff00ff)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_READ_MASK                         _MK_MASK_CONST(0xff00ff)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_WRITE_MASK                        _MK_MASK_CONST(0xff00ff)
// SC0 Horizontal Qualifier   0= disable (regardless of vertical
//      qualifier)
//   1= no horizontal qualifier
//      (V qualifer only)
//   2= horizontal display active
//   3= 1-clock early & extended H display
//      active
//   4= H Pulse 0 (HP0)
//   5= 1-clock early & extended H Pulse 0
//   others= reserved
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_H_QUALIFIER_SHIFT                     _MK_SHIFT_CONST(0)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_H_QUALIFIER_FIELD                     (_MK_MASK_CONST(0x7) << DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_H_QUALIFIER_SHIFT)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_H_QUALIFIER_RANGE                     2:0
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_H_QUALIFIER_WOFFSET                   0x0
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_H_QUALIFIER_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_H_QUALIFIER_DEFAULT_MASK                      _MK_MASK_CONST(0x7)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_H_QUALIFIER_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_H_QUALIFIER_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_H_QUALIFIER_DISABLE                   _MK_ENUM_CONST(0)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_H_QUALIFIER_NO_HQUAL                  _MK_ENUM_CONST(1)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_H_QUALIFIER_HACTIVE                   _MK_ENUM_CONST(2)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_H_QUALIFIER_EXT_HACTIVE                       _MK_ENUM_CONST(3)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_H_QUALIFIER_HPULSE0                   _MK_ENUM_CONST(4)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_H_QUALIFIER_EXT_HPULSE0                       _MK_ENUM_CONST(5)

// SC0 Vertical Qualifier   0= no vertical qualifer
//   2= vertical display active
//   3= 1-line extended vertical display active
//   4= V Pulse 0 (VP0)
//   5= 1-line extended V Pulse 0
//   others= reserved
// If SC0 is divided by 2 or 4 then it is synchronously reset at the beginning of the
//  horizontal qualifier such that rising edge of SC0 is generated for the first
//  horizontally qualified 'pixel'. In the case where there is no horizontal qualifier
//  start of horizontal display active will be used to generate the synchronous reset.
// If Initialization Sequence (IS) is enabled on parallel interface then only divide by 1
//  is allowed for SC0 Clock Divider and SC0 must have vertical and horizontal
//  qualifiers enabled.
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_V_QUALIFIER_SHIFT                     _MK_SHIFT_CONST(3)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_V_QUALIFIER_FIELD                     (_MK_MASK_CONST(0x7) << DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_V_QUALIFIER_SHIFT)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_V_QUALIFIER_RANGE                     5:3
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_V_QUALIFIER_WOFFSET                   0x0
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_V_QUALIFIER_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_V_QUALIFIER_DEFAULT_MASK                      _MK_MASK_CONST(0x7)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_V_QUALIFIER_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_V_QUALIFIER_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_V_QUALIFIER_NO_VQUAL                  _MK_ENUM_CONST(0)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_V_QUALIFIER_RESERVED                  _MK_ENUM_CONST(1)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_V_QUALIFIER_VACTIVE                   _MK_ENUM_CONST(2)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_V_QUALIFIER_EXT_VACTIVE                       _MK_ENUM_CONST(3)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_V_QUALIFIER_VPULSE0                   _MK_ENUM_CONST(4)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_V_QUALIFIER_EXT_VPULSE0                       _MK_ENUM_CONST(5)

// SC0 Clock Divider   0= divide by 1 - this is valid for all
//      display interface
//   1= divide by 2 - this is valid only for
//      1-pixel/1-clock parallel display and
//      2-pixel/1-clock parallel display
//   2= divide by 4 - this is valid only for
//      1-pixel/1-clock parallel display
//   3= reserved
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_CLK_DIVIDER_SHIFT                     _MK_SHIFT_CONST(6)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_CLK_DIVIDER_FIELD                     (_MK_MASK_CONST(0x3) << DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_CLK_DIVIDER_SHIFT)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_CLK_DIVIDER_RANGE                     7:6
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_CLK_DIVIDER_WOFFSET                   0x0
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_CLK_DIVIDER_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_CLK_DIVIDER_DEFAULT_MASK                      _MK_MASK_CONST(0x3)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_CLK_DIVIDER_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_CLK_DIVIDER_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_CLK_DIVIDER_DIV1                      _MK_ENUM_CONST(0)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_CLK_DIVIDER_DIV2                      _MK_ENUM_CONST(1)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC0_CLK_DIVIDER_DIV4                      _MK_ENUM_CONST(2)

// SC1 Horizontal Qualifier   0= disable (regardless of vertical
//      qualifier)
//   1= no horizontal qualifier
//      (V qualifer only)
//   2= horizontal display active
//   3= 1-clock early & extended H display
//      active
//   4= H Pulse 1 (HP1)
//   5= 1-clock early & extended H Pulse 1
//   others= reserved
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_H_QUALIFIER_SHIFT                     _MK_SHIFT_CONST(16)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_H_QUALIFIER_FIELD                     (_MK_MASK_CONST(0x7) << DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_H_QUALIFIER_SHIFT)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_H_QUALIFIER_RANGE                     18:16
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_H_QUALIFIER_WOFFSET                   0x0
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_H_QUALIFIER_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_H_QUALIFIER_DEFAULT_MASK                      _MK_MASK_CONST(0x7)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_H_QUALIFIER_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_H_QUALIFIER_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_H_QUALIFIER_DISABLE                   _MK_ENUM_CONST(0)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_H_QUALIFIER_NO_HQUAL                  _MK_ENUM_CONST(1)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_H_QUALIFIER_HACTIVE                   _MK_ENUM_CONST(2)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_H_QUALIFIER_EXT_HACTIVE                       _MK_ENUM_CONST(3)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_H_QUALIFIER_HPULSE1                   _MK_ENUM_CONST(4)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_H_QUALIFIER_EXT_HPULSE1                       _MK_ENUM_CONST(5)

// SC1 Vertical Qualifier   0= no vertical qualifer
//   2= vertical display active
//   3= 1-line extended vertical display active
//   4= V Pulse 1 (VP1)
//   5= 1-line extended V Pulse 1
//   others= reserved
// If SC1 is divided by 2 then it is synchronously reset at the beginning of the
//  horizontal qualifier such that rising edge of SC1 is generated for the first
//  horizontally qualified 'pixel'. If SC1 is divided by 4 then it is synchronously
//  reset at the beginning of the horizontal qualifier such that rising edge of LSC1
//  is generated for the second horizontally qualified 'pixel'. In the case where there
//  is no horizontal qualifier start of horizontal display active will be used to
//  generate the synchronous reset.
// If Initialization Sequence (IS) is enabled on parallel interface then only divide by 1
//  is allowed for SC1 Clock Divider and SC1 must have vertical and horizontal
//  qualifiers enabled.
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_V_QUALIFIER_SHIFT                     _MK_SHIFT_CONST(19)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_V_QUALIFIER_FIELD                     (_MK_MASK_CONST(0x7) << DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_V_QUALIFIER_SHIFT)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_V_QUALIFIER_RANGE                     21:19
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_V_QUALIFIER_WOFFSET                   0x0
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_V_QUALIFIER_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_V_QUALIFIER_DEFAULT_MASK                      _MK_MASK_CONST(0x7)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_V_QUALIFIER_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_V_QUALIFIER_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_V_QUALIFIER_NO_VQUAL                  _MK_ENUM_CONST(0)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_V_QUALIFIER_RESERVED                  _MK_ENUM_CONST(1)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_V_QUALIFIER_VACTIVE                   _MK_ENUM_CONST(2)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_V_QUALIFIER_EXT_VACTIVE                       _MK_ENUM_CONST(3)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_V_QUALIFIER_VPULSE1                   _MK_ENUM_CONST(4)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_V_QUALIFIER_EXT_VPULSE1                       _MK_ENUM_CONST(5)

// SC1 Clock Divider   0= divide by 1 - this is valid for all
//      display interface
//   1= divide by 2 - this is valid only for
//      1-pixel/1-clock parallel display and
//      2-pixel/1-clock parallel display
//   2= divide by 4 - this is valid only for
//      1-pixel/1-clock parallel display
//   3= reserved
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_CLK_DIVIDER_SHIFT                     _MK_SHIFT_CONST(22)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_CLK_DIVIDER_FIELD                     (_MK_MASK_CONST(0x3) << DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_CLK_DIVIDER_SHIFT)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_CLK_DIVIDER_RANGE                     23:22
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_CLK_DIVIDER_WOFFSET                   0x0
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_CLK_DIVIDER_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_CLK_DIVIDER_DEFAULT_MASK                      _MK_MASK_CONST(0x3)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_CLK_DIVIDER_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_CLK_DIVIDER_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_CLK_DIVIDER_DIV1                      _MK_ENUM_CONST(0)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_CLK_DIVIDER_DIV2                      _MK_ENUM_CONST(1)
#define DC_DISP_SHIFT_CLOCK_OPTIONS_0_SC1_CLK_DIVIDER_DIV4                      _MK_ENUM_CONST(2)

// DE signal is display Data Enable signal which can be used to indicate valid data area and
//  it can be output on LSC1 pin if needed.
//
// This signal can also be used to generage PCS (Parallel mode panel Chip Selecter)
// 0 = De-asserted during both VBlank and HBlank, except for the IS sequence and the gap 
//     between IS and the first active line if IS is enabled. 
// 1 = De-asserted during VBlank, except for the IS line (whole IS line) if IS is enabled. 
// 2 = Always asserted during refresh 
// 
// Option 0 can be achieved by: DE_SELECT=ACTIVE_IS;    DE_CONTROL=NORMAL 
// Option 1 can be achieved by: DE_SELECT=ACTIVE_IS;    DE_CONTROL=ACTIVE_BLANK 
// Option 2 can be achieved by: DE_SELECT=ACTIVE_BLANK; DE_CONTROL=ACTIVE_BLANK

// Register DC_DISP_DATA_ENABLE_OPTIONS_0  // Data Enable options
#define DC_DISP_DATA_ENABLE_OPTIONS_0                   _MK_ADDR_CONST(0x432)
#define DC_DISP_DATA_ENABLE_OPTIONS_0_SECURE                    0x0
#define DC_DISP_DATA_ENABLE_OPTIONS_0_WORD_COUNT                        0x1
#define DC_DISP_DATA_ENABLE_OPTIONS_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_DATA_ENABLE_OPTIONS_0_RESET_MASK                        _MK_MASK_CONST(0x1f)
#define DC_DISP_DATA_ENABLE_OPTIONS_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_DATA_ENABLE_OPTIONS_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_DATA_ENABLE_OPTIONS_0_READ_MASK                         _MK_MASK_CONST(0x1f)
#define DC_DISP_DATA_ENABLE_OPTIONS_0_WRITE_MASK                        _MK_MASK_CONST(0x1f)
// DE (Data Enable) vertical coverage control   0= DE is generated on every lines
//      (active & blank)
//   1= DE is generated only for active lines
//   2= DE is generated for active lines and 
//      Initialization sequence (if IS is enabled). 
//      DE is also asserted in the time gap between 
//      the IS and the first active line. 
//  This bit also controls STH for serial
//  display interface in the same manner.
#define DC_DISP_DATA_ENABLE_OPTIONS_0_DE_SELECT_SHIFT                   _MK_SHIFT_CONST(0)
#define DC_DISP_DATA_ENABLE_OPTIONS_0_DE_SELECT_FIELD                   (_MK_MASK_CONST(0x3) << DC_DISP_DATA_ENABLE_OPTIONS_0_DE_SELECT_SHIFT)
#define DC_DISP_DATA_ENABLE_OPTIONS_0_DE_SELECT_RANGE                   1:0
#define DC_DISP_DATA_ENABLE_OPTIONS_0_DE_SELECT_WOFFSET                 0x0
#define DC_DISP_DATA_ENABLE_OPTIONS_0_DE_SELECT_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_DATA_ENABLE_OPTIONS_0_DE_SELECT_DEFAULT_MASK                    _MK_MASK_CONST(0x3)
#define DC_DISP_DATA_ENABLE_OPTIONS_0_DE_SELECT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_DATA_ENABLE_OPTIONS_0_DE_SELECT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_DATA_ENABLE_OPTIONS_0_DE_SELECT_ACTIVE_BLANK                    _MK_ENUM_CONST(0)
#define DC_DISP_DATA_ENABLE_OPTIONS_0_DE_SELECT_ACTIVE                  _MK_ENUM_CONST(1)
#define DC_DISP_DATA_ENABLE_OPTIONS_0_DE_SELECT_ACTIVE_IS                       _MK_ENUM_CONST(2)

// DE (Data Enable) horizontal coverage control   0= 1-pixel clock pulse preceding active
//      line (1-clock DE)
//   1= LDE active for horizontal display
//      active time (normal DE)
//   2= LDE starts 1-pixel clock preceding
//      active line but stays high on horizontal
//      display active (early and extended DE)
//   3= 1-pixel clock early horizontal display
//      active (early DE)
//   4= DE is active for the whole line, covering both 
//      active data and h blank (active and blank) 
#define DC_DISP_DATA_ENABLE_OPTIONS_0_DE_CONTROL_SHIFT                  _MK_SHIFT_CONST(2)
#define DC_DISP_DATA_ENABLE_OPTIONS_0_DE_CONTROL_FIELD                  (_MK_MASK_CONST(0x7) << DC_DISP_DATA_ENABLE_OPTIONS_0_DE_CONTROL_SHIFT)
#define DC_DISP_DATA_ENABLE_OPTIONS_0_DE_CONTROL_RANGE                  4:2
#define DC_DISP_DATA_ENABLE_OPTIONS_0_DE_CONTROL_WOFFSET                        0x0
#define DC_DISP_DATA_ENABLE_OPTIONS_0_DE_CONTROL_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_DATA_ENABLE_OPTIONS_0_DE_CONTROL_DEFAULT_MASK                   _MK_MASK_CONST(0x7)
#define DC_DISP_DATA_ENABLE_OPTIONS_0_DE_CONTROL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_DATA_ENABLE_OPTIONS_0_DE_CONTROL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_DATA_ENABLE_OPTIONS_0_DE_CONTROL_ONECLK                 _MK_ENUM_CONST(0)
#define DC_DISP_DATA_ENABLE_OPTIONS_0_DE_CONTROL_NORMAL                 _MK_ENUM_CONST(1)
#define DC_DISP_DATA_ENABLE_OPTIONS_0_DE_CONTROL_EARLY_EXT                      _MK_ENUM_CONST(2)
#define DC_DISP_DATA_ENABLE_OPTIONS_0_DE_CONTROL_EARLY                  _MK_ENUM_CONST(3)
#define DC_DISP_DATA_ENABLE_OPTIONS_0_DE_CONTROL_ACTIVE_BLANK                   _MK_ENUM_CONST(4)

// Serial display interface control signals
//
// Controls signals for the low-voltage differential serial display interface consists of:
//   SDT, STP and STH signals.
// SDT and STP are asserted high if current pixel is same as previous pixel; in this case,
//  SDT is toggled low sometime later but STP is either toggled low at same time as SDT (if
//  next pixel is different than current pixel) or remains high if next pixel is same as
//  current pixel.
//  When doing pixel comparison, output of dither is used, so pixel comparison
//  depends on the base color (which maybe different than the number of output data bits).
//  Both SDT and STP are always low (disabled) if the pixel clock divider is 4 or less.
// STH is used to indicate the beginning of line and it is asserted high once at the beginning
//  of each line. The STH pulse exact timing width is dependent on the exact mode.
//  STH is generated from Data Enable therefore Data Enable Select bit also controls STH
//  generation and can be used to generate STH either only for active lines or both for
//  active and blank lines. If STH is sent during blank lines then the blank lines are also
//  transmitted.
//

// Register DC_DISP_SERIAL_INTERFACE_OPTIONS_0  // Serial display interface options
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0                      _MK_ADDR_CONST(0x433)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_SECURE                       0x0
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_WORD_COUNT                   0x1
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_RESET_MASK                   _MK_MASK_CONST(0xff)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_READ_MASK                    _MK_MASK_CONST(0xff)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_WRITE_MASK                   _MK_MASK_CONST(0xff)
// SDT and STP modes   0= SDT and STP disabled
//   1= reserved
//   2= SDT & STP enabled, duplicate data sent
//   3= SDT & STP enabled, duplicate data not
//      sent
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_SDT_STP_MODE_SHIFT                   _MK_SHIFT_CONST(0)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_SDT_STP_MODE_FIELD                   (_MK_MASK_CONST(0x3) << DC_DISP_SERIAL_INTERFACE_OPTIONS_0_SDT_STP_MODE_SHIFT)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_SDT_STP_MODE_RANGE                   1:0
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_SDT_STP_MODE_WOFFSET                 0x0
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_SDT_STP_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_SDT_STP_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x3)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_SDT_STP_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_SDT_STP_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_SDT_STP_MODE_DISABLE                 _MK_ENUM_CONST(0)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_SDT_STP_MODE_RESERVED                        _MK_ENUM_CONST(1)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_SDT_STP_MODE_ENABLE_DUP                      _MK_ENUM_CONST(2)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_SDT_STP_MODE_ENABLE                  _MK_ENUM_CONST(3)

// SDT and STP signal duration
//   0= 1 shift clock
//   1= 1 pixel clock
//   2= 1 pixel clock - 1  shift clock
//   3= 1 pixel clock - 2  shift clock
//   4= 1 pixel clock - 3  shift clock
//   5= 1 pixel clock - 4  shift clock
//   :         :                :
//   F= 1 pixel clock - 14 shift clock
// STP active duration is same as SDT if next
//  pixel is not the same as current pixel;
//  else, STP active duration is always 1 pixel
//  clock.
// Maximum valid setting is pixel clock divider
//  - 1 for pixel clock divider > 4. If pixel
//  clock divider is 4 or less, SDT and STP is
//  always low.
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_SDT_STP_DURATION_SHIFT                       _MK_SHIFT_CONST(2)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_SDT_STP_DURATION_FIELD                       (_MK_MASK_CONST(0xf) << DC_DISP_SERIAL_INTERFACE_OPTIONS_0_SDT_STP_DURATION_SHIFT)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_SDT_STP_DURATION_RANGE                       5:2
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_SDT_STP_DURATION_WOFFSET                     0x0
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_SDT_STP_DURATION_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_SDT_STP_DURATION_DEFAULT_MASK                        _MK_MASK_CONST(0xf)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_SDT_STP_DURATION_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_SDT_STP_DURATION_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// STH signal duration   0= STH is high for 1 pixel clock in all
//      cases except for 3-bit 2-channel and
//      6-bit 3-channel where STH is 1.5 pixel
//      clock and for 3-bit 3-channel STH is 3
//      pixel clocks.
//   1= STH is high for 2 pixel clock in all
//      cases except for 3-bit 3-channel STH is
//      4 pixel clocks.
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_STH_DURATION_SHIFT                   _MK_SHIFT_CONST(6)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_STH_DURATION_FIELD                   (_MK_MASK_CONST(0x1) << DC_DISP_SERIAL_INTERFACE_OPTIONS_0_STH_DURATION_SHIFT)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_STH_DURATION_RANGE                   6:6
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_STH_DURATION_WOFFSET                 0x0
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_STH_DURATION_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_STH_DURATION_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_STH_DURATION_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_STH_DURATION_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_STH_DURATION_ONE_CLOCK                       _MK_ENUM_CONST(0)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_STH_DURATION_TWO_CLOCK                       _MK_ENUM_CONST(1)

// STP signal control   0= STP is not OR-ed with H Pulse 2 and
//      vertical blank
//   1= STP is OR-ed with H Pulse 2 and vertical
//      blank
//  This may be set to 1 when STP needs to be
//  forced high during blank time in which case
//  H Pulse 2 should be programmed when STP
//  needs to be forced high. Vertical blank is
//  the area outside vertical display active.
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_STP_CONTROL_SHIFT                    _MK_SHIFT_CONST(7)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_STP_CONTROL_FIELD                    (_MK_MASK_CONST(0x1) << DC_DISP_SERIAL_INTERFACE_OPTIONS_0_STP_CONTROL_SHIFT)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_STP_CONTROL_RANGE                    7:7
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_STP_CONTROL_WOFFSET                  0x0
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_STP_CONTROL_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_STP_CONTROL_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_STP_CONTROL_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_STP_CONTROL_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_STP_CONTROL_NORMAL                   _MK_ENUM_CONST(0)
#define DC_DISP_SERIAL_INTERFACE_OPTIONS_0_STP_CONTROL_EXTENDED                 _MK_ENUM_CONST(1)

// LCD SPI interface signals consists of:
//  1. SPI Clock (SCK) which can be output on LSCK pin.
//  2. SPI Data (SDA) which can be output on LSDA pin.
//  3. Optional SPI Data/Command (SDC) which can be output on LDC pin.
//  4. Main-Display SPI Chip Select (Main SCS_) signal which can be output on LCS_ pin.
//  5. Sub-Display  SPI Chip Select (Sub  SCS_) signal which can be optionally output on
//     several pins (see pin output select) - this is optional and it is used only if there
//     is a sub display.
// For LCD SPI, pixel data can only be sent to either Main-Display or Sub-Display but not to
//  both.
// Main SCS_ or Sub SCS_ signal is always active low and is typically controlled by SPI logic
//  but can also be forced active one line prior to display active (for SIS SPI) and
//  during vertical display active area (for LCD SPI).

// Register DC_DISP_LCD_SPI_OPTIONS_0  // LCD SPI interface options
#define DC_DISP_LCD_SPI_OPTIONS_0                       _MK_ADDR_CONST(0x434)
#define DC_DISP_LCD_SPI_OPTIONS_0_SECURE                        0x0
#define DC_DISP_LCD_SPI_OPTIONS_0_WORD_COUNT                    0x1
#define DC_DISP_LCD_SPI_OPTIONS_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define DC_DISP_LCD_SPI_OPTIONS_0_RESET_MASK                    _MK_MASK_CONST(0x1f)
#define DC_DISP_LCD_SPI_OPTIONS_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define DC_DISP_LCD_SPI_OPTIONS_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_LCD_SPI_OPTIONS_0_READ_MASK                     _MK_MASK_CONST(0x1f)
#define DC_DISP_LCD_SPI_OPTIONS_0_WRITE_MASK                    _MK_MASK_CONST(0x1f)
// LCD SPI Chip Select (SCS_)   0= Send LCD SPI data to Main Display
//      (Main SCS_ is activated)
//   1= Send LCD SPI data to Sub Display
//      (Sub SCS_ is activated)
// This bit is also used when SPI Chip Select
//  Control are NOT LCD_IS_SPI to determine
//  either Main SCS_ or Sub SCS_ to be forced
//  active.
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_CS_SHIFT                      _MK_SHIFT_CONST(0)
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_CS_FIELD                      (_MK_MASK_CONST(0x1) << DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_CS_SHIFT)
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_CS_RANGE                      0:0
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_CS_WOFFSET                    0x0
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_CS_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_CS_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_CS_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_CS_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_CS_MAIN                       _MK_ENUM_CONST(0)
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_CS_SUB                        _MK_ENUM_CONST(1)

// LCD SPI Data/Command (SDC)   0= SPI Data/Command is low for LCD SPI
//      writes to the display.
//      For PCD6 data format, command byte is
//      sent.
//   1= SPI Data/Command is high for LCD SPI
//      writes to the display.
//      For PCD6 data format, data byte is sent.
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_DC_SHIFT                      _MK_SHIFT_CONST(1)
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_DC_FIELD                      (_MK_MASK_CONST(0x1) << DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_DC_SHIFT)
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_DC_RANGE                      1:1
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_DC_WOFFSET                    0x0
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_DC_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_DC_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_DC_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_DC_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_DC_LOW                        _MK_ENUM_CONST(0)
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_DC_HIGH                       _MK_ENUM_CONST(1)

// LCD SPI Chip Select (SCS_) Control
//  for both IS SPI or LCD SPI   0= Main SCS_ or Sub SCS_ is controlled
//      by LCD SPI or by IS SPI
//   1= Main SCS_ or Sub SCS_ is controlled
//      by LCD SPI, and depending on LCD SPI
//      Chip Select bit, one of them is forced
//      active for 1-line prior to display
//      active when IS SPI is enabled
//   2= Main SCS_ or Sub SCS_ is controlled
//      by IS SPI, and depending on LCD SPI
//      Chip Select bit, one of them is forced
//      active during vertical display active
//      area when LCD SPI is enabled
//   3= Main SCS_ or Sub SCS_, depending on
//      LCD SPI Chip Select bit, is forced
//      active 1-line prior to display active
//      when IS SPI is enabled and also during
//      vertical display active area when LCD
//      SPI is enabled
#define DC_DISP_LCD_SPI_OPTIONS_0_SPI_CS_CONTROL_SHIFT                  _MK_SHIFT_CONST(2)
#define DC_DISP_LCD_SPI_OPTIONS_0_SPI_CS_CONTROL_FIELD                  (_MK_MASK_CONST(0x3) << DC_DISP_LCD_SPI_OPTIONS_0_SPI_CS_CONTROL_SHIFT)
#define DC_DISP_LCD_SPI_OPTIONS_0_SPI_CS_CONTROL_RANGE                  3:2
#define DC_DISP_LCD_SPI_OPTIONS_0_SPI_CS_CONTROL_WOFFSET                        0x0
#define DC_DISP_LCD_SPI_OPTIONS_0_SPI_CS_CONTROL_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_LCD_SPI_OPTIONS_0_SPI_CS_CONTROL_DEFAULT_MASK                   _MK_MASK_CONST(0x3)
#define DC_DISP_LCD_SPI_OPTIONS_0_SPI_CS_CONTROL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_LCD_SPI_OPTIONS_0_SPI_CS_CONTROL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_LCD_SPI_OPTIONS_0_SPI_CS_CONTROL_LCD_IS_SPI                     _MK_ENUM_CONST(0)
#define DC_DISP_LCD_SPI_OPTIONS_0_SPI_CS_CONTROL_LCD_SPI                        _MK_ENUM_CONST(1)
#define DC_DISP_LCD_SPI_OPTIONS_0_SPI_CS_CONTROL_IS_SPI                 _MK_ENUM_CONST(2)
#define DC_DISP_LCD_SPI_OPTIONS_0_SPI_CS_CONTROL_FORCED                 _MK_ENUM_CONST(3)

// LCD SPI Data Direction   0= msb to lsb
//   1= lsb to msb
//  Note that data direction does not affect
//  the start byte direction (which is always
//  msb to lsb) and position (always first
//  8-bit of serial data) for SPI16SB mode.
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_DIRECTION_SHIFT                       _MK_SHIFT_CONST(4)
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_DIRECTION_FIELD                       (_MK_MASK_CONST(0x1) << DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_DIRECTION_SHIFT)
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_DIRECTION_RANGE                       4:4
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_DIRECTION_WOFFSET                     0x0
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_DIRECTION_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_DIRECTION_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_DIRECTION_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_DIRECTION_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_DIRECTION_MSB2LSB                     _MK_ENUM_CONST(0)
#define DC_DISP_LCD_SPI_OPTIONS_0_LCD_SPI_DIRECTION_LSB2MSB                     _MK_ENUM_CONST(1)

// Border Color defines the color of areas within the active display area which are
// outside the defined active windows. This is 24-bit color which is applied after blending.

// Register DC_DISP_BORDER_COLOR_0  // Border Color
#define DC_DISP_BORDER_COLOR_0                  _MK_ADDR_CONST(0x435)
#define DC_DISP_BORDER_COLOR_0_SECURE                   0x0
#define DC_DISP_BORDER_COLOR_0_WORD_COUNT                       0x1
#define DC_DISP_BORDER_COLOR_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define DC_DISP_BORDER_COLOR_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_BORDER_COLOR_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define DC_DISP_BORDER_COLOR_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_BORDER_COLOR_0_READ_MASK                        _MK_MASK_CONST(0xffffff)
#define DC_DISP_BORDER_COLOR_0_WRITE_MASK                       _MK_MASK_CONST(0xffffff)
// Red Border Color
#define DC_DISP_BORDER_COLOR_0_BORDER_COLOR_R_SHIFT                     _MK_SHIFT_CONST(0)
#define DC_DISP_BORDER_COLOR_0_BORDER_COLOR_R_FIELD                     (_MK_MASK_CONST(0xff) << DC_DISP_BORDER_COLOR_0_BORDER_COLOR_R_SHIFT)
#define DC_DISP_BORDER_COLOR_0_BORDER_COLOR_R_RANGE                     7:0
#define DC_DISP_BORDER_COLOR_0_BORDER_COLOR_R_WOFFSET                   0x0
#define DC_DISP_BORDER_COLOR_0_BORDER_COLOR_R_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_BORDER_COLOR_0_BORDER_COLOR_R_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_BORDER_COLOR_0_BORDER_COLOR_R_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_BORDER_COLOR_0_BORDER_COLOR_R_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// Green Border Color
#define DC_DISP_BORDER_COLOR_0_BORDER_COLOR_G_SHIFT                     _MK_SHIFT_CONST(8)
#define DC_DISP_BORDER_COLOR_0_BORDER_COLOR_G_FIELD                     (_MK_MASK_CONST(0xff) << DC_DISP_BORDER_COLOR_0_BORDER_COLOR_G_SHIFT)
#define DC_DISP_BORDER_COLOR_0_BORDER_COLOR_G_RANGE                     15:8
#define DC_DISP_BORDER_COLOR_0_BORDER_COLOR_G_WOFFSET                   0x0
#define DC_DISP_BORDER_COLOR_0_BORDER_COLOR_G_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_BORDER_COLOR_0_BORDER_COLOR_G_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_BORDER_COLOR_0_BORDER_COLOR_G_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_BORDER_COLOR_0_BORDER_COLOR_G_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// Blue Border Color
#define DC_DISP_BORDER_COLOR_0_BORDER_COLOR_B_SHIFT                     _MK_SHIFT_CONST(16)
#define DC_DISP_BORDER_COLOR_0_BORDER_COLOR_B_FIELD                     (_MK_MASK_CONST(0xff) << DC_DISP_BORDER_COLOR_0_BORDER_COLOR_B_SHIFT)
#define DC_DISP_BORDER_COLOR_0_BORDER_COLOR_B_RANGE                     23:16
#define DC_DISP_BORDER_COLOR_0_BORDER_COLOR_B_WOFFSET                   0x0
#define DC_DISP_BORDER_COLOR_0_BORDER_COLOR_B_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_BORDER_COLOR_0_BORDER_COLOR_B_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_BORDER_COLOR_0_BORDER_COLOR_B_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_BORDER_COLOR_0_BORDER_COLOR_B_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// Color Key 0 and Color Key 1
// Two ranges of color key are defined and they are common for all windows because it is
//  expected that typically only one window will have color key enabled. Because there are
//  two sets of color key, it is possible to have 2 windows each using one color key set.
//  Usage of this color key is described in the Display Color Key and Blending class.

// Register DC_DISP_COLOR_KEY0_LOWER_0  // Color Key 0 Lower value
#define DC_DISP_COLOR_KEY0_LOWER_0                      _MK_ADDR_CONST(0x436)
#define DC_DISP_COLOR_KEY0_LOWER_0_SECURE                       0x0
#define DC_DISP_COLOR_KEY0_LOWER_0_WORD_COUNT                   0x1
#define DC_DISP_COLOR_KEY0_LOWER_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY0_LOWER_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY0_LOWER_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY0_LOWER_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY0_LOWER_0_READ_MASK                    _MK_MASK_CONST(0xffffff)
#define DC_DISP_COLOR_KEY0_LOWER_0_WRITE_MASK                   _MK_MASK_CONST(0xffffff)
// Color Key 0 Red (V) Lower value
#define DC_DISP_COLOR_KEY0_LOWER_0_COLOR_KEY0_L_R_SHIFT                 _MK_SHIFT_CONST(0)
#define DC_DISP_COLOR_KEY0_LOWER_0_COLOR_KEY0_L_R_FIELD                 (_MK_MASK_CONST(0xff) << DC_DISP_COLOR_KEY0_LOWER_0_COLOR_KEY0_L_R_SHIFT)
#define DC_DISP_COLOR_KEY0_LOWER_0_COLOR_KEY0_L_R_RANGE                 7:0
#define DC_DISP_COLOR_KEY0_LOWER_0_COLOR_KEY0_L_R_WOFFSET                       0x0
#define DC_DISP_COLOR_KEY0_LOWER_0_COLOR_KEY0_L_R_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY0_LOWER_0_COLOR_KEY0_L_R_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY0_LOWER_0_COLOR_KEY0_L_R_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY0_LOWER_0_COLOR_KEY0_L_R_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Color Key 0 Green (Y) Lower value
#define DC_DISP_COLOR_KEY0_LOWER_0_COLOR_KEY0_L_G_SHIFT                 _MK_SHIFT_CONST(8)
#define DC_DISP_COLOR_KEY0_LOWER_0_COLOR_KEY0_L_G_FIELD                 (_MK_MASK_CONST(0xff) << DC_DISP_COLOR_KEY0_LOWER_0_COLOR_KEY0_L_G_SHIFT)
#define DC_DISP_COLOR_KEY0_LOWER_0_COLOR_KEY0_L_G_RANGE                 15:8
#define DC_DISP_COLOR_KEY0_LOWER_0_COLOR_KEY0_L_G_WOFFSET                       0x0
#define DC_DISP_COLOR_KEY0_LOWER_0_COLOR_KEY0_L_G_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY0_LOWER_0_COLOR_KEY0_L_G_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY0_LOWER_0_COLOR_KEY0_L_G_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY0_LOWER_0_COLOR_KEY0_L_G_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Color Key 0 Blue (U) Lower value
#define DC_DISP_COLOR_KEY0_LOWER_0_COLOR_KEY0_L_B_SHIFT                 _MK_SHIFT_CONST(16)
#define DC_DISP_COLOR_KEY0_LOWER_0_COLOR_KEY0_L_B_FIELD                 (_MK_MASK_CONST(0xff) << DC_DISP_COLOR_KEY0_LOWER_0_COLOR_KEY0_L_B_SHIFT)
#define DC_DISP_COLOR_KEY0_LOWER_0_COLOR_KEY0_L_B_RANGE                 23:16
#define DC_DISP_COLOR_KEY0_LOWER_0_COLOR_KEY0_L_B_WOFFSET                       0x0
#define DC_DISP_COLOR_KEY0_LOWER_0_COLOR_KEY0_L_B_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY0_LOWER_0_COLOR_KEY0_L_B_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY0_LOWER_0_COLOR_KEY0_L_B_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY0_LOWER_0_COLOR_KEY0_L_B_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register DC_DISP_COLOR_KEY0_UPPER_0  // Color Key 0 Upper value
#define DC_DISP_COLOR_KEY0_UPPER_0                      _MK_ADDR_CONST(0x437)
#define DC_DISP_COLOR_KEY0_UPPER_0_SECURE                       0x0
#define DC_DISP_COLOR_KEY0_UPPER_0_WORD_COUNT                   0x1
#define DC_DISP_COLOR_KEY0_UPPER_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY0_UPPER_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY0_UPPER_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY0_UPPER_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY0_UPPER_0_READ_MASK                    _MK_MASK_CONST(0xffffff)
#define DC_DISP_COLOR_KEY0_UPPER_0_WRITE_MASK                   _MK_MASK_CONST(0xffffff)
// Color Key 0 Red (V) Upper value
#define DC_DISP_COLOR_KEY0_UPPER_0_COLOR_KEY0_U_R_SHIFT                 _MK_SHIFT_CONST(0)
#define DC_DISP_COLOR_KEY0_UPPER_0_COLOR_KEY0_U_R_FIELD                 (_MK_MASK_CONST(0xff) << DC_DISP_COLOR_KEY0_UPPER_0_COLOR_KEY0_U_R_SHIFT)
#define DC_DISP_COLOR_KEY0_UPPER_0_COLOR_KEY0_U_R_RANGE                 7:0
#define DC_DISP_COLOR_KEY0_UPPER_0_COLOR_KEY0_U_R_WOFFSET                       0x0
#define DC_DISP_COLOR_KEY0_UPPER_0_COLOR_KEY0_U_R_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY0_UPPER_0_COLOR_KEY0_U_R_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY0_UPPER_0_COLOR_KEY0_U_R_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY0_UPPER_0_COLOR_KEY0_U_R_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Color Key 0 Green (Y) Upper value
#define DC_DISP_COLOR_KEY0_UPPER_0_COLOR_KEY0_U_G_SHIFT                 _MK_SHIFT_CONST(8)
#define DC_DISP_COLOR_KEY0_UPPER_0_COLOR_KEY0_U_G_FIELD                 (_MK_MASK_CONST(0xff) << DC_DISP_COLOR_KEY0_UPPER_0_COLOR_KEY0_U_G_SHIFT)
#define DC_DISP_COLOR_KEY0_UPPER_0_COLOR_KEY0_U_G_RANGE                 15:8
#define DC_DISP_COLOR_KEY0_UPPER_0_COLOR_KEY0_U_G_WOFFSET                       0x0
#define DC_DISP_COLOR_KEY0_UPPER_0_COLOR_KEY0_U_G_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY0_UPPER_0_COLOR_KEY0_U_G_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY0_UPPER_0_COLOR_KEY0_U_G_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY0_UPPER_0_COLOR_KEY0_U_G_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Color Key 0 Blue (U) Upper value
#define DC_DISP_COLOR_KEY0_UPPER_0_COLOR_KEY0_U_B_SHIFT                 _MK_SHIFT_CONST(16)
#define DC_DISP_COLOR_KEY0_UPPER_0_COLOR_KEY0_U_B_FIELD                 (_MK_MASK_CONST(0xff) << DC_DISP_COLOR_KEY0_UPPER_0_COLOR_KEY0_U_B_SHIFT)
#define DC_DISP_COLOR_KEY0_UPPER_0_COLOR_KEY0_U_B_RANGE                 23:16
#define DC_DISP_COLOR_KEY0_UPPER_0_COLOR_KEY0_U_B_WOFFSET                       0x0
#define DC_DISP_COLOR_KEY0_UPPER_0_COLOR_KEY0_U_B_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY0_UPPER_0_COLOR_KEY0_U_B_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY0_UPPER_0_COLOR_KEY0_U_B_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY0_UPPER_0_COLOR_KEY0_U_B_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register DC_DISP_COLOR_KEY1_LOWER_0  // Color Key 1 Lower value
#define DC_DISP_COLOR_KEY1_LOWER_0                      _MK_ADDR_CONST(0x438)
#define DC_DISP_COLOR_KEY1_LOWER_0_SECURE                       0x0
#define DC_DISP_COLOR_KEY1_LOWER_0_WORD_COUNT                   0x1
#define DC_DISP_COLOR_KEY1_LOWER_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY1_LOWER_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY1_LOWER_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY1_LOWER_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY1_LOWER_0_READ_MASK                    _MK_MASK_CONST(0xffffff)
#define DC_DISP_COLOR_KEY1_LOWER_0_WRITE_MASK                   _MK_MASK_CONST(0xffffff)
// Color Key 1 Red (V) Lower value
#define DC_DISP_COLOR_KEY1_LOWER_0_COLOR_KEY1_L_R_SHIFT                 _MK_SHIFT_CONST(0)
#define DC_DISP_COLOR_KEY1_LOWER_0_COLOR_KEY1_L_R_FIELD                 (_MK_MASK_CONST(0xff) << DC_DISP_COLOR_KEY1_LOWER_0_COLOR_KEY1_L_R_SHIFT)
#define DC_DISP_COLOR_KEY1_LOWER_0_COLOR_KEY1_L_R_RANGE                 7:0
#define DC_DISP_COLOR_KEY1_LOWER_0_COLOR_KEY1_L_R_WOFFSET                       0x0
#define DC_DISP_COLOR_KEY1_LOWER_0_COLOR_KEY1_L_R_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY1_LOWER_0_COLOR_KEY1_L_R_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY1_LOWER_0_COLOR_KEY1_L_R_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY1_LOWER_0_COLOR_KEY1_L_R_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Color Key 1 Green (Y) Lower value
#define DC_DISP_COLOR_KEY1_LOWER_0_COLOR_KEY1_L_G_SHIFT                 _MK_SHIFT_CONST(8)
#define DC_DISP_COLOR_KEY1_LOWER_0_COLOR_KEY1_L_G_FIELD                 (_MK_MASK_CONST(0xff) << DC_DISP_COLOR_KEY1_LOWER_0_COLOR_KEY1_L_G_SHIFT)
#define DC_DISP_COLOR_KEY1_LOWER_0_COLOR_KEY1_L_G_RANGE                 15:8
#define DC_DISP_COLOR_KEY1_LOWER_0_COLOR_KEY1_L_G_WOFFSET                       0x0
#define DC_DISP_COLOR_KEY1_LOWER_0_COLOR_KEY1_L_G_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY1_LOWER_0_COLOR_KEY1_L_G_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY1_LOWER_0_COLOR_KEY1_L_G_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY1_LOWER_0_COLOR_KEY1_L_G_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Color Key 1 Blue (U) Lower value
#define DC_DISP_COLOR_KEY1_LOWER_0_COLOR_KEY1_L_B_SHIFT                 _MK_SHIFT_CONST(16)
#define DC_DISP_COLOR_KEY1_LOWER_0_COLOR_KEY1_L_B_FIELD                 (_MK_MASK_CONST(0xff) << DC_DISP_COLOR_KEY1_LOWER_0_COLOR_KEY1_L_B_SHIFT)
#define DC_DISP_COLOR_KEY1_LOWER_0_COLOR_KEY1_L_B_RANGE                 23:16
#define DC_DISP_COLOR_KEY1_LOWER_0_COLOR_KEY1_L_B_WOFFSET                       0x0
#define DC_DISP_COLOR_KEY1_LOWER_0_COLOR_KEY1_L_B_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY1_LOWER_0_COLOR_KEY1_L_B_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY1_LOWER_0_COLOR_KEY1_L_B_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY1_LOWER_0_COLOR_KEY1_L_B_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register DC_DISP_COLOR_KEY1_UPPER_0  // Color Key 1 Upper value
#define DC_DISP_COLOR_KEY1_UPPER_0                      _MK_ADDR_CONST(0x439)
#define DC_DISP_COLOR_KEY1_UPPER_0_SECURE                       0x0
#define DC_DISP_COLOR_KEY1_UPPER_0_WORD_COUNT                   0x1
#define DC_DISP_COLOR_KEY1_UPPER_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY1_UPPER_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY1_UPPER_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY1_UPPER_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY1_UPPER_0_READ_MASK                    _MK_MASK_CONST(0xffffff)
#define DC_DISP_COLOR_KEY1_UPPER_0_WRITE_MASK                   _MK_MASK_CONST(0xffffff)
// Color Key 1 Red (V) Upper value
#define DC_DISP_COLOR_KEY1_UPPER_0_COLOR_KEY1_U_R_SHIFT                 _MK_SHIFT_CONST(0)
#define DC_DISP_COLOR_KEY1_UPPER_0_COLOR_KEY1_U_R_FIELD                 (_MK_MASK_CONST(0xff) << DC_DISP_COLOR_KEY1_UPPER_0_COLOR_KEY1_U_R_SHIFT)
#define DC_DISP_COLOR_KEY1_UPPER_0_COLOR_KEY1_U_R_RANGE                 7:0
#define DC_DISP_COLOR_KEY1_UPPER_0_COLOR_KEY1_U_R_WOFFSET                       0x0
#define DC_DISP_COLOR_KEY1_UPPER_0_COLOR_KEY1_U_R_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY1_UPPER_0_COLOR_KEY1_U_R_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY1_UPPER_0_COLOR_KEY1_U_R_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY1_UPPER_0_COLOR_KEY1_U_R_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Color Key 1 Green (Y) Upper value
#define DC_DISP_COLOR_KEY1_UPPER_0_COLOR_KEY1_U_G_SHIFT                 _MK_SHIFT_CONST(8)
#define DC_DISP_COLOR_KEY1_UPPER_0_COLOR_KEY1_U_G_FIELD                 (_MK_MASK_CONST(0xff) << DC_DISP_COLOR_KEY1_UPPER_0_COLOR_KEY1_U_G_SHIFT)
#define DC_DISP_COLOR_KEY1_UPPER_0_COLOR_KEY1_U_G_RANGE                 15:8
#define DC_DISP_COLOR_KEY1_UPPER_0_COLOR_KEY1_U_G_WOFFSET                       0x0
#define DC_DISP_COLOR_KEY1_UPPER_0_COLOR_KEY1_U_G_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY1_UPPER_0_COLOR_KEY1_U_G_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY1_UPPER_0_COLOR_KEY1_U_G_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY1_UPPER_0_COLOR_KEY1_U_G_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Color Key 1 Blue (U) Upper value
#define DC_DISP_COLOR_KEY1_UPPER_0_COLOR_KEY1_U_B_SHIFT                 _MK_SHIFT_CONST(16)
#define DC_DISP_COLOR_KEY1_UPPER_0_COLOR_KEY1_U_B_FIELD                 (_MK_MASK_CONST(0xff) << DC_DISP_COLOR_KEY1_UPPER_0_COLOR_KEY1_U_B_SHIFT)
#define DC_DISP_COLOR_KEY1_UPPER_0_COLOR_KEY1_U_B_RANGE                 23:16
#define DC_DISP_COLOR_KEY1_UPPER_0_COLOR_KEY1_U_B_WOFFSET                       0x0
#define DC_DISP_COLOR_KEY1_UPPER_0_COLOR_KEY1_U_B_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY1_UPPER_0_COLOR_KEY1_U_B_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY1_UPPER_0_COLOR_KEY1_U_B_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_COLOR_KEY1_UPPER_0_COLOR_KEY1_U_B_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Reserved address 1082 [0x43a] 
//
// Class: Hardware Cursor
//
// Hardware cursor is supported for 32x32 or for 64x64 2-bpp cursor.
// Cursor start address is aligned to 1 KB boundary.
// All cursor registers except for cursor foreground and background colors are triple buffered.
//   GENERAL_UPDATE controls ASSEMBLY->ARM latching, GENERAL_ACT_REQ controls ARM->ACTIVE latching.
// Cursor scaling and flipping are not implemented so this must be done by software if needed.
// Cursor H/V positions are signed number with respect to one of the display windows or with
//   respect to upper left position of display active area as specified by cursor clipping
//   parameter which also determine cursor clipping boundary. If cursor position is with
//   respect to one of the display window and the corresponding display window is disabled then
//   cursor will also be disabled.

// Register DC_DISP_CURSOR_FOREGROUND_0  // Cursor Foreground color
#define DC_DISP_CURSOR_FOREGROUND_0                     _MK_ADDR_CONST(0x43c)
#define DC_DISP_CURSOR_FOREGROUND_0_SECURE                      0x0
#define DC_DISP_CURSOR_FOREGROUND_0_WORD_COUNT                  0x1
#define DC_DISP_CURSOR_FOREGROUND_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_FOREGROUND_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_FOREGROUND_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_FOREGROUND_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_FOREGROUND_0_READ_MASK                   _MK_MASK_CONST(0xffffff)
#define DC_DISP_CURSOR_FOREGROUND_0_WRITE_MASK                  _MK_MASK_CONST(0xffffff)
// Cursor Red Foreground Color
#define DC_DISP_CURSOR_FOREGROUND_0_CURSOR_FOREGROUND_R_SHIFT                   _MK_SHIFT_CONST(0)
#define DC_DISP_CURSOR_FOREGROUND_0_CURSOR_FOREGROUND_R_FIELD                   (_MK_MASK_CONST(0xff) << DC_DISP_CURSOR_FOREGROUND_0_CURSOR_FOREGROUND_R_SHIFT)
#define DC_DISP_CURSOR_FOREGROUND_0_CURSOR_FOREGROUND_R_RANGE                   7:0
#define DC_DISP_CURSOR_FOREGROUND_0_CURSOR_FOREGROUND_R_WOFFSET                 0x0
#define DC_DISP_CURSOR_FOREGROUND_0_CURSOR_FOREGROUND_R_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_FOREGROUND_0_CURSOR_FOREGROUND_R_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_FOREGROUND_0_CURSOR_FOREGROUND_R_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_FOREGROUND_0_CURSOR_FOREGROUND_R_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Cursor Green Foreground Color
#define DC_DISP_CURSOR_FOREGROUND_0_CURSOR_FOREGROUND_G_SHIFT                   _MK_SHIFT_CONST(8)
#define DC_DISP_CURSOR_FOREGROUND_0_CURSOR_FOREGROUND_G_FIELD                   (_MK_MASK_CONST(0xff) << DC_DISP_CURSOR_FOREGROUND_0_CURSOR_FOREGROUND_G_SHIFT)
#define DC_DISP_CURSOR_FOREGROUND_0_CURSOR_FOREGROUND_G_RANGE                   15:8
#define DC_DISP_CURSOR_FOREGROUND_0_CURSOR_FOREGROUND_G_WOFFSET                 0x0
#define DC_DISP_CURSOR_FOREGROUND_0_CURSOR_FOREGROUND_G_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_FOREGROUND_0_CURSOR_FOREGROUND_G_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_FOREGROUND_0_CURSOR_FOREGROUND_G_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_FOREGROUND_0_CURSOR_FOREGROUND_G_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Cursor Blue Foreground Color
#define DC_DISP_CURSOR_FOREGROUND_0_CURSOR_FOREGROUND_B_SHIFT                   _MK_SHIFT_CONST(16)
#define DC_DISP_CURSOR_FOREGROUND_0_CURSOR_FOREGROUND_B_FIELD                   (_MK_MASK_CONST(0xff) << DC_DISP_CURSOR_FOREGROUND_0_CURSOR_FOREGROUND_B_SHIFT)
#define DC_DISP_CURSOR_FOREGROUND_0_CURSOR_FOREGROUND_B_RANGE                   23:16
#define DC_DISP_CURSOR_FOREGROUND_0_CURSOR_FOREGROUND_B_WOFFSET                 0x0
#define DC_DISP_CURSOR_FOREGROUND_0_CURSOR_FOREGROUND_B_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_FOREGROUND_0_CURSOR_FOREGROUND_B_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_FOREGROUND_0_CURSOR_FOREGROUND_B_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_FOREGROUND_0_CURSOR_FOREGROUND_B_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register DC_DISP_CURSOR_BACKGROUND_0  // Cursor Background color
#define DC_DISP_CURSOR_BACKGROUND_0                     _MK_ADDR_CONST(0x43d)
#define DC_DISP_CURSOR_BACKGROUND_0_SECURE                      0x0
#define DC_DISP_CURSOR_BACKGROUND_0_WORD_COUNT                  0x1
#define DC_DISP_CURSOR_BACKGROUND_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_BACKGROUND_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_BACKGROUND_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_BACKGROUND_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_BACKGROUND_0_READ_MASK                   _MK_MASK_CONST(0xffffff)
#define DC_DISP_CURSOR_BACKGROUND_0_WRITE_MASK                  _MK_MASK_CONST(0xffffff)
// Cursor Red Background Color
#define DC_DISP_CURSOR_BACKGROUND_0_CURSOR_BACKGROUND_R_SHIFT                   _MK_SHIFT_CONST(0)
#define DC_DISP_CURSOR_BACKGROUND_0_CURSOR_BACKGROUND_R_FIELD                   (_MK_MASK_CONST(0xff) << DC_DISP_CURSOR_BACKGROUND_0_CURSOR_BACKGROUND_R_SHIFT)
#define DC_DISP_CURSOR_BACKGROUND_0_CURSOR_BACKGROUND_R_RANGE                   7:0
#define DC_DISP_CURSOR_BACKGROUND_0_CURSOR_BACKGROUND_R_WOFFSET                 0x0
#define DC_DISP_CURSOR_BACKGROUND_0_CURSOR_BACKGROUND_R_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_BACKGROUND_0_CURSOR_BACKGROUND_R_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_BACKGROUND_0_CURSOR_BACKGROUND_R_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_BACKGROUND_0_CURSOR_BACKGROUND_R_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Cursor Green Background Color
#define DC_DISP_CURSOR_BACKGROUND_0_CURSOR_BACKGROUND_G_SHIFT                   _MK_SHIFT_CONST(8)
#define DC_DISP_CURSOR_BACKGROUND_0_CURSOR_BACKGROUND_G_FIELD                   (_MK_MASK_CONST(0xff) << DC_DISP_CURSOR_BACKGROUND_0_CURSOR_BACKGROUND_G_SHIFT)
#define DC_DISP_CURSOR_BACKGROUND_0_CURSOR_BACKGROUND_G_RANGE                   15:8
#define DC_DISP_CURSOR_BACKGROUND_0_CURSOR_BACKGROUND_G_WOFFSET                 0x0
#define DC_DISP_CURSOR_BACKGROUND_0_CURSOR_BACKGROUND_G_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_BACKGROUND_0_CURSOR_BACKGROUND_G_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_BACKGROUND_0_CURSOR_BACKGROUND_G_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_BACKGROUND_0_CURSOR_BACKGROUND_G_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Cursor Blue Background Color
#define DC_DISP_CURSOR_BACKGROUND_0_CURSOR_BACKGROUND_B_SHIFT                   _MK_SHIFT_CONST(16)
#define DC_DISP_CURSOR_BACKGROUND_0_CURSOR_BACKGROUND_B_FIELD                   (_MK_MASK_CONST(0xff) << DC_DISP_CURSOR_BACKGROUND_0_CURSOR_BACKGROUND_B_SHIFT)
#define DC_DISP_CURSOR_BACKGROUND_0_CURSOR_BACKGROUND_B_RANGE                   23:16
#define DC_DISP_CURSOR_BACKGROUND_0_CURSOR_BACKGROUND_B_WOFFSET                 0x0
#define DC_DISP_CURSOR_BACKGROUND_0_CURSOR_BACKGROUND_B_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_BACKGROUND_0_CURSOR_BACKGROUND_B_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_BACKGROUND_0_CURSOR_BACKGROUND_B_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_BACKGROUND_0_CURSOR_BACKGROUND_B_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register DC_DISP_CURSOR_START_ADDR_0  // Cursor Start Address
#define DC_DISP_CURSOR_START_ADDR_0                     _MK_ADDR_CONST(0x43e)
#define DC_DISP_CURSOR_START_ADDR_0_SECURE                      0x0
#define DC_DISP_CURSOR_START_ADDR_0_WORD_COUNT                  0x1
#define DC_DISP_CURSOR_START_ADDR_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_0_READ_MASK                   _MK_MASK_CONST(0x313fffff)
#define DC_DISP_CURSOR_START_ADDR_0_WRITE_MASK                  _MK_MASK_CONST(0x313fffff)
// Cursor Start Address bits 25:10
#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_START_ADDR_SHIFT                     _MK_SHIFT_CONST(0)
#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_START_ADDR_FIELD                     (_MK_MASK_CONST(0x3fffff) << DC_DISP_CURSOR_START_ADDR_0_CURSOR_START_ADDR_SHIFT)
#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_START_ADDR_RANGE                     21:0
#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_START_ADDR_WOFFSET                   0x0
#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_START_ADDR_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_START_ADDR_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_START_ADDR_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_START_ADDR_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// Cursor Size   0= 32x32
//   1= 64x64
#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_SIZE_SHIFT                   _MK_SHIFT_CONST(24)
#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_SIZE_FIELD                   (_MK_MASK_CONST(0x1) << DC_DISP_CURSOR_START_ADDR_0_CURSOR_SIZE_SHIFT)
#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_SIZE_RANGE                   24:24
#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_SIZE_WOFFSET                 0x0
#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_SIZE_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_SIZE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_SIZE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_SIZE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_SIZE_C32X32                  _MK_ENUM_CONST(0)
#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_SIZE_C64X64                  _MK_ENUM_CONST(1)

// Cursor Clipping Select
#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_CLIPPING_SHIFT                       _MK_SHIFT_CONST(28)
#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_CLIPPING_FIELD                       (_MK_MASK_CONST(0x3) << DC_DISP_CURSOR_START_ADDR_0_CURSOR_CLIPPING_SHIFT)
#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_CLIPPING_RANGE                       29:28
#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_CLIPPING_WOFFSET                     0x0
#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_CLIPPING_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_CLIPPING_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_CLIPPING_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_CLIPPING_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_CLIPPING_DISPLAY                     _MK_ENUM_CONST(0)    // //   00= display

#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_CLIPPING_WA                  _MK_ENUM_CONST(1)    // //   01= window A

#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_CLIPPING_WB                  _MK_ENUM_CONST(2)    // //   10= window B

#define DC_DISP_CURSOR_START_ADDR_0_CURSOR_CLIPPING_WC                  _MK_ENUM_CONST(3)    // //   11= window C



// Register DC_DISP_CURSOR_START_ADDR_NS_0  // Shadow of Cursor Start Address
#define DC_DISP_CURSOR_START_ADDR_NS_0                  _MK_ADDR_CONST(0x43f)
#define DC_DISP_CURSOR_START_ADDR_NS_0_SECURE                   0x0
#define DC_DISP_CURSOR_START_ADDR_NS_0_WORD_COUNT                       0x1
#define DC_DISP_CURSOR_START_ADDR_NS_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_NS_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_NS_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_NS_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_NS_0_READ_MASK                        _MK_MASK_CONST(0x313fffff)
#define DC_DISP_CURSOR_START_ADDR_NS_0_WRITE_MASK                       _MK_MASK_CONST(0x313fffff)
// Cursor Start Address bits 25:10
#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_START_ADDR_NS_SHIFT                       _MK_SHIFT_CONST(0)
#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_START_ADDR_NS_FIELD                       (_MK_MASK_CONST(0x3fffff) << DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_START_ADDR_NS_SHIFT)
#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_START_ADDR_NS_RANGE                       21:0
#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_START_ADDR_NS_WOFFSET                     0x0
#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_START_ADDR_NS_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_START_ADDR_NS_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_START_ADDR_NS_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_START_ADDR_NS_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Cursor Size   0= 32x32
//   1= 64x64
#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_SIZE_NS_SHIFT                     _MK_SHIFT_CONST(24)
#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_SIZE_NS_FIELD                     (_MK_MASK_CONST(0x1) << DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_SIZE_NS_SHIFT)
#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_SIZE_NS_RANGE                     24:24
#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_SIZE_NS_WOFFSET                   0x0
#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_SIZE_NS_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_SIZE_NS_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_SIZE_NS_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_SIZE_NS_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_SIZE_NS_C32X32                    _MK_ENUM_CONST(0)
#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_SIZE_NS_C64X64                    _MK_ENUM_CONST(1)

// Cursor Clipping Select
#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_CLIPPING_NS_SHIFT                 _MK_SHIFT_CONST(28)
#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_CLIPPING_NS_FIELD                 (_MK_MASK_CONST(0x3) << DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_CLIPPING_NS_SHIFT)
#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_CLIPPING_NS_RANGE                 29:28
#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_CLIPPING_NS_WOFFSET                       0x0
#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_CLIPPING_NS_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_CLIPPING_NS_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_CLIPPING_NS_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_CLIPPING_NS_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_CLIPPING_NS_DISPLAY                       _MK_ENUM_CONST(0)    // //   00= display

#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_CLIPPING_NS_WA                    _MK_ENUM_CONST(1)    // //   01= window A

#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_CLIPPING_NS_WB                    _MK_ENUM_CONST(2)    // //   10= window B

#define DC_DISP_CURSOR_START_ADDR_NS_0_CURSOR_CLIPPING_NS_WC                    _MK_ENUM_CONST(3)    // //   11= window C


// Cursor position is with respect to top-left corner of display active area, or window A,
//  or window B, or window C as specified cursor clipping parameter.

// Register DC_DISP_CURSOR_POSITION_0  // Cursor Position
#define DC_DISP_CURSOR_POSITION_0                       _MK_ADDR_CONST(0x440)
#define DC_DISP_CURSOR_POSITION_0_SECURE                        0x0
#define DC_DISP_CURSOR_POSITION_0_WORD_COUNT                    0x1
#define DC_DISP_CURSOR_POSITION_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_POSITION_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_POSITION_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_POSITION_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_POSITION_0_READ_MASK                     _MK_MASK_CONST(0x3fff3fff)
#define DC_DISP_CURSOR_POSITION_0_WRITE_MASK                    _MK_MASK_CONST(0x3fff3fff)
// H cursor position (signed)
#define DC_DISP_CURSOR_POSITION_0_H_CURSOR_POSITION_SHIFT                       _MK_SHIFT_CONST(0)
#define DC_DISP_CURSOR_POSITION_0_H_CURSOR_POSITION_FIELD                       (_MK_MASK_CONST(0x3fff) << DC_DISP_CURSOR_POSITION_0_H_CURSOR_POSITION_SHIFT)
#define DC_DISP_CURSOR_POSITION_0_H_CURSOR_POSITION_RANGE                       13:0
#define DC_DISP_CURSOR_POSITION_0_H_CURSOR_POSITION_WOFFSET                     0x0
#define DC_DISP_CURSOR_POSITION_0_H_CURSOR_POSITION_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_POSITION_0_H_CURSOR_POSITION_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_POSITION_0_H_CURSOR_POSITION_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_POSITION_0_H_CURSOR_POSITION_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// V cursor position (signed)
#define DC_DISP_CURSOR_POSITION_0_V_CURSOR_POSITION_SHIFT                       _MK_SHIFT_CONST(16)
#define DC_DISP_CURSOR_POSITION_0_V_CURSOR_POSITION_FIELD                       (_MK_MASK_CONST(0x3fff) << DC_DISP_CURSOR_POSITION_0_V_CURSOR_POSITION_SHIFT)
#define DC_DISP_CURSOR_POSITION_0_V_CURSOR_POSITION_RANGE                       29:16
#define DC_DISP_CURSOR_POSITION_0_V_CURSOR_POSITION_WOFFSET                     0x0
#define DC_DISP_CURSOR_POSITION_0_V_CURSOR_POSITION_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_POSITION_0_V_CURSOR_POSITION_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_POSITION_0_V_CURSOR_POSITION_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_POSITION_0_V_CURSOR_POSITION_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register DC_DISP_CURSOR_POSITION_NS_0  // Shadow of Cursor Position
#define DC_DISP_CURSOR_POSITION_NS_0                    _MK_ADDR_CONST(0x441)
#define DC_DISP_CURSOR_POSITION_NS_0_SECURE                     0x0
#define DC_DISP_CURSOR_POSITION_NS_0_WORD_COUNT                         0x1
#define DC_DISP_CURSOR_POSITION_NS_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_POSITION_NS_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_POSITION_NS_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_POSITION_NS_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_POSITION_NS_0_READ_MASK                  _MK_MASK_CONST(0x3fff3fff)
#define DC_DISP_CURSOR_POSITION_NS_0_WRITE_MASK                         _MK_MASK_CONST(0x3fff3fff)
// H cursor position (signed)
#define DC_DISP_CURSOR_POSITION_NS_0_H_CURSOR_POSITION_NS_SHIFT                 _MK_SHIFT_CONST(0)
#define DC_DISP_CURSOR_POSITION_NS_0_H_CURSOR_POSITION_NS_FIELD                 (_MK_MASK_CONST(0x3fff) << DC_DISP_CURSOR_POSITION_NS_0_H_CURSOR_POSITION_NS_SHIFT)
#define DC_DISP_CURSOR_POSITION_NS_0_H_CURSOR_POSITION_NS_RANGE                 13:0
#define DC_DISP_CURSOR_POSITION_NS_0_H_CURSOR_POSITION_NS_WOFFSET                       0x0
#define DC_DISP_CURSOR_POSITION_NS_0_H_CURSOR_POSITION_NS_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_POSITION_NS_0_H_CURSOR_POSITION_NS_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_POSITION_NS_0_H_CURSOR_POSITION_NS_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_POSITION_NS_0_H_CURSOR_POSITION_NS_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// V cursor position (signed)
#define DC_DISP_CURSOR_POSITION_NS_0_V_CURSOR_POSITION_NS_SHIFT                 _MK_SHIFT_CONST(16)
#define DC_DISP_CURSOR_POSITION_NS_0_V_CURSOR_POSITION_NS_FIELD                 (_MK_MASK_CONST(0x3fff) << DC_DISP_CURSOR_POSITION_NS_0_V_CURSOR_POSITION_NS_SHIFT)
#define DC_DISP_CURSOR_POSITION_NS_0_V_CURSOR_POSITION_NS_RANGE                 29:16
#define DC_DISP_CURSOR_POSITION_NS_0_V_CURSOR_POSITION_NS_WOFFSET                       0x0
#define DC_DISP_CURSOR_POSITION_NS_0_V_CURSOR_POSITION_NS_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_POSITION_NS_0_V_CURSOR_POSITION_NS_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_POSITION_NS_0_V_CURSOR_POSITION_NS_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_CURSOR_POSITION_NS_0_V_CURSOR_POSITION_NS_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//
// Class: Initialization Sequence (IS)
//
// Display initialization sequence may have to be written to the display if the display
//  has built-in frame buffer. This initialization sequence is used typically to 
//  reinitialize the display buffer start address and maybe needed once per frame (frame
//  initialization sequence) and/or once per line (line initialization sequence).
//  Frame initialization sequence is sent during the horizontal active time of the line
//  just before the first active display line.
//  Line initialization sequence is currently NOT supported.
// Initialization sequence can be done through parallel LCD interface or through SPI
//  serial interface. Software is responsible in making sure that the active line time is
//  sufficient to send initialization sequence.
// For parallel interface initialization, the signals used as chip selects (typically
//  these are one of the vertical signals) must be programmed to be active one line just
//  before the first active display line. Also SC0/SC1 clock divider must be programmed to
//  divide by 1 if initialization sequence is enabled.

// Register DC_DISP_INIT_SEQ_CONTROL_0  // Initialization Sequence Control
#define DC_DISP_INIT_SEQ_CONTROL_0                      _MK_ADDR_CONST(0x442)
#define DC_DISP_INIT_SEQ_CONTROL_0_SECURE                       0x0
#define DC_DISP_INIT_SEQ_CONTROL_0_WORD_COUNT                   0x1
#define DC_DISP_INIT_SEQ_CONTROL_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_INIT_SEQ_CONTROL_0_RESET_MASK                   _MK_MASK_CONST(0x3)
#define DC_DISP_INIT_SEQ_CONTROL_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_DISP_INIT_SEQ_CONTROL_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_INIT_SEQ_CONTROL_0_READ_MASK                    _MK_MASK_CONST(0xff3)
#define DC_DISP_INIT_SEQ_CONTROL_0_WRITE_MASK                   _MK_MASK_CONST(0xff3)
// Send Initialization Sequence (IS)   0= disable
//   1= enable
#define DC_DISP_INIT_SEQ_CONTROL_0_SEND_INIT_SEQUENCE_SHIFT                     _MK_SHIFT_CONST(0)
#define DC_DISP_INIT_SEQ_CONTROL_0_SEND_INIT_SEQUENCE_FIELD                     (_MK_MASK_CONST(0x1) << DC_DISP_INIT_SEQ_CONTROL_0_SEND_INIT_SEQUENCE_SHIFT)
#define DC_DISP_INIT_SEQ_CONTROL_0_SEND_INIT_SEQUENCE_RANGE                     0:0
#define DC_DISP_INIT_SEQ_CONTROL_0_SEND_INIT_SEQUENCE_WOFFSET                   0x0
#define DC_DISP_INIT_SEQ_CONTROL_0_SEND_INIT_SEQUENCE_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_INIT_SEQ_CONTROL_0_SEND_INIT_SEQUENCE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_DISP_INIT_SEQ_CONTROL_0_SEND_INIT_SEQUENCE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_INIT_SEQ_CONTROL_0_SEND_INIT_SEQUENCE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_INIT_SEQ_CONTROL_0_SEND_INIT_SEQUENCE_DISABLE                   _MK_ENUM_CONST(0)
#define DC_DISP_INIT_SEQ_CONTROL_0_SEND_INIT_SEQUENCE_ENABLE                    _MK_ENUM_CONST(1)

// Initialization Sequence Mode   0= Send init sequence through parallel LCD
//      interface
//   1= Send init sequence through SPI serial
//      interface
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQUENCE_MODE_SHIFT                     _MK_SHIFT_CONST(1)
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQUENCE_MODE_FIELD                     (_MK_MASK_CONST(0x1) << DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQUENCE_MODE_SHIFT)
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQUENCE_MODE_RANGE                     1:1
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQUENCE_MODE_WOFFSET                   0x0
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQUENCE_MODE_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQUENCE_MODE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQUENCE_MODE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQUENCE_MODE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQUENCE_MODE_PLCD_INIT                 _MK_ENUM_CONST(0)
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQUENCE_MODE_SPI_INIT                  _MK_ENUM_CONST(1)

// Frame Initialization Sequence DC Pin  This parameter is used only for parallel
//  initialization sequence and it specifies
//  which signal carries the data/command
//  signal.
//   0= parallel IS DC signal is not needed
//   1= parallel IS DC on Vertical Sync
//   2= parallel IS DC on Vertical Pulse 0
//   3= parallel IS DC on Vertical Pulse 1
//   4= parallel IS DC on Vertical Pulse 2
//   5= parallel IS DC on Vertical Pulse 3
//   other= reserved
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQ_DC_SIGNAL_SHIFT                     _MK_SHIFT_CONST(4)
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQ_DC_SIGNAL_FIELD                     (_MK_MASK_CONST(0x7) << DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQ_DC_SIGNAL_SHIFT)
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQ_DC_SIGNAL_RANGE                     6:4
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQ_DC_SIGNAL_WOFFSET                   0x0
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQ_DC_SIGNAL_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQ_DC_SIGNAL_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQ_DC_SIGNAL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQ_DC_SIGNAL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQ_DC_SIGNAL_NODC                      _MK_ENUM_CONST(0)
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQ_DC_SIGNAL_VSYNC                     _MK_ENUM_CONST(1)
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQ_DC_SIGNAL_VPULSE0                   _MK_ENUM_CONST(2)
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQ_DC_SIGNAL_VPULSE1                   _MK_ENUM_CONST(3)
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQ_DC_SIGNAL_VPULSE2                   _MK_ENUM_CONST(4)
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQ_DC_SIGNAL_VPULSE3                   _MK_ENUM_CONST(5)

// Initialization Sequence DC Pin
//  This bit is used only for parallel
//  initialization sequence and it controls how
//  data/command is added to the vertical signal
//  selected by -=PS_=-INIT_SEQ_DC_SIGNAL
//   0= parallel IS DC is inverted and then
//      AND-ed to the vertical signal
//   1= parallel IS DC is OR-ed to the vertical
//      signal
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQ_DC_CONTROL_SHIFT                    _MK_SHIFT_CONST(7)
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQ_DC_CONTROL_FIELD                    (_MK_MASK_CONST(0x1) << DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQ_DC_CONTROL_SHIFT)
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQ_DC_CONTROL_RANGE                    7:7
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQ_DC_CONTROL_WOFFSET                  0x0
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQ_DC_CONTROL_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQ_DC_CONTROL_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQ_DC_CONTROL_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_INIT_SEQ_CONTROL_0_INIT_SEQ_DC_CONTROL_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Frame Initialization Sequence Cycles
//  This parameter specifies the number of
//  frame initialization sequence cycles to
//  send. If programmed to 0, there is no
//  frame initialization cycle generated.
#define DC_DISP_INIT_SEQ_CONTROL_0_FRAME_INIT_SEQ_CYCLES_SHIFT                  _MK_SHIFT_CONST(8)
#define DC_DISP_INIT_SEQ_CONTROL_0_FRAME_INIT_SEQ_CYCLES_FIELD                  (_MK_MASK_CONST(0xf) << DC_DISP_INIT_SEQ_CONTROL_0_FRAME_INIT_SEQ_CYCLES_SHIFT)
#define DC_DISP_INIT_SEQ_CONTROL_0_FRAME_INIT_SEQ_CYCLES_RANGE                  11:8
#define DC_DISP_INIT_SEQ_CONTROL_0_FRAME_INIT_SEQ_CYCLES_WOFFSET                        0x0
#define DC_DISP_INIT_SEQ_CONTROL_0_FRAME_INIT_SEQ_CYCLES_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_INIT_SEQ_CONTROL_0_FRAME_INIT_SEQ_CYCLES_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_INIT_SEQ_CONTROL_0_FRAME_INIT_SEQ_CYCLES_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_INIT_SEQ_CONTROL_0_FRAME_INIT_SEQ_CYCLES_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// For parallel initialization sequence there are two possible data widths: 9 bits or 18 bits.
//  If parallel IS is selected, the number of bits per cycle depend on the DISP_DATA_FORMAT
//  register programming. 18-bit parallel IS cycles are performed for 1-pixel/1-clock
//  parallel interface (DF1P1C). 9-bit parallel IS cycles are performed for non 1-pixel/1-clock
//  parallel interface.
//  Parallel IS cycles must be completed prior to the end of horizontal active of the line
//  where IS cycles are sent. If all the cycles have been completed prior to the end of
//  horizontal active, control signals are held inactive and last output data is held till
//  end of horizontal active. For 9-bit parallel initialization sequence, the data is output
//  in either LD[8:0] pins or LD[17:9] pins depending on display data alignment.
// For serial initialization sequence using SPI (IS SPI) there are six possible data widths:
//  8 bits, 9 bits, 12 bits, 16 bits, 16 bits data plus start byte (24 bits), 18 bits, or
//  24 bits.
//  Parameters in SPI_CONTROL register and SPI_START_BYTE register is also used for serial
//  initialization sequence using SPI.
//  Serial IS cycles must also be completed prior to the end of horizontal active of the line
//  where initialization cycles are sent. The programmer needs to make sure that register
//  programming is such that this is true. If all the cycles have been completed prior to the
//  end of horizontal active, SPI signals will be forced inactive until the next SPI cycles.
//
// The following shows how initialization sequence data bits are used when sending
// initialization sequence:
//
//  For 9-bit parallel initialization - up to 10 initialization cycles can be done:
//   Init cycle     1      2      3      4      5      6      7      8      9      10
//   ----------------------------------------------------------------------------------
//   data          8-0   17-9   26-18  35-27  44-36  53-45  62-54  71-63  80-72  89-81
//   LSC0 enable    90     93     96     99    102    105    108    111    114    117
//   LSC1 enable    91     94     97    100    103    106    109    112    115    118
//   data/command   92     95     98    101    104    107    110    113    116    119
//
//  For 18-bit parallel initialization - up to 6 initialization cycles can be done:
//   Init cycle     1      2      3      4      5      6
//   ------------------------------------------------------
//   data         17-0   35-18  53-36  71-54  89-72 107-90 
//   LSC0 enable   108    111    114    117    120    123
//   LSC1 enable   109    112    115    118    121    124
//   data/command  110    113    116    119    122    125
//
//  For serial initialization using SPI, main display SPI chip select (Main SCS_) is always
//   output on LCS_ pin while sub display SPI chip select (Sub SCS_) can be optionally output
//   on several pins (see pin output select definition). Initialization cycle through SPI
//   interface can only be sent to either main or sub display but not to both and the
//   selection bits are specified in the tables below. Note that 0 indicates main display
//   initialization and 1 indicates sub display initialization.
//
//  For 8-bit SPI initialization - up to 12 initialization cycles can be done:
//   Init cycle     1      2      3      4      5      6      7      8      9      10
//   ----------------------------------------------------------------------------------
//   data          7-0   15-8   23-16  31-24  39-32  47-40  55-48  63-56  71-64  79-72 
//   Main/Sub SCS_  96     98    100    102    104    106    108    110    112    114
//   SDC            97     99    101    103    105    107    109    111    113    115
//
//   Init cycle     11     12
//   --------------------------
//   data         87-80  95-88
//   Main/Sub SCS_ 116    118
//   SDC           117    119
//
//  For 12-bit SPI initialization - up to 9 initialization cycles can be done:
//   Init cycle     1      2      3      4      5      6      7      8      9
//   ---------------------------------------------------------------------------
//   data         11-0   23-12  35-24  47-36  59-48  71-60  83-72  95-84 107-96
//   Main/Sub SCS_ 109    111    113    115    117    119    121    123    125
//   LDC           110    112    114    116    118    120    122    124    126
//
//  For 16-bit SPI initialization - up to 7 initialization cycles can be done:
//   Init cycle     1      2      3      4      5      6      7
//   ---------------------------------------------------------------
//   data         15-0   31-16  47-32  63-48  79-64  95-80 111-96
//   Main/Sub SCS_ 112    114    116    118    120    122    124
//   SDC           113    115    117    119    121    123    125
//
//  For 18-bit SPI initialization - up to 6 initialization cycles can be done:
//   Init cycle     1      2      3      4      5      6
//   ------------------------------------------------------
//   data         17-0   35-18  53-36  71-54  89-72 107-90
//   Main/Sub SCS_ 108    110    112    114    116    118
//   SDC           109    111    113    115    117    119
//
//  For 24-bit SPI initialization - up to 4 initialization cycles can be done:
//   Init cycle     1      2      3      4
//   ---------------------------------------
//   data         23-0   47-24  71-48  95-72
//   Main/Sub SCS_ 96      98    100    102
//   SDC           97      99    101    103
//
//

// Register DC_DISP_SPI_INIT_SEQ_DATA_A_0  // SPI Init Sequence Write Data A
#define DC_DISP_SPI_INIT_SEQ_DATA_A_0                   _MK_ADDR_CONST(0x443)
#define DC_DISP_SPI_INIT_SEQ_DATA_A_0_SECURE                    0x0
#define DC_DISP_SPI_INIT_SEQ_DATA_A_0_WORD_COUNT                        0x1
#define DC_DISP_SPI_INIT_SEQ_DATA_A_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_SPI_INIT_SEQ_DATA_A_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_SPI_INIT_SEQ_DATA_A_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_SPI_INIT_SEQ_DATA_A_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_SPI_INIT_SEQ_DATA_A_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define DC_DISP_SPI_INIT_SEQ_DATA_A_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// SPI Init Sequence Write Data bits 31-0
#define DC_DISP_SPI_INIT_SEQ_DATA_A_0_SPI_INIT_SEQ_DATA_A_SHIFT                 _MK_SHIFT_CONST(0)
#define DC_DISP_SPI_INIT_SEQ_DATA_A_0_SPI_INIT_SEQ_DATA_A_FIELD                 (_MK_MASK_CONST(0xffffffff) << DC_DISP_SPI_INIT_SEQ_DATA_A_0_SPI_INIT_SEQ_DATA_A_SHIFT)
#define DC_DISP_SPI_INIT_SEQ_DATA_A_0_SPI_INIT_SEQ_DATA_A_RANGE                 31:0
#define DC_DISP_SPI_INIT_SEQ_DATA_A_0_SPI_INIT_SEQ_DATA_A_WOFFSET                       0x0
#define DC_DISP_SPI_INIT_SEQ_DATA_A_0_SPI_INIT_SEQ_DATA_A_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SPI_INIT_SEQ_DATA_A_0_SPI_INIT_SEQ_DATA_A_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_SPI_INIT_SEQ_DATA_A_0_SPI_INIT_SEQ_DATA_A_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SPI_INIT_SEQ_DATA_A_0_SPI_INIT_SEQ_DATA_A_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register DC_DISP_SPI_INIT_SEQ_DATA_B_0  // SPI Init Sequence Write Data B
#define DC_DISP_SPI_INIT_SEQ_DATA_B_0                   _MK_ADDR_CONST(0x444)
#define DC_DISP_SPI_INIT_SEQ_DATA_B_0_SECURE                    0x0
#define DC_DISP_SPI_INIT_SEQ_DATA_B_0_WORD_COUNT                        0x1
#define DC_DISP_SPI_INIT_SEQ_DATA_B_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_SPI_INIT_SEQ_DATA_B_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_SPI_INIT_SEQ_DATA_B_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_SPI_INIT_SEQ_DATA_B_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_SPI_INIT_SEQ_DATA_B_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define DC_DISP_SPI_INIT_SEQ_DATA_B_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// SPI Init Sequence Write Data bits 63-32
#define DC_DISP_SPI_INIT_SEQ_DATA_B_0_SPI_INIT_SEQ_DATA_B_SHIFT                 _MK_SHIFT_CONST(0)
#define DC_DISP_SPI_INIT_SEQ_DATA_B_0_SPI_INIT_SEQ_DATA_B_FIELD                 (_MK_MASK_CONST(0xffffffff) << DC_DISP_SPI_INIT_SEQ_DATA_B_0_SPI_INIT_SEQ_DATA_B_SHIFT)
#define DC_DISP_SPI_INIT_SEQ_DATA_B_0_SPI_INIT_SEQ_DATA_B_RANGE                 31:0
#define DC_DISP_SPI_INIT_SEQ_DATA_B_0_SPI_INIT_SEQ_DATA_B_WOFFSET                       0x0
#define DC_DISP_SPI_INIT_SEQ_DATA_B_0_SPI_INIT_SEQ_DATA_B_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SPI_INIT_SEQ_DATA_B_0_SPI_INIT_SEQ_DATA_B_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_SPI_INIT_SEQ_DATA_B_0_SPI_INIT_SEQ_DATA_B_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SPI_INIT_SEQ_DATA_B_0_SPI_INIT_SEQ_DATA_B_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register DC_DISP_SPI_INIT_SEQ_DATA_C_0  // SPI Init Sequence Write Data C
#define DC_DISP_SPI_INIT_SEQ_DATA_C_0                   _MK_ADDR_CONST(0x445)
#define DC_DISP_SPI_INIT_SEQ_DATA_C_0_SECURE                    0x0
#define DC_DISP_SPI_INIT_SEQ_DATA_C_0_WORD_COUNT                        0x1
#define DC_DISP_SPI_INIT_SEQ_DATA_C_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_SPI_INIT_SEQ_DATA_C_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_SPI_INIT_SEQ_DATA_C_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_SPI_INIT_SEQ_DATA_C_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_SPI_INIT_SEQ_DATA_C_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define DC_DISP_SPI_INIT_SEQ_DATA_C_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// SPI Init Sequence Write Data bits 95-64
#define DC_DISP_SPI_INIT_SEQ_DATA_C_0_SPI_INIT_SEQ_DATA_C_SHIFT                 _MK_SHIFT_CONST(0)
#define DC_DISP_SPI_INIT_SEQ_DATA_C_0_SPI_INIT_SEQ_DATA_C_FIELD                 (_MK_MASK_CONST(0xffffffff) << DC_DISP_SPI_INIT_SEQ_DATA_C_0_SPI_INIT_SEQ_DATA_C_SHIFT)
#define DC_DISP_SPI_INIT_SEQ_DATA_C_0_SPI_INIT_SEQ_DATA_C_RANGE                 31:0
#define DC_DISP_SPI_INIT_SEQ_DATA_C_0_SPI_INIT_SEQ_DATA_C_WOFFSET                       0x0
#define DC_DISP_SPI_INIT_SEQ_DATA_C_0_SPI_INIT_SEQ_DATA_C_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SPI_INIT_SEQ_DATA_C_0_SPI_INIT_SEQ_DATA_C_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_SPI_INIT_SEQ_DATA_C_0_SPI_INIT_SEQ_DATA_C_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SPI_INIT_SEQ_DATA_C_0_SPI_INIT_SEQ_DATA_C_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register DC_DISP_SPI_INIT_SEQ_DATA_D_0  // SPI Init Sequence Write Data D
#define DC_DISP_SPI_INIT_SEQ_DATA_D_0                   _MK_ADDR_CONST(0x446)
#define DC_DISP_SPI_INIT_SEQ_DATA_D_0_SECURE                    0x0
#define DC_DISP_SPI_INIT_SEQ_DATA_D_0_WORD_COUNT                        0x1
#define DC_DISP_SPI_INIT_SEQ_DATA_D_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_SPI_INIT_SEQ_DATA_D_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_SPI_INIT_SEQ_DATA_D_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_SPI_INIT_SEQ_DATA_D_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_SPI_INIT_SEQ_DATA_D_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define DC_DISP_SPI_INIT_SEQ_DATA_D_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// SPI Init Sequence Write Data bits 127-96
#define DC_DISP_SPI_INIT_SEQ_DATA_D_0_SPI_INIT_SEQ_DATA_D_SHIFT                 _MK_SHIFT_CONST(0)
#define DC_DISP_SPI_INIT_SEQ_DATA_D_0_SPI_INIT_SEQ_DATA_D_FIELD                 (_MK_MASK_CONST(0xffffffff) << DC_DISP_SPI_INIT_SEQ_DATA_D_0_SPI_INIT_SEQ_DATA_D_SHIFT)
#define DC_DISP_SPI_INIT_SEQ_DATA_D_0_SPI_INIT_SEQ_DATA_D_RANGE                 31:0
#define DC_DISP_SPI_INIT_SEQ_DATA_D_0_SPI_INIT_SEQ_DATA_D_WOFFSET                       0x0
#define DC_DISP_SPI_INIT_SEQ_DATA_D_0_SPI_INIT_SEQ_DATA_D_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SPI_INIT_SEQ_DATA_D_0_SPI_INIT_SEQ_DATA_D_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_SPI_INIT_SEQ_DATA_D_0_SPI_INIT_SEQ_DATA_D_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SPI_INIT_SEQ_DATA_D_0_SPI_INIT_SEQ_DATA_D_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// reserved for future pin options
// Memory Client Interface Fifo Control Register.
// The registers below allow to optimize the synchronization timing in
// the memory client asynchronous fifos. When they can be used depend on
// the client and memory controller clock ratio.
// Additionally, the RDMC_RDFAST/RDCL_RDFAST fields can increase power
// consumption if the asynchronous fifo is implemented as a real ram.
// There is no power impact on latch-based fifos. Flipflop-based fifos
// do not use these fields.
// See recommended settings below.
//
// !! IMPORTANT !!
// The register fields can only be changed when the memory client async
// fifos are empty.
//
// The register field ending with WRCL_MCLE2X (if any) can be set to improve
// async fifo synchronization on the write side by one client clock cycle if
// the memory controller clock frequency is less or equal to twice the client
// clock frequency:
//
//      mcclk_freq <= 2 * clientclk_freq
//
// The register field ending with WRMC_CLLE2X (if any) can be set to improve
// async fifo synchronization on the write side by one memory controller clock
// cycle if the client clock frequency is less or equal to twice the memory
// controller clock frequency:
//
//      clientclk_freq <= 2 * mcclk_freq
//
// The register field ending with RDMC_RDFAST (if any) can be set to improve async
// fifo synchronization on the read side by one memory controller clock cycle.
//
// !! WARNING !!
// RDMC_RDFAST can be used along with WRCL_MCLE2X only when:
//
//       mcclk_freq <= clientclk_freq
//
// The register field ending with RDCL_RDFAST (if any) can be set to improve async
// fifo synchronization on the read side by one client clock cycle.
//
// !! WARNING !!
// RDCL_RDFAST can be used along with WRMC_CLLE2X only when:
//
//       clientclk_freq <= mcclk_freq
//
// RECOMMENDED SETTINGS
// # Client writing to fifo, memory controller reading from fifo
// - mcclk_freq <= clientclk_freq
//     You can enable both RDMC_RDFAST and WRCL_CLLE2X. If one of the fifos is
//     a real ram and power is a concern, you should avoid enabling RDMC_RDFAST.
// - clientclk_freq < mcclk_freq <= 2 * clientclk_freq
//     You can enable RDMC_RDFAST or WRCL_MCLE2X, but because the client clock
//     is slower, you should enable only WRCL_MCLE2X.
// - 2 * clientclk_freq < mcclk_freq
//     You can only enable RDMC_RDFAST. If one of the fifos is a real ram and
//     power is a concern, you should avoid enabling RDMC_RDFAST.
//
// # Memory controller writing to fifo, client reading from fifo
// - clientclk_freq <= mcclk_freq
//     You can enable both RDCL_RDFAST and WRMC_CLLE2X. If one of the fifos is
//     a real ram and power is a concern, you should avoid enabling RDCL_RDFAST.
// - mcclk_freq < clientclk_freq <= 2 * mcclk_freq
//     You can enable RDCL_RDFAST or WRMC_CLLE2X, but because the memory controller
//     clock is slower, you should enable only WRMC_CLLE2X.
// - 2 * mcclk_freq < clientclk_freq
//     You can only enable RDCL_RDFAST. If one of the fifos is a real ram and
//     power is a concern, you should avoid enabling RDCL_RDFAST.
//

// Register DC_DISP_DC_MCCIF_FIFOCTRL_0  
#define DC_DISP_DC_MCCIF_FIFOCTRL_0                     _MK_ADDR_CONST(0x480)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_SECURE                      0x0
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_WORD_COUNT                  0x1
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_RESET_MASK                  _MK_MASK_CONST(0xf)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_READ_MASK                   _MK_MASK_CONST(0xf)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_WRITE_MASK                  _MK_MASK_CONST(0xf)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_WRCL_MCLE2X_SHIFT                  _MK_SHIFT_CONST(0)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_WRCL_MCLE2X_FIELD                  (_MK_MASK_CONST(0x1) << DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_WRCL_MCLE2X_SHIFT)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_WRCL_MCLE2X_RANGE                  0:0
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_WRCL_MCLE2X_WOFFSET                        0x0
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_WRCL_MCLE2X_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_WRCL_MCLE2X_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_WRCL_MCLE2X_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_WRCL_MCLE2X_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_WRCL_MCLE2X_INIT_ENUM                      DISABLE
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_WRCL_MCLE2X_DISABLE                        _MK_ENUM_CONST(0)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_WRCL_MCLE2X_ENABLE                 _MK_ENUM_CONST(1)

#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_RDMC_RDFAST_SHIFT                  _MK_SHIFT_CONST(1)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_RDMC_RDFAST_FIELD                  (_MK_MASK_CONST(0x1) << DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_RDMC_RDFAST_SHIFT)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_RDMC_RDFAST_RANGE                  1:1
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_RDMC_RDFAST_WOFFSET                        0x0
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_RDMC_RDFAST_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_RDMC_RDFAST_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_RDMC_RDFAST_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_RDMC_RDFAST_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_RDMC_RDFAST_INIT_ENUM                      DISABLE
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_RDMC_RDFAST_DISABLE                        _MK_ENUM_CONST(0)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_RDMC_RDFAST_ENABLE                 _MK_ENUM_CONST(1)

#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_WRMC_CLLE2X_SHIFT                  _MK_SHIFT_CONST(2)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_WRMC_CLLE2X_FIELD                  (_MK_MASK_CONST(0x1) << DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_WRMC_CLLE2X_SHIFT)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_WRMC_CLLE2X_RANGE                  2:2
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_WRMC_CLLE2X_WOFFSET                        0x0
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_WRMC_CLLE2X_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_WRMC_CLLE2X_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_WRMC_CLLE2X_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_WRMC_CLLE2X_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_WRMC_CLLE2X_INIT_ENUM                      DISABLE
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_WRMC_CLLE2X_DISABLE                        _MK_ENUM_CONST(0)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_WRMC_CLLE2X_ENABLE                 _MK_ENUM_CONST(1)

#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_RDCL_RDFAST_SHIFT                  _MK_SHIFT_CONST(3)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_RDCL_RDFAST_FIELD                  (_MK_MASK_CONST(0x1) << DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_RDCL_RDFAST_SHIFT)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_RDCL_RDFAST_RANGE                  3:3
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_RDCL_RDFAST_WOFFSET                        0x0
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_RDCL_RDFAST_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_RDCL_RDFAST_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_RDCL_RDFAST_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_RDCL_RDFAST_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_RDCL_RDFAST_INIT_ENUM                      DISABLE
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_RDCL_RDFAST_DISABLE                        _MK_ENUM_CONST(0)
#define DC_DISP_DC_MCCIF_FIFOCTRL_0_DC_MCCIF_RDCL_RDFAST_ENABLE                 _MK_ENUM_CONST(1)

// Memory Client Hysteresis Control Register
// This register exists only for clients with hysteresis.
// BUG 505006: Hysteresis configuration can only be updated when memory traffic is idle.
// HYST_EN can be used to turn on or off the hysteresis logic.
// HYST_REQ_TH is the threshold of pending requests required
//   before allowing them to pass through
//   (overriden after HYST_REQ_TM cycles).
// Hysteresis logic will stop holding request after (1<<HYST_TM) cycles
//   (this should not have to be used and is only a WAR for
//   unexpected hangs).
// Deep hysteresis is a second level of hysteresis on a longer time-frame.
//   DHYST_TH is the size of the read burst (requests are held until there
//   is space for the entire burst in the return data fifo).
//   During a burst period, if there are no new requests after
//   DHYST_TM cycles, then the burst is terminated early.

// Register DC_DISP_MCCIF_DISPLAY0A_HYST_0  
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0                  _MK_ADDR_CONST(0x481)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_SECURE                   0x0
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_WORD_COUNT                       0x1
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_RESET_VAL                        _MK_MASK_CONST(0xcf401f1f)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_RESET_MASK                       _MK_MASK_CONST(0xffffffff)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_WRITE_MASK                       _MK_MASK_CONST(0xffffffff)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_REQ_TM_SHIFT                       _MK_SHIFT_CONST(0)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_REQ_TM_FIELD                       (_MK_MASK_CONST(0xff) << DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_REQ_TM_SHIFT)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_REQ_TM_RANGE                       7:0
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_REQ_TM_WOFFSET                     0x0
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_REQ_TM_DEFAULT                     _MK_MASK_CONST(0x1f)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_REQ_TM_DEFAULT_MASK                        _MK_MASK_CONST(0xff)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_REQ_TM_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_REQ_TM_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_DHYST_TM_SHIFT                  _MK_SHIFT_CONST(8)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_DHYST_TM_FIELD                  (_MK_MASK_CONST(0xff) << DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_DHYST_TM_SHIFT)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_DHYST_TM_RANGE                  15:8
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_DHYST_TM_WOFFSET                        0x0
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_DHYST_TM_DEFAULT                        _MK_MASK_CONST(0x1f)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_DHYST_TM_DEFAULT_MASK                   _MK_MASK_CONST(0xff)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_DHYST_TM_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_DHYST_TM_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_DHYST_TH_SHIFT                  _MK_SHIFT_CONST(16)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_DHYST_TH_FIELD                  (_MK_MASK_CONST(0xff) << DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_DHYST_TH_SHIFT)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_DHYST_TH_RANGE                  23:16
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_DHYST_TH_WOFFSET                        0x0
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_DHYST_TH_DEFAULT                        _MK_MASK_CONST(0x40)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_DHYST_TH_DEFAULT_MASK                   _MK_MASK_CONST(0xff)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_DHYST_TH_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_DHYST_TH_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_TM_SHIFT                   _MK_SHIFT_CONST(24)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_TM_FIELD                   (_MK_MASK_CONST(0xf) << DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_TM_SHIFT)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_TM_RANGE                   27:24
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_TM_WOFFSET                 0x0
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_TM_DEFAULT                 _MK_MASK_CONST(0xf)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_TM_DEFAULT_MASK                    _MK_MASK_CONST(0xf)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_TM_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_TM_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_REQ_TH_SHIFT                       _MK_SHIFT_CONST(28)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_REQ_TH_FIELD                       (_MK_MASK_CONST(0x7) << DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_REQ_TH_SHIFT)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_REQ_TH_RANGE                       30:28
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_REQ_TH_WOFFSET                     0x0
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_REQ_TH_DEFAULT                     _MK_MASK_CONST(0x4)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_REQ_TH_DEFAULT_MASK                        _MK_MASK_CONST(0x7)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_REQ_TH_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_REQ_TH_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_EN_SHIFT                   _MK_SHIFT_CONST(31)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_EN_FIELD                   (_MK_MASK_CONST(0x1) << DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_EN_SHIFT)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_EN_RANGE                   31:31
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_EN_WOFFSET                 0x0
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_EN_DEFAULT                 _MK_MASK_CONST(0x1)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_EN_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_EN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_EN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_EN_INIT_ENUM                       ENABLE
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_EN_ENABLE                  _MK_ENUM_CONST(1)
#define DC_DISP_MCCIF_DISPLAY0A_HYST_0_CBR_DISPLAY0A2MC_HYST_EN_DISABLE                 _MK_ENUM_CONST(0)

// Memory Client Hysteresis Control Register
// This register exists only for clients with hysteresis.
// BUG 505006: Hysteresis configuration can only be updated when memory traffic is idle.
// HYST_EN can be used to turn on or off the hysteresis logic.
// HYST_REQ_TH is the threshold of pending requests required
//   before allowing them to pass through
//   (overriden after HYST_REQ_TM cycles).
// Hysteresis logic will stop holding request after (1<<HYST_TM) cycles
//   (this should not have to be used and is only a WAR for
//   unexpected hangs).
// Deep hysteresis is a second level of hysteresis on a longer time-frame.
//   DHYST_TH is the size of the read burst (requests are held until there
//   is space for the entire burst in the return data fifo).
//   During a burst period, if there are no new requests after
//   DHYST_TM cycles, then the burst is terminated early.

// Register DC_DISP_MCCIF_DISPLAY0B_HYST_0  
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0                  _MK_ADDR_CONST(0x482)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_SECURE                   0x0
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_WORD_COUNT                       0x1
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_RESET_VAL                        _MK_MASK_CONST(0xcf081f1f)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_RESET_MASK                       _MK_MASK_CONST(0xffffffff)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_WRITE_MASK                       _MK_MASK_CONST(0xffffffff)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_REQ_TM_SHIFT                       _MK_SHIFT_CONST(0)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_REQ_TM_FIELD                       (_MK_MASK_CONST(0xff) << DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_REQ_TM_SHIFT)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_REQ_TM_RANGE                       7:0
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_REQ_TM_WOFFSET                     0x0
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_REQ_TM_DEFAULT                     _MK_MASK_CONST(0x1f)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_REQ_TM_DEFAULT_MASK                        _MK_MASK_CONST(0xff)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_REQ_TM_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_REQ_TM_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_DHYST_TM_SHIFT                  _MK_SHIFT_CONST(8)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_DHYST_TM_FIELD                  (_MK_MASK_CONST(0xff) << DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_DHYST_TM_SHIFT)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_DHYST_TM_RANGE                  15:8
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_DHYST_TM_WOFFSET                        0x0
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_DHYST_TM_DEFAULT                        _MK_MASK_CONST(0x1f)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_DHYST_TM_DEFAULT_MASK                   _MK_MASK_CONST(0xff)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_DHYST_TM_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_DHYST_TM_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_DHYST_TH_SHIFT                  _MK_SHIFT_CONST(16)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_DHYST_TH_FIELD                  (_MK_MASK_CONST(0xff) << DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_DHYST_TH_SHIFT)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_DHYST_TH_RANGE                  23:16
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_DHYST_TH_WOFFSET                        0x0
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_DHYST_TH_DEFAULT                        _MK_MASK_CONST(0x8)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_DHYST_TH_DEFAULT_MASK                   _MK_MASK_CONST(0xff)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_DHYST_TH_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_DHYST_TH_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_TM_SHIFT                   _MK_SHIFT_CONST(24)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_TM_FIELD                   (_MK_MASK_CONST(0xf) << DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_TM_SHIFT)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_TM_RANGE                   27:24
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_TM_WOFFSET                 0x0
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_TM_DEFAULT                 _MK_MASK_CONST(0xf)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_TM_DEFAULT_MASK                    _MK_MASK_CONST(0xf)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_TM_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_TM_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_REQ_TH_SHIFT                       _MK_SHIFT_CONST(28)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_REQ_TH_FIELD                       (_MK_MASK_CONST(0x7) << DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_REQ_TH_SHIFT)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_REQ_TH_RANGE                       30:28
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_REQ_TH_WOFFSET                     0x0
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_REQ_TH_DEFAULT                     _MK_MASK_CONST(0x4)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_REQ_TH_DEFAULT_MASK                        _MK_MASK_CONST(0x7)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_REQ_TH_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_REQ_TH_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_EN_SHIFT                   _MK_SHIFT_CONST(31)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_EN_FIELD                   (_MK_MASK_CONST(0x1) << DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_EN_SHIFT)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_EN_RANGE                   31:31
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_EN_WOFFSET                 0x0
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_EN_DEFAULT                 _MK_MASK_CONST(0x1)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_EN_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_EN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_EN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_EN_INIT_ENUM                       ENABLE
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_EN_ENABLE                  _MK_ENUM_CONST(1)
#define DC_DISP_MCCIF_DISPLAY0B_HYST_0_CBR_DISPLAY0B2MC_HYST_EN_DISABLE                 _MK_ENUM_CONST(0)

// Memory Client Hysteresis Control Register
// This register exists only for clients with hysteresis.
// BUG 505006: Hysteresis configuration can only be updated when memory traffic is idle.
// HYST_EN can be used to turn on or off the hysteresis logic.
// HYST_REQ_TH is the threshold of pending requests required
//   before allowing them to pass through
//   (overriden after HYST_REQ_TM cycles).
// Hysteresis logic will stop holding request after (1<<HYST_TM) cycles
//   (this should not have to be used and is only a WAR for
//   unexpected hangs).
// Deep hysteresis is a second level of hysteresis on a longer time-frame.
//   DHYST_TH is the size of the read burst (requests are held until there
//   is space for the entire burst in the return data fifo).
//   During a burst period, if there are no new requests after
//   DHYST_TM cycles, then the burst is terminated early.

// Register DC_DISP_MCCIF_DISPLAY0C_HYST_0  
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0                  _MK_ADDR_CONST(0x483)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_SECURE                   0x0
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_WORD_COUNT                       0x1
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_RESET_VAL                        _MK_MASK_CONST(0xcf081f1f)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_RESET_MASK                       _MK_MASK_CONST(0xffffffff)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_WRITE_MASK                       _MK_MASK_CONST(0xffffffff)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_REQ_TM_SHIFT                       _MK_SHIFT_CONST(0)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_REQ_TM_FIELD                       (_MK_MASK_CONST(0xff) << DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_REQ_TM_SHIFT)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_REQ_TM_RANGE                       7:0
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_REQ_TM_WOFFSET                     0x0
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_REQ_TM_DEFAULT                     _MK_MASK_CONST(0x1f)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_REQ_TM_DEFAULT_MASK                        _MK_MASK_CONST(0xff)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_REQ_TM_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_REQ_TM_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_DHYST_TM_SHIFT                  _MK_SHIFT_CONST(8)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_DHYST_TM_FIELD                  (_MK_MASK_CONST(0xff) << DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_DHYST_TM_SHIFT)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_DHYST_TM_RANGE                  15:8
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_DHYST_TM_WOFFSET                        0x0
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_DHYST_TM_DEFAULT                        _MK_MASK_CONST(0x1f)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_DHYST_TM_DEFAULT_MASK                   _MK_MASK_CONST(0xff)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_DHYST_TM_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_DHYST_TM_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_DHYST_TH_SHIFT                  _MK_SHIFT_CONST(16)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_DHYST_TH_FIELD                  (_MK_MASK_CONST(0xff) << DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_DHYST_TH_SHIFT)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_DHYST_TH_RANGE                  23:16
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_DHYST_TH_WOFFSET                        0x0
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_DHYST_TH_DEFAULT                        _MK_MASK_CONST(0x8)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_DHYST_TH_DEFAULT_MASK                   _MK_MASK_CONST(0xff)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_DHYST_TH_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_DHYST_TH_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_TM_SHIFT                   _MK_SHIFT_CONST(24)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_TM_FIELD                   (_MK_MASK_CONST(0xf) << DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_TM_SHIFT)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_TM_RANGE                   27:24
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_TM_WOFFSET                 0x0
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_TM_DEFAULT                 _MK_MASK_CONST(0xf)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_TM_DEFAULT_MASK                    _MK_MASK_CONST(0xf)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_TM_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_TM_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_REQ_TH_SHIFT                       _MK_SHIFT_CONST(28)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_REQ_TH_FIELD                       (_MK_MASK_CONST(0x7) << DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_REQ_TH_SHIFT)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_REQ_TH_RANGE                       30:28
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_REQ_TH_WOFFSET                     0x0
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_REQ_TH_DEFAULT                     _MK_MASK_CONST(0x4)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_REQ_TH_DEFAULT_MASK                        _MK_MASK_CONST(0x7)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_REQ_TH_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_REQ_TH_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_EN_SHIFT                   _MK_SHIFT_CONST(31)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_EN_FIELD                   (_MK_MASK_CONST(0x1) << DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_EN_SHIFT)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_EN_RANGE                   31:31
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_EN_WOFFSET                 0x0
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_EN_DEFAULT                 _MK_MASK_CONST(0x1)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_EN_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_EN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_EN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_EN_INIT_ENUM                       ENABLE
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_EN_ENABLE                  _MK_ENUM_CONST(1)
#define DC_DISP_MCCIF_DISPLAY0C_HYST_0_CBR_DISPLAY0C2MC_HYST_EN_DISABLE                 _MK_ENUM_CONST(0)

// Memory Client Hysteresis Control Register
// This register exists only for clients with hysteresis.
// BUG 505006: Hysteresis configuration can only be updated when memory traffic is idle.
// HYST_EN can be used to turn on or off the hysteresis logic.
// HYST_REQ_TH is the threshold of pending requests required
//   before allowing them to pass through
//   (overriden after HYST_REQ_TM cycles).
// Hysteresis logic will stop holding request after (1<<HYST_TM) cycles
//   (this should not have to be used and is only a WAR for
//   unexpected hangs).
// Deep hysteresis is a second level of hysteresis on a longer time-frame.
//   DHYST_TH is the size of the read burst (requests are held until there
//   is space for the entire burst in the return data fifo).
//   During a burst period, if there are no new requests after
//   DHYST_TM cycles, then the burst is terminated early.

// Register DC_DISP_MCCIF_DISPLAY1B_HYST_0  
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0                  _MK_ADDR_CONST(0x484)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_SECURE                   0x0
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_WORD_COUNT                       0x1
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_RESET_VAL                        _MK_MASK_CONST(0xcf081f1f)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_RESET_MASK                       _MK_MASK_CONST(0xffffffff)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_WRITE_MASK                       _MK_MASK_CONST(0xffffffff)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_REQ_TM_SHIFT                       _MK_SHIFT_CONST(0)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_REQ_TM_FIELD                       (_MK_MASK_CONST(0xff) << DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_REQ_TM_SHIFT)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_REQ_TM_RANGE                       7:0
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_REQ_TM_WOFFSET                     0x0
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_REQ_TM_DEFAULT                     _MK_MASK_CONST(0x1f)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_REQ_TM_DEFAULT_MASK                        _MK_MASK_CONST(0xff)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_REQ_TM_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_REQ_TM_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_DHYST_TM_SHIFT                  _MK_SHIFT_CONST(8)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_DHYST_TM_FIELD                  (_MK_MASK_CONST(0xff) << DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_DHYST_TM_SHIFT)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_DHYST_TM_RANGE                  15:8
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_DHYST_TM_WOFFSET                        0x0
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_DHYST_TM_DEFAULT                        _MK_MASK_CONST(0x1f)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_DHYST_TM_DEFAULT_MASK                   _MK_MASK_CONST(0xff)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_DHYST_TM_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_DHYST_TM_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_DHYST_TH_SHIFT                  _MK_SHIFT_CONST(16)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_DHYST_TH_FIELD                  (_MK_MASK_CONST(0xff) << DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_DHYST_TH_SHIFT)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_DHYST_TH_RANGE                  23:16
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_DHYST_TH_WOFFSET                        0x0
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_DHYST_TH_DEFAULT                        _MK_MASK_CONST(0x8)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_DHYST_TH_DEFAULT_MASK                   _MK_MASK_CONST(0xff)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_DHYST_TH_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_DHYST_TH_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_TM_SHIFT                   _MK_SHIFT_CONST(24)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_TM_FIELD                   (_MK_MASK_CONST(0xf) << DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_TM_SHIFT)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_TM_RANGE                   27:24
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_TM_WOFFSET                 0x0
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_TM_DEFAULT                 _MK_MASK_CONST(0xf)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_TM_DEFAULT_MASK                    _MK_MASK_CONST(0xf)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_TM_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_TM_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_REQ_TH_SHIFT                       _MK_SHIFT_CONST(28)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_REQ_TH_FIELD                       (_MK_MASK_CONST(0x7) << DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_REQ_TH_SHIFT)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_REQ_TH_RANGE                       30:28
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_REQ_TH_WOFFSET                     0x0
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_REQ_TH_DEFAULT                     _MK_MASK_CONST(0x4)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_REQ_TH_DEFAULT_MASK                        _MK_MASK_CONST(0x7)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_REQ_TH_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_REQ_TH_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_EN_SHIFT                   _MK_SHIFT_CONST(31)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_EN_FIELD                   (_MK_MASK_CONST(0x1) << DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_EN_SHIFT)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_EN_RANGE                   31:31
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_EN_WOFFSET                 0x0
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_EN_DEFAULT                 _MK_MASK_CONST(0x1)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_EN_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_EN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_EN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_EN_INIT_ENUM                       ENABLE
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_EN_ENABLE                  _MK_ENUM_CONST(1)
#define DC_DISP_MCCIF_DISPLAY1B_HYST_0_CBR_DISPLAY1B2MC_HYST_EN_DISABLE                 _MK_ENUM_CONST(0)

// reserved for future MC expansion
// Control registers for triple DAC/CRT operation (display2tvdac signals)
// A register outside of disiplay, TVDACCCONFIG, controls which source among display/displayb/tvo 
// goes to TVDAC.

// Register DC_DISP_DAC_CRT_CTRL_0  // Control registers for CRT mode, including CYA bits
#define DC_DISP_DAC_CRT_CTRL_0                  _MK_ADDR_CONST(0x4c0)
#define DC_DISP_DAC_CRT_CTRL_0_SECURE                   0x0
#define DC_DISP_DAC_CRT_CTRL_0_WORD_COUNT                       0x1
#define DC_DISP_DAC_CRT_CTRL_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define DC_DISP_DAC_CRT_CTRL_0_RESET_MASK                       _MK_MASK_CONST(0x15)
#define DC_DISP_DAC_CRT_CTRL_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define DC_DISP_DAC_CRT_CTRL_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_DAC_CRT_CTRL_0_READ_MASK                        _MK_MASK_CONST(0x15)
#define DC_DISP_DAC_CRT_CTRL_0_WRITE_MASK                       _MK_MASK_CONST(0x15)
// Selects the source for display2tvdac_notblank   0: notblank = d_active[10]      (i.e. data_enable)
//   1: notblank = (lvp[1] & lhp[1])
#define DC_DISP_DAC_CRT_CTRL_0_NOTBLANK_SELECT_SHIFT                    _MK_SHIFT_CONST(4)
#define DC_DISP_DAC_CRT_CTRL_0_NOTBLANK_SELECT_FIELD                    (_MK_MASK_CONST(0x1) << DC_DISP_DAC_CRT_CTRL_0_NOTBLANK_SELECT_SHIFT)
#define DC_DISP_DAC_CRT_CTRL_0_NOTBLANK_SELECT_RANGE                    4:4
#define DC_DISP_DAC_CRT_CTRL_0_NOTBLANK_SELECT_WOFFSET                  0x0
#define DC_DISP_DAC_CRT_CTRL_0_NOTBLANK_SELECT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_DAC_CRT_CTRL_0_NOTBLANK_SELECT_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_DISP_DAC_CRT_CTRL_0_NOTBLANK_SELECT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_DAC_CRT_CTRL_0_NOTBLANK_SELECT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_DAC_CRT_CTRL_0_NOTBLANK_SELECT_DE                       _MK_ENUM_CONST(0)
#define DC_DISP_DAC_CRT_CTRL_0_NOTBLANK_SELECT_LVP1_LHP1                        _MK_ENUM_CONST(1)

// Selects the source for display2tvdac_[hv]sync
#define DC_DISP_DAC_CRT_CTRL_0_SYNC_SELECT_SHIFT                        _MK_SHIFT_CONST(2)
#define DC_DISP_DAC_CRT_CTRL_0_SYNC_SELECT_FIELD                        (_MK_MASK_CONST(0x1) << DC_DISP_DAC_CRT_CTRL_0_SYNC_SELECT_SHIFT)
#define DC_DISP_DAC_CRT_CTRL_0_SYNC_SELECT_RANGE                        2:2
#define DC_DISP_DAC_CRT_CTRL_0_SYNC_SELECT_WOFFSET                      0x0
#define DC_DISP_DAC_CRT_CTRL_0_SYNC_SELECT_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_DAC_CRT_CTRL_0_SYNC_SELECT_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define DC_DISP_DAC_CRT_CTRL_0_SYNC_SELECT_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_DAC_CRT_CTRL_0_SYNC_SELECT_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_DAC_CRT_CTRL_0_SYNC_SELECT_VSYNC_HSYNC                  _MK_ENUM_CONST(0)
#define DC_DISP_DAC_CRT_CTRL_0_SYNC_SELECT_LVP0_LHP0                    _MK_ENUM_CONST(1)

// If enabled, output display2tvdac_NOTBLANK is tied to 1   0= disable
//   1= enable
#define DC_DISP_DAC_CRT_CTRL_0_OVERRIDE_NOTBLANK_SHIFT                  _MK_SHIFT_CONST(0)
#define DC_DISP_DAC_CRT_CTRL_0_OVERRIDE_NOTBLANK_FIELD                  (_MK_MASK_CONST(0x1) << DC_DISP_DAC_CRT_CTRL_0_OVERRIDE_NOTBLANK_SHIFT)
#define DC_DISP_DAC_CRT_CTRL_0_OVERRIDE_NOTBLANK_RANGE                  0:0
#define DC_DISP_DAC_CRT_CTRL_0_OVERRIDE_NOTBLANK_WOFFSET                        0x0
#define DC_DISP_DAC_CRT_CTRL_0_OVERRIDE_NOTBLANK_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_DAC_CRT_CTRL_0_OVERRIDE_NOTBLANK_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define DC_DISP_DAC_CRT_CTRL_0_OVERRIDE_NOTBLANK_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_DAC_CRT_CTRL_0_OVERRIDE_NOTBLANK_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_DAC_CRT_CTRL_0_OVERRIDE_NOTBLANK_DISABLE                        _MK_ENUM_CONST(0)
#define DC_DISP_DAC_CRT_CTRL_0_OVERRIDE_NOTBLANK_ENABLE                 _MK_ENUM_CONST(1)


// Register DC_DISP_DISP_MISC_CONTROL_0  // Miscelaneous controls, including CYA features
#define DC_DISP_DISP_MISC_CONTROL_0                     _MK_ADDR_CONST(0x4c1)
#define DC_DISP_DISP_MISC_CONTROL_0_SECURE                      0x0
#define DC_DISP_DISP_MISC_CONTROL_0_WORD_COUNT                  0x1
#define DC_DISP_DISP_MISC_CONTROL_0_RESET_VAL                   _MK_MASK_CONST(0x2)
#define DC_DISP_DISP_MISC_CONTROL_0_RESET_MASK                  _MK_MASK_CONST(0x3)
#define DC_DISP_DISP_MISC_CONTROL_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_MISC_CONTROL_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_MISC_CONTROL_0_READ_MASK                   _MK_MASK_CONST(0x3)
#define DC_DISP_DISP_MISC_CONTROL_0_WRITE_MASK                  _MK_MASK_CONST(0x3)
// Enable phase shift for 2P1C format   0= disable
//   1= enable phase shift 
//      SC0/SC1 will be delayed for one pixel clock
//      cycle. In 2P1C format, data will hold for 2
//      pixel clocks, so either choice should work
#define DC_DISP_DISP_MISC_CONTROL_0_PHASE_SHIFT_2P1C18B_SHIFT                   _MK_SHIFT_CONST(0)
#define DC_DISP_DISP_MISC_CONTROL_0_PHASE_SHIFT_2P1C18B_FIELD                   (_MK_MASK_CONST(0x1) << DC_DISP_DISP_MISC_CONTROL_0_PHASE_SHIFT_2P1C18B_SHIFT)
#define DC_DISP_DISP_MISC_CONTROL_0_PHASE_SHIFT_2P1C18B_RANGE                   0:0
#define DC_DISP_DISP_MISC_CONTROL_0_PHASE_SHIFT_2P1C18B_WOFFSET                 0x0
#define DC_DISP_DISP_MISC_CONTROL_0_PHASE_SHIFT_2P1C18B_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_MISC_CONTROL_0_PHASE_SHIFT_2P1C18B_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define DC_DISP_DISP_MISC_CONTROL_0_PHASE_SHIFT_2P1C18B_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_MISC_CONTROL_0_PHASE_SHIFT_2P1C18B_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_MISC_CONTROL_0_PHASE_SHIFT_2P1C18B_DISABLE                 _MK_ENUM_CONST(0)
#define DC_DISP_DISP_MISC_CONTROL_0_PHASE_SHIFT_2P1C18B_ENABLE                  _MK_ENUM_CONST(1)

// Enable underflow line flush, a.o.t end-of-frame flush   0= disable
//   1= enable underflow line flush 
#define DC_DISP_DISP_MISC_CONTROL_0_UF_LINE_FLUSH_SHIFT                 _MK_SHIFT_CONST(1)
#define DC_DISP_DISP_MISC_CONTROL_0_UF_LINE_FLUSH_FIELD                 (_MK_MASK_CONST(0x1) << DC_DISP_DISP_MISC_CONTROL_0_UF_LINE_FLUSH_SHIFT)
#define DC_DISP_DISP_MISC_CONTROL_0_UF_LINE_FLUSH_RANGE                 1:1
#define DC_DISP_DISP_MISC_CONTROL_0_UF_LINE_FLUSH_WOFFSET                       0x0
#define DC_DISP_DISP_MISC_CONTROL_0_UF_LINE_FLUSH_DEFAULT                       _MK_MASK_CONST(0x1)
#define DC_DISP_DISP_MISC_CONTROL_0_UF_LINE_FLUSH_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_DISP_DISP_MISC_CONTROL_0_UF_LINE_FLUSH_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_MISC_CONTROL_0_UF_LINE_FLUSH_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_DISP_MISC_CONTROL_0_UF_LINE_FLUSH_DISABLE                       _MK_ENUM_CONST(0)
#define DC_DISP_DISP_MISC_CONTROL_0_UF_LINE_FLUSH_ENABLE                        _MK_ENUM_CONST(1)

// Make private for now. This feature is not verified in AP20.
// The Smart Dimmer function takes advantage of the fact that a perceived pixel brightness in an LCD depends on both the
// pixel brightness value and the backlight intensity to reduce the backlight intensity to save power.
// Statistics are gathered on the current video frame and an "enhancement" is applied to subsequent frames that
// increases the pixel brightness value and reduces the backlight brightness to give an overall image intensity that is
// mostly the same as before.

// Packet SD_PIXEL
#define SD_PIXEL_SIZE 24

#define SD_PIXEL_RED_SHIFT                      _MK_SHIFT_CONST(0)
#define SD_PIXEL_RED_FIELD                      (_MK_MASK_CONST(0xff) << SD_PIXEL_RED_SHIFT)
#define SD_PIXEL_RED_RANGE                      _MK_SHIFT_CONST(7):_MK_SHIFT_CONST(0)
#define SD_PIXEL_RED_ROW                        0

#define SD_PIXEL_GRN_SHIFT                      _MK_SHIFT_CONST(8)
#define SD_PIXEL_GRN_FIELD                      (_MK_MASK_CONST(0xff) << SD_PIXEL_GRN_SHIFT)
#define SD_PIXEL_GRN_RANGE                      _MK_SHIFT_CONST(15):_MK_SHIFT_CONST(8)
#define SD_PIXEL_GRN_ROW                        0

#define SD_PIXEL_BLU_SHIFT                      _MK_SHIFT_CONST(16)
#define SD_PIXEL_BLU_FIELD                      (_MK_MASK_CONST(0xff) << SD_PIXEL_BLU_SHIFT)
#define SD_PIXEL_BLU_RANGE                      _MK_SHIFT_CONST(23):_MK_SHIFT_CONST(16)
#define SD_PIXEL_BLU_ROW                        0


// Register DC_DISP_SD_CONTROL_0  // Smart Dimmer Control
#define DC_DISP_SD_CONTROL_0                    _MK_ADDR_CONST(0x4c2)
#define DC_DISP_SD_CONTROL_0_SECURE                     0x0
#define DC_DISP_SD_CONTROL_0_WORD_COUNT                         0x1
#define DC_DISP_SD_CONTROL_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_CONTROL_0_RESET_MASK                         _MK_MASK_CONST(0x1ff)
#define DC_DISP_SD_CONTROL_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define DC_DISP_SD_CONTROL_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_CONTROL_0_READ_MASK                  _MK_MASK_CONST(0x1ff)
#define DC_DISP_SD_CONTROL_0_WRITE_MASK                         _MK_MASK_CONST(0x1ff)
// Enables the Smart Dimmer Function
//
#define DC_DISP_SD_CONTROL_0_SD_ENABLE_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_SD_CONTROL_0_SD_ENABLE_FIELD                    (_MK_MASK_CONST(0x1) << DC_DISP_SD_CONTROL_0_SD_ENABLE_SHIFT)
#define DC_DISP_SD_CONTROL_0_SD_ENABLE_RANGE                    0:0
#define DC_DISP_SD_CONTROL_0_SD_ENABLE_WOFFSET                  0x0
#define DC_DISP_SD_CONTROL_0_SD_ENABLE_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_CONTROL_0_SD_ENABLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define DC_DISP_SD_CONTROL_0_SD_ENABLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_CONTROL_0_SD_ENABLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_CONTROL_0_SD_ENABLE_DISABLE                  _MK_ENUM_CONST(0)    // //

#define DC_DISP_SD_CONTROL_0_SD_ENABLE_ENABLE                   _MK_ENUM_CONST(1)

// Use Video Luminance control of luminance: Luminance = MAX(R, G, B)
// ENABLE = use "video" luminance, which is determined
// by the coefficients in the SD_CSC_COEFFS register
// See the SD_CSC_COEFFS register for details.
//
#define DC_DISP_SD_CONTROL_0_USE_VID_LUMA_SHIFT                 _MK_SHIFT_CONST(1)
#define DC_DISP_SD_CONTROL_0_USE_VID_LUMA_FIELD                 (_MK_MASK_CONST(0x1) << DC_DISP_SD_CONTROL_0_USE_VID_LUMA_SHIFT)
#define DC_DISP_SD_CONTROL_0_USE_VID_LUMA_RANGE                 1:1
#define DC_DISP_SD_CONTROL_0_USE_VID_LUMA_WOFFSET                       0x0
#define DC_DISP_SD_CONTROL_0_USE_VID_LUMA_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_CONTROL_0_USE_VID_LUMA_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define DC_DISP_SD_CONTROL_0_USE_VID_LUMA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_CONTROL_0_USE_VID_LUMA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_CONTROL_0_USE_VID_LUMA_DISABLE                       _MK_ENUM_CONST(0)    // // DISABLE = use Hue Saturation Value (HSV) version

#define DC_DISP_SD_CONTROL_0_USE_VID_LUMA_ENABLE                        _MK_ENUM_CONST(1)

// Width of the Histogram bins, in quantisation levels. EIGHT = 8 levels per bin. Bins span range from   0 to 255
//
#define DC_DISP_SD_CONTROL_0_BIN_WIDTH_SHIFT                    _MK_SHIFT_CONST(2)
#define DC_DISP_SD_CONTROL_0_BIN_WIDTH_FIELD                    (_MK_MASK_CONST(0x3) << DC_DISP_SD_CONTROL_0_BIN_WIDTH_SHIFT)
#define DC_DISP_SD_CONTROL_0_BIN_WIDTH_RANGE                    3:2
#define DC_DISP_SD_CONTROL_0_BIN_WIDTH_WOFFSET                  0x0
#define DC_DISP_SD_CONTROL_0_BIN_WIDTH_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_CONTROL_0_BIN_WIDTH_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define DC_DISP_SD_CONTROL_0_BIN_WIDTH_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_CONTROL_0_BIN_WIDTH_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_CONTROL_0_BIN_WIDTH_ONE                      _MK_ENUM_CONST(0)    // // ONE   = 1 level per bin.  Bins span range from 224 to 255

#define DC_DISP_SD_CONTROL_0_BIN_WIDTH_TWO                      _MK_ENUM_CONST(1)    // // TWO   = 2 levels per bin. Bins span range from 192 to 255

#define DC_DISP_SD_CONTROL_0_BIN_WIDTH_FOUR                     _MK_ENUM_CONST(2)    // // FOUR  = 4 levels per bin. Bins span range from 128 to 255

#define DC_DISP_SD_CONTROL_0_BIN_WIDTH_EIGHT                    _MK_ENUM_CONST(3)

// The "aggressiveness" level of the Smart Dimmer algorithm.
// Higher aggressiveness levels result in higher power savings
// at the potential expense of image quality. The number
// programmed determines how many highlight pixels will be
// allowed to exceed the maximum representable brightness value
// and be clipped to that value. It also determines the maximum
// allowed enhancement value (k) applied to the pixel brightness.
//
// AGGRESSIVENESS Description         % pixels  Max. k
//      value                          crushed  value
//        0       Essentially off          0%    1.00
//        1       Highest quality       <  5%    1.10
//        2       Higher quality        < 10%    1.15
//        3       Balanced              < 15%    1.20
//        4       Higher battery life   < 20%    1.25
//        5       Highest battery life  < 25%    1.50
//
#define DC_DISP_SD_CONTROL_0_AGGRESSIVENESS_SHIFT                       _MK_SHIFT_CONST(4)
#define DC_DISP_SD_CONTROL_0_AGGRESSIVENESS_FIELD                       (_MK_MASK_CONST(0x7) << DC_DISP_SD_CONTROL_0_AGGRESSIVENESS_SHIFT)
#define DC_DISP_SD_CONTROL_0_AGGRESSIVENESS_RANGE                       6:4
#define DC_DISP_SD_CONTROL_0_AGGRESSIVENESS_WOFFSET                     0x0
#define DC_DISP_SD_CONTROL_0_AGGRESSIVENESS_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_SD_CONTROL_0_AGGRESSIVENESS_DEFAULT_MASK                        _MK_MASK_CONST(0x7)
#define DC_DISP_SD_CONTROL_0_AGGRESSIVENESS_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_CONTROL_0_AGGRESSIVENESS_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Determines the delay - in video frames - of the update of the
// hardware enhancement value that is applied to the pixels.
// This is useful for allowing the software some time to update
// the backlight control, when the control must be sent via
// side-band control packets or by some other means of control
// that incurs a sizeable delay. Being able to delay the hardware
// update ensures that the modification of the pixels occurs as
// nearly simultaneously with the update of the backlight as
// possible.
//
// Value Description
//   0   No delay - pixels modified immediately
//   1   New enhancemant value delayed by 1 frame.
//   2   New enhancement value delayed by 2 frames.
//   3   New enhancement value delayed by 3 frames.
#define DC_DISP_SD_CONTROL_0_HW_UPDATE_DLY_SHIFT                        _MK_SHIFT_CONST(7)
#define DC_DISP_SD_CONTROL_0_HW_UPDATE_DLY_FIELD                        (_MK_MASK_CONST(0x3) << DC_DISP_SD_CONTROL_0_HW_UPDATE_DLY_SHIFT)
#define DC_DISP_SD_CONTROL_0_HW_UPDATE_DLY_RANGE                        8:7
#define DC_DISP_SD_CONTROL_0_HW_UPDATE_DLY_WOFFSET                      0x0
#define DC_DISP_SD_CONTROL_0_HW_UPDATE_DLY_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_CONTROL_0_HW_UPDATE_DLY_DEFAULT_MASK                 _MK_MASK_CONST(0x3)
#define DC_DISP_SD_CONTROL_0_HW_UPDATE_DLY_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_CONTROL_0_HW_UPDATE_DLY_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)


// Register DC_DISP_SD_CSC_COEFF_0  // Luminance calculation coefficients used to convert the red
#define DC_DISP_SD_CSC_COEFF_0                  _MK_ADDR_CONST(0x4c3)
#define DC_DISP_SD_CSC_COEFF_0_SECURE                   0x0
#define DC_DISP_SD_CSC_COEFF_0_WORD_COUNT                       0x1
#define DC_DISP_SD_CSC_COEFF_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define DC_DISP_SD_CSC_COEFF_0_RESET_MASK                       _MK_MASK_CONST(0xf0f0f0)
#define DC_DISP_SD_CSC_COEFF_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_CSC_COEFF_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_CSC_COEFF_0_READ_MASK                        _MK_MASK_CONST(0xf0f0f0)
#define DC_DISP_SD_CSC_COEFF_0_WRITE_MASK                       _MK_MASK_CONST(0xf0f0f0)
// green and blue color components into a luminance value.
#define DC_DISP_SD_CSC_COEFF_0_R_COEFF_SHIFT                    _MK_SHIFT_CONST(4)
#define DC_DISP_SD_CSC_COEFF_0_R_COEFF_FIELD                    (_MK_MASK_CONST(0xf) << DC_DISP_SD_CSC_COEFF_0_R_COEFF_SHIFT)
#define DC_DISP_SD_CSC_COEFF_0_R_COEFF_RANGE                    7:4
#define DC_DISP_SD_CSC_COEFF_0_R_COEFF_WOFFSET                  0x0
#define DC_DISP_SD_CSC_COEFF_0_R_COEFF_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_CSC_COEFF_0_R_COEFF_DEFAULT_MASK                     _MK_MASK_CONST(0xf)
#define DC_DISP_SD_CSC_COEFF_0_R_COEFF_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_CSC_COEFF_0_R_COEFF_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// The conversion is performed according to the following equation:
#define DC_DISP_SD_CSC_COEFF_0_G_COEFF_SHIFT                    _MK_SHIFT_CONST(12)
#define DC_DISP_SD_CSC_COEFF_0_G_COEFF_FIELD                    (_MK_MASK_CONST(0xf) << DC_DISP_SD_CSC_COEFF_0_G_COEFF_SHIFT)
#define DC_DISP_SD_CSC_COEFF_0_G_COEFF_RANGE                    15:12
#define DC_DISP_SD_CSC_COEFF_0_G_COEFF_WOFFSET                  0x0
#define DC_DISP_SD_CSC_COEFF_0_G_COEFF_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_CSC_COEFF_0_G_COEFF_DEFAULT_MASK                     _MK_MASK_CONST(0xf)
#define DC_DISP_SD_CSC_COEFF_0_G_COEFF_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_CSC_COEFF_0_G_COEFF_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Luminance = (R * R_COEFF + G * G_COEFF + B * B_COEFF) >> 4
// It is suggested that the values of the coefficients be programmed
// as shown below, though user-defined color spaces are also accommodated.
// Color Space  R_COEFF G_COEFF B_COEFF
// ITU-R Bt601      5       9       2
// ITU-R Bt709      3      12       1
// The coefficients do not have to be particularly accurate, hence their
// low precision and the coefficients used are open to experimentation to
// obtain the best results.
#define DC_DISP_SD_CSC_COEFF_0_B_COEFF_SHIFT                    _MK_SHIFT_CONST(20)
#define DC_DISP_SD_CSC_COEFF_0_B_COEFF_FIELD                    (_MK_MASK_CONST(0xf) << DC_DISP_SD_CSC_COEFF_0_B_COEFF_SHIFT)
#define DC_DISP_SD_CSC_COEFF_0_B_COEFF_RANGE                    23:20
#define DC_DISP_SD_CSC_COEFF_0_B_COEFF_WOFFSET                  0x0
#define DC_DISP_SD_CSC_COEFF_0_B_COEFF_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_CSC_COEFF_0_B_COEFF_DEFAULT_MASK                     _MK_MASK_CONST(0xf)
#define DC_DISP_SD_CSC_COEFF_0_B_COEFF_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_CSC_COEFF_0_B_COEFF_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register DC_DISP_SD_LUT_0  // Enhancement value (k) Look Up Table.
#define DC_DISP_SD_LUT_0                        _MK_ADDR_CONST(0x4c4)
#define DC_DISP_SD_LUT_0_SECURE                         0x0
#define DC_DISP_SD_LUT_0_WORD_COUNT                     0x1
#define DC_DISP_SD_LUT_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_0_RESET_MASK                     _MK_MASK_CONST(0xffffff)
#define DC_DISP_SD_LUT_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_0_READ_MASK                      _MK_MASK_CONST(0xffffff)
#define DC_DISP_SD_LUT_0_WRITE_MASK                     _MK_MASK_CONST(0xffffff)
// Each LUT entry contains the value of k for each of the three color
#define DC_DISP_SD_LUT_0_R_LUT_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_SD_LUT_0_R_LUT_FIELD                    (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_0_R_LUT_SHIFT)
#define DC_DISP_SD_LUT_0_R_LUT_RANGE                    7:0
#define DC_DISP_SD_LUT_0_R_LUT_WOFFSET                  0x0
#define DC_DISP_SD_LUT_0_R_LUT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_0_R_LUT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_0_R_LUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_0_R_LUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// components. Since the value of k for the color components must be
#define DC_DISP_SD_LUT_0_G_LUT_SHIFT                    _MK_SHIFT_CONST(8)
#define DC_DISP_SD_LUT_0_G_LUT_FIELD                    (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_0_G_LUT_SHIFT)
#define DC_DISP_SD_LUT_0_G_LUT_RANGE                    15:8
#define DC_DISP_SD_LUT_0_G_LUT_WOFFSET                  0x0
#define DC_DISP_SD_LUT_0_G_LUT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_0_G_LUT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_0_G_LUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_0_G_LUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// the reciprocal of the hardware-computed value of k, and the HW value
// is guaranteed to be less than or equal to 1, the values in the LUT
// represent the fractional part of k, with an implied 1 to the left
// of the decimal place. For example, if the programmed value of R_LUT
// was 64 ( 01000000 in binary ), then the actual value of k generted
// would be 1.01000000 in binary or 1.25 in decimal.
//
// To program a default, linear response into the LUT, use the following
// code as a guide:
//
// for (i = 0; i < 9; i++) {
//   t = (4096 / (8 + i)) - 256;
//   if (t > 255) t = 255;
//   R_LUT[i] = t;
//   G_LUT[i] = t;
//   B_LUT[i] = t;
//   }
//
// For other non-linear response curves (for example, to take display gamma
// into consideration), this code will have to be modified.
#define DC_DISP_SD_LUT_0_B_LUT_SHIFT                    _MK_SHIFT_CONST(16)
#define DC_DISP_SD_LUT_0_B_LUT_FIELD                    (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_0_B_LUT_SHIFT)
#define DC_DISP_SD_LUT_0_B_LUT_RANGE                    23:16
#define DC_DISP_SD_LUT_0_B_LUT_WOFFSET                  0x0
#define DC_DISP_SD_LUT_0_B_LUT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_0_B_LUT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_0_B_LUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_0_B_LUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register DC_DISP_SD_LUT  // Enhancement value (k) Look Up Table.
#define DC_DISP_SD_LUT                  _MK_ADDR_CONST(0x4c4)
#define DC_DISP_SD_LUT_SECURE                   0x0
#define DC_DISP_SD_LUT_WORD_COUNT                       0x1
#define DC_DISP_SD_LUT_RESET_VAL                        _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_RESET_MASK                       _MK_MASK_CONST(0xffffff)
#define DC_DISP_SD_LUT_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_READ_MASK                        _MK_MASK_CONST(0xffffff)
#define DC_DISP_SD_LUT_WRITE_MASK                       _MK_MASK_CONST(0xffffff)
// Each LUT entry contains the value of k for each of the three color
#define DC_DISP_SD_LUT_R_LUT_SHIFT                      _MK_SHIFT_CONST(0)
#define DC_DISP_SD_LUT_R_LUT_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_R_LUT_SHIFT)
#define DC_DISP_SD_LUT_R_LUT_RANGE                      7:0
#define DC_DISP_SD_LUT_R_LUT_WOFFSET                    0x0
#define DC_DISP_SD_LUT_R_LUT_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_R_LUT_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_R_LUT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_R_LUT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// components. Since the value of k for the color components must be
#define DC_DISP_SD_LUT_G_LUT_SHIFT                      _MK_SHIFT_CONST(8)
#define DC_DISP_SD_LUT_G_LUT_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_G_LUT_SHIFT)
#define DC_DISP_SD_LUT_G_LUT_RANGE                      15:8
#define DC_DISP_SD_LUT_G_LUT_WOFFSET                    0x0
#define DC_DISP_SD_LUT_G_LUT_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_G_LUT_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_G_LUT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_G_LUT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// the reciprocal of the hardware-computed value of k, and the HW value
// is guaranteed to be less than or equal to 1, the values in the LUT
// represent the fractional part of k, with an implied 1 to the left
// of the decimal place. For example, if the programmed value of R_LUT
// was 64 ( 01000000 in binary ), then the actual value of k generted
// would be 1.01000000 in binary or 1.25 in decimal.
//
// To program a default, linear response into the LUT, use the following
// code as a guide:
//
// for (i = 0; i < 9; i++) {
//   t = (4096 / (8 + i)) - 256;
//   if (t > 255) t = 255;
//   R_LUT[i] = t;
//   G_LUT[i] = t;
//   B_LUT[i] = t;
//   }
//
// For other non-linear response curves (for example, to take display gamma
// into consideration), this code will have to be modified.
#define DC_DISP_SD_LUT_B_LUT_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_SD_LUT_B_LUT_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_B_LUT_SHIFT)
#define DC_DISP_SD_LUT_B_LUT_RANGE                      23:16
#define DC_DISP_SD_LUT_B_LUT_WOFFSET                    0x0
#define DC_DISP_SD_LUT_B_LUT_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_B_LUT_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_B_LUT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_B_LUT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register DC_DISP_SD_LUT_1  // Enhancement value (k) Look Up Table.
#define DC_DISP_SD_LUT_1                        _MK_ADDR_CONST(0x4c5)
#define DC_DISP_SD_LUT_1_SECURE                         0x0
#define DC_DISP_SD_LUT_1_WORD_COUNT                     0x1
#define DC_DISP_SD_LUT_1_RESET_VAL                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_1_RESET_MASK                     _MK_MASK_CONST(0xffffff)
#define DC_DISP_SD_LUT_1_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_1_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_1_READ_MASK                      _MK_MASK_CONST(0xffffff)
#define DC_DISP_SD_LUT_1_WRITE_MASK                     _MK_MASK_CONST(0xffffff)
// Each LUT entry contains the value of k for each of the three color
#define DC_DISP_SD_LUT_1_R_LUT_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_SD_LUT_1_R_LUT_FIELD                    (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_1_R_LUT_SHIFT)
#define DC_DISP_SD_LUT_1_R_LUT_RANGE                    7:0
#define DC_DISP_SD_LUT_1_R_LUT_WOFFSET                  0x0
#define DC_DISP_SD_LUT_1_R_LUT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_1_R_LUT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_1_R_LUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_1_R_LUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// components. Since the value of k for the color components must be
#define DC_DISP_SD_LUT_1_G_LUT_SHIFT                    _MK_SHIFT_CONST(8)
#define DC_DISP_SD_LUT_1_G_LUT_FIELD                    (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_1_G_LUT_SHIFT)
#define DC_DISP_SD_LUT_1_G_LUT_RANGE                    15:8
#define DC_DISP_SD_LUT_1_G_LUT_WOFFSET                  0x0
#define DC_DISP_SD_LUT_1_G_LUT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_1_G_LUT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_1_G_LUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_1_G_LUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// the reciprocal of the hardware-computed value of k, and the HW value
// is guaranteed to be less than or equal to 1, the values in the LUT
// represent the fractional part of k, with an implied 1 to the left
// of the decimal place. For example, if the programmed value of R_LUT
// was 64 ( 01000000 in binary ), then the actual value of k generted
// would be 1.01000000 in binary or 1.25 in decimal.
//
// To program a default, linear response into the LUT, use the following
// code as a guide:
//
// for (i = 0; i < 9; i++) {
//   t = (4096 / (8 + i)) - 256;
//   if (t > 255) t = 255;
//   R_LUT[i] = t;
//   G_LUT[i] = t;
//   B_LUT[i] = t;
//   }
//
// For other non-linear response curves (for example, to take display gamma
// into consideration), this code will have to be modified.
#define DC_DISP_SD_LUT_1_B_LUT_SHIFT                    _MK_SHIFT_CONST(16)
#define DC_DISP_SD_LUT_1_B_LUT_FIELD                    (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_1_B_LUT_SHIFT)
#define DC_DISP_SD_LUT_1_B_LUT_RANGE                    23:16
#define DC_DISP_SD_LUT_1_B_LUT_WOFFSET                  0x0
#define DC_DISP_SD_LUT_1_B_LUT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_1_B_LUT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_1_B_LUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_1_B_LUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register DC_DISP_SD_LUT_2  // Enhancement value (k) Look Up Table.
#define DC_DISP_SD_LUT_2                        _MK_ADDR_CONST(0x4c6)
#define DC_DISP_SD_LUT_2_SECURE                         0x0
#define DC_DISP_SD_LUT_2_WORD_COUNT                     0x1
#define DC_DISP_SD_LUT_2_RESET_VAL                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_2_RESET_MASK                     _MK_MASK_CONST(0xffffff)
#define DC_DISP_SD_LUT_2_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_2_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_2_READ_MASK                      _MK_MASK_CONST(0xffffff)
#define DC_DISP_SD_LUT_2_WRITE_MASK                     _MK_MASK_CONST(0xffffff)
// Each LUT entry contains the value of k for each of the three color
#define DC_DISP_SD_LUT_2_R_LUT_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_SD_LUT_2_R_LUT_FIELD                    (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_2_R_LUT_SHIFT)
#define DC_DISP_SD_LUT_2_R_LUT_RANGE                    7:0
#define DC_DISP_SD_LUT_2_R_LUT_WOFFSET                  0x0
#define DC_DISP_SD_LUT_2_R_LUT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_2_R_LUT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_2_R_LUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_2_R_LUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// components. Since the value of k for the color components must be
#define DC_DISP_SD_LUT_2_G_LUT_SHIFT                    _MK_SHIFT_CONST(8)
#define DC_DISP_SD_LUT_2_G_LUT_FIELD                    (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_2_G_LUT_SHIFT)
#define DC_DISP_SD_LUT_2_G_LUT_RANGE                    15:8
#define DC_DISP_SD_LUT_2_G_LUT_WOFFSET                  0x0
#define DC_DISP_SD_LUT_2_G_LUT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_2_G_LUT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_2_G_LUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_2_G_LUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// the reciprocal of the hardware-computed value of k, and the HW value
// is guaranteed to be less than or equal to 1, the values in the LUT
// represent the fractional part of k, with an implied 1 to the left
// of the decimal place. For example, if the programmed value of R_LUT
// was 64 ( 01000000 in binary ), then the actual value of k generted
// would be 1.01000000 in binary or 1.25 in decimal.
//
// To program a default, linear response into the LUT, use the following
// code as a guide:
//
// for (i = 0; i < 9; i++) {
//   t = (4096 / (8 + i)) - 256;
//   if (t > 255) t = 255;
//   R_LUT[i] = t;
//   G_LUT[i] = t;
//   B_LUT[i] = t;
//   }
//
// For other non-linear response curves (for example, to take display gamma
// into consideration), this code will have to be modified.
#define DC_DISP_SD_LUT_2_B_LUT_SHIFT                    _MK_SHIFT_CONST(16)
#define DC_DISP_SD_LUT_2_B_LUT_FIELD                    (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_2_B_LUT_SHIFT)
#define DC_DISP_SD_LUT_2_B_LUT_RANGE                    23:16
#define DC_DISP_SD_LUT_2_B_LUT_WOFFSET                  0x0
#define DC_DISP_SD_LUT_2_B_LUT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_2_B_LUT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_2_B_LUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_2_B_LUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register DC_DISP_SD_LUT_3  // Enhancement value (k) Look Up Table.
#define DC_DISP_SD_LUT_3                        _MK_ADDR_CONST(0x4c7)
#define DC_DISP_SD_LUT_3_SECURE                         0x0
#define DC_DISP_SD_LUT_3_WORD_COUNT                     0x1
#define DC_DISP_SD_LUT_3_RESET_VAL                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_3_RESET_MASK                     _MK_MASK_CONST(0xffffff)
#define DC_DISP_SD_LUT_3_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_3_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_3_READ_MASK                      _MK_MASK_CONST(0xffffff)
#define DC_DISP_SD_LUT_3_WRITE_MASK                     _MK_MASK_CONST(0xffffff)
// Each LUT entry contains the value of k for each of the three color
#define DC_DISP_SD_LUT_3_R_LUT_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_SD_LUT_3_R_LUT_FIELD                    (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_3_R_LUT_SHIFT)
#define DC_DISP_SD_LUT_3_R_LUT_RANGE                    7:0
#define DC_DISP_SD_LUT_3_R_LUT_WOFFSET                  0x0
#define DC_DISP_SD_LUT_3_R_LUT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_3_R_LUT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_3_R_LUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_3_R_LUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// components. Since the value of k for the color components must be
#define DC_DISP_SD_LUT_3_G_LUT_SHIFT                    _MK_SHIFT_CONST(8)
#define DC_DISP_SD_LUT_3_G_LUT_FIELD                    (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_3_G_LUT_SHIFT)
#define DC_DISP_SD_LUT_3_G_LUT_RANGE                    15:8
#define DC_DISP_SD_LUT_3_G_LUT_WOFFSET                  0x0
#define DC_DISP_SD_LUT_3_G_LUT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_3_G_LUT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_3_G_LUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_3_G_LUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// the reciprocal of the hardware-computed value of k, and the HW value
// is guaranteed to be less than or equal to 1, the values in the LUT
// represent the fractional part of k, with an implied 1 to the left
// of the decimal place. For example, if the programmed value of R_LUT
// was 64 ( 01000000 in binary ), then the actual value of k generted
// would be 1.01000000 in binary or 1.25 in decimal.
//
// To program a default, linear response into the LUT, use the following
// code as a guide:
//
// for (i = 0; i < 9; i++) {
//   t = (4096 / (8 + i)) - 256;
//   if (t > 255) t = 255;
//   R_LUT[i] = t;
//   G_LUT[i] = t;
//   B_LUT[i] = t;
//   }
//
// For other non-linear response curves (for example, to take display gamma
// into consideration), this code will have to be modified.
#define DC_DISP_SD_LUT_3_B_LUT_SHIFT                    _MK_SHIFT_CONST(16)
#define DC_DISP_SD_LUT_3_B_LUT_FIELD                    (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_3_B_LUT_SHIFT)
#define DC_DISP_SD_LUT_3_B_LUT_RANGE                    23:16
#define DC_DISP_SD_LUT_3_B_LUT_WOFFSET                  0x0
#define DC_DISP_SD_LUT_3_B_LUT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_3_B_LUT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_3_B_LUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_3_B_LUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register DC_DISP_SD_LUT_4  // Enhancement value (k) Look Up Table.
#define DC_DISP_SD_LUT_4                        _MK_ADDR_CONST(0x4c8)
#define DC_DISP_SD_LUT_4_SECURE                         0x0
#define DC_DISP_SD_LUT_4_WORD_COUNT                     0x1
#define DC_DISP_SD_LUT_4_RESET_VAL                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_4_RESET_MASK                     _MK_MASK_CONST(0xffffff)
#define DC_DISP_SD_LUT_4_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_4_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_4_READ_MASK                      _MK_MASK_CONST(0xffffff)
#define DC_DISP_SD_LUT_4_WRITE_MASK                     _MK_MASK_CONST(0xffffff)
// Each LUT entry contains the value of k for each of the three color
#define DC_DISP_SD_LUT_4_R_LUT_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_SD_LUT_4_R_LUT_FIELD                    (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_4_R_LUT_SHIFT)
#define DC_DISP_SD_LUT_4_R_LUT_RANGE                    7:0
#define DC_DISP_SD_LUT_4_R_LUT_WOFFSET                  0x0
#define DC_DISP_SD_LUT_4_R_LUT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_4_R_LUT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_4_R_LUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_4_R_LUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// components. Since the value of k for the color components must be
#define DC_DISP_SD_LUT_4_G_LUT_SHIFT                    _MK_SHIFT_CONST(8)
#define DC_DISP_SD_LUT_4_G_LUT_FIELD                    (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_4_G_LUT_SHIFT)
#define DC_DISP_SD_LUT_4_G_LUT_RANGE                    15:8
#define DC_DISP_SD_LUT_4_G_LUT_WOFFSET                  0x0
#define DC_DISP_SD_LUT_4_G_LUT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_4_G_LUT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_4_G_LUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_4_G_LUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// the reciprocal of the hardware-computed value of k, and the HW value
// is guaranteed to be less than or equal to 1, the values in the LUT
// represent the fractional part of k, with an implied 1 to the left
// of the decimal place. For example, if the programmed value of R_LUT
// was 64 ( 01000000 in binary ), then the actual value of k generted
// would be 1.01000000 in binary or 1.25 in decimal.
//
// To program a default, linear response into the LUT, use the following
// code as a guide:
//
// for (i = 0; i < 9; i++) {
//   t = (4096 / (8 + i)) - 256;
//   if (t > 255) t = 255;
//   R_LUT[i] = t;
//   G_LUT[i] = t;
//   B_LUT[i] = t;
//   }
//
// For other non-linear response curves (for example, to take display gamma
// into consideration), this code will have to be modified.
#define DC_DISP_SD_LUT_4_B_LUT_SHIFT                    _MK_SHIFT_CONST(16)
#define DC_DISP_SD_LUT_4_B_LUT_FIELD                    (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_4_B_LUT_SHIFT)
#define DC_DISP_SD_LUT_4_B_LUT_RANGE                    23:16
#define DC_DISP_SD_LUT_4_B_LUT_WOFFSET                  0x0
#define DC_DISP_SD_LUT_4_B_LUT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_4_B_LUT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_4_B_LUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_4_B_LUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register DC_DISP_SD_LUT_5  // Enhancement value (k) Look Up Table.
#define DC_DISP_SD_LUT_5                        _MK_ADDR_CONST(0x4c9)
#define DC_DISP_SD_LUT_5_SECURE                         0x0
#define DC_DISP_SD_LUT_5_WORD_COUNT                     0x1
#define DC_DISP_SD_LUT_5_RESET_VAL                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_5_RESET_MASK                     _MK_MASK_CONST(0xffffff)
#define DC_DISP_SD_LUT_5_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_5_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_5_READ_MASK                      _MK_MASK_CONST(0xffffff)
#define DC_DISP_SD_LUT_5_WRITE_MASK                     _MK_MASK_CONST(0xffffff)
// Each LUT entry contains the value of k for each of the three color
#define DC_DISP_SD_LUT_5_R_LUT_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_SD_LUT_5_R_LUT_FIELD                    (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_5_R_LUT_SHIFT)
#define DC_DISP_SD_LUT_5_R_LUT_RANGE                    7:0
#define DC_DISP_SD_LUT_5_R_LUT_WOFFSET                  0x0
#define DC_DISP_SD_LUT_5_R_LUT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_5_R_LUT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_5_R_LUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_5_R_LUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// components. Since the value of k for the color components must be
#define DC_DISP_SD_LUT_5_G_LUT_SHIFT                    _MK_SHIFT_CONST(8)
#define DC_DISP_SD_LUT_5_G_LUT_FIELD                    (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_5_G_LUT_SHIFT)
#define DC_DISP_SD_LUT_5_G_LUT_RANGE                    15:8
#define DC_DISP_SD_LUT_5_G_LUT_WOFFSET                  0x0
#define DC_DISP_SD_LUT_5_G_LUT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_5_G_LUT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_5_G_LUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_5_G_LUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// the reciprocal of the hardware-computed value of k, and the HW value
// is guaranteed to be less than or equal to 1, the values in the LUT
// represent the fractional part of k, with an implied 1 to the left
// of the decimal place. For example, if the programmed value of R_LUT
// was 64 ( 01000000 in binary ), then the actual value of k generted
// would be 1.01000000 in binary or 1.25 in decimal.
//
// To program a default, linear response into the LUT, use the following
// code as a guide:
//
// for (i = 0; i < 9; i++) {
//   t = (4096 / (8 + i)) - 256;
//   if (t > 255) t = 255;
//   R_LUT[i] = t;
//   G_LUT[i] = t;
//   B_LUT[i] = t;
//   }
//
// For other non-linear response curves (for example, to take display gamma
// into consideration), this code will have to be modified.
#define DC_DISP_SD_LUT_5_B_LUT_SHIFT                    _MK_SHIFT_CONST(16)
#define DC_DISP_SD_LUT_5_B_LUT_FIELD                    (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_5_B_LUT_SHIFT)
#define DC_DISP_SD_LUT_5_B_LUT_RANGE                    23:16
#define DC_DISP_SD_LUT_5_B_LUT_WOFFSET                  0x0
#define DC_DISP_SD_LUT_5_B_LUT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_5_B_LUT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_5_B_LUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_5_B_LUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register DC_DISP_SD_LUT_6  // Enhancement value (k) Look Up Table.
#define DC_DISP_SD_LUT_6                        _MK_ADDR_CONST(0x4ca)
#define DC_DISP_SD_LUT_6_SECURE                         0x0
#define DC_DISP_SD_LUT_6_WORD_COUNT                     0x1
#define DC_DISP_SD_LUT_6_RESET_VAL                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_6_RESET_MASK                     _MK_MASK_CONST(0xffffff)
#define DC_DISP_SD_LUT_6_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_6_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_6_READ_MASK                      _MK_MASK_CONST(0xffffff)
#define DC_DISP_SD_LUT_6_WRITE_MASK                     _MK_MASK_CONST(0xffffff)
// Each LUT entry contains the value of k for each of the three color
#define DC_DISP_SD_LUT_6_R_LUT_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_SD_LUT_6_R_LUT_FIELD                    (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_6_R_LUT_SHIFT)
#define DC_DISP_SD_LUT_6_R_LUT_RANGE                    7:0
#define DC_DISP_SD_LUT_6_R_LUT_WOFFSET                  0x0
#define DC_DISP_SD_LUT_6_R_LUT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_6_R_LUT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_6_R_LUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_6_R_LUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// components. Since the value of k for the color components must be
#define DC_DISP_SD_LUT_6_G_LUT_SHIFT                    _MK_SHIFT_CONST(8)
#define DC_DISP_SD_LUT_6_G_LUT_FIELD                    (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_6_G_LUT_SHIFT)
#define DC_DISP_SD_LUT_6_G_LUT_RANGE                    15:8
#define DC_DISP_SD_LUT_6_G_LUT_WOFFSET                  0x0
#define DC_DISP_SD_LUT_6_G_LUT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_6_G_LUT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_6_G_LUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_6_G_LUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// the reciprocal of the hardware-computed value of k, and the HW value
// is guaranteed to be less than or equal to 1, the values in the LUT
// represent the fractional part of k, with an implied 1 to the left
// of the decimal place. For example, if the programmed value of R_LUT
// was 64 ( 01000000 in binary ), then the actual value of k generted
// would be 1.01000000 in binary or 1.25 in decimal.
//
// To program a default, linear response into the LUT, use the following
// code as a guide:
//
// for (i = 0; i < 9; i++) {
//   t = (4096 / (8 + i)) - 256;
//   if (t > 255) t = 255;
//   R_LUT[i] = t;
//   G_LUT[i] = t;
//   B_LUT[i] = t;
//   }
//
// For other non-linear response curves (for example, to take display gamma
// into consideration), this code will have to be modified.
#define DC_DISP_SD_LUT_6_B_LUT_SHIFT                    _MK_SHIFT_CONST(16)
#define DC_DISP_SD_LUT_6_B_LUT_FIELD                    (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_6_B_LUT_SHIFT)
#define DC_DISP_SD_LUT_6_B_LUT_RANGE                    23:16
#define DC_DISP_SD_LUT_6_B_LUT_WOFFSET                  0x0
#define DC_DISP_SD_LUT_6_B_LUT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_6_B_LUT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_6_B_LUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_6_B_LUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register DC_DISP_SD_LUT_7  // Enhancement value (k) Look Up Table.
#define DC_DISP_SD_LUT_7                        _MK_ADDR_CONST(0x4cb)
#define DC_DISP_SD_LUT_7_SECURE                         0x0
#define DC_DISP_SD_LUT_7_WORD_COUNT                     0x1
#define DC_DISP_SD_LUT_7_RESET_VAL                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_7_RESET_MASK                     _MK_MASK_CONST(0xffffff)
#define DC_DISP_SD_LUT_7_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_7_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_7_READ_MASK                      _MK_MASK_CONST(0xffffff)
#define DC_DISP_SD_LUT_7_WRITE_MASK                     _MK_MASK_CONST(0xffffff)
// Each LUT entry contains the value of k for each of the three color
#define DC_DISP_SD_LUT_7_R_LUT_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_SD_LUT_7_R_LUT_FIELD                    (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_7_R_LUT_SHIFT)
#define DC_DISP_SD_LUT_7_R_LUT_RANGE                    7:0
#define DC_DISP_SD_LUT_7_R_LUT_WOFFSET                  0x0
#define DC_DISP_SD_LUT_7_R_LUT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_7_R_LUT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_7_R_LUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_7_R_LUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// components. Since the value of k for the color components must be
#define DC_DISP_SD_LUT_7_G_LUT_SHIFT                    _MK_SHIFT_CONST(8)
#define DC_DISP_SD_LUT_7_G_LUT_FIELD                    (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_7_G_LUT_SHIFT)
#define DC_DISP_SD_LUT_7_G_LUT_RANGE                    15:8
#define DC_DISP_SD_LUT_7_G_LUT_WOFFSET                  0x0
#define DC_DISP_SD_LUT_7_G_LUT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_7_G_LUT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_7_G_LUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_7_G_LUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// the reciprocal of the hardware-computed value of k, and the HW value
// is guaranteed to be less than or equal to 1, the values in the LUT
// represent the fractional part of k, with an implied 1 to the left
// of the decimal place. For example, if the programmed value of R_LUT
// was 64 ( 01000000 in binary ), then the actual value of k generted
// would be 1.01000000 in binary or 1.25 in decimal.
//
// To program a default, linear response into the LUT, use the following
// code as a guide:
//
// for (i = 0; i < 9; i++) {
//   t = (4096 / (8 + i)) - 256;
//   if (t > 255) t = 255;
//   R_LUT[i] = t;
//   G_LUT[i] = t;
//   B_LUT[i] = t;
//   }
//
// For other non-linear response curves (for example, to take display gamma
// into consideration), this code will have to be modified.
#define DC_DISP_SD_LUT_7_B_LUT_SHIFT                    _MK_SHIFT_CONST(16)
#define DC_DISP_SD_LUT_7_B_LUT_FIELD                    (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_7_B_LUT_SHIFT)
#define DC_DISP_SD_LUT_7_B_LUT_RANGE                    23:16
#define DC_DISP_SD_LUT_7_B_LUT_WOFFSET                  0x0
#define DC_DISP_SD_LUT_7_B_LUT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_7_B_LUT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_7_B_LUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_7_B_LUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register DC_DISP_SD_LUT_8  // Enhancement value (k) Look Up Table.
#define DC_DISP_SD_LUT_8                        _MK_ADDR_CONST(0x4cc)
#define DC_DISP_SD_LUT_8_SECURE                         0x0
#define DC_DISP_SD_LUT_8_WORD_COUNT                     0x1
#define DC_DISP_SD_LUT_8_RESET_VAL                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_8_RESET_MASK                     _MK_MASK_CONST(0xffffff)
#define DC_DISP_SD_LUT_8_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_8_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_8_READ_MASK                      _MK_MASK_CONST(0xffffff)
#define DC_DISP_SD_LUT_8_WRITE_MASK                     _MK_MASK_CONST(0xffffff)
// Each LUT entry contains the value of k for each of the three color
#define DC_DISP_SD_LUT_8_R_LUT_SHIFT                    _MK_SHIFT_CONST(0)
#define DC_DISP_SD_LUT_8_R_LUT_FIELD                    (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_8_R_LUT_SHIFT)
#define DC_DISP_SD_LUT_8_R_LUT_RANGE                    7:0
#define DC_DISP_SD_LUT_8_R_LUT_WOFFSET                  0x0
#define DC_DISP_SD_LUT_8_R_LUT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_8_R_LUT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_8_R_LUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_8_R_LUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// components. Since the value of k for the color components must be
#define DC_DISP_SD_LUT_8_G_LUT_SHIFT                    _MK_SHIFT_CONST(8)
#define DC_DISP_SD_LUT_8_G_LUT_FIELD                    (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_8_G_LUT_SHIFT)
#define DC_DISP_SD_LUT_8_G_LUT_RANGE                    15:8
#define DC_DISP_SD_LUT_8_G_LUT_WOFFSET                  0x0
#define DC_DISP_SD_LUT_8_G_LUT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_8_G_LUT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_8_G_LUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_8_G_LUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// the reciprocal of the hardware-computed value of k, and the HW value
// is guaranteed to be less than or equal to 1, the values in the LUT
// represent the fractional part of k, with an implied 1 to the left
// of the decimal place. For example, if the programmed value of R_LUT
// was 64 ( 01000000 in binary ), then the actual value of k generted
// would be 1.01000000 in binary or 1.25 in decimal.
//
// To program a default, linear response into the LUT, use the following
// code as a guide:
//
// for (i = 0; i < 9; i++) {
//   t = (4096 / (8 + i)) - 256;
//   if (t > 255) t = 255;
//   R_LUT[i] = t;
//   G_LUT[i] = t;
//   B_LUT[i] = t;
//   }
//
// For other non-linear response curves (for example, to take display gamma
// into consideration), this code will have to be modified.
#define DC_DISP_SD_LUT_8_B_LUT_SHIFT                    _MK_SHIFT_CONST(16)
#define DC_DISP_SD_LUT_8_B_LUT_FIELD                    (_MK_MASK_CONST(0xff) << DC_DISP_SD_LUT_8_B_LUT_SHIFT)
#define DC_DISP_SD_LUT_8_B_LUT_RANGE                    23:16
#define DC_DISP_SD_LUT_8_B_LUT_WOFFSET                  0x0
#define DC_DISP_SD_LUT_8_B_LUT_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_8_B_LUT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define DC_DISP_SD_LUT_8_B_LUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_LUT_8_B_LUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register DC_DISP_SD_FLICKER_CONTROL_0  // Flicker reduction control register
// The flicker control prevents rapid and frequent changes in the
// enhancement value.
#define DC_DISP_SD_FLICKER_CONTROL_0                    _MK_ADDR_CONST(0x4cd)
#define DC_DISP_SD_FLICKER_CONTROL_0_SECURE                     0x0
#define DC_DISP_SD_FLICKER_CONTROL_0_WORD_COUNT                         0x1
#define DC_DISP_SD_FLICKER_CONTROL_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_FLICKER_CONTROL_0_RESET_MASK                         _MK_MASK_CONST(0xffff)
#define DC_DISP_SD_FLICKER_CONTROL_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define DC_DISP_SD_FLICKER_CONTROL_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_FLICKER_CONTROL_0_READ_MASK                  _MK_MASK_CONST(0xffff)
#define DC_DISP_SD_FLICKER_CONTROL_0_WRITE_MASK                         _MK_MASK_CONST(0xffff)
// Length of time - in frames - that the enhancement value must deviate
// from the current value by more than THRESHOLD, before the enhancement
// value changes.
//
#define DC_DISP_SD_FLICKER_CONTROL_0_TIME_LIMIT_SHIFT                   _MK_SHIFT_CONST(0)
#define DC_DISP_SD_FLICKER_CONTROL_0_TIME_LIMIT_FIELD                   (_MK_MASK_CONST(0xff) << DC_DISP_SD_FLICKER_CONTROL_0_TIME_LIMIT_SHIFT)
#define DC_DISP_SD_FLICKER_CONTROL_0_TIME_LIMIT_RANGE                   7:0
#define DC_DISP_SD_FLICKER_CONTROL_0_TIME_LIMIT_WOFFSET                 0x0
#define DC_DISP_SD_FLICKER_CONTROL_0_TIME_LIMIT_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_FLICKER_CONTROL_0_TIME_LIMIT_DEFAULT_MASK                    _MK_MASK_CONST(0xff)
#define DC_DISP_SD_FLICKER_CONTROL_0_TIME_LIMIT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_FLICKER_CONTROL_0_TIME_LIMIT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// The amount by which the currently calcualted enhancement value must
// deviate from the currently active enhancement value for it to increment
// the TIME_LIMIT counter.
#define DC_DISP_SD_FLICKER_CONTROL_0_THRESHOLD_SHIFT                    _MK_SHIFT_CONST(8)
#define DC_DISP_SD_FLICKER_CONTROL_0_THRESHOLD_FIELD                    (_MK_MASK_CONST(0xff) << DC_DISP_SD_FLICKER_CONTROL_0_THRESHOLD_SHIFT)
#define DC_DISP_SD_FLICKER_CONTROL_0_THRESHOLD_RANGE                    15:8
#define DC_DISP_SD_FLICKER_CONTROL_0_THRESHOLD_WOFFSET                  0x0
#define DC_DISP_SD_FLICKER_CONTROL_0_THRESHOLD_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_FLICKER_CONTROL_0_THRESHOLD_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define DC_DISP_SD_FLICKER_CONTROL_0_THRESHOLD_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_FLICKER_CONTROL_0_THRESHOLD_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register DC_DISP_SD_PIXEL_COUNT_0  // Status / debug regsiter showing the total number of active pixels
#define DC_DISP_SD_PIXEL_COUNT_0                        _MK_ADDR_CONST(0x4ce)
#define DC_DISP_SD_PIXEL_COUNT_0_SECURE                         0x0
#define DC_DISP_SD_PIXEL_COUNT_0_WORD_COUNT                     0x1
#define DC_DISP_SD_PIXEL_COUNT_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_PIXEL_COUNT_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_SD_PIXEL_COUNT_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_SD_PIXEL_COUNT_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_SD_PIXEL_COUNT_0_READ_MASK                      _MK_MASK_CONST(0xffff)
#define DC_DISP_SD_PIXEL_COUNT_0_WRITE_MASK                     _MK_MASK_CONST(0x0)
// in the preceeding output frame. Expressed as a quantity of 256 pixels.
// In other words, a 640 x 480 image has 307200 pixels. The value in this
// register would be 307200 / 256 = 1200
#define DC_DISP_SD_PIXEL_COUNT_0_NUM_PIXELS_SHIFT                       _MK_SHIFT_CONST(0)
#define DC_DISP_SD_PIXEL_COUNT_0_NUM_PIXELS_FIELD                       (_MK_MASK_CONST(0xffff) << DC_DISP_SD_PIXEL_COUNT_0_NUM_PIXELS_SHIFT)
#define DC_DISP_SD_PIXEL_COUNT_0_NUM_PIXELS_RANGE                       15:0
#define DC_DISP_SD_PIXEL_COUNT_0_NUM_PIXELS_WOFFSET                     0x0
#define DC_DISP_SD_PIXEL_COUNT_0_NUM_PIXELS_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_SD_PIXEL_COUNT_0_NUM_PIXELS_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_SD_PIXEL_COUNT_0_NUM_PIXELS_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_PIXEL_COUNT_0_NUM_PIXELS_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register DC_DISP_SD_HISTOGRAM_0  // Status / debug registers showing the gathered histogram data.
#define DC_DISP_SD_HISTOGRAM_0                  _MK_ADDR_CONST(0x4cf)
#define DC_DISP_SD_HISTOGRAM_0_SECURE                   0x0
#define DC_DISP_SD_HISTOGRAM_0_WORD_COUNT                       0x1
#define DC_DISP_SD_HISTOGRAM_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define DC_DISP_SD_HISTOGRAM_0_WRITE_MASK                       _MK_MASK_CONST(0x0)
// Each register contains 4 histogram bins, for a total of 8 x 4 = 32 bins.
#define DC_DISP_SD_HISTOGRAM_0_BIN_0_SHIFT                      _MK_SHIFT_CONST(0)
#define DC_DISP_SD_HISTOGRAM_0_BIN_0_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_0_BIN_0_SHIFT)
#define DC_DISP_SD_HISTOGRAM_0_BIN_0_RANGE                      7:0
#define DC_DISP_SD_HISTOGRAM_0_BIN_0_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_0_BIN_0_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_0_BIN_0_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_0_BIN_0_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_0_BIN_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Each bin has been approximtely scaled to the number of pixels in the image
#define DC_DISP_SD_HISTOGRAM_0_BIN_1_SHIFT                      _MK_SHIFT_CONST(8)
#define DC_DISP_SD_HISTOGRAM_0_BIN_1_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_0_BIN_1_SHIFT)
#define DC_DISP_SD_HISTOGRAM_0_BIN_1_RANGE                      15:8
#define DC_DISP_SD_HISTOGRAM_0_BIN_1_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_0_BIN_1_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_0_BIN_1_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_0_BIN_1_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_0_BIN_1_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// so that a single quantisation step in a bin represents a fraction of
#define DC_DISP_SD_HISTOGRAM_0_BIN_2_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_SD_HISTOGRAM_0_BIN_2_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_0_BIN_2_SHIFT)
#define DC_DISP_SD_HISTOGRAM_0_BIN_2_RANGE                      23:16
#define DC_DISP_SD_HISTOGRAM_0_BIN_2_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_0_BIN_2_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_0_BIN_2_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_0_BIN_2_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_0_BIN_2_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// between 1/256 and 1/128 of the total number of pixels in the image.
#define DC_DISP_SD_HISTOGRAM_0_BIN_3_SHIFT                      _MK_SHIFT_CONST(24)
#define DC_DISP_SD_HISTOGRAM_0_BIN_3_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_0_BIN_3_SHIFT)
#define DC_DISP_SD_HISTOGRAM_0_BIN_3_RANGE                      31:24
#define DC_DISP_SD_HISTOGRAM_0_BIN_3_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_0_BIN_3_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_0_BIN_3_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_0_BIN_3_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_0_BIN_3_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register DC_DISP_SD_HISTOGRAM  // Status / debug registers showing the gathered histogram data.
#define DC_DISP_SD_HISTOGRAM                    _MK_ADDR_CONST(0x4cf)
#define DC_DISP_SD_HISTOGRAM_SECURE                     0x0
#define DC_DISP_SD_HISTOGRAM_WORD_COUNT                         0x1
#define DC_DISP_SD_HISTOGRAM_RESET_VAL                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_RESET_MASK                         _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define DC_DISP_SD_HISTOGRAM_WRITE_MASK                         _MK_MASK_CONST(0x0)
// Each register contains 4 histogram bins, for a total of 8 x 4 = 32 bins.
#define DC_DISP_SD_HISTOGRAM_BIN_0_SHIFT                        _MK_SHIFT_CONST(0)
#define DC_DISP_SD_HISTOGRAM_BIN_0_FIELD                        (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_BIN_0_SHIFT)
#define DC_DISP_SD_HISTOGRAM_BIN_0_RANGE                        7:0
#define DC_DISP_SD_HISTOGRAM_BIN_0_WOFFSET                      0x0
#define DC_DISP_SD_HISTOGRAM_BIN_0_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_BIN_0_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_BIN_0_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_BIN_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Each bin has been approximtely scaled to the number of pixels in the image
#define DC_DISP_SD_HISTOGRAM_BIN_1_SHIFT                        _MK_SHIFT_CONST(8)
#define DC_DISP_SD_HISTOGRAM_BIN_1_FIELD                        (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_BIN_1_SHIFT)
#define DC_DISP_SD_HISTOGRAM_BIN_1_RANGE                        15:8
#define DC_DISP_SD_HISTOGRAM_BIN_1_WOFFSET                      0x0
#define DC_DISP_SD_HISTOGRAM_BIN_1_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_BIN_1_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_BIN_1_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_BIN_1_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// so that a single quantisation step in a bin represents a fraction of
#define DC_DISP_SD_HISTOGRAM_BIN_2_SHIFT                        _MK_SHIFT_CONST(16)
#define DC_DISP_SD_HISTOGRAM_BIN_2_FIELD                        (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_BIN_2_SHIFT)
#define DC_DISP_SD_HISTOGRAM_BIN_2_RANGE                        23:16
#define DC_DISP_SD_HISTOGRAM_BIN_2_WOFFSET                      0x0
#define DC_DISP_SD_HISTOGRAM_BIN_2_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_BIN_2_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_BIN_2_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_BIN_2_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// between 1/256 and 1/128 of the total number of pixels in the image.
#define DC_DISP_SD_HISTOGRAM_BIN_3_SHIFT                        _MK_SHIFT_CONST(24)
#define DC_DISP_SD_HISTOGRAM_BIN_3_FIELD                        (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_BIN_3_SHIFT)
#define DC_DISP_SD_HISTOGRAM_BIN_3_RANGE                        31:24
#define DC_DISP_SD_HISTOGRAM_BIN_3_WOFFSET                      0x0
#define DC_DISP_SD_HISTOGRAM_BIN_3_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_BIN_3_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_BIN_3_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_BIN_3_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)


// Register DC_DISP_SD_HISTOGRAM_1  // Status / debug registers showing the gathered histogram data.
#define DC_DISP_SD_HISTOGRAM_1                  _MK_ADDR_CONST(0x4d0)
#define DC_DISP_SD_HISTOGRAM_1_SECURE                   0x0
#define DC_DISP_SD_HISTOGRAM_1_WORD_COUNT                       0x1
#define DC_DISP_SD_HISTOGRAM_1_RESET_VAL                        _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_1_RESET_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_1_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_1_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_1_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define DC_DISP_SD_HISTOGRAM_1_WRITE_MASK                       _MK_MASK_CONST(0x0)
// Each register contains 4 histogram bins, for a total of 8 x 4 = 32 bins.
#define DC_DISP_SD_HISTOGRAM_1_BIN_0_SHIFT                      _MK_SHIFT_CONST(0)
#define DC_DISP_SD_HISTOGRAM_1_BIN_0_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_1_BIN_0_SHIFT)
#define DC_DISP_SD_HISTOGRAM_1_BIN_0_RANGE                      7:0
#define DC_DISP_SD_HISTOGRAM_1_BIN_0_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_1_BIN_0_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_1_BIN_0_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_1_BIN_0_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_1_BIN_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Each bin has been approximtely scaled to the number of pixels in the image
#define DC_DISP_SD_HISTOGRAM_1_BIN_1_SHIFT                      _MK_SHIFT_CONST(8)
#define DC_DISP_SD_HISTOGRAM_1_BIN_1_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_1_BIN_1_SHIFT)
#define DC_DISP_SD_HISTOGRAM_1_BIN_1_RANGE                      15:8
#define DC_DISP_SD_HISTOGRAM_1_BIN_1_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_1_BIN_1_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_1_BIN_1_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_1_BIN_1_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_1_BIN_1_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// so that a single quantisation step in a bin represents a fraction of
#define DC_DISP_SD_HISTOGRAM_1_BIN_2_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_SD_HISTOGRAM_1_BIN_2_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_1_BIN_2_SHIFT)
#define DC_DISP_SD_HISTOGRAM_1_BIN_2_RANGE                      23:16
#define DC_DISP_SD_HISTOGRAM_1_BIN_2_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_1_BIN_2_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_1_BIN_2_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_1_BIN_2_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_1_BIN_2_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// between 1/256 and 1/128 of the total number of pixels in the image.
#define DC_DISP_SD_HISTOGRAM_1_BIN_3_SHIFT                      _MK_SHIFT_CONST(24)
#define DC_DISP_SD_HISTOGRAM_1_BIN_3_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_1_BIN_3_SHIFT)
#define DC_DISP_SD_HISTOGRAM_1_BIN_3_RANGE                      31:24
#define DC_DISP_SD_HISTOGRAM_1_BIN_3_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_1_BIN_3_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_1_BIN_3_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_1_BIN_3_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_1_BIN_3_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register DC_DISP_SD_HISTOGRAM_2  // Status / debug registers showing the gathered histogram data.
#define DC_DISP_SD_HISTOGRAM_2                  _MK_ADDR_CONST(0x4d1)
#define DC_DISP_SD_HISTOGRAM_2_SECURE                   0x0
#define DC_DISP_SD_HISTOGRAM_2_WORD_COUNT                       0x1
#define DC_DISP_SD_HISTOGRAM_2_RESET_VAL                        _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_2_RESET_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_2_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_2_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_2_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define DC_DISP_SD_HISTOGRAM_2_WRITE_MASK                       _MK_MASK_CONST(0x0)
// Each register contains 4 histogram bins, for a total of 8 x 4 = 32 bins.
#define DC_DISP_SD_HISTOGRAM_2_BIN_0_SHIFT                      _MK_SHIFT_CONST(0)
#define DC_DISP_SD_HISTOGRAM_2_BIN_0_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_2_BIN_0_SHIFT)
#define DC_DISP_SD_HISTOGRAM_2_BIN_0_RANGE                      7:0
#define DC_DISP_SD_HISTOGRAM_2_BIN_0_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_2_BIN_0_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_2_BIN_0_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_2_BIN_0_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_2_BIN_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Each bin has been approximtely scaled to the number of pixels in the image
#define DC_DISP_SD_HISTOGRAM_2_BIN_1_SHIFT                      _MK_SHIFT_CONST(8)
#define DC_DISP_SD_HISTOGRAM_2_BIN_1_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_2_BIN_1_SHIFT)
#define DC_DISP_SD_HISTOGRAM_2_BIN_1_RANGE                      15:8
#define DC_DISP_SD_HISTOGRAM_2_BIN_1_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_2_BIN_1_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_2_BIN_1_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_2_BIN_1_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_2_BIN_1_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// so that a single quantisation step in a bin represents a fraction of
#define DC_DISP_SD_HISTOGRAM_2_BIN_2_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_SD_HISTOGRAM_2_BIN_2_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_2_BIN_2_SHIFT)
#define DC_DISP_SD_HISTOGRAM_2_BIN_2_RANGE                      23:16
#define DC_DISP_SD_HISTOGRAM_2_BIN_2_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_2_BIN_2_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_2_BIN_2_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_2_BIN_2_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_2_BIN_2_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// between 1/256 and 1/128 of the total number of pixels in the image.
#define DC_DISP_SD_HISTOGRAM_2_BIN_3_SHIFT                      _MK_SHIFT_CONST(24)
#define DC_DISP_SD_HISTOGRAM_2_BIN_3_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_2_BIN_3_SHIFT)
#define DC_DISP_SD_HISTOGRAM_2_BIN_3_RANGE                      31:24
#define DC_DISP_SD_HISTOGRAM_2_BIN_3_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_2_BIN_3_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_2_BIN_3_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_2_BIN_3_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_2_BIN_3_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register DC_DISP_SD_HISTOGRAM_3  // Status / debug registers showing the gathered histogram data.
#define DC_DISP_SD_HISTOGRAM_3                  _MK_ADDR_CONST(0x4d2)
#define DC_DISP_SD_HISTOGRAM_3_SECURE                   0x0
#define DC_DISP_SD_HISTOGRAM_3_WORD_COUNT                       0x1
#define DC_DISP_SD_HISTOGRAM_3_RESET_VAL                        _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_3_RESET_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_3_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_3_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_3_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define DC_DISP_SD_HISTOGRAM_3_WRITE_MASK                       _MK_MASK_CONST(0x0)
// Each register contains 4 histogram bins, for a total of 8 x 4 = 32 bins.
#define DC_DISP_SD_HISTOGRAM_3_BIN_0_SHIFT                      _MK_SHIFT_CONST(0)
#define DC_DISP_SD_HISTOGRAM_3_BIN_0_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_3_BIN_0_SHIFT)
#define DC_DISP_SD_HISTOGRAM_3_BIN_0_RANGE                      7:0
#define DC_DISP_SD_HISTOGRAM_3_BIN_0_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_3_BIN_0_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_3_BIN_0_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_3_BIN_0_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_3_BIN_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Each bin has been approximtely scaled to the number of pixels in the image
#define DC_DISP_SD_HISTOGRAM_3_BIN_1_SHIFT                      _MK_SHIFT_CONST(8)
#define DC_DISP_SD_HISTOGRAM_3_BIN_1_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_3_BIN_1_SHIFT)
#define DC_DISP_SD_HISTOGRAM_3_BIN_1_RANGE                      15:8
#define DC_DISP_SD_HISTOGRAM_3_BIN_1_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_3_BIN_1_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_3_BIN_1_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_3_BIN_1_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_3_BIN_1_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// so that a single quantisation step in a bin represents a fraction of
#define DC_DISP_SD_HISTOGRAM_3_BIN_2_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_SD_HISTOGRAM_3_BIN_2_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_3_BIN_2_SHIFT)
#define DC_DISP_SD_HISTOGRAM_3_BIN_2_RANGE                      23:16
#define DC_DISP_SD_HISTOGRAM_3_BIN_2_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_3_BIN_2_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_3_BIN_2_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_3_BIN_2_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_3_BIN_2_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// between 1/256 and 1/128 of the total number of pixels in the image.
#define DC_DISP_SD_HISTOGRAM_3_BIN_3_SHIFT                      _MK_SHIFT_CONST(24)
#define DC_DISP_SD_HISTOGRAM_3_BIN_3_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_3_BIN_3_SHIFT)
#define DC_DISP_SD_HISTOGRAM_3_BIN_3_RANGE                      31:24
#define DC_DISP_SD_HISTOGRAM_3_BIN_3_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_3_BIN_3_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_3_BIN_3_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_3_BIN_3_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_3_BIN_3_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register DC_DISP_SD_HISTOGRAM_4  // Status / debug registers showing the gathered histogram data.
#define DC_DISP_SD_HISTOGRAM_4                  _MK_ADDR_CONST(0x4d3)
#define DC_DISP_SD_HISTOGRAM_4_SECURE                   0x0
#define DC_DISP_SD_HISTOGRAM_4_WORD_COUNT                       0x1
#define DC_DISP_SD_HISTOGRAM_4_RESET_VAL                        _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_4_RESET_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_4_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_4_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_4_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define DC_DISP_SD_HISTOGRAM_4_WRITE_MASK                       _MK_MASK_CONST(0x0)
// Each register contains 4 histogram bins, for a total of 8 x 4 = 32 bins.
#define DC_DISP_SD_HISTOGRAM_4_BIN_0_SHIFT                      _MK_SHIFT_CONST(0)
#define DC_DISP_SD_HISTOGRAM_4_BIN_0_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_4_BIN_0_SHIFT)
#define DC_DISP_SD_HISTOGRAM_4_BIN_0_RANGE                      7:0
#define DC_DISP_SD_HISTOGRAM_4_BIN_0_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_4_BIN_0_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_4_BIN_0_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_4_BIN_0_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_4_BIN_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Each bin has been approximtely scaled to the number of pixels in the image
#define DC_DISP_SD_HISTOGRAM_4_BIN_1_SHIFT                      _MK_SHIFT_CONST(8)
#define DC_DISP_SD_HISTOGRAM_4_BIN_1_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_4_BIN_1_SHIFT)
#define DC_DISP_SD_HISTOGRAM_4_BIN_1_RANGE                      15:8
#define DC_DISP_SD_HISTOGRAM_4_BIN_1_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_4_BIN_1_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_4_BIN_1_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_4_BIN_1_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_4_BIN_1_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// so that a single quantisation step in a bin represents a fraction of
#define DC_DISP_SD_HISTOGRAM_4_BIN_2_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_SD_HISTOGRAM_4_BIN_2_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_4_BIN_2_SHIFT)
#define DC_DISP_SD_HISTOGRAM_4_BIN_2_RANGE                      23:16
#define DC_DISP_SD_HISTOGRAM_4_BIN_2_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_4_BIN_2_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_4_BIN_2_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_4_BIN_2_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_4_BIN_2_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// between 1/256 and 1/128 of the total number of pixels in the image.
#define DC_DISP_SD_HISTOGRAM_4_BIN_3_SHIFT                      _MK_SHIFT_CONST(24)
#define DC_DISP_SD_HISTOGRAM_4_BIN_3_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_4_BIN_3_SHIFT)
#define DC_DISP_SD_HISTOGRAM_4_BIN_3_RANGE                      31:24
#define DC_DISP_SD_HISTOGRAM_4_BIN_3_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_4_BIN_3_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_4_BIN_3_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_4_BIN_3_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_4_BIN_3_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register DC_DISP_SD_HISTOGRAM_5  // Status / debug registers showing the gathered histogram data.
#define DC_DISP_SD_HISTOGRAM_5                  _MK_ADDR_CONST(0x4d4)
#define DC_DISP_SD_HISTOGRAM_5_SECURE                   0x0
#define DC_DISP_SD_HISTOGRAM_5_WORD_COUNT                       0x1
#define DC_DISP_SD_HISTOGRAM_5_RESET_VAL                        _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_5_RESET_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_5_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_5_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_5_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define DC_DISP_SD_HISTOGRAM_5_WRITE_MASK                       _MK_MASK_CONST(0x0)
// Each register contains 4 histogram bins, for a total of 8 x 4 = 32 bins.
#define DC_DISP_SD_HISTOGRAM_5_BIN_0_SHIFT                      _MK_SHIFT_CONST(0)
#define DC_DISP_SD_HISTOGRAM_5_BIN_0_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_5_BIN_0_SHIFT)
#define DC_DISP_SD_HISTOGRAM_5_BIN_0_RANGE                      7:0
#define DC_DISP_SD_HISTOGRAM_5_BIN_0_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_5_BIN_0_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_5_BIN_0_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_5_BIN_0_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_5_BIN_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Each bin has been approximtely scaled to the number of pixels in the image
#define DC_DISP_SD_HISTOGRAM_5_BIN_1_SHIFT                      _MK_SHIFT_CONST(8)
#define DC_DISP_SD_HISTOGRAM_5_BIN_1_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_5_BIN_1_SHIFT)
#define DC_DISP_SD_HISTOGRAM_5_BIN_1_RANGE                      15:8
#define DC_DISP_SD_HISTOGRAM_5_BIN_1_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_5_BIN_1_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_5_BIN_1_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_5_BIN_1_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_5_BIN_1_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// so that a single quantisation step in a bin represents a fraction of
#define DC_DISP_SD_HISTOGRAM_5_BIN_2_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_SD_HISTOGRAM_5_BIN_2_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_5_BIN_2_SHIFT)
#define DC_DISP_SD_HISTOGRAM_5_BIN_2_RANGE                      23:16
#define DC_DISP_SD_HISTOGRAM_5_BIN_2_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_5_BIN_2_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_5_BIN_2_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_5_BIN_2_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_5_BIN_2_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// between 1/256 and 1/128 of the total number of pixels in the image.
#define DC_DISP_SD_HISTOGRAM_5_BIN_3_SHIFT                      _MK_SHIFT_CONST(24)
#define DC_DISP_SD_HISTOGRAM_5_BIN_3_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_5_BIN_3_SHIFT)
#define DC_DISP_SD_HISTOGRAM_5_BIN_3_RANGE                      31:24
#define DC_DISP_SD_HISTOGRAM_5_BIN_3_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_5_BIN_3_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_5_BIN_3_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_5_BIN_3_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_5_BIN_3_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register DC_DISP_SD_HISTOGRAM_6  // Status / debug registers showing the gathered histogram data.
#define DC_DISP_SD_HISTOGRAM_6                  _MK_ADDR_CONST(0x4d5)
#define DC_DISP_SD_HISTOGRAM_6_SECURE                   0x0
#define DC_DISP_SD_HISTOGRAM_6_WORD_COUNT                       0x1
#define DC_DISP_SD_HISTOGRAM_6_RESET_VAL                        _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_6_RESET_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_6_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_6_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_6_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define DC_DISP_SD_HISTOGRAM_6_WRITE_MASK                       _MK_MASK_CONST(0x0)
// Each register contains 4 histogram bins, for a total of 8 x 4 = 32 bins.
#define DC_DISP_SD_HISTOGRAM_6_BIN_0_SHIFT                      _MK_SHIFT_CONST(0)
#define DC_DISP_SD_HISTOGRAM_6_BIN_0_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_6_BIN_0_SHIFT)
#define DC_DISP_SD_HISTOGRAM_6_BIN_0_RANGE                      7:0
#define DC_DISP_SD_HISTOGRAM_6_BIN_0_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_6_BIN_0_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_6_BIN_0_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_6_BIN_0_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_6_BIN_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Each bin has been approximtely scaled to the number of pixels in the image
#define DC_DISP_SD_HISTOGRAM_6_BIN_1_SHIFT                      _MK_SHIFT_CONST(8)
#define DC_DISP_SD_HISTOGRAM_6_BIN_1_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_6_BIN_1_SHIFT)
#define DC_DISP_SD_HISTOGRAM_6_BIN_1_RANGE                      15:8
#define DC_DISP_SD_HISTOGRAM_6_BIN_1_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_6_BIN_1_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_6_BIN_1_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_6_BIN_1_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_6_BIN_1_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// so that a single quantisation step in a bin represents a fraction of
#define DC_DISP_SD_HISTOGRAM_6_BIN_2_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_SD_HISTOGRAM_6_BIN_2_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_6_BIN_2_SHIFT)
#define DC_DISP_SD_HISTOGRAM_6_BIN_2_RANGE                      23:16
#define DC_DISP_SD_HISTOGRAM_6_BIN_2_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_6_BIN_2_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_6_BIN_2_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_6_BIN_2_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_6_BIN_2_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// between 1/256 and 1/128 of the total number of pixels in the image.
#define DC_DISP_SD_HISTOGRAM_6_BIN_3_SHIFT                      _MK_SHIFT_CONST(24)
#define DC_DISP_SD_HISTOGRAM_6_BIN_3_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_6_BIN_3_SHIFT)
#define DC_DISP_SD_HISTOGRAM_6_BIN_3_RANGE                      31:24
#define DC_DISP_SD_HISTOGRAM_6_BIN_3_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_6_BIN_3_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_6_BIN_3_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_6_BIN_3_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_6_BIN_3_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register DC_DISP_SD_HISTOGRAM_7  // Status / debug registers showing the gathered histogram data.
#define DC_DISP_SD_HISTOGRAM_7                  _MK_ADDR_CONST(0x4d6)
#define DC_DISP_SD_HISTOGRAM_7_SECURE                   0x0
#define DC_DISP_SD_HISTOGRAM_7_WORD_COUNT                       0x1
#define DC_DISP_SD_HISTOGRAM_7_RESET_VAL                        _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_7_RESET_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_7_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_7_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_7_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define DC_DISP_SD_HISTOGRAM_7_WRITE_MASK                       _MK_MASK_CONST(0x0)
// Each register contains 4 histogram bins, for a total of 8 x 4 = 32 bins.
#define DC_DISP_SD_HISTOGRAM_7_BIN_0_SHIFT                      _MK_SHIFT_CONST(0)
#define DC_DISP_SD_HISTOGRAM_7_BIN_0_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_7_BIN_0_SHIFT)
#define DC_DISP_SD_HISTOGRAM_7_BIN_0_RANGE                      7:0
#define DC_DISP_SD_HISTOGRAM_7_BIN_0_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_7_BIN_0_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_7_BIN_0_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_7_BIN_0_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_7_BIN_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Each bin has been approximtely scaled to the number of pixels in the image
#define DC_DISP_SD_HISTOGRAM_7_BIN_1_SHIFT                      _MK_SHIFT_CONST(8)
#define DC_DISP_SD_HISTOGRAM_7_BIN_1_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_7_BIN_1_SHIFT)
#define DC_DISP_SD_HISTOGRAM_7_BIN_1_RANGE                      15:8
#define DC_DISP_SD_HISTOGRAM_7_BIN_1_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_7_BIN_1_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_7_BIN_1_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_7_BIN_1_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_7_BIN_1_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// so that a single quantisation step in a bin represents a fraction of
#define DC_DISP_SD_HISTOGRAM_7_BIN_2_SHIFT                      _MK_SHIFT_CONST(16)
#define DC_DISP_SD_HISTOGRAM_7_BIN_2_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_7_BIN_2_SHIFT)
#define DC_DISP_SD_HISTOGRAM_7_BIN_2_RANGE                      23:16
#define DC_DISP_SD_HISTOGRAM_7_BIN_2_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_7_BIN_2_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_7_BIN_2_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_7_BIN_2_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_7_BIN_2_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// between 1/256 and 1/128 of the total number of pixels in the image.
#define DC_DISP_SD_HISTOGRAM_7_BIN_3_SHIFT                      _MK_SHIFT_CONST(24)
#define DC_DISP_SD_HISTOGRAM_7_BIN_3_FIELD                      (_MK_MASK_CONST(0xff) << DC_DISP_SD_HISTOGRAM_7_BIN_3_SHIFT)
#define DC_DISP_SD_HISTOGRAM_7_BIN_3_RANGE                      31:24
#define DC_DISP_SD_HISTOGRAM_7_BIN_3_WOFFSET                    0x0
#define DC_DISP_SD_HISTOGRAM_7_BIN_3_DEFAULT                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_7_BIN_3_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_7_BIN_3_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_HISTOGRAM_7_BIN_3_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register DC_DISP_SD_BL_PARAMETERS_0  // Back Light response parameters.
// Defines the parameters for the backlight temporal response model.
#define DC_DISP_SD_BL_PARAMETERS_0                      _MK_ADDR_CONST(0x4d7)
#define DC_DISP_SD_BL_PARAMETERS_0_SECURE                       0x0
#define DC_DISP_SD_BL_PARAMETERS_0_WORD_COUNT                   0x1
#define DC_DISP_SD_BL_PARAMETERS_0_RESET_VAL                    _MK_MASK_CONST(0x400)
#define DC_DISP_SD_BL_PARAMETERS_0_RESET_MASK                   _MK_MASK_CONST(0xff07ff)
#define DC_DISP_SD_BL_PARAMETERS_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_PARAMETERS_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_PARAMETERS_0_READ_MASK                    _MK_MASK_CONST(0xff07ff)
#define DC_DISP_SD_BL_PARAMETERS_0_WRITE_MASK                   _MK_MASK_CONST(0xff07ff)
// The time constant for the response curve. This value represents the
// fraction by which the value of enhancement value approaches the target
// value each frame. Example values are shown below:
//    0 : The value will never reach the target (infinite TC)
//  512 : The next value will be half-way betwen the current value and the
//        target value.
// 1024 : The next value will be 100% of the target value. In other words -
//        an instantaneous response.
//
#define DC_DISP_SD_BL_PARAMETERS_0_TIME_CONSTANT_SHIFT                  _MK_SHIFT_CONST(0)
#define DC_DISP_SD_BL_PARAMETERS_0_TIME_CONSTANT_FIELD                  (_MK_MASK_CONST(0x7ff) << DC_DISP_SD_BL_PARAMETERS_0_TIME_CONSTANT_SHIFT)
#define DC_DISP_SD_BL_PARAMETERS_0_TIME_CONSTANT_RANGE                  10:0
#define DC_DISP_SD_BL_PARAMETERS_0_TIME_CONSTANT_WOFFSET                        0x0
#define DC_DISP_SD_BL_PARAMETERS_0_TIME_CONSTANT_DEFAULT                        _MK_MASK_CONST(0x400)
#define DC_DISP_SD_BL_PARAMETERS_0_TIME_CONSTANT_DEFAULT_MASK                   _MK_MASK_CONST(0x7ff)
#define DC_DISP_SD_BL_PARAMETERS_0_TIME_CONSTANT_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_PARAMETERS_0_TIME_CONSTANT_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Determines the instantaneous portion of the target value of enhancement
// that is applied.
//   0 =   0% : response is entirely exponential and determined by TIME_CONSTANT
// 128 =  50% : response will instantly step up by 50% and will then be exponential.
// 255 = 100% : response is entirely instantaneous. TIME_CONSTANT has no effect.
#define DC_DISP_SD_BL_PARAMETERS_0_STEP_SHIFT                   _MK_SHIFT_CONST(16)
#define DC_DISP_SD_BL_PARAMETERS_0_STEP_FIELD                   (_MK_MASK_CONST(0xff) << DC_DISP_SD_BL_PARAMETERS_0_STEP_SHIFT)
#define DC_DISP_SD_BL_PARAMETERS_0_STEP_RANGE                   23:16
#define DC_DISP_SD_BL_PARAMETERS_0_STEP_WOFFSET                 0x0
#define DC_DISP_SD_BL_PARAMETERS_0_STEP_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_PARAMETERS_0_STEP_DEFAULT_MASK                    _MK_MASK_CONST(0xff)
#define DC_DISP_SD_BL_PARAMETERS_0_STEP_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_PARAMETERS_0_STEP_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register DC_DISP_SD_BL_TF_0  // Backlight Transfer Funtion
#define DC_DISP_SD_BL_TF_0                      _MK_ADDR_CONST(0x4d8)
#define DC_DISP_SD_BL_TF_0_SECURE                       0x0
#define DC_DISP_SD_BL_TF_0_WORD_COUNT                   0x1
#define DC_DISP_SD_BL_TF_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define DC_DISP_SD_BL_TF_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
// Each register contains 4 points on the Transfer Function curve that defines
#define DC_DISP_SD_BL_TF_0_POINT_0_SHIFT                        _MK_SHIFT_CONST(0)
#define DC_DISP_SD_BL_TF_0_POINT_0_FIELD                        (_MK_MASK_CONST(0xff) << DC_DISP_SD_BL_TF_0_POINT_0_SHIFT)
#define DC_DISP_SD_BL_TF_0_POINT_0_RANGE                        7:0
#define DC_DISP_SD_BL_TF_0_POINT_0_WOFFSET                      0x0
#define DC_DISP_SD_BL_TF_0_POINT_0_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_0_POINT_0_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_0_POINT_0_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_0_POINT_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// how the backlight output changes with respect to the control input. Each point
#define DC_DISP_SD_BL_TF_0_POINT_1_SHIFT                        _MK_SHIFT_CONST(8)
#define DC_DISP_SD_BL_TF_0_POINT_1_FIELD                        (_MK_MASK_CONST(0xff) << DC_DISP_SD_BL_TF_0_POINT_1_SHIFT)
#define DC_DISP_SD_BL_TF_0_POINT_1_RANGE                        15:8
#define DC_DISP_SD_BL_TF_0_POINT_1_WOFFSET                      0x0
#define DC_DISP_SD_BL_TF_0_POINT_1_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_0_POINT_1_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_0_POINT_1_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_0_POINT_1_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// defines a value at the vertex of a 16 segment line. The 17th point is defined
#define DC_DISP_SD_BL_TF_0_POINT_2_SHIFT                        _MK_SHIFT_CONST(16)
#define DC_DISP_SD_BL_TF_0_POINT_2_FIELD                        (_MK_MASK_CONST(0xff) << DC_DISP_SD_BL_TF_0_POINT_2_SHIFT)
#define DC_DISP_SD_BL_TF_0_POINT_2_RANGE                        23:16
#define DC_DISP_SD_BL_TF_0_POINT_2_WOFFSET                      0x0
#define DC_DISP_SD_BL_TF_0_POINT_2_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_0_POINT_2_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_0_POINT_2_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_0_POINT_2_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// to be the maximum value (it is assumed 100% control == 100% light output).
#define DC_DISP_SD_BL_TF_0_POINT_3_SHIFT                        _MK_SHIFT_CONST(24)
#define DC_DISP_SD_BL_TF_0_POINT_3_FIELD                        (_MK_MASK_CONST(0xff) << DC_DISP_SD_BL_TF_0_POINT_3_SHIFT)
#define DC_DISP_SD_BL_TF_0_POINT_3_RANGE                        31:24
#define DC_DISP_SD_BL_TF_0_POINT_3_WOFFSET                      0x0
#define DC_DISP_SD_BL_TF_0_POINT_3_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_0_POINT_3_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_0_POINT_3_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_0_POINT_3_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)


// Register DC_DISP_SD_BL_TF  // Backlight Transfer Funtion
#define DC_DISP_SD_BL_TF                        _MK_ADDR_CONST(0x4d8)
#define DC_DISP_SD_BL_TF_SECURE                         0x0
#define DC_DISP_SD_BL_TF_WORD_COUNT                     0x1
#define DC_DISP_SD_BL_TF_RESET_VAL                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_RESET_MASK                     _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define DC_DISP_SD_BL_TF_WRITE_MASK                     _MK_MASK_CONST(0xffffffff)
// Each register contains 4 points on the Transfer Function curve that defines
#define DC_DISP_SD_BL_TF_POINT_0_SHIFT                  _MK_SHIFT_CONST(0)
#define DC_DISP_SD_BL_TF_POINT_0_FIELD                  (_MK_MASK_CONST(0xff) << DC_DISP_SD_BL_TF_POINT_0_SHIFT)
#define DC_DISP_SD_BL_TF_POINT_0_RANGE                  7:0
#define DC_DISP_SD_BL_TF_POINT_0_WOFFSET                        0x0
#define DC_DISP_SD_BL_TF_POINT_0_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_POINT_0_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_POINT_0_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_POINT_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// how the backlight output changes with respect to the control input. Each point
#define DC_DISP_SD_BL_TF_POINT_1_SHIFT                  _MK_SHIFT_CONST(8)
#define DC_DISP_SD_BL_TF_POINT_1_FIELD                  (_MK_MASK_CONST(0xff) << DC_DISP_SD_BL_TF_POINT_1_SHIFT)
#define DC_DISP_SD_BL_TF_POINT_1_RANGE                  15:8
#define DC_DISP_SD_BL_TF_POINT_1_WOFFSET                        0x0
#define DC_DISP_SD_BL_TF_POINT_1_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_POINT_1_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_POINT_1_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_POINT_1_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// defines a value at the vertex of a 16 segment line. The 17th point is defined
#define DC_DISP_SD_BL_TF_POINT_2_SHIFT                  _MK_SHIFT_CONST(16)
#define DC_DISP_SD_BL_TF_POINT_2_FIELD                  (_MK_MASK_CONST(0xff) << DC_DISP_SD_BL_TF_POINT_2_SHIFT)
#define DC_DISP_SD_BL_TF_POINT_2_RANGE                  23:16
#define DC_DISP_SD_BL_TF_POINT_2_WOFFSET                        0x0
#define DC_DISP_SD_BL_TF_POINT_2_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_POINT_2_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_POINT_2_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_POINT_2_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// to be the maximum value (it is assumed 100% control == 100% light output).
#define DC_DISP_SD_BL_TF_POINT_3_SHIFT                  _MK_SHIFT_CONST(24)
#define DC_DISP_SD_BL_TF_POINT_3_FIELD                  (_MK_MASK_CONST(0xff) << DC_DISP_SD_BL_TF_POINT_3_SHIFT)
#define DC_DISP_SD_BL_TF_POINT_3_RANGE                  31:24
#define DC_DISP_SD_BL_TF_POINT_3_WOFFSET                        0x0
#define DC_DISP_SD_BL_TF_POINT_3_DEFAULT                        _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_POINT_3_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_POINT_3_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_POINT_3_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register DC_DISP_SD_BL_TF_1  // Backlight Transfer Funtion
#define DC_DISP_SD_BL_TF_1                      _MK_ADDR_CONST(0x4d9)
#define DC_DISP_SD_BL_TF_1_SECURE                       0x0
#define DC_DISP_SD_BL_TF_1_WORD_COUNT                   0x1
#define DC_DISP_SD_BL_TF_1_RESET_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_1_RESET_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_1_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_1_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_1_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define DC_DISP_SD_BL_TF_1_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
// Each register contains 4 points on the Transfer Function curve that defines
#define DC_DISP_SD_BL_TF_1_POINT_0_SHIFT                        _MK_SHIFT_CONST(0)
#define DC_DISP_SD_BL_TF_1_POINT_0_FIELD                        (_MK_MASK_CONST(0xff) << DC_DISP_SD_BL_TF_1_POINT_0_SHIFT)
#define DC_DISP_SD_BL_TF_1_POINT_0_RANGE                        7:0
#define DC_DISP_SD_BL_TF_1_POINT_0_WOFFSET                      0x0
#define DC_DISP_SD_BL_TF_1_POINT_0_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_1_POINT_0_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_1_POINT_0_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_1_POINT_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// how the backlight output changes with respect to the control input. Each point
#define DC_DISP_SD_BL_TF_1_POINT_1_SHIFT                        _MK_SHIFT_CONST(8)
#define DC_DISP_SD_BL_TF_1_POINT_1_FIELD                        (_MK_MASK_CONST(0xff) << DC_DISP_SD_BL_TF_1_POINT_1_SHIFT)
#define DC_DISP_SD_BL_TF_1_POINT_1_RANGE                        15:8
#define DC_DISP_SD_BL_TF_1_POINT_1_WOFFSET                      0x0
#define DC_DISP_SD_BL_TF_1_POINT_1_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_1_POINT_1_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_1_POINT_1_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_1_POINT_1_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// defines a value at the vertex of a 16 segment line. The 17th point is defined
#define DC_DISP_SD_BL_TF_1_POINT_2_SHIFT                        _MK_SHIFT_CONST(16)
#define DC_DISP_SD_BL_TF_1_POINT_2_FIELD                        (_MK_MASK_CONST(0xff) << DC_DISP_SD_BL_TF_1_POINT_2_SHIFT)
#define DC_DISP_SD_BL_TF_1_POINT_2_RANGE                        23:16
#define DC_DISP_SD_BL_TF_1_POINT_2_WOFFSET                      0x0
#define DC_DISP_SD_BL_TF_1_POINT_2_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_1_POINT_2_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_1_POINT_2_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_1_POINT_2_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// to be the maximum value (it is assumed 100% control == 100% light output).
#define DC_DISP_SD_BL_TF_1_POINT_3_SHIFT                        _MK_SHIFT_CONST(24)
#define DC_DISP_SD_BL_TF_1_POINT_3_FIELD                        (_MK_MASK_CONST(0xff) << DC_DISP_SD_BL_TF_1_POINT_3_SHIFT)
#define DC_DISP_SD_BL_TF_1_POINT_3_RANGE                        31:24
#define DC_DISP_SD_BL_TF_1_POINT_3_WOFFSET                      0x0
#define DC_DISP_SD_BL_TF_1_POINT_3_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_1_POINT_3_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_1_POINT_3_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_1_POINT_3_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)


// Register DC_DISP_SD_BL_TF_2  // Backlight Transfer Funtion
#define DC_DISP_SD_BL_TF_2                      _MK_ADDR_CONST(0x4da)
#define DC_DISP_SD_BL_TF_2_SECURE                       0x0
#define DC_DISP_SD_BL_TF_2_WORD_COUNT                   0x1
#define DC_DISP_SD_BL_TF_2_RESET_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_2_RESET_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_2_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_2_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_2_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define DC_DISP_SD_BL_TF_2_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
// Each register contains 4 points on the Transfer Function curve that defines
#define DC_DISP_SD_BL_TF_2_POINT_0_SHIFT                        _MK_SHIFT_CONST(0)
#define DC_DISP_SD_BL_TF_2_POINT_0_FIELD                        (_MK_MASK_CONST(0xff) << DC_DISP_SD_BL_TF_2_POINT_0_SHIFT)
#define DC_DISP_SD_BL_TF_2_POINT_0_RANGE                        7:0
#define DC_DISP_SD_BL_TF_2_POINT_0_WOFFSET                      0x0
#define DC_DISP_SD_BL_TF_2_POINT_0_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_2_POINT_0_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_2_POINT_0_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_2_POINT_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// how the backlight output changes with respect to the control input. Each point
#define DC_DISP_SD_BL_TF_2_POINT_1_SHIFT                        _MK_SHIFT_CONST(8)
#define DC_DISP_SD_BL_TF_2_POINT_1_FIELD                        (_MK_MASK_CONST(0xff) << DC_DISP_SD_BL_TF_2_POINT_1_SHIFT)
#define DC_DISP_SD_BL_TF_2_POINT_1_RANGE                        15:8
#define DC_DISP_SD_BL_TF_2_POINT_1_WOFFSET                      0x0
#define DC_DISP_SD_BL_TF_2_POINT_1_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_2_POINT_1_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_2_POINT_1_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_2_POINT_1_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// defines a value at the vertex of a 16 segment line. The 17th point is defined
#define DC_DISP_SD_BL_TF_2_POINT_2_SHIFT                        _MK_SHIFT_CONST(16)
#define DC_DISP_SD_BL_TF_2_POINT_2_FIELD                        (_MK_MASK_CONST(0xff) << DC_DISP_SD_BL_TF_2_POINT_2_SHIFT)
#define DC_DISP_SD_BL_TF_2_POINT_2_RANGE                        23:16
#define DC_DISP_SD_BL_TF_2_POINT_2_WOFFSET                      0x0
#define DC_DISP_SD_BL_TF_2_POINT_2_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_2_POINT_2_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_2_POINT_2_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_2_POINT_2_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// to be the maximum value (it is assumed 100% control == 100% light output).
#define DC_DISP_SD_BL_TF_2_POINT_3_SHIFT                        _MK_SHIFT_CONST(24)
#define DC_DISP_SD_BL_TF_2_POINT_3_FIELD                        (_MK_MASK_CONST(0xff) << DC_DISP_SD_BL_TF_2_POINT_3_SHIFT)
#define DC_DISP_SD_BL_TF_2_POINT_3_RANGE                        31:24
#define DC_DISP_SD_BL_TF_2_POINT_3_WOFFSET                      0x0
#define DC_DISP_SD_BL_TF_2_POINT_3_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_2_POINT_3_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_2_POINT_3_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_2_POINT_3_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)


// Register DC_DISP_SD_BL_TF_3  // Backlight Transfer Funtion
#define DC_DISP_SD_BL_TF_3                      _MK_ADDR_CONST(0x4db)
#define DC_DISP_SD_BL_TF_3_SECURE                       0x0
#define DC_DISP_SD_BL_TF_3_WORD_COUNT                   0x1
#define DC_DISP_SD_BL_TF_3_RESET_VAL                    _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_3_RESET_MASK                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_3_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_3_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_3_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define DC_DISP_SD_BL_TF_3_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
// Each register contains 4 points on the Transfer Function curve that defines
#define DC_DISP_SD_BL_TF_3_POINT_0_SHIFT                        _MK_SHIFT_CONST(0)
#define DC_DISP_SD_BL_TF_3_POINT_0_FIELD                        (_MK_MASK_CONST(0xff) << DC_DISP_SD_BL_TF_3_POINT_0_SHIFT)
#define DC_DISP_SD_BL_TF_3_POINT_0_RANGE                        7:0
#define DC_DISP_SD_BL_TF_3_POINT_0_WOFFSET                      0x0
#define DC_DISP_SD_BL_TF_3_POINT_0_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_3_POINT_0_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_3_POINT_0_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_3_POINT_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// how the backlight output changes with respect to the control input. Each point
#define DC_DISP_SD_BL_TF_3_POINT_1_SHIFT                        _MK_SHIFT_CONST(8)
#define DC_DISP_SD_BL_TF_3_POINT_1_FIELD                        (_MK_MASK_CONST(0xff) << DC_DISP_SD_BL_TF_3_POINT_1_SHIFT)
#define DC_DISP_SD_BL_TF_3_POINT_1_RANGE                        15:8
#define DC_DISP_SD_BL_TF_3_POINT_1_WOFFSET                      0x0
#define DC_DISP_SD_BL_TF_3_POINT_1_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_3_POINT_1_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_3_POINT_1_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_3_POINT_1_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// defines a value at the vertex of a 16 segment line. The 17th point is defined
#define DC_DISP_SD_BL_TF_3_POINT_2_SHIFT                        _MK_SHIFT_CONST(16)
#define DC_DISP_SD_BL_TF_3_POINT_2_FIELD                        (_MK_MASK_CONST(0xff) << DC_DISP_SD_BL_TF_3_POINT_2_SHIFT)
#define DC_DISP_SD_BL_TF_3_POINT_2_RANGE                        23:16
#define DC_DISP_SD_BL_TF_3_POINT_2_WOFFSET                      0x0
#define DC_DISP_SD_BL_TF_3_POINT_2_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_3_POINT_2_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_3_POINT_2_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_3_POINT_2_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// to be the maximum value (it is assumed 100% control == 100% light output).
#define DC_DISP_SD_BL_TF_3_POINT_3_SHIFT                        _MK_SHIFT_CONST(24)
#define DC_DISP_SD_BL_TF_3_POINT_3_FIELD                        (_MK_MASK_CONST(0xff) << DC_DISP_SD_BL_TF_3_POINT_3_SHIFT)
#define DC_DISP_SD_BL_TF_3_POINT_3_RANGE                        31:24
#define DC_DISP_SD_BL_TF_3_POINT_3_WOFFSET                      0x0
#define DC_DISP_SD_BL_TF_3_POINT_3_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_3_POINT_3_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_3_POINT_3_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_TF_3_POINT_3_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)


// Register DC_DISP_SD_BL_CONTROL_0  // Backlight control register
#define DC_DISP_SD_BL_CONTROL_0                 _MK_ADDR_CONST(0x4dc)
#define DC_DISP_SD_BL_CONTROL_0_SECURE                  0x0
#define DC_DISP_SD_BL_CONTROL_0_WORD_COUNT                      0x1
#define DC_DISP_SD_BL_CONTROL_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_CONTROL_0_RESET_MASK                      _MK_MASK_CONST(0x3)
#define DC_DISP_SD_BL_CONTROL_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_CONTROL_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_CONTROL_0_READ_MASK                       _MK_MASK_CONST(0xff03)
#define DC_DISP_SD_BL_CONTROL_0_WRITE_MASK                      _MK_MASK_CONST(0x3)
// Control Mode:            and adjust the backlight brightness itself.
// PWM_AUTO : Hardware willadjust the backlight PWM control signal directly using
//            the value in BRIGHTNESS.
// * OTHER VALUES ARE RESERVED FOR FUTURE USE *
//
#define DC_DISP_SD_BL_CONTROL_0_BL_MODE_SHIFT                   _MK_SHIFT_CONST(0)
#define DC_DISP_SD_BL_CONTROL_0_BL_MODE_FIELD                   (_MK_MASK_CONST(0x3) << DC_DISP_SD_BL_CONTROL_0_BL_MODE_SHIFT)
#define DC_DISP_SD_BL_CONTROL_0_BL_MODE_RANGE                   1:0
#define DC_DISP_SD_BL_CONTROL_0_BL_MODE_WOFFSET                 0x0
#define DC_DISP_SD_BL_CONTROL_0_BL_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_CONTROL_0_BL_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x3)
#define DC_DISP_SD_BL_CONTROL_0_BL_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_CONTROL_0_BL_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_CONTROL_0_BL_MODE_MANUAL                  _MK_ENUM_CONST(0)    // // MANUAL   : Hardware makes no BL corrections. SW must read the BRIGHTNESS field

#define DC_DISP_SD_BL_CONTROL_0_BL_MODE_PWM_AUTO                        _MK_ENUM_CONST(1)

// Backlight brightness modification value. This value is determined by the hardware
// according to all the other control registers and the image content. The amount
// by which the backlight should be modified is given as a fraction with 0
// representing that the backlight should be off and 255 representing no change
// in the backlight intensity. Other values vary linearly between these two extremes.
// Put another way:
// New BL control = (Old BL control * BRIGHTNESS) / 255
#define DC_DISP_SD_BL_CONTROL_0_BRIGHTNESS_SHIFT                        _MK_SHIFT_CONST(8)
#define DC_DISP_SD_BL_CONTROL_0_BRIGHTNESS_FIELD                        (_MK_MASK_CONST(0xff) << DC_DISP_SD_BL_CONTROL_0_BRIGHTNESS_SHIFT)
#define DC_DISP_SD_BL_CONTROL_0_BRIGHTNESS_RANGE                        15:8
#define DC_DISP_SD_BL_CONTROL_0_BRIGHTNESS_WOFFSET                      0x0
#define DC_DISP_SD_BL_CONTROL_0_BRIGHTNESS_DEFAULT                      _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_CONTROL_0_BRIGHTNESS_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_CONTROL_0_BRIGHTNESS_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define DC_DISP_SD_BL_CONTROL_0_BRIGHTNESS_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// END OF FILE

//
// REGISTER LIST
//
#define LIST_ARDISPLAY_REGS(_op_) \
_op_(DC_CMD_GENERAL_INCR_SYNCPT_0) \
_op_(DC_CMD_GENERAL_INCR_SYNCPT_CNTRL_0) \
_op_(DC_CMD_GENERAL_INCR_SYNCPT_ERROR_0) \
_op_(DC_CMD_WIN_A_INCR_SYNCPT_0) \
_op_(DC_CMD_WIN_A_INCR_SYNCPT_CNTRL_0) \
_op_(DC_CMD_WIN_A_INCR_SYNCPT_ERROR_0) \
_op_(DC_CMD_WIN_B_INCR_SYNCPT_0) \
_op_(DC_CMD_WIN_B_INCR_SYNCPT_CNTRL_0) \
_op_(DC_CMD_WIN_B_INCR_SYNCPT_ERROR_0) \
_op_(DC_CMD_WIN_C_INCR_SYNCPT_0) \
_op_(DC_CMD_WIN_C_INCR_SYNCPT_CNTRL_0) \
_op_(DC_CMD_WIN_C_INCR_SYNCPT_ERROR_0) \
_op_(DC_CMD_CONT_SYNCPT_VSYNC_0) \
_op_(DC_CMD_CTXSW_0) \
_op_(DC_CMD_DISPLAY_COMMAND_OPTION0_0) \
_op_(DC_CMD_DISPLAY_COMMAND_0) \
_op_(DC_CMD_SIGNAL_RAISE_0) \
_op_(DC_CMD_DISPLAY_POWER_CONTROL_0) \
_op_(DC_CMD_INT_STATUS_0) \
_op_(DC_CMD_INT_MASK_0) \
_op_(DC_CMD_INT_ENABLE_0) \
_op_(DC_CMD_INT_TYPE_0) \
_op_(DC_CMD_INT_POLARITY_0) \
_op_(DC_CMD_SIGNAL_RAISE1_0) \
_op_(DC_CMD_SIGNAL_RAISE2_0) \
_op_(DC_CMD_SIGNAL_RAISE3_0) \
_op_(DC_CMD_STATE_ACCESS_0) \
_op_(DC_CMD_STATE_CONTROL_0) \
_op_(DC_CMD_DISPLAY_WINDOW_HEADER_0) \
_op_(DC_CMD_REG_ACT_CONTROL_0) \
_op_(DC_COM_CRC_CONTROL_0) \
_op_(DC_COM_CRC_CHECKSUM_0) \
_op_(DC_COM_PIN_OUTPUT_ENABLE0_0) \
_op_(DC_COM_PIN_OUTPUT_ENABLE1_0) \
_op_(DC_COM_PIN_OUTPUT_ENABLE2_0) \
_op_(DC_COM_PIN_OUTPUT_ENABLE3_0) \
_op_(DC_COM_PIN_OUTPUT_POLARITY0_0) \
_op_(DC_COM_PIN_OUTPUT_POLARITY1_0) \
_op_(DC_COM_PIN_OUTPUT_POLARITY2_0) \
_op_(DC_COM_PIN_OUTPUT_POLARITY3_0) \
_op_(DC_COM_PIN_OUTPUT_DATA0_0) \
_op_(DC_COM_PIN_OUTPUT_DATA1_0) \
_op_(DC_COM_PIN_OUTPUT_DATA2_0) \
_op_(DC_COM_PIN_OUTPUT_DATA3_0) \
_op_(DC_COM_PIN_INPUT_ENABLE0_0) \
_op_(DC_COM_PIN_INPUT_ENABLE1_0) \
_op_(DC_COM_PIN_INPUT_ENABLE2_0) \
_op_(DC_COM_PIN_INPUT_ENABLE3_0) \
_op_(DC_COM_PIN_INPUT_DATA0_0) \
_op_(DC_COM_PIN_INPUT_DATA1_0) \
_op_(DC_COM_PIN_OUTPUT_SELECT0_0) \
_op_(DC_COM_PIN_OUTPUT_SELECT1_0) \
_op_(DC_COM_PIN_OUTPUT_SELECT2_0) \
_op_(DC_COM_PIN_OUTPUT_SELECT3_0) \
_op_(DC_COM_PIN_OUTPUT_SELECT4_0) \
_op_(DC_COM_PIN_OUTPUT_SELECT5_0) \
_op_(DC_COM_PIN_OUTPUT_SELECT6_0) \
_op_(DC_COM_PIN_MISC_CONTROL_0) \
_op_(DC_COM_PM0_CONTROL_0) \
_op_(DC_COM_PM0_DUTY_CYCLE_0) \
_op_(DC_COM_PM1_CONTROL_0) \
_op_(DC_COM_PM1_DUTY_CYCLE_0) \
_op_(DC_COM_SPI_CONTROL_0) \
_op_(DC_COM_SPI_START_BYTE_0) \
_op_(DC_COM_HSPI_WRITE_DATA_AB_0) \
_op_(DC_COM_HSPI_WRITE_DATA_CD_0) \
_op_(DC_COM_HSPI_CS_DC_0) \
_op_(DC_COM_SCRATCH_REGISTER_A_0) \
_op_(DC_COM_SCRATCH_REGISTER_B_0) \
_op_(DC_COM_GPIO_CTRL_0) \
_op_(DC_COM_GPIO_DEBOUNCE_COUNTER_0) \
_op_(DC_COM_CRC_CHECKSUM_LATCHED_0) \
_op_(DC_DISP_DISP_SIGNAL_OPTIONS0_0) \
_op_(DC_DISP_DISP_SIGNAL_OPTIONS1_0) \
_op_(DC_DISP_DISP_WIN_OPTIONS_0) \
_op_(DC_DISP_MEM_HIGH_PRIORITY_0) \
_op_(DC_DISP_MEM_HIGH_PRIORITY_TIMER_0) \
_op_(DC_DISP_DISP_TIMING_OPTIONS_0) \
_op_(DC_DISP_REF_TO_SYNC_0) \
_op_(DC_DISP_SYNC_WIDTH_0) \
_op_(DC_DISP_BACK_PORCH_0) \
_op_(DC_DISP_DISP_ACTIVE_0) \
_op_(DC_DISP_FRONT_PORCH_0) \
_op_(DC_DISP_H_PULSE0_CONTROL_0) \
_op_(DC_DISP_H_PULSE0_POSITION_A_0) \
_op_(DC_DISP_H_PULSE0_POSITION_B_0) \
_op_(DC_DISP_H_PULSE0_POSITION_C_0) \
_op_(DC_DISP_H_PULSE0_POSITION_D_0) \
_op_(DC_DISP_H_PULSE1_CONTROL_0) \
_op_(DC_DISP_H_PULSE1_POSITION_A_0) \
_op_(DC_DISP_H_PULSE1_POSITION_B_0) \
_op_(DC_DISP_H_PULSE1_POSITION_C_0) \
_op_(DC_DISP_H_PULSE1_POSITION_D_0) \
_op_(DC_DISP_H_PULSE2_CONTROL_0) \
_op_(DC_DISP_H_PULSE2_POSITION_A_0) \
_op_(DC_DISP_H_PULSE2_POSITION_B_0) \
_op_(DC_DISP_H_PULSE2_POSITION_C_0) \
_op_(DC_DISP_H_PULSE2_POSITION_D_0) \
_op_(DC_DISP_V_PULSE0_CONTROL_0) \
_op_(DC_DISP_V_PULSE0_POSITION_A_0) \
_op_(DC_DISP_V_PULSE0_POSITION_B_0) \
_op_(DC_DISP_V_PULSE0_POSITION_C_0) \
_op_(DC_DISP_V_PULSE1_CONTROL_0) \
_op_(DC_DISP_V_PULSE1_POSITION_A_0) \
_op_(DC_DISP_V_PULSE1_POSITION_B_0) \
_op_(DC_DISP_V_PULSE1_POSITION_C_0) \
_op_(DC_DISP_V_PULSE2_CONTROL_0) \
_op_(DC_DISP_V_PULSE2_POSITION_A_0) \
_op_(DC_DISP_V_PULSE3_CONTROL_0) \
_op_(DC_DISP_V_PULSE3_POSITION_A_0) \
_op_(DC_DISP_M0_CONTROL_0) \
_op_(DC_DISP_M1_CONTROL_0) \
_op_(DC_DISP_DI_CONTROL_0) \
_op_(DC_DISP_PP_CONTROL_0) \
_op_(DC_DISP_PP_SELECT_A_0) \
_op_(DC_DISP_PP_SELECT_B_0) \
_op_(DC_DISP_PP_SELECT_C_0) \
_op_(DC_DISP_PP_SELECT_D_0) \
_op_(DC_DISP_DISP_CLOCK_CONTROL_0) \
_op_(DC_DISP_DISP_INTERFACE_CONTROL_0) \
_op_(DC_DISP_DISP_COLOR_CONTROL_0) \
_op_(DC_DISP_SHIFT_CLOCK_OPTIONS_0) \
_op_(DC_DISP_DATA_ENABLE_OPTIONS_0) \
_op_(DC_DISP_SERIAL_INTERFACE_OPTIONS_0) \
_op_(DC_DISP_LCD_SPI_OPTIONS_0) \
_op_(DC_DISP_BORDER_COLOR_0) \
_op_(DC_DISP_COLOR_KEY0_LOWER_0) \
_op_(DC_DISP_COLOR_KEY0_UPPER_0) \
_op_(DC_DISP_COLOR_KEY1_LOWER_0) \
_op_(DC_DISP_COLOR_KEY1_UPPER_0) \
_op_(DC_DISP_CURSOR_FOREGROUND_0) \
_op_(DC_DISP_CURSOR_BACKGROUND_0) \
_op_(DC_DISP_CURSOR_START_ADDR_0) \
_op_(DC_DISP_CURSOR_START_ADDR_NS_0) \
_op_(DC_DISP_CURSOR_POSITION_0) \
_op_(DC_DISP_CURSOR_POSITION_NS_0) \
_op_(DC_DISP_INIT_SEQ_CONTROL_0) \
_op_(DC_DISP_SPI_INIT_SEQ_DATA_A_0) \
_op_(DC_DISP_SPI_INIT_SEQ_DATA_B_0) \
_op_(DC_DISP_SPI_INIT_SEQ_DATA_C_0) \
_op_(DC_DISP_SPI_INIT_SEQ_DATA_D_0) \
_op_(DC_DISP_DC_MCCIF_FIFOCTRL_0) \
_op_(DC_DISP_MCCIF_DISPLAY0A_HYST_0) \
_op_(DC_DISP_MCCIF_DISPLAY0B_HYST_0) \
_op_(DC_DISP_MCCIF_DISPLAY0C_HYST_0) \
_op_(DC_DISP_MCCIF_DISPLAY1B_HYST_0) \
_op_(DC_DISP_DAC_CRT_CTRL_0) \
_op_(DC_DISP_DISP_MISC_CONTROL_0) \
_op_(DC_DISP_SD_CONTROL_0) \
_op_(DC_DISP_SD_CSC_COEFF_0) \
_op_(DC_DISP_SD_LUT_0) \
_op_(DC_DISP_SD_LUT) \
_op_(DC_DISP_SD_LUT_1) \
_op_(DC_DISP_SD_LUT_2) \
_op_(DC_DISP_SD_LUT_3) \
_op_(DC_DISP_SD_LUT_4) \
_op_(DC_DISP_SD_LUT_5) \
_op_(DC_DISP_SD_LUT_6) \
_op_(DC_DISP_SD_LUT_7) \
_op_(DC_DISP_SD_LUT_8) \
_op_(DC_DISP_SD_FLICKER_CONTROL_0) \
_op_(DC_DISP_SD_PIXEL_COUNT_0) \
_op_(DC_DISP_SD_HISTOGRAM_0) \
_op_(DC_DISP_SD_HISTOGRAM) \
_op_(DC_DISP_SD_HISTOGRAM_1) \
_op_(DC_DISP_SD_HISTOGRAM_2) \
_op_(DC_DISP_SD_HISTOGRAM_3) \
_op_(DC_DISP_SD_HISTOGRAM_4) \
_op_(DC_DISP_SD_HISTOGRAM_5) \
_op_(DC_DISP_SD_HISTOGRAM_6) \
_op_(DC_DISP_SD_HISTOGRAM_7) \
_op_(DC_DISP_SD_BL_PARAMETERS_0) \
_op_(DC_DISP_SD_BL_TF_0) \
_op_(DC_DISP_SD_BL_TF) \
_op_(DC_DISP_SD_BL_TF_1) \
_op_(DC_DISP_SD_BL_TF_2) \
_op_(DC_DISP_SD_BL_TF_3) \
_op_(DC_DISP_SD_BL_CONTROL_0)


//
// ADDRESS SPACES
//

#define BASE_ADDRESS_DC_CMD     0x00000000
#define BASE_ADDRESS_DC_COM     0x00000300
#define BASE_ADDRESS_DC_DISP    0x00000400

//
// ARDISPLAY REGISTER BANKS
//

#define DC_CMD0_FIRST_REG 0x0000 // DC_CMD_GENERAL_INCR_SYNCPT_0
#define DC_CMD0_LAST_REG 0x0002 // DC_CMD_GENERAL_INCR_SYNCPT_ERROR_0
#define DC_CMD1_FIRST_REG 0x0008 // DC_CMD_WIN_A_INCR_SYNCPT_0
#define DC_CMD1_LAST_REG 0x000a // DC_CMD_WIN_A_INCR_SYNCPT_ERROR_0
#define DC_CMD2_FIRST_REG 0x0010 // DC_CMD_WIN_B_INCR_SYNCPT_0
#define DC_CMD2_LAST_REG 0x0012 // DC_CMD_WIN_B_INCR_SYNCPT_ERROR_0
#define DC_CMD3_FIRST_REG 0x0018 // DC_CMD_WIN_C_INCR_SYNCPT_0
#define DC_CMD3_LAST_REG 0x001a // DC_CMD_WIN_C_INCR_SYNCPT_ERROR_0
#define DC_CMD4_FIRST_REG 0x0028 // DC_CMD_CONT_SYNCPT_VSYNC_0
#define DC_CMD4_LAST_REG 0x0028 // DC_CMD_CONT_SYNCPT_VSYNC_0
#define DC_CMD5_FIRST_REG 0x0030 // DC_CMD_CTXSW_0
#define DC_CMD5_LAST_REG 0x0033 // DC_CMD_SIGNAL_RAISE_0
#define DC_CMD6_FIRST_REG 0x0036 // DC_CMD_DISPLAY_POWER_CONTROL_0
#define DC_CMD6_LAST_REG 0x003e // DC_CMD_SIGNAL_RAISE3_0
#define DC_CMD7_FIRST_REG 0x0040 // DC_CMD_STATE_ACCESS_0
#define DC_CMD7_LAST_REG 0x0043 // DC_CMD_REG_ACT_CONTROL_0
#define DC_COM0_FIRST_REG 0x0300 // DC_COM_CRC_CONTROL_0
#define DC_COM0_LAST_REG 0x0329 // DC_COM_CRC_CHECKSUM_LATCHED_0
#define DC_DISP0_FIRST_REG 0x0400 // DC_DISP_DISP_SIGNAL_OPTIONS0_0
#define DC_DISP0_LAST_REG 0x0439 // DC_DISP_COLOR_KEY1_UPPER_0
#define DC_DISP1_FIRST_REG 0x043c // DC_DISP_CURSOR_FOREGROUND_0
#define DC_DISP1_LAST_REG 0x0446 // DC_DISP_SPI_INIT_SEQ_DATA_D_0
#define DC_DISP2_FIRST_REG 0x0480 // DC_DISP_DC_MCCIF_FIFOCTRL_0
#define DC_DISP2_LAST_REG 0x0484 // DC_DISP_MCCIF_DISPLAY1B_HYST_0
#define DC_DISP3_FIRST_REG 0x04c0 // DC_DISP_DAC_CRT_CTRL_0
#define DC_DISP3_LAST_REG 0x04dc // DC_DISP_SD_BL_CONTROL_0

#ifndef _MK_SHIFT_CONST
  #define _MK_SHIFT_CONST(_constant_) _constant_
#endif
#ifndef _MK_MASK_CONST
  #define _MK_MASK_CONST(_constant_) _constant_
#endif
#ifndef _MK_ENUM_CONST
  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
#endif
#ifndef _MK_ADDR_CONST
  #define _MK_ADDR_CONST(_constant_) _constant_
#endif

#endif // ifndef ___ARDISPLAY_H_INC_
