//
// DO NOT EDIT - generated by simspec!
//

#ifndef ___ARG2SB_H_INC_
#define ___ARG2SB_H_INC_
//
// --------------------------------------------------------------------------
//
// Copyright (c) 2004,2012, NVIDIA Corp.
// All Rights Reserved.
//
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
//
// --------------------------------------------------------------------------
// Each HW context is register addressable. To address the offsets
// within each HW context, the 16 bit offset to G2 is divided up
// as:
//      11:0  - offset within HW context
//      15:12 - HW context index
//
#define G2SB_REG_OFFSET_CTX_SIZE        4096
#define G2SB_REG_OFFSET_CTX_SIZE_LOG2   12
#define NV_G2SB_INCR_SYNCPT_NB_CONDS    4
#define NV_G2SB_CTX1_INCR_SYNCPT_NB_CONDS       4
#define NV_G2SB_CTX2_INCR_SYNCPT_NB_CONDS       4
#define NV_G2SB_CTX3_INCR_SYNCPT_NB_CONDS       4
#define NV_G2SB_CTX4_INCR_SYNCPT_NB_CONDS       4
#define NV_G2SB_CTX5_INCR_SYNCPT_NB_CONDS       4
#define NV_G2SB_CTX6_INCR_SYNCPT_NB_CONDS       4
#define NV_G2SB_CTX7_INCR_SYNCPT_NB_CONDS       4
//
// --------------------------------------------------------------------------
//
// Copyright (c) 2004, 2012, NVIDIA Corp.
// All Rights Reserved.
//
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
//
// --------------------------------------------------------------------------
// --------------------------------------------------------------------------
//
// Copyright (c) 2004-2012, NVIDIA Corp.
// All Rights Reserved.
//
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
//
// --------------------------------------------------------------------------
//
// Memory Controller Tiling definitions
//
//
//  To enable tiling for a buffer in your module you'll want to include
//  this spec file and then make use of either the ADD_TILE_MODE_REG_SPEC
//  or ADD_TILE_MODE_REG_FIELD_SPEC macro.
//
//  For the ADD_TILE_MODE_REG_SPEC macro, the regp arg is added to the
//  register name as a prefix to match the names of the other registers
//  for this buffer. The fldp is the field name prefix to make the name
//  unique so it works with arreggen generated reg blocks (e.g.):
//
//      // specify how addressing should occur for IB0 buffer
//      ADD_TILE_MODE_REG_SPEC(IB0, IB0);
//
//  There's also a REG_RW_SPEC version, if you need to specify a special
//  flag (e.g. rws for shadow, or rwt for trigger).
//
//  For the ADD_TILE_MODE_REG_FIELD_SPEC macro, the fldp is the field
//  name prefix and bitpos arg describes the starting bit position for
//  this field within another register.
//
//  Like the register version, there's a REG_RW_FIELD_SPEC version if
//  you need to set explicit bits other than "rw".
//
//  Note: this requires having at least NV_MC_TILE_MODEWIDTH bits of
//  space available after bitpos (e.g.) in the register:
//
//      ADD_TILE_MODE_REG_FIELD_SPEC(REF, 16)   // This parameter specifies how addressing
//                                              // for the REF buffer should occur
//
// --------------------------------------------------------------------------
//
// Copyright (c) 2004, NVIDIA Corp.
// All Rights Reserved.
//
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
//
// --------------------------------------------------------------------------
//

// Register G2SB_INCR_SYNCPT_0
#define G2SB_INCR_SYNCPT_0                      _MK_ADDR_CONST(0x0)
#define G2SB_INCR_SYNCPT_0_SECURE                       0x0
#define G2SB_INCR_SYNCPT_0_WORD_COUNT                   0x1
#define G2SB_INCR_SYNCPT_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_INCR_SYNCPT_0_RESET_MASK                   _MK_MASK_CONST(0xffff)
#define G2SB_INCR_SYNCPT_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_INCR_SYNCPT_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_INCR_SYNCPT_0_READ_MASK                    _MK_MASK_CONST(0xffff)
#define G2SB_INCR_SYNCPT_0_WRITE_MASK                   _MK_MASK_CONST(0xffff)
// Condition mapped from raise/wait
#define G2SB_INCR_SYNCPT_0_COND_SHIFT                   _MK_SHIFT_CONST(8)
#define G2SB_INCR_SYNCPT_0_COND_FIELD                   (_MK_MASK_CONST(0xff) << G2SB_INCR_SYNCPT_0_COND_SHIFT)
#define G2SB_INCR_SYNCPT_0_COND_RANGE                   15:8
#define G2SB_INCR_SYNCPT_0_COND_WOFFSET                 0x0
#define G2SB_INCR_SYNCPT_0_COND_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_INCR_SYNCPT_0_COND_DEFAULT_MASK                    _MK_MASK_CONST(0xff)
#define G2SB_INCR_SYNCPT_0_COND_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_INCR_SYNCPT_0_COND_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_INCR_SYNCPT_0_COND_IMMEDIATE                       _MK_ENUM_CONST(0)
#define G2SB_INCR_SYNCPT_0_COND_OP_DONE                 _MK_ENUM_CONST(1)
#define G2SB_INCR_SYNCPT_0_COND_RD_DONE                 _MK_ENUM_CONST(2)
#define G2SB_INCR_SYNCPT_0_COND_REG_WR_SAFE                     _MK_ENUM_CONST(3)
#define G2SB_INCR_SYNCPT_0_COND_COND_4                  _MK_ENUM_CONST(4)
#define G2SB_INCR_SYNCPT_0_COND_COND_5                  _MK_ENUM_CONST(5)
#define G2SB_INCR_SYNCPT_0_COND_COND_6                  _MK_ENUM_CONST(6)
#define G2SB_INCR_SYNCPT_0_COND_COND_7                  _MK_ENUM_CONST(7)
#define G2SB_INCR_SYNCPT_0_COND_COND_8                  _MK_ENUM_CONST(8)
#define G2SB_INCR_SYNCPT_0_COND_COND_9                  _MK_ENUM_CONST(9)
#define G2SB_INCR_SYNCPT_0_COND_COND_10                 _MK_ENUM_CONST(10)
#define G2SB_INCR_SYNCPT_0_COND_COND_11                 _MK_ENUM_CONST(11)
#define G2SB_INCR_SYNCPT_0_COND_COND_12                 _MK_ENUM_CONST(12)
#define G2SB_INCR_SYNCPT_0_COND_COND_13                 _MK_ENUM_CONST(13)
#define G2SB_INCR_SYNCPT_0_COND_COND_14                 _MK_ENUM_CONST(14)
#define G2SB_INCR_SYNCPT_0_COND_COND_15                 _MK_ENUM_CONST(15)

// syncpt index value
#define G2SB_INCR_SYNCPT_0_INDX_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_INCR_SYNCPT_0_INDX_FIELD                   (_MK_MASK_CONST(0xff) << G2SB_INCR_SYNCPT_0_INDX_SHIFT)
#define G2SB_INCR_SYNCPT_0_INDX_RANGE                   7:0
#define G2SB_INCR_SYNCPT_0_INDX_WOFFSET                 0x0
#define G2SB_INCR_SYNCPT_0_INDX_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_INCR_SYNCPT_0_INDX_DEFAULT_MASK                    _MK_MASK_CONST(0xff)
#define G2SB_INCR_SYNCPT_0_INDX_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_INCR_SYNCPT_0_INDX_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_INCR_SYNCPT_CNTRL_0
#define G2SB_INCR_SYNCPT_CNTRL_0                        _MK_ADDR_CONST(0x1)
#define G2SB_INCR_SYNCPT_CNTRL_0_SECURE                         0x0
#define G2SB_INCR_SYNCPT_CNTRL_0_WORD_COUNT                     0x1
#define G2SB_INCR_SYNCPT_CNTRL_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_INCR_SYNCPT_CNTRL_0_RESET_MASK                     _MK_MASK_CONST(0x101)
#define G2SB_INCR_SYNCPT_CNTRL_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_INCR_SYNCPT_CNTRL_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_INCR_SYNCPT_CNTRL_0_READ_MASK                      _MK_MASK_CONST(0x101)
#define G2SB_INCR_SYNCPT_CNTRL_0_WRITE_MASK                     _MK_MASK_CONST(0x101)
// If NO_STALL is 1, then when fifos are full,
// INCR_SYNCPT methods will be dropped and the
// INCR_SYNCPT_ERROR[COND] bit will be set.
// If NO_STALL is 0, then when fifos are full,
// the client host interface will be stalled.
#define G2SB_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SHIFT                     _MK_SHIFT_CONST(8)
#define G2SB_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SHIFT)
#define G2SB_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_RANGE                     8:8
#define G2SB_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_WOFFSET                   0x0
#define G2SB_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// If SOFT_RESET is set, then all internal state
// of the client syncpt block will be reset.
// To do soft reset, first set SOFT_RESET of
// all host1x clients affected, then clear all
// SOFT_RESETs.
#define G2SB_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SHIFT)
#define G2SB_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_RANGE                   0:0
#define G2SB_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_WOFFSET                 0x0
#define G2SB_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_INCR_SYNCPT_ERROR_0
#define G2SB_INCR_SYNCPT_ERROR_0                        _MK_ADDR_CONST(0x2)
#define G2SB_INCR_SYNCPT_ERROR_0_SECURE                         0x0
#define G2SB_INCR_SYNCPT_ERROR_0_WORD_COUNT                     0x1
#define G2SB_INCR_SYNCPT_ERROR_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_INCR_SYNCPT_ERROR_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_INCR_SYNCPT_ERROR_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_INCR_SYNCPT_ERROR_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_INCR_SYNCPT_ERROR_0_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define G2SB_INCR_SYNCPT_ERROR_0_WRITE_MASK                     _MK_MASK_CONST(0xffffffff)
// COND_STATUS[COND] is set if the fifo for COND overflows.
// This bit is sticky and will remain set until cleared.
// Cleared by writing 1.
#define G2SB_INCR_SYNCPT_ERROR_0_COND_STATUS_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_INCR_SYNCPT_ERROR_0_COND_STATUS_FIELD                      (_MK_MASK_CONST(0xffffffff) << G2SB_INCR_SYNCPT_ERROR_0_COND_STATUS_SHIFT)
#define G2SB_INCR_SYNCPT_ERROR_0_COND_STATUS_RANGE                      31:0
#define G2SB_INCR_SYNCPT_ERROR_0_COND_STATUS_WOFFSET                    0x0
#define G2SB_INCR_SYNCPT_ERROR_0_COND_STATUS_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_INCR_SYNCPT_ERROR_0_COND_STATUS_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_INCR_SYNCPT_ERROR_0_COND_STATUS_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_INCR_SYNCPT_ERROR_0_COND_STATUS_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// reserve locations for future expansion

// Reserved address 3 [0x3]

// Reserved address 4 [0x4]

// Reserved address 5 [0x5]

// Reserved address 6 [0x6]

// Reserved address 7 [0x7]
// just in case names were redefined using macros
// 2D syncpt behavior
//     - Each 2D context has its own syncpt client.
//     - OP_DONE increments when 2D's memory write client is idle, meaning all
//           preceding operations are complete.
//     - RD_DONE behaves like OP_DONE
//     - REG_WR_SAFE behaves like IMMEDIATE meaning a syncpt increment returns
//         immediately and does not indicate that a register write will NOT block.
//         The implications are that 2D's host FIFO can fill and block access to 2D,
//         which will indeterminately block a direct CPU access.

// Register G2SB_G2CLASSCHANNEL_REGONLY_0  //{index=8}
// This register can be accessed by both register read/write and command fifo
// in order not to break exsting code , keep suffix REGONLY.
//
#define G2SB_G2CLASSCHANNEL_REGONLY_0                   _MK_ADDR_CONST(0x8)
#define G2SB_G2CLASSCHANNEL_REGONLY_0_SECURE                    0x0
#define G2SB_G2CLASSCHANNEL_REGONLY_0_WORD_COUNT                        0x1
#define G2SB_G2CLASSCHANNEL_REGONLY_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_G2CLASSCHANNEL_REGONLY_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2CLASSCHANNEL_REGONLY_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_G2CLASSCHANNEL_REGONLY_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_G2CLASSCHANNEL_REGONLY_0_READ_MASK                         _MK_MASK_CONST(0x1f03ff)
#define G2SB_G2CLASSCHANNEL_REGONLY_0_WRITE_MASK                        _MK_MASK_CONST(0x1f0000)
#define G2SB_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_FIELD                  (_MK_MASK_CONST(0x3ff) << G2SB_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SHIFT)
#define G2SB_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_RANGE                  9:0
#define G2SB_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_WOFFSET                        0x0
#define G2SB_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_FIELD                        (_MK_MASK_CONST(0xf) << G2SB_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SHIFT)
#define G2SB_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_RANGE                        19:16
#define G2SB_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_WOFFSET                      0x0
#define G2SB_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

#define G2SB_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SHIFT                   _MK_SHIFT_CONST(20)
#define G2SB_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SHIFT)
#define G2SB_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_RANGE                   20:20
#define G2SB_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_WOFFSET                 0x0
#define G2SB_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Control methods, since they are not programmed often, put them is the beginning

// Register G2SB_G2TRIGGER_0  //{host,2d,sb,index=9}
#define G2SB_G2TRIGGER_0                        _MK_ADDR_CONST(0x9)
#define G2SB_G2TRIGGER_0_SECURE                         0x0
#define G2SB_G2TRIGGER_0_WORD_COUNT                     0x1
#define G2SB_G2TRIGGER_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_G2TRIGGER_0_RESET_MASK                     _MK_MASK_CONST(0xffff)
#define G2SB_G2TRIGGER_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_G2TRIGGER_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2TRIGGER_0_READ_MASK                      _MK_MASK_CONST(0xffff)
#define G2SB_G2TRIGGER_0_WRITE_MASK                     _MK_MASK_CONST(0xffff)
#define G2SB_G2TRIGGER_0_TRIGGER_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_G2TRIGGER_0_TRIGGER_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_G2TRIGGER_0_TRIGGER_SHIFT)
#define G2SB_G2TRIGGER_0_TRIGGER_RANGE                  15:0
#define G2SB_G2TRIGGER_0_TRIGGER_WOFFSET                        0x0
#define G2SB_G2TRIGGER_0_TRIGGER_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2TRIGGER_0_TRIGGER_DEFAULT_MASK                   _MK_MASK_CONST(0xffff)
#define G2SB_G2TRIGGER_0_TRIGGER_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2TRIGGER_0_TRIGGER_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register G2SB_G2TRIGGER1_0  //{host,2d,sb,index=a}
#define G2SB_G2TRIGGER1_0                       _MK_ADDR_CONST(0xa)
#define G2SB_G2TRIGGER1_0_SECURE                        0x0
#define G2SB_G2TRIGGER1_0_WORD_COUNT                    0x1
#define G2SB_G2TRIGGER1_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_G2TRIGGER1_0_RESET_MASK                    _MK_MASK_CONST(0xffff)
#define G2SB_G2TRIGGER1_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_G2TRIGGER1_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2TRIGGER1_0_READ_MASK                     _MK_MASK_CONST(0xffff)
#define G2SB_G2TRIGGER1_0_WRITE_MASK                    _MK_MASK_CONST(0xffff)
#define G2SB_G2TRIGGER1_0_TRIGGER1_SHIFT                        _MK_SHIFT_CONST(0)
#define G2SB_G2TRIGGER1_0_TRIGGER1_FIELD                        (_MK_MASK_CONST(0xffff) << G2SB_G2TRIGGER1_0_TRIGGER1_SHIFT)
#define G2SB_G2TRIGGER1_0_TRIGGER1_RANGE                        15:0
#define G2SB_G2TRIGGER1_0_TRIGGER1_WOFFSET                      0x0
#define G2SB_G2TRIGGER1_0_TRIGGER1_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2TRIGGER1_0_TRIGGER1_DEFAULT_MASK                 _MK_MASK_CONST(0xffff)
#define G2SB_G2TRIGGER1_0_TRIGGER1_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2TRIGGER1_0_TRIGGER1_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)


// Register G2SB_G2TRIGGER2_0  //{2d,index=b}
#define G2SB_G2TRIGGER2_0                       _MK_ADDR_CONST(0xb)
#define G2SB_G2TRIGGER2_0_SECURE                        0x0
#define G2SB_G2TRIGGER2_0_WORD_COUNT                    0x1
#define G2SB_G2TRIGGER2_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_G2TRIGGER2_0_RESET_MASK                    _MK_MASK_CONST(0xffff)
#define G2SB_G2TRIGGER2_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_G2TRIGGER2_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2TRIGGER2_0_READ_MASK                     _MK_MASK_CONST(0xffff)
#define G2SB_G2TRIGGER2_0_WRITE_MASK                    _MK_MASK_CONST(0xffff)
#define G2SB_G2TRIGGER2_0_TRIGGER2_SHIFT                        _MK_SHIFT_CONST(0)
#define G2SB_G2TRIGGER2_0_TRIGGER2_FIELD                        (_MK_MASK_CONST(0xffff) << G2SB_G2TRIGGER2_0_TRIGGER2_SHIFT)
#define G2SB_G2TRIGGER2_0_TRIGGER2_RANGE                        15:0
#define G2SB_G2TRIGGER2_0_TRIGGER2_WOFFSET                      0x0
#define G2SB_G2TRIGGER2_0_TRIGGER2_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2TRIGGER2_0_TRIGGER2_DEFAULT_MASK                 _MK_MASK_CONST(0xffff)
#define G2SB_G2TRIGGER2_0_TRIGGER2_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2TRIGGER2_0_TRIGGER2_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)


// Register G2SB_G2CMDSEL_0  //{host,2d,sb,index=c}
#define G2SB_G2CMDSEL_0                 _MK_ADDR_CONST(0xc)
#define G2SB_G2CMDSEL_0_SECURE                  0x0
#define G2SB_G2CMDSEL_0_WORD_COUNT                      0x1
#define G2SB_G2CMDSEL_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_RESET_MASK                      _MK_MASK_CONST(0x1100d7f1)
#define G2SB_G2CMDSEL_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_READ_MASK                       _MK_MASK_CONST(0x1fffd7f1)
#define G2SB_G2CMDSEL_0_WRITE_MASK                      _MK_MASK_CONST(0x1fffd7f0)
#define G2SB_G2CMDSEL_0_SBOR2D_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_G2CMDSEL_0_SBOR2D_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_G2CMDSEL_0_SBOR2D_SHIFT)
#define G2SB_G2CMDSEL_0_SBOR2D_RANGE                    0:0
#define G2SB_G2CMDSEL_0_SBOR2D_WOFFSET                  0x0
#define G2SB_G2CMDSEL_0_SBOR2D_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_SBOR2D_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_G2CMDSEL_0_SBOR2D_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_SBOR2D_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_SBOR2D_G2                       _MK_ENUM_CONST(0)
#define G2SB_G2CMDSEL_0_SBOR2D_SB                       _MK_ENUM_CONST(1)

//circular buffer feature enable    0= disable
#define G2SB_G2CMDSEL_0_CBENABLE_SHIFT                  _MK_SHIFT_CONST(4)
#define G2SB_G2CMDSEL_0_CBENABLE_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_G2CMDSEL_0_CBENABLE_SHIFT)
#define G2SB_G2CMDSEL_0_CBENABLE_RANGE                  4:4
#define G2SB_G2CMDSEL_0_CBENABLE_WOFFSET                        0x0
#define G2SB_G2CMDSEL_0_CBENABLE_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_CBENABLE_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_G2CMDSEL_0_CBENABLE_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_CBENABLE_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_CBENABLE_DISABLE                        _MK_ENUM_CONST(0)
#define G2SB_G2CMDSEL_0_CBENABLE_ENABLE                 _MK_ENUM_CONST(1)

//VI trigger enable, can be circular buffer or full frame
#define G2SB_G2CMDSEL_0_VITRIGGER_SHIFT                 _MK_SHIFT_CONST(5)
#define G2SB_G2CMDSEL_0_VITRIGGER_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_G2CMDSEL_0_VITRIGGER_SHIFT)
#define G2SB_G2CMDSEL_0_VITRIGGER_RANGE                 5:5
#define G2SB_G2CMDSEL_0_VITRIGGER_WOFFSET                       0x0
#define G2SB_G2CMDSEL_0_VITRIGGER_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_VITRIGGER_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_G2CMDSEL_0_VITRIGGER_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_VITRIGGER_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//host trigger the command, host also need program cicular buffer related data
#define G2SB_G2CMDSEL_0_HOSTTRIGGER_SHIFT                       _MK_SHIFT_CONST(6)
#define G2SB_G2CMDSEL_0_HOSTTRIGGER_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_G2CMDSEL_0_HOSTTRIGGER_SHIFT)
#define G2SB_G2CMDSEL_0_HOSTTRIGGER_RANGE                       6:6
#define G2SB_G2CMDSEL_0_HOSTTRIGGER_WOFFSET                     0x0
#define G2SB_G2CMDSEL_0_HOSTTRIGGER_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_HOSTTRIGGER_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_G2CMDSEL_0_HOSTTRIGGER_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_HOSTTRIGGER_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

#define G2SB_G2CMDSEL_0_CBSBDISABLE_SHIFT                       _MK_SHIFT_CONST(7)
#define G2SB_G2CMDSEL_0_CBSBDISABLE_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_G2CMDSEL_0_CBSBDISABLE_SHIFT)
#define G2SB_G2CMDSEL_0_CBSBDISABLE_RANGE                       7:7
#define G2SB_G2CMDSEL_0_CBSBDISABLE_WOFFSET                     0x0
#define G2SB_G2CMDSEL_0_CBSBDISABLE_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_CBSBDISABLE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_G2CMDSEL_0_CBSBDISABLE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_CBSBDISABLE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// 00: to memory
// 01: to EPP
#define G2SB_G2CMDSEL_0_G2OUTPUT_SHIFT                  _MK_SHIFT_CONST(8)
#define G2SB_G2CMDSEL_0_G2OUTPUT_FIELD                  (_MK_MASK_CONST(0x3) << G2SB_G2CMDSEL_0_G2OUTPUT_SHIFT)
#define G2SB_G2CMDSEL_0_G2OUTPUT_RANGE                  9:8
#define G2SB_G2CMDSEL_0_G2OUTPUT_WOFFSET                        0x0
#define G2SB_G2CMDSEL_0_G2OUTPUT_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_G2OUTPUT_DEFAULT_MASK                   _MK_MASK_CONST(0x3)
#define G2SB_G2CMDSEL_0_G2OUTPUT_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_G2OUTPUT_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_G2OUTPUT_MEMORY                 _MK_ENUM_CONST(0)
#define G2SB_G2CMDSEL_0_G2OUTPUT_EPP                    _MK_ENUM_CONST(1)
#define G2SB_G2CMDSEL_0_G2OUTPUT_RESERVED2                      _MK_ENUM_CONST(2)
#define G2SB_G2CMDSEL_0_G2OUTPUT_RESERVED3                      _MK_ENUM_CONST(3)

// Reserved for HW Test, SW should not use this bit.
#define G2SB_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SHIFT                    _MK_SHIFT_CONST(10)
#define G2SB_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SHIFT)
#define G2SB_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_RANGE                    10:10
#define G2SB_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_WOFFSET                  0x0
#define G2SB_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_DISABLE                  _MK_ENUM_CONST(0)
#define G2SB_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_ENABLE                   _MK_ENUM_CONST(1)

#define G2SB_G2CMDSEL_0_LINK_WAIT_BUF_END_SHIFT                 _MK_SHIFT_CONST(12)
#define G2SB_G2CMDSEL_0_LINK_WAIT_BUF_END_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_G2CMDSEL_0_LINK_WAIT_BUF_END_SHIFT)
#define G2SB_G2CMDSEL_0_LINK_WAIT_BUF_END_RANGE                 12:12
#define G2SB_G2CMDSEL_0_LINK_WAIT_BUF_END_WOFFSET                       0x0
#define G2SB_G2CMDSEL_0_LINK_WAIT_BUF_END_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_LINK_WAIT_BUF_END_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_G2CMDSEL_0_LINK_WAIT_BUF_END_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_LINK_WAIT_BUF_END_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//host writes this bit to tell which buffer is ready
#define G2SB_G2CMDSEL_0_FRAME_START_SHIFT                       _MK_SHIFT_CONST(14)
#define G2SB_G2CMDSEL_0_FRAME_START_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_G2CMDSEL_0_FRAME_START_SHIFT)
#define G2SB_G2CMDSEL_0_FRAME_START_RANGE                       14:14
#define G2SB_G2CMDSEL_0_FRAME_START_WOFFSET                     0x0
#define G2SB_G2CMDSEL_0_FRAME_START_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_FRAME_START_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_G2CMDSEL_0_FRAME_START_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_FRAME_START_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

#define G2SB_G2CMDSEL_0_FRAME_END_SHIFT                 _MK_SHIFT_CONST(15)
#define G2SB_G2CMDSEL_0_FRAME_END_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_G2CMDSEL_0_FRAME_END_SHIFT)
#define G2SB_G2CMDSEL_0_FRAME_END_RANGE                 15:15
#define G2SB_G2CMDSEL_0_FRAME_END_WOFFSET                       0x0
#define G2SB_G2CMDSEL_0_FRAME_END_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_FRAME_END_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_G2CMDSEL_0_FRAME_END_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_FRAME_END_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

#define G2SB_G2CMDSEL_0_BUFFER_INDEX_SHIFT                      _MK_SHIFT_CONST(16)
#define G2SB_G2CMDSEL_0_BUFFER_INDEX_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_G2CMDSEL_0_BUFFER_INDEX_SHIFT)
#define G2SB_G2CMDSEL_0_BUFFER_INDEX_RANGE                      23:16
#define G2SB_G2CMDSEL_0_BUFFER_INDEX_WOFFSET                    0x0
#define G2SB_G2CMDSEL_0_BUFFER_INDEX_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_BUFFER_INDEX_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_BUFFER_INDEX_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_BUFFER_INDEX_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

//Test purpose
#define G2SB_G2CMDSEL_0_LINKEN_SHIFT                    _MK_SHIFT_CONST(24)
#define G2SB_G2CMDSEL_0_LINKEN_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_G2CMDSEL_0_LINKEN_SHIFT)
#define G2SB_G2CMDSEL_0_LINKEN_RANGE                    24:24
#define G2SB_G2CMDSEL_0_LINKEN_WOFFSET                  0x0
#define G2SB_G2CMDSEL_0_LINKEN_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_LINKEN_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_G2CMDSEL_0_LINKEN_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_LINKEN_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

#define G2SB_G2CMDSEL_0_LINKVAL_SHIFT                   _MK_SHIFT_CONST(25)
#define G2SB_G2CMDSEL_0_LINKVAL_FIELD                   (_MK_MASK_CONST(0x7) << G2SB_G2CMDSEL_0_LINKVAL_SHIFT)
#define G2SB_G2CMDSEL_0_LINKVAL_RANGE                   27:25
#define G2SB_G2CMDSEL_0_LINKVAL_WOFFSET                 0x0
#define G2SB_G2CMDSEL_0_LINKVAL_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_LINKVAL_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_LINKVAL_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_LINKVAL_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// indicates priority of the context, note vi-triggered contexts take priority over HIGH
#define G2SB_G2CMDSEL_0_PRIORITY_SHIFT                  _MK_SHIFT_CONST(28)
#define G2SB_G2CMDSEL_0_PRIORITY_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_G2CMDSEL_0_PRIORITY_SHIFT)
#define G2SB_G2CMDSEL_0_PRIORITY_RANGE                  28:28
#define G2SB_G2CMDSEL_0_PRIORITY_WOFFSET                        0x0
#define G2SB_G2CMDSEL_0_PRIORITY_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_PRIORITY_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_G2CMDSEL_0_PRIORITY_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_PRIORITY_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2CMDSEL_0_PRIORITY_LOW                    _MK_ENUM_CONST(0)
#define G2SB_G2CMDSEL_0_PRIORITY_HIGH                   _MK_ENUM_CONST(1)


// Register G2SB_G2RAISE_0  //{host,2d,sb,index=d}
#define G2SB_G2RAISE_0                  _MK_ADDR_CONST(0xd)
#define G2SB_G2RAISE_0_SECURE                   0x0
#define G2SB_G2RAISE_0_WORD_COUNT                       0x1
#define G2SB_G2RAISE_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_G2RAISE_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2RAISE_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_G2RAISE_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2RAISE_0_READ_MASK                        _MK_MASK_CONST(0xf001f)
#define G2SB_G2RAISE_0_WRITE_MASK                       _MK_MASK_CONST(0xf001f)
//Push back to read fifo when all commands in the channel are done.
#define G2SB_G2RAISE_0_RAISE_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_G2RAISE_0_RAISE_FIELD                      (_MK_MASK_CONST(0x1f) << G2SB_G2RAISE_0_RAISE_SHIFT)
#define G2SB_G2RAISE_0_RAISE_RANGE                      4:0
#define G2SB_G2RAISE_0_RAISE_WOFFSET                    0x0
#define G2SB_G2RAISE_0_RAISE_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2RAISE_0_RAISE_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2RAISE_0_RAISE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2RAISE_0_RAISE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

#define G2SB_G2RAISE_0_RAISECHANNEL_SHIFT                       _MK_SHIFT_CONST(16)
#define G2SB_G2RAISE_0_RAISECHANNEL_FIELD                       (_MK_MASK_CONST(0xf) << G2SB_G2RAISE_0_RAISECHANNEL_SHIFT)
#define G2SB_G2RAISE_0_RAISECHANNEL_RANGE                       19:16
#define G2SB_G2RAISE_0_RAISECHANNEL_WOFFSET                     0x0
#define G2SB_G2RAISE_0_RAISECHANNEL_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2RAISE_0_RAISECHANNEL_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2RAISE_0_RAISECHANNEL_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2RAISE_0_RAISECHANNEL_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Reserved address 14 [0xe]
//reg G2REFCOUNT incr1  //{host,2d,sb,index=e}
//#if (NV_HOST1X_HAS_FEATURE_REFCOUNT32B == 1)
//     31:0   rw REFCOUNT
//#else
//     15:0   rw REFCOUNT
//#endif
//    ;

// Register G2SB_G2HOSTSET_0  //{host,2d,index=f}
#define G2SB_G2HOSTSET_0                        _MK_ADDR_CONST(0xf)
#define G2SB_G2HOSTSET_0_SECURE                         0x0
#define G2SB_G2HOSTSET_0_WORD_COUNT                     0x1
#define G2SB_G2HOSTSET_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_G2HOSTSET_0_RESET_MASK                     _MK_MASK_CONST(0xff)
#define G2SB_G2HOSTSET_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_G2HOSTSET_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2HOSTSET_0_READ_MASK                      _MK_MASK_CONST(0xff)
#define G2SB_G2HOSTSET_0_WRITE_MASK                     _MK_MASK_CONST(0xff)
//  specifies distance (in byte) from last pixel of a line to the first
//  pixel of next line.
//  In mono mode, the value is the nearest byte number.
//  E.G. if gap is 3 bits, HSTLNGAP should be 1 (byte),
// if gap is 9 bits, HSTLNGAP should be 2 (byte)
#define G2SB_G2HOSTSET_0_HSTLNGAP_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_G2HOSTSET_0_HSTLNGAP_FIELD                 (_MK_MASK_CONST(0xf) << G2SB_G2HOSTSET_0_HSTLNGAP_SHIFT)
#define G2SB_G2HOSTSET_0_HSTLNGAP_RANGE                 3:0
#define G2SB_G2HOSTSET_0_HSTLNGAP_WOFFSET                       0x0
#define G2SB_G2HOSTSET_0_HSTLNGAP_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2HOSTSET_0_HSTLNGAP_DEFAULT_MASK                  _MK_MASK_CONST(0xf)
#define G2SB_G2HOSTSET_0_HSTLNGAP_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2HOSTSET_0_HSTLNGAP_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// specifies the
//  first pixel location (in byte) in the first source data entry.
// In mono mode pixel should always start in byte boundary
#define G2SB_G2HOSTSET_0_HSTFPXL_SHIFT                  _MK_SHIFT_CONST(4)
#define G2SB_G2HOSTSET_0_HSTFPXL_FIELD                  (_MK_MASK_CONST(0xf) << G2SB_G2HOSTSET_0_HSTFPXL_SHIFT)
#define G2SB_G2HOSTSET_0_HSTFPXL_RANGE                  7:4
#define G2SB_G2HOSTSET_0_HSTFPXL_WOFFSET                        0x0
#define G2SB_G2HOSTSET_0_HSTFPXL_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2HOSTSET_0_HSTFPXL_DEFAULT_MASK                   _MK_MASK_CONST(0xf)
#define G2SB_G2HOSTSET_0_HSTFPXL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2HOSTSET_0_HSTFPXL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register G2SB_G2HOSTFIFO_0  //{host,2d,sb,index=10}
#define G2SB_G2HOSTFIFO_0                       _MK_ADDR_CONST(0x10)
#define G2SB_G2HOSTFIFO_0_SECURE                        0x0
#define G2SB_G2HOSTFIFO_0_WORD_COUNT                    0x1
#define G2SB_G2HOSTFIFO_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_G2HOSTFIFO_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_G2HOSTFIFO_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_G2HOSTFIFO_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2HOSTFIFO_0_READ_MASK                     _MK_MASK_CONST(0xffffffff)
#define G2SB_G2HOSTFIFO_0_WRITE_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_G2HOSTFIFO_0_HOSTFIFODATA_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_G2HOSTFIFO_0_HOSTFIFODATA_FIELD                    (_MK_MASK_CONST(0xffffffff) << G2SB_G2HOSTFIFO_0_HOSTFIFODATA_SHIFT)
#define G2SB_G2HOSTFIFO_0_HOSTFIFODATA_RANGE                    31:0
#define G2SB_G2HOSTFIFO_0_HOSTFIFODATA_WOFFSET                  0x0
#define G2SB_G2HOSTFIFO_0_HOSTFIFODATA_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2HOSTFIFO_0_HOSTFIFODATA_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2HOSTFIFO_0_HOSTFIFODATA_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2HOSTFIFO_0_HOSTFIFODATA_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_G2VDDA_0  //{sb,sbm,index=11}
#define G2SB_G2VDDA_0                   _MK_ADDR_CONST(0x11)
#define G2SB_G2VDDA_0_SECURE                    0x0
#define G2SB_G2VDDA_0_WORD_COUNT                        0x1
#define G2SB_G2VDDA_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_G2VDDA_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2VDDA_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_G2VDDA_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_G2VDDA_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_G2VDDA_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
//Vertical Scaling DDA
//Reset value: xxxx-xxxxh
//Vertical DDA Step (Increment) Value (VDSTEP[18:0])
// (upper 13 bits should be set to '0')
//This parameter specifies the increment value of the DDA used
//for vertical scaling and it is in the form of 6-bit integer and
//12-bit fraction.  This value is detemined by the equation:
// (Actual_source_height-1-VDTINI) / (Actual_destination_height-1)
// Truncate the rest bits to keep the 12bits fraction. Since we have to meet
// (Actual_source_height-1)*1.0 >= (Actual_destination_height - 1)*VDSTEP + VDTINI
// Refer to bug 353260 for more detail.
//The 6-bit integer allows maximum contraction ratio of 1/64, and
// 12-bit fraction assures the maximum limit of accumulated error less
// than half line-spacing for up to approximately 2000 target lines.
//For example, image expansion from 240 lines to 400 lines
//  VDSTEP[17:0]  =  19'b00_0000_1001_1001_1010   and
//image contraction from 240 lines to 150 lines
//   VDSTEP[17:0]  =  19'b00_0001_1001_1001_1010.
#define G2SB_G2VDDA_0_VDSTEP_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_G2VDDA_0_VDSTEP_FIELD                      (_MK_MASK_CONST(0xffffffff) << G2SB_G2VDDA_0_VDSTEP_SHIFT)
#define G2SB_G2VDDA_0_VDSTEP_RANGE                      31:0
#define G2SB_G2VDDA_0_VDSTEP_WOFFSET                    0x0
#define G2SB_G2VDDA_0_VDSTEP_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2VDDA_0_VDSTEP_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2VDDA_0_VDSTEP_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2VDDA_0_VDSTEP_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_G2VDDAINI_0  //{sb,sbm,index=12}
#define G2SB_G2VDDAINI_0                        _MK_ADDR_CONST(0x12)
#define G2SB_G2VDDAINI_0_SECURE                         0x0
#define G2SB_G2VDDAINI_0_WORD_COUNT                     0x1
#define G2SB_G2VDDAINI_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_G2VDDAINI_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2VDDAINI_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_G2VDDAINI_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2VDDAINI_0_READ_MASK                      _MK_MASK_CONST(0xffff)
#define G2SB_G2VDDAINI_0_WRITE_MASK                     _MK_MASK_CONST(0xffff)
//Vertical Scaling DDA Initial Values
//Vertical DDA Initial Value for Top-Field (VDTINI[7:0])
//This parameter specifies the fraction part of initial
// value of the DDA used for vertical scaling.
//Given a pair of consecutive source image lines representing
// positions 0.0 and 1.0, a destination line-image will be created
// at any position in [0.0, 1.0), that is specified by the fraction
// part of the vertical DDA. The 8-bit initial fraction value
// specifies the position of the first output (destination) line-image
// located between the first and the second input (source) line-images,
// respectively at position 0.0 and 1.0.
//This parameter provides a way to compensate relative displacement of
// top and bottom fields of a source image. Suppose, 2-to-1 interlaced
// original video field images #1 and #2 are in the image buffer, to be
// displayed in an overlay window. Assume that the #1 field image is the
// top-field. Using VDTINI = 8'hC0 for the top-field image and
// VDBINI = 8'h40 for the bottom-field image, for example, the two images
// from #1 and #2 fields get mapped to identically positioned destination
// images in the overlay window.
#define G2SB_G2VDDAINI_0_VDTINI_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_G2VDDAINI_0_VDTINI_FIELD                   (_MK_MASK_CONST(0xff) << G2SB_G2VDDAINI_0_VDTINI_SHIFT)
#define G2SB_G2VDDAINI_0_VDTINI_RANGE                   7:0
#define G2SB_G2VDDAINI_0_VDTINI_WOFFSET                 0x0
#define G2SB_G2VDDAINI_0_VDTINI_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2VDDAINI_0_VDTINI_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_G2VDDAINI_0_VDTINI_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2VDDAINI_0_VDTINI_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

//Vertical DDA Initial Value for Bottom-Field (VDBINI[7:0])
// (see description above)
#define G2SB_G2VDDAINI_0_VDBINI_SHIFT                   _MK_SHIFT_CONST(8)
#define G2SB_G2VDDAINI_0_VDBINI_FIELD                   (_MK_MASK_CONST(0xff) << G2SB_G2VDDAINI_0_VDBINI_SHIFT)
#define G2SB_G2VDDAINI_0_VDBINI_RANGE                   15:8
#define G2SB_G2VDDAINI_0_VDBINI_WOFFSET                 0x0
#define G2SB_G2VDDAINI_0_VDBINI_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2VDDAINI_0_VDBINI_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_G2VDDAINI_0_VDBINI_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2VDDAINI_0_VDBINI_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_G2HDDA_0  //{sb,sbm,index=13}
#define G2SB_G2HDDA_0                   _MK_ADDR_CONST(0x13)
#define G2SB_G2HDDA_0_SECURE                    0x0
#define G2SB_G2HDDA_0_WORD_COUNT                        0x1
#define G2SB_G2HDDA_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_G2HDDA_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2HDDA_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_G2HDDA_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_G2HDDA_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_G2HDDA_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
//Horizontal Scaling DDA
//Reset value: xxxx-xxxxh
//Horizontal DDA Step (Increment) Value (HDSTEP[18:0])
// (upper 13 bits should be set to '0')
//This parameter specifies the increment value of the DDA used
//for horizontal scaling and it is in the form of 6-bit integer and
//12-bit fraction.  This value is detemined by the equation:
// (Actual_source_width-1-HDINI) / (Actual_destination_width-1)
// Truncate the rest bits to keep the 12bits fraction.
// Refer to bug 353260 for more detail.
//The 6-bit integer allows maximum contraction ratio of 1/64, and
// 12-bit fraction assures the maximum limit of accumulated error less
// than half pixel-spacing for up to approximately 2000 destination pixels.
//For example, image expansion from 720 pixels to 800 pixels
//       HDSTEP[17:0]  =  19'b000_0000_1110_0110_0111   and
//image contraction from 720 pixels to 250 pixels
// HDSTEP[17:0]  =  19'b000_0010_1110_0001_0101.
#define G2SB_G2HDDA_0_HDSTEP_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_G2HDDA_0_HDSTEP_FIELD                      (_MK_MASK_CONST(0xffffffff) << G2SB_G2HDDA_0_HDSTEP_SHIFT)
#define G2SB_G2HDDA_0_HDSTEP_RANGE                      31:0
#define G2SB_G2HDDA_0_HDSTEP_WOFFSET                    0x0
#define G2SB_G2HDDA_0_HDSTEP_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2HDDA_0_HDSTEP_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2HDDA_0_HDSTEP_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2HDDA_0_HDSTEP_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_G2HDDAINILS_0  //{sb,sbm,index=14}
#define G2SB_G2HDDAINILS_0                      _MK_ADDR_CONST(0x14)
#define G2SB_G2HDDAINILS_0_SECURE                       0x0
#define G2SB_G2HDDAINILS_0_WORD_COUNT                   0x1
#define G2SB_G2HDDAINILS_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_G2HDDAINILS_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_G2HDDAINILS_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_G2HDDAINILS_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2HDDAINILS_0_READ_MASK                    _MK_MASK_CONST(0xff)
#define G2SB_G2HDDAINILS_0_WRITE_MASK                   _MK_MASK_CONST(0xff)
//Horizontal Scaling DDA Initial Value
//Horizontal DDA Initial Value (HDINI[7:0])
//This parameter specifies the fraction part of initial value
// of the DDA used for horizontal scaling.
//Given a group of six consecutive source pixels that
// the two pixels at the center representing positions 0.0
//and 1.0, a destination pixel will be created at any
// position in [0.0, 1.0), that is specified by the fraction part
//of the horizontal DDA. The 8-bit initial fraction
// value specifies the position of the first output (destination)
//pixel located between the first and the second input (source)
// pixels, respectively at position 0.0 and 1.0.
//For horizontal scaling this value may normally be set to 0.
#define G2SB_G2HDDAINILS_0_HDINI_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_G2HDDAINILS_0_HDINI_FIELD                  (_MK_MASK_CONST(0xff) << G2SB_G2HDDAINILS_0_HDINI_SHIFT)
#define G2SB_G2HDDAINILS_0_HDINI_RANGE                  7:0
#define G2SB_G2HDDAINILS_0_HDINI_WOFFSET                        0x0
#define G2SB_G2HDDAINILS_0_HDINI_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2HDDAINILS_0_HDINI_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_G2HDDAINILS_0_HDINI_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2HDDAINILS_0_HDINI_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register G2SB_G2CSCFIRST_0  //{sb,sbm,index=15}
// The next 3 registers contain 8 parameters used by the YCbCr (YUV)
// to RGB color space conversion logic.  This logic can also be
// used for RGB gain/gamma correction in RGB to RGB modes, and for
// luma gain in YUV to YUV modes.  For SC20 two new parameters
// (G2U, G2V) have been added for RGB to YUV conversion.  These are
// in address 0x38.  The equtions have the form:
//    YUV->RGB
// R = (CYX * (yin + YOS)) + ((CUR * uin) + (CVR * vin))
// G = (CYX * (yin + YOS)) + ((CUG * uin) + (CVG * vin))
// B = (CYX * (yin + YOS)) + ((CUB * uin) + (CVB * vin))
//    RGB -> RGB
// R = (CVR * rin) + (CUR * bin)
// G = (CYX * (gin + YOS)) + ((CUG * bin) + (CVG * rin))
// B = (CUB * bin) + (CVB * rin)
//    YUV -> YUV (not what rtl does: see note below)
// Y = (CYX * yin + YOS) + ((CUB * uin) + (CVB * vin))
// U = (CUG * uin) + (CVG * vin)
// V = (CVR * vin) + (CUR * uin)
//    RGB -> YUV (new for SC20)
// Y = (CVB * rin) + (CUB * bin) + (CYX * gin) + YOS
// U = (CVG * rin) + (CUG * bin) + (G2U * gin)
// V = (CVR * rin) + (CUR * bin) + (G2V * gin)
//
// NOTE: YUV->YUV above is definitely wrong
// the cmodel *appears* to match the RTL with the following pseudo-code:
//
//if (yuv2rgb)
//    (r,g,b) = matrix*(y+sbreg_yos,u,v)
//    matrix:
//        sbreg_cyx, sbreg_cur, sbreg_cvr,
//        sbreg_cyx, sbreg_cug, sbreg_cvg,
//        sbreg_cyx, sbreg_cub, sbreg_cvb,
//else if (rgb2rgb)
//    (r,g,b) = matrix*(r,g+sbreg_yos,b)
//    matrix:
//        sbreg_cvr, 0,         sbreg_cur,
//        sbreg_cvg, sbreg_cyx, sbreg_cug,
//        sbreg_cvb, 0,         sbreg_cub,
//else if (yuv2yuv)
//    (y,u,v) = matrix*(y,u,v)
//    matrix:
//        sbreg_cub, 0,         sbreg_cvb,
//        sbreg_cug, sbreg_cyx, sbreg_cvg,
//        sbreg_cur, 0,         sbreg_cvr,
//else if (rgb2yuv)
//    (y,u,v) = matrix*(r,g,b) +(sbreg_yos,0,0)
//    matrix:
//        sbreg_cvb, sbreg_cyx, sbreg_cub,
//        sbreg_cvg, sbreg_g2u, sbreg_cug,
//        sbreg_cvr, sbreg_g2v, sbreg_cur,
#define G2SB_G2CSCFIRST_0                       _MK_ADDR_CONST(0x15)
#define G2SB_G2CSCFIRST_0_SECURE                        0x0
#define G2SB_G2CSCFIRST_0_WORD_COUNT                    0x1
#define G2SB_G2CSCFIRST_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_G2CSCFIRST_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_G2CSCFIRST_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_G2CSCFIRST_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2CSCFIRST_0_READ_MASK                     _MK_MASK_CONST(0xff3ff3ff)
#define G2SB_G2CSCFIRST_0_WRITE_MASK                    _MK_MASK_CONST(0xff3ff3ff)
// multiplier for U/B for Y or B generation.
// consists of a sign bit and 9-bit magnitude (s2.7).
// For YUV->RGB, the recommended value is 2.0172 (decimal) or 0x102.
// If source data is in RGB format, this parameter
// may be used as gain adjustment for B component.
// For SC20, this register changes precision when doing RGB to YUV
// conversion (SIFMT=1xxx, DIFMT=0xxx).  CUB becomes s1.8 and the
// recommended value is +0.098 or 0x019
//11-10  Reserved
#define G2SB_G2CSCFIRST_0_CUB_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_G2CSCFIRST_0_CUB_FIELD                     (_MK_MASK_CONST(0x3ff) << G2SB_G2CSCFIRST_0_CUB_SHIFT)
#define G2SB_G2CSCFIRST_0_CUB_RANGE                     9:0
#define G2SB_G2CSCFIRST_0_CUB_WOFFSET                   0x0
#define G2SB_G2CSCFIRST_0_CUB_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2CSCFIRST_0_CUB_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2CSCFIRST_0_CUB_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2CSCFIRST_0_CUB_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// multiplier for V/R for V or R generation.
//This parameter consists of a sign bit and 9-bit magnitude (s2.7)
// For YUV->RGB the recommended value is 1.5960 (decimal) or 0x0CC
//If source data is in RGB format, this parameter
// may be used as gain adjustment for R component.
// For RGB->YUV the recommended value is +0.439 (decimal) or 0x038
//23-22  Reserved
#define G2SB_G2CSCFIRST_0_CVR_SHIFT                     _MK_SHIFT_CONST(12)
#define G2SB_G2CSCFIRST_0_CVR_FIELD                     (_MK_MASK_CONST(0x3ff) << G2SB_G2CSCFIRST_0_CVR_SHIFT)
#define G2SB_G2CSCFIRST_0_CVR_RANGE                     21:12
#define G2SB_G2CSCFIRST_0_CVR_WOFFSET                   0x0
#define G2SB_G2CSCFIRST_0_CVR_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2CSCFIRST_0_CVR_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2CSCFIRST_0_CVR_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2CSCFIRST_0_CVR_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

//Y-Offset (YOFFSET[7:0]) for YUV generation
//This parameter consists of 8-bit 2's complement in the range [-128,127].
// For YUV->RGB the recommended value is -16 (decimal) or 0xF0
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is +16 (decimal) or 0x10
#define G2SB_G2CSCFIRST_0_YOS_SHIFT                     _MK_SHIFT_CONST(24)
#define G2SB_G2CSCFIRST_0_YOS_FIELD                     (_MK_MASK_CONST(0xff) << G2SB_G2CSCFIRST_0_YOS_SHIFT)
#define G2SB_G2CSCFIRST_0_YOS_RANGE                     31:24
#define G2SB_G2CSCFIRST_0_YOS_WOFFSET                   0x0
#define G2SB_G2CSCFIRST_0_YOS_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2CSCFIRST_0_YOS_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2CSCFIRST_0_YOS_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2CSCFIRST_0_YOS_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_G2CSCSECOND_0  //{sb,sbm,index=16}
#define G2SB_G2CSCSECOND_0                      _MK_ADDR_CONST(0x16)
#define G2SB_G2CSCSECOND_0_SECURE                       0x0
#define G2SB_G2CSCSECOND_0_WORD_COUNT                   0x1
#define G2SB_G2CSCSECOND_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_G2CSCSECOND_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_G2CSCSECOND_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_G2CSCSECOND_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2CSCSECOND_0_READ_MASK                    _MK_MASK_CONST(0xff3ff1ff)
#define G2SB_G2CSCSECOND_0_WRITE_MASK                   _MK_MASK_CONST(0xff3ff1ff)
// multiplier for U/B for U or G generation.
// consists of a sign bit and 8-bit magnitude (s1.7)
// For YUV->RGB the recommended value is -0.3918 (decimal) or 0x132
// For  RGB->RGB, this parameter should be set to 0
// For  YUV->YUV, this parameter should be set to 1 (0x080)
// For RGB->YUV the recommended value is +0.439 (decimal) or 0x038
//11-9  Reserved
#define G2SB_G2CSCSECOND_0_CUG_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_G2CSCSECOND_0_CUG_FIELD                    (_MK_MASK_CONST(0x1ff) << G2SB_G2CSCSECOND_0_CUG_SHIFT)
#define G2SB_G2CSCSECOND_0_CUG_RANGE                    8:0
#define G2SB_G2CSCSECOND_0_CUG_WOFFSET                  0x0
#define G2SB_G2CSCSECOND_0_CUG_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CSCSECOND_0_CUG_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2CSCSECOND_0_CUG_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CSCSECOND_0_CUG_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// multiplier for U/B for V or R generation.
//This parameter consists of a sign bit and 9-bit magnitude (s2.7)
//  For YUV->RGB normally this parameter is programmed to 0.0.
// This parameter takes non-zero value if hue is rotated.
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is -0.071 (decimal) or 0x209
//23-22 Reserved
#define G2SB_G2CSCSECOND_0_CUR_SHIFT                    _MK_SHIFT_CONST(12)
#define G2SB_G2CSCSECOND_0_CUR_FIELD                    (_MK_MASK_CONST(0x3ff) << G2SB_G2CSCSECOND_0_CUR_SHIFT)
#define G2SB_G2CSCSECOND_0_CUR_RANGE                    21:12
#define G2SB_G2CSCSECOND_0_CUR_WOFFSET                  0x0
#define G2SB_G2CSCSECOND_0_CUR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CSCSECOND_0_CUR_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2CSCSECOND_0_CUR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CSCSECOND_0_CUR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// multiplier for Y/G (G gain)
//This positive-only parameter consists of 8-bit magnitude (1.7)
// For YUV->YUV the recommended value is 1.1644 (decimal) or 0x95
// For YUV->YUV or RGB->RGB this may be used as gain adjustment
// for Y or G component.
// For RGB->YUV the recommended value is +0.504 (decimal) or 0x041
#define G2SB_G2CSCSECOND_0_CYX_SHIFT                    _MK_SHIFT_CONST(24)
#define G2SB_G2CSCSECOND_0_CYX_FIELD                    (_MK_MASK_CONST(0xff) << G2SB_G2CSCSECOND_0_CYX_SHIFT)
#define G2SB_G2CSCSECOND_0_CYX_RANGE                    31:24
#define G2SB_G2CSCSECOND_0_CYX_WOFFSET                  0x0
#define G2SB_G2CSCSECOND_0_CYX_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CSCSECOND_0_CYX_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2CSCSECOND_0_CYX_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CSCSECOND_0_CYX_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_G2CSCTHIRD_0  //{sb,sbm,index=17}
#define G2SB_G2CSCTHIRD_0                       _MK_ADDR_CONST(0x17)
#define G2SB_G2CSCTHIRD_0_SECURE                        0x0
#define G2SB_G2CSCTHIRD_0_WORD_COUNT                    0x1
#define G2SB_G2CSCTHIRD_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_G2CSCTHIRD_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_G2CSCTHIRD_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_G2CSCTHIRD_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2CSCTHIRD_0_READ_MASK                     _MK_MASK_CONST(0x3ff01ff)
#define G2SB_G2CSCTHIRD_0_WRITE_MASK                    _MK_MASK_CONST(0x3ff01ff)
// multiplier for V/R for U or G generation.
//This parameter consists of a sign bit and 8-bit magnitude (s1.7)
// For YUV->RGB the recommended value is -0.8130 (decimal) or 0x168
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is -0.148 (decimal) or 0x113
#define G2SB_G2CSCTHIRD_0_CVG_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_G2CSCTHIRD_0_CVG_FIELD                     (_MK_MASK_CONST(0x1ff) << G2SB_G2CSCTHIRD_0_CVG_SHIFT)
#define G2SB_G2CSCTHIRD_0_CVG_RANGE                     8:0
#define G2SB_G2CSCTHIRD_0_CVG_WOFFSET                   0x0
#define G2SB_G2CSCTHIRD_0_CVG_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2CSCTHIRD_0_CVG_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2CSCTHIRD_0_CVG_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2CSCTHIRD_0_CVG_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// multiplier for V/R for Y or B generation.
//This parameter consists of a sign bit and 9-bit magnitude (s2.7)
//For YUV->RGB, normally this parameter is programmed to 0.0.
// This coefficient takes non-zero value if hue is rotated.
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is +0.257 (decimal) or 0x021
#define G2SB_G2CSCTHIRD_0_CVB_SHIFT                     _MK_SHIFT_CONST(16)
#define G2SB_G2CSCTHIRD_0_CVB_FIELD                     (_MK_MASK_CONST(0x3ff) << G2SB_G2CSCTHIRD_0_CVB_SHIFT)
#define G2SB_G2CSCTHIRD_0_CVB_RANGE                     25:16
#define G2SB_G2CSCTHIRD_0_CVB_WOFFSET                   0x0
#define G2SB_G2CSCTHIRD_0_CVB_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2CSCTHIRD_0_CVB_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2CSCTHIRD_0_CVB_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2CSCTHIRD_0_CVB_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// StretchBLT, Color/Chroma Key Lower Limit Register

// Register G2SB_G2CMKEYL_0  //{sb,sbm,index=18}
// When key generation is enabled, the value of this register is the
// lower color/chroma limit and G2CMKEYU is the upper color/chroma
// limit for component pixel data.
// Three component signal values (YCrCb/YUV or RGB) of
// every output pixel are compared to a set of three
// ranges that are specified by three pairs of lower and
// upper color/chroma key values.  If the Key Polarity is
// 0, the Key is set to 1 only when all three component values
// of an input pixel are respectively within the set
// of ranges (inclusive of the limit values), else the Key is set to 0.
// If the Key Polarity is 1, the Key is set to 1
// when any of the three component values of an input pixel
// are outside the set of ranges, else the Key is set to 0.
#define G2SB_G2CMKEYL_0                 _MK_ADDR_CONST(0x18)
#define G2SB_G2CMKEYL_0_SECURE                  0x0
#define G2SB_G2CMKEYL_0_WORD_COUNT                      0x1
#define G2SB_G2CMKEYL_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_G2CMKEYL_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2CMKEYL_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_G2CMKEYL_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_G2CMKEYL_0_READ_MASK                       _MK_MASK_CONST(0xffffff)
#define G2SB_G2CMKEYL_0_WRITE_MASK                      _MK_MASK_CONST(0xffffff)
// B or Y Color/Chroma Key Lower Limit (CKBL[7:0])
#define G2SB_G2CMKEYL_0_CKBL_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_G2CMKEYL_0_CKBL_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_G2CMKEYL_0_CKBL_SHIFT)
#define G2SB_G2CMKEYL_0_CKBL_RANGE                      7:0
#define G2SB_G2CMKEYL_0_CKBL_WOFFSET                    0x0
#define G2SB_G2CMKEYL_0_CKBL_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2CMKEYL_0_CKBL_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2CMKEYL_0_CKBL_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2CMKEYL_0_CKBL_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

//G or Cb Color Chroma Key Lower Limit (CKGL[7:0])
// Cb signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity
// from the minimum signal level to the maximum signal level.
#define G2SB_G2CMKEYL_0_CKGL_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_G2CMKEYL_0_CKGL_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_G2CMKEYL_0_CKGL_SHIFT)
#define G2SB_G2CMKEYL_0_CKGL_RANGE                      15:8
#define G2SB_G2CMKEYL_0_CKGL_WOFFSET                    0x0
#define G2SB_G2CMKEYL_0_CKGL_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2CMKEYL_0_CKGL_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2CMKEYL_0_CKGL_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2CMKEYL_0_CKGL_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

//R or Cr Color Chroma Key Lower Limit (CKRL[7:0])
// Cr signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity from
// the minimum signal level to the maximum signal level.
//31-24 Reserved
#define G2SB_G2CMKEYL_0_CKRL_SHIFT                      _MK_SHIFT_CONST(16)
#define G2SB_G2CMKEYL_0_CKRL_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_G2CMKEYL_0_CKRL_SHIFT)
#define G2SB_G2CMKEYL_0_CKRL_RANGE                      23:16
#define G2SB_G2CMKEYL_0_CKRL_WOFFSET                    0x0
#define G2SB_G2CMKEYL_0_CKRL_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2CMKEYL_0_CKRL_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2CMKEYL_0_CKRL_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2CMKEYL_0_CKRL_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

//StretchBLT, Color/Chroma Key Upper Limit Register

// Register G2SB_G2CMKEYU_0  //{sb,sbm,index=19}
#define G2SB_G2CMKEYU_0                 _MK_ADDR_CONST(0x19)
#define G2SB_G2CMKEYU_0_SECURE                  0x0
#define G2SB_G2CMKEYU_0_WORD_COUNT                      0x1
#define G2SB_G2CMKEYU_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_G2CMKEYU_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2CMKEYU_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_G2CMKEYU_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_G2CMKEYU_0_READ_MASK                       _MK_MASK_CONST(0xffffff)
#define G2SB_G2CMKEYU_0_WRITE_MASK                      _MK_MASK_CONST(0xffffff)
//This is B or Y color/chroma key upper limit value.
#define G2SB_G2CMKEYU_0_CKBU_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_G2CMKEYU_0_CKBU_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_G2CMKEYU_0_CKBU_SHIFT)
#define G2SB_G2CMKEYU_0_CKBU_RANGE                      7:0
#define G2SB_G2CMKEYU_0_CKBU_WOFFSET                    0x0
#define G2SB_G2CMKEYU_0_CKBU_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2CMKEYU_0_CKBU_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2CMKEYU_0_CKBU_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2CMKEYU_0_CKBU_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// G or Cb Color/Chroma Key Upper Limit (CKGU[7:0])
// Cb signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity
// the minimum signal level to the maximum signal level.
#define G2SB_G2CMKEYU_0_CKGU_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_G2CMKEYU_0_CKGU_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_G2CMKEYU_0_CKGU_SHIFT)
#define G2SB_G2CMKEYU_0_CKGU_RANGE                      15:8
#define G2SB_G2CMKEYU_0_CKGU_WOFFSET                    0x0
#define G2SB_G2CMKEYU_0_CKGU_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2CMKEYU_0_CKGU_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2CMKEYU_0_CKGU_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2CMKEYU_0_CKGU_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// R or Cr Color Chroma Key Upper Limit (CKRU[7:0])
// Cr signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity from
// the minimum signal level to the maximum signal level.
//31-24  Reserved
#define G2SB_G2CMKEYU_0_CKRU_SHIFT                      _MK_SHIFT_CONST(16)
#define G2SB_G2CMKEYU_0_CKRU_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_G2CMKEYU_0_CKRU_SHIFT)
#define G2SB_G2CMKEYU_0_CKRU_RANGE                      23:16
#define G2SB_G2CMKEYU_0_CKRU_WOFFSET                    0x0
#define G2SB_G2CMKEYU_0_CKRU_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2CMKEYU_0_CKRU_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2CMKEYU_0_CKRU_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2CMKEYU_0_CKRU_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// StretchBLT, Source Image Data U base address A-buffer

// Register G2SB_G2UBA_A_0  //{sb,sbm,index=1a}
#define G2SB_G2UBA_A_0                  _MK_ADDR_CONST(0x1a)
#define G2SB_G2UBA_A_0_SECURE                   0x0
#define G2SB_G2UBA_A_0_WORD_COUNT                       0x1
#define G2SB_G2UBA_A_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_G2UBA_A_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2UBA_A_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_G2UBA_A_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2UBA_A_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define G2SB_G2UBA_A_0_WRITE_MASK                       _MK_MASK_CONST(0xffffffff)
// Start Address of  Source U-image Area, 4:2:0 Format.
// This parameter specifies the start address of source image stored in
// the image buffer memory.
// The [3:0] bits have to be 0, since memory client will assemble YUV into one
// 422 format.
#define G2SB_G2UBA_A_0_SU1SA_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_G2UBA_A_0_SU1SA_FIELD                      (_MK_MASK_CONST(0xffffffff) << G2SB_G2UBA_A_0_SU1SA_SHIFT)
#define G2SB_G2UBA_A_0_SU1SA_RANGE                      31:0
#define G2SB_G2UBA_A_0_SU1SA_WOFFSET                    0x0
#define G2SB_G2UBA_A_0_SU1SA_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2UBA_A_0_SU1SA_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2UBA_A_0_SU1SA_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2UBA_A_0_SU1SA_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_G2VBA_A_0  //{sb,sbm,index=1b}
#define G2SB_G2VBA_A_0                  _MK_ADDR_CONST(0x1b)
#define G2SB_G2VBA_A_0_SECURE                   0x0
#define G2SB_G2VBA_A_0_WORD_COUNT                       0x1
#define G2SB_G2VBA_A_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_G2VBA_A_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2VBA_A_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_G2VBA_A_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2VBA_A_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define G2SB_G2VBA_A_0_WRITE_MASK                       _MK_MASK_CONST(0xffffffff)
// Start Address of  Source V-image Area, 4:2:0 Format.
// This parameter specifies the start address of  source image stored in
// the image buffer memory.
// The [3:0] bits have to be 0, since memory client will assemble YUV into one
// 422 format.
#define G2SB_G2VBA_A_0_SV1SA_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_G2VBA_A_0_SV1SA_FIELD                      (_MK_MASK_CONST(0xffffffff) << G2SB_G2VBA_A_0_SV1SA_SHIFT)
#define G2SB_G2VBA_A_0_SV1SA_RANGE                      31:0
#define G2SB_G2VBA_A_0_SV1SA_WOFFSET                    0x0
#define G2SB_G2VBA_A_0_SV1SA_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2VBA_A_0_SV1SA_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2VBA_A_0_SV1SA_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2VBA_A_0_SV1SA_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_G2SBFORMAT_0  //{sb,sbm,index=1c}
#define G2SB_G2SBFORMAT_0                       _MK_ADDR_CONST(0x1c)
#define G2SB_G2SBFORMAT_0_SECURE                        0x0
#define G2SB_G2SBFORMAT_0_WORD_COUNT                    0x1
#define G2SB_G2SBFORMAT_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_G2SBFORMAT_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_G2SBFORMAT_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_G2SBFORMAT_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2SBFORMAT_0_READ_MASK                     _MK_MASK_CONST(0xffffdf1f)
#define G2SB_G2SBFORMAT_0_WRITE_MASK                    _MK_MASK_CONST(0xffffdf1f)
// This parameter defines the data format of source input.
// There are two groups of data formats, RGB format and YCbCr (YUV) format.
// CbCr (UV) components may be represented in either offset binary or 2's complement.
//00000 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00001 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00010 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00011 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00100 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00101 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00110 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00111 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//01000 B5G6R5 5-6-5 {R[4:0], G[5:0], B[4:0]}
//01001 RESERVED
//01010 RESERVED
//01011 RESERVED
//01100 B5G6R5 5-6-5 Byte-swapped {G[2:0], B[4:0], R[4:0], G[5:3]}
//01101 RESERVED
//01110 R8G8B8A8
//01111 B8G8R8A8
//1xxxx RESERVED
//
// StretchBlit Inputs
// ==================
// RGB    inputs = {B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8}
// YUV420 input  = {YUV420 is converted into 4:2:2 UYVY via memory client}
// YUV422 inputs = {U8Y8V8Y8_OB, Y8U8Y8V8_OB, V8Y8U8Y8_OB, U8Y8V8Y8_OB, U8Y8V8Y8_TC, Y8U8Y8V8_TC, Y8V8Y8U8_TC, V8Y8U8Y8_TC}
//
// StretchBlit Outputs
// ===================
// RGB    outputs = {B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8}
// YUV422 outputs = {U8Y8V8Y8_OB, Y8U8Y8V8_OB, V8Y8U8Y8_OB, U8Y8V8Y8_OB, U8Y8V8Y8_TC, Y8U8Y8V8_TC, Y8V8Y8U8_TC, V8Y8U8Y8_TC}
//
// StretchBlit Input/Output Rules
// ==============================
//
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|    src format                                                | internal sb format |      dst format                                           |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|  B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8                        |      R8G8B8A8      |  B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8                     |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|  U8Y8V8Y8_*, Y8U8Y8V8_*, V8Y8U8Y8_*, U8Y8V8Y8_*, YUV420      |      YUV 4:4:4     |  U8Y8V8Y8_*, Y8U8Y8V8_*, V8Y8U8Y8_*, U8Y8V8Y8_*           |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|  U8Y8V8Y8_*, Y8U8Y8V8_*, V8Y8U8Y8_*, U8Y8V8Y8_*, YUV420      |      YUV 4:4:4     |  B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8                     |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//
//  StretchBlit color space converter supports YUV->RGB, YUV->YUV (gain) and RGB->RGB (gain).  There is no support for RGB->YUV.
#define G2SB_G2SBFORMAT_0_SIFMT_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_G2SBFORMAT_0_SIFMT_FIELD                   (_MK_MASK_CONST(0x1f) << G2SB_G2SBFORMAT_0_SIFMT_SHIFT)
#define G2SB_G2SBFORMAT_0_SIFMT_RANGE                   4:0
#define G2SB_G2SBFORMAT_0_SIFMT_WOFFSET                 0x0
#define G2SB_G2SBFORMAT_0_SIFMT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2SBFORMAT_0_SIFMT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_G2SBFORMAT_0_SIFMT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2SBFORMAT_0_SIFMT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_G2SBFORMAT_0_SIFMT_U8Y8V8Y8_OB                     _MK_ENUM_CONST(0)
#define G2SB_G2SBFORMAT_0_SIFMT_Y8U8Y8V8_OB                     _MK_ENUM_CONST(1)
#define G2SB_G2SBFORMAT_0_SIFMT_Y8V8Y8U8_OB                     _MK_ENUM_CONST(2)
#define G2SB_G2SBFORMAT_0_SIFMT_V8Y8U8Y8_OB                     _MK_ENUM_CONST(3)
#define G2SB_G2SBFORMAT_0_SIFMT_U8Y8V8Y8_TC                     _MK_ENUM_CONST(4)
#define G2SB_G2SBFORMAT_0_SIFMT_Y8U8Y8V8_TC                     _MK_ENUM_CONST(5)
#define G2SB_G2SBFORMAT_0_SIFMT_Y8V8Y8U8_TC                     _MK_ENUM_CONST(6)
#define G2SB_G2SBFORMAT_0_SIFMT_V8Y8U8Y8_TC                     _MK_ENUM_CONST(7)
#define G2SB_G2SBFORMAT_0_SIFMT_B5G6R5                  _MK_ENUM_CONST(8)
#define G2SB_G2SBFORMAT_0_SIFMT_RESERVED9                       _MK_ENUM_CONST(9)
#define G2SB_G2SBFORMAT_0_SIFMT_RESERVED10                      _MK_ENUM_CONST(10)
#define G2SB_G2SBFORMAT_0_SIFMT_RESERVED11                      _MK_ENUM_CONST(11)
#define G2SB_G2SBFORMAT_0_SIFMT_B5G6R5BS                        _MK_ENUM_CONST(12)
#define G2SB_G2SBFORMAT_0_SIFMT_RESERVED13                      _MK_ENUM_CONST(13)
#define G2SB_G2SBFORMAT_0_SIFMT_R8G8B8A8                        _MK_ENUM_CONST(14)
#define G2SB_G2SBFORMAT_0_SIFMT_B8G8R8A8                        _MK_ENUM_CONST(15)
#define G2SB_G2SBFORMAT_0_SIFMT_RESERVED16                      _MK_ENUM_CONST(16)
#define G2SB_G2SBFORMAT_0_SIFMT_RESERVED17                      _MK_ENUM_CONST(17)
#define G2SB_G2SBFORMAT_0_SIFMT_RESERVED18                      _MK_ENUM_CONST(18)
#define G2SB_G2SBFORMAT_0_SIFMT_RESERVED19                      _MK_ENUM_CONST(19)
#define G2SB_G2SBFORMAT_0_SIFMT_RESERVED20                      _MK_ENUM_CONST(20)
#define G2SB_G2SBFORMAT_0_SIFMT_RESERVED21                      _MK_ENUM_CONST(21)
#define G2SB_G2SBFORMAT_0_SIFMT_RESERVED22                      _MK_ENUM_CONST(22)
#define G2SB_G2SBFORMAT_0_SIFMT_RESERVED23                      _MK_ENUM_CONST(23)
#define G2SB_G2SBFORMAT_0_SIFMT_RESERVED24                      _MK_ENUM_CONST(24)
#define G2SB_G2SBFORMAT_0_SIFMT_RESERVED25                      _MK_ENUM_CONST(25)
#define G2SB_G2SBFORMAT_0_SIFMT_RESERVED26                      _MK_ENUM_CONST(26)
#define G2SB_G2SBFORMAT_0_SIFMT_RESERVED27                      _MK_ENUM_CONST(27)
#define G2SB_G2SBFORMAT_0_SIFMT_RESERVED28                      _MK_ENUM_CONST(28)
#define G2SB_G2SBFORMAT_0_SIFMT_RESERVED29                      _MK_ENUM_CONST(29)
#define G2SB_G2SBFORMAT_0_SIFMT_RESERVED30                      _MK_ENUM_CONST(30)
#define G2SB_G2SBFORMAT_0_SIFMT_RESERVED31                      _MK_ENUM_CONST(31)

//Destination Image Data FormatThis parameter defines the data format of distination output.
// There are two groups of data formats, RGB and YCbCr (YUV) format.
// CbCr (UV) components may be represented in either offset binary or 2's complement.
//00000 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00001 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00010 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00011 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00100 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00101 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00110 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00111 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//01000 bpp16 5-6-5 {R[4:0], G[5:0], B[4:0]}
//01001 RESERVED
//01010 RESERVED
//01011 RESERVED
//01100 bpp16 5-6-5 Byte-swapped {G[2:0], B[4:0], R[4:0], G[5:3]}
//01101 RESERVED
//01110 R8G8B8A8
//01111 B8G8R8A8
//1xxxx RESERVED
#define G2SB_G2SBFORMAT_0_DIFMT_SHIFT                   _MK_SHIFT_CONST(8)
#define G2SB_G2SBFORMAT_0_DIFMT_FIELD                   (_MK_MASK_CONST(0x1f) << G2SB_G2SBFORMAT_0_DIFMT_SHIFT)
#define G2SB_G2SBFORMAT_0_DIFMT_RANGE                   12:8
#define G2SB_G2SBFORMAT_0_DIFMT_WOFFSET                 0x0
#define G2SB_G2SBFORMAT_0_DIFMT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2SBFORMAT_0_DIFMT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_G2SBFORMAT_0_DIFMT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2SBFORMAT_0_DIFMT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_G2SBFORMAT_0_DIFMT_U8Y8V8Y8_OB                     _MK_ENUM_CONST(0)
#define G2SB_G2SBFORMAT_0_DIFMT_Y8U8Y8V8_OB                     _MK_ENUM_CONST(1)
#define G2SB_G2SBFORMAT_0_DIFMT_Y8V8Y8U8_OB                     _MK_ENUM_CONST(2)
#define G2SB_G2SBFORMAT_0_DIFMT_V8Y8U8Y8_OB                     _MK_ENUM_CONST(3)
#define G2SB_G2SBFORMAT_0_DIFMT_U8Y8V8Y8_TC                     _MK_ENUM_CONST(4)
#define G2SB_G2SBFORMAT_0_DIFMT_Y8U8Y8V8_TC                     _MK_ENUM_CONST(5)
#define G2SB_G2SBFORMAT_0_DIFMT_Y8V8Y8U8_TC                     _MK_ENUM_CONST(6)
#define G2SB_G2SBFORMAT_0_DIFMT_V8Y8U8Y8_TC                     _MK_ENUM_CONST(7)
#define G2SB_G2SBFORMAT_0_DIFMT_B5G6R5                  _MK_ENUM_CONST(8)
#define G2SB_G2SBFORMAT_0_DIFMT_RESERVED9                       _MK_ENUM_CONST(9)
#define G2SB_G2SBFORMAT_0_DIFMT_RESERVED10                      _MK_ENUM_CONST(10)
#define G2SB_G2SBFORMAT_0_DIFMT_RESERVED11                      _MK_ENUM_CONST(11)
#define G2SB_G2SBFORMAT_0_DIFMT_B5G6R5BS                        _MK_ENUM_CONST(12)
#define G2SB_G2SBFORMAT_0_DIFMT_RESERVED13                      _MK_ENUM_CONST(13)
#define G2SB_G2SBFORMAT_0_DIFMT_R8G8B8A8                        _MK_ENUM_CONST(14)
#define G2SB_G2SBFORMAT_0_DIFMT_B8G8R8A8                        _MK_ENUM_CONST(15)
#define G2SB_G2SBFORMAT_0_DIFMT_RESERVED16                      _MK_ENUM_CONST(16)
#define G2SB_G2SBFORMAT_0_DIFMT_RESERVED17                      _MK_ENUM_CONST(17)
#define G2SB_G2SBFORMAT_0_DIFMT_RESERVED18                      _MK_ENUM_CONST(18)
#define G2SB_G2SBFORMAT_0_DIFMT_RESERVED19                      _MK_ENUM_CONST(19)
#define G2SB_G2SBFORMAT_0_DIFMT_RESERVED20                      _MK_ENUM_CONST(20)
#define G2SB_G2SBFORMAT_0_DIFMT_RESERVED21                      _MK_ENUM_CONST(21)
#define G2SB_G2SBFORMAT_0_DIFMT_RESERVED22                      _MK_ENUM_CONST(22)
#define G2SB_G2SBFORMAT_0_DIFMT_RESERVED23                      _MK_ENUM_CONST(23)
#define G2SB_G2SBFORMAT_0_DIFMT_RESERVED24                      _MK_ENUM_CONST(24)
#define G2SB_G2SBFORMAT_0_DIFMT_RESERVED25                      _MK_ENUM_CONST(25)
#define G2SB_G2SBFORMAT_0_DIFMT_RESERVED26                      _MK_ENUM_CONST(26)
#define G2SB_G2SBFORMAT_0_DIFMT_RESERVED27                      _MK_ENUM_CONST(27)
#define G2SB_G2SBFORMAT_0_DIFMT_RESERVED28                      _MK_ENUM_CONST(28)
#define G2SB_G2SBFORMAT_0_DIFMT_RESERVED29                      _MK_ENUM_CONST(29)
#define G2SB_G2SBFORMAT_0_DIFMT_RESERVED30                      _MK_ENUM_CONST(30)
#define G2SB_G2SBFORMAT_0_DIFMT_RESERVED31                      _MK_ENUM_CONST(31)

// ENABLE - SB needs to send a RAISE_BUFFER control bit to EPP
// DISABLE - do nothing.
#define G2SB_G2SBFORMAT_0_RAISEBUFFEREN_SHIFT                   _MK_SHIFT_CONST(14)
#define G2SB_G2SBFORMAT_0_RAISEBUFFEREN_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_G2SBFORMAT_0_RAISEBUFFEREN_SHIFT)
#define G2SB_G2SBFORMAT_0_RAISEBUFFEREN_RANGE                   14:14
#define G2SB_G2SBFORMAT_0_RAISEBUFFEREN_WOFFSET                 0x0
#define G2SB_G2SBFORMAT_0_RAISEBUFFEREN_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2SBFORMAT_0_RAISEBUFFEREN_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_G2SBFORMAT_0_RAISEBUFFEREN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2SBFORMAT_0_RAISEBUFFEREN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_G2SBFORMAT_0_RAISEBUFFEREN_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_G2SBFORMAT_0_RAISEBUFFEREN_ENABLE                  _MK_ENUM_CONST(1)

// ENABLE - SB needs to send a RAISE_FRAME control bit to EPP
// DISABLE - do nothing.
#define G2SB_G2SBFORMAT_0_RAISEFRAMEEN_SHIFT                    _MK_SHIFT_CONST(15)
#define G2SB_G2SBFORMAT_0_RAISEFRAMEEN_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_G2SBFORMAT_0_RAISEFRAMEEN_SHIFT)
#define G2SB_G2SBFORMAT_0_RAISEFRAMEEN_RANGE                    15:15
#define G2SB_G2SBFORMAT_0_RAISEFRAMEEN_WOFFSET                  0x0
#define G2SB_G2SBFORMAT_0_RAISEFRAMEEN_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2SBFORMAT_0_RAISEFRAMEEN_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2SBFORMAT_0_RAISEFRAMEEN_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2SBFORMAT_0_RAISEFRAMEEN_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2SBFORMAT_0_RAISEFRAMEEN_DISABLE                  _MK_ENUM_CONST(0)
#define G2SB_G2SBFORMAT_0_RAISEFRAMEEN_ENABLE                   _MK_ENUM_CONST(1)

// Raise buffer vector value.
#define G2SB_G2SBFORMAT_0_RAISEBUFFERVALUE_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_G2SBFORMAT_0_RAISEBUFFERVALUE_FIELD                        (_MK_MASK_CONST(0xff) << G2SB_G2SBFORMAT_0_RAISEBUFFERVALUE_SHIFT)
#define G2SB_G2SBFORMAT_0_RAISEBUFFERVALUE_RANGE                        23:16
#define G2SB_G2SBFORMAT_0_RAISEBUFFERVALUE_WOFFSET                      0x0
#define G2SB_G2SBFORMAT_0_RAISEBUFFERVALUE_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2SBFORMAT_0_RAISEBUFFERVALUE_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_G2SBFORMAT_0_RAISEBUFFERVALUE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2SBFORMAT_0_RAISEBUFFERVALUE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Raise Fram vector value.
#define G2SB_G2SBFORMAT_0_RAISEFRAMEVALUE_SHIFT                 _MK_SHIFT_CONST(24)
#define G2SB_G2SBFORMAT_0_RAISEFRAMEVALUE_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_G2SBFORMAT_0_RAISEFRAMEVALUE_SHIFT)
#define G2SB_G2SBFORMAT_0_RAISEFRAMEVALUE_RANGE                 31:24
#define G2SB_G2SBFORMAT_0_RAISEFRAMEVALUE_WOFFSET                       0x0
#define G2SB_G2SBFORMAT_0_RAISEFRAMEVALUE_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2SBFORMAT_0_RAISEFRAMEVALUE_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2SBFORMAT_0_RAISEFRAMEVALUE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2SBFORMAT_0_RAISEFRAMEVALUE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_G2CONTROLSB_0  //{sb,sbm,index=1d}
#define G2SB_G2CONTROLSB_0                      _MK_ADDR_CONST(0x1d)
#define G2SB_G2CONTROLSB_0_SECURE                       0x0
#define G2SB_G2CONTROLSB_0_WORD_COUNT                   0x1
#define G2SB_G2CONTROLSB_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_RESET_MASK                   _MK_MASK_CONST(0xdfffa4f8)
#define G2SB_G2CONTROLSB_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_READ_MASK                    _MK_MASK_CONST(0xdfffa7f8)
#define G2SB_G2CONTROLSB_0_WRITE_MASK                   _MK_MASK_CONST(0xdfffa7f8)
//yuv422 plannar rotated
#define G2SB_G2CONTROLSB_0_YUV422ROTATION_SHIFT                 _MK_SHIFT_CONST(3)
#define G2SB_G2CONTROLSB_0_YUV422ROTATION_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLSB_0_YUV422ROTATION_SHIFT)
#define G2SB_G2CONTROLSB_0_YUV422ROTATION_RANGE                 3:3
#define G2SB_G2CONTROLSB_0_YUV422ROTATION_WOFFSET                       0x0
#define G2SB_G2CONTROLSB_0_YUV422ROTATION_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_YUV422ROTATION_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLSB_0_YUV422ROTATION_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_YUV422ROTATION_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//source data is yuv422 planar valid when imode==PLANAR
#define G2SB_G2CONTROLSB_0_YUV422PLANAR_SHIFT                   _MK_SHIFT_CONST(4)
#define G2SB_G2CONTROLSB_0_YUV422PLANAR_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLSB_0_YUV422PLANAR_SHIFT)
#define G2SB_G2CONTROLSB_0_YUV422PLANAR_RANGE                   4:4
#define G2SB_G2CONTROLSB_0_YUV422PLANAR_WOFFSET                 0x0
#define G2SB_G2CONTROLSB_0_YUV422PLANAR_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_YUV422PLANAR_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLSB_0_YUV422PLANAR_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_YUV422PLANAR_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Source (input) Data Mode  (IMODE) This parameter defines the data mode of source input.
// 0: Multiplexed Mode (data format is specified by SIFMT[2:0])
// One block of source data in the Image Buffer memory contains
// multiplexed component signals.
// 1: Planar mode, 4:2:0 YUV (SIFMT[2] specifies data format of U/V components)
// Three blocks of source data in the Image Buffer memory contain separate
// Y, U, and V component signals.
//
//  For circular buffer input to gr2d, the input format can not be planar.  It must be multiplex.
//    i.e. no YUV420 planar circular buffer input to gr2d.
#define G2SB_G2CONTROLSB_0_IMODE_SHIFT                  _MK_SHIFT_CONST(5)
#define G2SB_G2CONTROLSB_0_IMODE_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLSB_0_IMODE_SHIFT)
#define G2SB_G2CONTROLSB_0_IMODE_RANGE                  5:5
#define G2SB_G2CONTROLSB_0_IMODE_WOFFSET                        0x0
#define G2SB_G2CONTROLSB_0_IMODE_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_IMODE_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLSB_0_IMODE_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_IMODE_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_IMODE_MULTIPLEX                      _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLSB_0_IMODE_PLANAR                 _MK_ENUM_CONST(1)

//enable alpha vertical filter
#define G2SB_G2CONTROLSB_0_ENAVF_SHIFT                  _MK_SHIFT_CONST(6)
#define G2SB_G2CONTROLSB_0_ENAVF_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLSB_0_ENAVF_SHIFT)
#define G2SB_G2CONTROLSB_0_ENAVF_RANGE                  6:6
#define G2SB_G2CONTROLSB_0_ENAVF_WOFFSET                        0x0
#define G2SB_G2CONTROLSB_0_ENAVF_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_ENAVF_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLSB_0_ENAVF_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_ENAVF_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_ENAVF_DISABLE                        _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLSB_0_ENAVF_ENABLE                 _MK_ENUM_CONST(1)

// enable horizontal alpha filtering
// if disabled, use the alpha value of third tap for output pixel
//U,V line stride in 4:2:0  Format,
#define G2SB_G2CONTROLSB_0_ENAHF_SHIFT                  _MK_SHIFT_CONST(7)
#define G2SB_G2CONTROLSB_0_ENAHF_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLSB_0_ENAHF_SHIFT)
#define G2SB_G2CONTROLSB_0_ENAHF_RANGE                  7:7
#define G2SB_G2CONTROLSB_0_ENAHF_WOFFSET                        0x0
#define G2SB_G2CONTROLSB_0_ENAHF_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_ENAHF_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLSB_0_ENAHF_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_ENAHF_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_ENAHF_DISABLE                        _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLSB_0_ENAHF_ENABLE                 _MK_ENUM_CONST(1)

//   00= 1/2 of Luma Buffer Stride; in this case
//       Luma Buffer Stride should be multiple
//       of 2 bytes.
//   01= Equal to Luma Buffer Stride
//   10= 1/4 of Luma Buffer Stride; in this case
//       Luma Buffer Stride should be multiple
//       of 4 bytes.
//   11= use uvstride.
// Note: Use care when using a tiled surface, since 1/2 or 1/4
//   of luma stride may yield an invalid pitch (stride).
#define G2SB_G2CONTROLSB_0_UVST_SHIFT                   _MK_SHIFT_CONST(8)
#define G2SB_G2CONTROLSB_0_UVST_FIELD                   (_MK_MASK_CONST(0x3) << G2SB_G2CONTROLSB_0_UVST_SHIFT)
#define G2SB_G2CONTROLSB_0_UVST_RANGE                   9:8
#define G2SB_G2CONTROLSB_0_UVST_WOFFSET                 0x0
#define G2SB_G2CONTROLSB_0_UVST_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_UVST_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_UVST_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_UVST_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_UVST_UVS2X                   _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLSB_0_UVST_UVS1X                   _MK_ENUM_CONST(1)
#define G2SB_G2CONTROLSB_0_UVST_UVS4X                   _MK_ENUM_CONST(2)
#define G2SB_G2CONTROLSB_0_UVST_UVS_G2UVSTRIDE                  _MK_ENUM_CONST(3)

// Source (input) Data Line Pairing  (SL)
// This parameter specifies one of two cases of Y vs. U/V line-pairing
// in the source data in 4:2:0 format.
// In the 4:2:0 format, there is one pair of U and V image-lines for
// every two Y image-lines.
//0 The first two Y image-lines share common pair of U and V image-lines.
//1 The first two Y image-lines are paired with two different
// pairs of U and V image-lines.
#define G2SB_G2CONTROLSB_0_SL_SHIFT                     _MK_SHIFT_CONST(10)
#define G2SB_G2CONTROLSB_0_SL_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLSB_0_SL_SHIFT)
#define G2SB_G2CONTROLSB_0_SL_RANGE                     10:10
#define G2SB_G2CONTROLSB_0_SL_WOFFSET                   0x0
#define G2SB_G2CONTROLSB_0_SL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_SL_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLSB_0_SL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_SL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_SL_COMMON_PAIR                       _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLSB_0_SL_DIFFERENT_PAIR                    _MK_ENUM_CONST(1)

// StretchBLT Source Provider Selection (SISEL)
// This bit indicates where the source images come from,  either the
// image buffer memory or system memory of the host CPU.  If source
//images come from host CPU, they come via CPU Read-FIFO.
//0 Image buffer memory.
//1 System memory of host CPU.
//14 Reserved
#define G2SB_G2CONTROLSB_0_SISEL_SHIFT                  _MK_SHIFT_CONST(13)
#define G2SB_G2CONTROLSB_0_SISEL_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLSB_0_SISEL_SHIFT)
#define G2SB_G2CONTROLSB_0_SISEL_RANGE                  13:13
#define G2SB_G2CONTROLSB_0_SISEL_WOFFSET                        0x0
#define G2SB_G2CONTROLSB_0_SISEL_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_SISEL_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLSB_0_SISEL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_SISEL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_SISEL_IMAGE_BUFFER                   _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLSB_0_SISEL_HOST                   _MK_ENUM_CONST(1)

// StretchBLT Source Selection  (SBLTSRC)
// CPU and VIP module can initiate StretchBLT operation. This bit indicates
// which one initiates current StretchBLT command. Depending on the initiator,
// appropriate source for the command execution request is selected. Whichever
// the initiator is, all the command parameters are supplied from the CPU (driver)
// through the G2 command-FIFO and shadow registers.
//0 CPU is the command initiator.
//1 VIP module is the command initiator.
#define G2SB_G2CONTROLSB_0_SBLTSRC_SHIFT                        _MK_SHIFT_CONST(15)
#define G2SB_G2CONTROLSB_0_SBLTSRC_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLSB_0_SBLTSRC_SHIFT)
#define G2SB_G2CONTROLSB_0_SBLTSRC_RANGE                        15:15
#define G2SB_G2CONTROLSB_0_SBLTSRC_WOFFSET                      0x0
#define G2SB_G2CONTROLSB_0_SBLTSRC_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_SBLTSRC_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLSB_0_SBLTSRC_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_SBLTSRC_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_SBLTSRC_CPU                  _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLSB_0_SBLTSRC_VIP                  _MK_ENUM_CONST(1)

// StretchBLT Vertical Filter Mode (VFTYPE[1:0])
// This bit is effective when the Vertical Filter is enabled. (bit 18)
// The two-tap vertical interpolation filter can be operated in various modes.
// For the image expansion, it should be programmed as a pure 2-tap
// interpolator. For the image contraction, it can work as partly averager
// and partly interpolator with varying degree depending on the contraction ratio.
// For StretchBLT, this parameter is used as an index (selection) to
// an internal lookup table that stores the group of filter-coefficients for
// the different modes of vertical filtering.
//00 Pure interpolation filter.
//01 25% averager, 75% interpolator.
//10 50% averager, 50% interpolator.
//11 100% averager.
#define G2SB_G2CONTROLSB_0_VFTYPE_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_G2CONTROLSB_0_VFTYPE_FIELD                 (_MK_MASK_CONST(0x3) << G2SB_G2CONTROLSB_0_VFTYPE_SHIFT)
#define G2SB_G2CONTROLSB_0_VFTYPE_RANGE                 17:16
#define G2SB_G2CONTROLSB_0_VFTYPE_WOFFSET                       0x0
#define G2SB_G2CONTROLSB_0_VFTYPE_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_VFTYPE_DEFAULT_MASK                  _MK_MASK_CONST(0x3)
#define G2SB_G2CONTROLSB_0_VFTYPE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_VFTYPE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_VFTYPE_INTERP                        _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLSB_0_VFTYPE_AVG25_INTERP75                        _MK_ENUM_CONST(1)
#define G2SB_G2CONTROLSB_0_VFTYPE_AVG50_INTERP50                        _MK_ENUM_CONST(2)
#define G2SB_G2CONTROLSB_0_VFTYPE_AVG                   _MK_ENUM_CONST(3)

// StretchBLT Vertical Filter Enable (VFEN)
// Vertical filter shall be disabled if source images come from host CPU
// via CPU Read-FIFO. (SISEL)
// Vertical filter may be disabled to save some memory bandwidth but
// this will likely result in degradation of image quality.
// This option may also be used in the case where source image is progressive
// scanning and there is no vertical scaling.
//0 Vertical filter is disabled.
//1 Vertical filter is enabled.
#define G2SB_G2CONTROLSB_0_VFEN_SHIFT                   _MK_SHIFT_CONST(18)
#define G2SB_G2CONTROLSB_0_VFEN_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLSB_0_VFEN_SHIFT)
#define G2SB_G2CONTROLSB_0_VFEN_RANGE                   18:18
#define G2SB_G2CONTROLSB_0_VFEN_WOFFSET                 0x0
#define G2SB_G2CONTROLSB_0_VFEN_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_VFEN_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLSB_0_VFEN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_VFEN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_VFEN_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLSB_0_VFEN_ENABLE                  _MK_ENUM_CONST(1)

// enabled color space converter by default
#define G2SB_G2CONTROLSB_0_DISCSC_SHIFT                 _MK_SHIFT_CONST(19)
#define G2SB_G2CONTROLSB_0_DISCSC_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLSB_0_DISCSC_SHIFT)
#define G2SB_G2CONTROLSB_0_DISCSC_RANGE                 19:19
#define G2SB_G2CONTROLSB_0_DISCSC_WOFFSET                       0x0
#define G2SB_G2CONTROLSB_0_DISCSC_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_DISCSC_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLSB_0_DISCSC_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_DISCSC_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_DISCSC_ENABLE                        _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLSB_0_DISCSC_DISABLE                       _MK_ENUM_CONST(1)

// StretchBLT Horizontal Filter Mode (HFTYPE[2:0])
// The six-tap horizontal interpolation filter can be operated in
// various operation modes. For the image expansion, it should be programmed
// as a pure 6-tap interpolator.  For the image contraction, it can work as
// partly lowpass filter and partly interpolater with varying degree depending
// the contraction ratio.
// For StretchBLT, this parameter is used as an index (selection)
// to an internal lookup table that stores the group of filter-coefficients
//for the different modes of horizontal filtering.
// 000: Pure interpolation filter.
// 001: 010 011 100 101 110: mix of interpolation and low pass filters
// 111: DISABLE.
#define G2SB_G2CONTROLSB_0_HFTYPE_SHIFT                 _MK_SHIFT_CONST(20)
#define G2SB_G2CONTROLSB_0_HFTYPE_FIELD                 (_MK_MASK_CONST(0x7) << G2SB_G2CONTROLSB_0_HFTYPE_SHIFT)
#define G2SB_G2CONTROLSB_0_HFTYPE_RANGE                 22:20
#define G2SB_G2CONTROLSB_0_HFTYPE_WOFFSET                       0x0
#define G2SB_G2CONTROLSB_0_HFTYPE_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_HFTYPE_DEFAULT_MASK                  _MK_MASK_CONST(0x7)
#define G2SB_G2CONTROLSB_0_HFTYPE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_HFTYPE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_HFTYPE_INTERP                        _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLSB_0_HFTYPE_LPF1                  _MK_ENUM_CONST(1)
#define G2SB_G2CONTROLSB_0_HFTYPE_LPF2                  _MK_ENUM_CONST(2)
#define G2SB_G2CONTROLSB_0_HFTYPE_LPF3                  _MK_ENUM_CONST(3)
#define G2SB_G2CONTROLSB_0_HFTYPE_LPF4                  _MK_ENUM_CONST(4)
#define G2SB_G2CONTROLSB_0_HFTYPE_LPF5                  _MK_ENUM_CONST(5)
#define G2SB_G2CONTROLSB_0_HFTYPE_LPF6                  _MK_ENUM_CONST(6)
#define G2SB_G2CONTROLSB_0_HFTYPE_DISABLE                       _MK_ENUM_CONST(7)

//In the VC-1 specification, when the value of RANGEREDFRM variable (1-bit)
//  for a picture is equal to 1, the picture shall be scaled up according
// to the following equation:
//Y = clip( (( Y-128)*2) + 128);
//Cb = clip( ((Cb-128)*2) + 128);
//Cr = clip( ((Cr-128)*2) + 128);
//The clip operator limits the output to [0, 255].
//The input is also limited to [0, 255].
//In the VC-1 nomenclature, the output (Y, Cb, Cr) tuple corresponds to
// the 'decoded' picture. The input (Y, Cb, Cr) tuple corresponds to
// the 'reconstructed' picture.
// The above equations create the decoded picture while keeping
// the reconstructed picture intact.
//Only YUV _OB formats are supported with range reducation enabled,
// not the YUV _TC or RGB formats.
//----------------------------------------------------
//At PortalPlayer this functionality was implemented in the DVO module.
// The YUV data coming from the video frame buffers (reconstructed picture)
//  in the SDRAM was scaled up using the above equations and given to the display.
// the value of 1-bit wide RANGEREDFRM variable was configured in the DVO per frame
// and the frame was scaled whenever RANGEREDFRM == 1.
#define G2SB_G2CONTROLSB_0_RANGEREDFRM_SHIFT                    _MK_SHIFT_CONST(23)
#define G2SB_G2CONTROLSB_0_RANGEREDFRM_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLSB_0_RANGEREDFRM_SHIFT)
#define G2SB_G2CONTROLSB_0_RANGEREDFRM_RANGE                    23:23
#define G2SB_G2CONTROLSB_0_RANGEREDFRM_WOFFSET                  0x0
#define G2SB_G2CONTROLSB_0_RANGEREDFRM_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_RANGEREDFRM_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLSB_0_RANGEREDFRM_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_RANGEREDFRM_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_RANGEREDFRM_DISABLE                  _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLSB_0_RANGEREDFRM_ENABLE                   _MK_ENUM_CONST(1)

// StretchBLT Source Type (SITYPE)
// This bit identifies two types of source images. If source image is 2-to-1
// interlaced and StretchBLT processes either one of the two interlaced
// field-images, physical (positional) displacement between the two
// interlaced fields must be taken into account.  One field-image that is
// placed higher in position than the other field-image is called top-field
// and the other is called bottom-field. StretchBLT processing has to
// lower the top-field (or raise the bottom-field) to match the corresponding
// two target images in the overlay window (that is progressively scanned)
// right at the same position.   If source image is full frame-image
// obtained from two interlaced field-images, its type is ?top-field?.
// If source images are progressively scanned, the type identification is not
// significant and they may be designated either one of the two types
//0 Source image is ?top-field?.
//1 Source image is ?bottom-field?.
#define G2SB_G2CONTROLSB_0_SITYPE_SHIFT                 _MK_SHIFT_CONST(24)
#define G2SB_G2CONTROLSB_0_SITYPE_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLSB_0_SITYPE_SHIFT)
#define G2SB_G2CONTROLSB_0_SITYPE_RANGE                 24:24
#define G2SB_G2CONTROLSB_0_SITYPE_WOFFSET                       0x0
#define G2SB_G2CONTROLSB_0_SITYPE_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_SITYPE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLSB_0_SITYPE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_SITYPE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_SITYPE_TOP_FIELD                     _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLSB_0_SITYPE_BOTTOM_FIELD                  _MK_ENUM_CONST(1)

// StretchBLT Source Buffer Selection (SBSEL)
// StretchBLT processing involves frame-rate conversion from a
// series of source images to another series of destination images
// (field-rate of the source video to frame-rate of the PC display).
// In order to avoid image tearing, it is preferred to use two buffer
// sections in the source video area. This bit selects one of the two
// buffering blocks from which this StretchBLT command receives the source image.
// The two buffering memory blocks are called source-A and source-B.
//0 Source image comes from ?source-A? buffer.
//1 Source image comes from ?source-B? buffer.
#define G2SB_G2CONTROLSB_0_SBSEL_SHIFT                  _MK_SHIFT_CONST(25)
#define G2SB_G2CONTROLSB_0_SBSEL_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLSB_0_SBSEL_SHIFT)
#define G2SB_G2CONTROLSB_0_SBSEL_RANGE                  25:25
#define G2SB_G2CONTROLSB_0_SBSEL_WOFFSET                        0x0
#define G2SB_G2CONTROLSB_0_SBSEL_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_SBSEL_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLSB_0_SBSEL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_SBSEL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_SBSEL_SRC_A                  _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLSB_0_SBSEL_SRC_B                  _MK_ENUM_CONST(1)

// StretchBLT Destination Buffer Selection (DBSEL)
// StretchBLT processing involves frame-rate conversion from a series of
// source images to another series of destination images (field-rate of
// the source video to frame-rate of the PC display). In order to avoid
// image tearing, it is preferred to use two buffer sections in the destination
// video area.  This bit selects one of the two buffering blocks to which this
// StretchBLT command delivers the destination image.
// The two buffering memory blocks are called A and B.
//0 Destination image goes to ?A? buffer.
//1 Destination image goes to ?B? buffer.
#define G2SB_G2CONTROLSB_0_DBSEL_SHIFT                  _MK_SHIFT_CONST(26)
#define G2SB_G2CONTROLSB_0_DBSEL_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLSB_0_DBSEL_SHIFT)
#define G2SB_G2CONTROLSB_0_DBSEL_RANGE                  26:26
#define G2SB_G2CONTROLSB_0_DBSEL_WOFFSET                        0x0
#define G2SB_G2CONTROLSB_0_DBSEL_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_DBSEL_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLSB_0_DBSEL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_DBSEL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_DBSEL_DST_A                  _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLSB_0_DBSEL_DST_B                  _MK_ENUM_CONST(1)

// Key Signal Generator Enable (KEYEN) Key signal generator generates either
// chroma key signal (from YCbCr signal) or color key signal (from RGB signal)
//0 Key signal generator is disabled.
//1 Key signal generator is enabled.
#define G2SB_G2CONTROLSB_0_KEYEN_SHIFT                  _MK_SHIFT_CONST(27)
#define G2SB_G2CONTROLSB_0_KEYEN_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLSB_0_KEYEN_SHIFT)
#define G2SB_G2CONTROLSB_0_KEYEN_RANGE                  27:27
#define G2SB_G2CONTROLSB_0_KEYEN_WOFFSET                        0x0
#define G2SB_G2CONTROLSB_0_KEYEN_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_KEYEN_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLSB_0_KEYEN_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_KEYEN_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_KEYEN_DISABLE                        _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLSB_0_KEYEN_ENABLE                 _MK_ENUM_CONST(1)

// Key Signal Polarity (KPOL)
// Color/Chroma key signal is generated by comparing source input pixel
// color to a range of a color specified by lower and upper limit values.
// The key signal is interpreted in two ways, depending on which one of
// video and graphics images is foreground (and the other is background).
// This is effective only if Key signal generator is enabled.
// (see G2CMKEYL, G2CMKEYU)
// 0 Key signal is set to 1 when source pixel is within the lower and upper
// limit color range.
// 1 Key signal is set to 1 when source pixel is outside the lower and upper
// limit color range.
#define G2SB_G2CONTROLSB_0_KPOL_SHIFT                   _MK_SHIFT_CONST(28)
#define G2SB_G2CONTROLSB_0_KPOL_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLSB_0_KPOL_SHIFT)
#define G2SB_G2CONTROLSB_0_KPOL_RANGE                   28:28
#define G2SB_G2CONTROLSB_0_KPOL_WOFFSET                 0x0
#define G2SB_G2CONTROLSB_0_KPOL_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_KPOL_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLSB_0_KPOL_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_KPOL_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_KPOL_WITHIN_BOUNDS                   _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLSB_0_KPOL_OUTSIDE_BOUNDS                  _MK_ENUM_CONST(1)

// Enable Dithering (ENDITH)
// For 16 bit RGB output modes, the LSB of the color components can be
// modified by adding a variable residual value that will reduce the banding
// artifacts that can appear on the display.
// 0 Normal operation
// 1 Enable Dithering
#define G2SB_G2CONTROLSB_0_ENDITH_SHIFT                 _MK_SHIFT_CONST(30)
#define G2SB_G2CONTROLSB_0_ENDITH_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLSB_0_ENDITH_SHIFT)
#define G2SB_G2CONTROLSB_0_ENDITH_RANGE                 30:30
#define G2SB_G2CONTROLSB_0_ENDITH_WOFFSET                       0x0
#define G2SB_G2CONTROLSB_0_ENDITH_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_ENDITH_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLSB_0_ENDITH_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_ENDITH_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_ENDITH_DISABLE                       _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLSB_0_ENDITH_ENABLE                        _MK_ENUM_CONST(1)

//output destination writes (dw) go either to image memory or epp
//0 Output data is sent to memory
//1 YUV or RGB data is passed directly to EPP module and no destination writes
//  will take place.
#define G2SB_G2CONTROLSB_0_DISDW_SHIFT                  _MK_SHIFT_CONST(31)
#define G2SB_G2CONTROLSB_0_DISDW_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLSB_0_DISDW_SHIFT)
#define G2SB_G2CONTROLSB_0_DISDW_RANGE                  31:31
#define G2SB_G2CONTROLSB_0_DISDW_WOFFSET                        0x0
#define G2SB_G2CONTROLSB_0_DISDW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_DISDW_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLSB_0_DISDW_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_DISDW_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSB_0_DISDW_GOTO_IMAGE_BUFFER                      _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLSB_0_DISDW_GOTO_EPP                       _MK_ENUM_CONST(1)


// Register G2SB_G2CONTROLSECOND_0  //{host,2d,index=1e}
#define G2SB_G2CONTROLSECOND_0                  _MK_ADDR_CONST(0x1e)
#define G2SB_G2CONTROLSECOND_0_SECURE                   0x0
#define G2SB_G2CONTROLSECOND_0_WORD_COUNT                       0x1
#define G2SB_G2CONTROLSECOND_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_RESET_MASK                       _MK_MASK_CONST(0x3f61c3fe)
#define G2SB_G2CONTROLSECOND_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_READ_MASK                        _MK_MASK_CONST(0x3f71c3fe)
#define G2SB_G2CONTROLSECOND_0_WRITE_MASK                       _MK_MASK_CONST(0x3f71c3fe)
// Host port bit swap 1=enable   0= disable
//   1= enable
#define G2SB_G2CONTROLSECOND_0_BITSWAP_SHIFT                    _MK_SHIFT_CONST(1)
#define G2SB_G2CONTROLSECOND_0_BITSWAP_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLSECOND_0_BITSWAP_SHIFT)
#define G2SB_G2CONTROLSECOND_0_BITSWAP_RANGE                    1:1
#define G2SB_G2CONTROLSECOND_0_BITSWAP_WOFFSET                  0x0
#define G2SB_G2CONTROLSECOND_0_BITSWAP_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_BITSWAP_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLSECOND_0_BITSWAP_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_BITSWAP_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_BITSWAP_DISABLE                  _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLSECOND_0_BITSWAP_ENABLE                   _MK_ENUM_CONST(1)

// Host port byte swap 1=enable   0= disable
//   1= enable
#define G2SB_G2CONTROLSECOND_0_BEBSWAP_SHIFT                    _MK_SHIFT_CONST(2)
#define G2SB_G2CONTROLSECOND_0_BEBSWAP_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLSECOND_0_BEBSWAP_SHIFT)
#define G2SB_G2CONTROLSECOND_0_BEBSWAP_RANGE                    2:2
#define G2SB_G2CONTROLSECOND_0_BEBSWAP_WOFFSET                  0x0
#define G2SB_G2CONTROLSECOND_0_BEBSWAP_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_BEBSWAP_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLSECOND_0_BEBSWAP_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_BEBSWAP_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_BEBSWAP_DISABLE                  _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLSECOND_0_BEBSWAP_ENABLE                   _MK_ENUM_CONST(1)

// Host port word swap 1=enable   0= disable
#define G2SB_G2CONTROLSECOND_0_BEWSWAP_SHIFT                    _MK_SHIFT_CONST(3)
#define G2SB_G2CONTROLSECOND_0_BEWSWAP_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLSECOND_0_BEWSWAP_SHIFT)
#define G2SB_G2CONTROLSECOND_0_BEWSWAP_RANGE                    3:3
#define G2SB_G2CONTROLSECOND_0_BEWSWAP_WOFFSET                  0x0
#define G2SB_G2CONTROLSECOND_0_BEWSWAP_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_BEWSWAP_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLSECOND_0_BEWSWAP_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_BEWSWAP_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_BEWSWAP_DISABLE                  _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLSECOND_0_BEWSWAP_ENABLE                   _MK_ENUM_CONST(1)

// Alpha blending method
// FIX:
//   ALPHA blending:  Fixed alpha,  ALPHA is the value, B5G6R5 * B5G6R5
//   VCAA:            B5G6R5->B5G6R5
// PL1BPP:
//   ALPHA blending:  Alpha 1bit/pixel from memory plane, B5G6R5 * B5G6R5
//      NOTE: when ALPTYPE is PL1BPP, DSTX[2:0] must be zero, see bug 344489
// PL2BPP:
//   ALPHA blending:  Alpha 2bits/pixel from memory plane, B5G6R5 * B5G6R5
//      NOTE: when ALPTYPE is PL2BPP, DSTX[1:0] must be zero, see bug 344489
// PL4BPP:
//   ALPHA blending:  Alpha 4bits/pixel from memory plane, B5G6R5 * B5G6R5
//      NOTE: when ALPTYPE is PL4BPP, DSTX[0:0] must be zero, see bug 344489
// PL8BPP:
//   ALPHA blending:  Alpha 8bits/pixel from memory plane, B5G6R5 * B5G6R5
// PL44BPP:
//   ALPHA blending:  Alpha 8bits/pixel from memory plane src*4bits+dst*4bits, B5G6R5 * B5G6R5
// PLS1BPP:
//   ALPHA blending:  Alpha 1bit from source B5G5R5A1, alpha(MSB). Dest: B5G6R5.
//   VCAA:            reserved
// PLS4BPPAL:
//   ALPHA blending:  Alpha 4bits from source A4B4G4R4, alpha(LSB). Dest: B5G6R5.
// PLS4BPP:
//   ALPHA blending:  Alpha 4bits from source B4G4R4A4, alpha(MSB). Dest: B5G6R5.
//   VCAA:            R8G8B8A8->B5G6R5 without reading VCAA plane
//                     (surface blit with bpp down convert - implemented in hw by vcaa engine; not really a vcaa resolve)
// PLS8BPP:
//   ALPHA blending:  Alpha 8bits from source/destination(decided by ALPSRCORDST),
//                    R8G8B8A8, alpha(MSB). DST: R8G8B8A8
//   VCAA:            R8G8B8A8->R8G8B8A8, alpha has same blending method as RGB
// PLS8BX:
//   ALPHA blending:  Alpha 8bits from source B8G8R8A8, alpha(MSB). Dest: B5G6R5. (**Restrictions)
//   VCAA:            R8G8B8A8->B5G6R5
// PLS1BPPAL:
//   ALPHA blending:  Alpha 1 bit from source A1B5G5R5, alpha(LSB). Dest: B5G6R5
//   VCAA:            A1B5G5R5->A1B5G5R5
// **Restriction
// PLS8BX alpha blending has the following restrictions
// 1. Source/destination addresses have to be in 128bit boundary.
// 2. Destination width has to be multiple of 4 pixels.
// 3. Source/Destination strides have to be multiple of 128bits.
#define G2SB_G2CONTROLSECOND_0_ALPTYPE_SHIFT                    _MK_SHIFT_CONST(4)
#define G2SB_G2CONTROLSECOND_0_ALPTYPE_FIELD                    (_MK_MASK_CONST(0x1f) << G2SB_G2CONTROLSECOND_0_ALPTYPE_SHIFT)
#define G2SB_G2CONTROLSECOND_0_ALPTYPE_RANGE                    8:4
#define G2SB_G2CONTROLSECOND_0_ALPTYPE_WOFFSET                  0x0
#define G2SB_G2CONTROLSECOND_0_ALPTYPE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_ALPTYPE_DEFAULT_MASK                     _MK_MASK_CONST(0x1f)
#define G2SB_G2CONTROLSECOND_0_ALPTYPE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_ALPTYPE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_ALPTYPE_FIX                      _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLSECOND_0_ALPTYPE_PL1BPP                   _MK_ENUM_CONST(1)
#define G2SB_G2CONTROLSECOND_0_ALPTYPE_PL2BPP                   _MK_ENUM_CONST(2)
#define G2SB_G2CONTROLSECOND_0_ALPTYPE_PL4BPP                   _MK_ENUM_CONST(3)
#define G2SB_G2CONTROLSECOND_0_ALPTYPE_PL8BPP                   _MK_ENUM_CONST(4)
#define G2SB_G2CONTROLSECOND_0_ALPTYPE_PL44BPP                  _MK_ENUM_CONST(5)
#define G2SB_G2CONTROLSECOND_0_ALPTYPE_PLS1BPP                  _MK_ENUM_CONST(6)
#define G2SB_G2CONTROLSECOND_0_ALPTYPE_PLS4BPPAL                        _MK_ENUM_CONST(7)
#define G2SB_G2CONTROLSECOND_0_ALPTYPE_PLS4BPP                  _MK_ENUM_CONST(8)
#define G2SB_G2CONTROLSECOND_0_ALPTYPE_PLS8BPP                  _MK_ENUM_CONST(9)
#define G2SB_G2CONTROLSECOND_0_ALPTYPE_PLS8BX                   _MK_ENUM_CONST(10)
#define G2SB_G2CONTROLSECOND_0_ALPTYPE_PLS1BPPAL                        _MK_ENUM_CONST(11)

// 32bits blending mode, output alpha selection 0:source alpha, 1:destination alpha
#define G2SB_G2CONTROLSECOND_0_ALPSRCORDST_SHIFT                        _MK_SHIFT_CONST(9)
#define G2SB_G2CONTROLSECOND_0_ALPSRCORDST_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLSECOND_0_ALPSRCORDST_SHIFT)
#define G2SB_G2CONTROLSECOND_0_ALPSRCORDST_RANGE                        9:9
#define G2SB_G2CONTROLSECOND_0_ALPSRCORDST_WOFFSET                      0x0
#define G2SB_G2CONTROLSECOND_0_ALPSRCORDST_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_ALPSRCORDST_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLSECOND_0_ALPSRCORDST_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_ALPSRCORDST_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_ALPSRCORDST_DISABLE                      _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLSECOND_0_ALPSRCORDST_ENABLE                       _MK_ENUM_CONST(1)

// Pixel replication for Palm OS.
#define G2SB_G2CONTROLSECOND_0_PXLREP_SHIFT                     _MK_SHIFT_CONST(14)
#define G2SB_G2CONTROLSECOND_0_PXLREP_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLSECOND_0_PXLREP_SHIFT)
#define G2SB_G2CONTROLSECOND_0_PXLREP_RANGE                     14:14
#define G2SB_G2CONTROLSECOND_0_PXLREP_WOFFSET                   0x0
#define G2SB_G2CONTROLSECOND_0_PXLREP_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_PXLREP_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLSECOND_0_PXLREP_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_PXLREP_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_PXLREP_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLSECOND_0_PXLREP_ENABLE                    _MK_ENUM_CONST(1)

// Used by Palm OS to highlight a selected icon by swapping
//  Background and Foreground colors in a rectangle area
#define G2SB_G2CONTROLSECOND_0_SWAPBLT_SHIFT                    _MK_SHIFT_CONST(15)
#define G2SB_G2CONTROLSECOND_0_SWAPBLT_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLSECOND_0_SWAPBLT_SHIFT)
#define G2SB_G2CONTROLSECOND_0_SWAPBLT_RANGE                    15:15
#define G2SB_G2CONTROLSECOND_0_SWAPBLT_WOFFSET                  0x0
#define G2SB_G2CONTROLSECOND_0_SWAPBLT_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_SWAPBLT_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLSECOND_0_SWAPBLT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_SWAPBLT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//VCAA safe mode, if turned on, all up/bottom color data will be read in. This is a debug/cya incase the top/bottom color
//  fetch is broken.
#define G2SB_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SHIFT                     _MK_SHIFT_CONST(16)
#define G2SB_G2CONTROLSECOND_0_VCAA_SAFE_MODE_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SHIFT)
#define G2SB_G2CONTROLSECOND_0_VCAA_SAFE_MODE_RANGE                     16:16
#define G2SB_G2CONTROLSECOND_0_VCAA_SAFE_MODE_WOFFSET                   0x0
#define G2SB_G2CONTROLSECOND_0_VCAA_SAFE_MODE_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_VCAA_SAFE_MODE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_VCAA_SAFE_MODE_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLSECOND_0_VCAA_SAFE_MODE_ENABLE                    _MK_ENUM_CONST(1)

#define G2SB_G2CONTROLSECOND_0_G2NOSTOP_SHIFT                   _MK_SHIFT_CONST(20)
#define G2SB_G2CONTROLSECOND_0_G2NOSTOP_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLSECOND_0_G2NOSTOP_SHIFT)
#define G2SB_G2CONTROLSECOND_0_G2NOSTOP_RANGE                   20:20
#define G2SB_G2CONTROLSECOND_0_G2NOSTOP_WOFFSET                 0x0
#define G2SB_G2CONTROLSECOND_0_G2NOSTOP_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_G2NOSTOP_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_G2NOSTOP_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_G2NOSTOP_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Clipping rectangle control,
// if clip enable, bit 57 XYTDW should be cleared.
// 0x=clipping disabled,
// 10=draw only inside clipping rectangle,
// 11=draw only outside clipping rectangle
#define G2SB_G2CONTROLSECOND_0_CLIPC_SHIFT                      _MK_SHIFT_CONST(21)
#define G2SB_G2CONTROLSECOND_0_CLIPC_FIELD                      (_MK_MASK_CONST(0x3) << G2SB_G2CONTROLSECOND_0_CLIPC_SHIFT)
#define G2SB_G2CONTROLSECOND_0_CLIPC_RANGE                      22:21
#define G2SB_G2CONTROLSECOND_0_CLIPC_WOFFSET                    0x0
#define G2SB_G2CONTROLSECOND_0_CLIPC_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_CLIPC_DEFAULT_MASK                       _MK_MASK_CONST(0x3)
#define G2SB_G2CONTROLSECOND_0_CLIPC_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_CLIPC_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Fast Rotate mode sel
//------------------------------------------------------------------
// G2 Fast Rotate
//
// Transforms a surface via FR_TYPE transformation.
// Works in either 2-buffer (copy)  or 1-buffer mode (in place) mode.
// The engine breaks down a larger surface into a grid of smaller FR_BLOCKs.
// Works on the granularity of an FR_BLOCK.  An FR_BLOCK is:
//   16x16 pixel block (DSTCD = bpp8)
//    8x8  pixel block (DSTCD = bpp16)
//    4x4  pixel block (DSTCD = bpp32)
// Max surface size is 4096x4096
//
// Key information
//  - source and destination base address must be 128-bit word aligned
//  - engine works on FR_BLOCK granularity:
//      transformed surface width  in multiples of 16-bytes**
//      transformed surface height in multiples of 16/8/4 lines for bpp8/bpp16/bpp32 FR_BLOCK
//      if surface dimension is not a multiple, sw can program FR engine to transform larger surface
//         (round up to next FR_BLOCK in width and height-->transform-->calculate relative memory pointer address)
//  - during a rotational transformation (TRANS_LR, TRANS_RL, ROT_90, ROT_270):
//      the stride of the output surface != the stride of the input surface when working on non-square input
//      input:                        output:
//      *^----------------------           *$----------------------
//      $ 0  1  2  3  4  5  6  7           ^ 24 16 8  0  ^  ^  ^  ^
//      | 8  9 10 11 12 13 14 15           | 25 17 9  1  ^  ^  ^  ^
//      |16 17 18 19 20 21 22 23           | 26 18 10 2  ^  ^  ^  ^
//      |24 25 26 27 28 29 30 31           | 27 19 11 3  ^  ^  ^  ^
//      | -  -  -  -  *  *  *  *           | 28 20 12 4  *  *  *  *
//      | -  -  -  -  *  *  *  *           | 29 21 13 5  *  *  *  *
//      | -  -  -  -  *  *  *  *           | 30 22 14 6  *  *  *  *
//      | -  -  -  -  *  *  *  *           | 31 23 15 7  *  *  *  *
//
//  - Tiling alignment restrictions subsume FR restrictions because the
//    FR surface base address is the same as the start address.
//
//  Register Programming
//  ====================
//   FR_MODE - inplace or copy
//   FR_TYPE - type of transformation
//   DSTCD - bpp8, bpp16, bpp32
//   SRCBA - source base address
//   SRCWIDTH - (width in pixels-1)
//   SRCHEIGHT - (height in lines-1)
//   SRCS - source stride
//   DSTBA - dest base address
//   DSTS - dest stride
//   FR_READWAIT - always set to enable
//
// FR inefficency in the following setup :
// 1. FR_MODE==SQUARE
// 2. if(FR_TYPE==YFLIP && SRCHEIGHT==m*n && n==odd number) where m=8bpp?16:16bpp?8:4
//    Or if(FR_TYPE==XFLIP && SRCWIDTH==m*n && n==odd number) where m=8bpp?16:16bpp?8:4
// 3. Then, the middle 8 lines/pixels, E.G. YFLIP/16bpp/n==3, line8 to line15 will be processed twice. 00 = disable fast rotate - this turns off the 2nd level clock to fr_rotate engine.  Please remember to do so!
// 01 = src/dst copy mode - two separate buffers
// 10 = square in place - one buffer
// 11 = blank
#define G2SB_G2CONTROLSECOND_0_FR_MODE_SHIFT                    _MK_SHIFT_CONST(24)
#define G2SB_G2CONTROLSECOND_0_FR_MODE_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_G2CONTROLSECOND_0_FR_MODE_SHIFT)
#define G2SB_G2CONTROLSECOND_0_FR_MODE_RANGE                    25:24
#define G2SB_G2CONTROLSECOND_0_FR_MODE_WOFFSET                  0x0
#define G2SB_G2CONTROLSECOND_0_FR_MODE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_FR_MODE_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_G2CONTROLSECOND_0_FR_MODE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_FR_MODE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_FR_MODE_DISABLE                  _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLSECOND_0_FR_MODE_SRC_DST_COPY                     _MK_ENUM_CONST(1)
#define G2SB_G2CONTROLSECOND_0_FR_MODE_SQUARE                   _MK_ENUM_CONST(2)
#define G2SB_G2CONTROLSECOND_0_FR_MODE_BLANK                    _MK_ENUM_CONST(3)

//  Fast Rotate type     000 = FLIP_X
// 001 = FLIP_Y
// 010 = TRANS_LR (mirrors about diagonal. Diagonal runs from upper left to lower right)
// 011 = TRANS_RL (mirrors about diagonal. Diagonal runs from upper right to lower left)
// 100 = ROT_90 (counter clock wise by 90 degrees)
// 101 = ROT_180
// 110 = ROT_270 (clock wise by 90 degrees)
// 111 = IDENTITY
#define G2SB_G2CONTROLSECOND_0_FR_TYPE_SHIFT                    _MK_SHIFT_CONST(26)
#define G2SB_G2CONTROLSECOND_0_FR_TYPE_FIELD                    (_MK_MASK_CONST(0x7) << G2SB_G2CONTROLSECOND_0_FR_TYPE_SHIFT)
#define G2SB_G2CONTROLSECOND_0_FR_TYPE_RANGE                    28:26
#define G2SB_G2CONTROLSECOND_0_FR_TYPE_WOFFSET                  0x0
#define G2SB_G2CONTROLSECOND_0_FR_TYPE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_FR_TYPE_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define G2SB_G2CONTROLSECOND_0_FR_TYPE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_FR_TYPE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_FR_TYPE_FLIP_X                   _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLSECOND_0_FR_TYPE_FLIP_Y                   _MK_ENUM_CONST(1)
#define G2SB_G2CONTROLSECOND_0_FR_TYPE_TRANS_LR                 _MK_ENUM_CONST(2)
#define G2SB_G2CONTROLSECOND_0_FR_TYPE_TRANS_RL                 _MK_ENUM_CONST(3)
#define G2SB_G2CONTROLSECOND_0_FR_TYPE_ROT_90                   _MK_ENUM_CONST(4)
#define G2SB_G2CONTROLSECOND_0_FR_TYPE_ROT_180                  _MK_ENUM_CONST(5)
#define G2SB_G2CONTROLSECOND_0_FR_TYPE_ROT_270                  _MK_ENUM_CONST(6)
#define G2SB_G2CONTROLSECOND_0_FR_TYPE_IDENTITY                 _MK_ENUM_CONST(7)

//  Fast Rotate wait for read 0 = disable
// 1 = enable
// Enabling this bit forces FR to wait for the reads to be stored
// in the data return fifo before started to send writes out to
// the same block.
//
// Always set to ENABLE.  This is debug only.
#define G2SB_G2CONTROLSECOND_0_FR_READWAIT_SHIFT                        _MK_SHIFT_CONST(29)
#define G2SB_G2CONTROLSECOND_0_FR_READWAIT_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLSECOND_0_FR_READWAIT_SHIFT)
#define G2SB_G2CONTROLSECOND_0_FR_READWAIT_RANGE                        29:29
#define G2SB_G2CONTROLSECOND_0_FR_READWAIT_WOFFSET                      0x0
#define G2SB_G2CONTROLSECOND_0_FR_READWAIT_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_FR_READWAIT_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLSECOND_0_FR_READWAIT_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_FR_READWAIT_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLSECOND_0_FR_READWAIT_DISABLE                      _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLSECOND_0_FR_READWAIT_ENABLE                       _MK_ENUM_CONST(1)

//----------------------------------------------------------------------
//
// G2 Blit Formats:
// (1) G2 Blit size is based on height in lines, width in pixels,
//     stride in bytes, and pixel size (color depth). Unless alpha
//     blending is enabled, G2 doesn't care about pixel components.
//
//     Source color depths supported by G2 Blit:
//     =========================================
//       color depth same as destination: G2CONTROLMAIN.SRCCD = 1
//       monochrome:                      G2CONTROLMAIN.SRCCD = 0
//       (source monochrome color determined by G2SRCBGC, G2SRCFGC)
//
//     Pattern color depths supported by G2 Blit:
//     =========================================
//       color depth same as destination: G2PATOS.PATCD = 1
//       monochrome:                      G2PATOS.PATCD = 0
//       (pattern monochrome color determined by G2PATBGC, G2PATFGC)
//
//     Destination color depths supported by G2 Blit:
//     ==============================================
//       1 byte per pixel:    G2CONTROLMAIN.DSTCD = BPP8
//       2 bytes per pixel:   G2CONTROLMAIN.DSTCD = BPP16
//       4 bytes per pixel:   G2CONTROLMAIN.DSTCD = BPP32
//
// (2) Alpha blending operates on 3 or 4 component pixels of a specified
//     color depth. One of the components may be alpha (A), depending on the
//     alpha blend format, which is only allowed in certain component
//     positions defined below. The only format rule of the remaining
//     components is that they must be in the same source and destination
//     position because the alpha blend engine does not support component
//     swapping. For example, valid 32BPP formats are: RGBA_8888->RGBA_8888,
//     BGRA_8888->BGRA_8888, GRBA_8888->GRBA_8888, etc.
//
//     Source formats supported by G2 alpha blend:
//     ===========================================
//       color depth BPP8:  no supported formats
//       color depth BPP16:
//          ALPTYPE_PLS1BPP: xxxA_5551 (ex: BGRA_5551 = A[15] R[14:10] G[9:5] B[4:0])
//          ALPTYPE_PLS4BPP: xxxA_4444 (ex: BGRA_4444 = A[15:12] R[11:8] G[7:4] B[3:0])
//          (other)        : xxx_565   (ex: BGR_565   = R[15:11] G[10:5] B[4:0])
//       color depth BPP32:
//          (all)          : xxxA_8888 (ex: BRGA_8888 = A[31:24] R[23:16] G[15:8] B[7:0])
//
//
//     Destination formats supported by G2 alpha blend:
//     ================================================
//       color depth BPP8:  no supported formats
//       color depth BPP16: xxx_565   (ex: BGR_565   = R[15:11] G[10:5] B[4:0])
//       color depth BPP32: xxxA_8888 (ex: BRGA_8888 = A[31:24] R[23:16] G[15:8] B[7:0])
//
//     The following table
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     | src cd  |   src format                  | dst cd  | dst format     | examples:                                  |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP8   |  no support                   |  BPP8   | no support     |                                            |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP16  | xyzA_5551, xyzA_4444, xyz_565 |  BPP16  | xyz_565        | BGRA_5551->BGR_565, RGB_565->RGB565        |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP32  | xyzA_8888                     |  BPP32  | xyzA_8888      | RGBA_8888->RGBA_8888, BGRA_8888->BGRA_8888 |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP32  | xyzA_8888                     |  BPP16  | xyz_565        | RGBA_8888->RGB_565, BGRA_8888->BGR_565     |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//
//----------------------------------------------------------
// VCAA Resolve engine
//
// (1) Format support
//
// +-----------------+--------------------+----------------------+
// | srcColor format | srcCoverage format | legal dest format(s) |
// +-----------------+--------------------+----------------------+
// |     A1B5G5R5    |        VCAA        |       A1B5G5R5       |
// +-----------------+--------------------+----------------------+
// |     R8G8B8A8    |        VCAA        |   R8G8B8A8, B5G6R5   |
// +-----------------+--------------------+----------------------+
// |      B5G6R5     |        VCAA        |         B5G6R5       |
// +-----------------+--------------------+----------------------+
//
// To program resolve type:
//   ALPTYPE == FIX:       B5G6R5   -> B5G6R5
//   ALPTYPE == PLS1BPPAL: A1B5G5R5 -> A1B5G5R5
//   ALPTYPE == PLS8BPP:   R8G8B8A8 -> R8G8B8A8
//   ALPTYPE == PLS8BX:    R8G8B8A8 -> B5G6R5
//
// (2) Color surface programming
//
//     color surface base address:  SRCBA
//       sub-surface start x:       SRCX      (pixel index)
//       sub-surface start y:       SRCY      (line index)
//     color surface stride:        SRCS      (bytes)
//
//     The engine supports sub-surface resolve.  One can imagine a full color buffer of 1024x768, but
//
//     [pseudo_code]
//       color_surface_start_address_fetch = pcurctx->regs.rG2SRCBA.uSRCBA() +
//        (pcurctx->regs.rG2SRCPS.uSRCX() * VCAAState.color_surface_depth) +
//        (pcurctx->regs.rG2SRCPS.uSRCY() * VCAAState.color_surface_stride);
//
// (3) VCAA surface programming
//
//     vcaa surface base address:   PATBA
//     vcaa surface stride:         PATST     (bytes)
//
//     [pseudo_code]
//       vcaa_surface_start_address_fetch = pcurctx->regs.rG2PATBA.uPATBA();
//
//       SW *MUST* directly program this register to the proper sub-surface location in the vcaa surface
//        which corresponds to the SRCX and SRCY programming. The calculation is
//            PATBA = vcaa_base_address + SRCX * (1) + SRCY * PATST;
//
// (4) Resolve surface programming
//
//     resolve window width:        DSTWIDTH  (pixels)
//     resolve window height:       DSTHEIGHT (lines)
//     resolve output stride:       DSTS      (bytes)
//
//  These values program the width and height of the resolved surface.  In the base case,
//   DSTWIDTH  = color surface width
//   DSTHEIGHT = color sufrace height
//   DSTS      = resolve surface format bpp * DSTWIDTH
//
//  The vcaa engine technically supports DSTX and DSTY (like its cousin SRCX and SRCY).  This was not
//  requested by the original RFE by SW during the initial design.
//
//  [pseudo_code]
//     resolve_surface_start_address_put = pcurctx->regs.rG2DSTBA.uDSTBA() +
//       (pcurctx->regs.rG2DSTPS.uDSTX() * resolve_surface_color_depth) +
//       (pcurctx->regs.rG2DSTPS.uDSTY() * resolve_surface_color_stride);
//
//
// (5) Resolving a pixel
//
//   The coverage surface is a 8 bits per pixel surface (C4X4).  The surface is initialized to all 1s by 3d.
//
//   For a given pixel, we need to look up 4 bits of coverage data.
//   If the data is 0xf, the pixel does not need to be resolved.
//   Otherwise, we need to reblend the pixel with certain weightings of its neighbors (i.e. we're on the edge of some geometry)
//
//   If any coverage bits is 0, we need to resolve the color.  To do so, we calculate the following eqn:
//   color_new = (
//                 20*color_old +
//                 27*(
//                     ((cover_down  == 0) ? color_down  : color_old) +
//                     ((cover_right == 0) ? color_right : color_old) +
//                     ((cover_left  == 0) ? color_left  : color_old) +
//                     ((cover_up    == 0) ? color_up    : color_old)
//                     )
//               ) / 128;
//
//   If coverage bit == 0, then we use the neighbor color value in the resolve
//   If coverage bit == 1, then we use the center   color value in the resolve
//
//   The resolve is done on a per channel (r/g/b/a) basis:
//     format convert input channel to 8-bit
//     perform resolve equation above
//     format convert to output format
//
//   For the resolution of the alpha channel:
//     In B5G6R5:   no alpha information.  do nothing.
//     In A1B5G5R5: no resolve.  keep the source color alpha bit.
//     In R8G8B8A8: normal 8-bit channel resolve
//
// (6) Resolving a pixel on the edge
//
//    When on an edge, the vcaa engine treats the coverage bit as a 1.  Use the center color value.
//    This holds true even on the edge of the sub-surface resolve window when located in the middle of the larger surface
//
// (7) Maximum dimensions
//
//    The maximum resolve sub-surface is 4096 pixels wide.
//
// (8) Surface restrictions
//    The VCAA engine has the following restrictions w.r.t input surfaces
//      - input base address is 128-bit memory word aligned
//      - input stride is multiple of 128-bits (16 bytes)
//    The VCAA engine has the following restrictions w.r.t output surfaces
//      - output base address is 128-bit memory word aligned
//      - output stride is multiple of 128-bits (16 bytes)
// (9) Coverage surface layout
//    The surface is C4X4.  doc/<previous projects>/3d/qrast_sides.vsd/qrast_arch.doc/qrast_vcaa.doc has a wealth of info.
//
//    Surface layout (C4X4)
//    =====================
//
//       (lsb2msb)  C0_C1_C2_C3_X_X_X_X     (X is a don't care.  Qrast inits to 1)
//       (msb2lsb)  X_X_X_X_C3_C2_C1_C0
//
//
//     +          o          o
//          C0
//             C1   Cov(0,1)
//        C2
//          C3
//     o          o          o
//
//       Cov(1,0)   Cov(1,1)
//
//     o          o          o
//
//
//     +/o = pixel centers
//
//     In the example above,
//        Cov(0,0) = X_X_X_X_C3_C2_C1_C0
//        C3       = V_C3(Cov(0,0));
//        ..         ..
//        C0       = V_C0(Cov(0,0));
//     #define V_C3(bits) (bits & 0x8)
//     #define V_C2(bits) (bits & 0x4)
//     #define V_C1(bits) (bits & 0x2)
//     #define V_C0(bits) (bits & 0x1)
//
//    Resolving a pixel
//    =================
//     In an ideal world, the coverage would be simply laid out such that when resolving Pixel(x,y), we would
//    need only to fetch Cov(x,y) to get all 4 bits of information.
//     In actuality, the coverage surface was rearranged to help qrast in performance.  To resolve Pixel(x,y)
//    gr2d has to fetch 4 C4X4 bytes [Cov(x,y), Cov(x-1,y), Cov(x,y-1), Cov(x-1,y-1)].  From each C4X4 byte, it
//    extracts one bit which is used in the resolve equations shown in (5).
//
//
//    Need the logical vcaa bits (DRLU) for blend which is spread across four C4X4 coverage bytes
//
//          U
//    L
//        o
//            R
//      D
//
//    where
//
//     o = Pixel(x,y)
//     D = V_C1(Cov(x-1,y))
//     R = V_C0(Cov(x,y))
//     L = V_C3(Cov(x-1,y-1))
//     U = V_C2(Cov(x,y-1))
//
//
// (10) Other documentation
//       cmod/g2/fsim/g2vcaa.cpp - cmodel implementation with comments
//       doc/<previous projects>/3d/qrast_sides.vsd/qrast_arch.doc/qrast_vcaa.doc
//

// Register G2SB_G2CONTROLMAIN_0  //{host,2d,sb,index=1f}
#define G2SB_G2CONTROLMAIN_0                    _MK_ADDR_CONST(0x1f)
#define G2SB_G2CONTROLMAIN_0_SECURE                     0x0
#define G2SB_G2CONTROLMAIN_0_WORD_COUNT                         0x1
#define G2SB_G2CONTROLMAIN_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_RESET_MASK                         _MK_MASK_CONST(0x7eccffff)
#define G2SB_G2CONTROLMAIN_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_READ_MASK                  _MK_MASK_CONST(0x7fffffff)
#define G2SB_G2CONTROLMAIN_0_WRITE_MASK                         _MK_MASK_CONST(0x7fffffff)
// Command Type:  00=BitBlt
// 01=Line Draw
// 10=VCAA
// 11=reserved
//  When the raise command is in executing
//  (there are no other outstanding commands with same channel being executed)
#define G2SB_G2CONTROLMAIN_0_CMDT_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_G2CONTROLMAIN_0_CMDT_FIELD                 (_MK_MASK_CONST(0x3) << G2SB_G2CONTROLMAIN_0_CMDT_SHIFT)
#define G2SB_G2CONTROLMAIN_0_CMDT_RANGE                 1:0
#define G2SB_G2CONTROLMAIN_0_CMDT_WOFFSET                       0x0
#define G2SB_G2CONTROLMAIN_0_CMDT_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_CMDT_DEFAULT_MASK                  _MK_MASK_CONST(0x3)
#define G2SB_G2CONTROLMAIN_0_CMDT_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_CMDT_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_CMDT_BITBLT                        _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLMAIN_0_CMDT_LINEDRAW                      _MK_ENUM_CONST(1)
#define G2SB_G2CONTROLMAIN_0_CMDT_VCAA                  _MK_ENUM_CONST(2)
#define G2SB_G2CONTROLMAIN_0_CMDT_RESERVED1                     _MK_ENUM_CONST(3)

//fast fill rectangle in 128bit/clock
//Some limitaions with this mode:
//srcsld==1 rop==0xcc, no clipping, no transparency
//xdir==0, ydir==0, flip==0, xytdw==0
//Results are undefined if the above limitations are not satified.
#define G2SB_G2CONTROLMAIN_0_TURBOFILL_SHIFT                    _MK_SHIFT_CONST(2)
#define G2SB_G2CONTROLMAIN_0_TURBOFILL_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLMAIN_0_TURBOFILL_SHIFT)
#define G2SB_G2CONTROLMAIN_0_TURBOFILL_RANGE                    2:2
#define G2SB_G2CONTROLMAIN_0_TURBOFILL_WOFFSET                  0x0
#define G2SB_G2CONTROLMAIN_0_TURBOFILL_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_TURBOFILL_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLMAIN_0_TURBOFILL_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_TURBOFILL_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//Command finish timing bit 0: 2D command finishs when last data has been pushed to memory write client.
// 1: 2D command waits memory write client to be idle to finish.
#define G2SB_G2CONTROLMAIN_0_TEST0BIT_SHIFT                     _MK_SHIFT_CONST(3)
#define G2SB_G2CONTROLMAIN_0_TEST0BIT_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLMAIN_0_TEST0BIT_SHIFT)
#define G2SB_G2CONTROLMAIN_0_TEST0BIT_RANGE                     3:3
#define G2SB_G2CONTROLMAIN_0_TEST0BIT_WOFFSET                   0x0
#define G2SB_G2CONTROLMAIN_0_TEST0BIT_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_TEST0BIT_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLMAIN_0_TEST0BIT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_TEST0BIT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_TEST0BIT_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLMAIN_0_TEST0BIT_ENABLE                    _MK_ENUM_CONST(1)

// BitBlt Source Copy Fade enable, 1=enable (share with mltln), only support
//  16bpp mode
#define G2SB_G2CONTROLMAIN_0_FADEN_SHIFT                        _MK_SHIFT_CONST(4)
#define G2SB_G2CONTROLMAIN_0_FADEN_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLMAIN_0_FADEN_SHIFT)
#define G2SB_G2CONTROLMAIN_0_FADEN_RANGE                        4:4
#define G2SB_G2CONTROLMAIN_0_FADEN_WOFFSET                      0x0
#define G2SB_G2CONTROLMAIN_0_FADEN_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_FADEN_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLMAIN_0_FADEN_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_FADEN_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_FADEN_DISABLE                      _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLMAIN_0_FADEN_ENABLE                       _MK_ENUM_CONST(1)

// BitBlt Alpha Blending, 1=enable. 0=disable,
//when both Faden and alpen are 1, output=Source*alpha_v + fadoff,
// alpha_v is decided by alptype
#define G2SB_G2CONTROLMAIN_0_ALPEN_SHIFT                        _MK_SHIFT_CONST(5)
#define G2SB_G2CONTROLMAIN_0_ALPEN_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLMAIN_0_ALPEN_SHIFT)
#define G2SB_G2CONTROLMAIN_0_ALPEN_RANGE                        5:5
#define G2SB_G2CONTROLMAIN_0_ALPEN_WOFFSET                      0x0
#define G2SB_G2CONTROLMAIN_0_ALPEN_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_ALPEN_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLMAIN_0_ALPEN_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_ALPEN_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// BitBlt Solid Source Color Fill: 1=enable. FGC will be used as
// the color value.
#define G2SB_G2CONTROLMAIN_0_SRCSLD_SHIFT                       _MK_SHIFT_CONST(6)
#define G2SB_G2CONTROLMAIN_0_SRCSLD_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLMAIN_0_SRCSLD_SHIFT)
#define G2SB_G2CONTROLMAIN_0_SRCSLD_RANGE                       6:6
#define G2SB_G2CONTROLMAIN_0_SRCSLD_WOFFSET                     0x0
#define G2SB_G2CONTROLMAIN_0_SRCSLD_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_SRCSLD_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLMAIN_0_SRCSLD_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_SRCSLD_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_SRCSLD_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLMAIN_0_SRCSLD_ENABLE                      _MK_ENUM_CONST(1)

// BitBlt Solid Pattern Fill: 1=enable. BGC will be used as
// the color value.
#define G2SB_G2CONTROLMAIN_0_PATSLD_SHIFT                       _MK_SHIFT_CONST(7)
#define G2SB_G2CONTROLMAIN_0_PATSLD_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLMAIN_0_PATSLD_SHIFT)
#define G2SB_G2CONTROLMAIN_0_PATSLD_RANGE                       7:7
#define G2SB_G2CONTROLMAIN_0_PATSLD_WOFFSET                     0x0
#define G2SB_G2CONTROLMAIN_0_PATSLD_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_PATSLD_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLMAIN_0_PATSLD_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_PATSLD_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_PATSLD_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLMAIN_0_PATSLD_ENABLE                      _MK_ENUM_CONST(1)

// When mono pattern is set, we use mono tile pattern fill.
//
//  current pattern client can support a 16x16 bit tile which can be used
//  to generate a larger surface (i.e. tile this surface in the x and y direction)
//  The tile is stored in memory.  Currently, PATXO and PATYO tell you where
//  to start in the 16x16 tile when expanding the monochrome data.
//
//  See patxo and patyo comments below for programming (hw bid 247332)
//   When xdir==1
//     Patxo = pattern width - (patxo+destination width)&0xF   -- For xoffsets
//  y offsets PATYO remains the same when xdir/ydir change.
//
//
//  How the tile replication pattern looks based on xdir/ydir (without programming patxo above):
//
//  xdir=0 ydir=0              xdir=1 ydir=0
//
//   +---+--+                  +--+---+
//   |^|^|^||                  ||^|^|^|
//   |~~~|~~|                  |~~|~~~|
//   +---+--|                  |--+---+
//   |^|^|^||                  ||^|^|^|
//   +------+                  +------+
//
//
//   +---+--+                  +--+---+
//   |^|^|^||                  ||^|^|^|
//   |~~~|~~|                  |~~|~~~|
//   +---+--|                  |--+---+
//   |^|^|^||                  ||^|^|^|
//   +------+                  +------+
//    //
//  xdir=0 ydir=1              xdir=1 ydir=1
//
//   Mono tile is
//      +---+
//      |^|^|
//      |~~~|
//      +---+
//
//
#define G2SB_G2CONTROLMAIN_0_PATFL_SHIFT                        _MK_SHIFT_CONST(8)
#define G2SB_G2CONTROLMAIN_0_PATFL_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLMAIN_0_PATFL_SHIFT)
#define G2SB_G2CONTROLMAIN_0_PATFL_RANGE                        8:8
#define G2SB_G2CONTROLMAIN_0_PATFL_WOFFSET                      0x0
#define G2SB_G2CONTROLMAIN_0_PATFL_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_PATFL_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLMAIN_0_PATFL_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_PATFL_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_PATFL_DISABLE                      _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLMAIN_0_PATFL_ENABLE                       _MK_ENUM_CONST(1)

//  0=incrementing, 1=decrementing.
//  xdir should not be set when source surface has different color depth as destination surface.
//  e.g. ALPTYPE=PLS8BX (32bpp blending with 16bpp), xdir has to be 0
//  SRCCD==0 (mono src) OR PATCD==0 (mono pat), xdir has to be 0
#define G2SB_G2CONTROLMAIN_0_XDIR_SHIFT                 _MK_SHIFT_CONST(9)
#define G2SB_G2CONTROLMAIN_0_XDIR_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLMAIN_0_XDIR_SHIFT)
#define G2SB_G2CONTROLMAIN_0_XDIR_RANGE                 9:9
#define G2SB_G2CONTROLMAIN_0_XDIR_WOFFSET                       0x0
#define G2SB_G2CONTROLMAIN_0_XDIR_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_XDIR_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLMAIN_0_XDIR_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_XDIR_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//  0=incrementing, 1=decrementing.
//  ydir should not be set when source surface has different color depth as destination surface.
//  SRCCD==0 (mono src) OR PATCD==0 (mono pat), ydir has to be 0
#define G2SB_G2CONTROLMAIN_0_YDIR_SHIFT                 _MK_SHIFT_CONST(10)
#define G2SB_G2CONTROLMAIN_0_YDIR_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLMAIN_0_YDIR_SHIFT)
#define G2SB_G2CONTROLMAIN_0_YDIR_RANGE                 10:10
#define G2SB_G2CONTROLMAIN_0_YDIR_WOFFSET                       0x0
#define G2SB_G2CONTROLMAIN_0_YDIR_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_YDIR_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLMAIN_0_YDIR_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_YDIR_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// xy transpose,
// Line stride DSTS has to be 16bytes aligned if enabled.
// If XYTDW==1, ROP can not include destination.
#define G2SB_G2CONTROLMAIN_0_XYTDW_SHIFT                        _MK_SHIFT_CONST(11)
#define G2SB_G2CONTROLMAIN_0_XYTDW_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLMAIN_0_XYTDW_SHIFT)
#define G2SB_G2CONTROLMAIN_0_XYTDW_RANGE                        11:11
#define G2SB_G2CONTROLMAIN_0_XYTDW_WOFFSET                      0x0
#define G2SB_G2CONTROLMAIN_0_XYTDW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_XYTDW_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLMAIN_0_XYTDW_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_XYTDW_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Source Data is in Pack Mode.
//  SRCLNGAP in G2SRCPACK is the line gap for source packed mode.
//  If(SRCPACK && ~SRCSEL), source data is packed and from screen, SRCMONOW/SRCMONOH
//  should be programmed properly to fetch data from
//  frame buffer.
//  Note, PACK is not offically supported when the surface is tiled.
#define G2SB_G2CONTROLMAIN_0_SRCPACK_SHIFT                      _MK_SHIFT_CONST(12)
#define G2SB_G2CONTROLMAIN_0_SRCPACK_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLMAIN_0_SRCPACK_SHIFT)
#define G2SB_G2CONTROLMAIN_0_SRCPACK_RANGE                      12:12
#define G2SB_G2CONTROLMAIN_0_SRCPACK_WOFFSET                    0x0
#define G2SB_G2CONTROLMAIN_0_SRCPACK_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_SRCPACK_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLMAIN_0_SRCPACK_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_SRCPACK_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_SRCPACK_DISABLE                    _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLMAIN_0_SRCPACK_ENABLE                     _MK_ENUM_CONST(1)

// Pattern Data is in Pack Mode.
//  PATLNGAP in G2PATPACK is the line gap for pattern packed mode
//  If(PATPACK && ~PATSEl), pattern data is packed and from screen, PATMONOW/PATMONOH
//  should be programmed properly to fetch pattern data from
//  frame buffer.
//  Note, PACK is not offically supported when the surface is tiled.
#define G2SB_G2CONTROLMAIN_0_PATPACK_SHIFT                      _MK_SHIFT_CONST(13)
#define G2SB_G2CONTROLMAIN_0_PATPACK_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLMAIN_0_PATPACK_SHIFT)
#define G2SB_G2CONTROLMAIN_0_PATPACK_RANGE                      13:13
#define G2SB_G2CONTROLMAIN_0_PATPACK_WOFFSET                    0x0
#define G2SB_G2CONTROLMAIN_0_PATPACK_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_PATPACK_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLMAIN_0_PATPACK_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_PATPACK_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_PATPACK_DISABLE                    _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLMAIN_0_PATPACK_ENABLE                     _MK_ENUM_CONST(1)

// flip y direction to make image upside down or the other way.
// If YFLIP==1, ROP can not include destination.
#define G2SB_G2CONTROLMAIN_0_YFLIP_SHIFT                        _MK_SHIFT_CONST(14)
#define G2SB_G2CONTROLMAIN_0_YFLIP_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLMAIN_0_YFLIP_SHIFT)
#define G2SB_G2CONTROLMAIN_0_YFLIP_RANGE                        14:14
#define G2SB_G2CONTROLMAIN_0_YFLIP_WOFFSET                      0x0
#define G2SB_G2CONTROLMAIN_0_YFLIP_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_YFLIP_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLMAIN_0_YFLIP_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_YFLIP_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_YFLIP_DSIABLE                      _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLMAIN_0_YFLIP_ENABLE                       _MK_ENUM_CONST(1)

// Source Data Select:
#define G2SB_G2CONTROLMAIN_0_SRCSEL_SHIFT                       _MK_SHIFT_CONST(15)
#define G2SB_G2CONTROLMAIN_0_SRCSEL_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLMAIN_0_SRCSEL_SHIFT)
#define G2SB_G2CONTROLMAIN_0_SRCSEL_RANGE                       15:15
#define G2SB_G2CONTROLMAIN_0_SRCSEL_WOFFSET                     0x0
#define G2SB_G2CONTROLMAIN_0_SRCSEL_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_SRCSEL_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLMAIN_0_SRCSEL_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_SRCSEL_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_SRCSEL_SCREEN                      _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLMAIN_0_SRCSEL_MEMORY                      _MK_ENUM_CONST(1)

// Destination color depth:
//   00=8-bpp, 01=16-bpp, 10=32-bpp. 11=reserved
#define G2SB_G2CONTROLMAIN_0_DSTCD_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_G2CONTROLMAIN_0_DSTCD_FIELD                        (_MK_MASK_CONST(0x3) << G2SB_G2CONTROLMAIN_0_DSTCD_SHIFT)
#define G2SB_G2CONTROLMAIN_0_DSTCD_RANGE                        17:16
#define G2SB_G2CONTROLMAIN_0_DSTCD_WOFFSET                      0x0
#define G2SB_G2CONTROLMAIN_0_DSTCD_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_DSTCD_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_DSTCD_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_DSTCD_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_DSTCD_BPP8                 _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLMAIN_0_DSTCD_BPP16                        _MK_ENUM_CONST(1)
#define G2SB_G2CONTROLMAIN_0_DSTCD_BPP32                        _MK_ENUM_CONST(2)
#define G2SB_G2CONTROLMAIN_0_DSTCD_RESERVED3                    _MK_ENUM_CONST(3)

// Destination read transparency enable:
//   0x=destination read transparency disabled
//   10=color destination read transparency
//   11=inverse color destination read transparency.
// 20 rw INIC
// Initiate Command
// (1=initiate command immediately, 0=wait for launch write)
#define G2SB_G2CONTROLMAIN_0_DSTT_SHIFT                 _MK_SHIFT_CONST(18)
#define G2SB_G2CONTROLMAIN_0_DSTT_FIELD                 (_MK_MASK_CONST(0x3) << G2SB_G2CONTROLMAIN_0_DSTT_SHIFT)
#define G2SB_G2CONTROLMAIN_0_DSTT_RANGE                 19:18
#define G2SB_G2CONTROLMAIN_0_DSTT_WOFFSET                       0x0
#define G2SB_G2CONTROLMAIN_0_DSTT_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_DSTT_DEFAULT_MASK                  _MK_MASK_CONST(0x3)
#define G2SB_G2CONTROLMAIN_0_DSTT_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_DSTT_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//0 Source mono
//1 Source has same color depth as destination
//  SRCCD==0 xdir/ydir has to be 0
#define G2SB_G2CONTROLMAIN_0_SRCCD_SHIFT                        _MK_SHIFT_CONST(20)
#define G2SB_G2CONTROLMAIN_0_SRCCD_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLMAIN_0_SRCCD_SHIFT)
#define G2SB_G2CONTROLMAIN_0_SRCCD_RANGE                        20:20
#define G2SB_G2CONTROLMAIN_0_SRCCD_WOFFSET                      0x0
#define G2SB_G2CONTROLMAIN_0_SRCCD_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_SRCCD_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_SRCCD_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_SRCCD_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Start from Msb or lsb in byte when mono expansion
// If HLMONO is 1, bit 0 (the lsb) is the first bit
// If HLMONO is 0, bit 7 (the msb) is the first bit
#define G2SB_G2CONTROLMAIN_0_HLMONO_SHIFT                       _MK_SHIFT_CONST(21)
#define G2SB_G2CONTROLMAIN_0_HLMONO_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLMAIN_0_HLMONO_SHIFT)
#define G2SB_G2CONTROLMAIN_0_HLMONO_RANGE                       21:21
#define G2SB_G2CONTROLMAIN_0_HLMONO_WOFFSET                     0x0
#define G2SB_G2CONTROLMAIN_0_HLMONO_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_HLMONO_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_HLMONO_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_HLMONO_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Source transparency enable: 0x=source transparency disabled,
// 10=mono source background transparency
//    or color source transparency,
// 11=mono source foreground transparency
//    or inverse color source transparency.
// NOTE: When source transparency is enabled and SRCCD==0(mono)
//       SRCBGC!=SRCFGC should be satisfied.
#define G2SB_G2CONTROLMAIN_0_SRCT_SHIFT                 _MK_SHIFT_CONST(22)
#define G2SB_G2CONTROLMAIN_0_SRCT_FIELD                 (_MK_MASK_CONST(0x3) << G2SB_G2CONTROLMAIN_0_SRCT_SHIFT)
#define G2SB_G2CONTROLMAIN_0_SRCT_RANGE                 23:22
#define G2SB_G2CONTROLMAIN_0_SRCT_WOFFSET                       0x0
#define G2SB_G2CONTROLMAIN_0_SRCT_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_SRCT_DEFAULT_MASK                  _MK_MASK_CONST(0x3)
#define G2SB_G2CONTROLMAIN_0_SRCT_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_SRCT_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Source base address select:
//  0=srcba, 1=dstba. This is not used for Line Draw and
// if source data comes from host memory.
#define G2SB_G2CONTROLMAIN_0_SRCBAS_SHIFT                       _MK_SHIFT_CONST(24)
#define G2SB_G2CONTROLMAIN_0_SRCBAS_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLMAIN_0_SRCBAS_SHIFT)
#define G2SB_G2CONTROLMAIN_0_SRCBAS_RANGE                       24:24
#define G2SB_G2CONTROLMAIN_0_SRCBAS_WOFFSET                     0x0
#define G2SB_G2CONTROLMAIN_0_SRCBAS_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_SRCBAS_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_SRCBAS_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_SRCBAS_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//Display Switching Window Control (GCSW[1:0])
//This parameter controls multi-buffering for Display.
//x0 At end of current command, don't send signal to Display to switch buffer.
//01 two buffers, dstba and dstba_b are used
//11 three buffers, dstba, dstba_b dstba_c are used
#define G2SB_G2CONTROLMAIN_0_GCSW_SHIFT                 _MK_SHIFT_CONST(25)
#define G2SB_G2CONTROLMAIN_0_GCSW_FIELD                 (_MK_MASK_CONST(0x3) << G2SB_G2CONTROLMAIN_0_GCSW_SHIFT)
#define G2SB_G2CONTROLMAIN_0_GCSW_RANGE                 26:25
#define G2SB_G2CONTROLMAIN_0_GCSW_WOFFSET                       0x0
#define G2SB_G2CONTROLMAIN_0_GCSW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_GCSW_DEFAULT_MASK                  _MK_MASK_CONST(0x3)
#define G2SB_G2CONTROLMAIN_0_GCSW_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_GCSW_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//source direct addressing
#define G2SB_G2CONTROLMAIN_0_SRCDIR_SHIFT                       _MK_SHIFT_CONST(27)
#define G2SB_G2CONTROLMAIN_0_SRCDIR_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLMAIN_0_SRCDIR_SHIFT)
#define G2SB_G2CONTROLMAIN_0_SRCDIR_RANGE                       27:27
#define G2SB_G2CONTROLMAIN_0_SRCDIR_WOFFSET                     0x0
#define G2SB_G2CONTROLMAIN_0_SRCDIR_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_SRCDIR_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLMAIN_0_SRCDIR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_SRCDIR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//destination direct addressing
#define G2SB_G2CONTROLMAIN_0_DSTDIR_SHIFT                       _MK_SHIFT_CONST(28)
#define G2SB_G2CONTROLMAIN_0_DSTDIR_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLMAIN_0_DSTDIR_SHIFT)
#define G2SB_G2CONTROLMAIN_0_DSTDIR_RANGE                       28:28
#define G2SB_G2CONTROLMAIN_0_DSTDIR_WOFFSET                     0x0
#define G2SB_G2CONTROLMAIN_0_DSTDIR_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_DSTDIR_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLMAIN_0_DSTDIR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_DSTDIR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// This feature is not offically supported.
//seperate destination read/write surface address
//0: read/write use DSTBA
//1: read uses SRCBA_B, write uses DSTBA
#define G2SB_G2CONTROLMAIN_0_DST_RD_WR_SEP_SHIFT                        _MK_SHIFT_CONST(29)
#define G2SB_G2CONTROLMAIN_0_DST_RD_WR_SEP_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLMAIN_0_DST_RD_WR_SEP_SHIFT)
#define G2SB_G2CONTROLMAIN_0_DST_RD_WR_SEP_RANGE                        29:29
#define G2SB_G2CONTROLMAIN_0_DST_RD_WR_SEP_WOFFSET                      0x0
#define G2SB_G2CONTROLMAIN_0_DST_RD_WR_SEP_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_DST_RD_WR_SEP_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLMAIN_0_DST_RD_WR_SEP_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_DST_RD_WR_SEP_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// pattern Data Select: SRCSEL and PATSEL can't be both enabled.
#define G2SB_G2CONTROLMAIN_0_PATSEL_SHIFT                       _MK_SHIFT_CONST(30)
#define G2SB_G2CONTROLMAIN_0_PATSEL_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_G2CONTROLMAIN_0_PATSEL_SHIFT)
#define G2SB_G2CONTROLMAIN_0_PATSEL_RANGE                       30:30
#define G2SB_G2CONTROLMAIN_0_PATSEL_WOFFSET                     0x0
#define G2SB_G2CONTROLMAIN_0_PATSEL_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_PATSEL_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_G2CONTROLMAIN_0_PATSEL_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_PATSEL_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2CONTROLMAIN_0_PATSEL_SCREEN                      _MK_ENUM_CONST(0)
#define G2SB_G2CONTROLMAIN_0_PATSEL_MEMORY                      _MK_ENUM_CONST(1)


// Register G2SB_G2ROPFADE_0  //{host,2d,index=20}
#define G2SB_G2ROPFADE_0                        _MK_ADDR_CONST(0x20)
#define G2SB_G2ROPFADE_0_SECURE                         0x0
#define G2SB_G2ROPFADE_0_WORD_COUNT                     0x1
#define G2SB_G2ROPFADE_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_G2ROPFADE_0_RESET_MASK                     _MK_MASK_CONST(0xff)
#define G2SB_G2ROPFADE_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_G2ROPFADE_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2ROPFADE_0_READ_MASK                      _MK_MASK_CONST(0xffff00ff)
#define G2SB_G2ROPFADE_0_WRITE_MASK                     _MK_MASK_CONST(0xffff00ff)
//If YFLIP==1 or XYTDW==1, ROP can not include destination.
//Since destination may have been corrupted before reading out.
#define G2SB_G2ROPFADE_0_ROP_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_G2ROPFADE_0_ROP_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_G2ROPFADE_0_ROP_SHIFT)
#define G2SB_G2ROPFADE_0_ROP_RANGE                      7:0
#define G2SB_G2ROPFADE_0_ROP_WOFFSET                    0x0
#define G2SB_G2ROPFADE_0_ROP_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2ROPFADE_0_ROP_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define G2SB_G2ROPFADE_0_ROP_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2ROPFADE_0_ROP_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

//
#define G2SB_G2ROPFADE_0_FADCOE_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_G2ROPFADE_0_FADCOE_FIELD                   (_MK_MASK_CONST(0xff) << G2SB_G2ROPFADE_0_FADCOE_SHIFT)
#define G2SB_G2ROPFADE_0_FADCOE_RANGE                   23:16
#define G2SB_G2ROPFADE_0_FADCOE_WOFFSET                 0x0
#define G2SB_G2ROPFADE_0_FADCOE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2ROPFADE_0_FADCOE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_G2ROPFADE_0_FADCOE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2ROPFADE_0_FADCOE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

//
#define G2SB_G2ROPFADE_0_FADOFF_SHIFT                   _MK_SHIFT_CONST(24)
#define G2SB_G2ROPFADE_0_FADOFF_FIELD                   (_MK_MASK_CONST(0xff) << G2SB_G2ROPFADE_0_FADOFF_SHIFT)
#define G2SB_G2ROPFADE_0_FADOFF_RANGE                   31:24
#define G2SB_G2ROPFADE_0_FADOFF_WOFFSET                 0x0
#define G2SB_G2ROPFADE_0_FADOFF_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2ROPFADE_0_FADOFF_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_G2ROPFADE_0_FADOFF_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2ROPFADE_0_FADOFF_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_G2ALPHABLEND_0  //{2d,index=21}
#define G2SB_G2ALPHABLEND_0                     _MK_ADDR_CONST(0x21)
#define G2SB_G2ALPHABLEND_0_SECURE                      0x0
#define G2SB_G2ALPHABLEND_0_WORD_COUNT                  0x1
#define G2SB_G2ALPHABLEND_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_G2ALPHABLEND_0_RESET_MASK                  _MK_MASK_CONST(0x100)
#define G2SB_G2ALPHABLEND_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_G2ALPHABLEND_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2ALPHABLEND_0_READ_MASK                   _MK_MASK_CONST(0xffff01ff)
#define G2SB_G2ALPHABLEND_0_WRITE_MASK                  _MK_MASK_CONST(0xffff01ff)
#define G2SB_G2ALPHABLEND_0_ALPHA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_G2ALPHABLEND_0_ALPHA_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_G2ALPHABLEND_0_ALPHA_SHIFT)
#define G2SB_G2ALPHABLEND_0_ALPHA_RANGE                 7:0
#define G2SB_G2ALPHABLEND_0_ALPHA_WOFFSET                       0x0
#define G2SB_G2ALPHABLEND_0_ALPHA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2ALPHABLEND_0_ALPHA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2ALPHABLEND_0_ALPHA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2ALPHABLEND_0_ALPHA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

#define G2SB_G2ALPHABLEND_0_ALPHAINV_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_G2ALPHABLEND_0_ALPHAINV_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_G2ALPHABLEND_0_ALPHAINV_SHIFT)
#define G2SB_G2ALPHABLEND_0_ALPHAINV_RANGE                      8:8
#define G2SB_G2ALPHABLEND_0_ALPHAINV_WOFFSET                    0x0
#define G2SB_G2ALPHABLEND_0_ALPHAINV_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2ALPHABLEND_0_ALPHAINV_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_G2ALPHABLEND_0_ALPHAINV_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2ALPHABLEND_0_ALPHAINV_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

#define G2SB_G2ALPHABLEND_0_ALPHA0V_SHIFT                       _MK_SHIFT_CONST(16)
#define G2SB_G2ALPHABLEND_0_ALPHA0V_FIELD                       (_MK_MASK_CONST(0xff) << G2SB_G2ALPHABLEND_0_ALPHA0V_SHIFT)
#define G2SB_G2ALPHABLEND_0_ALPHA0V_RANGE                       23:16
#define G2SB_G2ALPHABLEND_0_ALPHA0V_WOFFSET                     0x0
#define G2SB_G2ALPHABLEND_0_ALPHA0V_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2ALPHABLEND_0_ALPHA0V_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2ALPHABLEND_0_ALPHA0V_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2ALPHABLEND_0_ALPHA0V_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

#define G2SB_G2ALPHABLEND_0_ALPHA1V_SHIFT                       _MK_SHIFT_CONST(24)
#define G2SB_G2ALPHABLEND_0_ALPHA1V_FIELD                       (_MK_MASK_CONST(0xff) << G2SB_G2ALPHABLEND_0_ALPHA1V_SHIFT)
#define G2SB_G2ALPHABLEND_0_ALPHA1V_RANGE                       31:24
#define G2SB_G2ALPHABLEND_0_ALPHA1V_WOFFSET                     0x0
#define G2SB_G2ALPHABLEND_0_ALPHA1V_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2ALPHABLEND_0_ALPHA1V_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2ALPHABLEND_0_ALPHA1V_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2ALPHABLEND_0_ALPHA1V_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// ClipRect Methods
// top-left bounds are inclusive

// Register G2SB_G2CLIPLEFTTOP_0  //{2d,index=22}
#define G2SB_G2CLIPLEFTTOP_0                    _MK_ADDR_CONST(0x22)
#define G2SB_G2CLIPLEFTTOP_0_SECURE                     0x0
#define G2SB_G2CLIPLEFTTOP_0_WORD_COUNT                         0x1
#define G2SB_G2CLIPLEFTTOP_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_G2CLIPLEFTTOP_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_G2CLIPLEFTTOP_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_G2CLIPLEFTTOP_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_G2CLIPLEFTTOP_0_READ_MASK                  _MK_MASK_CONST(0x7fff7fff)
#define G2SB_G2CLIPLEFTTOP_0_WRITE_MASK                         _MK_MASK_CONST(0x7fff7fff)
#define G2SB_G2CLIPLEFTTOP_0_CLIPL_SHIFT                        _MK_SHIFT_CONST(0)
#define G2SB_G2CLIPLEFTTOP_0_CLIPL_FIELD                        (_MK_MASK_CONST(0x7fff) << G2SB_G2CLIPLEFTTOP_0_CLIPL_SHIFT)
#define G2SB_G2CLIPLEFTTOP_0_CLIPL_RANGE                        14:0
#define G2SB_G2CLIPLEFTTOP_0_CLIPL_WOFFSET                      0x0
#define G2SB_G2CLIPLEFTTOP_0_CLIPL_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2CLIPLEFTTOP_0_CLIPL_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_G2CLIPLEFTTOP_0_CLIPL_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2CLIPLEFTTOP_0_CLIPL_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

#define G2SB_G2CLIPLEFTTOP_0_CLIPT_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_G2CLIPLEFTTOP_0_CLIPT_FIELD                        (_MK_MASK_CONST(0x7fff) << G2SB_G2CLIPLEFTTOP_0_CLIPT_SHIFT)
#define G2SB_G2CLIPLEFTTOP_0_CLIPT_RANGE                        30:16
#define G2SB_G2CLIPLEFTTOP_0_CLIPT_WOFFSET                      0x0
#define G2SB_G2CLIPLEFTTOP_0_CLIPT_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2CLIPLEFTTOP_0_CLIPT_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_G2CLIPLEFTTOP_0_CLIPT_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2CLIPLEFTTOP_0_CLIPT_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// bottom-right bounds are exclusive

// Register G2SB_G2CLIPRIGHTBOT_0  //{2d,index=23}
#define G2SB_G2CLIPRIGHTBOT_0                   _MK_ADDR_CONST(0x23)
#define G2SB_G2CLIPRIGHTBOT_0_SECURE                    0x0
#define G2SB_G2CLIPRIGHTBOT_0_WORD_COUNT                        0x1
#define G2SB_G2CLIPRIGHTBOT_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_G2CLIPRIGHTBOT_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2CLIPRIGHTBOT_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_G2CLIPRIGHTBOT_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_G2CLIPRIGHTBOT_0_READ_MASK                         _MK_MASK_CONST(0x7fff7fff)
#define G2SB_G2CLIPRIGHTBOT_0_WRITE_MASK                        _MK_MASK_CONST(0x7fff7fff)
#define G2SB_G2CLIPRIGHTBOT_0_CLIPR_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_G2CLIPRIGHTBOT_0_CLIPR_FIELD                       (_MK_MASK_CONST(0x7fff) << G2SB_G2CLIPRIGHTBOT_0_CLIPR_SHIFT)
#define G2SB_G2CLIPRIGHTBOT_0_CLIPR_RANGE                       14:0
#define G2SB_G2CLIPRIGHTBOT_0_CLIPR_WOFFSET                     0x0
#define G2SB_G2CLIPRIGHTBOT_0_CLIPR_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2CLIPRIGHTBOT_0_CLIPR_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2CLIPRIGHTBOT_0_CLIPR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CLIPRIGHTBOT_0_CLIPR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

#define G2SB_G2CLIPRIGHTBOT_0_CLIPB_SHIFT                       _MK_SHIFT_CONST(16)
#define G2SB_G2CLIPRIGHTBOT_0_CLIPB_FIELD                       (_MK_MASK_CONST(0x7fff) << G2SB_G2CLIPRIGHTBOT_0_CLIPB_SHIFT)
#define G2SB_G2CLIPRIGHTBOT_0_CLIPB_RANGE                       30:16
#define G2SB_G2CLIPRIGHTBOT_0_CLIPB_WOFFSET                     0x0
#define G2SB_G2CLIPRIGHTBOT_0_CLIPB_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2CLIPRIGHTBOT_0_CLIPB_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2CLIPRIGHTBOT_0_CLIPB_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CLIPRIGHTBOT_0_CLIPB_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//pattern methods
// G2PATPACK should be used to specify the line gap
// use G2PATPACK_SIZE to program height and width
//  PACK is generally only useful with narrow monochrome surfaces
//  Note, PACK is not offically supported when the surface is tiled.

// Register G2SB_G2PATPACK_0  //{2d,index=24} Pattern packed mode
#define G2SB_G2PATPACK_0                        _MK_ADDR_CONST(0x24)
#define G2SB_G2PATPACK_0_SECURE                         0x0
#define G2SB_G2PATPACK_0_WORD_COUNT                     0x1
#define G2SB_G2PATPACK_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_G2PATPACK_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2PATPACK_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_G2PATPACK_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2PATPACK_0_READ_MASK                      _MK_MASK_CONST(0xf)
#define G2SB_G2PATPACK_0_WRITE_MASK                     _MK_MASK_CONST(0xf)
// Packed mode, pattern data line gap. byte
#define G2SB_G2PATPACK_0_PATLNGAP_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_G2PATPACK_0_PATLNGAP_FIELD                 (_MK_MASK_CONST(0xf) << G2SB_G2PATPACK_0_PATLNGAP_SHIFT)
#define G2SB_G2PATPACK_0_PATLNGAP_RANGE                 3:0
#define G2SB_G2PATPACK_0_PATLNGAP_WOFFSET                       0x0
#define G2SB_G2PATPACK_0_PATLNGAP_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2PATPACK_0_PATLNGAP_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2PATPACK_0_PATLNGAP_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2PATPACK_0_PATLNGAP_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// G2PATPACK_SIZE -- extension of G2PATPACK, this register only holds the size of the packed data
//  Note, PACK is not offically supported when the surface is tiled.

// Register G2SB_G2PATPACK_SIZE_0  //{2d,index=25} Pattern packed mode
// Packed mode, pattern data line gap. byte
#define G2SB_G2PATPACK_SIZE_0                   _MK_ADDR_CONST(0x25)
#define G2SB_G2PATPACK_SIZE_0_SECURE                    0x0
#define G2SB_G2PATPACK_SIZE_0_WORD_COUNT                        0x1
#define G2SB_G2PATPACK_SIZE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_G2PATPACK_SIZE_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2PATPACK_SIZE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_G2PATPACK_SIZE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_G2PATPACK_SIZE_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_G2PATPACK_SIZE_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// Mono data width in packed mode, byte
#define G2SB_G2PATPACK_SIZE_0_PATMONOW_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_G2PATPACK_SIZE_0_PATMONOW_FIELD                    (_MK_MASK_CONST(0xffff) << G2SB_G2PATPACK_SIZE_0_PATMONOW_SHIFT)
#define G2SB_G2PATPACK_SIZE_0_PATMONOW_RANGE                    15:0
#define G2SB_G2PATPACK_SIZE_0_PATMONOW_WOFFSET                  0x0
#define G2SB_G2PATPACK_SIZE_0_PATMONOW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2PATPACK_SIZE_0_PATMONOW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2PATPACK_SIZE_0_PATMONOW_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2PATPACK_SIZE_0_PATMONOW_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//  Pattern mono data height in packed mode, byte
#define G2SB_G2PATPACK_SIZE_0_PATMONOH_SHIFT                    _MK_SHIFT_CONST(16)
#define G2SB_G2PATPACK_SIZE_0_PATMONOH_FIELD                    (_MK_MASK_CONST(0xffff) << G2SB_G2PATPACK_SIZE_0_PATMONOH_SHIFT)
#define G2SB_G2PATPACK_SIZE_0_PATMONOH_RANGE                    31:16
#define G2SB_G2PATPACK_SIZE_0_PATMONOH_WOFFSET                  0x0
#define G2SB_G2PATPACK_SIZE_0_PATMONOH_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2PATPACK_SIZE_0_PATMONOH_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2PATPACK_SIZE_0_PATMONOH_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2PATPACK_SIZE_0_PATMONOH_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_G2PATBA_0  //{2d,index=26}
#define G2SB_G2PATBA_0                  _MK_ADDR_CONST(0x26)
#define G2SB_G2PATBA_0_SECURE                   0x0
#define G2SB_G2PATBA_0_WORD_COUNT                       0x1
#define G2SB_G2PATBA_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_G2PATBA_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2PATBA_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_G2PATBA_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2PATBA_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define G2SB_G2PATBA_0_WRITE_MASK                       _MK_MASK_CONST(0xffffffff)
// If(PATFL==1){
//   It has to be 16bytes aligned.
// }else{
//   Point to the first byte of the first pixel of pattern plane.
// }
#define G2SB_G2PATBA_0_PATBA_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_G2PATBA_0_PATBA_FIELD                      (_MK_MASK_CONST(0xffffffff) << G2SB_G2PATBA_0_PATBA_SHIFT)
#define G2SB_G2PATBA_0_PATBA_RANGE                      31:0
#define G2SB_G2PATBA_0_PATBA_WOFFSET                    0x0
#define G2SB_G2PATBA_0_PATBA_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2PATBA_0_PATBA_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2PATBA_0_PATBA_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2PATBA_0_PATBA_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_G2PATOS_0  //{2d,index=27}
#define G2SB_G2PATOS_0                  _MK_ADDR_CONST(0x27)
#define G2SB_G2PATOS_0_SECURE                   0x0
#define G2SB_G2PATOS_0_WORD_COUNT                       0x1
#define G2SB_G2PATOS_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_G2PATOS_0_RESET_MASK                       _MK_MASK_CONST(0x600000)
#define G2SB_G2PATOS_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_G2PATOS_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2PATOS_0_READ_MASK                        _MK_MASK_CONST(0xff61ffff)
#define G2SB_G2PATOS_0_WRITE_MASK                       _MK_MASK_CONST(0xff61ffff)
//stride
#define G2SB_G2PATOS_0_PATST_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_G2PATOS_0_PATST_FIELD                      (_MK_MASK_CONST(0xffff) << G2SB_G2PATOS_0_PATST_SHIFT)
#define G2SB_G2PATOS_0_PATST_RANGE                      15:0
#define G2SB_G2PATOS_0_PATST_WOFFSET                    0x0
#define G2SB_G2PATOS_0_PATST_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2PATOS_0_PATST_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2PATOS_0_PATST_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2PATOS_0_PATST_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

//0 mono
//1 same as dstcd
//  PATCD==0 xdir/ydir has to be 0
#define G2SB_G2PATOS_0_PATCD_SHIFT                      _MK_SHIFT_CONST(16)
#define G2SB_G2PATOS_0_PATCD_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_G2PATOS_0_PATCD_SHIFT)
#define G2SB_G2PATOS_0_PATCD_RANGE                      16:16
#define G2SB_G2PATOS_0_PATCD_WOFFSET                    0x0
#define G2SB_G2PATOS_0_PATCD_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2PATOS_0_PATCD_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2PATOS_0_PATCD_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2PATOS_0_PATCD_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Mono pattern transparency enable:
// 0x=pattern transparency disabled,
// 10=mono pattern background transparency
//   or color pattern transparency,
// 11=mono pattern foreground transparency
//   or inverse color pattern transparency.
// NOTE: When pattern transparency is enabled and PATCD==0(mono)
//       PATBGC!=PATFGC should be satisfied.
#define G2SB_G2PATOS_0_PATT_SHIFT                       _MK_SHIFT_CONST(21)
#define G2SB_G2PATOS_0_PATT_FIELD                       (_MK_MASK_CONST(0x3) << G2SB_G2PATOS_0_PATT_SHIFT)
#define G2SB_G2PATOS_0_PATT_RANGE                       22:21
#define G2SB_G2PATOS_0_PATT_WOFFSET                     0x0
#define G2SB_G2PATOS_0_PATT_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2PATOS_0_PATT_DEFAULT_MASK                        _MK_MASK_CONST(0x3)
#define G2SB_G2PATOS_0_PATT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2PATOS_0_PATT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//x offset for mono tile pattern fill.  see PATFL
#define G2SB_G2PATOS_0_PATXO_SHIFT                      _MK_SHIFT_CONST(24)
#define G2SB_G2PATOS_0_PATXO_FIELD                      (_MK_MASK_CONST(0xf) << G2SB_G2PATOS_0_PATXO_SHIFT)
#define G2SB_G2PATOS_0_PATXO_RANGE                      27:24
#define G2SB_G2PATOS_0_PATXO_WOFFSET                    0x0
#define G2SB_G2PATOS_0_PATXO_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2PATOS_0_PATXO_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2PATOS_0_PATXO_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2PATOS_0_PATXO_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

//y offset for mono tile pattern fill.  see PATFL
#define G2SB_G2PATOS_0_PATYO_SHIFT                      _MK_SHIFT_CONST(28)
#define G2SB_G2PATOS_0_PATYO_FIELD                      (_MK_MASK_CONST(0xf) << G2SB_G2PATOS_0_PATYO_SHIFT)
#define G2SB_G2PATOS_0_PATYO_RANGE                      31:28
#define G2SB_G2PATOS_0_PATYO_WOFFSET                    0x0
#define G2SB_G2PATOS_0_PATYO_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2PATOS_0_PATYO_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2PATOS_0_PATYO_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2PATOS_0_PATYO_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_G2PATBGC_0  //{2d,index=28}
#define G2SB_G2PATBGC_0                 _MK_ADDR_CONST(0x28)
#define G2SB_G2PATBGC_0_SECURE                  0x0
#define G2SB_G2PATBGC_0_WORD_COUNT                      0x1
#define G2SB_G2PATBGC_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_G2PATBGC_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2PATBGC_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_G2PATBGC_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_G2PATBGC_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_G2PATBGC_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
#define G2SB_G2PATBGC_0_PATBGC_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_G2PATBGC_0_PATBGC_FIELD                    (_MK_MASK_CONST(0xffffffff) << G2SB_G2PATBGC_0_PATBGC_SHIFT)
#define G2SB_G2PATBGC_0_PATBGC_RANGE                    31:0
#define G2SB_G2PATBGC_0_PATBGC_WOFFSET                  0x0
#define G2SB_G2PATBGC_0_PATBGC_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2PATBGC_0_PATBGC_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2PATBGC_0_PATBGC_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2PATBGC_0_PATBGC_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_G2PATFGC_0  //{2d,index=29}
#define G2SB_G2PATFGC_0                 _MK_ADDR_CONST(0x29)
#define G2SB_G2PATFGC_0_SECURE                  0x0
#define G2SB_G2PATFGC_0_WORD_COUNT                      0x1
#define G2SB_G2PATFGC_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_G2PATFGC_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2PATFGC_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_G2PATFGC_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_G2PATFGC_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_G2PATFGC_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
#define G2SB_G2PATFGC_0_PATFGC_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_G2PATFGC_0_PATFGC_FIELD                    (_MK_MASK_CONST(0xffffffff) << G2SB_G2PATFGC_0_PATFGC_SHIFT)
#define G2SB_G2PATFGC_0_PATFGC_RANGE                    31:0
#define G2SB_G2PATFGC_0_PATFGC_WOFFSET                  0x0
#define G2SB_G2PATFGC_0_PATFGC_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2PATFGC_0_PATFGC_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2PATFGC_0_PATFGC_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2PATFGC_0_PATFGC_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_G2PATKEY_0  //{2d,index=2a}
#define G2SB_G2PATKEY_0                 _MK_ADDR_CONST(0x2a)
#define G2SB_G2PATKEY_0_SECURE                  0x0
#define G2SB_G2PATKEY_0_WORD_COUNT                      0x1
#define G2SB_G2PATKEY_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_G2PATKEY_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2PATKEY_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_G2PATKEY_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_G2PATKEY_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_G2PATKEY_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
#define G2SB_G2PATKEY_0_PATKEY_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_G2PATKEY_0_PATKEY_FIELD                    (_MK_MASK_CONST(0xffffffff) << G2SB_G2PATKEY_0_PATKEY_SHIFT)
#define G2SB_G2PATKEY_0_PATKEY_RANGE                    31:0
#define G2SB_G2PATKEY_0_PATKEY_WOFFSET                  0x0
#define G2SB_G2PATKEY_0_PATKEY_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2PATKEY_0_PATKEY_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2PATKEY_0_PATKEY_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2PATKEY_0_PATKEY_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_G2DSTBA_0  //{host,2d,sb,index=2b}
#define G2SB_G2DSTBA_0                  _MK_ADDR_CONST(0x2b)
#define G2SB_G2DSTBA_0_SECURE                   0x0
#define G2SB_G2DSTBA_0_WORD_COUNT                       0x1
#define G2SB_G2DSTBA_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define G2SB_G2DSTBA_0_WRITE_MASK                       _MK_MASK_CONST(0xffffffff)
// Destination base address (byte address)
#define G2SB_G2DSTBA_0_DSTBA_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_G2DSTBA_0_DSTBA_FIELD                      (_MK_MASK_CONST(0xffffffff) << G2SB_G2DSTBA_0_DSTBA_SHIFT)
#define G2SB_G2DSTBA_0_DSTBA_RANGE                      31:0
#define G2SB_G2DSTBA_0_DSTBA_WOFFSET                    0x0
#define G2SB_G2DSTBA_0_DSTBA_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_0_DSTBA_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_0_DSTBA_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_0_DSTBA_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_G2DSTBA_B_0  //{host,2d,sb,index=2c}
#define G2SB_G2DSTBA_B_0                        _MK_ADDR_CONST(0x2c)
#define G2SB_G2DSTBA_B_0_SECURE                         0x0
#define G2SB_G2DSTBA_B_0_WORD_COUNT                     0x1
#define G2SB_G2DSTBA_B_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_B_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_B_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_B_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_B_0_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define G2SB_G2DSTBA_B_0_WRITE_MASK                     _MK_MASK_CONST(0xffffffff)
// Destination base address (byte address)
// only usable in hardware trigger mode by enable gcsw
#define G2SB_G2DSTBA_B_0_DSTBA_B_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_G2DSTBA_B_0_DSTBA_B_FIELD                  (_MK_MASK_CONST(0xffffffff) << G2SB_G2DSTBA_B_0_DSTBA_B_SHIFT)
#define G2SB_G2DSTBA_B_0_DSTBA_B_RANGE                  31:0
#define G2SB_G2DSTBA_B_0_DSTBA_B_WOFFSET                        0x0
#define G2SB_G2DSTBA_B_0_DSTBA_B_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_B_0_DSTBA_B_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_B_0_DSTBA_B_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_B_0_DSTBA_B_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register G2SB_G2DSTBA_C_0  //{2d,sb,index=2d}
#define G2SB_G2DSTBA_C_0                        _MK_ADDR_CONST(0x2d)
#define G2SB_G2DSTBA_C_0_SECURE                         0x0
#define G2SB_G2DSTBA_C_0_WORD_COUNT                     0x1
#define G2SB_G2DSTBA_C_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_C_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_C_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_C_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_C_0_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define G2SB_G2DSTBA_C_0_WRITE_MASK                     _MK_MASK_CONST(0xffffffff)
// Destination base address (byte address)
#define G2SB_G2DSTBA_C_0_DSTBA_C_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_G2DSTBA_C_0_DSTBA_C_FIELD                  (_MK_MASK_CONST(0xffffffff) << G2SB_G2DSTBA_C_0_DSTBA_C_SHIFT)
#define G2SB_G2DSTBA_C_0_DSTBA_C_RANGE                  31:0
#define G2SB_G2DSTBA_C_0_DSTBA_C_WOFFSET                        0x0
#define G2SB_G2DSTBA_C_0_DSTBA_C_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_C_0_DSTBA_C_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_C_0_DSTBA_C_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_C_0_DSTBA_C_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register G2SB_G2DSTST_0  //{host,2d,sb,sbm,index=2e}
#define G2SB_G2DSTST_0                  _MK_ADDR_CONST(0x2e)
#define G2SB_G2DSTST_0_SECURE                   0x0
#define G2SB_G2DSTST_0_WORD_COUNT                       0x1
#define G2SB_G2DSTST_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_G2DSTST_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2DSTST_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_G2DSTST_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2DSTST_0_READ_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_G2DSTST_0_WRITE_MASK                       _MK_MASK_CONST(0xffff)
// Destination Stride coordinate(bytes) with respect to DSTBA.
#define G2SB_G2DSTST_0_DSTS_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_G2DSTST_0_DSTS_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_G2DSTST_0_DSTS_SHIFT)
#define G2SB_G2DSTST_0_DSTS_RANGE                       15:0
#define G2SB_G2DSTST_0_DSTS_WOFFSET                     0x0
#define G2SB_G2DSTST_0_DSTS_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2DSTST_0_DSTS_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2DSTST_0_DSTS_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2DSTST_0_DSTS_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Surface methods
// G2SRCPACK should only be used to specify the line gap
// use G2SRCPACK_SIZE to program height and width

// Register G2SB_G2SRCPACK_0  //{2d,index=2f} source data packed mode
#define G2SB_G2SRCPACK_0                        _MK_ADDR_CONST(0x2f)
#define G2SB_G2SRCPACK_0_SECURE                         0x0
#define G2SB_G2SRCPACK_0_WORD_COUNT                     0x1
#define G2SB_G2SRCPACK_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_G2SRCPACK_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2SRCPACK_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_G2SRCPACK_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2SRCPACK_0_READ_MASK                      _MK_MASK_CONST(0xf)
#define G2SB_G2SRCPACK_0_WRITE_MASK                     _MK_MASK_CONST(0xf)
// Packed mode - source mono data line gap
#define G2SB_G2SRCPACK_0_SRCLNGAP_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_G2SRCPACK_0_SRCLNGAP_FIELD                 (_MK_MASK_CONST(0xf) << G2SB_G2SRCPACK_0_SRCLNGAP_SHIFT)
#define G2SB_G2SRCPACK_0_SRCLNGAP_RANGE                 3:0
#define G2SB_G2SRCPACK_0_SRCLNGAP_WOFFSET                       0x0
#define G2SB_G2SRCPACK_0_SRCLNGAP_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2SRCPACK_0_SRCLNGAP_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2SRCPACK_0_SRCLNGAP_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2SRCPACK_0_SRCLNGAP_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// G2SRCPACKS_SIZE -- extension of G2SRCPACK, this register only holds the size of the packed data

// Register G2SB_G2SRCPACK_SIZE_0  //{2d,index=30} source data packed mode
// In packed mode, SRCMONOW holds the horizontal size (bytes).
// If MONOH > 1, it is required width/stride be 16 byte aligned.
// Packed mode - source mono data line gap
#define G2SB_G2SRCPACK_SIZE_0                   _MK_ADDR_CONST(0x30)
#define G2SB_G2SRCPACK_SIZE_0_SECURE                    0x0
#define G2SB_G2SRCPACK_SIZE_0_WORD_COUNT                        0x1
#define G2SB_G2SRCPACK_SIZE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_G2SRCPACK_SIZE_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2SRCPACK_SIZE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_G2SRCPACK_SIZE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_G2SRCPACK_SIZE_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_G2SRCPACK_SIZE_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// Packed mode - source mono data width in bytes
#define G2SB_G2SRCPACK_SIZE_0_SRCMONOW_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_G2SRCPACK_SIZE_0_SRCMONOW_FIELD                    (_MK_MASK_CONST(0xffff) << G2SB_G2SRCPACK_SIZE_0_SRCMONOW_SHIFT)
#define G2SB_G2SRCPACK_SIZE_0_SRCMONOW_RANGE                    15:0
#define G2SB_G2SRCPACK_SIZE_0_SRCMONOW_WOFFSET                  0x0
#define G2SB_G2SRCPACK_SIZE_0_SRCMONOW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2SRCPACK_SIZE_0_SRCMONOW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2SRCPACK_SIZE_0_SRCMONOW_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2SRCPACK_SIZE_0_SRCMONOW_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Packed mode - source mono data height in bytes
#define G2SB_G2SRCPACK_SIZE_0_SRCMONOH_SHIFT                    _MK_SHIFT_CONST(16)
#define G2SB_G2SRCPACK_SIZE_0_SRCMONOH_FIELD                    (_MK_MASK_CONST(0xffff) << G2SB_G2SRCPACK_SIZE_0_SRCMONOH_SHIFT)
#define G2SB_G2SRCPACK_SIZE_0_SRCMONOH_RANGE                    31:16
#define G2SB_G2SRCPACK_SIZE_0_SRCMONOH_WOFFSET                  0x0
#define G2SB_G2SRCPACK_SIZE_0_SRCMONOH_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2SRCPACK_SIZE_0_SRCMONOH_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2SRCPACK_SIZE_0_SRCMONOH_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2SRCPACK_SIZE_0_SRCMONOH_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_G2SRCBA_0  //{host,2d,sb,index=31}
//src base address
#define G2SB_G2SRCBA_0                  _MK_ADDR_CONST(0x31)
#define G2SB_G2SRCBA_0_SECURE                   0x0
#define G2SB_G2SRCBA_0_WORD_COUNT                       0x1
#define G2SB_G2SRCBA_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_G2SRCBA_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2SRCBA_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_G2SRCBA_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2SRCBA_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define G2SB_G2SRCBA_0_WRITE_MASK                       _MK_MASK_CONST(0xffffffff)
// Source base address (byte address)
#define G2SB_G2SRCBA_0_SRCBA_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_G2SRCBA_0_SRCBA_FIELD                      (_MK_MASK_CONST(0xffffffff) << G2SB_G2SRCBA_0_SRCBA_SHIFT)
#define G2SB_G2SRCBA_0_SRCBA_RANGE                      31:0
#define G2SB_G2SRCBA_0_SRCBA_WOFFSET                    0x0
#define G2SB_G2SRCBA_0_SRCBA_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2SRCBA_0_SRCBA_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2SRCBA_0_SRCBA_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2SRCBA_0_SRCBA_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_G2SRCBA_B_0  //{2d,sb,index=32}
//SB only
#define G2SB_G2SRCBA_B_0                        _MK_ADDR_CONST(0x32)
#define G2SB_G2SRCBA_B_0_SECURE                         0x0
#define G2SB_G2SRCBA_B_0_WORD_COUNT                     0x1
#define G2SB_G2SRCBA_B_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_G2SRCBA_B_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2SRCBA_B_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_G2SRCBA_B_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2SRCBA_B_0_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define G2SB_G2SRCBA_B_0_WRITE_MASK                     _MK_MASK_CONST(0xffffffff)
//This parameter specifies the start address of source image
// stored in the image buffer memory. In 4:2:0
//format mode, this image block accommodates for Y-image.
//This address specifies byte-position, however, bits [2:0]
// are restricted with respect to the data formats to fit
//multiple pixels in one memory word (8 bytes),. For example,
// {0, 4} for any YcrCb formats, {0, 2, 4, 6} for
//RGB 16-bit format.  Since one Y pixel takes 8-bit, all
// 8 byte-positions are valid in 4:2:0 mode. (Unlike
//multiplexed pixels format, there is no restrictions on this value.)
#define G2SB_G2SRCBA_B_0_SRCBA_B_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_G2SRCBA_B_0_SRCBA_B_FIELD                  (_MK_MASK_CONST(0xffffffff) << G2SB_G2SRCBA_B_0_SRCBA_B_SHIFT)
#define G2SB_G2SRCBA_B_0_SRCBA_B_RANGE                  31:0
#define G2SB_G2SRCBA_B_0_SRCBA_B_WOFFSET                        0x0
#define G2SB_G2SRCBA_B_0_SRCBA_B_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2SRCBA_B_0_SRCBA_B_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_G2SRCBA_B_0_SRCBA_B_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2SRCBA_B_0_SRCBA_B_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register G2SB_G2SRCST_0  //{host,2d,sb,sbm,index=33}
#define G2SB_G2SRCST_0                  _MK_ADDR_CONST(0x33)
#define G2SB_G2SRCST_0_SECURE                   0x0
#define G2SB_G2SRCST_0_WORD_COUNT                       0x1
#define G2SB_G2SRCST_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_G2SRCST_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2SRCST_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_G2SRCST_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2SRCST_0_READ_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_G2SRCST_0_WRITE_MASK                       _MK_MASK_CONST(0xffff)
// Source Stride coordinate(bytes) with respect to SRCBA.
//In order to fit multiple pixels in one memory word (8 bytes),
//  bits [2:0] are restricted with respect to the
//data formats. For example, {0, 4} for any YcrCb formats,
//  {0, 2, 4, 6} for RGB 16-bit format.
#define G2SB_G2SRCST_0_SRCS_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_G2SRCST_0_SRCS_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_G2SRCST_0_SRCS_SHIFT)
#define G2SB_G2SRCST_0_SRCS_RANGE                       15:0
#define G2SB_G2SRCST_0_SRCS_WOFFSET                     0x0
#define G2SB_G2SRCST_0_SRCS_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2SRCST_0_SRCS_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2SRCST_0_SRCS_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2SRCST_0_SRCS_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//srcColors

// Register G2SB_G2SRCBGC_0  //{2d,index=34}
#define G2SB_G2SRCBGC_0                 _MK_ADDR_CONST(0x34)
#define G2SB_G2SRCBGC_0_SECURE                  0x0
#define G2SB_G2SRCBGC_0_WORD_COUNT                      0x1
#define G2SB_G2SRCBGC_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_G2SRCBGC_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2SRCBGC_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_G2SRCBGC_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_G2SRCBGC_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_G2SRCBGC_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
#define G2SB_G2SRCBGC_0_SRCBGC_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_G2SRCBGC_0_SRCBGC_FIELD                    (_MK_MASK_CONST(0xffffffff) << G2SB_G2SRCBGC_0_SRCBGC_SHIFT)
#define G2SB_G2SRCBGC_0_SRCBGC_RANGE                    31:0
#define G2SB_G2SRCBGC_0_SRCBGC_WOFFSET                  0x0
#define G2SB_G2SRCBGC_0_SRCBGC_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2SRCBGC_0_SRCBGC_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2SRCBGC_0_SRCBGC_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2SRCBGC_0_SRCBGC_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_G2SRCFGC_0  //{host,2d,index=35}
#define G2SB_G2SRCFGC_0                 _MK_ADDR_CONST(0x35)
#define G2SB_G2SRCFGC_0_SECURE                  0x0
#define G2SB_G2SRCFGC_0_WORD_COUNT                      0x1
#define G2SB_G2SRCFGC_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_G2SRCFGC_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2SRCFGC_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_G2SRCFGC_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_G2SRCFGC_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_G2SRCFGC_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
#define G2SB_G2SRCFGC_0_SRCFGC_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_G2SRCFGC_0_SRCFGC_FIELD                    (_MK_MASK_CONST(0xffffffff) << G2SB_G2SRCFGC_0_SRCFGC_SHIFT)
#define G2SB_G2SRCFGC_0_SRCFGC_RANGE                    31:0
#define G2SB_G2SRCFGC_0_SRCFGC_WOFFSET                  0x0
#define G2SB_G2SRCFGC_0_SRCFGC_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2SRCFGC_0_SRCFGC_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2SRCFGC_0_SRCFGC_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2SRCFGC_0_SRCFGC_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_G2SRCKEY_0  //{2d,index=36}
#define G2SB_G2SRCKEY_0                 _MK_ADDR_CONST(0x36)
#define G2SB_G2SRCKEY_0_SECURE                  0x0
#define G2SB_G2SRCKEY_0_WORD_COUNT                      0x1
#define G2SB_G2SRCKEY_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_G2SRCKEY_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2SRCKEY_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_G2SRCKEY_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_G2SRCKEY_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_G2SRCKEY_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
#define G2SB_G2SRCKEY_0_SRCKEY_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_G2SRCKEY_0_SRCKEY_FIELD                    (_MK_MASK_CONST(0xffffffff) << G2SB_G2SRCKEY_0_SRCKEY_SHIFT)
#define G2SB_G2SRCKEY_0_SRCKEY_RANGE                    31:0
#define G2SB_G2SRCKEY_0_SRCKEY_WOFFSET                  0x0
#define G2SB_G2SRCKEY_0_SRCKEY_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2SRCKEY_0_SRCKEY_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2SRCKEY_0_SRCKEY_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2SRCKEY_0_SRCKEY_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// for sc15, SRCWIDTH bit 14 must be set to 0. (limit of 16383 pixels)

// Register G2SB_G2SRCSIZE_0  //{host,2d,sb,sbm,index=37}
#define G2SB_G2SRCSIZE_0                        _MK_ADDR_CONST(0x37)
#define G2SB_G2SRCSIZE_0_SECURE                         0x0
#define G2SB_G2SRCSIZE_0_WORD_COUNT                     0x1
#define G2SB_G2SRCSIZE_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_G2SRCSIZE_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2SRCSIZE_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_G2SRCSIZE_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2SRCSIZE_0_READ_MASK                      _MK_MASK_CONST(0x7fff7fff)
#define G2SB_G2SRCSIZE_0_WRITE_MASK                     _MK_MASK_CONST(0x7fff7fff)
#define G2SB_G2SRCSIZE_0_SRCWIDTH_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_G2SRCSIZE_0_SRCWIDTH_FIELD                 (_MK_MASK_CONST(0x7fff) << G2SB_G2SRCSIZE_0_SRCWIDTH_SHIFT)
#define G2SB_G2SRCSIZE_0_SRCWIDTH_RANGE                 14:0
#define G2SB_G2SRCSIZE_0_SRCWIDTH_WOFFSET                       0x0
#define G2SB_G2SRCSIZE_0_SRCWIDTH_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2SRCSIZE_0_SRCWIDTH_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2SRCSIZE_0_SRCWIDTH_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2SRCSIZE_0_SRCWIDTH_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// In SB mode, number of lines - 1
// In 2D mode, actual lines
#define G2SB_G2SRCSIZE_0_SRCHEIGHT_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_G2SRCSIZE_0_SRCHEIGHT_FIELD                        (_MK_MASK_CONST(0x7fff) << G2SB_G2SRCSIZE_0_SRCHEIGHT_SHIFT)
#define G2SB_G2SRCSIZE_0_SRCHEIGHT_RANGE                        30:16
#define G2SB_G2SRCSIZE_0_SRCHEIGHT_WOFFSET                      0x0
#define G2SB_G2SRCSIZE_0_SRCHEIGHT_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2SRCSIZE_0_SRCHEIGHT_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_G2SRCSIZE_0_SRCHEIGHT_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2SRCSIZE_0_SRCHEIGHT_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)


// Register G2SB_G2DSTSIZE_0  //{host,2d,sb,sbm,index=38}
#define G2SB_G2DSTSIZE_0                        _MK_ADDR_CONST(0x38)
#define G2SB_G2DSTSIZE_0_SECURE                         0x0
#define G2SB_G2DSTSIZE_0_WORD_COUNT                     0x1
#define G2SB_G2DSTSIZE_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_G2DSTSIZE_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2DSTSIZE_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_G2DSTSIZE_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2DSTSIZE_0_READ_MASK                      _MK_MASK_CONST(0x7fff7fff)
#define G2SB_G2DSTSIZE_0_WRITE_MASK                     _MK_MASK_CONST(0x7fff7fff)
// In 2D mode, the largest number can be programmed is 0x7fef
#define G2SB_G2DSTSIZE_0_DSTWIDTH_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_G2DSTSIZE_0_DSTWIDTH_FIELD                 (_MK_MASK_CONST(0x7fff) << G2SB_G2DSTSIZE_0_DSTWIDTH_SHIFT)
#define G2SB_G2DSTSIZE_0_DSTWIDTH_RANGE                 14:0
#define G2SB_G2DSTSIZE_0_DSTWIDTH_WOFFSET                       0x0
#define G2SB_G2DSTSIZE_0_DSTWIDTH_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2DSTSIZE_0_DSTWIDTH_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2DSTSIZE_0_DSTWIDTH_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2DSTSIZE_0_DSTWIDTH_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// In SB mode, number of lines - 1
// In 2D mode, actual lines
#define G2SB_G2DSTSIZE_0_DSTHEIGHT_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_G2DSTSIZE_0_DSTHEIGHT_FIELD                        (_MK_MASK_CONST(0x7fff) << G2SB_G2DSTSIZE_0_DSTHEIGHT_SHIFT)
#define G2SB_G2DSTSIZE_0_DSTHEIGHT_RANGE                        30:16
#define G2SB_G2DSTSIZE_0_DSTHEIGHT_WOFFSET                      0x0
#define G2SB_G2DSTSIZE_0_DSTHEIGHT_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2DSTSIZE_0_DSTHEIGHT_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_G2DSTSIZE_0_DSTHEIGHT_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2DSTSIZE_0_DSTHEIGHT_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// ImageBlit Methods

// Register G2SB_G2SRCPS_0  //{host,2d,index=39}
#define G2SB_G2SRCPS_0                  _MK_ADDR_CONST(0x39)
#define G2SB_G2SRCPS_0_SECURE                   0x0
#define G2SB_G2SRCPS_0_WORD_COUNT                       0x1
#define G2SB_G2SRCPS_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_G2SRCPS_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2SRCPS_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_G2SRCPS_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2SRCPS_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define G2SB_G2SRCPS_0_WRITE_MASK                       _MK_MASK_CONST(0xffffffff)
//SRCX[2:0] are ignored in SRCCD==0 (mono expansion),
//The first bit of the first byte (bit7 if HLMONO==0, or bit0 if HLMONO==1) always
//expand to DSTX,DSTY
#define G2SB_G2SRCPS_0_SRCX_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_G2SRCPS_0_SRCX_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_G2SRCPS_0_SRCX_SHIFT)
#define G2SB_G2SRCPS_0_SRCX_RANGE                       15:0
#define G2SB_G2SRCPS_0_SRCX_WOFFSET                     0x0
#define G2SB_G2SRCPS_0_SRCX_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2SRCPS_0_SRCX_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2SRCPS_0_SRCX_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2SRCPS_0_SRCX_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

#define G2SB_G2SRCPS_0_SRCY_SHIFT                       _MK_SHIFT_CONST(16)
#define G2SB_G2SRCPS_0_SRCY_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_G2SRCPS_0_SRCY_SHIFT)
#define G2SB_G2SRCPS_0_SRCY_RANGE                       31:16
#define G2SB_G2SRCPS_0_SRCY_WOFFSET                     0x0
#define G2SB_G2SRCPS_0_SRCY_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2SRCPS_0_SRCY_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2SRCPS_0_SRCY_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2SRCPS_0_SRCY_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_G2DSTPS_0  //{host,2d,index=3a}
#define G2SB_G2DSTPS_0                  _MK_ADDR_CONST(0x3a)
#define G2SB_G2DSTPS_0_SECURE                   0x0
#define G2SB_G2DSTPS_0_WORD_COUNT                       0x1
#define G2SB_G2DSTPS_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_G2DSTPS_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2DSTPS_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_G2DSTPS_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2DSTPS_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define G2SB_G2DSTPS_0_WRITE_MASK                       _MK_MASK_CONST(0xffffffff)
// NOTE: when ALPTYPE is PL1BPP, DSTX[2:0] must be zero, see bug 344489
// NOTE: when ALPTYPE is PL2BPP, DSTX[1:0] must be zero, see bug 344489
// NOTE: when ALPTYPE is PL4BPP, DSTX[0:0] must be zero, see bug 344489
#define G2SB_G2DSTPS_0_DSTX_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_G2DSTPS_0_DSTX_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_G2DSTPS_0_DSTX_SHIFT)
#define G2SB_G2DSTPS_0_DSTX_RANGE                       15:0
#define G2SB_G2DSTPS_0_DSTX_WOFFSET                     0x0
#define G2SB_G2DSTPS_0_DSTX_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2DSTPS_0_DSTX_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2DSTPS_0_DSTX_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2DSTPS_0_DSTX_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

#define G2SB_G2DSTPS_0_DSTY_SHIFT                       _MK_SHIFT_CONST(16)
#define G2SB_G2DSTPS_0_DSTY_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_G2DSTPS_0_DSTY_SHIFT)
#define G2SB_G2DSTPS_0_DSTY_RANGE                       31:16
#define G2SB_G2DSTPS_0_DSTY_WOFFSET                     0x0
#define G2SB_G2DSTPS_0_DSTY_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2DSTPS_0_DSTY_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2DSTPS_0_DSTY_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2DSTPS_0_DSTY_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// circular buffer

// Register G2SB_G2CBDES_0  // {host,2d,sb,index=3b}
#define G2SB_G2CBDES_0                  _MK_ADDR_CONST(0x3b)
#define G2SB_G2CBDES_0_SECURE                   0x0
#define G2SB_G2CBDES_0_WORD_COUNT                       0x1
#define G2SB_G2CBDES_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_G2CBDES_0_RESET_MASK                       _MK_MASK_CONST(0x80000000)
#define G2SB_G2CBDES_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_G2CBDES_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2CBDES_0_READ_MASK                        _MK_MASK_CONST(0xffff00ff)
#define G2SB_G2CBDES_0_WRITE_MASK                       _MK_MASK_CONST(0xffff00ff)
// This specifies the number of buffers in
//circular buffer feature
#define G2SB_G2CBDES_0_CBCOUNT_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_G2CBDES_0_CBCOUNT_FIELD                    (_MK_MASK_CONST(0xff) << G2SB_G2CBDES_0_CBCOUNT_SHIFT)
#define G2SB_G2CBDES_0_CBCOUNT_RANGE                    7:0
#define G2SB_G2CBDES_0_CBCOUNT_WOFFSET                  0x0
#define G2SB_G2CBDES_0_CBCOUNT_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CBDES_0_CBCOUNT_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2CBDES_0_CBCOUNT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CBDES_0_CBCOUNT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//vertical line number in one buffer
#define G2SB_G2CBDES_0_CBLINE_SHIFT                     _MK_SHIFT_CONST(16)
#define G2SB_G2CBDES_0_CBLINE_FIELD                     (_MK_MASK_CONST(0x7fff) << G2SB_G2CBDES_0_CBLINE_SHIFT)
#define G2SB_G2CBDES_0_CBLINE_RANGE                     30:16
#define G2SB_G2CBDES_0_CBLINE_WOFFSET                   0x0
#define G2SB_G2CBDES_0_CBLINE_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2CBDES_0_CBLINE_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2CBDES_0_CBLINE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2CBDES_0_CBLINE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

//top clipping at the first buffer, (buffer start)
// refer to TOP_CBLINE in G2CBDES2 0= disable
#define G2SB_G2CBDES_0_TOPCLIP_SHIFT                    _MK_SHIFT_CONST(31)
#define G2SB_G2CBDES_0_TOPCLIP_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_G2CBDES_0_TOPCLIP_SHIFT)
#define G2SB_G2CBDES_0_TOPCLIP_RANGE                    31:31
#define G2SB_G2CBDES_0_TOPCLIP_WOFFSET                  0x0
#define G2SB_G2CBDES_0_TOPCLIP_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CBDES_0_TOPCLIP_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_G2CBDES_0_TOPCLIP_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CBDES_0_TOPCLIP_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2CBDES_0_TOPCLIP_DISABLE                  _MK_ENUM_CONST(0)
#define G2SB_G2CBDES_0_TOPCLIP_ENABLE                   _MK_ENUM_CONST(1)


// Register G2SB_G2CBSTRIDE_0  // {host,2d,sb,index=3c}
#define G2SB_G2CBSTRIDE_0                       _MK_ADDR_CONST(0x3c)
#define G2SB_G2CBSTRIDE_0_SECURE                        0x0
#define G2SB_G2CBSTRIDE_0_WORD_COUNT                    0x1
#define G2SB_G2CBSTRIDE_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_G2CBSTRIDE_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_G2CBSTRIDE_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_G2CBSTRIDE_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2CBSTRIDE_0_READ_MASK                     _MK_MASK_CONST(0xc0ffffff)
#define G2SB_G2CBSTRIDE_0_WRITE_MASK                    _MK_MASK_CONST(0xc0ffffff)
// Video Buffer Luma(or RGB) Buffer Stride
//  This is luma buffer stride (in bytes)
#define G2SB_G2CBSTRIDE_0_CBSTRIDE_SHIFT                        _MK_SHIFT_CONST(0)
#define G2SB_G2CBSTRIDE_0_CBSTRIDE_FIELD                        (_MK_MASK_CONST(0xffffff) << G2SB_G2CBSTRIDE_0_CBSTRIDE_SHIFT)
#define G2SB_G2CBSTRIDE_0_CBSTRIDE_RANGE                        23:0
#define G2SB_G2CBSTRIDE_0_CBSTRIDE_WOFFSET                      0x0
#define G2SB_G2CBSTRIDE_0_CBSTRIDE_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2CBSTRIDE_0_CBSTRIDE_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_G2CBSTRIDE_0_CBSTRIDE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2CBSTRIDE_0_CBSTRIDE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Chroma Buffer Stride default is half of luma
//   00= 1/2 of Luma Buffer Stride; in this
//       case, Luma Buffer Stride should be
//       multiple of 2 bytes.
//   01= Equal to Luma Buffer Stride
//   10= 1/4 of Luma Buffer Stride; in this
//       case, Luma Buffer Stride should be
//       multiple of 4 bytes.
//   1x= Reserved
#define G2SB_G2CBSTRIDE_0_CBUVSTRIDE_SHIFT                      _MK_SHIFT_CONST(30)
#define G2SB_G2CBSTRIDE_0_CBUVSTRIDE_FIELD                      (_MK_MASK_CONST(0x3) << G2SB_G2CBSTRIDE_0_CBUVSTRIDE_SHIFT)
#define G2SB_G2CBSTRIDE_0_CBUVSTRIDE_RANGE                      31:30
#define G2SB_G2CBSTRIDE_0_CBUVSTRIDE_WOFFSET                    0x0
#define G2SB_G2CBSTRIDE_0_CBUVSTRIDE_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2CBSTRIDE_0_CBUVSTRIDE_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2CBSTRIDE_0_CBUVSTRIDE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2CBSTRIDE_0_CBUVSTRIDE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_G2CBSTRIDE_0_CBUVSTRIDE_CBS2X                      _MK_ENUM_CONST(0)
#define G2SB_G2CBSTRIDE_0_CBUVSTRIDE_CBS1X                      _MK_ENUM_CONST(1)
#define G2SB_G2CBSTRIDE_0_CBUVSTRIDE_CBS4X                      _MK_ENUM_CONST(2)

//Line Methods

// Register G2SB_G2LINESETTING_0  //{2d,index=3d}
#define G2SB_G2LINESETTING_0                    _MK_ADDR_CONST(0x3d)
#define G2SB_G2LINESETTING_0_SECURE                     0x0
#define G2SB_G2LINESETTING_0_WORD_COUNT                         0x1
#define G2SB_G2LINESETTING_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_G2LINESETTING_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_G2LINESETTING_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_G2LINESETTING_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_G2LINESETTING_0_READ_MASK                  _MK_MASK_CONST(0xff1fffff)
#define G2SB_G2LINESETTING_0_WRITE_MASK                         _MK_MASK_CONST(0xff1fffff)
#define G2SB_G2LINESETTING_0_GAMMA_SHIFT                        _MK_SHIFT_CONST(0)
#define G2SB_G2LINESETTING_0_GAMMA_FIELD                        (_MK_MASK_CONST(0x1fffff) << G2SB_G2LINESETTING_0_GAMMA_SHIFT)
#define G2SB_G2LINESETTING_0_GAMMA_RANGE                        20:0
#define G2SB_G2LINESETTING_0_GAMMA_WOFFSET                      0x0
#define G2SB_G2LINESETTING_0_GAMMA_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2LINESETTING_0_GAMMA_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_G2LINESETTING_0_GAMMA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2LINESETTING_0_GAMMA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

//0:xmajor 1: y major
#define G2SB_G2LINESETTING_0_MAJOR_SHIFT                        _MK_SHIFT_CONST(24)
#define G2SB_G2LINESETTING_0_MAJOR_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_G2LINESETTING_0_MAJOR_SHIFT)
#define G2SB_G2LINESETTING_0_MAJOR_RANGE                        24:24
#define G2SB_G2LINESETTING_0_MAJOR_WOFFSET                      0x0
#define G2SB_G2LINESETTING_0_MAJOR_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2LINESETTING_0_MAJOR_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_G2LINESETTING_0_MAJOR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2LINESETTING_0_MAJOR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2LINESETTING_0_MAJOR_XMAJOR                       _MK_ENUM_CONST(0)
#define G2SB_G2LINESETTING_0_MAJOR_YMAJOR                       _MK_ENUM_CONST(1)

#define G2SB_G2LINESETTING_0_LINEXDIR_SHIFT                     _MK_SHIFT_CONST(25)
#define G2SB_G2LINESETTING_0_LINEXDIR_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_G2LINESETTING_0_LINEXDIR_SHIFT)
#define G2SB_G2LINESETTING_0_LINEXDIR_RANGE                     25:25
#define G2SB_G2LINESETTING_0_LINEXDIR_WOFFSET                   0x0
#define G2SB_G2LINESETTING_0_LINEXDIR_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2LINESETTING_0_LINEXDIR_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2LINESETTING_0_LINEXDIR_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2LINESETTING_0_LINEXDIR_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

#define G2SB_G2LINESETTING_0_LINEYDIR_SHIFT                     _MK_SHIFT_CONST(26)
#define G2SB_G2LINESETTING_0_LINEYDIR_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_G2LINESETTING_0_LINEYDIR_SHIFT)
#define G2SB_G2LINESETTING_0_LINEYDIR_RANGE                     26:26
#define G2SB_G2LINESETTING_0_LINEYDIR_WOFFSET                   0x0
#define G2SB_G2LINESETTING_0_LINEYDIR_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2LINESETTING_0_LINEYDIR_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2LINESETTING_0_LINEYDIR_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2LINESETTING_0_LINEYDIR_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

//draw last pixel or not
#define G2SB_G2LINESETTING_0_DROPLASTP_SHIFT                    _MK_SHIFT_CONST(27)
#define G2SB_G2LINESETTING_0_DROPLASTP_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_G2LINESETTING_0_DROPLASTP_SHIFT)
#define G2SB_G2LINESETTING_0_DROPLASTP_RANGE                    27:27
#define G2SB_G2LINESETTING_0_DROPLASTP_WOFFSET                  0x0
#define G2SB_G2LINESETTING_0_DROPLASTP_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2LINESETTING_0_DROPLASTP_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2LINESETTING_0_DROPLASTP_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2LINESETTING_0_DROPLASTP_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//use OCTANTS in G2LINEDELTAN register instead of MAJOR LINEXDIR LINEYDIR
#define G2SB_G2LINESETTING_0_LINEUSEOCTANT_SHIFT                        _MK_SHIFT_CONST(28)
#define G2SB_G2LINESETTING_0_LINEUSEOCTANT_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_G2LINESETTING_0_LINEUSEOCTANT_SHIFT)
#define G2SB_G2LINESETTING_0_LINEUSEOCTANT_RANGE                        28:28
#define G2SB_G2LINESETTING_0_LINEUSEOCTANT_WOFFSET                      0x0
#define G2SB_G2LINESETTING_0_LINEUSEOCTANT_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2LINESETTING_0_LINEUSEOCTANT_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_G2LINESETTING_0_LINEUSEOCTANT_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2LINESETTING_0_LINEUSEOCTANT_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

//000 octant 0
//001 octant 1
//010 octant 2
//011 octant 3
//100 octant 4
//101 octant 5
//110 octant 6
//111 octant 7
#define G2SB_G2LINESETTING_0_OCTANTS_SHIFT                      _MK_SHIFT_CONST(29)
#define G2SB_G2LINESETTING_0_OCTANTS_FIELD                      (_MK_MASK_CONST(0x7) << G2SB_G2LINESETTING_0_OCTANTS_SHIFT)
#define G2SB_G2LINESETTING_0_OCTANTS_RANGE                      31:29
#define G2SB_G2LINESETTING_0_OCTANTS_WOFFSET                    0x0
#define G2SB_G2LINESETTING_0_OCTANTS_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2LINESETTING_0_OCTANTS_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2LINESETTING_0_OCTANTS_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2LINESETTING_0_OCTANTS_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

//
//
//
//   |    |    |
//    | 5 | 6 |
//     |  |  |
//    4 | | | 7
//       |||
//   ----------->
//       |||
//    3 | | | 0
//     |  |  |
//    | 2 | 1 |
//   |    |    |
//        V
//

// Register G2SB_G2LINEDELTAN_0  //{2d,index=3e}
#define G2SB_G2LINEDELTAN_0                     _MK_ADDR_CONST(0x3e)
#define G2SB_G2LINEDELTAN_0_SECURE                      0x0
#define G2SB_G2LINEDELTAN_0_WORD_COUNT                  0x1
#define G2SB_G2LINEDELTAN_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_G2LINEDELTAN_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2LINEDELTAN_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_G2LINEDELTAN_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2LINEDELTAN_0_READ_MASK                   _MK_MASK_CONST(0x1fffff)
#define G2SB_G2LINEDELTAN_0_WRITE_MASK                  _MK_MASK_CONST(0x1fffff)
#define G2SB_G2LINEDELTAN_0_DELTAN_SHIFT                        _MK_SHIFT_CONST(0)
#define G2SB_G2LINEDELTAN_0_DELTAN_FIELD                        (_MK_MASK_CONST(0x1fffff) << G2SB_G2LINEDELTAN_0_DELTAN_SHIFT)
#define G2SB_G2LINEDELTAN_0_DELTAN_RANGE                        20:0
#define G2SB_G2LINEDELTAN_0_DELTAN_WOFFSET                      0x0
#define G2SB_G2LINEDELTAN_0_DELTAN_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2LINEDELTAN_0_DELTAN_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_G2LINEDELTAN_0_DELTAN_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2LINEDELTAN_0_DELTAN_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)


// Register G2SB_G2LINEDELTAM_0  //{2d,index=3f}
#define G2SB_G2LINEDELTAM_0                     _MK_ADDR_CONST(0x3f)
#define G2SB_G2LINEDELTAM_0_SECURE                      0x0
#define G2SB_G2LINEDELTAM_0_WORD_COUNT                  0x1
#define G2SB_G2LINEDELTAM_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_G2LINEDELTAM_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2LINEDELTAM_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_G2LINEDELTAM_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2LINEDELTAM_0_READ_MASK                   _MK_MASK_CONST(0x1fffff)
#define G2SB_G2LINEDELTAM_0_WRITE_MASK                  _MK_MASK_CONST(0x1fffff)
#define G2SB_G2LINEDELTAM_0_DELTAM_SHIFT                        _MK_SHIFT_CONST(0)
#define G2SB_G2LINEDELTAM_0_DELTAM_FIELD                        (_MK_MASK_CONST(0x1fffff) << G2SB_G2LINEDELTAM_0_DELTAM_SHIFT)
#define G2SB_G2LINEDELTAM_0_DELTAM_RANGE                        20:0
#define G2SB_G2LINEDELTAM_0_DELTAM_WOFFSET                      0x0
#define G2SB_G2LINEDELTAM_0_DELTAM_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2LINEDELTAM_0_DELTAM_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_G2LINEDELTAM_0_DELTAM_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2LINEDELTAM_0_DELTAM_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)


// Register G2SB_G2LINEPOS_0  //{2d,index=40}
#define G2SB_G2LINEPOS_0                        _MK_ADDR_CONST(0x40)
#define G2SB_G2LINEPOS_0_SECURE                         0x0
#define G2SB_G2LINEPOS_0_WORD_COUNT                     0x1
#define G2SB_G2LINEPOS_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_G2LINEPOS_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2LINEPOS_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_G2LINEPOS_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2LINEPOS_0_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define G2SB_G2LINEPOS_0_WRITE_MASK                     _MK_MASK_CONST(0xffffffff)
#define G2SB_G2LINEPOS_0_LINEXPOS_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_G2LINEPOS_0_LINEXPOS_FIELD                 (_MK_MASK_CONST(0xffff) << G2SB_G2LINEPOS_0_LINEXPOS_SHIFT)
#define G2SB_G2LINEPOS_0_LINEXPOS_RANGE                 15:0
#define G2SB_G2LINEPOS_0_LINEXPOS_WOFFSET                       0x0
#define G2SB_G2LINEPOS_0_LINEXPOS_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2LINEPOS_0_LINEXPOS_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2LINEPOS_0_LINEXPOS_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2LINEPOS_0_LINEXPOS_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

#define G2SB_G2LINEPOS_0_LINEYPOS_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_G2LINEPOS_0_LINEYPOS_FIELD                 (_MK_MASK_CONST(0xffff) << G2SB_G2LINEPOS_0_LINEYPOS_SHIFT)
#define G2SB_G2LINEPOS_0_LINEYPOS_RANGE                 31:16
#define G2SB_G2LINEPOS_0_LINEYPOS_WOFFSET                       0x0
#define G2SB_G2LINEPOS_0_LINEYPOS_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2LINEPOS_0_LINEYPOS_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2LINEPOS_0_LINEYPOS_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2LINEPOS_0_LINEYPOS_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_G2LINELEN_0  //{2d,index=41}
#define G2SB_G2LINELEN_0                        _MK_ADDR_CONST(0x41)
#define G2SB_G2LINELEN_0_SECURE                         0x0
#define G2SB_G2LINELEN_0_WORD_COUNT                     0x1
#define G2SB_G2LINELEN_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_G2LINELEN_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2LINELEN_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_G2LINELEN_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2LINELEN_0_READ_MASK                      _MK_MASK_CONST(0x7fff)
#define G2SB_G2LINELEN_0_WRITE_MASK                     _MK_MASK_CONST(0x7fff)
#define G2SB_G2LINELEN_0_LINELEN_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_G2LINELEN_0_LINELEN_FIELD                  (_MK_MASK_CONST(0x7fff) << G2SB_G2LINELEN_0_LINELEN_SHIFT)
#define G2SB_G2LINELEN_0_LINELEN_RANGE                  14:0
#define G2SB_G2LINELEN_0_LINELEN_WOFFSET                        0x0
#define G2SB_G2LINELEN_0_LINELEN_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_G2LINELEN_0_LINELEN_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_G2LINELEN_0_LINELEN_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2LINELEN_0_LINELEN_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register G2SB_G2CSCFOURTH_0  //{sb,sbm,index=42}
#define G2SB_G2CSCFOURTH_0                      _MK_ADDR_CONST(0x42)
#define G2SB_G2CSCFOURTH_0_SECURE                       0x0
#define G2SB_G2CSCFOURTH_0_WORD_COUNT                   0x1
#define G2SB_G2CSCFOURTH_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_G2CSCFOURTH_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_G2CSCFOURTH_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_G2CSCFOURTH_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2CSCFOURTH_0_READ_MASK                    _MK_MASK_CONST(0x1ff01ff)
#define G2SB_G2CSCFOURTH_0_WRITE_MASK                   _MK_MASK_CONST(0x1ff01ff)
// multiplier for G for U generation.
//This parameter consists of a sign bit and 8-bit magnitude (s1.7)
// For RGB->YUV the recommended value is -0.291 (decimal) or 0x125
// For any other combination this parameter is ignored
#define G2SB_G2CSCFOURTH_0_G2U_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_G2CSCFOURTH_0_G2U_FIELD                    (_MK_MASK_CONST(0x1ff) << G2SB_G2CSCFOURTH_0_G2U_SHIFT)
#define G2SB_G2CSCFOURTH_0_G2U_RANGE                    8:0
#define G2SB_G2CSCFOURTH_0_G2U_WOFFSET                  0x0
#define G2SB_G2CSCFOURTH_0_G2U_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CSCFOURTH_0_G2U_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2CSCFOURTH_0_G2U_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CSCFOURTH_0_G2U_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// multiplier for G for V generation.
//This parameter consists of a sign bit and 8-bit magnitude (s1.7)
// For RGB->YUV the recommended value is -0.368 (decimal) or 0x12F
// For any other combination this parameter is ignored
#define G2SB_G2CSCFOURTH_0_G2V_SHIFT                    _MK_SHIFT_CONST(16)
#define G2SB_G2CSCFOURTH_0_G2V_FIELD                    (_MK_MASK_CONST(0x1ff) << G2SB_G2CSCFOURTH_0_G2V_SHIFT)
#define G2SB_G2CSCFOURTH_0_G2V_RANGE                    24:16
#define G2SB_G2CSCFOURTH_0_G2V_WOFFSET                  0x0
#define G2SB_G2CSCFOURTH_0_G2V_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2CSCFOURTH_0_G2V_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2CSCFOURTH_0_G2V_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2CSCFOURTH_0_G2V_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_G2SRCST_B_0  //{2d,index=43}
#define G2SB_G2SRCST_B_0                        _MK_ADDR_CONST(0x43)
#define G2SB_G2SRCST_B_0_SECURE                         0x0
#define G2SB_G2SRCST_B_0_WORD_COUNT                     0x1
#define G2SB_G2SRCST_B_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_G2SRCST_B_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2SRCST_B_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_G2SRCST_B_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2SRCST_B_0_READ_MASK                      _MK_MASK_CONST(0xffff)
#define G2SB_G2SRCST_B_0_WRITE_MASK                     _MK_MASK_CONST(0xffff)
// Source Stride B
#define G2SB_G2SRCST_B_0_SRCS_B_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_G2SRCST_B_0_SRCS_B_FIELD                   (_MK_MASK_CONST(0xffff) << G2SB_G2SRCST_B_0_SRCS_B_SHIFT)
#define G2SB_G2SRCST_B_0_SRCS_B_RANGE                   15:0
#define G2SB_G2SRCST_B_0_SRCS_B_WOFFSET                 0x0
#define G2SB_G2SRCST_B_0_SRCS_B_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2SRCST_B_0_SRCS_B_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_G2SRCST_B_0_SRCS_B_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2SRCST_B_0_SRCS_B_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_G2UVSTRIDE_0  //{2d,sb,index=44}
#define G2SB_G2UVSTRIDE_0                       _MK_ADDR_CONST(0x44)
#define G2SB_G2UVSTRIDE_0_SECURE                        0x0
#define G2SB_G2UVSTRIDE_0_WORD_COUNT                    0x1
#define G2SB_G2UVSTRIDE_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_G2UVSTRIDE_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_G2UVSTRIDE_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_G2UVSTRIDE_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2UVSTRIDE_0_READ_MASK                     _MK_MASK_CONST(0xffff)
#define G2SB_G2UVSTRIDE_0_WRITE_MASK                    _MK_MASK_CONST(0xffff)
#define G2SB_G2UVSTRIDE_0_UVSTRIDE_SHIFT                        _MK_SHIFT_CONST(0)
#define G2SB_G2UVSTRIDE_0_UVSTRIDE_FIELD                        (_MK_MASK_CONST(0xffff) << G2SB_G2UVSTRIDE_0_UVSTRIDE_SHIFT)
#define G2SB_G2UVSTRIDE_0_UVSTRIDE_RANGE                        15:0
#define G2SB_G2UVSTRIDE_0_UVSTRIDE_WOFFSET                      0x0
#define G2SB_G2UVSTRIDE_0_UVSTRIDE_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2UVSTRIDE_0_UVSTRIDE_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_G2UVSTRIDE_0_UVSTRIDE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2UVSTRIDE_0_UVSTRIDE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// circular buffer controller 2

// Register G2SB_G2CBDES2_0  // {host,2d,sb,index=45}
#define G2SB_G2CBDES2_0                 _MK_ADDR_CONST(0x45)
#define G2SB_G2CBDES2_0_SECURE                  0x0
#define G2SB_G2CBDES2_0_WORD_COUNT                      0x1
#define G2SB_G2CBDES2_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_G2CBDES2_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2CBDES2_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_G2CBDES2_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_G2CBDES2_0_READ_MASK                       _MK_MASK_CONST(0x7fff)
#define G2SB_G2CBDES2_0_WRITE_MASK                      _MK_MASK_CONST(0x7fff)
// Circular buffer top clipping enabled, the first buffer line num
#define G2SB_G2CBDES2_0_TOP_CBLINE_SHIFT                        _MK_SHIFT_CONST(0)
#define G2SB_G2CBDES2_0_TOP_CBLINE_FIELD                        (_MK_MASK_CONST(0x7fff) << G2SB_G2CBDES2_0_TOP_CBLINE_SHIFT)
#define G2SB_G2CBDES2_0_TOP_CBLINE_RANGE                        14:0
#define G2SB_G2CBDES2_0_TOP_CBLINE_WOFFSET                      0x0
#define G2SB_G2CBDES2_0_TOP_CBLINE_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2CBDES2_0_TOP_CBLINE_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_G2CBDES2_0_TOP_CBLINE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2CBDES2_0_TOP_CBLINE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)


// Register G2SB_G2TILEMODE_0  //{host,2d,sb,index=46}
#define G2SB_G2TILEMODE_0                       _MK_ADDR_CONST(0x46)
#define G2SB_G2TILEMODE_0_SECURE                        0x0
#define G2SB_G2TILEMODE_0_WORD_COUNT                    0x1
#define G2SB_G2TILEMODE_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_G2TILEMODE_0_RESET_MASK                    _MK_MASK_CONST(0x111111)
#define G2SB_G2TILEMODE_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_G2TILEMODE_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2TILEMODE_0_READ_MASK                     _MK_MASK_CONST(0x111111)
#define G2SB_G2TILEMODE_0_WRITE_MASK                    _MK_MASK_CONST(0x111111)
//Y or RGB surface
#define G2SB_G2TILEMODE_0_SRC_Y_TILE_MODE_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_G2TILEMODE_0_SRC_Y_TILE_MODE_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_G2TILEMODE_0_SRC_Y_TILE_MODE_SHIFT)
#define G2SB_G2TILEMODE_0_SRC_Y_TILE_MODE_RANGE                 0:0
#define G2SB_G2TILEMODE_0_SRC_Y_TILE_MODE_WOFFSET                       0x0
#define G2SB_G2TILEMODE_0_SRC_Y_TILE_MODE_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2TILEMODE_0_SRC_Y_TILE_MODE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_G2TILEMODE_0_SRC_Y_TILE_MODE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2TILEMODE_0_SRC_Y_TILE_MODE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2TILEMODE_0_SRC_Y_TILE_MODE_LINEAR                        _MK_ENUM_CONST(0)
#define G2SB_G2TILEMODE_0_SRC_Y_TILE_MODE_TILED                 _MK_ENUM_CONST(1)

//UV surface, ignored in RGB mode
#define G2SB_G2TILEMODE_0_SRC_UV_TILE_MODE_SHIFT                        _MK_SHIFT_CONST(4)
#define G2SB_G2TILEMODE_0_SRC_UV_TILE_MODE_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_G2TILEMODE_0_SRC_UV_TILE_MODE_SHIFT)
#define G2SB_G2TILEMODE_0_SRC_UV_TILE_MODE_RANGE                        4:4
#define G2SB_G2TILEMODE_0_SRC_UV_TILE_MODE_WOFFSET                      0x0
#define G2SB_G2TILEMODE_0_SRC_UV_TILE_MODE_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2TILEMODE_0_SRC_UV_TILE_MODE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_G2TILEMODE_0_SRC_UV_TILE_MODE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2TILEMODE_0_SRC_UV_TILE_MODE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2TILEMODE_0_SRC_UV_TILE_MODE_LINEAR                       _MK_ENUM_CONST(0)
#define G2SB_G2TILEMODE_0_SRC_UV_TILE_MODE_TILED                        _MK_ENUM_CONST(1)

//Y or RGB surface
#define G2SB_G2TILEMODE_0_PAT_Y_TILE_MODE_SHIFT                 _MK_SHIFT_CONST(8)
#define G2SB_G2TILEMODE_0_PAT_Y_TILE_MODE_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_G2TILEMODE_0_PAT_Y_TILE_MODE_SHIFT)
#define G2SB_G2TILEMODE_0_PAT_Y_TILE_MODE_RANGE                 8:8
#define G2SB_G2TILEMODE_0_PAT_Y_TILE_MODE_WOFFSET                       0x0
#define G2SB_G2TILEMODE_0_PAT_Y_TILE_MODE_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2TILEMODE_0_PAT_Y_TILE_MODE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_G2TILEMODE_0_PAT_Y_TILE_MODE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2TILEMODE_0_PAT_Y_TILE_MODE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_G2TILEMODE_0_PAT_Y_TILE_MODE_LINEAR                        _MK_ENUM_CONST(0)
#define G2SB_G2TILEMODE_0_PAT_Y_TILE_MODE_TILED                 _MK_ENUM_CONST(1)

//UNUSED
#define G2SB_G2TILEMODE_0_PAT_UV_TILE_MODE_SHIFT                        _MK_SHIFT_CONST(12)
#define G2SB_G2TILEMODE_0_PAT_UV_TILE_MODE_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_G2TILEMODE_0_PAT_UV_TILE_MODE_SHIFT)
#define G2SB_G2TILEMODE_0_PAT_UV_TILE_MODE_RANGE                        12:12
#define G2SB_G2TILEMODE_0_PAT_UV_TILE_MODE_WOFFSET                      0x0
#define G2SB_G2TILEMODE_0_PAT_UV_TILE_MODE_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2TILEMODE_0_PAT_UV_TILE_MODE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_G2TILEMODE_0_PAT_UV_TILE_MODE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2TILEMODE_0_PAT_UV_TILE_MODE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2TILEMODE_0_PAT_UV_TILE_MODE_LINEAR                       _MK_ENUM_CONST(0)
#define G2SB_G2TILEMODE_0_PAT_UV_TILE_MODE_TILED                        _MK_ENUM_CONST(1)

//Same as destination write unless DST_RD_WR_SEP (not supported)
#define G2SB_G2TILEMODE_0_DST_RD_TILE_MODE_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_G2TILEMODE_0_DST_RD_TILE_MODE_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_G2TILEMODE_0_DST_RD_TILE_MODE_SHIFT)
#define G2SB_G2TILEMODE_0_DST_RD_TILE_MODE_RANGE                        16:16
#define G2SB_G2TILEMODE_0_DST_RD_TILE_MODE_WOFFSET                      0x0
#define G2SB_G2TILEMODE_0_DST_RD_TILE_MODE_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2TILEMODE_0_DST_RD_TILE_MODE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_G2TILEMODE_0_DST_RD_TILE_MODE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2TILEMODE_0_DST_RD_TILE_MODE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2TILEMODE_0_DST_RD_TILE_MODE_LINEAR                       _MK_ENUM_CONST(0)
#define G2SB_G2TILEMODE_0_DST_RD_TILE_MODE_TILED                        _MK_ENUM_CONST(1)

//destination surface
#define G2SB_G2TILEMODE_0_DST_WR_TILE_MODE_SHIFT                        _MK_SHIFT_CONST(20)
#define G2SB_G2TILEMODE_0_DST_WR_TILE_MODE_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_G2TILEMODE_0_DST_WR_TILE_MODE_SHIFT)
#define G2SB_G2TILEMODE_0_DST_WR_TILE_MODE_RANGE                        20:20
#define G2SB_G2TILEMODE_0_DST_WR_TILE_MODE_WOFFSET                      0x0
#define G2SB_G2TILEMODE_0_DST_WR_TILE_MODE_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2TILEMODE_0_DST_WR_TILE_MODE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_G2TILEMODE_0_DST_WR_TILE_MODE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_G2TILEMODE_0_DST_WR_TILE_MODE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2TILEMODE_0_DST_WR_TILE_MODE_LINEAR                       _MK_ENUM_CONST(0)
#define G2SB_G2TILEMODE_0_DST_WR_TILE_MODE_TILED                        _MK_ENUM_CONST(1)


// Register G2SB_G2PATBASE_0  //{2d,index=47}
#define G2SB_G2PATBASE_0                        _MK_ADDR_CONST(0x47)
#define G2SB_G2PATBASE_0_SECURE                         0x0
#define G2SB_G2PATBASE_0_WORD_COUNT                     0x1
#define G2SB_G2PATBASE_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_G2PATBASE_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_G2PATBASE_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_G2PATBASE_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2PATBASE_0_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define G2SB_G2PATBASE_0_WRITE_MASK                     _MK_MASK_CONST(0xffffffff)
//pattern base address in tile mode,
// PATBA is the linear address where pixel start
#define G2SB_G2PATBASE_0_PAT_BASE_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_G2PATBASE_0_PAT_BASE_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_G2PATBASE_0_PAT_BASE_SHIFT)
#define G2SB_G2PATBASE_0_PAT_BASE_RANGE                 31:0
#define G2SB_G2PATBASE_0_PAT_BASE_WOFFSET                       0x0
#define G2SB_G2PATBASE_0_PAT_BASE_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2PATBASE_0_PAT_BASE_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2PATBASE_0_PAT_BASE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2PATBASE_0_PAT_BASE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// SB_SURFBASE registers
//    These registers need only be programmed when using SB.  They point to the base
//        of the various source and destination surfaces.  Technically they are only needed when
//        tiling is enabled, but there is no harm in always programming them.
//    Their counterpart registers (<reg>_SB_SURFBASE with SB_SURFBASE stripped off) indicate the
//        location of the first pixel  to be sourced or written within the surface.
//
//    This register exists to mimic the X, Y (SRCX, SRCY) functionality found in the BitBlt engine.
//
//    For example, to get at pixel X, Y:
//        SRCBA = SRCBA_SB_SURFBASE + Y*stride + X*Bpp

// Register G2SB_G2SRCBA_SB_SURFBASE_0
#define G2SB_G2SRCBA_SB_SURFBASE_0                      _MK_ADDR_CONST(0x48)
#define G2SB_G2SRCBA_SB_SURFBASE_0_SECURE                       0x0
#define G2SB_G2SRCBA_SB_SURFBASE_0_WORD_COUNT                   0x1
#define G2SB_G2SRCBA_SB_SURFBASE_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_G2SRCBA_SB_SURFBASE_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_G2SRCBA_SB_SURFBASE_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_G2SRCBA_SB_SURFBASE_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2SRCBA_SB_SURFBASE_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_G2SRCBA_SB_SURFBASE_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2SRCBA:
//    -base of interleaved sources (RGB, YUV)
//    -base of Y plane
// Only used by the StretchBlit Engine
#define G2SB_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SHIFT)
#define G2SB_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_RANGE                       31:0
#define G2SB_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_WOFFSET                     0x0
#define G2SB_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_G2DSTBA_SB_SURFBASE_0
#define G2SB_G2DSTBA_SB_SURFBASE_0                      _MK_ADDR_CONST(0x49)
#define G2SB_G2DSTBA_SB_SURFBASE_0_SECURE                       0x0
#define G2SB_G2DSTBA_SB_SURFBASE_0_WORD_COUNT                   0x1
#define G2SB_G2DSTBA_SB_SURFBASE_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_SB_SURFBASE_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_SB_SURFBASE_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_SB_SURFBASE_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_SB_SURFBASE_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_G2DSTBA_SB_SURFBASE_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2DSTBA
// Only used by the StretchBlit Engine
#define G2SB_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_G2DSTBA_SB_SURFBASE_0_DST_ADDR_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SHIFT)
#define G2SB_G2DSTBA_SB_SURFBASE_0_DST_ADDR_RANGE                       31:0
#define G2SB_G2DSTBA_SB_SURFBASE_0_DST_ADDR_WOFFSET                     0x0
#define G2SB_G2DSTBA_SB_SURFBASE_0_DST_ADDR_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_SB_SURFBASE_0_DST_ADDR_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_G2DSTBA_B_SB_SURFBASE_0
#define G2SB_G2DSTBA_B_SB_SURFBASE_0                    _MK_ADDR_CONST(0x4a)
#define G2SB_G2DSTBA_B_SB_SURFBASE_0_SECURE                     0x0
#define G2SB_G2DSTBA_B_SB_SURFBASE_0_WORD_COUNT                         0x1
#define G2SB_G2DSTBA_B_SB_SURFBASE_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_B_SB_SURFBASE_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_B_SB_SURFBASE_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_B_SB_SURFBASE_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_B_SB_SURFBASE_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_G2DSTBA_B_SB_SURFBASE_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2DSTBA_B
// Only used by the StretchBlit Engine, and G2CONTROLSB.DBSEL() is enabled
#define G2SB_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_FIELD                   (_MK_MASK_CONST(0xffffffff) << G2SB_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SHIFT)
#define G2SB_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_RANGE                   31:0
#define G2SB_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_WOFFSET                 0x0
#define G2SB_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_G2VBA_A_SB_SURFBASE_0
#define G2SB_G2VBA_A_SB_SURFBASE_0                      _MK_ADDR_CONST(0x4b)
#define G2SB_G2VBA_A_SB_SURFBASE_0_SECURE                       0x0
#define G2SB_G2VBA_A_SB_SURFBASE_0_WORD_COUNT                   0x1
#define G2SB_G2VBA_A_SB_SURFBASE_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_G2VBA_A_SB_SURFBASE_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_G2VBA_A_SB_SURFBASE_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_G2VBA_A_SB_SURFBASE_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2VBA_A_SB_SURFBASE_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_G2VBA_A_SB_SURFBASE_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2VBA
//     used for YUV 4:2:0 planar, base of V plane
// Only used by the StretchBlit Engine
#define G2SB_G2VBA_A_SB_SURFBASE_0_V_ADDR_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_G2VBA_A_SB_SURFBASE_0_V_ADDR_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_G2VBA_A_SB_SURFBASE_0_V_ADDR_SHIFT)
#define G2SB_G2VBA_A_SB_SURFBASE_0_V_ADDR_RANGE                 31:0
#define G2SB_G2VBA_A_SB_SURFBASE_0_V_ADDR_WOFFSET                       0x0
#define G2SB_G2VBA_A_SB_SURFBASE_0_V_ADDR_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2VBA_A_SB_SURFBASE_0_V_ADDR_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2VBA_A_SB_SURFBASE_0_V_ADDR_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2VBA_A_SB_SURFBASE_0_V_ADDR_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_G2UBA_A_SB_SURFBASE_0
#define G2SB_G2UBA_A_SB_SURFBASE_0                      _MK_ADDR_CONST(0x4c)
#define G2SB_G2UBA_A_SB_SURFBASE_0_SECURE                       0x0
#define G2SB_G2UBA_A_SB_SURFBASE_0_WORD_COUNT                   0x1
#define G2SB_G2UBA_A_SB_SURFBASE_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_G2UBA_A_SB_SURFBASE_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_G2UBA_A_SB_SURFBASE_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_G2UBA_A_SB_SURFBASE_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_G2UBA_A_SB_SURFBASE_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_G2UBA_A_SB_SURFBASE_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2VBA
//     used for YUV 4:2:0 planar, base of U plane
// Only used by the StretchBlit Engine
#define G2SB_G2UBA_A_SB_SURFBASE_0_U_ADDR_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_G2UBA_A_SB_SURFBASE_0_U_ADDR_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_G2UBA_A_SB_SURFBASE_0_U_ADDR_SHIFT)
#define G2SB_G2UBA_A_SB_SURFBASE_0_U_ADDR_RANGE                 31:0
#define G2SB_G2UBA_A_SB_SURFBASE_0_U_ADDR_WOFFSET                       0x0
#define G2SB_G2UBA_A_SB_SURFBASE_0_U_ADDR_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_G2UBA_A_SB_SURFBASE_0_U_ADDR_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_G2UBA_A_SB_SURFBASE_0_U_ADDR_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_G2UBA_A_SB_SURFBASE_0_U_ADDR_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//
// --------------------------------------------------------------------------
//
// Copyright (c) 2004, NVIDIA Corp.
// All Rights Reserved.
//
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
//
// --------------------------------------------------------------------------
// --------------------------------------------------------------------------
//
// Copyright (c) 2004-2005, NVIDIA Corp.
// All Rights Reserved.
//
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
//
// --------------------------------------------------------------------------
//
// Memory Controller Tiling definitions
//
//
//  To enable tiling for a buffer in your module you'll want to include
//  this spec file and then make use of either the ADD_TILE_MODE_REG_SPEC
//  or ADD_TILE_MODE_REG_FIELD_SPEC macro.
//
//  For the ADD_TILE_MODE_REG_SPEC macro, the regp arg is added to the
//  register name as a prefix to match the names of the other registers
//  for this buffer. The fldp is the field name prefix to make the name
//  unique so it works with arreggen generated reg blocks (e.g.):
//
//      // specify how addressing should occur for IB0 buffer
//      ADD_TILE_MODE_REG_SPEC(IB0, IB0);
//
//  There's also a REG_RW_SPEC version, if you need to specify a special
//  flag (e.g. rws for shadow, or rwt for trigger).
//
//  For the ADD_TILE_MODE_REG_FIELD_SPEC macro, the fldp is the field
//  name prefix and bitpos arg describes the starting bit position for
//  this field within another register.
//
//  Like the register version, there's a REG_RW_FIELD_SPEC version if
//  you need to set explicit bits other than "rw".
//
//  Note: this requires having at least NV_MC_TILE_MODEWIDTH bits of
//  space available after bitpos (e.g.) in the register:
//
//      ADD_TILE_MODE_REG_FIELD_SPEC(REF, 16)   // This parameter specifies how addressing
//                                              // for the REF buffer should occur
//
// --------------------------------------------------------------------------
//
// Copyright (c) 2004, NVIDIA Corp.
// All Rights Reserved.
//
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
//
// --------------------------------------------------------------------------
//

// Register G2SB_CTX1_INCR_SYNCPT_0
#define G2SB_CTX1_INCR_SYNCPT_0                 _MK_ADDR_CONST(0x4000)
#define G2SB_CTX1_INCR_SYNCPT_0_SECURE                  0x0
#define G2SB_CTX1_INCR_SYNCPT_0_WORD_COUNT                      0x1
#define G2SB_CTX1_INCR_SYNCPT_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_INCR_SYNCPT_0_RESET_MASK                      _MK_MASK_CONST(0xffff)
#define G2SB_CTX1_INCR_SYNCPT_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_INCR_SYNCPT_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_INCR_SYNCPT_0_READ_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX1_INCR_SYNCPT_0_WRITE_MASK                      _MK_MASK_CONST(0xffff)
// Condition mapped from raise/wait
#define G2SB_CTX1_INCR_SYNCPT_0_COND_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_CTX1_INCR_SYNCPT_0_COND_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX1_INCR_SYNCPT_0_COND_SHIFT)
#define G2SB_CTX1_INCR_SYNCPT_0_COND_RANGE                      15:8
#define G2SB_CTX1_INCR_SYNCPT_0_COND_WOFFSET                    0x0
#define G2SB_CTX1_INCR_SYNCPT_0_COND_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_INCR_SYNCPT_0_COND_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define G2SB_CTX1_INCR_SYNCPT_0_COND_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_INCR_SYNCPT_0_COND_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_INCR_SYNCPT_0_COND_IMMEDIATE                  _MK_ENUM_CONST(0)
#define G2SB_CTX1_INCR_SYNCPT_0_COND_OP_DONE                    _MK_ENUM_CONST(1)
#define G2SB_CTX1_INCR_SYNCPT_0_COND_RD_DONE                    _MK_ENUM_CONST(2)
#define G2SB_CTX1_INCR_SYNCPT_0_COND_REG_WR_SAFE                        _MK_ENUM_CONST(3)
#define G2SB_CTX1_INCR_SYNCPT_0_COND_COND_4                     _MK_ENUM_CONST(4)
#define G2SB_CTX1_INCR_SYNCPT_0_COND_COND_5                     _MK_ENUM_CONST(5)
#define G2SB_CTX1_INCR_SYNCPT_0_COND_COND_6                     _MK_ENUM_CONST(6)
#define G2SB_CTX1_INCR_SYNCPT_0_COND_COND_7                     _MK_ENUM_CONST(7)
#define G2SB_CTX1_INCR_SYNCPT_0_COND_COND_8                     _MK_ENUM_CONST(8)
#define G2SB_CTX1_INCR_SYNCPT_0_COND_COND_9                     _MK_ENUM_CONST(9)
#define G2SB_CTX1_INCR_SYNCPT_0_COND_COND_10                    _MK_ENUM_CONST(10)
#define G2SB_CTX1_INCR_SYNCPT_0_COND_COND_11                    _MK_ENUM_CONST(11)
#define G2SB_CTX1_INCR_SYNCPT_0_COND_COND_12                    _MK_ENUM_CONST(12)
#define G2SB_CTX1_INCR_SYNCPT_0_COND_COND_13                    _MK_ENUM_CONST(13)
#define G2SB_CTX1_INCR_SYNCPT_0_COND_COND_14                    _MK_ENUM_CONST(14)
#define G2SB_CTX1_INCR_SYNCPT_0_COND_COND_15                    _MK_ENUM_CONST(15)

// syncpt index value
#define G2SB_CTX1_INCR_SYNCPT_0_INDX_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX1_INCR_SYNCPT_0_INDX_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX1_INCR_SYNCPT_0_INDX_SHIFT)
#define G2SB_CTX1_INCR_SYNCPT_0_INDX_RANGE                      7:0
#define G2SB_CTX1_INCR_SYNCPT_0_INDX_WOFFSET                    0x0
#define G2SB_CTX1_INCR_SYNCPT_0_INDX_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_INCR_SYNCPT_0_INDX_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define G2SB_CTX1_INCR_SYNCPT_0_INDX_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_INCR_SYNCPT_0_INDX_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_INCR_SYNCPT_CNTRL_0
#define G2SB_CTX1_INCR_SYNCPT_CNTRL_0                   _MK_ADDR_CONST(0x4001)
#define G2SB_CTX1_INCR_SYNCPT_CNTRL_0_SECURE                    0x0
#define G2SB_CTX1_INCR_SYNCPT_CNTRL_0_WORD_COUNT                        0x1
#define G2SB_CTX1_INCR_SYNCPT_CNTRL_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_INCR_SYNCPT_CNTRL_0_RESET_MASK                        _MK_MASK_CONST(0x101)
#define G2SB_CTX1_INCR_SYNCPT_CNTRL_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_INCR_SYNCPT_CNTRL_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_INCR_SYNCPT_CNTRL_0_READ_MASK                         _MK_MASK_CONST(0x101)
#define G2SB_CTX1_INCR_SYNCPT_CNTRL_0_WRITE_MASK                        _MK_MASK_CONST(0x101)
// If NO_STALL is 1, then when fifos are full,
// INCR_SYNCPT methods will be dropped and the
// INCR_SYNCPT_ERROR[COND] bit will be set.
// If NO_STALL is 0, then when fifos are full,
// the client host interface will be stalled.
#define G2SB_CTX1_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SHIFT                        _MK_SHIFT_CONST(8)
#define G2SB_CTX1_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX1_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SHIFT)
#define G2SB_CTX1_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_RANGE                        8:8
#define G2SB_CTX1_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_WOFFSET                      0x0
#define G2SB_CTX1_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX1_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// If SOFT_RESET is set, then all internal state
// of the client syncpt block will be reset.
// To do soft reset, first set SOFT_RESET of
// all host1x clients affected, then clear all
// SOFT_RESETs.
#define G2SB_CTX1_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX1_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX1_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SHIFT)
#define G2SB_CTX1_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_RANGE                      0:0
#define G2SB_CTX1_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_WOFFSET                    0x0
#define G2SB_CTX1_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_CTX1_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_INCR_SYNCPT_ERROR_0
#define G2SB_CTX1_INCR_SYNCPT_ERROR_0                   _MK_ADDR_CONST(0x4002)
#define G2SB_CTX1_INCR_SYNCPT_ERROR_0_SECURE                    0x0
#define G2SB_CTX1_INCR_SYNCPT_ERROR_0_WORD_COUNT                        0x1
#define G2SB_CTX1_INCR_SYNCPT_ERROR_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_INCR_SYNCPT_ERROR_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_INCR_SYNCPT_ERROR_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_INCR_SYNCPT_ERROR_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_INCR_SYNCPT_ERROR_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_INCR_SYNCPT_ERROR_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// COND_STATUS[COND] is set if the fifo for COND overflows.
// This bit is sticky and will remain set until cleared.
// Cleared by writing 1.
#define G2SB_CTX1_INCR_SYNCPT_ERROR_0_COND_STATUS_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX1_INCR_SYNCPT_ERROR_0_COND_STATUS_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX1_INCR_SYNCPT_ERROR_0_COND_STATUS_SHIFT)
#define G2SB_CTX1_INCR_SYNCPT_ERROR_0_COND_STATUS_RANGE                 31:0
#define G2SB_CTX1_INCR_SYNCPT_ERROR_0_COND_STATUS_WOFFSET                       0x0
#define G2SB_CTX1_INCR_SYNCPT_ERROR_0_COND_STATUS_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_INCR_SYNCPT_ERROR_0_COND_STATUS_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_INCR_SYNCPT_ERROR_0_COND_STATUS_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_INCR_SYNCPT_ERROR_0_COND_STATUS_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// reserve locations for future expansion

// Reserved address 16387 [0x4003]

// Reserved address 16388 [0x4004]

// Reserved address 16389 [0x4005]

// Reserved address 16390 [0x4006]

// Reserved address 16391 [0x4007]
// just in case names were redefined using macros
// 2D syncpt behavior
//     - Each 2D context has its own syncpt client.
//     - OP_DONE increments when 2D's memory write client is idle, meaning all
//           preceding operations are complete.
//     - RD_DONE behaves like OP_DONE
//     - REG_WR_SAFE behaves like IMMEDIATE meaning a syncpt increment returns
//         immediately and does not indicate that a register write will NOT block.
//         The implications are that 2D's host FIFO can fill and block access to 2D,
//         which will indeterminately block a direct CPU access.

// Register G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0  //{index=8}
// This register can be accessed by both register read/write and command fifo
// in order not to break exsting code , keep suffix REGONLY.
//
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0                      _MK_ADDR_CONST(0x4008)
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_SECURE                       0x0
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_WORD_COUNT                   0x1
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_READ_MASK                    _MK_MASK_CONST(0x1f03ff)
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_WRITE_MASK                   _MK_MASK_CONST(0x1f0000)
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_FIELD                     (_MK_MASK_CONST(0x3ff) << G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SHIFT)
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_RANGE                     9:0
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_WOFFSET                   0x0
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_FIELD                   (_MK_MASK_CONST(0xf) << G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SHIFT)
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_RANGE                   19:16
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_WOFFSET                 0x0
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SHIFT                      _MK_SHIFT_CONST(20)
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SHIFT)
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_RANGE                      20:20
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_WOFFSET                    0x0
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Control methods, since they are not programmed often, put them is the beginning

// Register G2SB_CTX1_G2TRIGGER_0  //{host,2d,sb,index=9}
#define G2SB_CTX1_G2TRIGGER_0                   _MK_ADDR_CONST(0x4009)
#define G2SB_CTX1_G2TRIGGER_0_SECURE                    0x0
#define G2SB_CTX1_G2TRIGGER_0_WORD_COUNT                        0x1
#define G2SB_CTX1_G2TRIGGER_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TRIGGER_0_RESET_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX1_G2TRIGGER_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TRIGGER_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TRIGGER_0_READ_MASK                         _MK_MASK_CONST(0xffff)
#define G2SB_CTX1_G2TRIGGER_0_WRITE_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX1_G2TRIGGER_0_TRIGGER_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2TRIGGER_0_TRIGGER_FIELD                     (_MK_MASK_CONST(0xffff) << G2SB_CTX1_G2TRIGGER_0_TRIGGER_SHIFT)
#define G2SB_CTX1_G2TRIGGER_0_TRIGGER_RANGE                     15:0
#define G2SB_CTX1_G2TRIGGER_0_TRIGGER_WOFFSET                   0x0
#define G2SB_CTX1_G2TRIGGER_0_TRIGGER_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TRIGGER_0_TRIGGER_DEFAULT_MASK                      _MK_MASK_CONST(0xffff)
#define G2SB_CTX1_G2TRIGGER_0_TRIGGER_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TRIGGER_0_TRIGGER_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2TRIGGER1_0  //{host,2d,sb,index=a}
#define G2SB_CTX1_G2TRIGGER1_0                  _MK_ADDR_CONST(0x400a)
#define G2SB_CTX1_G2TRIGGER1_0_SECURE                   0x0
#define G2SB_CTX1_G2TRIGGER1_0_WORD_COUNT                       0x1
#define G2SB_CTX1_G2TRIGGER1_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TRIGGER1_0_RESET_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX1_G2TRIGGER1_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TRIGGER1_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TRIGGER1_0_READ_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX1_G2TRIGGER1_0_WRITE_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX1_G2TRIGGER1_0_TRIGGER1_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2TRIGGER1_0_TRIGGER1_FIELD                   (_MK_MASK_CONST(0xffff) << G2SB_CTX1_G2TRIGGER1_0_TRIGGER1_SHIFT)
#define G2SB_CTX1_G2TRIGGER1_0_TRIGGER1_RANGE                   15:0
#define G2SB_CTX1_G2TRIGGER1_0_TRIGGER1_WOFFSET                 0x0
#define G2SB_CTX1_G2TRIGGER1_0_TRIGGER1_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TRIGGER1_0_TRIGGER1_DEFAULT_MASK                    _MK_MASK_CONST(0xffff)
#define G2SB_CTX1_G2TRIGGER1_0_TRIGGER1_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TRIGGER1_0_TRIGGER1_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2TRIGGER2_0  //{2d,index=b}
#define G2SB_CTX1_G2TRIGGER2_0                  _MK_ADDR_CONST(0x400b)
#define G2SB_CTX1_G2TRIGGER2_0_SECURE                   0x0
#define G2SB_CTX1_G2TRIGGER2_0_WORD_COUNT                       0x1
#define G2SB_CTX1_G2TRIGGER2_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TRIGGER2_0_RESET_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX1_G2TRIGGER2_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TRIGGER2_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TRIGGER2_0_READ_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX1_G2TRIGGER2_0_WRITE_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX1_G2TRIGGER2_0_TRIGGER2_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2TRIGGER2_0_TRIGGER2_FIELD                   (_MK_MASK_CONST(0xffff) << G2SB_CTX1_G2TRIGGER2_0_TRIGGER2_SHIFT)
#define G2SB_CTX1_G2TRIGGER2_0_TRIGGER2_RANGE                   15:0
#define G2SB_CTX1_G2TRIGGER2_0_TRIGGER2_WOFFSET                 0x0
#define G2SB_CTX1_G2TRIGGER2_0_TRIGGER2_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TRIGGER2_0_TRIGGER2_DEFAULT_MASK                    _MK_MASK_CONST(0xffff)
#define G2SB_CTX1_G2TRIGGER2_0_TRIGGER2_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TRIGGER2_0_TRIGGER2_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2CMDSEL_0  //{host,2d,sb,index=c}
#define G2SB_CTX1_G2CMDSEL_0                    _MK_ADDR_CONST(0x400c)
#define G2SB_CTX1_G2CMDSEL_0_SECURE                     0x0
#define G2SB_CTX1_G2CMDSEL_0_WORD_COUNT                         0x1
#define G2SB_CTX1_G2CMDSEL_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_RESET_MASK                         _MK_MASK_CONST(0x1100d7f1)
#define G2SB_CTX1_G2CMDSEL_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_READ_MASK                  _MK_MASK_CONST(0x1fffd7f1)
#define G2SB_CTX1_G2CMDSEL_0_WRITE_MASK                         _MK_MASK_CONST(0x1fffd7f0)
#define G2SB_CTX1_G2CMDSEL_0_SBOR2D_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2CMDSEL_0_SBOR2D_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CMDSEL_0_SBOR2D_SHIFT)
#define G2SB_CTX1_G2CMDSEL_0_SBOR2D_RANGE                       0:0
#define G2SB_CTX1_G2CMDSEL_0_SBOR2D_WOFFSET                     0x0
#define G2SB_CTX1_G2CMDSEL_0_SBOR2D_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_SBOR2D_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CMDSEL_0_SBOR2D_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_SBOR2D_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_SBOR2D_G2                  _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CMDSEL_0_SBOR2D_SB                  _MK_ENUM_CONST(1)

//circular buffer feature enable    0= disable
#define G2SB_CTX1_G2CMDSEL_0_CBENABLE_SHIFT                     _MK_SHIFT_CONST(4)
#define G2SB_CTX1_G2CMDSEL_0_CBENABLE_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CMDSEL_0_CBENABLE_SHIFT)
#define G2SB_CTX1_G2CMDSEL_0_CBENABLE_RANGE                     4:4
#define G2SB_CTX1_G2CMDSEL_0_CBENABLE_WOFFSET                   0x0
#define G2SB_CTX1_G2CMDSEL_0_CBENABLE_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_CBENABLE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CMDSEL_0_CBENABLE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_CBENABLE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_CBENABLE_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CMDSEL_0_CBENABLE_ENABLE                    _MK_ENUM_CONST(1)

//VI trigger enable, can be circular buffer or full frame
#define G2SB_CTX1_G2CMDSEL_0_VITRIGGER_SHIFT                    _MK_SHIFT_CONST(5)
#define G2SB_CTX1_G2CMDSEL_0_VITRIGGER_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CMDSEL_0_VITRIGGER_SHIFT)
#define G2SB_CTX1_G2CMDSEL_0_VITRIGGER_RANGE                    5:5
#define G2SB_CTX1_G2CMDSEL_0_VITRIGGER_WOFFSET                  0x0
#define G2SB_CTX1_G2CMDSEL_0_VITRIGGER_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_VITRIGGER_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CMDSEL_0_VITRIGGER_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_VITRIGGER_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//host trigger the command, host also need program cicular buffer related data
#define G2SB_CTX1_G2CMDSEL_0_HOSTTRIGGER_SHIFT                  _MK_SHIFT_CONST(6)
#define G2SB_CTX1_G2CMDSEL_0_HOSTTRIGGER_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CMDSEL_0_HOSTTRIGGER_SHIFT)
#define G2SB_CTX1_G2CMDSEL_0_HOSTTRIGGER_RANGE                  6:6
#define G2SB_CTX1_G2CMDSEL_0_HOSTTRIGGER_WOFFSET                        0x0
#define G2SB_CTX1_G2CMDSEL_0_HOSTTRIGGER_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_HOSTTRIGGER_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CMDSEL_0_HOSTTRIGGER_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_HOSTTRIGGER_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX1_G2CMDSEL_0_CBSBDISABLE_SHIFT                  _MK_SHIFT_CONST(7)
#define G2SB_CTX1_G2CMDSEL_0_CBSBDISABLE_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CMDSEL_0_CBSBDISABLE_SHIFT)
#define G2SB_CTX1_G2CMDSEL_0_CBSBDISABLE_RANGE                  7:7
#define G2SB_CTX1_G2CMDSEL_0_CBSBDISABLE_WOFFSET                        0x0
#define G2SB_CTX1_G2CMDSEL_0_CBSBDISABLE_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_CBSBDISABLE_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CMDSEL_0_CBSBDISABLE_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_CBSBDISABLE_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// 00: to memory
// 01: to EPP
#define G2SB_CTX1_G2CMDSEL_0_G2OUTPUT_SHIFT                     _MK_SHIFT_CONST(8)
#define G2SB_CTX1_G2CMDSEL_0_G2OUTPUT_FIELD                     (_MK_MASK_CONST(0x3) << G2SB_CTX1_G2CMDSEL_0_G2OUTPUT_SHIFT)
#define G2SB_CTX1_G2CMDSEL_0_G2OUTPUT_RANGE                     9:8
#define G2SB_CTX1_G2CMDSEL_0_G2OUTPUT_WOFFSET                   0x0
#define G2SB_CTX1_G2CMDSEL_0_G2OUTPUT_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_G2OUTPUT_DEFAULT_MASK                      _MK_MASK_CONST(0x3)
#define G2SB_CTX1_G2CMDSEL_0_G2OUTPUT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_G2OUTPUT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_G2OUTPUT_MEMORY                    _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CMDSEL_0_G2OUTPUT_EPP                       _MK_ENUM_CONST(1)
#define G2SB_CTX1_G2CMDSEL_0_G2OUTPUT_RESERVED2                 _MK_ENUM_CONST(2)
#define G2SB_CTX1_G2CMDSEL_0_G2OUTPUT_RESERVED3                 _MK_ENUM_CONST(3)

// Reserved for HW Test, SW should not use this bit.
#define G2SB_CTX1_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SHIFT                       _MK_SHIFT_CONST(10)
#define G2SB_CTX1_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SHIFT)
#define G2SB_CTX1_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_RANGE                       10:10
#define G2SB_CTX1_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_WOFFSET                     0x0
#define G2SB_CTX1_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_ENABLE                      _MK_ENUM_CONST(1)

#define G2SB_CTX1_G2CMDSEL_0_LINK_WAIT_BUF_END_SHIFT                    _MK_SHIFT_CONST(12)
#define G2SB_CTX1_G2CMDSEL_0_LINK_WAIT_BUF_END_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CMDSEL_0_LINK_WAIT_BUF_END_SHIFT)
#define G2SB_CTX1_G2CMDSEL_0_LINK_WAIT_BUF_END_RANGE                    12:12
#define G2SB_CTX1_G2CMDSEL_0_LINK_WAIT_BUF_END_WOFFSET                  0x0
#define G2SB_CTX1_G2CMDSEL_0_LINK_WAIT_BUF_END_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_LINK_WAIT_BUF_END_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CMDSEL_0_LINK_WAIT_BUF_END_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_LINK_WAIT_BUF_END_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//host writes this bit to tell which buffer is ready
#define G2SB_CTX1_G2CMDSEL_0_FRAME_START_SHIFT                  _MK_SHIFT_CONST(14)
#define G2SB_CTX1_G2CMDSEL_0_FRAME_START_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CMDSEL_0_FRAME_START_SHIFT)
#define G2SB_CTX1_G2CMDSEL_0_FRAME_START_RANGE                  14:14
#define G2SB_CTX1_G2CMDSEL_0_FRAME_START_WOFFSET                        0x0
#define G2SB_CTX1_G2CMDSEL_0_FRAME_START_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_FRAME_START_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CMDSEL_0_FRAME_START_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_FRAME_START_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX1_G2CMDSEL_0_FRAME_END_SHIFT                    _MK_SHIFT_CONST(15)
#define G2SB_CTX1_G2CMDSEL_0_FRAME_END_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CMDSEL_0_FRAME_END_SHIFT)
#define G2SB_CTX1_G2CMDSEL_0_FRAME_END_RANGE                    15:15
#define G2SB_CTX1_G2CMDSEL_0_FRAME_END_WOFFSET                  0x0
#define G2SB_CTX1_G2CMDSEL_0_FRAME_END_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_FRAME_END_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CMDSEL_0_FRAME_END_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_FRAME_END_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

#define G2SB_CTX1_G2CMDSEL_0_BUFFER_INDEX_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_CTX1_G2CMDSEL_0_BUFFER_INDEX_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX1_G2CMDSEL_0_BUFFER_INDEX_SHIFT)
#define G2SB_CTX1_G2CMDSEL_0_BUFFER_INDEX_RANGE                 23:16
#define G2SB_CTX1_G2CMDSEL_0_BUFFER_INDEX_WOFFSET                       0x0
#define G2SB_CTX1_G2CMDSEL_0_BUFFER_INDEX_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_BUFFER_INDEX_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_BUFFER_INDEX_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_BUFFER_INDEX_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//Test purpose
#define G2SB_CTX1_G2CMDSEL_0_LINKEN_SHIFT                       _MK_SHIFT_CONST(24)
#define G2SB_CTX1_G2CMDSEL_0_LINKEN_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CMDSEL_0_LINKEN_SHIFT)
#define G2SB_CTX1_G2CMDSEL_0_LINKEN_RANGE                       24:24
#define G2SB_CTX1_G2CMDSEL_0_LINKEN_WOFFSET                     0x0
#define G2SB_CTX1_G2CMDSEL_0_LINKEN_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_LINKEN_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CMDSEL_0_LINKEN_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_LINKEN_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

#define G2SB_CTX1_G2CMDSEL_0_LINKVAL_SHIFT                      _MK_SHIFT_CONST(25)
#define G2SB_CTX1_G2CMDSEL_0_LINKVAL_FIELD                      (_MK_MASK_CONST(0x7) << G2SB_CTX1_G2CMDSEL_0_LINKVAL_SHIFT)
#define G2SB_CTX1_G2CMDSEL_0_LINKVAL_RANGE                      27:25
#define G2SB_CTX1_G2CMDSEL_0_LINKVAL_WOFFSET                    0x0
#define G2SB_CTX1_G2CMDSEL_0_LINKVAL_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_LINKVAL_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_LINKVAL_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_LINKVAL_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// indicates priority of the context, note vi-triggered contexts take priority over HIGH
#define G2SB_CTX1_G2CMDSEL_0_PRIORITY_SHIFT                     _MK_SHIFT_CONST(28)
#define G2SB_CTX1_G2CMDSEL_0_PRIORITY_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CMDSEL_0_PRIORITY_SHIFT)
#define G2SB_CTX1_G2CMDSEL_0_PRIORITY_RANGE                     28:28
#define G2SB_CTX1_G2CMDSEL_0_PRIORITY_WOFFSET                   0x0
#define G2SB_CTX1_G2CMDSEL_0_PRIORITY_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_PRIORITY_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CMDSEL_0_PRIORITY_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_PRIORITY_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMDSEL_0_PRIORITY_LOW                       _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CMDSEL_0_PRIORITY_HIGH                      _MK_ENUM_CONST(1)


// Register G2SB_CTX1_G2RAISE_0  //{host,2d,sb,index=d}
#define G2SB_CTX1_G2RAISE_0                     _MK_ADDR_CONST(0x400d)
#define G2SB_CTX1_G2RAISE_0_SECURE                      0x0
#define G2SB_CTX1_G2RAISE_0_WORD_COUNT                  0x1
#define G2SB_CTX1_G2RAISE_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2RAISE_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2RAISE_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2RAISE_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2RAISE_0_READ_MASK                   _MK_MASK_CONST(0xf001f)
#define G2SB_CTX1_G2RAISE_0_WRITE_MASK                  _MK_MASK_CONST(0xf001f)
//Push back to read fifo when all commands in the channel are done.
#define G2SB_CTX1_G2RAISE_0_RAISE_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2RAISE_0_RAISE_FIELD                 (_MK_MASK_CONST(0x1f) << G2SB_CTX1_G2RAISE_0_RAISE_SHIFT)
#define G2SB_CTX1_G2RAISE_0_RAISE_RANGE                 4:0
#define G2SB_CTX1_G2RAISE_0_RAISE_WOFFSET                       0x0
#define G2SB_CTX1_G2RAISE_0_RAISE_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2RAISE_0_RAISE_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2RAISE_0_RAISE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2RAISE_0_RAISE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

#define G2SB_CTX1_G2RAISE_0_RAISECHANNEL_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX1_G2RAISE_0_RAISECHANNEL_FIELD                  (_MK_MASK_CONST(0xf) << G2SB_CTX1_G2RAISE_0_RAISECHANNEL_SHIFT)
#define G2SB_CTX1_G2RAISE_0_RAISECHANNEL_RANGE                  19:16
#define G2SB_CTX1_G2RAISE_0_RAISECHANNEL_WOFFSET                        0x0
#define G2SB_CTX1_G2RAISE_0_RAISECHANNEL_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2RAISE_0_RAISECHANNEL_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2RAISE_0_RAISECHANNEL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2RAISE_0_RAISECHANNEL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Reserved address 16398 [0x400e]
//reg G2REFCOUNT incr1  //{host,2d,sb,index=e}
//#if (NV_HOST1X_HAS_FEATURE_REFCOUNT32B == 1)
//     31:0   rw REFCOUNT
//#else
//     15:0   rw REFCOUNT
//#endif
//    ;

// Register G2SB_CTX1_G2HOSTSET_0  //{host,2d,index=f}
#define G2SB_CTX1_G2HOSTSET_0                   _MK_ADDR_CONST(0x400f)
#define G2SB_CTX1_G2HOSTSET_0_SECURE                    0x0
#define G2SB_CTX1_G2HOSTSET_0_WORD_COUNT                        0x1
#define G2SB_CTX1_G2HOSTSET_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2HOSTSET_0_RESET_MASK                        _MK_MASK_CONST(0xff)
#define G2SB_CTX1_G2HOSTSET_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2HOSTSET_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2HOSTSET_0_READ_MASK                         _MK_MASK_CONST(0xff)
#define G2SB_CTX1_G2HOSTSET_0_WRITE_MASK                        _MK_MASK_CONST(0xff)
//  specifies distance (in byte) from last pixel of a line to the first
//  pixel of next line.
//  In mono mode, the value is the nearest byte number.
//  E.G. if gap is 3 bits, HSTLNGAP should be 1 (byte),
// if gap is 9 bits, HSTLNGAP should be 2 (byte)
#define G2SB_CTX1_G2HOSTSET_0_HSTLNGAP_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2HOSTSET_0_HSTLNGAP_FIELD                    (_MK_MASK_CONST(0xf) << G2SB_CTX1_G2HOSTSET_0_HSTLNGAP_SHIFT)
#define G2SB_CTX1_G2HOSTSET_0_HSTLNGAP_RANGE                    3:0
#define G2SB_CTX1_G2HOSTSET_0_HSTLNGAP_WOFFSET                  0x0
#define G2SB_CTX1_G2HOSTSET_0_HSTLNGAP_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2HOSTSET_0_HSTLNGAP_DEFAULT_MASK                     _MK_MASK_CONST(0xf)
#define G2SB_CTX1_G2HOSTSET_0_HSTLNGAP_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2HOSTSET_0_HSTLNGAP_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// specifies the
//  first pixel location (in byte) in the first source data entry.
// In mono mode pixel should always start in byte boundary
#define G2SB_CTX1_G2HOSTSET_0_HSTFPXL_SHIFT                     _MK_SHIFT_CONST(4)
#define G2SB_CTX1_G2HOSTSET_0_HSTFPXL_FIELD                     (_MK_MASK_CONST(0xf) << G2SB_CTX1_G2HOSTSET_0_HSTFPXL_SHIFT)
#define G2SB_CTX1_G2HOSTSET_0_HSTFPXL_RANGE                     7:4
#define G2SB_CTX1_G2HOSTSET_0_HSTFPXL_WOFFSET                   0x0
#define G2SB_CTX1_G2HOSTSET_0_HSTFPXL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2HOSTSET_0_HSTFPXL_DEFAULT_MASK                      _MK_MASK_CONST(0xf)
#define G2SB_CTX1_G2HOSTSET_0_HSTFPXL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2HOSTSET_0_HSTFPXL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2HOSTFIFO_0  //{host,2d,sb,index=10}
#define G2SB_CTX1_G2HOSTFIFO_0                  _MK_ADDR_CONST(0x4010)
#define G2SB_CTX1_G2HOSTFIFO_0_SECURE                   0x0
#define G2SB_CTX1_G2HOSTFIFO_0_WORD_COUNT                       0x1
#define G2SB_CTX1_G2HOSTFIFO_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2HOSTFIFO_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2HOSTFIFO_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2HOSTFIFO_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2HOSTFIFO_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2HOSTFIFO_0_WRITE_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2HOSTFIFO_0_HOSTFIFODATA_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2HOSTFIFO_0_HOSTFIFODATA_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX1_G2HOSTFIFO_0_HOSTFIFODATA_SHIFT)
#define G2SB_CTX1_G2HOSTFIFO_0_HOSTFIFODATA_RANGE                       31:0
#define G2SB_CTX1_G2HOSTFIFO_0_HOSTFIFODATA_WOFFSET                     0x0
#define G2SB_CTX1_G2HOSTFIFO_0_HOSTFIFODATA_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2HOSTFIFO_0_HOSTFIFODATA_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2HOSTFIFO_0_HOSTFIFODATA_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2HOSTFIFO_0_HOSTFIFODATA_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2VDDA_0  //{sb,sbm,index=11}
#define G2SB_CTX1_G2VDDA_0                      _MK_ADDR_CONST(0x4011)
#define G2SB_CTX1_G2VDDA_0_SECURE                       0x0
#define G2SB_CTX1_G2VDDA_0_WORD_COUNT                   0x1
#define G2SB_CTX1_G2VDDA_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VDDA_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VDDA_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VDDA_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VDDA_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2VDDA_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
//Vertical Scaling DDA
//Reset value: xxxx-xxxxh
//Vertical DDA Step (Increment) Value (VDSTEP[18:0])
// (upper 13 bits should be set to '0')
//This parameter specifies the increment value of the DDA used
//for vertical scaling and it is in the form of 6-bit integer and
//12-bit fraction.  This value is detemined by the equation:
// (Actual_source_height-1-VDTINI) / (Actual_destination_height-1)
// Truncate the rest bits to keep the 12bits fraction. Since we have to meet
// (Actual_source_height-1)*1.0 >= (Actual_destination_height - 1)*VDSTEP + VDTINI
// Refer to bug 353260 for more detail.
//The 6-bit integer allows maximum contraction ratio of 1/64, and
// 12-bit fraction assures the maximum limit of accumulated error less
// than half line-spacing for up to approximately 2000 target lines.
//For example, image expansion from 240 lines to 400 lines
//  VDSTEP[17:0]  =  19'b00_0000_1001_1001_1010   and
//image contraction from 240 lines to 150 lines
//   VDSTEP[17:0]  =  19'b00_0001_1001_1001_1010.
#define G2SB_CTX1_G2VDDA_0_VDSTEP_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2VDDA_0_VDSTEP_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX1_G2VDDA_0_VDSTEP_SHIFT)
#define G2SB_CTX1_G2VDDA_0_VDSTEP_RANGE                 31:0
#define G2SB_CTX1_G2VDDA_0_VDSTEP_WOFFSET                       0x0
#define G2SB_CTX1_G2VDDA_0_VDSTEP_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VDDA_0_VDSTEP_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VDDA_0_VDSTEP_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VDDA_0_VDSTEP_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2VDDAINI_0  //{sb,sbm,index=12}
#define G2SB_CTX1_G2VDDAINI_0                   _MK_ADDR_CONST(0x4012)
#define G2SB_CTX1_G2VDDAINI_0_SECURE                    0x0
#define G2SB_CTX1_G2VDDAINI_0_WORD_COUNT                        0x1
#define G2SB_CTX1_G2VDDAINI_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VDDAINI_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VDDAINI_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VDDAINI_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VDDAINI_0_READ_MASK                         _MK_MASK_CONST(0xffff)
#define G2SB_CTX1_G2VDDAINI_0_WRITE_MASK                        _MK_MASK_CONST(0xffff)
//Vertical Scaling DDA Initial Values
//Vertical DDA Initial Value for Top-Field (VDTINI[7:0])
//This parameter specifies the fraction part of initial
// value of the DDA used for vertical scaling.
//Given a pair of consecutive source image lines representing
// positions 0.0 and 1.0, a destination line-image will be created
// at any position in [0.0, 1.0), that is specified by the fraction
// part of the vertical DDA. The 8-bit initial fraction value
// specifies the position of the first output (destination) line-image
// located between the first and the second input (source) line-images,
// respectively at position 0.0 and 1.0.
//This parameter provides a way to compensate relative displacement of
// top and bottom fields of a source image. Suppose, 2-to-1 interlaced
// original video field images #1 and #2 are in the image buffer, to be
// displayed in an overlay window. Assume that the #1 field image is the
// top-field. Using VDTINI = 8'hC0 for the top-field image and
// VDBINI = 8'h40 for the bottom-field image, for example, the two images
// from #1 and #2 fields get mapped to identically positioned destination
// images in the overlay window.
#define G2SB_CTX1_G2VDDAINI_0_VDTINI_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2VDDAINI_0_VDTINI_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX1_G2VDDAINI_0_VDTINI_SHIFT)
#define G2SB_CTX1_G2VDDAINI_0_VDTINI_RANGE                      7:0
#define G2SB_CTX1_G2VDDAINI_0_VDTINI_WOFFSET                    0x0
#define G2SB_CTX1_G2VDDAINI_0_VDTINI_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VDDAINI_0_VDTINI_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VDDAINI_0_VDTINI_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VDDAINI_0_VDTINI_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

//Vertical DDA Initial Value for Bottom-Field (VDBINI[7:0])
// (see description above)
#define G2SB_CTX1_G2VDDAINI_0_VDBINI_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_CTX1_G2VDDAINI_0_VDBINI_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX1_G2VDDAINI_0_VDBINI_SHIFT)
#define G2SB_CTX1_G2VDDAINI_0_VDBINI_RANGE                      15:8
#define G2SB_CTX1_G2VDDAINI_0_VDBINI_WOFFSET                    0x0
#define G2SB_CTX1_G2VDDAINI_0_VDBINI_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VDDAINI_0_VDBINI_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VDDAINI_0_VDBINI_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VDDAINI_0_VDBINI_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2HDDA_0  //{sb,sbm,index=13}
#define G2SB_CTX1_G2HDDA_0                      _MK_ADDR_CONST(0x4013)
#define G2SB_CTX1_G2HDDA_0_SECURE                       0x0
#define G2SB_CTX1_G2HDDA_0_WORD_COUNT                   0x1
#define G2SB_CTX1_G2HDDA_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2HDDA_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2HDDA_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2HDDA_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2HDDA_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2HDDA_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
//Horizontal Scaling DDA
//Reset value: xxxx-xxxxh
//Horizontal DDA Step (Increment) Value (HDSTEP[18:0])
// (upper 13 bits should be set to '0')
//This parameter specifies the increment value of the DDA used
//for horizontal scaling and it is in the form of 6-bit integer and
//12-bit fraction.  This value is detemined by the equation:
// (Actual_source_width-1-HDINI) / (Actual_destination_width-1)
// Truncate the rest bits to keep the 12bits fraction.
// Refer to bug 353260 for more detail.
//The 6-bit integer allows maximum contraction ratio of 1/64, and
// 12-bit fraction assures the maximum limit of accumulated error less
// than half pixel-spacing for up to approximately 2000 destination pixels.
//For example, image expansion from 720 pixels to 800 pixels
//       HDSTEP[17:0]  =  19'b000_0000_1110_0110_0111   and
//image contraction from 720 pixels to 250 pixels
// HDSTEP[17:0]  =  19'b000_0010_1110_0001_0101.
#define G2SB_CTX1_G2HDDA_0_HDSTEP_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2HDDA_0_HDSTEP_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX1_G2HDDA_0_HDSTEP_SHIFT)
#define G2SB_CTX1_G2HDDA_0_HDSTEP_RANGE                 31:0
#define G2SB_CTX1_G2HDDA_0_HDSTEP_WOFFSET                       0x0
#define G2SB_CTX1_G2HDDA_0_HDSTEP_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2HDDA_0_HDSTEP_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2HDDA_0_HDSTEP_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2HDDA_0_HDSTEP_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2HDDAINILS_0  //{sb,sbm,index=14}
#define G2SB_CTX1_G2HDDAINILS_0                 _MK_ADDR_CONST(0x4014)
#define G2SB_CTX1_G2HDDAINILS_0_SECURE                  0x0
#define G2SB_CTX1_G2HDDAINILS_0_WORD_COUNT                      0x1
#define G2SB_CTX1_G2HDDAINILS_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2HDDAINILS_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2HDDAINILS_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2HDDAINILS_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2HDDAINILS_0_READ_MASK                       _MK_MASK_CONST(0xff)
#define G2SB_CTX1_G2HDDAINILS_0_WRITE_MASK                      _MK_MASK_CONST(0xff)
//Horizontal Scaling DDA Initial Value
//Horizontal DDA Initial Value (HDINI[7:0])
//This parameter specifies the fraction part of initial value
// of the DDA used for horizontal scaling.
//Given a group of six consecutive source pixels that
// the two pixels at the center representing positions 0.0
//and 1.0, a destination pixel will be created at any
// position in [0.0, 1.0), that is specified by the fraction part
//of the horizontal DDA. The 8-bit initial fraction
// value specifies the position of the first output (destination)
//pixel located between the first and the second input (source)
// pixels, respectively at position 0.0 and 1.0.
//For horizontal scaling this value may normally be set to 0.
#define G2SB_CTX1_G2HDDAINILS_0_HDINI_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2HDDAINILS_0_HDINI_FIELD                     (_MK_MASK_CONST(0xff) << G2SB_CTX1_G2HDDAINILS_0_HDINI_SHIFT)
#define G2SB_CTX1_G2HDDAINILS_0_HDINI_RANGE                     7:0
#define G2SB_CTX1_G2HDDAINILS_0_HDINI_WOFFSET                   0x0
#define G2SB_CTX1_G2HDDAINILS_0_HDINI_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2HDDAINILS_0_HDINI_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2HDDAINILS_0_HDINI_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2HDDAINILS_0_HDINI_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2CSCFIRST_0  //{sb,sbm,index=15}
// The next 3 registers contain 8 parameters used by the YCbCr (YUV)
// to RGB color space conversion logic.  This logic can also be
// used for RGB gain/gamma correction in RGB to RGB modes, and for
// luma gain in YUV to YUV modes.  For SC20 two new parameters
// (G2U, G2V) have been added for RGB to YUV conversion.  These are
// in address 0x38.  The equtions have the form:
//    YUV->RGB
// R = (CYX * (yin + YOS)) + ((CUR * uin) + (CVR * vin))
// G = (CYX * (yin + YOS)) + ((CUG * uin) + (CVG * vin))
// B = (CYX * (yin + YOS)) + ((CUB * uin) + (CVB * vin))
//    RGB -> RGB
// R = (CVR * rin) + (CUR * bin)
// G = (CYX * (gin + YOS)) + ((CUG * bin) + (CVG * rin))
// B = (CUB * bin) + (CVB * rin)
//    YUV -> YUV (not what rtl does: see note below)
// Y = (CYX * yin + YOS) + ((CUB * uin) + (CVB * vin))
// U = (CUG * uin) + (CVG * vin)
// V = (CVR * vin) + (CUR * uin)
//    RGB -> YUV (new for SC20)
// Y = (CVB * rin) + (CUB * bin) + (CYX * gin) + YOS
// U = (CVG * rin) + (CUG * bin) + (G2U * gin)
// V = (CVR * rin) + (CUR * bin) + (G2V * gin)
//
// NOTE: YUV->YUV above is definitely wrong
// the cmodel *appears* to match the RTL with the following pseudo-code:
//
//if (yuv2rgb)
//    (r,g,b) = matrix*(y+sbreg_yos,u,v)
//    matrix:
//        sbreg_cyx, sbreg_cur, sbreg_cvr,
//        sbreg_cyx, sbreg_cug, sbreg_cvg,
//        sbreg_cyx, sbreg_cub, sbreg_cvb,
//else if (rgb2rgb)
//    (r,g,b) = matrix*(r,g+sbreg_yos,b)
//    matrix:
//        sbreg_cvr, 0,         sbreg_cur,
//        sbreg_cvg, sbreg_cyx, sbreg_cug,
//        sbreg_cvb, 0,         sbreg_cub,
//else if (yuv2yuv)
//    (y,u,v) = matrix*(y,u,v)
//    matrix:
//        sbreg_cub, 0,         sbreg_cvb,
//        sbreg_cug, sbreg_cyx, sbreg_cvg,
//        sbreg_cur, 0,         sbreg_cvr,
//else if (rgb2yuv)
//    (y,u,v) = matrix*(r,g,b) +(sbreg_yos,0,0)
//    matrix:
//        sbreg_cvb, sbreg_cyx, sbreg_cub,
//        sbreg_cvg, sbreg_g2u, sbreg_cug,
//        sbreg_cvr, sbreg_g2v, sbreg_cur,
#define G2SB_CTX1_G2CSCFIRST_0                  _MK_ADDR_CONST(0x4015)
#define G2SB_CTX1_G2CSCFIRST_0_SECURE                   0x0
#define G2SB_CTX1_G2CSCFIRST_0_WORD_COUNT                       0x1
#define G2SB_CTX1_G2CSCFIRST_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCFIRST_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCFIRST_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCFIRST_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCFIRST_0_READ_MASK                        _MK_MASK_CONST(0xff3ff3ff)
#define G2SB_CTX1_G2CSCFIRST_0_WRITE_MASK                       _MK_MASK_CONST(0xff3ff3ff)
// multiplier for U/B for Y or B generation.
// consists of a sign bit and 9-bit magnitude (s2.7).
// For YUV->RGB, the recommended value is 2.0172 (decimal) or 0x102.
// If source data is in RGB format, this parameter
// may be used as gain adjustment for B component.
// For SC20, this register changes precision when doing RGB to YUV
// conversion (SIFMT=1xxx, DIFMT=0xxx).  CUB becomes s1.8 and the
// recommended value is +0.098 or 0x019
//11-10  Reserved
#define G2SB_CTX1_G2CSCFIRST_0_CUB_SHIFT                        _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2CSCFIRST_0_CUB_FIELD                        (_MK_MASK_CONST(0x3ff) << G2SB_CTX1_G2CSCFIRST_0_CUB_SHIFT)
#define G2SB_CTX1_G2CSCFIRST_0_CUB_RANGE                        9:0
#define G2SB_CTX1_G2CSCFIRST_0_CUB_WOFFSET                      0x0
#define G2SB_CTX1_G2CSCFIRST_0_CUB_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCFIRST_0_CUB_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCFIRST_0_CUB_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCFIRST_0_CUB_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// multiplier for V/R for V or R generation.
//This parameter consists of a sign bit and 9-bit magnitude (s2.7)
// For YUV->RGB the recommended value is 1.5960 (decimal) or 0x0CC
//If source data is in RGB format, this parameter
// may be used as gain adjustment for R component.
// For RGB->YUV the recommended value is +0.439 (decimal) or 0x038
//23-22  Reserved
#define G2SB_CTX1_G2CSCFIRST_0_CVR_SHIFT                        _MK_SHIFT_CONST(12)
#define G2SB_CTX1_G2CSCFIRST_0_CVR_FIELD                        (_MK_MASK_CONST(0x3ff) << G2SB_CTX1_G2CSCFIRST_0_CVR_SHIFT)
#define G2SB_CTX1_G2CSCFIRST_0_CVR_RANGE                        21:12
#define G2SB_CTX1_G2CSCFIRST_0_CVR_WOFFSET                      0x0
#define G2SB_CTX1_G2CSCFIRST_0_CVR_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCFIRST_0_CVR_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCFIRST_0_CVR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCFIRST_0_CVR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

//Y-Offset (YOFFSET[7:0]) for YUV generation
//This parameter consists of 8-bit 2's complement in the range [-128,127].
// For YUV->RGB the recommended value is -16 (decimal) or 0xF0
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is +16 (decimal) or 0x10
#define G2SB_CTX1_G2CSCFIRST_0_YOS_SHIFT                        _MK_SHIFT_CONST(24)
#define G2SB_CTX1_G2CSCFIRST_0_YOS_FIELD                        (_MK_MASK_CONST(0xff) << G2SB_CTX1_G2CSCFIRST_0_YOS_SHIFT)
#define G2SB_CTX1_G2CSCFIRST_0_YOS_RANGE                        31:24
#define G2SB_CTX1_G2CSCFIRST_0_YOS_WOFFSET                      0x0
#define G2SB_CTX1_G2CSCFIRST_0_YOS_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCFIRST_0_YOS_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCFIRST_0_YOS_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCFIRST_0_YOS_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2CSCSECOND_0  //{sb,sbm,index=16}
#define G2SB_CTX1_G2CSCSECOND_0                 _MK_ADDR_CONST(0x4016)
#define G2SB_CTX1_G2CSCSECOND_0_SECURE                  0x0
#define G2SB_CTX1_G2CSCSECOND_0_WORD_COUNT                      0x1
#define G2SB_CTX1_G2CSCSECOND_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCSECOND_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCSECOND_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCSECOND_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCSECOND_0_READ_MASK                       _MK_MASK_CONST(0xff3ff1ff)
#define G2SB_CTX1_G2CSCSECOND_0_WRITE_MASK                      _MK_MASK_CONST(0xff3ff1ff)
// multiplier for U/B for U or G generation.
// consists of a sign bit and 8-bit magnitude (s1.7)
// For YUV->RGB the recommended value is -0.3918 (decimal) or 0x132
// For  RGB->RGB, this parameter should be set to 0
// For  YUV->YUV, this parameter should be set to 1 (0x080)
// For RGB->YUV the recommended value is +0.439 (decimal) or 0x038
//11-9  Reserved
#define G2SB_CTX1_G2CSCSECOND_0_CUG_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2CSCSECOND_0_CUG_FIELD                       (_MK_MASK_CONST(0x1ff) << G2SB_CTX1_G2CSCSECOND_0_CUG_SHIFT)
#define G2SB_CTX1_G2CSCSECOND_0_CUG_RANGE                       8:0
#define G2SB_CTX1_G2CSCSECOND_0_CUG_WOFFSET                     0x0
#define G2SB_CTX1_G2CSCSECOND_0_CUG_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCSECOND_0_CUG_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCSECOND_0_CUG_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCSECOND_0_CUG_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// multiplier for U/B for V or R generation.
//This parameter consists of a sign bit and 9-bit magnitude (s2.7)
//  For YUV->RGB normally this parameter is programmed to 0.0.
// This parameter takes non-zero value if hue is rotated.
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is -0.071 (decimal) or 0x209
//23-22 Reserved
#define G2SB_CTX1_G2CSCSECOND_0_CUR_SHIFT                       _MK_SHIFT_CONST(12)
#define G2SB_CTX1_G2CSCSECOND_0_CUR_FIELD                       (_MK_MASK_CONST(0x3ff) << G2SB_CTX1_G2CSCSECOND_0_CUR_SHIFT)
#define G2SB_CTX1_G2CSCSECOND_0_CUR_RANGE                       21:12
#define G2SB_CTX1_G2CSCSECOND_0_CUR_WOFFSET                     0x0
#define G2SB_CTX1_G2CSCSECOND_0_CUR_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCSECOND_0_CUR_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCSECOND_0_CUR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCSECOND_0_CUR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// multiplier for Y/G (G gain)
//This positive-only parameter consists of 8-bit magnitude (1.7)
// For YUV->YUV the recommended value is 1.1644 (decimal) or 0x95
// For YUV->YUV or RGB->RGB this may be used as gain adjustment
// for Y or G component.
// For RGB->YUV the recommended value is +0.504 (decimal) or 0x041
#define G2SB_CTX1_G2CSCSECOND_0_CYX_SHIFT                       _MK_SHIFT_CONST(24)
#define G2SB_CTX1_G2CSCSECOND_0_CYX_FIELD                       (_MK_MASK_CONST(0xff) << G2SB_CTX1_G2CSCSECOND_0_CYX_SHIFT)
#define G2SB_CTX1_G2CSCSECOND_0_CYX_RANGE                       31:24
#define G2SB_CTX1_G2CSCSECOND_0_CYX_WOFFSET                     0x0
#define G2SB_CTX1_G2CSCSECOND_0_CYX_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCSECOND_0_CYX_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCSECOND_0_CYX_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCSECOND_0_CYX_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2CSCTHIRD_0  //{sb,sbm,index=17}
#define G2SB_CTX1_G2CSCTHIRD_0                  _MK_ADDR_CONST(0x4017)
#define G2SB_CTX1_G2CSCTHIRD_0_SECURE                   0x0
#define G2SB_CTX1_G2CSCTHIRD_0_WORD_COUNT                       0x1
#define G2SB_CTX1_G2CSCTHIRD_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCTHIRD_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCTHIRD_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCTHIRD_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCTHIRD_0_READ_MASK                        _MK_MASK_CONST(0x3ff01ff)
#define G2SB_CTX1_G2CSCTHIRD_0_WRITE_MASK                       _MK_MASK_CONST(0x3ff01ff)
// multiplier for V/R for U or G generation.
//This parameter consists of a sign bit and 8-bit magnitude (s1.7)
// For YUV->RGB the recommended value is -0.8130 (decimal) or 0x168
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is -0.148 (decimal) or 0x113
#define G2SB_CTX1_G2CSCTHIRD_0_CVG_SHIFT                        _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2CSCTHIRD_0_CVG_FIELD                        (_MK_MASK_CONST(0x1ff) << G2SB_CTX1_G2CSCTHIRD_0_CVG_SHIFT)
#define G2SB_CTX1_G2CSCTHIRD_0_CVG_RANGE                        8:0
#define G2SB_CTX1_G2CSCTHIRD_0_CVG_WOFFSET                      0x0
#define G2SB_CTX1_G2CSCTHIRD_0_CVG_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCTHIRD_0_CVG_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCTHIRD_0_CVG_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCTHIRD_0_CVG_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// multiplier for V/R for Y or B generation.
//This parameter consists of a sign bit and 9-bit magnitude (s2.7)
//For YUV->RGB, normally this parameter is programmed to 0.0.
// This coefficient takes non-zero value if hue is rotated.
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is +0.257 (decimal) or 0x021
#define G2SB_CTX1_G2CSCTHIRD_0_CVB_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_CTX1_G2CSCTHIRD_0_CVB_FIELD                        (_MK_MASK_CONST(0x3ff) << G2SB_CTX1_G2CSCTHIRD_0_CVB_SHIFT)
#define G2SB_CTX1_G2CSCTHIRD_0_CVB_RANGE                        25:16
#define G2SB_CTX1_G2CSCTHIRD_0_CVB_WOFFSET                      0x0
#define G2SB_CTX1_G2CSCTHIRD_0_CVB_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCTHIRD_0_CVB_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCTHIRD_0_CVB_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCTHIRD_0_CVB_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// StretchBLT, Color/Chroma Key Lower Limit Register

// Register G2SB_CTX1_G2CMKEYL_0  //{sb,sbm,index=18}
// When key generation is enabled, the value of this register is the
// lower color/chroma limit and G2CMKEYU is the upper color/chroma
// limit for component pixel data.
// Three component signal values (YCrCb/YUV or RGB) of
// every output pixel are compared to a set of three
// ranges that are specified by three pairs of lower and
// upper color/chroma key values.  If the Key Polarity is
// 0, the Key is set to 1 only when all three component values
// of an input pixel are respectively within the set
// of ranges (inclusive of the limit values), else the Key is set to 0.
// If the Key Polarity is 1, the Key is set to 1
// when any of the three component values of an input pixel
// are outside the set of ranges, else the Key is set to 0.
#define G2SB_CTX1_G2CMKEYL_0                    _MK_ADDR_CONST(0x4018)
#define G2SB_CTX1_G2CMKEYL_0_SECURE                     0x0
#define G2SB_CTX1_G2CMKEYL_0_WORD_COUNT                         0x1
#define G2SB_CTX1_G2CMKEYL_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMKEYL_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMKEYL_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMKEYL_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMKEYL_0_READ_MASK                  _MK_MASK_CONST(0xffffff)
#define G2SB_CTX1_G2CMKEYL_0_WRITE_MASK                         _MK_MASK_CONST(0xffffff)
// B or Y Color/Chroma Key Lower Limit (CKBL[7:0])
#define G2SB_CTX1_G2CMKEYL_0_CKBL_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2CMKEYL_0_CKBL_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX1_G2CMKEYL_0_CKBL_SHIFT)
#define G2SB_CTX1_G2CMKEYL_0_CKBL_RANGE                 7:0
#define G2SB_CTX1_G2CMKEYL_0_CKBL_WOFFSET                       0x0
#define G2SB_CTX1_G2CMKEYL_0_CKBL_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMKEYL_0_CKBL_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMKEYL_0_CKBL_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMKEYL_0_CKBL_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//G or Cb Color Chroma Key Lower Limit (CKGL[7:0])
// Cb signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity
// from the minimum signal level to the maximum signal level.
#define G2SB_CTX1_G2CMKEYL_0_CKGL_SHIFT                 _MK_SHIFT_CONST(8)
#define G2SB_CTX1_G2CMKEYL_0_CKGL_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX1_G2CMKEYL_0_CKGL_SHIFT)
#define G2SB_CTX1_G2CMKEYL_0_CKGL_RANGE                 15:8
#define G2SB_CTX1_G2CMKEYL_0_CKGL_WOFFSET                       0x0
#define G2SB_CTX1_G2CMKEYL_0_CKGL_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMKEYL_0_CKGL_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMKEYL_0_CKGL_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMKEYL_0_CKGL_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//R or Cr Color Chroma Key Lower Limit (CKRL[7:0])
// Cr signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity from
// the minimum signal level to the maximum signal level.
//31-24 Reserved
#define G2SB_CTX1_G2CMKEYL_0_CKRL_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_CTX1_G2CMKEYL_0_CKRL_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX1_G2CMKEYL_0_CKRL_SHIFT)
#define G2SB_CTX1_G2CMKEYL_0_CKRL_RANGE                 23:16
#define G2SB_CTX1_G2CMKEYL_0_CKRL_WOFFSET                       0x0
#define G2SB_CTX1_G2CMKEYL_0_CKRL_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMKEYL_0_CKRL_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMKEYL_0_CKRL_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMKEYL_0_CKRL_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//StretchBLT, Color/Chroma Key Upper Limit Register

// Register G2SB_CTX1_G2CMKEYU_0  //{sb,sbm,index=19}
#define G2SB_CTX1_G2CMKEYU_0                    _MK_ADDR_CONST(0x4019)
#define G2SB_CTX1_G2CMKEYU_0_SECURE                     0x0
#define G2SB_CTX1_G2CMKEYU_0_WORD_COUNT                         0x1
#define G2SB_CTX1_G2CMKEYU_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMKEYU_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMKEYU_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMKEYU_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMKEYU_0_READ_MASK                  _MK_MASK_CONST(0xffffff)
#define G2SB_CTX1_G2CMKEYU_0_WRITE_MASK                         _MK_MASK_CONST(0xffffff)
//This is B or Y color/chroma key upper limit value.
#define G2SB_CTX1_G2CMKEYU_0_CKBU_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2CMKEYU_0_CKBU_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX1_G2CMKEYU_0_CKBU_SHIFT)
#define G2SB_CTX1_G2CMKEYU_0_CKBU_RANGE                 7:0
#define G2SB_CTX1_G2CMKEYU_0_CKBU_WOFFSET                       0x0
#define G2SB_CTX1_G2CMKEYU_0_CKBU_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMKEYU_0_CKBU_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMKEYU_0_CKBU_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMKEYU_0_CKBU_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// G or Cb Color/Chroma Key Upper Limit (CKGU[7:0])
// Cb signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity
// the minimum signal level to the maximum signal level.
#define G2SB_CTX1_G2CMKEYU_0_CKGU_SHIFT                 _MK_SHIFT_CONST(8)
#define G2SB_CTX1_G2CMKEYU_0_CKGU_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX1_G2CMKEYU_0_CKGU_SHIFT)
#define G2SB_CTX1_G2CMKEYU_0_CKGU_RANGE                 15:8
#define G2SB_CTX1_G2CMKEYU_0_CKGU_WOFFSET                       0x0
#define G2SB_CTX1_G2CMKEYU_0_CKGU_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMKEYU_0_CKGU_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMKEYU_0_CKGU_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMKEYU_0_CKGU_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// R or Cr Color Chroma Key Upper Limit (CKRU[7:0])
// Cr signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity from
// the minimum signal level to the maximum signal level.
//31-24  Reserved
#define G2SB_CTX1_G2CMKEYU_0_CKRU_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_CTX1_G2CMKEYU_0_CKRU_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX1_G2CMKEYU_0_CKRU_SHIFT)
#define G2SB_CTX1_G2CMKEYU_0_CKRU_RANGE                 23:16
#define G2SB_CTX1_G2CMKEYU_0_CKRU_WOFFSET                       0x0
#define G2SB_CTX1_G2CMKEYU_0_CKRU_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMKEYU_0_CKRU_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMKEYU_0_CKRU_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CMKEYU_0_CKRU_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// StretchBLT, Source Image Data U base address A-buffer

// Register G2SB_CTX1_G2UBA_A_0  //{sb,sbm,index=1a}
#define G2SB_CTX1_G2UBA_A_0                     _MK_ADDR_CONST(0x401a)
#define G2SB_CTX1_G2UBA_A_0_SECURE                      0x0
#define G2SB_CTX1_G2UBA_A_0_WORD_COUNT                  0x1
#define G2SB_CTX1_G2UBA_A_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2UBA_A_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2UBA_A_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2UBA_A_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2UBA_A_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2UBA_A_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Start Address of  Source U-image Area, 4:2:0 Format.
// This parameter specifies the start address of source image stored in
// the image buffer memory.
// The [3:0] bits have to be 0, since memory client will assemble YUV into one
// 422 format.
#define G2SB_CTX1_G2UBA_A_0_SU1SA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2UBA_A_0_SU1SA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX1_G2UBA_A_0_SU1SA_SHIFT)
#define G2SB_CTX1_G2UBA_A_0_SU1SA_RANGE                 31:0
#define G2SB_CTX1_G2UBA_A_0_SU1SA_WOFFSET                       0x0
#define G2SB_CTX1_G2UBA_A_0_SU1SA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2UBA_A_0_SU1SA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2UBA_A_0_SU1SA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2UBA_A_0_SU1SA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2VBA_A_0  //{sb,sbm,index=1b}
#define G2SB_CTX1_G2VBA_A_0                     _MK_ADDR_CONST(0x401b)
#define G2SB_CTX1_G2VBA_A_0_SECURE                      0x0
#define G2SB_CTX1_G2VBA_A_0_WORD_COUNT                  0x1
#define G2SB_CTX1_G2VBA_A_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VBA_A_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VBA_A_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VBA_A_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VBA_A_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2VBA_A_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Start Address of  Source V-image Area, 4:2:0 Format.
// This parameter specifies the start address of  source image stored in
// the image buffer memory.
// The [3:0] bits have to be 0, since memory client will assemble YUV into one
// 422 format.
#define G2SB_CTX1_G2VBA_A_0_SV1SA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2VBA_A_0_SV1SA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX1_G2VBA_A_0_SV1SA_SHIFT)
#define G2SB_CTX1_G2VBA_A_0_SV1SA_RANGE                 31:0
#define G2SB_CTX1_G2VBA_A_0_SV1SA_WOFFSET                       0x0
#define G2SB_CTX1_G2VBA_A_0_SV1SA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VBA_A_0_SV1SA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VBA_A_0_SV1SA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VBA_A_0_SV1SA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2SBFORMAT_0  //{sb,sbm,index=1c}
#define G2SB_CTX1_G2SBFORMAT_0                  _MK_ADDR_CONST(0x401c)
#define G2SB_CTX1_G2SBFORMAT_0_SECURE                   0x0
#define G2SB_CTX1_G2SBFORMAT_0_WORD_COUNT                       0x1
#define G2SB_CTX1_G2SBFORMAT_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SBFORMAT_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SBFORMAT_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SBFORMAT_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SBFORMAT_0_READ_MASK                        _MK_MASK_CONST(0xffffdf1f)
#define G2SB_CTX1_G2SBFORMAT_0_WRITE_MASK                       _MK_MASK_CONST(0xffffdf1f)
// This parameter defines the data format of source input.
// There are two groups of data formats, RGB format and YCbCr (YUV) format.
// CbCr (UV) components may be represented in either offset binary or 2's complement.
//00000 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00001 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00010 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00011 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00100 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00101 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00110 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00111 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//01000 B5G6R5 5-6-5 {R[4:0], G[5:0], B[4:0]}
//01001 RESERVED
//01010 RESERVED
//01011 RESERVED
//01100 B5G6R5 5-6-5 Byte-swapped {G[2:0], B[4:0], R[4:0], G[5:3]}
//01101 RESERVED
//01110 R8G8B8A8
//01111 B8G8R8A8
//1xxxx RESERVED
//
// StretchBlit Inputs
// ==================
// RGB    inputs = {B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8}
// YUV420 input  = {YUV420 is converted into 4:2:2 UYVY via memory client}
// YUV422 inputs = {U8Y8V8Y8_OB, Y8U8Y8V8_OB, V8Y8U8Y8_OB, U8Y8V8Y8_OB, U8Y8V8Y8_TC, Y8U8Y8V8_TC, Y8V8Y8U8_TC, V8Y8U8Y8_TC}
//
// StretchBlit Outputs
// ===================
// RGB    outputs = {B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8}
// YUV422 outputs = {U8Y8V8Y8_OB, Y8U8Y8V8_OB, V8Y8U8Y8_OB, U8Y8V8Y8_OB, U8Y8V8Y8_TC, Y8U8Y8V8_TC, Y8V8Y8U8_TC, V8Y8U8Y8_TC}
//
// StretchBlit Input/Output Rules
// ==============================
//
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|    src format                                                | internal sb format |      dst format                                           |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|  B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8                        |      R8G8B8A8      |  B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8                     |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|  U8Y8V8Y8_*, Y8U8Y8V8_*, V8Y8U8Y8_*, U8Y8V8Y8_*, YUV420      |      YUV 4:4:4     |  U8Y8V8Y8_*, Y8U8Y8V8_*, V8Y8U8Y8_*, U8Y8V8Y8_*           |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|  U8Y8V8Y8_*, Y8U8Y8V8_*, V8Y8U8Y8_*, U8Y8V8Y8_*, YUV420      |      YUV 4:4:4     |  B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8                     |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//
//  StretchBlit color space converter supports YUV->RGB, YUV->YUV (gain) and RGB->RGB (gain).  There is no support for RGB->YUV.
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_FIELD                      (_MK_MASK_CONST(0x1f) << G2SB_CTX1_G2SBFORMAT_0_SIFMT_SHIFT)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_RANGE                      4:0
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_WOFFSET                    0x0
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_U8Y8V8Y8_OB                        _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_Y8U8Y8V8_OB                        _MK_ENUM_CONST(1)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_Y8V8Y8U8_OB                        _MK_ENUM_CONST(2)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_V8Y8U8Y8_OB                        _MK_ENUM_CONST(3)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_U8Y8V8Y8_TC                        _MK_ENUM_CONST(4)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_Y8U8Y8V8_TC                        _MK_ENUM_CONST(5)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_Y8V8Y8U8_TC                        _MK_ENUM_CONST(6)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_V8Y8U8Y8_TC                        _MK_ENUM_CONST(7)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_B5G6R5                     _MK_ENUM_CONST(8)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_RESERVED9                  _MK_ENUM_CONST(9)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_RESERVED10                 _MK_ENUM_CONST(10)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_RESERVED11                 _MK_ENUM_CONST(11)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_B5G6R5BS                   _MK_ENUM_CONST(12)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_RESERVED13                 _MK_ENUM_CONST(13)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_R8G8B8A8                   _MK_ENUM_CONST(14)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_B8G8R8A8                   _MK_ENUM_CONST(15)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_RESERVED16                 _MK_ENUM_CONST(16)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_RESERVED17                 _MK_ENUM_CONST(17)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_RESERVED18                 _MK_ENUM_CONST(18)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_RESERVED19                 _MK_ENUM_CONST(19)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_RESERVED20                 _MK_ENUM_CONST(20)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_RESERVED21                 _MK_ENUM_CONST(21)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_RESERVED22                 _MK_ENUM_CONST(22)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_RESERVED23                 _MK_ENUM_CONST(23)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_RESERVED24                 _MK_ENUM_CONST(24)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_RESERVED25                 _MK_ENUM_CONST(25)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_RESERVED26                 _MK_ENUM_CONST(26)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_RESERVED27                 _MK_ENUM_CONST(27)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_RESERVED28                 _MK_ENUM_CONST(28)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_RESERVED29                 _MK_ENUM_CONST(29)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_RESERVED30                 _MK_ENUM_CONST(30)
#define G2SB_CTX1_G2SBFORMAT_0_SIFMT_RESERVED31                 _MK_ENUM_CONST(31)

//Destination Image Data FormatThis parameter defines the data format of distination output.
// There are two groups of data formats, RGB and YCbCr (YUV) format.
// CbCr (UV) components may be represented in either offset binary or 2's complement.
//00000 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00001 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00010 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00011 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00100 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00101 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00110 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00111 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//01000 bpp16 5-6-5 {R[4:0], G[5:0], B[4:0]}
//01001 RESERVED
//01010 RESERVED
//01011 RESERVED
//01100 bpp16 5-6-5 Byte-swapped {G[2:0], B[4:0], R[4:0], G[5:3]}
//01101 RESERVED
//01110 R8G8B8A8
//01111 B8G8R8A8
//1xxxx RESERVED
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_FIELD                      (_MK_MASK_CONST(0x1f) << G2SB_CTX1_G2SBFORMAT_0_DIFMT_SHIFT)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_RANGE                      12:8
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_WOFFSET                    0x0
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_U8Y8V8Y8_OB                        _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_Y8U8Y8V8_OB                        _MK_ENUM_CONST(1)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_Y8V8Y8U8_OB                        _MK_ENUM_CONST(2)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_V8Y8U8Y8_OB                        _MK_ENUM_CONST(3)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_U8Y8V8Y8_TC                        _MK_ENUM_CONST(4)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_Y8U8Y8V8_TC                        _MK_ENUM_CONST(5)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_Y8V8Y8U8_TC                        _MK_ENUM_CONST(6)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_V8Y8U8Y8_TC                        _MK_ENUM_CONST(7)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_B5G6R5                     _MK_ENUM_CONST(8)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_RESERVED9                  _MK_ENUM_CONST(9)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_RESERVED10                 _MK_ENUM_CONST(10)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_RESERVED11                 _MK_ENUM_CONST(11)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_B5G6R5BS                   _MK_ENUM_CONST(12)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_RESERVED13                 _MK_ENUM_CONST(13)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_R8G8B8A8                   _MK_ENUM_CONST(14)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_B8G8R8A8                   _MK_ENUM_CONST(15)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_RESERVED16                 _MK_ENUM_CONST(16)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_RESERVED17                 _MK_ENUM_CONST(17)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_RESERVED18                 _MK_ENUM_CONST(18)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_RESERVED19                 _MK_ENUM_CONST(19)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_RESERVED20                 _MK_ENUM_CONST(20)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_RESERVED21                 _MK_ENUM_CONST(21)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_RESERVED22                 _MK_ENUM_CONST(22)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_RESERVED23                 _MK_ENUM_CONST(23)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_RESERVED24                 _MK_ENUM_CONST(24)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_RESERVED25                 _MK_ENUM_CONST(25)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_RESERVED26                 _MK_ENUM_CONST(26)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_RESERVED27                 _MK_ENUM_CONST(27)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_RESERVED28                 _MK_ENUM_CONST(28)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_RESERVED29                 _MK_ENUM_CONST(29)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_RESERVED30                 _MK_ENUM_CONST(30)
#define G2SB_CTX1_G2SBFORMAT_0_DIFMT_RESERVED31                 _MK_ENUM_CONST(31)

// ENABLE - SB needs to send a RAISE_BUFFER control bit to EPP
// DISABLE - do nothing.
#define G2SB_CTX1_G2SBFORMAT_0_RAISEBUFFEREN_SHIFT                      _MK_SHIFT_CONST(14)
#define G2SB_CTX1_G2SBFORMAT_0_RAISEBUFFEREN_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2SBFORMAT_0_RAISEBUFFEREN_SHIFT)
#define G2SB_CTX1_G2SBFORMAT_0_RAISEBUFFEREN_RANGE                      14:14
#define G2SB_CTX1_G2SBFORMAT_0_RAISEBUFFEREN_WOFFSET                    0x0
#define G2SB_CTX1_G2SBFORMAT_0_RAISEBUFFEREN_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SBFORMAT_0_RAISEBUFFEREN_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SBFORMAT_0_RAISEBUFFEREN_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SBFORMAT_0_RAISEBUFFEREN_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SBFORMAT_0_RAISEBUFFEREN_DISABLE                    _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2SBFORMAT_0_RAISEBUFFEREN_ENABLE                     _MK_ENUM_CONST(1)

// ENABLE - SB needs to send a RAISE_FRAME control bit to EPP
// DISABLE - do nothing.
#define G2SB_CTX1_G2SBFORMAT_0_RAISEFRAMEEN_SHIFT                       _MK_SHIFT_CONST(15)
#define G2SB_CTX1_G2SBFORMAT_0_RAISEFRAMEEN_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2SBFORMAT_0_RAISEFRAMEEN_SHIFT)
#define G2SB_CTX1_G2SBFORMAT_0_RAISEFRAMEEN_RANGE                       15:15
#define G2SB_CTX1_G2SBFORMAT_0_RAISEFRAMEEN_WOFFSET                     0x0
#define G2SB_CTX1_G2SBFORMAT_0_RAISEFRAMEEN_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SBFORMAT_0_RAISEFRAMEEN_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SBFORMAT_0_RAISEFRAMEEN_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SBFORMAT_0_RAISEFRAMEEN_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SBFORMAT_0_RAISEFRAMEEN_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2SBFORMAT_0_RAISEFRAMEEN_ENABLE                      _MK_ENUM_CONST(1)

// Raise buffer vector value.
#define G2SB_CTX1_G2SBFORMAT_0_RAISEBUFFERVALUE_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX1_G2SBFORMAT_0_RAISEBUFFERVALUE_FIELD                   (_MK_MASK_CONST(0xff) << G2SB_CTX1_G2SBFORMAT_0_RAISEBUFFERVALUE_SHIFT)
#define G2SB_CTX1_G2SBFORMAT_0_RAISEBUFFERVALUE_RANGE                   23:16
#define G2SB_CTX1_G2SBFORMAT_0_RAISEBUFFERVALUE_WOFFSET                 0x0
#define G2SB_CTX1_G2SBFORMAT_0_RAISEBUFFERVALUE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SBFORMAT_0_RAISEBUFFERVALUE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SBFORMAT_0_RAISEBUFFERVALUE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SBFORMAT_0_RAISEBUFFERVALUE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Raise Fram vector value.
#define G2SB_CTX1_G2SBFORMAT_0_RAISEFRAMEVALUE_SHIFT                    _MK_SHIFT_CONST(24)
#define G2SB_CTX1_G2SBFORMAT_0_RAISEFRAMEVALUE_FIELD                    (_MK_MASK_CONST(0xff) << G2SB_CTX1_G2SBFORMAT_0_RAISEFRAMEVALUE_SHIFT)
#define G2SB_CTX1_G2SBFORMAT_0_RAISEFRAMEVALUE_RANGE                    31:24
#define G2SB_CTX1_G2SBFORMAT_0_RAISEFRAMEVALUE_WOFFSET                  0x0
#define G2SB_CTX1_G2SBFORMAT_0_RAISEFRAMEVALUE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SBFORMAT_0_RAISEFRAMEVALUE_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SBFORMAT_0_RAISEFRAMEVALUE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SBFORMAT_0_RAISEFRAMEVALUE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2CONTROLSB_0  //{sb,sbm,index=1d}
#define G2SB_CTX1_G2CONTROLSB_0                 _MK_ADDR_CONST(0x401d)
#define G2SB_CTX1_G2CONTROLSB_0_SECURE                  0x0
#define G2SB_CTX1_G2CONTROLSB_0_WORD_COUNT                      0x1
#define G2SB_CTX1_G2CONTROLSB_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_RESET_MASK                      _MK_MASK_CONST(0xdfffa4f8)
#define G2SB_CTX1_G2CONTROLSB_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_READ_MASK                       _MK_MASK_CONST(0xdfffa7f8)
#define G2SB_CTX1_G2CONTROLSB_0_WRITE_MASK                      _MK_MASK_CONST(0xdfffa7f8)
//yuv422 plannar rotated
#define G2SB_CTX1_G2CONTROLSB_0_YUV422ROTATION_SHIFT                    _MK_SHIFT_CONST(3)
#define G2SB_CTX1_G2CONTROLSB_0_YUV422ROTATION_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLSB_0_YUV422ROTATION_SHIFT)
#define G2SB_CTX1_G2CONTROLSB_0_YUV422ROTATION_RANGE                    3:3
#define G2SB_CTX1_G2CONTROLSB_0_YUV422ROTATION_WOFFSET                  0x0
#define G2SB_CTX1_G2CONTROLSB_0_YUV422ROTATION_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_YUV422ROTATION_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLSB_0_YUV422ROTATION_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_YUV422ROTATION_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//source data is yuv422 planar valid when imode==PLANAR
#define G2SB_CTX1_G2CONTROLSB_0_YUV422PLANAR_SHIFT                      _MK_SHIFT_CONST(4)
#define G2SB_CTX1_G2CONTROLSB_0_YUV422PLANAR_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLSB_0_YUV422PLANAR_SHIFT)
#define G2SB_CTX1_G2CONTROLSB_0_YUV422PLANAR_RANGE                      4:4
#define G2SB_CTX1_G2CONTROLSB_0_YUV422PLANAR_WOFFSET                    0x0
#define G2SB_CTX1_G2CONTROLSB_0_YUV422PLANAR_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_YUV422PLANAR_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLSB_0_YUV422PLANAR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_YUV422PLANAR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Source (input) Data Mode  (IMODE) This parameter defines the data mode of source input.
// 0: Multiplexed Mode (data format is specified by SIFMT[2:0])
// One block of source data in the Image Buffer memory contains
// multiplexed component signals.
// 1: Planar mode, 4:2:0 YUV (SIFMT[2] specifies data format of U/V components)
// Three blocks of source data in the Image Buffer memory contain separate
// Y, U, and V component signals.
//
//  For circular buffer input to gr2d, the input format can not be planar.  It must be multiplex.
//    i.e. no YUV420 planar circular buffer input to gr2d.
#define G2SB_CTX1_G2CONTROLSB_0_IMODE_SHIFT                     _MK_SHIFT_CONST(5)
#define G2SB_CTX1_G2CONTROLSB_0_IMODE_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLSB_0_IMODE_SHIFT)
#define G2SB_CTX1_G2CONTROLSB_0_IMODE_RANGE                     5:5
#define G2SB_CTX1_G2CONTROLSB_0_IMODE_WOFFSET                   0x0
#define G2SB_CTX1_G2CONTROLSB_0_IMODE_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_IMODE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLSB_0_IMODE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_IMODE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_IMODE_MULTIPLEX                 _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLSB_0_IMODE_PLANAR                    _MK_ENUM_CONST(1)

//enable alpha vertical filter
#define G2SB_CTX1_G2CONTROLSB_0_ENAVF_SHIFT                     _MK_SHIFT_CONST(6)
#define G2SB_CTX1_G2CONTROLSB_0_ENAVF_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLSB_0_ENAVF_SHIFT)
#define G2SB_CTX1_G2CONTROLSB_0_ENAVF_RANGE                     6:6
#define G2SB_CTX1_G2CONTROLSB_0_ENAVF_WOFFSET                   0x0
#define G2SB_CTX1_G2CONTROLSB_0_ENAVF_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_ENAVF_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLSB_0_ENAVF_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_ENAVF_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_ENAVF_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLSB_0_ENAVF_ENABLE                    _MK_ENUM_CONST(1)

// enable horizontal alpha filtering
// if disabled, use the alpha value of third tap for output pixel
//U,V line stride in 4:2:0  Format,
#define G2SB_CTX1_G2CONTROLSB_0_ENAHF_SHIFT                     _MK_SHIFT_CONST(7)
#define G2SB_CTX1_G2CONTROLSB_0_ENAHF_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLSB_0_ENAHF_SHIFT)
#define G2SB_CTX1_G2CONTROLSB_0_ENAHF_RANGE                     7:7
#define G2SB_CTX1_G2CONTROLSB_0_ENAHF_WOFFSET                   0x0
#define G2SB_CTX1_G2CONTROLSB_0_ENAHF_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_ENAHF_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLSB_0_ENAHF_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_ENAHF_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_ENAHF_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLSB_0_ENAHF_ENABLE                    _MK_ENUM_CONST(1)

//   00= 1/2 of Luma Buffer Stride; in this case
//       Luma Buffer Stride should be multiple
//       of 2 bytes.
//   01= Equal to Luma Buffer Stride
//   10= 1/4 of Luma Buffer Stride; in this case
//       Luma Buffer Stride should be multiple
//       of 4 bytes.
//   11= use uvstride.
// Note: Use care when using a tiled surface, since 1/2 or 1/4
//   of luma stride may yield an invalid pitch (stride).
#define G2SB_CTX1_G2CONTROLSB_0_UVST_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_CTX1_G2CONTROLSB_0_UVST_FIELD                      (_MK_MASK_CONST(0x3) << G2SB_CTX1_G2CONTROLSB_0_UVST_SHIFT)
#define G2SB_CTX1_G2CONTROLSB_0_UVST_RANGE                      9:8
#define G2SB_CTX1_G2CONTROLSB_0_UVST_WOFFSET                    0x0
#define G2SB_CTX1_G2CONTROLSB_0_UVST_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_UVST_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_UVST_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_UVST_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_UVST_UVS2X                      _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLSB_0_UVST_UVS1X                      _MK_ENUM_CONST(1)
#define G2SB_CTX1_G2CONTROLSB_0_UVST_UVS4X                      _MK_ENUM_CONST(2)
#define G2SB_CTX1_G2CONTROLSB_0_UVST_UVS_G2UVSTRIDE                     _MK_ENUM_CONST(3)

// Source (input) Data Line Pairing  (SL)
// This parameter specifies one of two cases of Y vs. U/V line-pairing
// in the source data in 4:2:0 format.
// In the 4:2:0 format, there is one pair of U and V image-lines for
// every two Y image-lines.
//0 The first two Y image-lines share common pair of U and V image-lines.
//1 The first two Y image-lines are paired with two different
// pairs of U and V image-lines.
#define G2SB_CTX1_G2CONTROLSB_0_SL_SHIFT                        _MK_SHIFT_CONST(10)
#define G2SB_CTX1_G2CONTROLSB_0_SL_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLSB_0_SL_SHIFT)
#define G2SB_CTX1_G2CONTROLSB_0_SL_RANGE                        10:10
#define G2SB_CTX1_G2CONTROLSB_0_SL_WOFFSET                      0x0
#define G2SB_CTX1_G2CONTROLSB_0_SL_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_SL_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLSB_0_SL_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_SL_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_SL_COMMON_PAIR                  _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLSB_0_SL_DIFFERENT_PAIR                       _MK_ENUM_CONST(1)

// StretchBLT Source Provider Selection (SISEL)
// This bit indicates where the source images come from,  either the
// image buffer memory or system memory of the host CPU.  If source
//images come from host CPU, they come via CPU Read-FIFO.
//0 Image buffer memory.
//1 System memory of host CPU.
//14 Reserved
#define G2SB_CTX1_G2CONTROLSB_0_SISEL_SHIFT                     _MK_SHIFT_CONST(13)
#define G2SB_CTX1_G2CONTROLSB_0_SISEL_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLSB_0_SISEL_SHIFT)
#define G2SB_CTX1_G2CONTROLSB_0_SISEL_RANGE                     13:13
#define G2SB_CTX1_G2CONTROLSB_0_SISEL_WOFFSET                   0x0
#define G2SB_CTX1_G2CONTROLSB_0_SISEL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_SISEL_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLSB_0_SISEL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_SISEL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_SISEL_IMAGE_BUFFER                      _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLSB_0_SISEL_HOST                      _MK_ENUM_CONST(1)

// StretchBLT Source Selection  (SBLTSRC)
// CPU and VIP module can initiate StretchBLT operation. This bit indicates
// which one initiates current StretchBLT command. Depending on the initiator,
// appropriate source for the command execution request is selected. Whichever
// the initiator is, all the command parameters are supplied from the CPU (driver)
// through the G2 command-FIFO and shadow registers.
//0 CPU is the command initiator.
//1 VIP module is the command initiator.
#define G2SB_CTX1_G2CONTROLSB_0_SBLTSRC_SHIFT                   _MK_SHIFT_CONST(15)
#define G2SB_CTX1_G2CONTROLSB_0_SBLTSRC_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLSB_0_SBLTSRC_SHIFT)
#define G2SB_CTX1_G2CONTROLSB_0_SBLTSRC_RANGE                   15:15
#define G2SB_CTX1_G2CONTROLSB_0_SBLTSRC_WOFFSET                 0x0
#define G2SB_CTX1_G2CONTROLSB_0_SBLTSRC_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_SBLTSRC_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLSB_0_SBLTSRC_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_SBLTSRC_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_SBLTSRC_CPU                     _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLSB_0_SBLTSRC_VIP                     _MK_ENUM_CONST(1)

// StretchBLT Vertical Filter Mode (VFTYPE[1:0])
// This bit is effective when the Vertical Filter is enabled. (bit 18)
// The two-tap vertical interpolation filter can be operated in various modes.
// For the image expansion, it should be programmed as a pure 2-tap
// interpolator. For the image contraction, it can work as partly averager
// and partly interpolator with varying degree depending on the contraction ratio.
// For StretchBLT, this parameter is used as an index (selection) to
// an internal lookup table that stores the group of filter-coefficients for
// the different modes of vertical filtering.
//00 Pure interpolation filter.
//01 25% averager, 75% interpolator.
//10 50% averager, 50% interpolator.
//11 100% averager.
#define G2SB_CTX1_G2CONTROLSB_0_VFTYPE_SHIFT                    _MK_SHIFT_CONST(16)
#define G2SB_CTX1_G2CONTROLSB_0_VFTYPE_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX1_G2CONTROLSB_0_VFTYPE_SHIFT)
#define G2SB_CTX1_G2CONTROLSB_0_VFTYPE_RANGE                    17:16
#define G2SB_CTX1_G2CONTROLSB_0_VFTYPE_WOFFSET                  0x0
#define G2SB_CTX1_G2CONTROLSB_0_VFTYPE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_VFTYPE_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX1_G2CONTROLSB_0_VFTYPE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_VFTYPE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_VFTYPE_INTERP                   _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLSB_0_VFTYPE_AVG25_INTERP75                   _MK_ENUM_CONST(1)
#define G2SB_CTX1_G2CONTROLSB_0_VFTYPE_AVG50_INTERP50                   _MK_ENUM_CONST(2)
#define G2SB_CTX1_G2CONTROLSB_0_VFTYPE_AVG                      _MK_ENUM_CONST(3)

// StretchBLT Vertical Filter Enable (VFEN)
// Vertical filter shall be disabled if source images come from host CPU
// via CPU Read-FIFO. (SISEL)
// Vertical filter may be disabled to save some memory bandwidth but
// this will likely result in degradation of image quality.
// This option may also be used in the case where source image is progressive
// scanning and there is no vertical scaling.
//0 Vertical filter is disabled.
//1 Vertical filter is enabled.
#define G2SB_CTX1_G2CONTROLSB_0_VFEN_SHIFT                      _MK_SHIFT_CONST(18)
#define G2SB_CTX1_G2CONTROLSB_0_VFEN_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLSB_0_VFEN_SHIFT)
#define G2SB_CTX1_G2CONTROLSB_0_VFEN_RANGE                      18:18
#define G2SB_CTX1_G2CONTROLSB_0_VFEN_WOFFSET                    0x0
#define G2SB_CTX1_G2CONTROLSB_0_VFEN_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_VFEN_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLSB_0_VFEN_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_VFEN_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_VFEN_DISABLE                    _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLSB_0_VFEN_ENABLE                     _MK_ENUM_CONST(1)

// enabled color space converter by default
#define G2SB_CTX1_G2CONTROLSB_0_DISCSC_SHIFT                    _MK_SHIFT_CONST(19)
#define G2SB_CTX1_G2CONTROLSB_0_DISCSC_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLSB_0_DISCSC_SHIFT)
#define G2SB_CTX1_G2CONTROLSB_0_DISCSC_RANGE                    19:19
#define G2SB_CTX1_G2CONTROLSB_0_DISCSC_WOFFSET                  0x0
#define G2SB_CTX1_G2CONTROLSB_0_DISCSC_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_DISCSC_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLSB_0_DISCSC_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_DISCSC_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_DISCSC_ENABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLSB_0_DISCSC_DISABLE                  _MK_ENUM_CONST(1)

// StretchBLT Horizontal Filter Mode (HFTYPE[2:0])
// The six-tap horizontal interpolation filter can be operated in
// various operation modes. For the image expansion, it should be programmed
// as a pure 6-tap interpolator.  For the image contraction, it can work as
// partly lowpass filter and partly interpolater with varying degree depending
// the contraction ratio.
// For StretchBLT, this parameter is used as an index (selection)
// to an internal lookup table that stores the group of filter-coefficients
//for the different modes of horizontal filtering.
// 000: Pure interpolation filter.
// 001: 010 011 100 101 110: mix of interpolation and low pass filters
// 111: DISABLE.
#define G2SB_CTX1_G2CONTROLSB_0_HFTYPE_SHIFT                    _MK_SHIFT_CONST(20)
#define G2SB_CTX1_G2CONTROLSB_0_HFTYPE_FIELD                    (_MK_MASK_CONST(0x7) << G2SB_CTX1_G2CONTROLSB_0_HFTYPE_SHIFT)
#define G2SB_CTX1_G2CONTROLSB_0_HFTYPE_RANGE                    22:20
#define G2SB_CTX1_G2CONTROLSB_0_HFTYPE_WOFFSET                  0x0
#define G2SB_CTX1_G2CONTROLSB_0_HFTYPE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_HFTYPE_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define G2SB_CTX1_G2CONTROLSB_0_HFTYPE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_HFTYPE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_HFTYPE_INTERP                   _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLSB_0_HFTYPE_LPF1                     _MK_ENUM_CONST(1)
#define G2SB_CTX1_G2CONTROLSB_0_HFTYPE_LPF2                     _MK_ENUM_CONST(2)
#define G2SB_CTX1_G2CONTROLSB_0_HFTYPE_LPF3                     _MK_ENUM_CONST(3)
#define G2SB_CTX1_G2CONTROLSB_0_HFTYPE_LPF4                     _MK_ENUM_CONST(4)
#define G2SB_CTX1_G2CONTROLSB_0_HFTYPE_LPF5                     _MK_ENUM_CONST(5)
#define G2SB_CTX1_G2CONTROLSB_0_HFTYPE_LPF6                     _MK_ENUM_CONST(6)
#define G2SB_CTX1_G2CONTROLSB_0_HFTYPE_DISABLE                  _MK_ENUM_CONST(7)

//In the VC-1 specification, when the value of RANGEREDFRM variable (1-bit)
//  for a picture is equal to 1, the picture shall be scaled up according
// to the following equation:
//Y = clip( (( Y-128)*2) + 128);
//Cb = clip( ((Cb-128)*2) + 128);
//Cr = clip( ((Cr-128)*2) + 128);
//The clip operator limits the output to [0, 255].
//The input is also limited to [0, 255].
//In the VC-1 nomenclature, the output (Y, Cb, Cr) tuple corresponds to
// the 'decoded' picture. The input (Y, Cb, Cr) tuple corresponds to
// the 'reconstructed' picture.
// The above equations create the decoded picture while keeping
// the reconstructed picture intact.
//Only YUV _OB formats are supported with range reducation enabled,
// not the YUV _TC or RGB formats.
//----------------------------------------------------
//At PortalPlayer this functionality was implemented in the DVO module.
// The YUV data coming from the video frame buffers (reconstructed picture)
//  in the SDRAM was scaled up using the above equations and given to the display.
// the value of 1-bit wide RANGEREDFRM variable was configured in the DVO per frame
// and the frame was scaled whenever RANGEREDFRM == 1.
#define G2SB_CTX1_G2CONTROLSB_0_RANGEREDFRM_SHIFT                       _MK_SHIFT_CONST(23)
#define G2SB_CTX1_G2CONTROLSB_0_RANGEREDFRM_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLSB_0_RANGEREDFRM_SHIFT)
#define G2SB_CTX1_G2CONTROLSB_0_RANGEREDFRM_RANGE                       23:23
#define G2SB_CTX1_G2CONTROLSB_0_RANGEREDFRM_WOFFSET                     0x0
#define G2SB_CTX1_G2CONTROLSB_0_RANGEREDFRM_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_RANGEREDFRM_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLSB_0_RANGEREDFRM_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_RANGEREDFRM_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_RANGEREDFRM_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLSB_0_RANGEREDFRM_ENABLE                      _MK_ENUM_CONST(1)

// StretchBLT Source Type (SITYPE)
// This bit identifies two types of source images. If source image is 2-to-1
// interlaced and StretchBLT processes either one of the two interlaced
// field-images, physical (positional) displacement between the two
// interlaced fields must be taken into account.  One field-image that is
// placed higher in position than the other field-image is called top-field
// and the other is called bottom-field. StretchBLT processing has to
// lower the top-field (or raise the bottom-field) to match the corresponding
// two target images in the overlay window (that is progressively scanned)
// right at the same position.   If source image is full frame-image
// obtained from two interlaced field-images, its type is ?top-field?.
// If source images are progressively scanned, the type identification is not
// significant and they may be designated either one of the two types
//0 Source image is ?top-field?.
//1 Source image is ?bottom-field?.
#define G2SB_CTX1_G2CONTROLSB_0_SITYPE_SHIFT                    _MK_SHIFT_CONST(24)
#define G2SB_CTX1_G2CONTROLSB_0_SITYPE_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLSB_0_SITYPE_SHIFT)
#define G2SB_CTX1_G2CONTROLSB_0_SITYPE_RANGE                    24:24
#define G2SB_CTX1_G2CONTROLSB_0_SITYPE_WOFFSET                  0x0
#define G2SB_CTX1_G2CONTROLSB_0_SITYPE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_SITYPE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLSB_0_SITYPE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_SITYPE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_SITYPE_TOP_FIELD                        _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLSB_0_SITYPE_BOTTOM_FIELD                     _MK_ENUM_CONST(1)

// StretchBLT Source Buffer Selection (SBSEL)
// StretchBLT processing involves frame-rate conversion from a
// series of source images to another series of destination images
// (field-rate of the source video to frame-rate of the PC display).
// In order to avoid image tearing, it is preferred to use two buffer
// sections in the source video area. This bit selects one of the two
// buffering blocks from which this StretchBLT command receives the source image.
// The two buffering memory blocks are called source-A and source-B.
//0 Source image comes from ?source-A? buffer.
//1 Source image comes from ?source-B? buffer.
#define G2SB_CTX1_G2CONTROLSB_0_SBSEL_SHIFT                     _MK_SHIFT_CONST(25)
#define G2SB_CTX1_G2CONTROLSB_0_SBSEL_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLSB_0_SBSEL_SHIFT)
#define G2SB_CTX1_G2CONTROLSB_0_SBSEL_RANGE                     25:25
#define G2SB_CTX1_G2CONTROLSB_0_SBSEL_WOFFSET                   0x0
#define G2SB_CTX1_G2CONTROLSB_0_SBSEL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_SBSEL_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLSB_0_SBSEL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_SBSEL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_SBSEL_SRC_A                     _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLSB_0_SBSEL_SRC_B                     _MK_ENUM_CONST(1)

// StretchBLT Destination Buffer Selection (DBSEL)
// StretchBLT processing involves frame-rate conversion from a series of
// source images to another series of destination images (field-rate of
// the source video to frame-rate of the PC display). In order to avoid
// image tearing, it is preferred to use two buffer sections in the destination
// video area.  This bit selects one of the two buffering blocks to which this
// StretchBLT command delivers the destination image.
// The two buffering memory blocks are called A and B.
//0 Destination image goes to ?A? buffer.
//1 Destination image goes to ?B? buffer.
#define G2SB_CTX1_G2CONTROLSB_0_DBSEL_SHIFT                     _MK_SHIFT_CONST(26)
#define G2SB_CTX1_G2CONTROLSB_0_DBSEL_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLSB_0_DBSEL_SHIFT)
#define G2SB_CTX1_G2CONTROLSB_0_DBSEL_RANGE                     26:26
#define G2SB_CTX1_G2CONTROLSB_0_DBSEL_WOFFSET                   0x0
#define G2SB_CTX1_G2CONTROLSB_0_DBSEL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_DBSEL_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLSB_0_DBSEL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_DBSEL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_DBSEL_DST_A                     _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLSB_0_DBSEL_DST_B                     _MK_ENUM_CONST(1)

// Key Signal Generator Enable (KEYEN) Key signal generator generates either
// chroma key signal (from YCbCr signal) or color key signal (from RGB signal)
//0 Key signal generator is disabled.
//1 Key signal generator is enabled.
#define G2SB_CTX1_G2CONTROLSB_0_KEYEN_SHIFT                     _MK_SHIFT_CONST(27)
#define G2SB_CTX1_G2CONTROLSB_0_KEYEN_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLSB_0_KEYEN_SHIFT)
#define G2SB_CTX1_G2CONTROLSB_0_KEYEN_RANGE                     27:27
#define G2SB_CTX1_G2CONTROLSB_0_KEYEN_WOFFSET                   0x0
#define G2SB_CTX1_G2CONTROLSB_0_KEYEN_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_KEYEN_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLSB_0_KEYEN_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_KEYEN_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_KEYEN_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLSB_0_KEYEN_ENABLE                    _MK_ENUM_CONST(1)

// Key Signal Polarity (KPOL)
// Color/Chroma key signal is generated by comparing source input pixel
// color to a range of a color specified by lower and upper limit values.
// The key signal is interpreted in two ways, depending on which one of
// video and graphics images is foreground (and the other is background).
// This is effective only if Key signal generator is enabled.
// (see G2CMKEYL, G2CMKEYU)
// 0 Key signal is set to 1 when source pixel is within the lower and upper
// limit color range.
// 1 Key signal is set to 1 when source pixel is outside the lower and upper
// limit color range.
#define G2SB_CTX1_G2CONTROLSB_0_KPOL_SHIFT                      _MK_SHIFT_CONST(28)
#define G2SB_CTX1_G2CONTROLSB_0_KPOL_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLSB_0_KPOL_SHIFT)
#define G2SB_CTX1_G2CONTROLSB_0_KPOL_RANGE                      28:28
#define G2SB_CTX1_G2CONTROLSB_0_KPOL_WOFFSET                    0x0
#define G2SB_CTX1_G2CONTROLSB_0_KPOL_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_KPOL_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLSB_0_KPOL_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_KPOL_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_KPOL_WITHIN_BOUNDS                      _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLSB_0_KPOL_OUTSIDE_BOUNDS                     _MK_ENUM_CONST(1)

// Enable Dithering (ENDITH)
// For 16 bit RGB output modes, the LSB of the color components can be
// modified by adding a variable residual value that will reduce the banding
// artifacts that can appear on the display.
// 0 Normal operation
// 1 Enable Dithering
#define G2SB_CTX1_G2CONTROLSB_0_ENDITH_SHIFT                    _MK_SHIFT_CONST(30)
#define G2SB_CTX1_G2CONTROLSB_0_ENDITH_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLSB_0_ENDITH_SHIFT)
#define G2SB_CTX1_G2CONTROLSB_0_ENDITH_RANGE                    30:30
#define G2SB_CTX1_G2CONTROLSB_0_ENDITH_WOFFSET                  0x0
#define G2SB_CTX1_G2CONTROLSB_0_ENDITH_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_ENDITH_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLSB_0_ENDITH_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_ENDITH_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_ENDITH_DISABLE                  _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLSB_0_ENDITH_ENABLE                   _MK_ENUM_CONST(1)

//output destination writes (dw) go either to image memory or epp
//0 Output data is sent to memory
//1 YUV or RGB data is passed directly to EPP module and no destination writes
//  will take place.
#define G2SB_CTX1_G2CONTROLSB_0_DISDW_SHIFT                     _MK_SHIFT_CONST(31)
#define G2SB_CTX1_G2CONTROLSB_0_DISDW_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLSB_0_DISDW_SHIFT)
#define G2SB_CTX1_G2CONTROLSB_0_DISDW_RANGE                     31:31
#define G2SB_CTX1_G2CONTROLSB_0_DISDW_WOFFSET                   0x0
#define G2SB_CTX1_G2CONTROLSB_0_DISDW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_DISDW_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLSB_0_DISDW_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_DISDW_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSB_0_DISDW_GOTO_IMAGE_BUFFER                 _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLSB_0_DISDW_GOTO_EPP                  _MK_ENUM_CONST(1)


// Register G2SB_CTX1_G2CONTROLSECOND_0  //{host,2d,index=1e}
#define G2SB_CTX1_G2CONTROLSECOND_0                     _MK_ADDR_CONST(0x401e)
#define G2SB_CTX1_G2CONTROLSECOND_0_SECURE                      0x0
#define G2SB_CTX1_G2CONTROLSECOND_0_WORD_COUNT                  0x1
#define G2SB_CTX1_G2CONTROLSECOND_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_RESET_MASK                  _MK_MASK_CONST(0x3f61c3fe)
#define G2SB_CTX1_G2CONTROLSECOND_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_READ_MASK                   _MK_MASK_CONST(0x3f71c3fe)
#define G2SB_CTX1_G2CONTROLSECOND_0_WRITE_MASK                  _MK_MASK_CONST(0x3f71c3fe)
// Host port bit swap 1=enable   0= disable
//   1= enable
#define G2SB_CTX1_G2CONTROLSECOND_0_BITSWAP_SHIFT                       _MK_SHIFT_CONST(1)
#define G2SB_CTX1_G2CONTROLSECOND_0_BITSWAP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLSECOND_0_BITSWAP_SHIFT)
#define G2SB_CTX1_G2CONTROLSECOND_0_BITSWAP_RANGE                       1:1
#define G2SB_CTX1_G2CONTROLSECOND_0_BITSWAP_WOFFSET                     0x0
#define G2SB_CTX1_G2CONTROLSECOND_0_BITSWAP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_BITSWAP_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLSECOND_0_BITSWAP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_BITSWAP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_BITSWAP_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLSECOND_0_BITSWAP_ENABLE                      _MK_ENUM_CONST(1)

// Host port byte swap 1=enable   0= disable
//   1= enable
#define G2SB_CTX1_G2CONTROLSECOND_0_BEBSWAP_SHIFT                       _MK_SHIFT_CONST(2)
#define G2SB_CTX1_G2CONTROLSECOND_0_BEBSWAP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLSECOND_0_BEBSWAP_SHIFT)
#define G2SB_CTX1_G2CONTROLSECOND_0_BEBSWAP_RANGE                       2:2
#define G2SB_CTX1_G2CONTROLSECOND_0_BEBSWAP_WOFFSET                     0x0
#define G2SB_CTX1_G2CONTROLSECOND_0_BEBSWAP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_BEBSWAP_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLSECOND_0_BEBSWAP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_BEBSWAP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_BEBSWAP_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLSECOND_0_BEBSWAP_ENABLE                      _MK_ENUM_CONST(1)

// Host port word swap 1=enable   0= disable
#define G2SB_CTX1_G2CONTROLSECOND_0_BEWSWAP_SHIFT                       _MK_SHIFT_CONST(3)
#define G2SB_CTX1_G2CONTROLSECOND_0_BEWSWAP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLSECOND_0_BEWSWAP_SHIFT)
#define G2SB_CTX1_G2CONTROLSECOND_0_BEWSWAP_RANGE                       3:3
#define G2SB_CTX1_G2CONTROLSECOND_0_BEWSWAP_WOFFSET                     0x0
#define G2SB_CTX1_G2CONTROLSECOND_0_BEWSWAP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_BEWSWAP_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLSECOND_0_BEWSWAP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_BEWSWAP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_BEWSWAP_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLSECOND_0_BEWSWAP_ENABLE                      _MK_ENUM_CONST(1)

// Alpha blending method
// FIX:
//   ALPHA blending:  Fixed alpha,  ALPHA is the value, B5G6R5 * B5G6R5
//   VCAA:            B5G6R5->B5G6R5
// PL1BPP:
//   ALPHA blending:  Alpha 1bit/pixel from memory plane, B5G6R5 * B5G6R5
//      NOTE: when ALPTYPE is PL1BPP, DSTX[2:0] must be zero, see bug 344489
// PL2BPP:
//   ALPHA blending:  Alpha 2bits/pixel from memory plane, B5G6R5 * B5G6R5
//      NOTE: when ALPTYPE is PL2BPP, DSTX[1:0] must be zero, see bug 344489
// PL4BPP:
//   ALPHA blending:  Alpha 4bits/pixel from memory plane, B5G6R5 * B5G6R5
//      NOTE: when ALPTYPE is PL4BPP, DSTX[0:0] must be zero, see bug 344489
// PL8BPP:
//   ALPHA blending:  Alpha 8bits/pixel from memory plane, B5G6R5 * B5G6R5
// PL44BPP:
//   ALPHA blending:  Alpha 8bits/pixel from memory plane src*4bits+dst*4bits, B5G6R5 * B5G6R5
// PLS1BPP:
//   ALPHA blending:  Alpha 1bit from source B5G5R5A1, alpha(MSB). Dest: B5G6R5.
//   VCAA:            reserved
// PLS4BPPAL:
//   ALPHA blending:  Alpha 4bits from source A4B4G4R4, alpha(LSB). Dest: B5G6R5.
// PLS4BPP:
//   ALPHA blending:  Alpha 4bits from source B4G4R4A4, alpha(MSB). Dest: B5G6R5.
//   VCAA:            R8G8B8A8->B5G6R5 without reading VCAA plane
//                     (surface blit with bpp down convert - implemented in hw by vcaa engine; not really a vcaa resolve)
// PLS8BPP:
//   ALPHA blending:  Alpha 8bits from source/destination(decided by ALPSRCORDST),
//                    R8G8B8A8, alpha(MSB). DST: R8G8B8A8
//   VCAA:            R8G8B8A8->R8G8B8A8, alpha has same blending method as RGB
// PLS8BX:
//   ALPHA blending:  Alpha 8bits from source B8G8R8A8, alpha(MSB). Dest: B5G6R5. (**Restrictions)
//   VCAA:            R8G8B8A8->B5G6R5
// PLS1BPPAL:
//   ALPHA blending:  Alpha 1 bit from source A1B5G5R5, alpha(LSB). Dest: B5G6R5
//   VCAA:            A1B5G5R5->A1B5G5R5
// **Restriction
// PLS8BX alpha blending has the following restrictions
// 1. Source/destination addresses have to be in 128bit boundary.
// 2. Destination width has to be multiple of 4 pixels.
// 3. Source/Destination strides have to be multiple of 128bits.
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPTYPE_SHIFT                       _MK_SHIFT_CONST(4)
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPTYPE_FIELD                       (_MK_MASK_CONST(0x1f) << G2SB_CTX1_G2CONTROLSECOND_0_ALPTYPE_SHIFT)
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPTYPE_RANGE                       8:4
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPTYPE_WOFFSET                     0x0
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPTYPE_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPTYPE_DEFAULT_MASK                        _MK_MASK_CONST(0x1f)
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPTYPE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPTYPE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPTYPE_FIX                 _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPTYPE_PL1BPP                      _MK_ENUM_CONST(1)
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPTYPE_PL2BPP                      _MK_ENUM_CONST(2)
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPTYPE_PL4BPP                      _MK_ENUM_CONST(3)
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPTYPE_PL8BPP                      _MK_ENUM_CONST(4)
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPTYPE_PL44BPP                     _MK_ENUM_CONST(5)
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPTYPE_PLS1BPP                     _MK_ENUM_CONST(6)
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPTYPE_PLS4BPPAL                   _MK_ENUM_CONST(7)
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPTYPE_PLS4BPP                     _MK_ENUM_CONST(8)
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPTYPE_PLS8BPP                     _MK_ENUM_CONST(9)
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPTYPE_PLS8BX                      _MK_ENUM_CONST(10)
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPTYPE_PLS1BPPAL                   _MK_ENUM_CONST(11)

// 32bits blending mode, output alpha selection 0:source alpha, 1:destination alpha
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPSRCORDST_SHIFT                   _MK_SHIFT_CONST(9)
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPSRCORDST_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLSECOND_0_ALPSRCORDST_SHIFT)
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPSRCORDST_RANGE                   9:9
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPSRCORDST_WOFFSET                 0x0
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPSRCORDST_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPSRCORDST_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPSRCORDST_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPSRCORDST_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPSRCORDST_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLSECOND_0_ALPSRCORDST_ENABLE                  _MK_ENUM_CONST(1)

// Pixel replication for Palm OS.
#define G2SB_CTX1_G2CONTROLSECOND_0_PXLREP_SHIFT                        _MK_SHIFT_CONST(14)
#define G2SB_CTX1_G2CONTROLSECOND_0_PXLREP_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLSECOND_0_PXLREP_SHIFT)
#define G2SB_CTX1_G2CONTROLSECOND_0_PXLREP_RANGE                        14:14
#define G2SB_CTX1_G2CONTROLSECOND_0_PXLREP_WOFFSET                      0x0
#define G2SB_CTX1_G2CONTROLSECOND_0_PXLREP_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_PXLREP_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLSECOND_0_PXLREP_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_PXLREP_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_PXLREP_DISABLE                      _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLSECOND_0_PXLREP_ENABLE                       _MK_ENUM_CONST(1)

// Used by Palm OS to highlight a selected icon by swapping
//  Background and Foreground colors in a rectangle area
#define G2SB_CTX1_G2CONTROLSECOND_0_SWAPBLT_SHIFT                       _MK_SHIFT_CONST(15)
#define G2SB_CTX1_G2CONTROLSECOND_0_SWAPBLT_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLSECOND_0_SWAPBLT_SHIFT)
#define G2SB_CTX1_G2CONTROLSECOND_0_SWAPBLT_RANGE                       15:15
#define G2SB_CTX1_G2CONTROLSECOND_0_SWAPBLT_WOFFSET                     0x0
#define G2SB_CTX1_G2CONTROLSECOND_0_SWAPBLT_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_SWAPBLT_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLSECOND_0_SWAPBLT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_SWAPBLT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//VCAA safe mode, if turned on, all up/bottom color data will be read in. This is a debug/cya incase the top/bottom color
//  fetch is broken.
#define G2SB_CTX1_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_CTX1_G2CONTROLSECOND_0_VCAA_SAFE_MODE_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SHIFT)
#define G2SB_CTX1_G2CONTROLSECOND_0_VCAA_SAFE_MODE_RANGE                        16:16
#define G2SB_CTX1_G2CONTROLSECOND_0_VCAA_SAFE_MODE_WOFFSET                      0x0
#define G2SB_CTX1_G2CONTROLSECOND_0_VCAA_SAFE_MODE_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_VCAA_SAFE_MODE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_VCAA_SAFE_MODE_DISABLE                      _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLSECOND_0_VCAA_SAFE_MODE_ENABLE                       _MK_ENUM_CONST(1)

#define G2SB_CTX1_G2CONTROLSECOND_0_G2NOSTOP_SHIFT                      _MK_SHIFT_CONST(20)
#define G2SB_CTX1_G2CONTROLSECOND_0_G2NOSTOP_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLSECOND_0_G2NOSTOP_SHIFT)
#define G2SB_CTX1_G2CONTROLSECOND_0_G2NOSTOP_RANGE                      20:20
#define G2SB_CTX1_G2CONTROLSECOND_0_G2NOSTOP_WOFFSET                    0x0
#define G2SB_CTX1_G2CONTROLSECOND_0_G2NOSTOP_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_G2NOSTOP_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_G2NOSTOP_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_G2NOSTOP_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Clipping rectangle control,
// if clip enable, bit 57 XYTDW should be cleared.
// 0x=clipping disabled,
// 10=draw only inside clipping rectangle,
// 11=draw only outside clipping rectangle
#define G2SB_CTX1_G2CONTROLSECOND_0_CLIPC_SHIFT                 _MK_SHIFT_CONST(21)
#define G2SB_CTX1_G2CONTROLSECOND_0_CLIPC_FIELD                 (_MK_MASK_CONST(0x3) << G2SB_CTX1_G2CONTROLSECOND_0_CLIPC_SHIFT)
#define G2SB_CTX1_G2CONTROLSECOND_0_CLIPC_RANGE                 22:21
#define G2SB_CTX1_G2CONTROLSECOND_0_CLIPC_WOFFSET                       0x0
#define G2SB_CTX1_G2CONTROLSECOND_0_CLIPC_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_CLIPC_DEFAULT_MASK                  _MK_MASK_CONST(0x3)
#define G2SB_CTX1_G2CONTROLSECOND_0_CLIPC_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_CLIPC_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Fast Rotate mode sel
//------------------------------------------------------------------
// G2 Fast Rotate
//
// Transforms a surface via FR_TYPE transformation.
// Works in either 2-buffer (copy)  or 1-buffer mode (in place) mode.
// The engine breaks down a larger surface into a grid of smaller FR_BLOCKs.
// Works on the granularity of an FR_BLOCK.  An FR_BLOCK is:
//   16x16 pixel block (DSTCD = bpp8)
//    8x8  pixel block (DSTCD = bpp16)
//    4x4  pixel block (DSTCD = bpp32)
// Max surface size is 4096x4096
//
// Key information
//  - source and destination base address must be 128-bit word aligned
//  - engine works on FR_BLOCK granularity:
//      transformed surface width  in multiples of 16-bytes**
//      transformed surface height in multiples of 16/8/4 lines for bpp8/bpp16/bpp32 FR_BLOCK
//      if surface dimension is not a multiple, sw can program FR engine to transform larger surface
//         (round up to next FR_BLOCK in width and height-->transform-->calculate relative memory pointer address)
//  - during a rotational transformation (TRANS_LR, TRANS_RL, ROT_90, ROT_270):
//      the stride of the output surface != the stride of the input surface when working on non-square input
//      input:                        output:
//      *^----------------------           *$----------------------
//      $ 0  1  2  3  4  5  6  7           ^ 24 16 8  0  ^  ^  ^  ^
//      | 8  9 10 11 12 13 14 15           | 25 17 9  1  ^  ^  ^  ^
//      |16 17 18 19 20 21 22 23           | 26 18 10 2  ^  ^  ^  ^
//      |24 25 26 27 28 29 30 31           | 27 19 11 3  ^  ^  ^  ^
//      | -  -  -  -  *  *  *  *           | 28 20 12 4  *  *  *  *
//      | -  -  -  -  *  *  *  *           | 29 21 13 5  *  *  *  *
//      | -  -  -  -  *  *  *  *           | 30 22 14 6  *  *  *  *
//      | -  -  -  -  *  *  *  *           | 31 23 15 7  *  *  *  *
//
//  - Tiling alignment restrictions subsume FR restrictions because the
//    FR surface base address is the same as the start address.
//
//  Register Programming
//  ====================
//   FR_MODE - inplace or copy
//   FR_TYPE - type of transformation
//   DSTCD - bpp8, bpp16, bpp32
//   SRCBA - source base address
//   SRCWIDTH - (width in pixels-1)
//   SRCHEIGHT - (height in lines-1)
//   SRCS - source stride
//   DSTBA - dest base address
//   DSTS - dest stride
//   FR_READWAIT - always set to enable
//
// FR inefficency in the following setup :
// 1. FR_MODE==SQUARE
// 2. if(FR_TYPE==YFLIP && SRCHEIGHT==m*n && n==odd number) where m=8bpp?16:16bpp?8:4
//    Or if(FR_TYPE==XFLIP && SRCWIDTH==m*n && n==odd number) where m=8bpp?16:16bpp?8:4
// 3. Then, the middle 8 lines/pixels, E.G. YFLIP/16bpp/n==3, line8 to line15 will be processed twice. 00 = disable fast rotate - this turns off the 2nd level clock to fr_rotate engine.  Please remember to do so!
// 01 = src/dst copy mode - two separate buffers
// 10 = square in place - one buffer
// 11 = blank
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_MODE_SHIFT                       _MK_SHIFT_CONST(24)
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_MODE_FIELD                       (_MK_MASK_CONST(0x3) << G2SB_CTX1_G2CONTROLSECOND_0_FR_MODE_SHIFT)
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_MODE_RANGE                       25:24
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_MODE_WOFFSET                     0x0
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_MODE_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_MODE_DEFAULT_MASK                        _MK_MASK_CONST(0x3)
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_MODE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_MODE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_MODE_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_MODE_SRC_DST_COPY                        _MK_ENUM_CONST(1)
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_MODE_SQUARE                      _MK_ENUM_CONST(2)
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_MODE_BLANK                       _MK_ENUM_CONST(3)

//  Fast Rotate type     000 = FLIP_X
// 001 = FLIP_Y
// 010 = TRANS_LR (mirrors about diagonal. Diagonal runs from upper left to lower right)
// 011 = TRANS_RL (mirrors about diagonal. Diagonal runs from upper right to lower left)
// 100 = ROT_90 (counter clock wise by 90 degrees)
// 101 = ROT_180
// 110 = ROT_270 (clock wise by 90 degrees)
// 111 = IDENTITY
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_TYPE_SHIFT                       _MK_SHIFT_CONST(26)
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_TYPE_FIELD                       (_MK_MASK_CONST(0x7) << G2SB_CTX1_G2CONTROLSECOND_0_FR_TYPE_SHIFT)
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_TYPE_RANGE                       28:26
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_TYPE_WOFFSET                     0x0
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_TYPE_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_TYPE_DEFAULT_MASK                        _MK_MASK_CONST(0x7)
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_TYPE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_TYPE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_TYPE_FLIP_X                      _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_TYPE_FLIP_Y                      _MK_ENUM_CONST(1)
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_TYPE_TRANS_LR                    _MK_ENUM_CONST(2)
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_TYPE_TRANS_RL                    _MK_ENUM_CONST(3)
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_TYPE_ROT_90                      _MK_ENUM_CONST(4)
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_TYPE_ROT_180                     _MK_ENUM_CONST(5)
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_TYPE_ROT_270                     _MK_ENUM_CONST(6)
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_TYPE_IDENTITY                    _MK_ENUM_CONST(7)

//  Fast Rotate wait for read 0 = disable
// 1 = enable
// Enabling this bit forces FR to wait for the reads to be stored
// in the data return fifo before started to send writes out to
// the same block.
//
// Always set to ENABLE.  This is debug only.
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_READWAIT_SHIFT                   _MK_SHIFT_CONST(29)
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_READWAIT_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLSECOND_0_FR_READWAIT_SHIFT)
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_READWAIT_RANGE                   29:29
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_READWAIT_WOFFSET                 0x0
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_READWAIT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_READWAIT_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_READWAIT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_READWAIT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_READWAIT_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLSECOND_0_FR_READWAIT_ENABLE                  _MK_ENUM_CONST(1)

//----------------------------------------------------------------------
//
// G2 Blit Formats:
// (1) G2 Blit size is based on height in lines, width in pixels,
//     stride in bytes, and pixel size (color depth). Unless alpha
//     blending is enabled, G2 doesn't care about pixel components.
//
//     Source color depths supported by G2 Blit:
//     =========================================
//       color depth same as destination: G2CONTROLMAIN.SRCCD = 1
//       monochrome:                      G2CONTROLMAIN.SRCCD = 0
//       (source monochrome color determined by G2SRCBGC, G2SRCFGC)
//
//     Pattern color depths supported by G2 Blit:
//     =========================================
//       color depth same as destination: G2PATOS.PATCD = 1
//       monochrome:                      G2PATOS.PATCD = 0
//       (pattern monochrome color determined by G2PATBGC, G2PATFGC)
//
//     Destination color depths supported by G2 Blit:
//     ==============================================
//       1 byte per pixel:    G2CONTROLMAIN.DSTCD = BPP8
//       2 bytes per pixel:   G2CONTROLMAIN.DSTCD = BPP16
//       4 bytes per pixel:   G2CONTROLMAIN.DSTCD = BPP32
//
// (2) Alpha blending operates on 3 or 4 component pixels of a specified
//     color depth. One of the components may be alpha (A), depending on the
//     alpha blend format, which is only allowed in certain component
//     positions defined below. The only format rule of the remaining
//     components is that they must be in the same source and destination
//     position because the alpha blend engine does not support component
//     swapping. For example, valid 32BPP formats are: RGBA_8888->RGBA_8888,
//     BGRA_8888->BGRA_8888, GRBA_8888->GRBA_8888, etc.
//
//     Source formats supported by G2 alpha blend:
//     ===========================================
//       color depth BPP8:  no supported formats
//       color depth BPP16:
//          ALPTYPE_PLS1BPP: xxxA_5551 (ex: BGRA_5551 = A[15] R[14:10] G[9:5] B[4:0])
//          ALPTYPE_PLS4BPP: xxxA_4444 (ex: BGRA_4444 = A[15:12] R[11:8] G[7:4] B[3:0])
//          (other)        : xxx_565   (ex: BGR_565   = R[15:11] G[10:5] B[4:0])
//       color depth BPP32:
//          (all)          : xxxA_8888 (ex: BRGA_8888 = A[31:24] R[23:16] G[15:8] B[7:0])
//
//
//     Destination formats supported by G2 alpha blend:
//     ================================================
//       color depth BPP8:  no supported formats
//       color depth BPP16: xxx_565   (ex: BGR_565   = R[15:11] G[10:5] B[4:0])
//       color depth BPP32: xxxA_8888 (ex: BRGA_8888 = A[31:24] R[23:16] G[15:8] B[7:0])
//
//     The following table
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     | src cd  |   src format                  | dst cd  | dst format     | examples:                                  |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP8   |  no support                   |  BPP8   | no support     |                                            |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP16  | xyzA_5551, xyzA_4444, xyz_565 |  BPP16  | xyz_565        | BGRA_5551->BGR_565, RGB_565->RGB565        |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP32  | xyzA_8888                     |  BPP32  | xyzA_8888      | RGBA_8888->RGBA_8888, BGRA_8888->BGRA_8888 |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP32  | xyzA_8888                     |  BPP16  | xyz_565        | RGBA_8888->RGB_565, BGRA_8888->BGR_565     |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//
//----------------------------------------------------------
// VCAA Resolve engine
//
// (1) Format support
//
// +-----------------+--------------------+----------------------+
// | srcColor format | srcCoverage format | legal dest format(s) |
// +-----------------+--------------------+----------------------+
// |     A1B5G5R5    |        VCAA        |       A1B5G5R5       |
// +-----------------+--------------------+----------------------+
// |     R8G8B8A8    |        VCAA        |   R8G8B8A8, B5G6R5   |
// +-----------------+--------------------+----------------------+
// |      B5G6R5     |        VCAA        |         B5G6R5       |
// +-----------------+--------------------+----------------------+
//
// To program resolve type:
//   ALPTYPE == FIX:       B5G6R5   -> B5G6R5
//   ALPTYPE == PLS1BPPAL: A1B5G5R5 -> A1B5G5R5
//   ALPTYPE == PLS8BPP:   R8G8B8A8 -> R8G8B8A8
//   ALPTYPE == PLS8BX:    R8G8B8A8 -> B5G6R5
//
// (2) Color surface programming
//
//     color surface base address:  SRCBA
//       sub-surface start x:       SRCX      (pixel index)
//       sub-surface start y:       SRCY      (line index)
//     color surface stride:        SRCS      (bytes)
//
//     The engine supports sub-surface resolve.  One can imagine a full color buffer of 1024x768, but
//
//     [pseudo_code]
//       color_surface_start_address_fetch = pcurctx->regs.rG2SRCBA.uSRCBA() +
//        (pcurctx->regs.rG2SRCPS.uSRCX() * VCAAState.color_surface_depth) +
//        (pcurctx->regs.rG2SRCPS.uSRCY() * VCAAState.color_surface_stride);
//
// (3) VCAA surface programming
//
//     vcaa surface base address:   PATBA
//     vcaa surface stride:         PATST     (bytes)
//
//     [pseudo_code]
//       vcaa_surface_start_address_fetch = pcurctx->regs.rG2PATBA.uPATBA();
//
//       SW *MUST* directly program this register to the proper sub-surface location in the vcaa surface
//        which corresponds to the SRCX and SRCY programming. The calculation is
//            PATBA = vcaa_base_address + SRCX * (1) + SRCY * PATST;
//
// (4) Resolve surface programming
//
//     resolve window width:        DSTWIDTH  (pixels)
//     resolve window height:       DSTHEIGHT (lines)
//     resolve output stride:       DSTS      (bytes)
//
//  These values program the width and height of the resolved surface.  In the base case,
//   DSTWIDTH  = color surface width
//   DSTHEIGHT = color sufrace height
//   DSTS      = resolve surface format bpp * DSTWIDTH
//
//  The vcaa engine technically supports DSTX and DSTY (like its cousin SRCX and SRCY).  This was not
//  requested by the original RFE by SW during the initial design.
//
//  [pseudo_code]
//     resolve_surface_start_address_put = pcurctx->regs.rG2DSTBA.uDSTBA() +
//       (pcurctx->regs.rG2DSTPS.uDSTX() * resolve_surface_color_depth) +
//       (pcurctx->regs.rG2DSTPS.uDSTY() * resolve_surface_color_stride);
//
//
// (5) Resolving a pixel
//
//   The coverage surface is a 8 bits per pixel surface (C4X4).  The surface is initialized to all 1s by 3d.
//
//   For a given pixel, we need to look up 4 bits of coverage data.
//   If the data is 0xf, the pixel does not need to be resolved.
//   Otherwise, we need to reblend the pixel with certain weightings of its neighbors (i.e. we're on the edge of some geometry)
//
//   If any coverage bits is 0, we need to resolve the color.  To do so, we calculate the following eqn:
//   color_new = (
//                 20*color_old +
//                 27*(
//                     ((cover_down  == 0) ? color_down  : color_old) +
//                     ((cover_right == 0) ? color_right : color_old) +
//                     ((cover_left  == 0) ? color_left  : color_old) +
//                     ((cover_up    == 0) ? color_up    : color_old)
//                     )
//               ) / 128;
//
//   If coverage bit == 0, then we use the neighbor color value in the resolve
//   If coverage bit == 1, then we use the center   color value in the resolve
//
//   The resolve is done on a per channel (r/g/b/a) basis:
//     format convert input channel to 8-bit
//     perform resolve equation above
//     format convert to output format
//
//   For the resolution of the alpha channel:
//     In B5G6R5:   no alpha information.  do nothing.
//     In A1B5G5R5: no resolve.  keep the source color alpha bit.
//     In R8G8B8A8: normal 8-bit channel resolve
//
// (6) Resolving a pixel on the edge
//
//    When on an edge, the vcaa engine treats the coverage bit as a 1.  Use the center color value.
//    This holds true even on the edge of the sub-surface resolve window when located in the middle of the larger surface
//
// (7) Maximum dimensions
//
//    The maximum resolve sub-surface is 4096 pixels wide.
//
// (8) Surface restrictions
//    The VCAA engine has the following restrictions w.r.t input surfaces
//      - input base address is 128-bit memory word aligned
//      - input stride is multiple of 128-bits (16 bytes)
//    The VCAA engine has the following restrictions w.r.t output surfaces
//      - output base address is 128-bit memory word aligned
//      - output stride is multiple of 128-bits (16 bytes)
// (9) Coverage surface layout
//    The surface is C4X4.  doc/<previous projects>/3d/qrast_sides.vsd/qrast_arch.doc/qrast_vcaa.doc has a wealth of info.
//
//    Surface layout (C4X4)
//    =====================
//
//       (lsb2msb)  C0_C1_C2_C3_X_X_X_X     (X is a don't care.  Qrast inits to 1)
//       (msb2lsb)  X_X_X_X_C3_C2_C1_C0
//
//
//     +          o          o
//          C0
//             C1   Cov(0,1)
//        C2
//          C3
//     o          o          o
//
//       Cov(1,0)   Cov(1,1)
//
//     o          o          o
//
//
//     +/o = pixel centers
//
//     In the example above,
//        Cov(0,0) = X_X_X_X_C3_C2_C1_C0
//        C3       = V_C3(Cov(0,0));
//        ..         ..
//        C0       = V_C0(Cov(0,0));
//     #define V_C3(bits) (bits & 0x8)
//     #define V_C2(bits) (bits & 0x4)
//     #define V_C1(bits) (bits & 0x2)
//     #define V_C0(bits) (bits & 0x1)
//
//    Resolving a pixel
//    =================
//     In an ideal world, the coverage would be simply laid out such that when resolving Pixel(x,y), we would
//    need only to fetch Cov(x,y) to get all 4 bits of information.
//     In actuality, the coverage surface was rearranged to help qrast in performance.  To resolve Pixel(x,y)
//    gr2d has to fetch 4 C4X4 bytes [Cov(x,y), Cov(x-1,y), Cov(x,y-1), Cov(x-1,y-1)].  From each C4X4 byte, it
//    extracts one bit which is used in the resolve equations shown in (5).
//
//
//    Need the logical vcaa bits (DRLU) for blend which is spread across four C4X4 coverage bytes
//
//          U
//    L
//        o
//            R
//      D
//
//    where
//
//     o = Pixel(x,y)
//     D = V_C1(Cov(x-1,y))
//     R = V_C0(Cov(x,y))
//     L = V_C3(Cov(x-1,y-1))
//     U = V_C2(Cov(x,y-1))
//
//
// (10) Other documentation
//       cmod/g2/fsim/g2vcaa.cpp - cmodel implementation with comments
//       doc/<previous projects>/3d/qrast_sides.vsd/qrast_arch.doc/qrast_vcaa.doc
//

// Register G2SB_CTX1_G2CONTROLMAIN_0  //{host,2d,sb,index=1f}
#define G2SB_CTX1_G2CONTROLMAIN_0                       _MK_ADDR_CONST(0x401f)
#define G2SB_CTX1_G2CONTROLMAIN_0_SECURE                        0x0
#define G2SB_CTX1_G2CONTROLMAIN_0_WORD_COUNT                    0x1
#define G2SB_CTX1_G2CONTROLMAIN_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_RESET_MASK                    _MK_MASK_CONST(0x7eccffff)
#define G2SB_CTX1_G2CONTROLMAIN_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_READ_MASK                     _MK_MASK_CONST(0x7fffffff)
#define G2SB_CTX1_G2CONTROLMAIN_0_WRITE_MASK                    _MK_MASK_CONST(0x7fffffff)
// Command Type:  00=BitBlt
// 01=Line Draw
// 10=VCAA
// 11=reserved
//  When the raise command is in executing
//  (there are no other outstanding commands with same channel being executed)
#define G2SB_CTX1_G2CONTROLMAIN_0_CMDT_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2CONTROLMAIN_0_CMDT_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX1_G2CONTROLMAIN_0_CMDT_SHIFT)
#define G2SB_CTX1_G2CONTROLMAIN_0_CMDT_RANGE                    1:0
#define G2SB_CTX1_G2CONTROLMAIN_0_CMDT_WOFFSET                  0x0
#define G2SB_CTX1_G2CONTROLMAIN_0_CMDT_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_CMDT_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX1_G2CONTROLMAIN_0_CMDT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_CMDT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_CMDT_BITBLT                   _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLMAIN_0_CMDT_LINEDRAW                 _MK_ENUM_CONST(1)
#define G2SB_CTX1_G2CONTROLMAIN_0_CMDT_VCAA                     _MK_ENUM_CONST(2)
#define G2SB_CTX1_G2CONTROLMAIN_0_CMDT_RESERVED1                        _MK_ENUM_CONST(3)

//fast fill rectangle in 128bit/clock
//Some limitaions with this mode:
//srcsld==1 rop==0xcc, no clipping, no transparency
//xdir==0, ydir==0, flip==0, xytdw==0
//Results are undefined if the above limitations are not satified.
#define G2SB_CTX1_G2CONTROLMAIN_0_TURBOFILL_SHIFT                       _MK_SHIFT_CONST(2)
#define G2SB_CTX1_G2CONTROLMAIN_0_TURBOFILL_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLMAIN_0_TURBOFILL_SHIFT)
#define G2SB_CTX1_G2CONTROLMAIN_0_TURBOFILL_RANGE                       2:2
#define G2SB_CTX1_G2CONTROLMAIN_0_TURBOFILL_WOFFSET                     0x0
#define G2SB_CTX1_G2CONTROLMAIN_0_TURBOFILL_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_TURBOFILL_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLMAIN_0_TURBOFILL_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_TURBOFILL_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//Command finish timing bit 0: 2D command finishs when last data has been pushed to memory write client.
// 1: 2D command waits memory write client to be idle to finish.
#define G2SB_CTX1_G2CONTROLMAIN_0_TEST0BIT_SHIFT                        _MK_SHIFT_CONST(3)
#define G2SB_CTX1_G2CONTROLMAIN_0_TEST0BIT_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLMAIN_0_TEST0BIT_SHIFT)
#define G2SB_CTX1_G2CONTROLMAIN_0_TEST0BIT_RANGE                        3:3
#define G2SB_CTX1_G2CONTROLMAIN_0_TEST0BIT_WOFFSET                      0x0
#define G2SB_CTX1_G2CONTROLMAIN_0_TEST0BIT_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_TEST0BIT_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLMAIN_0_TEST0BIT_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_TEST0BIT_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_TEST0BIT_DISABLE                      _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLMAIN_0_TEST0BIT_ENABLE                       _MK_ENUM_CONST(1)

// BitBlt Source Copy Fade enable, 1=enable (share with mltln), only support
//  16bpp mode
#define G2SB_CTX1_G2CONTROLMAIN_0_FADEN_SHIFT                   _MK_SHIFT_CONST(4)
#define G2SB_CTX1_G2CONTROLMAIN_0_FADEN_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLMAIN_0_FADEN_SHIFT)
#define G2SB_CTX1_G2CONTROLMAIN_0_FADEN_RANGE                   4:4
#define G2SB_CTX1_G2CONTROLMAIN_0_FADEN_WOFFSET                 0x0
#define G2SB_CTX1_G2CONTROLMAIN_0_FADEN_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_FADEN_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLMAIN_0_FADEN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_FADEN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_FADEN_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLMAIN_0_FADEN_ENABLE                  _MK_ENUM_CONST(1)

// BitBlt Alpha Blending, 1=enable. 0=disable,
//when both Faden and alpen are 1, output=Source*alpha_v + fadoff,
// alpha_v is decided by alptype
#define G2SB_CTX1_G2CONTROLMAIN_0_ALPEN_SHIFT                   _MK_SHIFT_CONST(5)
#define G2SB_CTX1_G2CONTROLMAIN_0_ALPEN_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLMAIN_0_ALPEN_SHIFT)
#define G2SB_CTX1_G2CONTROLMAIN_0_ALPEN_RANGE                   5:5
#define G2SB_CTX1_G2CONTROLMAIN_0_ALPEN_WOFFSET                 0x0
#define G2SB_CTX1_G2CONTROLMAIN_0_ALPEN_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_ALPEN_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLMAIN_0_ALPEN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_ALPEN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// BitBlt Solid Source Color Fill: 1=enable. FGC will be used as
// the color value.
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCSLD_SHIFT                  _MK_SHIFT_CONST(6)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCSLD_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLMAIN_0_SRCSLD_SHIFT)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCSLD_RANGE                  6:6
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCSLD_WOFFSET                        0x0
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCSLD_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCSLD_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCSLD_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCSLD_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCSLD_DISABLE                        _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCSLD_ENABLE                 _MK_ENUM_CONST(1)

// BitBlt Solid Pattern Fill: 1=enable. BGC will be used as
// the color value.
#define G2SB_CTX1_G2CONTROLMAIN_0_PATSLD_SHIFT                  _MK_SHIFT_CONST(7)
#define G2SB_CTX1_G2CONTROLMAIN_0_PATSLD_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLMAIN_0_PATSLD_SHIFT)
#define G2SB_CTX1_G2CONTROLMAIN_0_PATSLD_RANGE                  7:7
#define G2SB_CTX1_G2CONTROLMAIN_0_PATSLD_WOFFSET                        0x0
#define G2SB_CTX1_G2CONTROLMAIN_0_PATSLD_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_PATSLD_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLMAIN_0_PATSLD_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_PATSLD_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_PATSLD_DISABLE                        _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLMAIN_0_PATSLD_ENABLE                 _MK_ENUM_CONST(1)

// When mono pattern is set, we use mono tile pattern fill.
//
//  current pattern client can support a 16x16 bit tile which can be used
//  to generate a larger surface (i.e. tile this surface in the x and y direction)
//  The tile is stored in memory.  Currently, PATXO and PATYO tell you where
//  to start in the 16x16 tile when expanding the monochrome data.
//
//  See patxo and patyo comments below for programming (hw bid 247332)
//   When xdir==1
//     Patxo = pattern width - (patxo+destination width)&0xF   -- For xoffsets
//  y offsets PATYO remains the same when xdir/ydir change.
//
//
//  How the tile replication pattern looks based on xdir/ydir (without programming patxo above):
//
//  xdir=0 ydir=0              xdir=1 ydir=0
//
//   +---+--+                  +--+---+
//   |^|^|^||                  ||^|^|^|
//   |~~~|~~|                  |~~|~~~|
//   +---+--|                  |--+---+
//   |^|^|^||                  ||^|^|^|
//   +------+                  +------+
//
//
//   +---+--+                  +--+---+
//   |^|^|^||                  ||^|^|^|
//   |~~~|~~|                  |~~|~~~|
//   +---+--|                  |--+---+
//   |^|^|^||                  ||^|^|^|
//   +------+                  +------+
//    //
//  xdir=0 ydir=1              xdir=1 ydir=1
//
//   Mono tile is
//      +---+
//      |^|^|
//      |~~~|
//      +---+
//
//
#define G2SB_CTX1_G2CONTROLMAIN_0_PATFL_SHIFT                   _MK_SHIFT_CONST(8)
#define G2SB_CTX1_G2CONTROLMAIN_0_PATFL_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLMAIN_0_PATFL_SHIFT)
#define G2SB_CTX1_G2CONTROLMAIN_0_PATFL_RANGE                   8:8
#define G2SB_CTX1_G2CONTROLMAIN_0_PATFL_WOFFSET                 0x0
#define G2SB_CTX1_G2CONTROLMAIN_0_PATFL_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_PATFL_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLMAIN_0_PATFL_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_PATFL_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_PATFL_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLMAIN_0_PATFL_ENABLE                  _MK_ENUM_CONST(1)

//  0=incrementing, 1=decrementing.
//  xdir should not be set when source surface has different color depth as destination surface.
//  e.g. ALPTYPE=PLS8BX (32bpp blending with 16bpp), xdir has to be 0
//  SRCCD==0 (mono src) OR PATCD==0 (mono pat), xdir has to be 0
#define G2SB_CTX1_G2CONTROLMAIN_0_XDIR_SHIFT                    _MK_SHIFT_CONST(9)
#define G2SB_CTX1_G2CONTROLMAIN_0_XDIR_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLMAIN_0_XDIR_SHIFT)
#define G2SB_CTX1_G2CONTROLMAIN_0_XDIR_RANGE                    9:9
#define G2SB_CTX1_G2CONTROLMAIN_0_XDIR_WOFFSET                  0x0
#define G2SB_CTX1_G2CONTROLMAIN_0_XDIR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_XDIR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLMAIN_0_XDIR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_XDIR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//  0=incrementing, 1=decrementing.
//  ydir should not be set when source surface has different color depth as destination surface.
//  SRCCD==0 (mono src) OR PATCD==0 (mono pat), ydir has to be 0
#define G2SB_CTX1_G2CONTROLMAIN_0_YDIR_SHIFT                    _MK_SHIFT_CONST(10)
#define G2SB_CTX1_G2CONTROLMAIN_0_YDIR_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLMAIN_0_YDIR_SHIFT)
#define G2SB_CTX1_G2CONTROLMAIN_0_YDIR_RANGE                    10:10
#define G2SB_CTX1_G2CONTROLMAIN_0_YDIR_WOFFSET                  0x0
#define G2SB_CTX1_G2CONTROLMAIN_0_YDIR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_YDIR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLMAIN_0_YDIR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_YDIR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// xy transpose,
// Line stride DSTS has to be 16bytes aligned if enabled.
// If XYTDW==1, ROP can not include destination.
#define G2SB_CTX1_G2CONTROLMAIN_0_XYTDW_SHIFT                   _MK_SHIFT_CONST(11)
#define G2SB_CTX1_G2CONTROLMAIN_0_XYTDW_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLMAIN_0_XYTDW_SHIFT)
#define G2SB_CTX1_G2CONTROLMAIN_0_XYTDW_RANGE                   11:11
#define G2SB_CTX1_G2CONTROLMAIN_0_XYTDW_WOFFSET                 0x0
#define G2SB_CTX1_G2CONTROLMAIN_0_XYTDW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_XYTDW_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLMAIN_0_XYTDW_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_XYTDW_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Source Data is in Pack Mode.
//  SRCLNGAP in G2SRCPACK is the line gap for source packed mode.
//  If(SRCPACK && ~SRCSEL), source data is packed and from screen, SRCMONOW/SRCMONOH
//  should be programmed properly to fetch data from
//  frame buffer.
//  Note, PACK is not offically supported when the surface is tiled.
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCPACK_SHIFT                 _MK_SHIFT_CONST(12)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCPACK_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLMAIN_0_SRCPACK_SHIFT)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCPACK_RANGE                 12:12
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCPACK_WOFFSET                       0x0
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCPACK_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCPACK_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCPACK_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCPACK_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCPACK_DISABLE                       _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCPACK_ENABLE                        _MK_ENUM_CONST(1)

// Pattern Data is in Pack Mode.
//  PATLNGAP in G2PATPACK is the line gap for pattern packed mode
//  If(PATPACK && ~PATSEl), pattern data is packed and from screen, PATMONOW/PATMONOH
//  should be programmed properly to fetch pattern data from
//  frame buffer.
//  Note, PACK is not offically supported when the surface is tiled.
#define G2SB_CTX1_G2CONTROLMAIN_0_PATPACK_SHIFT                 _MK_SHIFT_CONST(13)
#define G2SB_CTX1_G2CONTROLMAIN_0_PATPACK_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLMAIN_0_PATPACK_SHIFT)
#define G2SB_CTX1_G2CONTROLMAIN_0_PATPACK_RANGE                 13:13
#define G2SB_CTX1_G2CONTROLMAIN_0_PATPACK_WOFFSET                       0x0
#define G2SB_CTX1_G2CONTROLMAIN_0_PATPACK_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_PATPACK_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLMAIN_0_PATPACK_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_PATPACK_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_PATPACK_DISABLE                       _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLMAIN_0_PATPACK_ENABLE                        _MK_ENUM_CONST(1)

// flip y direction to make image upside down or the other way.
// If YFLIP==1, ROP can not include destination.
#define G2SB_CTX1_G2CONTROLMAIN_0_YFLIP_SHIFT                   _MK_SHIFT_CONST(14)
#define G2SB_CTX1_G2CONTROLMAIN_0_YFLIP_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLMAIN_0_YFLIP_SHIFT)
#define G2SB_CTX1_G2CONTROLMAIN_0_YFLIP_RANGE                   14:14
#define G2SB_CTX1_G2CONTROLMAIN_0_YFLIP_WOFFSET                 0x0
#define G2SB_CTX1_G2CONTROLMAIN_0_YFLIP_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_YFLIP_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLMAIN_0_YFLIP_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_YFLIP_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_YFLIP_DSIABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLMAIN_0_YFLIP_ENABLE                  _MK_ENUM_CONST(1)

// Source Data Select:
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCSEL_SHIFT                  _MK_SHIFT_CONST(15)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCSEL_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLMAIN_0_SRCSEL_SHIFT)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCSEL_RANGE                  15:15
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCSEL_WOFFSET                        0x0
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCSEL_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCSEL_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCSEL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCSEL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCSEL_SCREEN                 _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCSEL_MEMORY                 _MK_ENUM_CONST(1)

// Destination color depth:
//   00=8-bpp, 01=16-bpp, 10=32-bpp. 11=reserved
#define G2SB_CTX1_G2CONTROLMAIN_0_DSTCD_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX1_G2CONTROLMAIN_0_DSTCD_FIELD                   (_MK_MASK_CONST(0x3) << G2SB_CTX1_G2CONTROLMAIN_0_DSTCD_SHIFT)
#define G2SB_CTX1_G2CONTROLMAIN_0_DSTCD_RANGE                   17:16
#define G2SB_CTX1_G2CONTROLMAIN_0_DSTCD_WOFFSET                 0x0
#define G2SB_CTX1_G2CONTROLMAIN_0_DSTCD_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_DSTCD_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_DSTCD_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_DSTCD_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_DSTCD_BPP8                    _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLMAIN_0_DSTCD_BPP16                   _MK_ENUM_CONST(1)
#define G2SB_CTX1_G2CONTROLMAIN_0_DSTCD_BPP32                   _MK_ENUM_CONST(2)
#define G2SB_CTX1_G2CONTROLMAIN_0_DSTCD_RESERVED3                       _MK_ENUM_CONST(3)

// Destination read transparency enable:
//   0x=destination read transparency disabled
//   10=color destination read transparency
//   11=inverse color destination read transparency.
// 20 rw INIC
// Initiate Command
// (1=initiate command immediately, 0=wait for launch write)
#define G2SB_CTX1_G2CONTROLMAIN_0_DSTT_SHIFT                    _MK_SHIFT_CONST(18)
#define G2SB_CTX1_G2CONTROLMAIN_0_DSTT_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX1_G2CONTROLMAIN_0_DSTT_SHIFT)
#define G2SB_CTX1_G2CONTROLMAIN_0_DSTT_RANGE                    19:18
#define G2SB_CTX1_G2CONTROLMAIN_0_DSTT_WOFFSET                  0x0
#define G2SB_CTX1_G2CONTROLMAIN_0_DSTT_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_DSTT_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX1_G2CONTROLMAIN_0_DSTT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_DSTT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//0 Source mono
//1 Source has same color depth as destination
//  SRCCD==0 xdir/ydir has to be 0
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCCD_SHIFT                   _MK_SHIFT_CONST(20)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCCD_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLMAIN_0_SRCCD_SHIFT)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCCD_RANGE                   20:20
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCCD_WOFFSET                 0x0
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCCD_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCCD_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCCD_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCCD_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Start from Msb or lsb in byte when mono expansion
// If HLMONO is 1, bit 0 (the lsb) is the first bit
// If HLMONO is 0, bit 7 (the msb) is the first bit
#define G2SB_CTX1_G2CONTROLMAIN_0_HLMONO_SHIFT                  _MK_SHIFT_CONST(21)
#define G2SB_CTX1_G2CONTROLMAIN_0_HLMONO_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLMAIN_0_HLMONO_SHIFT)
#define G2SB_CTX1_G2CONTROLMAIN_0_HLMONO_RANGE                  21:21
#define G2SB_CTX1_G2CONTROLMAIN_0_HLMONO_WOFFSET                        0x0
#define G2SB_CTX1_G2CONTROLMAIN_0_HLMONO_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_HLMONO_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_HLMONO_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_HLMONO_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Source transparency enable: 0x=source transparency disabled,
// 10=mono source background transparency
//    or color source transparency,
// 11=mono source foreground transparency
//    or inverse color source transparency.
// NOTE: When source transparency is enabled and SRCCD==0(mono)
//       SRCBGC!=SRCFGC should be satisfied.
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCT_SHIFT                    _MK_SHIFT_CONST(22)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCT_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX1_G2CONTROLMAIN_0_SRCT_SHIFT)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCT_RANGE                    23:22
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCT_WOFFSET                  0x0
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCT_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCT_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Source base address select:
//  0=srcba, 1=dstba. This is not used for Line Draw and
// if source data comes from host memory.
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCBAS_SHIFT                  _MK_SHIFT_CONST(24)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCBAS_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLMAIN_0_SRCBAS_SHIFT)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCBAS_RANGE                  24:24
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCBAS_WOFFSET                        0x0
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCBAS_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCBAS_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCBAS_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCBAS_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//Display Switching Window Control (GCSW[1:0])
//This parameter controls multi-buffering for Display.
//x0 At end of current command, don't send signal to Display to switch buffer.
//01 two buffers, dstba and dstba_b are used
//11 three buffers, dstba, dstba_b dstba_c are used
#define G2SB_CTX1_G2CONTROLMAIN_0_GCSW_SHIFT                    _MK_SHIFT_CONST(25)
#define G2SB_CTX1_G2CONTROLMAIN_0_GCSW_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX1_G2CONTROLMAIN_0_GCSW_SHIFT)
#define G2SB_CTX1_G2CONTROLMAIN_0_GCSW_RANGE                    26:25
#define G2SB_CTX1_G2CONTROLMAIN_0_GCSW_WOFFSET                  0x0
#define G2SB_CTX1_G2CONTROLMAIN_0_GCSW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_GCSW_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX1_G2CONTROLMAIN_0_GCSW_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_GCSW_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//source direct addressing
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCDIR_SHIFT                  _MK_SHIFT_CONST(27)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCDIR_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLMAIN_0_SRCDIR_SHIFT)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCDIR_RANGE                  27:27
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCDIR_WOFFSET                        0x0
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCDIR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCDIR_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCDIR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_SRCDIR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//destination direct addressing
#define G2SB_CTX1_G2CONTROLMAIN_0_DSTDIR_SHIFT                  _MK_SHIFT_CONST(28)
#define G2SB_CTX1_G2CONTROLMAIN_0_DSTDIR_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLMAIN_0_DSTDIR_SHIFT)
#define G2SB_CTX1_G2CONTROLMAIN_0_DSTDIR_RANGE                  28:28
#define G2SB_CTX1_G2CONTROLMAIN_0_DSTDIR_WOFFSET                        0x0
#define G2SB_CTX1_G2CONTROLMAIN_0_DSTDIR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_DSTDIR_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLMAIN_0_DSTDIR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_DSTDIR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// This feature is not offically supported.
//seperate destination read/write surface address
//0: read/write use DSTBA
//1: read uses SRCBA_B, write uses DSTBA
#define G2SB_CTX1_G2CONTROLMAIN_0_DST_RD_WR_SEP_SHIFT                   _MK_SHIFT_CONST(29)
#define G2SB_CTX1_G2CONTROLMAIN_0_DST_RD_WR_SEP_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLMAIN_0_DST_RD_WR_SEP_SHIFT)
#define G2SB_CTX1_G2CONTROLMAIN_0_DST_RD_WR_SEP_RANGE                   29:29
#define G2SB_CTX1_G2CONTROLMAIN_0_DST_RD_WR_SEP_WOFFSET                 0x0
#define G2SB_CTX1_G2CONTROLMAIN_0_DST_RD_WR_SEP_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_DST_RD_WR_SEP_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLMAIN_0_DST_RD_WR_SEP_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_DST_RD_WR_SEP_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// pattern Data Select: SRCSEL and PATSEL can't be both enabled.
#define G2SB_CTX1_G2CONTROLMAIN_0_PATSEL_SHIFT                  _MK_SHIFT_CONST(30)
#define G2SB_CTX1_G2CONTROLMAIN_0_PATSEL_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CONTROLMAIN_0_PATSEL_SHIFT)
#define G2SB_CTX1_G2CONTROLMAIN_0_PATSEL_RANGE                  30:30
#define G2SB_CTX1_G2CONTROLMAIN_0_PATSEL_WOFFSET                        0x0
#define G2SB_CTX1_G2CONTROLMAIN_0_PATSEL_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_PATSEL_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CONTROLMAIN_0_PATSEL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_PATSEL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CONTROLMAIN_0_PATSEL_SCREEN                 _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CONTROLMAIN_0_PATSEL_MEMORY                 _MK_ENUM_CONST(1)


// Register G2SB_CTX1_G2ROPFADE_0  //{host,2d,index=20}
#define G2SB_CTX1_G2ROPFADE_0                   _MK_ADDR_CONST(0x4020)
#define G2SB_CTX1_G2ROPFADE_0_SECURE                    0x0
#define G2SB_CTX1_G2ROPFADE_0_WORD_COUNT                        0x1
#define G2SB_CTX1_G2ROPFADE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2ROPFADE_0_RESET_MASK                        _MK_MASK_CONST(0xff)
#define G2SB_CTX1_G2ROPFADE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2ROPFADE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2ROPFADE_0_READ_MASK                         _MK_MASK_CONST(0xffff00ff)
#define G2SB_CTX1_G2ROPFADE_0_WRITE_MASK                        _MK_MASK_CONST(0xffff00ff)
//If YFLIP==1 or XYTDW==1, ROP can not include destination.
//Since destination may have been corrupted before reading out.
#define G2SB_CTX1_G2ROPFADE_0_ROP_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2ROPFADE_0_ROP_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX1_G2ROPFADE_0_ROP_SHIFT)
#define G2SB_CTX1_G2ROPFADE_0_ROP_RANGE                 7:0
#define G2SB_CTX1_G2ROPFADE_0_ROP_WOFFSET                       0x0
#define G2SB_CTX1_G2ROPFADE_0_ROP_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2ROPFADE_0_ROP_DEFAULT_MASK                  _MK_MASK_CONST(0xff)
#define G2SB_CTX1_G2ROPFADE_0_ROP_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2ROPFADE_0_ROP_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//
#define G2SB_CTX1_G2ROPFADE_0_FADCOE_SHIFT                      _MK_SHIFT_CONST(16)
#define G2SB_CTX1_G2ROPFADE_0_FADCOE_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX1_G2ROPFADE_0_FADCOE_SHIFT)
#define G2SB_CTX1_G2ROPFADE_0_FADCOE_RANGE                      23:16
#define G2SB_CTX1_G2ROPFADE_0_FADCOE_WOFFSET                    0x0
#define G2SB_CTX1_G2ROPFADE_0_FADCOE_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2ROPFADE_0_FADCOE_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2ROPFADE_0_FADCOE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2ROPFADE_0_FADCOE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

//
#define G2SB_CTX1_G2ROPFADE_0_FADOFF_SHIFT                      _MK_SHIFT_CONST(24)
#define G2SB_CTX1_G2ROPFADE_0_FADOFF_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX1_G2ROPFADE_0_FADOFF_SHIFT)
#define G2SB_CTX1_G2ROPFADE_0_FADOFF_RANGE                      31:24
#define G2SB_CTX1_G2ROPFADE_0_FADOFF_WOFFSET                    0x0
#define G2SB_CTX1_G2ROPFADE_0_FADOFF_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2ROPFADE_0_FADOFF_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2ROPFADE_0_FADOFF_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2ROPFADE_0_FADOFF_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2ALPHABLEND_0  //{2d,index=21}
#define G2SB_CTX1_G2ALPHABLEND_0                        _MK_ADDR_CONST(0x4021)
#define G2SB_CTX1_G2ALPHABLEND_0_SECURE                         0x0
#define G2SB_CTX1_G2ALPHABLEND_0_WORD_COUNT                     0x1
#define G2SB_CTX1_G2ALPHABLEND_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2ALPHABLEND_0_RESET_MASK                     _MK_MASK_CONST(0x100)
#define G2SB_CTX1_G2ALPHABLEND_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2ALPHABLEND_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2ALPHABLEND_0_READ_MASK                      _MK_MASK_CONST(0xffff01ff)
#define G2SB_CTX1_G2ALPHABLEND_0_WRITE_MASK                     _MK_MASK_CONST(0xffff01ff)
#define G2SB_CTX1_G2ALPHABLEND_0_ALPHA_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2ALPHABLEND_0_ALPHA_FIELD                    (_MK_MASK_CONST(0xff) << G2SB_CTX1_G2ALPHABLEND_0_ALPHA_SHIFT)
#define G2SB_CTX1_G2ALPHABLEND_0_ALPHA_RANGE                    7:0
#define G2SB_CTX1_G2ALPHABLEND_0_ALPHA_WOFFSET                  0x0
#define G2SB_CTX1_G2ALPHABLEND_0_ALPHA_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2ALPHABLEND_0_ALPHA_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2ALPHABLEND_0_ALPHA_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2ALPHABLEND_0_ALPHA_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

#define G2SB_CTX1_G2ALPHABLEND_0_ALPHAINV_SHIFT                 _MK_SHIFT_CONST(8)
#define G2SB_CTX1_G2ALPHABLEND_0_ALPHAINV_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2ALPHABLEND_0_ALPHAINV_SHIFT)
#define G2SB_CTX1_G2ALPHABLEND_0_ALPHAINV_RANGE                 8:8
#define G2SB_CTX1_G2ALPHABLEND_0_ALPHAINV_WOFFSET                       0x0
#define G2SB_CTX1_G2ALPHABLEND_0_ALPHAINV_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2ALPHABLEND_0_ALPHAINV_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2ALPHABLEND_0_ALPHAINV_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2ALPHABLEND_0_ALPHAINV_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

#define G2SB_CTX1_G2ALPHABLEND_0_ALPHA0V_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX1_G2ALPHABLEND_0_ALPHA0V_FIELD                  (_MK_MASK_CONST(0xff) << G2SB_CTX1_G2ALPHABLEND_0_ALPHA0V_SHIFT)
#define G2SB_CTX1_G2ALPHABLEND_0_ALPHA0V_RANGE                  23:16
#define G2SB_CTX1_G2ALPHABLEND_0_ALPHA0V_WOFFSET                        0x0
#define G2SB_CTX1_G2ALPHABLEND_0_ALPHA0V_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2ALPHABLEND_0_ALPHA0V_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2ALPHABLEND_0_ALPHA0V_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2ALPHABLEND_0_ALPHA0V_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX1_G2ALPHABLEND_0_ALPHA1V_SHIFT                  _MK_SHIFT_CONST(24)
#define G2SB_CTX1_G2ALPHABLEND_0_ALPHA1V_FIELD                  (_MK_MASK_CONST(0xff) << G2SB_CTX1_G2ALPHABLEND_0_ALPHA1V_SHIFT)
#define G2SB_CTX1_G2ALPHABLEND_0_ALPHA1V_RANGE                  31:24
#define G2SB_CTX1_G2ALPHABLEND_0_ALPHA1V_WOFFSET                        0x0
#define G2SB_CTX1_G2ALPHABLEND_0_ALPHA1V_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2ALPHABLEND_0_ALPHA1V_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2ALPHABLEND_0_ALPHA1V_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2ALPHABLEND_0_ALPHA1V_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// ClipRect Methods
// top-left bounds are inclusive

// Register G2SB_CTX1_G2CLIPLEFTTOP_0  //{2d,index=22}
#define G2SB_CTX1_G2CLIPLEFTTOP_0                       _MK_ADDR_CONST(0x4022)
#define G2SB_CTX1_G2CLIPLEFTTOP_0_SECURE                        0x0
#define G2SB_CTX1_G2CLIPLEFTTOP_0_WORD_COUNT                    0x1
#define G2SB_CTX1_G2CLIPLEFTTOP_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLIPLEFTTOP_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLIPLEFTTOP_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLIPLEFTTOP_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLIPLEFTTOP_0_READ_MASK                     _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX1_G2CLIPLEFTTOP_0_WRITE_MASK                    _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX1_G2CLIPLEFTTOP_0_CLIPL_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2CLIPLEFTTOP_0_CLIPL_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX1_G2CLIPLEFTTOP_0_CLIPL_SHIFT)
#define G2SB_CTX1_G2CLIPLEFTTOP_0_CLIPL_RANGE                   14:0
#define G2SB_CTX1_G2CLIPLEFTTOP_0_CLIPL_WOFFSET                 0x0
#define G2SB_CTX1_G2CLIPLEFTTOP_0_CLIPL_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLIPLEFTTOP_0_CLIPL_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLIPLEFTTOP_0_CLIPL_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLIPLEFTTOP_0_CLIPL_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

#define G2SB_CTX1_G2CLIPLEFTTOP_0_CLIPT_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX1_G2CLIPLEFTTOP_0_CLIPT_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX1_G2CLIPLEFTTOP_0_CLIPT_SHIFT)
#define G2SB_CTX1_G2CLIPLEFTTOP_0_CLIPT_RANGE                   30:16
#define G2SB_CTX1_G2CLIPLEFTTOP_0_CLIPT_WOFFSET                 0x0
#define G2SB_CTX1_G2CLIPLEFTTOP_0_CLIPT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLIPLEFTTOP_0_CLIPT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLIPLEFTTOP_0_CLIPT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLIPLEFTTOP_0_CLIPT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// bottom-right bounds are exclusive

// Register G2SB_CTX1_G2CLIPRIGHTBOT_0  //{2d,index=23}
#define G2SB_CTX1_G2CLIPRIGHTBOT_0                      _MK_ADDR_CONST(0x4023)
#define G2SB_CTX1_G2CLIPRIGHTBOT_0_SECURE                       0x0
#define G2SB_CTX1_G2CLIPRIGHTBOT_0_WORD_COUNT                   0x1
#define G2SB_CTX1_G2CLIPRIGHTBOT_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLIPRIGHTBOT_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLIPRIGHTBOT_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLIPRIGHTBOT_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLIPRIGHTBOT_0_READ_MASK                    _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX1_G2CLIPRIGHTBOT_0_WRITE_MASK                   _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX1_G2CLIPRIGHTBOT_0_CLIPR_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2CLIPRIGHTBOT_0_CLIPR_FIELD                  (_MK_MASK_CONST(0x7fff) << G2SB_CTX1_G2CLIPRIGHTBOT_0_CLIPR_SHIFT)
#define G2SB_CTX1_G2CLIPRIGHTBOT_0_CLIPR_RANGE                  14:0
#define G2SB_CTX1_G2CLIPRIGHTBOT_0_CLIPR_WOFFSET                        0x0
#define G2SB_CTX1_G2CLIPRIGHTBOT_0_CLIPR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLIPRIGHTBOT_0_CLIPR_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLIPRIGHTBOT_0_CLIPR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLIPRIGHTBOT_0_CLIPR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX1_G2CLIPRIGHTBOT_0_CLIPB_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX1_G2CLIPRIGHTBOT_0_CLIPB_FIELD                  (_MK_MASK_CONST(0x7fff) << G2SB_CTX1_G2CLIPRIGHTBOT_0_CLIPB_SHIFT)
#define G2SB_CTX1_G2CLIPRIGHTBOT_0_CLIPB_RANGE                  30:16
#define G2SB_CTX1_G2CLIPRIGHTBOT_0_CLIPB_WOFFSET                        0x0
#define G2SB_CTX1_G2CLIPRIGHTBOT_0_CLIPB_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLIPRIGHTBOT_0_CLIPB_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLIPRIGHTBOT_0_CLIPB_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CLIPRIGHTBOT_0_CLIPB_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//pattern methods
// G2PATPACK should be used to specify the line gap
// use G2PATPACK_SIZE to program height and width
//  PACK is generally only useful with narrow monochrome surfaces
//  Note, PACK is not offically supported when the surface is tiled.

// Register G2SB_CTX1_G2PATPACK_0  //{2d,index=24} Pattern packed mode
#define G2SB_CTX1_G2PATPACK_0                   _MK_ADDR_CONST(0x4024)
#define G2SB_CTX1_G2PATPACK_0_SECURE                    0x0
#define G2SB_CTX1_G2PATPACK_0_WORD_COUNT                        0x1
#define G2SB_CTX1_G2PATPACK_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATPACK_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATPACK_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATPACK_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATPACK_0_READ_MASK                         _MK_MASK_CONST(0xf)
#define G2SB_CTX1_G2PATPACK_0_WRITE_MASK                        _MK_MASK_CONST(0xf)
// Packed mode, pattern data line gap. byte
#define G2SB_CTX1_G2PATPACK_0_PATLNGAP_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2PATPACK_0_PATLNGAP_FIELD                    (_MK_MASK_CONST(0xf) << G2SB_CTX1_G2PATPACK_0_PATLNGAP_SHIFT)
#define G2SB_CTX1_G2PATPACK_0_PATLNGAP_RANGE                    3:0
#define G2SB_CTX1_G2PATPACK_0_PATLNGAP_WOFFSET                  0x0
#define G2SB_CTX1_G2PATPACK_0_PATLNGAP_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATPACK_0_PATLNGAP_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATPACK_0_PATLNGAP_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATPACK_0_PATLNGAP_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// G2PATPACK_SIZE -- extension of G2PATPACK, this register only holds the size of the packed data
//  Note, PACK is not offically supported when the surface is tiled.

// Register G2SB_CTX1_G2PATPACK_SIZE_0  //{2d,index=25} Pattern packed mode
// Packed mode, pattern data line gap. byte
#define G2SB_CTX1_G2PATPACK_SIZE_0                      _MK_ADDR_CONST(0x4025)
#define G2SB_CTX1_G2PATPACK_SIZE_0_SECURE                       0x0
#define G2SB_CTX1_G2PATPACK_SIZE_0_WORD_COUNT                   0x1
#define G2SB_CTX1_G2PATPACK_SIZE_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATPACK_SIZE_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATPACK_SIZE_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATPACK_SIZE_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATPACK_SIZE_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2PATPACK_SIZE_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
// Mono data width in packed mode, byte
#define G2SB_CTX1_G2PATPACK_SIZE_0_PATMONOW_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2PATPACK_SIZE_0_PATMONOW_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_CTX1_G2PATPACK_SIZE_0_PATMONOW_SHIFT)
#define G2SB_CTX1_G2PATPACK_SIZE_0_PATMONOW_RANGE                       15:0
#define G2SB_CTX1_G2PATPACK_SIZE_0_PATMONOW_WOFFSET                     0x0
#define G2SB_CTX1_G2PATPACK_SIZE_0_PATMONOW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATPACK_SIZE_0_PATMONOW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATPACK_SIZE_0_PATMONOW_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATPACK_SIZE_0_PATMONOW_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//  Pattern mono data height in packed mode, byte
#define G2SB_CTX1_G2PATPACK_SIZE_0_PATMONOH_SHIFT                       _MK_SHIFT_CONST(16)
#define G2SB_CTX1_G2PATPACK_SIZE_0_PATMONOH_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_CTX1_G2PATPACK_SIZE_0_PATMONOH_SHIFT)
#define G2SB_CTX1_G2PATPACK_SIZE_0_PATMONOH_RANGE                       31:16
#define G2SB_CTX1_G2PATPACK_SIZE_0_PATMONOH_WOFFSET                     0x0
#define G2SB_CTX1_G2PATPACK_SIZE_0_PATMONOH_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATPACK_SIZE_0_PATMONOH_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATPACK_SIZE_0_PATMONOH_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATPACK_SIZE_0_PATMONOH_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2PATBA_0  //{2d,index=26}
#define G2SB_CTX1_G2PATBA_0                     _MK_ADDR_CONST(0x4026)
#define G2SB_CTX1_G2PATBA_0_SECURE                      0x0
#define G2SB_CTX1_G2PATBA_0_WORD_COUNT                  0x1
#define G2SB_CTX1_G2PATBA_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATBA_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATBA_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATBA_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATBA_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2PATBA_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// If(PATFL==1){
//   It has to be 16bytes aligned.
// }else{
//   Point to the first byte of the first pixel of pattern plane.
// }
#define G2SB_CTX1_G2PATBA_0_PATBA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2PATBA_0_PATBA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX1_G2PATBA_0_PATBA_SHIFT)
#define G2SB_CTX1_G2PATBA_0_PATBA_RANGE                 31:0
#define G2SB_CTX1_G2PATBA_0_PATBA_WOFFSET                       0x0
#define G2SB_CTX1_G2PATBA_0_PATBA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATBA_0_PATBA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATBA_0_PATBA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATBA_0_PATBA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2PATOS_0  //{2d,index=27}
#define G2SB_CTX1_G2PATOS_0                     _MK_ADDR_CONST(0x4027)
#define G2SB_CTX1_G2PATOS_0_SECURE                      0x0
#define G2SB_CTX1_G2PATOS_0_WORD_COUNT                  0x1
#define G2SB_CTX1_G2PATOS_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATOS_0_RESET_MASK                  _MK_MASK_CONST(0x600000)
#define G2SB_CTX1_G2PATOS_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATOS_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATOS_0_READ_MASK                   _MK_MASK_CONST(0xff61ffff)
#define G2SB_CTX1_G2PATOS_0_WRITE_MASK                  _MK_MASK_CONST(0xff61ffff)
//stride
#define G2SB_CTX1_G2PATOS_0_PATST_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2PATOS_0_PATST_FIELD                 (_MK_MASK_CONST(0xffff) << G2SB_CTX1_G2PATOS_0_PATST_SHIFT)
#define G2SB_CTX1_G2PATOS_0_PATST_RANGE                 15:0
#define G2SB_CTX1_G2PATOS_0_PATST_WOFFSET                       0x0
#define G2SB_CTX1_G2PATOS_0_PATST_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATOS_0_PATST_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATOS_0_PATST_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATOS_0_PATST_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//0 mono
//1 same as dstcd
//  PATCD==0 xdir/ydir has to be 0
#define G2SB_CTX1_G2PATOS_0_PATCD_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_CTX1_G2PATOS_0_PATCD_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2PATOS_0_PATCD_SHIFT)
#define G2SB_CTX1_G2PATOS_0_PATCD_RANGE                 16:16
#define G2SB_CTX1_G2PATOS_0_PATCD_WOFFSET                       0x0
#define G2SB_CTX1_G2PATOS_0_PATCD_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATOS_0_PATCD_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATOS_0_PATCD_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATOS_0_PATCD_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Mono pattern transparency enable:
// 0x=pattern transparency disabled,
// 10=mono pattern background transparency
//   or color pattern transparency,
// 11=mono pattern foreground transparency
//   or inverse color pattern transparency.
// NOTE: When pattern transparency is enabled and PATCD==0(mono)
//       PATBGC!=PATFGC should be satisfied.
#define G2SB_CTX1_G2PATOS_0_PATT_SHIFT                  _MK_SHIFT_CONST(21)
#define G2SB_CTX1_G2PATOS_0_PATT_FIELD                  (_MK_MASK_CONST(0x3) << G2SB_CTX1_G2PATOS_0_PATT_SHIFT)
#define G2SB_CTX1_G2PATOS_0_PATT_RANGE                  22:21
#define G2SB_CTX1_G2PATOS_0_PATT_WOFFSET                        0x0
#define G2SB_CTX1_G2PATOS_0_PATT_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATOS_0_PATT_DEFAULT_MASK                   _MK_MASK_CONST(0x3)
#define G2SB_CTX1_G2PATOS_0_PATT_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATOS_0_PATT_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//x offset for mono tile pattern fill.  see PATFL
#define G2SB_CTX1_G2PATOS_0_PATXO_SHIFT                 _MK_SHIFT_CONST(24)
#define G2SB_CTX1_G2PATOS_0_PATXO_FIELD                 (_MK_MASK_CONST(0xf) << G2SB_CTX1_G2PATOS_0_PATXO_SHIFT)
#define G2SB_CTX1_G2PATOS_0_PATXO_RANGE                 27:24
#define G2SB_CTX1_G2PATOS_0_PATXO_WOFFSET                       0x0
#define G2SB_CTX1_G2PATOS_0_PATXO_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATOS_0_PATXO_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATOS_0_PATXO_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATOS_0_PATXO_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//y offset for mono tile pattern fill.  see PATFL
#define G2SB_CTX1_G2PATOS_0_PATYO_SHIFT                 _MK_SHIFT_CONST(28)
#define G2SB_CTX1_G2PATOS_0_PATYO_FIELD                 (_MK_MASK_CONST(0xf) << G2SB_CTX1_G2PATOS_0_PATYO_SHIFT)
#define G2SB_CTX1_G2PATOS_0_PATYO_RANGE                 31:28
#define G2SB_CTX1_G2PATOS_0_PATYO_WOFFSET                       0x0
#define G2SB_CTX1_G2PATOS_0_PATYO_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATOS_0_PATYO_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATOS_0_PATYO_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATOS_0_PATYO_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2PATBGC_0  //{2d,index=28}
#define G2SB_CTX1_G2PATBGC_0                    _MK_ADDR_CONST(0x4028)
#define G2SB_CTX1_G2PATBGC_0_SECURE                     0x0
#define G2SB_CTX1_G2PATBGC_0_WORD_COUNT                         0x1
#define G2SB_CTX1_G2PATBGC_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATBGC_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATBGC_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATBGC_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATBGC_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2PATBGC_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2PATBGC_0_PATBGC_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2PATBGC_0_PATBGC_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX1_G2PATBGC_0_PATBGC_SHIFT)
#define G2SB_CTX1_G2PATBGC_0_PATBGC_RANGE                       31:0
#define G2SB_CTX1_G2PATBGC_0_PATBGC_WOFFSET                     0x0
#define G2SB_CTX1_G2PATBGC_0_PATBGC_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATBGC_0_PATBGC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATBGC_0_PATBGC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATBGC_0_PATBGC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2PATFGC_0  //{2d,index=29}
#define G2SB_CTX1_G2PATFGC_0                    _MK_ADDR_CONST(0x4029)
#define G2SB_CTX1_G2PATFGC_0_SECURE                     0x0
#define G2SB_CTX1_G2PATFGC_0_WORD_COUNT                         0x1
#define G2SB_CTX1_G2PATFGC_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATFGC_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATFGC_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATFGC_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATFGC_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2PATFGC_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2PATFGC_0_PATFGC_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2PATFGC_0_PATFGC_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX1_G2PATFGC_0_PATFGC_SHIFT)
#define G2SB_CTX1_G2PATFGC_0_PATFGC_RANGE                       31:0
#define G2SB_CTX1_G2PATFGC_0_PATFGC_WOFFSET                     0x0
#define G2SB_CTX1_G2PATFGC_0_PATFGC_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATFGC_0_PATFGC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATFGC_0_PATFGC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATFGC_0_PATFGC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2PATKEY_0  //{2d,index=2a}
#define G2SB_CTX1_G2PATKEY_0                    _MK_ADDR_CONST(0x402a)
#define G2SB_CTX1_G2PATKEY_0_SECURE                     0x0
#define G2SB_CTX1_G2PATKEY_0_WORD_COUNT                         0x1
#define G2SB_CTX1_G2PATKEY_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATKEY_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATKEY_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATKEY_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATKEY_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2PATKEY_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2PATKEY_0_PATKEY_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2PATKEY_0_PATKEY_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX1_G2PATKEY_0_PATKEY_SHIFT)
#define G2SB_CTX1_G2PATKEY_0_PATKEY_RANGE                       31:0
#define G2SB_CTX1_G2PATKEY_0_PATKEY_WOFFSET                     0x0
#define G2SB_CTX1_G2PATKEY_0_PATKEY_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATKEY_0_PATKEY_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATKEY_0_PATKEY_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATKEY_0_PATKEY_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2DSTBA_0  //{host,2d,sb,index=2b}
#define G2SB_CTX1_G2DSTBA_0                     _MK_ADDR_CONST(0x402b)
#define G2SB_CTX1_G2DSTBA_0_SECURE                      0x0
#define G2SB_CTX1_G2DSTBA_0_WORD_COUNT                  0x1
#define G2SB_CTX1_G2DSTBA_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2DSTBA_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Destination base address (byte address)
#define G2SB_CTX1_G2DSTBA_0_DSTBA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2DSTBA_0_DSTBA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX1_G2DSTBA_0_DSTBA_SHIFT)
#define G2SB_CTX1_G2DSTBA_0_DSTBA_RANGE                 31:0
#define G2SB_CTX1_G2DSTBA_0_DSTBA_WOFFSET                       0x0
#define G2SB_CTX1_G2DSTBA_0_DSTBA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_0_DSTBA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_0_DSTBA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_0_DSTBA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2DSTBA_B_0  //{host,2d,sb,index=2c}
#define G2SB_CTX1_G2DSTBA_B_0                   _MK_ADDR_CONST(0x402c)
#define G2SB_CTX1_G2DSTBA_B_0_SECURE                    0x0
#define G2SB_CTX1_G2DSTBA_B_0_WORD_COUNT                        0x1
#define G2SB_CTX1_G2DSTBA_B_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_B_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_B_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_B_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_B_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2DSTBA_B_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// Destination base address (byte address)
// only usable in hardware trigger mode by enable gcsw
#define G2SB_CTX1_G2DSTBA_B_0_DSTBA_B_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2DSTBA_B_0_DSTBA_B_FIELD                     (_MK_MASK_CONST(0xffffffff) << G2SB_CTX1_G2DSTBA_B_0_DSTBA_B_SHIFT)
#define G2SB_CTX1_G2DSTBA_B_0_DSTBA_B_RANGE                     31:0
#define G2SB_CTX1_G2DSTBA_B_0_DSTBA_B_WOFFSET                   0x0
#define G2SB_CTX1_G2DSTBA_B_0_DSTBA_B_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_B_0_DSTBA_B_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_B_0_DSTBA_B_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_B_0_DSTBA_B_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2DSTBA_C_0  //{2d,sb,index=2d}
#define G2SB_CTX1_G2DSTBA_C_0                   _MK_ADDR_CONST(0x402d)
#define G2SB_CTX1_G2DSTBA_C_0_SECURE                    0x0
#define G2SB_CTX1_G2DSTBA_C_0_WORD_COUNT                        0x1
#define G2SB_CTX1_G2DSTBA_C_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_C_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_C_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_C_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_C_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2DSTBA_C_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// Destination base address (byte address)
#define G2SB_CTX1_G2DSTBA_C_0_DSTBA_C_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2DSTBA_C_0_DSTBA_C_FIELD                     (_MK_MASK_CONST(0xffffffff) << G2SB_CTX1_G2DSTBA_C_0_DSTBA_C_SHIFT)
#define G2SB_CTX1_G2DSTBA_C_0_DSTBA_C_RANGE                     31:0
#define G2SB_CTX1_G2DSTBA_C_0_DSTBA_C_WOFFSET                   0x0
#define G2SB_CTX1_G2DSTBA_C_0_DSTBA_C_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_C_0_DSTBA_C_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_C_0_DSTBA_C_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_C_0_DSTBA_C_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2DSTST_0  //{host,2d,sb,sbm,index=2e}
#define G2SB_CTX1_G2DSTST_0                     _MK_ADDR_CONST(0x402e)
#define G2SB_CTX1_G2DSTST_0_SECURE                      0x0
#define G2SB_CTX1_G2DSTST_0_WORD_COUNT                  0x1
#define G2SB_CTX1_G2DSTST_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTST_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTST_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTST_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTST_0_READ_MASK                   _MK_MASK_CONST(0xffff)
#define G2SB_CTX1_G2DSTST_0_WRITE_MASK                  _MK_MASK_CONST(0xffff)
// Destination Stride coordinate(bytes) with respect to DSTBA.
#define G2SB_CTX1_G2DSTST_0_DSTS_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2DSTST_0_DSTS_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX1_G2DSTST_0_DSTS_SHIFT)
#define G2SB_CTX1_G2DSTST_0_DSTS_RANGE                  15:0
#define G2SB_CTX1_G2DSTST_0_DSTS_WOFFSET                        0x0
#define G2SB_CTX1_G2DSTST_0_DSTS_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTST_0_DSTS_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTST_0_DSTS_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTST_0_DSTS_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Surface methods
// G2SRCPACK should only be used to specify the line gap
// use G2SRCPACK_SIZE to program height and width

// Register G2SB_CTX1_G2SRCPACK_0  //{2d,index=2f} source data packed mode
#define G2SB_CTX1_G2SRCPACK_0                   _MK_ADDR_CONST(0x402f)
#define G2SB_CTX1_G2SRCPACK_0_SECURE                    0x0
#define G2SB_CTX1_G2SRCPACK_0_WORD_COUNT                        0x1
#define G2SB_CTX1_G2SRCPACK_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCPACK_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCPACK_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCPACK_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCPACK_0_READ_MASK                         _MK_MASK_CONST(0xf)
#define G2SB_CTX1_G2SRCPACK_0_WRITE_MASK                        _MK_MASK_CONST(0xf)
// Packed mode - source mono data line gap
#define G2SB_CTX1_G2SRCPACK_0_SRCLNGAP_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2SRCPACK_0_SRCLNGAP_FIELD                    (_MK_MASK_CONST(0xf) << G2SB_CTX1_G2SRCPACK_0_SRCLNGAP_SHIFT)
#define G2SB_CTX1_G2SRCPACK_0_SRCLNGAP_RANGE                    3:0
#define G2SB_CTX1_G2SRCPACK_0_SRCLNGAP_WOFFSET                  0x0
#define G2SB_CTX1_G2SRCPACK_0_SRCLNGAP_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCPACK_0_SRCLNGAP_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCPACK_0_SRCLNGAP_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCPACK_0_SRCLNGAP_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// G2SRCPACKS_SIZE -- extension of G2SRCPACK, this register only holds the size of the packed data

// Register G2SB_CTX1_G2SRCPACK_SIZE_0  //{2d,index=30} source data packed mode
// In packed mode, SRCMONOW holds the horizontal size (bytes).
// If MONOH > 1, it is required width/stride be 16 byte aligned.
// Packed mode - source mono data line gap
#define G2SB_CTX1_G2SRCPACK_SIZE_0                      _MK_ADDR_CONST(0x4030)
#define G2SB_CTX1_G2SRCPACK_SIZE_0_SECURE                       0x0
#define G2SB_CTX1_G2SRCPACK_SIZE_0_WORD_COUNT                   0x1
#define G2SB_CTX1_G2SRCPACK_SIZE_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCPACK_SIZE_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCPACK_SIZE_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCPACK_SIZE_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCPACK_SIZE_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2SRCPACK_SIZE_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
// Packed mode - source mono data width in bytes
#define G2SB_CTX1_G2SRCPACK_SIZE_0_SRCMONOW_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2SRCPACK_SIZE_0_SRCMONOW_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_CTX1_G2SRCPACK_SIZE_0_SRCMONOW_SHIFT)
#define G2SB_CTX1_G2SRCPACK_SIZE_0_SRCMONOW_RANGE                       15:0
#define G2SB_CTX1_G2SRCPACK_SIZE_0_SRCMONOW_WOFFSET                     0x0
#define G2SB_CTX1_G2SRCPACK_SIZE_0_SRCMONOW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCPACK_SIZE_0_SRCMONOW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCPACK_SIZE_0_SRCMONOW_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCPACK_SIZE_0_SRCMONOW_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Packed mode - source mono data height in bytes
#define G2SB_CTX1_G2SRCPACK_SIZE_0_SRCMONOH_SHIFT                       _MK_SHIFT_CONST(16)
#define G2SB_CTX1_G2SRCPACK_SIZE_0_SRCMONOH_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_CTX1_G2SRCPACK_SIZE_0_SRCMONOH_SHIFT)
#define G2SB_CTX1_G2SRCPACK_SIZE_0_SRCMONOH_RANGE                       31:16
#define G2SB_CTX1_G2SRCPACK_SIZE_0_SRCMONOH_WOFFSET                     0x0
#define G2SB_CTX1_G2SRCPACK_SIZE_0_SRCMONOH_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCPACK_SIZE_0_SRCMONOH_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCPACK_SIZE_0_SRCMONOH_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCPACK_SIZE_0_SRCMONOH_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2SRCBA_0  //{host,2d,sb,index=31}
//src base address
#define G2SB_CTX1_G2SRCBA_0                     _MK_ADDR_CONST(0x4031)
#define G2SB_CTX1_G2SRCBA_0_SECURE                      0x0
#define G2SB_CTX1_G2SRCBA_0_WORD_COUNT                  0x1
#define G2SB_CTX1_G2SRCBA_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCBA_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCBA_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCBA_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCBA_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2SRCBA_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Source base address (byte address)
#define G2SB_CTX1_G2SRCBA_0_SRCBA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2SRCBA_0_SRCBA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX1_G2SRCBA_0_SRCBA_SHIFT)
#define G2SB_CTX1_G2SRCBA_0_SRCBA_RANGE                 31:0
#define G2SB_CTX1_G2SRCBA_0_SRCBA_WOFFSET                       0x0
#define G2SB_CTX1_G2SRCBA_0_SRCBA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCBA_0_SRCBA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCBA_0_SRCBA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCBA_0_SRCBA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2SRCBA_B_0  //{2d,sb,index=32}
//SB only
#define G2SB_CTX1_G2SRCBA_B_0                   _MK_ADDR_CONST(0x4032)
#define G2SB_CTX1_G2SRCBA_B_0_SECURE                    0x0
#define G2SB_CTX1_G2SRCBA_B_0_WORD_COUNT                        0x1
#define G2SB_CTX1_G2SRCBA_B_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCBA_B_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCBA_B_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCBA_B_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCBA_B_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2SRCBA_B_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
//This parameter specifies the start address of source image
// stored in the image buffer memory. In 4:2:0
//format mode, this image block accommodates for Y-image.
//This address specifies byte-position, however, bits [2:0]
// are restricted with respect to the data formats to fit
//multiple pixels in one memory word (8 bytes),. For example,
// {0, 4} for any YcrCb formats, {0, 2, 4, 6} for
//RGB 16-bit format.  Since one Y pixel takes 8-bit, all
// 8 byte-positions are valid in 4:2:0 mode. (Unlike
//multiplexed pixels format, there is no restrictions on this value.)
#define G2SB_CTX1_G2SRCBA_B_0_SRCBA_B_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2SRCBA_B_0_SRCBA_B_FIELD                     (_MK_MASK_CONST(0xffffffff) << G2SB_CTX1_G2SRCBA_B_0_SRCBA_B_SHIFT)
#define G2SB_CTX1_G2SRCBA_B_0_SRCBA_B_RANGE                     31:0
#define G2SB_CTX1_G2SRCBA_B_0_SRCBA_B_WOFFSET                   0x0
#define G2SB_CTX1_G2SRCBA_B_0_SRCBA_B_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCBA_B_0_SRCBA_B_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCBA_B_0_SRCBA_B_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCBA_B_0_SRCBA_B_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2SRCST_0  //{host,2d,sb,sbm,index=33}
#define G2SB_CTX1_G2SRCST_0                     _MK_ADDR_CONST(0x4033)
#define G2SB_CTX1_G2SRCST_0_SECURE                      0x0
#define G2SB_CTX1_G2SRCST_0_WORD_COUNT                  0x1
#define G2SB_CTX1_G2SRCST_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCST_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCST_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCST_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCST_0_READ_MASK                   _MK_MASK_CONST(0xffff)
#define G2SB_CTX1_G2SRCST_0_WRITE_MASK                  _MK_MASK_CONST(0xffff)
// Source Stride coordinate(bytes) with respect to SRCBA.
//In order to fit multiple pixels in one memory word (8 bytes),
//  bits [2:0] are restricted with respect to the
//data formats. For example, {0, 4} for any YcrCb formats,
//  {0, 2, 4, 6} for RGB 16-bit format.
#define G2SB_CTX1_G2SRCST_0_SRCS_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2SRCST_0_SRCS_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX1_G2SRCST_0_SRCS_SHIFT)
#define G2SB_CTX1_G2SRCST_0_SRCS_RANGE                  15:0
#define G2SB_CTX1_G2SRCST_0_SRCS_WOFFSET                        0x0
#define G2SB_CTX1_G2SRCST_0_SRCS_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCST_0_SRCS_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCST_0_SRCS_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCST_0_SRCS_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//srcColors

// Register G2SB_CTX1_G2SRCBGC_0  //{2d,index=34}
#define G2SB_CTX1_G2SRCBGC_0                    _MK_ADDR_CONST(0x4034)
#define G2SB_CTX1_G2SRCBGC_0_SECURE                     0x0
#define G2SB_CTX1_G2SRCBGC_0_WORD_COUNT                         0x1
#define G2SB_CTX1_G2SRCBGC_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCBGC_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCBGC_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCBGC_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCBGC_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2SRCBGC_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2SRCBGC_0_SRCBGC_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2SRCBGC_0_SRCBGC_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX1_G2SRCBGC_0_SRCBGC_SHIFT)
#define G2SB_CTX1_G2SRCBGC_0_SRCBGC_RANGE                       31:0
#define G2SB_CTX1_G2SRCBGC_0_SRCBGC_WOFFSET                     0x0
#define G2SB_CTX1_G2SRCBGC_0_SRCBGC_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCBGC_0_SRCBGC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCBGC_0_SRCBGC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCBGC_0_SRCBGC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2SRCFGC_0  //{host,2d,index=35}
#define G2SB_CTX1_G2SRCFGC_0                    _MK_ADDR_CONST(0x4035)
#define G2SB_CTX1_G2SRCFGC_0_SECURE                     0x0
#define G2SB_CTX1_G2SRCFGC_0_WORD_COUNT                         0x1
#define G2SB_CTX1_G2SRCFGC_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCFGC_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCFGC_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCFGC_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCFGC_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2SRCFGC_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2SRCFGC_0_SRCFGC_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2SRCFGC_0_SRCFGC_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX1_G2SRCFGC_0_SRCFGC_SHIFT)
#define G2SB_CTX1_G2SRCFGC_0_SRCFGC_RANGE                       31:0
#define G2SB_CTX1_G2SRCFGC_0_SRCFGC_WOFFSET                     0x0
#define G2SB_CTX1_G2SRCFGC_0_SRCFGC_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCFGC_0_SRCFGC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCFGC_0_SRCFGC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCFGC_0_SRCFGC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2SRCKEY_0  //{2d,index=36}
#define G2SB_CTX1_G2SRCKEY_0                    _MK_ADDR_CONST(0x4036)
#define G2SB_CTX1_G2SRCKEY_0_SECURE                     0x0
#define G2SB_CTX1_G2SRCKEY_0_WORD_COUNT                         0x1
#define G2SB_CTX1_G2SRCKEY_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCKEY_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCKEY_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCKEY_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCKEY_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2SRCKEY_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2SRCKEY_0_SRCKEY_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2SRCKEY_0_SRCKEY_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX1_G2SRCKEY_0_SRCKEY_SHIFT)
#define G2SB_CTX1_G2SRCKEY_0_SRCKEY_RANGE                       31:0
#define G2SB_CTX1_G2SRCKEY_0_SRCKEY_WOFFSET                     0x0
#define G2SB_CTX1_G2SRCKEY_0_SRCKEY_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCKEY_0_SRCKEY_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCKEY_0_SRCKEY_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCKEY_0_SRCKEY_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// for sc15, SRCWIDTH bit 14 must be set to 0. (limit of 16383 pixels)

// Register G2SB_CTX1_G2SRCSIZE_0  //{host,2d,sb,sbm,index=37}
#define G2SB_CTX1_G2SRCSIZE_0                   _MK_ADDR_CONST(0x4037)
#define G2SB_CTX1_G2SRCSIZE_0_SECURE                    0x0
#define G2SB_CTX1_G2SRCSIZE_0_WORD_COUNT                        0x1
#define G2SB_CTX1_G2SRCSIZE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCSIZE_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCSIZE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCSIZE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCSIZE_0_READ_MASK                         _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX1_G2SRCSIZE_0_WRITE_MASK                        _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX1_G2SRCSIZE_0_SRCWIDTH_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2SRCSIZE_0_SRCWIDTH_FIELD                    (_MK_MASK_CONST(0x7fff) << G2SB_CTX1_G2SRCSIZE_0_SRCWIDTH_SHIFT)
#define G2SB_CTX1_G2SRCSIZE_0_SRCWIDTH_RANGE                    14:0
#define G2SB_CTX1_G2SRCSIZE_0_SRCWIDTH_WOFFSET                  0x0
#define G2SB_CTX1_G2SRCSIZE_0_SRCWIDTH_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCSIZE_0_SRCWIDTH_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCSIZE_0_SRCWIDTH_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCSIZE_0_SRCWIDTH_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// In SB mode, number of lines - 1
// In 2D mode, actual lines
#define G2SB_CTX1_G2SRCSIZE_0_SRCHEIGHT_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX1_G2SRCSIZE_0_SRCHEIGHT_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX1_G2SRCSIZE_0_SRCHEIGHT_SHIFT)
#define G2SB_CTX1_G2SRCSIZE_0_SRCHEIGHT_RANGE                   30:16
#define G2SB_CTX1_G2SRCSIZE_0_SRCHEIGHT_WOFFSET                 0x0
#define G2SB_CTX1_G2SRCSIZE_0_SRCHEIGHT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCSIZE_0_SRCHEIGHT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCSIZE_0_SRCHEIGHT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCSIZE_0_SRCHEIGHT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2DSTSIZE_0  //{host,2d,sb,sbm,index=38}
#define G2SB_CTX1_G2DSTSIZE_0                   _MK_ADDR_CONST(0x4038)
#define G2SB_CTX1_G2DSTSIZE_0_SECURE                    0x0
#define G2SB_CTX1_G2DSTSIZE_0_WORD_COUNT                        0x1
#define G2SB_CTX1_G2DSTSIZE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTSIZE_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTSIZE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTSIZE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTSIZE_0_READ_MASK                         _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX1_G2DSTSIZE_0_WRITE_MASK                        _MK_MASK_CONST(0x7fff7fff)
// In 2D mode, the largest number can be programmed is 0x7fef
#define G2SB_CTX1_G2DSTSIZE_0_DSTWIDTH_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2DSTSIZE_0_DSTWIDTH_FIELD                    (_MK_MASK_CONST(0x7fff) << G2SB_CTX1_G2DSTSIZE_0_DSTWIDTH_SHIFT)
#define G2SB_CTX1_G2DSTSIZE_0_DSTWIDTH_RANGE                    14:0
#define G2SB_CTX1_G2DSTSIZE_0_DSTWIDTH_WOFFSET                  0x0
#define G2SB_CTX1_G2DSTSIZE_0_DSTWIDTH_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTSIZE_0_DSTWIDTH_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTSIZE_0_DSTWIDTH_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTSIZE_0_DSTWIDTH_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// In SB mode, number of lines - 1
// In 2D mode, actual lines
#define G2SB_CTX1_G2DSTSIZE_0_DSTHEIGHT_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX1_G2DSTSIZE_0_DSTHEIGHT_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX1_G2DSTSIZE_0_DSTHEIGHT_SHIFT)
#define G2SB_CTX1_G2DSTSIZE_0_DSTHEIGHT_RANGE                   30:16
#define G2SB_CTX1_G2DSTSIZE_0_DSTHEIGHT_WOFFSET                 0x0
#define G2SB_CTX1_G2DSTSIZE_0_DSTHEIGHT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTSIZE_0_DSTHEIGHT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTSIZE_0_DSTHEIGHT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTSIZE_0_DSTHEIGHT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// ImageBlit Methods

// Register G2SB_CTX1_G2SRCPS_0  //{host,2d,index=39}
#define G2SB_CTX1_G2SRCPS_0                     _MK_ADDR_CONST(0x4039)
#define G2SB_CTX1_G2SRCPS_0_SECURE                      0x0
#define G2SB_CTX1_G2SRCPS_0_WORD_COUNT                  0x1
#define G2SB_CTX1_G2SRCPS_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCPS_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCPS_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCPS_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCPS_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2SRCPS_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
//SRCX[2:0] are ignored in SRCCD==0 (mono expansion),
//The first bit of the first byte (bit7 if HLMONO==0, or bit0 if HLMONO==1) always
//expand to DSTX,DSTY
#define G2SB_CTX1_G2SRCPS_0_SRCX_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2SRCPS_0_SRCX_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX1_G2SRCPS_0_SRCX_SHIFT)
#define G2SB_CTX1_G2SRCPS_0_SRCX_RANGE                  15:0
#define G2SB_CTX1_G2SRCPS_0_SRCX_WOFFSET                        0x0
#define G2SB_CTX1_G2SRCPS_0_SRCX_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCPS_0_SRCX_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCPS_0_SRCX_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCPS_0_SRCX_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX1_G2SRCPS_0_SRCY_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX1_G2SRCPS_0_SRCY_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX1_G2SRCPS_0_SRCY_SHIFT)
#define G2SB_CTX1_G2SRCPS_0_SRCY_RANGE                  31:16
#define G2SB_CTX1_G2SRCPS_0_SRCY_WOFFSET                        0x0
#define G2SB_CTX1_G2SRCPS_0_SRCY_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCPS_0_SRCY_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCPS_0_SRCY_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCPS_0_SRCY_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2DSTPS_0  //{host,2d,index=3a}
#define G2SB_CTX1_G2DSTPS_0                     _MK_ADDR_CONST(0x403a)
#define G2SB_CTX1_G2DSTPS_0_SECURE                      0x0
#define G2SB_CTX1_G2DSTPS_0_WORD_COUNT                  0x1
#define G2SB_CTX1_G2DSTPS_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTPS_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTPS_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTPS_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTPS_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2DSTPS_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// NOTE: when ALPTYPE is PL1BPP, DSTX[2:0] must be zero, see bug 344489
// NOTE: when ALPTYPE is PL2BPP, DSTX[1:0] must be zero, see bug 344489
// NOTE: when ALPTYPE is PL4BPP, DSTX[0:0] must be zero, see bug 344489
#define G2SB_CTX1_G2DSTPS_0_DSTX_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2DSTPS_0_DSTX_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX1_G2DSTPS_0_DSTX_SHIFT)
#define G2SB_CTX1_G2DSTPS_0_DSTX_RANGE                  15:0
#define G2SB_CTX1_G2DSTPS_0_DSTX_WOFFSET                        0x0
#define G2SB_CTX1_G2DSTPS_0_DSTX_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTPS_0_DSTX_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTPS_0_DSTX_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTPS_0_DSTX_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX1_G2DSTPS_0_DSTY_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX1_G2DSTPS_0_DSTY_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX1_G2DSTPS_0_DSTY_SHIFT)
#define G2SB_CTX1_G2DSTPS_0_DSTY_RANGE                  31:16
#define G2SB_CTX1_G2DSTPS_0_DSTY_WOFFSET                        0x0
#define G2SB_CTX1_G2DSTPS_0_DSTY_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTPS_0_DSTY_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTPS_0_DSTY_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTPS_0_DSTY_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// circular buffer

// Register G2SB_CTX1_G2CBDES_0  // {host,2d,sb,index=3b}
#define G2SB_CTX1_G2CBDES_0                     _MK_ADDR_CONST(0x403b)
#define G2SB_CTX1_G2CBDES_0_SECURE                      0x0
#define G2SB_CTX1_G2CBDES_0_WORD_COUNT                  0x1
#define G2SB_CTX1_G2CBDES_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBDES_0_RESET_MASK                  _MK_MASK_CONST(0x80000000)
#define G2SB_CTX1_G2CBDES_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBDES_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBDES_0_READ_MASK                   _MK_MASK_CONST(0xffff00ff)
#define G2SB_CTX1_G2CBDES_0_WRITE_MASK                  _MK_MASK_CONST(0xffff00ff)
// This specifies the number of buffers in
//circular buffer feature
#define G2SB_CTX1_G2CBDES_0_CBCOUNT_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2CBDES_0_CBCOUNT_FIELD                       (_MK_MASK_CONST(0xff) << G2SB_CTX1_G2CBDES_0_CBCOUNT_SHIFT)
#define G2SB_CTX1_G2CBDES_0_CBCOUNT_RANGE                       7:0
#define G2SB_CTX1_G2CBDES_0_CBCOUNT_WOFFSET                     0x0
#define G2SB_CTX1_G2CBDES_0_CBCOUNT_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBDES_0_CBCOUNT_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBDES_0_CBCOUNT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBDES_0_CBCOUNT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//vertical line number in one buffer
#define G2SB_CTX1_G2CBDES_0_CBLINE_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_CTX1_G2CBDES_0_CBLINE_FIELD                        (_MK_MASK_CONST(0x7fff) << G2SB_CTX1_G2CBDES_0_CBLINE_SHIFT)
#define G2SB_CTX1_G2CBDES_0_CBLINE_RANGE                        30:16
#define G2SB_CTX1_G2CBDES_0_CBLINE_WOFFSET                      0x0
#define G2SB_CTX1_G2CBDES_0_CBLINE_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBDES_0_CBLINE_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBDES_0_CBLINE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBDES_0_CBLINE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

//top clipping at the first buffer, (buffer start)
// refer to TOP_CBLINE in G2CBDES2 0= disable
#define G2SB_CTX1_G2CBDES_0_TOPCLIP_SHIFT                       _MK_SHIFT_CONST(31)
#define G2SB_CTX1_G2CBDES_0_TOPCLIP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2CBDES_0_TOPCLIP_SHIFT)
#define G2SB_CTX1_G2CBDES_0_TOPCLIP_RANGE                       31:31
#define G2SB_CTX1_G2CBDES_0_TOPCLIP_WOFFSET                     0x0
#define G2SB_CTX1_G2CBDES_0_TOPCLIP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBDES_0_TOPCLIP_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2CBDES_0_TOPCLIP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBDES_0_TOPCLIP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBDES_0_TOPCLIP_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CBDES_0_TOPCLIP_ENABLE                      _MK_ENUM_CONST(1)


// Register G2SB_CTX1_G2CBSTRIDE_0  // {host,2d,sb,index=3c}
#define G2SB_CTX1_G2CBSTRIDE_0                  _MK_ADDR_CONST(0x403c)
#define G2SB_CTX1_G2CBSTRIDE_0_SECURE                   0x0
#define G2SB_CTX1_G2CBSTRIDE_0_WORD_COUNT                       0x1
#define G2SB_CTX1_G2CBSTRIDE_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBSTRIDE_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBSTRIDE_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBSTRIDE_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBSTRIDE_0_READ_MASK                        _MK_MASK_CONST(0xc0ffffff)
#define G2SB_CTX1_G2CBSTRIDE_0_WRITE_MASK                       _MK_MASK_CONST(0xc0ffffff)
// Video Buffer Luma(or RGB) Buffer Stride
//  This is luma buffer stride (in bytes)
#define G2SB_CTX1_G2CBSTRIDE_0_CBSTRIDE_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2CBSTRIDE_0_CBSTRIDE_FIELD                   (_MK_MASK_CONST(0xffffff) << G2SB_CTX1_G2CBSTRIDE_0_CBSTRIDE_SHIFT)
#define G2SB_CTX1_G2CBSTRIDE_0_CBSTRIDE_RANGE                   23:0
#define G2SB_CTX1_G2CBSTRIDE_0_CBSTRIDE_WOFFSET                 0x0
#define G2SB_CTX1_G2CBSTRIDE_0_CBSTRIDE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBSTRIDE_0_CBSTRIDE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBSTRIDE_0_CBSTRIDE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBSTRIDE_0_CBSTRIDE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Chroma Buffer Stride default is half of luma
//   00= 1/2 of Luma Buffer Stride; in this
//       case, Luma Buffer Stride should be
//       multiple of 2 bytes.
//   01= Equal to Luma Buffer Stride
//   10= 1/4 of Luma Buffer Stride; in this
//       case, Luma Buffer Stride should be
//       multiple of 4 bytes.
//   1x= Reserved
#define G2SB_CTX1_G2CBSTRIDE_0_CBUVSTRIDE_SHIFT                 _MK_SHIFT_CONST(30)
#define G2SB_CTX1_G2CBSTRIDE_0_CBUVSTRIDE_FIELD                 (_MK_MASK_CONST(0x3) << G2SB_CTX1_G2CBSTRIDE_0_CBUVSTRIDE_SHIFT)
#define G2SB_CTX1_G2CBSTRIDE_0_CBUVSTRIDE_RANGE                 31:30
#define G2SB_CTX1_G2CBSTRIDE_0_CBUVSTRIDE_WOFFSET                       0x0
#define G2SB_CTX1_G2CBSTRIDE_0_CBUVSTRIDE_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBSTRIDE_0_CBUVSTRIDE_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBSTRIDE_0_CBUVSTRIDE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBSTRIDE_0_CBUVSTRIDE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBSTRIDE_0_CBUVSTRIDE_CBS2X                 _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2CBSTRIDE_0_CBUVSTRIDE_CBS1X                 _MK_ENUM_CONST(1)
#define G2SB_CTX1_G2CBSTRIDE_0_CBUVSTRIDE_CBS4X                 _MK_ENUM_CONST(2)

//Line Methods

// Register G2SB_CTX1_G2LINESETTING_0  //{2d,index=3d}
#define G2SB_CTX1_G2LINESETTING_0                       _MK_ADDR_CONST(0x403d)
#define G2SB_CTX1_G2LINESETTING_0_SECURE                        0x0
#define G2SB_CTX1_G2LINESETTING_0_WORD_COUNT                    0x1
#define G2SB_CTX1_G2LINESETTING_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINESETTING_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINESETTING_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINESETTING_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINESETTING_0_READ_MASK                     _MK_MASK_CONST(0xff1fffff)
#define G2SB_CTX1_G2LINESETTING_0_WRITE_MASK                    _MK_MASK_CONST(0xff1fffff)
#define G2SB_CTX1_G2LINESETTING_0_GAMMA_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2LINESETTING_0_GAMMA_FIELD                   (_MK_MASK_CONST(0x1fffff) << G2SB_CTX1_G2LINESETTING_0_GAMMA_SHIFT)
#define G2SB_CTX1_G2LINESETTING_0_GAMMA_RANGE                   20:0
#define G2SB_CTX1_G2LINESETTING_0_GAMMA_WOFFSET                 0x0
#define G2SB_CTX1_G2LINESETTING_0_GAMMA_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINESETTING_0_GAMMA_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINESETTING_0_GAMMA_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINESETTING_0_GAMMA_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

//0:xmajor 1: y major
#define G2SB_CTX1_G2LINESETTING_0_MAJOR_SHIFT                   _MK_SHIFT_CONST(24)
#define G2SB_CTX1_G2LINESETTING_0_MAJOR_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2LINESETTING_0_MAJOR_SHIFT)
#define G2SB_CTX1_G2LINESETTING_0_MAJOR_RANGE                   24:24
#define G2SB_CTX1_G2LINESETTING_0_MAJOR_WOFFSET                 0x0
#define G2SB_CTX1_G2LINESETTING_0_MAJOR_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINESETTING_0_MAJOR_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINESETTING_0_MAJOR_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINESETTING_0_MAJOR_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINESETTING_0_MAJOR_XMAJOR                  _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2LINESETTING_0_MAJOR_YMAJOR                  _MK_ENUM_CONST(1)

#define G2SB_CTX1_G2LINESETTING_0_LINEXDIR_SHIFT                        _MK_SHIFT_CONST(25)
#define G2SB_CTX1_G2LINESETTING_0_LINEXDIR_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2LINESETTING_0_LINEXDIR_SHIFT)
#define G2SB_CTX1_G2LINESETTING_0_LINEXDIR_RANGE                        25:25
#define G2SB_CTX1_G2LINESETTING_0_LINEXDIR_WOFFSET                      0x0
#define G2SB_CTX1_G2LINESETTING_0_LINEXDIR_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINESETTING_0_LINEXDIR_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINESETTING_0_LINEXDIR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINESETTING_0_LINEXDIR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

#define G2SB_CTX1_G2LINESETTING_0_LINEYDIR_SHIFT                        _MK_SHIFT_CONST(26)
#define G2SB_CTX1_G2LINESETTING_0_LINEYDIR_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2LINESETTING_0_LINEYDIR_SHIFT)
#define G2SB_CTX1_G2LINESETTING_0_LINEYDIR_RANGE                        26:26
#define G2SB_CTX1_G2LINESETTING_0_LINEYDIR_WOFFSET                      0x0
#define G2SB_CTX1_G2LINESETTING_0_LINEYDIR_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINESETTING_0_LINEYDIR_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINESETTING_0_LINEYDIR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINESETTING_0_LINEYDIR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

//draw last pixel or not
#define G2SB_CTX1_G2LINESETTING_0_DROPLASTP_SHIFT                       _MK_SHIFT_CONST(27)
#define G2SB_CTX1_G2LINESETTING_0_DROPLASTP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2LINESETTING_0_DROPLASTP_SHIFT)
#define G2SB_CTX1_G2LINESETTING_0_DROPLASTP_RANGE                       27:27
#define G2SB_CTX1_G2LINESETTING_0_DROPLASTP_WOFFSET                     0x0
#define G2SB_CTX1_G2LINESETTING_0_DROPLASTP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINESETTING_0_DROPLASTP_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINESETTING_0_DROPLASTP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINESETTING_0_DROPLASTP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//use OCTANTS in G2LINEDELTAN register instead of MAJOR LINEXDIR LINEYDIR
#define G2SB_CTX1_G2LINESETTING_0_LINEUSEOCTANT_SHIFT                   _MK_SHIFT_CONST(28)
#define G2SB_CTX1_G2LINESETTING_0_LINEUSEOCTANT_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2LINESETTING_0_LINEUSEOCTANT_SHIFT)
#define G2SB_CTX1_G2LINESETTING_0_LINEUSEOCTANT_RANGE                   28:28
#define G2SB_CTX1_G2LINESETTING_0_LINEUSEOCTANT_WOFFSET                 0x0
#define G2SB_CTX1_G2LINESETTING_0_LINEUSEOCTANT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINESETTING_0_LINEUSEOCTANT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINESETTING_0_LINEUSEOCTANT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINESETTING_0_LINEUSEOCTANT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

//000 octant 0
//001 octant 1
//010 octant 2
//011 octant 3
//100 octant 4
//101 octant 5
//110 octant 6
//111 octant 7
#define G2SB_CTX1_G2LINESETTING_0_OCTANTS_SHIFT                 _MK_SHIFT_CONST(29)
#define G2SB_CTX1_G2LINESETTING_0_OCTANTS_FIELD                 (_MK_MASK_CONST(0x7) << G2SB_CTX1_G2LINESETTING_0_OCTANTS_SHIFT)
#define G2SB_CTX1_G2LINESETTING_0_OCTANTS_RANGE                 31:29
#define G2SB_CTX1_G2LINESETTING_0_OCTANTS_WOFFSET                       0x0
#define G2SB_CTX1_G2LINESETTING_0_OCTANTS_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINESETTING_0_OCTANTS_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINESETTING_0_OCTANTS_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINESETTING_0_OCTANTS_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//
//
//
//   |    |    |
//    | 5 | 6 |
//     |  |  |
//    4 | | | 7
//       |||
//   ----------->
//       |||
//    3 | | | 0
//     |  |  |
//    | 2 | 1 |
//   |    |    |
//        V
//

// Register G2SB_CTX1_G2LINEDELTAN_0  //{2d,index=3e}
#define G2SB_CTX1_G2LINEDELTAN_0                        _MK_ADDR_CONST(0x403e)
#define G2SB_CTX1_G2LINEDELTAN_0_SECURE                         0x0
#define G2SB_CTX1_G2LINEDELTAN_0_WORD_COUNT                     0x1
#define G2SB_CTX1_G2LINEDELTAN_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINEDELTAN_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINEDELTAN_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINEDELTAN_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINEDELTAN_0_READ_MASK                      _MK_MASK_CONST(0x1fffff)
#define G2SB_CTX1_G2LINEDELTAN_0_WRITE_MASK                     _MK_MASK_CONST(0x1fffff)
#define G2SB_CTX1_G2LINEDELTAN_0_DELTAN_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2LINEDELTAN_0_DELTAN_FIELD                   (_MK_MASK_CONST(0x1fffff) << G2SB_CTX1_G2LINEDELTAN_0_DELTAN_SHIFT)
#define G2SB_CTX1_G2LINEDELTAN_0_DELTAN_RANGE                   20:0
#define G2SB_CTX1_G2LINEDELTAN_0_DELTAN_WOFFSET                 0x0
#define G2SB_CTX1_G2LINEDELTAN_0_DELTAN_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINEDELTAN_0_DELTAN_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINEDELTAN_0_DELTAN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINEDELTAN_0_DELTAN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2LINEDELTAM_0  //{2d,index=3f}
#define G2SB_CTX1_G2LINEDELTAM_0                        _MK_ADDR_CONST(0x403f)
#define G2SB_CTX1_G2LINEDELTAM_0_SECURE                         0x0
#define G2SB_CTX1_G2LINEDELTAM_0_WORD_COUNT                     0x1
#define G2SB_CTX1_G2LINEDELTAM_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINEDELTAM_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINEDELTAM_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINEDELTAM_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINEDELTAM_0_READ_MASK                      _MK_MASK_CONST(0x1fffff)
#define G2SB_CTX1_G2LINEDELTAM_0_WRITE_MASK                     _MK_MASK_CONST(0x1fffff)
#define G2SB_CTX1_G2LINEDELTAM_0_DELTAM_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2LINEDELTAM_0_DELTAM_FIELD                   (_MK_MASK_CONST(0x1fffff) << G2SB_CTX1_G2LINEDELTAM_0_DELTAM_SHIFT)
#define G2SB_CTX1_G2LINEDELTAM_0_DELTAM_RANGE                   20:0
#define G2SB_CTX1_G2LINEDELTAM_0_DELTAM_WOFFSET                 0x0
#define G2SB_CTX1_G2LINEDELTAM_0_DELTAM_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINEDELTAM_0_DELTAM_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINEDELTAM_0_DELTAM_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINEDELTAM_0_DELTAM_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2LINEPOS_0  //{2d,index=40}
#define G2SB_CTX1_G2LINEPOS_0                   _MK_ADDR_CONST(0x4040)
#define G2SB_CTX1_G2LINEPOS_0_SECURE                    0x0
#define G2SB_CTX1_G2LINEPOS_0_WORD_COUNT                        0x1
#define G2SB_CTX1_G2LINEPOS_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINEPOS_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINEPOS_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINEPOS_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINEPOS_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2LINEPOS_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2LINEPOS_0_LINEXPOS_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2LINEPOS_0_LINEXPOS_FIELD                    (_MK_MASK_CONST(0xffff) << G2SB_CTX1_G2LINEPOS_0_LINEXPOS_SHIFT)
#define G2SB_CTX1_G2LINEPOS_0_LINEXPOS_RANGE                    15:0
#define G2SB_CTX1_G2LINEPOS_0_LINEXPOS_WOFFSET                  0x0
#define G2SB_CTX1_G2LINEPOS_0_LINEXPOS_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINEPOS_0_LINEXPOS_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINEPOS_0_LINEXPOS_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINEPOS_0_LINEXPOS_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

#define G2SB_CTX1_G2LINEPOS_0_LINEYPOS_SHIFT                    _MK_SHIFT_CONST(16)
#define G2SB_CTX1_G2LINEPOS_0_LINEYPOS_FIELD                    (_MK_MASK_CONST(0xffff) << G2SB_CTX1_G2LINEPOS_0_LINEYPOS_SHIFT)
#define G2SB_CTX1_G2LINEPOS_0_LINEYPOS_RANGE                    31:16
#define G2SB_CTX1_G2LINEPOS_0_LINEYPOS_WOFFSET                  0x0
#define G2SB_CTX1_G2LINEPOS_0_LINEYPOS_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINEPOS_0_LINEYPOS_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINEPOS_0_LINEYPOS_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINEPOS_0_LINEYPOS_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2LINELEN_0  //{2d,index=41}
#define G2SB_CTX1_G2LINELEN_0                   _MK_ADDR_CONST(0x4041)
#define G2SB_CTX1_G2LINELEN_0_SECURE                    0x0
#define G2SB_CTX1_G2LINELEN_0_WORD_COUNT                        0x1
#define G2SB_CTX1_G2LINELEN_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINELEN_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINELEN_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINELEN_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINELEN_0_READ_MASK                         _MK_MASK_CONST(0x7fff)
#define G2SB_CTX1_G2LINELEN_0_WRITE_MASK                        _MK_MASK_CONST(0x7fff)
#define G2SB_CTX1_G2LINELEN_0_LINELEN_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2LINELEN_0_LINELEN_FIELD                     (_MK_MASK_CONST(0x7fff) << G2SB_CTX1_G2LINELEN_0_LINELEN_SHIFT)
#define G2SB_CTX1_G2LINELEN_0_LINELEN_RANGE                     14:0
#define G2SB_CTX1_G2LINELEN_0_LINELEN_WOFFSET                   0x0
#define G2SB_CTX1_G2LINELEN_0_LINELEN_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINELEN_0_LINELEN_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINELEN_0_LINELEN_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2LINELEN_0_LINELEN_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2CSCFOURTH_0  //{sb,sbm,index=42}
#define G2SB_CTX1_G2CSCFOURTH_0                 _MK_ADDR_CONST(0x4042)
#define G2SB_CTX1_G2CSCFOURTH_0_SECURE                  0x0
#define G2SB_CTX1_G2CSCFOURTH_0_WORD_COUNT                      0x1
#define G2SB_CTX1_G2CSCFOURTH_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCFOURTH_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCFOURTH_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCFOURTH_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCFOURTH_0_READ_MASK                       _MK_MASK_CONST(0x1ff01ff)
#define G2SB_CTX1_G2CSCFOURTH_0_WRITE_MASK                      _MK_MASK_CONST(0x1ff01ff)
// multiplier for G for U generation.
//This parameter consists of a sign bit and 8-bit magnitude (s1.7)
// For RGB->YUV the recommended value is -0.291 (decimal) or 0x125
// For any other combination this parameter is ignored
#define G2SB_CTX1_G2CSCFOURTH_0_G2U_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2CSCFOURTH_0_G2U_FIELD                       (_MK_MASK_CONST(0x1ff) << G2SB_CTX1_G2CSCFOURTH_0_G2U_SHIFT)
#define G2SB_CTX1_G2CSCFOURTH_0_G2U_RANGE                       8:0
#define G2SB_CTX1_G2CSCFOURTH_0_G2U_WOFFSET                     0x0
#define G2SB_CTX1_G2CSCFOURTH_0_G2U_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCFOURTH_0_G2U_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCFOURTH_0_G2U_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCFOURTH_0_G2U_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// multiplier for G for V generation.
//This parameter consists of a sign bit and 8-bit magnitude (s1.7)
// For RGB->YUV the recommended value is -0.368 (decimal) or 0x12F
// For any other combination this parameter is ignored
#define G2SB_CTX1_G2CSCFOURTH_0_G2V_SHIFT                       _MK_SHIFT_CONST(16)
#define G2SB_CTX1_G2CSCFOURTH_0_G2V_FIELD                       (_MK_MASK_CONST(0x1ff) << G2SB_CTX1_G2CSCFOURTH_0_G2V_SHIFT)
#define G2SB_CTX1_G2CSCFOURTH_0_G2V_RANGE                       24:16
#define G2SB_CTX1_G2CSCFOURTH_0_G2V_WOFFSET                     0x0
#define G2SB_CTX1_G2CSCFOURTH_0_G2V_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCFOURTH_0_G2V_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCFOURTH_0_G2V_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CSCFOURTH_0_G2V_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2SRCST_B_0  //{2d,index=43}
#define G2SB_CTX1_G2SRCST_B_0                   _MK_ADDR_CONST(0x4043)
#define G2SB_CTX1_G2SRCST_B_0_SECURE                    0x0
#define G2SB_CTX1_G2SRCST_B_0_WORD_COUNT                        0x1
#define G2SB_CTX1_G2SRCST_B_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCST_B_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCST_B_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCST_B_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCST_B_0_READ_MASK                         _MK_MASK_CONST(0xffff)
#define G2SB_CTX1_G2SRCST_B_0_WRITE_MASK                        _MK_MASK_CONST(0xffff)
// Source Stride B
#define G2SB_CTX1_G2SRCST_B_0_SRCS_B_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2SRCST_B_0_SRCS_B_FIELD                      (_MK_MASK_CONST(0xffff) << G2SB_CTX1_G2SRCST_B_0_SRCS_B_SHIFT)
#define G2SB_CTX1_G2SRCST_B_0_SRCS_B_RANGE                      15:0
#define G2SB_CTX1_G2SRCST_B_0_SRCS_B_WOFFSET                    0x0
#define G2SB_CTX1_G2SRCST_B_0_SRCS_B_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCST_B_0_SRCS_B_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCST_B_0_SRCS_B_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCST_B_0_SRCS_B_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2UVSTRIDE_0  //{2d,sb,index=44}
#define G2SB_CTX1_G2UVSTRIDE_0                  _MK_ADDR_CONST(0x4044)
#define G2SB_CTX1_G2UVSTRIDE_0_SECURE                   0x0
#define G2SB_CTX1_G2UVSTRIDE_0_WORD_COUNT                       0x1
#define G2SB_CTX1_G2UVSTRIDE_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2UVSTRIDE_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2UVSTRIDE_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2UVSTRIDE_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2UVSTRIDE_0_READ_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX1_G2UVSTRIDE_0_WRITE_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX1_G2UVSTRIDE_0_UVSTRIDE_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2UVSTRIDE_0_UVSTRIDE_FIELD                   (_MK_MASK_CONST(0xffff) << G2SB_CTX1_G2UVSTRIDE_0_UVSTRIDE_SHIFT)
#define G2SB_CTX1_G2UVSTRIDE_0_UVSTRIDE_RANGE                   15:0
#define G2SB_CTX1_G2UVSTRIDE_0_UVSTRIDE_WOFFSET                 0x0
#define G2SB_CTX1_G2UVSTRIDE_0_UVSTRIDE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2UVSTRIDE_0_UVSTRIDE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2UVSTRIDE_0_UVSTRIDE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2UVSTRIDE_0_UVSTRIDE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// circular buffer controller 2

// Register G2SB_CTX1_G2CBDES2_0  // {host,2d,sb,index=45}
#define G2SB_CTX1_G2CBDES2_0                    _MK_ADDR_CONST(0x4045)
#define G2SB_CTX1_G2CBDES2_0_SECURE                     0x0
#define G2SB_CTX1_G2CBDES2_0_WORD_COUNT                         0x1
#define G2SB_CTX1_G2CBDES2_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBDES2_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBDES2_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBDES2_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBDES2_0_READ_MASK                  _MK_MASK_CONST(0x7fff)
#define G2SB_CTX1_G2CBDES2_0_WRITE_MASK                         _MK_MASK_CONST(0x7fff)
// Circular buffer top clipping enabled, the first buffer line num
#define G2SB_CTX1_G2CBDES2_0_TOP_CBLINE_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2CBDES2_0_TOP_CBLINE_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX1_G2CBDES2_0_TOP_CBLINE_SHIFT)
#define G2SB_CTX1_G2CBDES2_0_TOP_CBLINE_RANGE                   14:0
#define G2SB_CTX1_G2CBDES2_0_TOP_CBLINE_WOFFSET                 0x0
#define G2SB_CTX1_G2CBDES2_0_TOP_CBLINE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBDES2_0_TOP_CBLINE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBDES2_0_TOP_CBLINE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2CBDES2_0_TOP_CBLINE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2TILEMODE_0  //{host,2d,sb,index=46}
#define G2SB_CTX1_G2TILEMODE_0                  _MK_ADDR_CONST(0x4046)
#define G2SB_CTX1_G2TILEMODE_0_SECURE                   0x0
#define G2SB_CTX1_G2TILEMODE_0_WORD_COUNT                       0x1
#define G2SB_CTX1_G2TILEMODE_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TILEMODE_0_RESET_MASK                       _MK_MASK_CONST(0x111111)
#define G2SB_CTX1_G2TILEMODE_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TILEMODE_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TILEMODE_0_READ_MASK                        _MK_MASK_CONST(0x111111)
#define G2SB_CTX1_G2TILEMODE_0_WRITE_MASK                       _MK_MASK_CONST(0x111111)
//Y or RGB surface
#define G2SB_CTX1_G2TILEMODE_0_SRC_Y_TILE_MODE_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2TILEMODE_0_SRC_Y_TILE_MODE_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2TILEMODE_0_SRC_Y_TILE_MODE_SHIFT)
#define G2SB_CTX1_G2TILEMODE_0_SRC_Y_TILE_MODE_RANGE                    0:0
#define G2SB_CTX1_G2TILEMODE_0_SRC_Y_TILE_MODE_WOFFSET                  0x0
#define G2SB_CTX1_G2TILEMODE_0_SRC_Y_TILE_MODE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TILEMODE_0_SRC_Y_TILE_MODE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2TILEMODE_0_SRC_Y_TILE_MODE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TILEMODE_0_SRC_Y_TILE_MODE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TILEMODE_0_SRC_Y_TILE_MODE_LINEAR                   _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2TILEMODE_0_SRC_Y_TILE_MODE_TILED                    _MK_ENUM_CONST(1)

//UV surface, ignored in RGB mode
#define G2SB_CTX1_G2TILEMODE_0_SRC_UV_TILE_MODE_SHIFT                   _MK_SHIFT_CONST(4)
#define G2SB_CTX1_G2TILEMODE_0_SRC_UV_TILE_MODE_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2TILEMODE_0_SRC_UV_TILE_MODE_SHIFT)
#define G2SB_CTX1_G2TILEMODE_0_SRC_UV_TILE_MODE_RANGE                   4:4
#define G2SB_CTX1_G2TILEMODE_0_SRC_UV_TILE_MODE_WOFFSET                 0x0
#define G2SB_CTX1_G2TILEMODE_0_SRC_UV_TILE_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TILEMODE_0_SRC_UV_TILE_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2TILEMODE_0_SRC_UV_TILE_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TILEMODE_0_SRC_UV_TILE_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TILEMODE_0_SRC_UV_TILE_MODE_LINEAR                  _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2TILEMODE_0_SRC_UV_TILE_MODE_TILED                   _MK_ENUM_CONST(1)

//Y or RGB surface
#define G2SB_CTX1_G2TILEMODE_0_PAT_Y_TILE_MODE_SHIFT                    _MK_SHIFT_CONST(8)
#define G2SB_CTX1_G2TILEMODE_0_PAT_Y_TILE_MODE_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2TILEMODE_0_PAT_Y_TILE_MODE_SHIFT)
#define G2SB_CTX1_G2TILEMODE_0_PAT_Y_TILE_MODE_RANGE                    8:8
#define G2SB_CTX1_G2TILEMODE_0_PAT_Y_TILE_MODE_WOFFSET                  0x0
#define G2SB_CTX1_G2TILEMODE_0_PAT_Y_TILE_MODE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TILEMODE_0_PAT_Y_TILE_MODE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2TILEMODE_0_PAT_Y_TILE_MODE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TILEMODE_0_PAT_Y_TILE_MODE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TILEMODE_0_PAT_Y_TILE_MODE_LINEAR                   _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2TILEMODE_0_PAT_Y_TILE_MODE_TILED                    _MK_ENUM_CONST(1)

//UNUSED
#define G2SB_CTX1_G2TILEMODE_0_PAT_UV_TILE_MODE_SHIFT                   _MK_SHIFT_CONST(12)
#define G2SB_CTX1_G2TILEMODE_0_PAT_UV_TILE_MODE_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2TILEMODE_0_PAT_UV_TILE_MODE_SHIFT)
#define G2SB_CTX1_G2TILEMODE_0_PAT_UV_TILE_MODE_RANGE                   12:12
#define G2SB_CTX1_G2TILEMODE_0_PAT_UV_TILE_MODE_WOFFSET                 0x0
#define G2SB_CTX1_G2TILEMODE_0_PAT_UV_TILE_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TILEMODE_0_PAT_UV_TILE_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2TILEMODE_0_PAT_UV_TILE_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TILEMODE_0_PAT_UV_TILE_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TILEMODE_0_PAT_UV_TILE_MODE_LINEAR                  _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2TILEMODE_0_PAT_UV_TILE_MODE_TILED                   _MK_ENUM_CONST(1)

//Same as destination write unless DST_RD_WR_SEP (not supported)
#define G2SB_CTX1_G2TILEMODE_0_DST_RD_TILE_MODE_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX1_G2TILEMODE_0_DST_RD_TILE_MODE_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2TILEMODE_0_DST_RD_TILE_MODE_SHIFT)
#define G2SB_CTX1_G2TILEMODE_0_DST_RD_TILE_MODE_RANGE                   16:16
#define G2SB_CTX1_G2TILEMODE_0_DST_RD_TILE_MODE_WOFFSET                 0x0
#define G2SB_CTX1_G2TILEMODE_0_DST_RD_TILE_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TILEMODE_0_DST_RD_TILE_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2TILEMODE_0_DST_RD_TILE_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TILEMODE_0_DST_RD_TILE_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TILEMODE_0_DST_RD_TILE_MODE_LINEAR                  _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2TILEMODE_0_DST_RD_TILE_MODE_TILED                   _MK_ENUM_CONST(1)

//destination surface
#define G2SB_CTX1_G2TILEMODE_0_DST_WR_TILE_MODE_SHIFT                   _MK_SHIFT_CONST(20)
#define G2SB_CTX1_G2TILEMODE_0_DST_WR_TILE_MODE_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX1_G2TILEMODE_0_DST_WR_TILE_MODE_SHIFT)
#define G2SB_CTX1_G2TILEMODE_0_DST_WR_TILE_MODE_RANGE                   20:20
#define G2SB_CTX1_G2TILEMODE_0_DST_WR_TILE_MODE_WOFFSET                 0x0
#define G2SB_CTX1_G2TILEMODE_0_DST_WR_TILE_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TILEMODE_0_DST_WR_TILE_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX1_G2TILEMODE_0_DST_WR_TILE_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TILEMODE_0_DST_WR_TILE_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2TILEMODE_0_DST_WR_TILE_MODE_LINEAR                  _MK_ENUM_CONST(0)
#define G2SB_CTX1_G2TILEMODE_0_DST_WR_TILE_MODE_TILED                   _MK_ENUM_CONST(1)


// Register G2SB_CTX1_G2PATBASE_0  //{2d,index=47}
#define G2SB_CTX1_G2PATBASE_0                   _MK_ADDR_CONST(0x4047)
#define G2SB_CTX1_G2PATBASE_0_SECURE                    0x0
#define G2SB_CTX1_G2PATBASE_0_WORD_COUNT                        0x1
#define G2SB_CTX1_G2PATBASE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATBASE_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATBASE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATBASE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATBASE_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2PATBASE_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
//pattern base address in tile mode,
// PATBA is the linear address where pixel start
#define G2SB_CTX1_G2PATBASE_0_PAT_BASE_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2PATBASE_0_PAT_BASE_FIELD                    (_MK_MASK_CONST(0xffffffff) << G2SB_CTX1_G2PATBASE_0_PAT_BASE_SHIFT)
#define G2SB_CTX1_G2PATBASE_0_PAT_BASE_RANGE                    31:0
#define G2SB_CTX1_G2PATBASE_0_PAT_BASE_WOFFSET                  0x0
#define G2SB_CTX1_G2PATBASE_0_PAT_BASE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATBASE_0_PAT_BASE_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATBASE_0_PAT_BASE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2PATBASE_0_PAT_BASE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// SB_SURFBASE registers
//    These registers need only be programmed when using SB.  They point to the base
//        of the various source and destination surfaces.  Technically they are only needed when
//        tiling is enabled, but there is no harm in always programming them.
//    Their counterpart registers (<reg>_SB_SURFBASE with SB_SURFBASE stripped off) indicate the
//        location of the first pixel  to be sourced or written within the surface.
//
//    This register exists to mimic the X, Y (SRCX, SRCY) functionality found in the BitBlt engine.
//
//    For example, to get at pixel X, Y:
//        SRCBA = SRCBA_SB_SURFBASE + Y*stride + X*Bpp

// Register G2SB_CTX1_G2SRCBA_SB_SURFBASE_0
#define G2SB_CTX1_G2SRCBA_SB_SURFBASE_0                 _MK_ADDR_CONST(0x4048)
#define G2SB_CTX1_G2SRCBA_SB_SURFBASE_0_SECURE                  0x0
#define G2SB_CTX1_G2SRCBA_SB_SURFBASE_0_WORD_COUNT                      0x1
#define G2SB_CTX1_G2SRCBA_SB_SURFBASE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCBA_SB_SURFBASE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCBA_SB_SURFBASE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCBA_SB_SURFBASE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCBA_SB_SURFBASE_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2SRCBA_SB_SURFBASE_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2SRCBA:
//    -base of interleaved sources (RGB, YUV)
//    -base of Y plane
// Only used by the StretchBlit Engine
#define G2SB_CTX1_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_FIELD                  (_MK_MASK_CONST(0xffffffff) << G2SB_CTX1_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SHIFT)
#define G2SB_CTX1_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_RANGE                  31:0
#define G2SB_CTX1_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_WOFFSET                        0x0
#define G2SB_CTX1_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2DSTBA_SB_SURFBASE_0
#define G2SB_CTX1_G2DSTBA_SB_SURFBASE_0                 _MK_ADDR_CONST(0x4049)
#define G2SB_CTX1_G2DSTBA_SB_SURFBASE_0_SECURE                  0x0
#define G2SB_CTX1_G2DSTBA_SB_SURFBASE_0_WORD_COUNT                      0x1
#define G2SB_CTX1_G2DSTBA_SB_SURFBASE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_SB_SURFBASE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_SB_SURFBASE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_SB_SURFBASE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_SB_SURFBASE_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2DSTBA_SB_SURFBASE_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2DSTBA
// Only used by the StretchBlit Engine
#define G2SB_CTX1_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2DSTBA_SB_SURFBASE_0_DST_ADDR_FIELD                  (_MK_MASK_CONST(0xffffffff) << G2SB_CTX1_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SHIFT)
#define G2SB_CTX1_G2DSTBA_SB_SURFBASE_0_DST_ADDR_RANGE                  31:0
#define G2SB_CTX1_G2DSTBA_SB_SURFBASE_0_DST_ADDR_WOFFSET                        0x0
#define G2SB_CTX1_G2DSTBA_SB_SURFBASE_0_DST_ADDR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_SB_SURFBASE_0_DST_ADDR_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2DSTBA_B_SB_SURFBASE_0
#define G2SB_CTX1_G2DSTBA_B_SB_SURFBASE_0                       _MK_ADDR_CONST(0x404a)
#define G2SB_CTX1_G2DSTBA_B_SB_SURFBASE_0_SECURE                        0x0
#define G2SB_CTX1_G2DSTBA_B_SB_SURFBASE_0_WORD_COUNT                    0x1
#define G2SB_CTX1_G2DSTBA_B_SB_SURFBASE_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_B_SB_SURFBASE_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_B_SB_SURFBASE_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_B_SB_SURFBASE_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_B_SB_SURFBASE_0_READ_MASK                     _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2DSTBA_B_SB_SURFBASE_0_WRITE_MASK                    _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2DSTBA_B
// Only used by the StretchBlit Engine, and G2CONTROLSB.DBSEL() is enabled
#define G2SB_CTX1_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_FIELD                      (_MK_MASK_CONST(0xffffffff) << G2SB_CTX1_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SHIFT)
#define G2SB_CTX1_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_RANGE                      31:0
#define G2SB_CTX1_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_WOFFSET                    0x0
#define G2SB_CTX1_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2VBA_A_SB_SURFBASE_0
#define G2SB_CTX1_G2VBA_A_SB_SURFBASE_0                 _MK_ADDR_CONST(0x404b)
#define G2SB_CTX1_G2VBA_A_SB_SURFBASE_0_SECURE                  0x0
#define G2SB_CTX1_G2VBA_A_SB_SURFBASE_0_WORD_COUNT                      0x1
#define G2SB_CTX1_G2VBA_A_SB_SURFBASE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VBA_A_SB_SURFBASE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VBA_A_SB_SURFBASE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VBA_A_SB_SURFBASE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VBA_A_SB_SURFBASE_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2VBA_A_SB_SURFBASE_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2VBA
//     used for YUV 4:2:0 planar, base of V plane
// Only used by the StretchBlit Engine
#define G2SB_CTX1_G2VBA_A_SB_SURFBASE_0_V_ADDR_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2VBA_A_SB_SURFBASE_0_V_ADDR_FIELD                    (_MK_MASK_CONST(0xffffffff) << G2SB_CTX1_G2VBA_A_SB_SURFBASE_0_V_ADDR_SHIFT)
#define G2SB_CTX1_G2VBA_A_SB_SURFBASE_0_V_ADDR_RANGE                    31:0
#define G2SB_CTX1_G2VBA_A_SB_SURFBASE_0_V_ADDR_WOFFSET                  0x0
#define G2SB_CTX1_G2VBA_A_SB_SURFBASE_0_V_ADDR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VBA_A_SB_SURFBASE_0_V_ADDR_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VBA_A_SB_SURFBASE_0_V_ADDR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2VBA_A_SB_SURFBASE_0_V_ADDR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_CTX1_G2UBA_A_SB_SURFBASE_0
#define G2SB_CTX1_G2UBA_A_SB_SURFBASE_0                 _MK_ADDR_CONST(0x404c)
#define G2SB_CTX1_G2UBA_A_SB_SURFBASE_0_SECURE                  0x0
#define G2SB_CTX1_G2UBA_A_SB_SURFBASE_0_WORD_COUNT                      0x1
#define G2SB_CTX1_G2UBA_A_SB_SURFBASE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2UBA_A_SB_SURFBASE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2UBA_A_SB_SURFBASE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2UBA_A_SB_SURFBASE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2UBA_A_SB_SURFBASE_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX1_G2UBA_A_SB_SURFBASE_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2VBA
//     used for YUV 4:2:0 planar, base of U plane
// Only used by the StretchBlit Engine
#define G2SB_CTX1_G2UBA_A_SB_SURFBASE_0_U_ADDR_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX1_G2UBA_A_SB_SURFBASE_0_U_ADDR_FIELD                    (_MK_MASK_CONST(0xffffffff) << G2SB_CTX1_G2UBA_A_SB_SURFBASE_0_U_ADDR_SHIFT)
#define G2SB_CTX1_G2UBA_A_SB_SURFBASE_0_U_ADDR_RANGE                    31:0
#define G2SB_CTX1_G2UBA_A_SB_SURFBASE_0_U_ADDR_WOFFSET                  0x0
#define G2SB_CTX1_G2UBA_A_SB_SURFBASE_0_U_ADDR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2UBA_A_SB_SURFBASE_0_U_ADDR_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2UBA_A_SB_SURFBASE_0_U_ADDR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX1_G2UBA_A_SB_SURFBASE_0_U_ADDR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//
// --------------------------------------------------------------------------
//
// Copyright (c) 2004, NVIDIA Corp.
// All Rights Reserved.
//
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
//
// --------------------------------------------------------------------------
// --------------------------------------------------------------------------
//
// Copyright (c) 2004-2005, NVIDIA Corp.
// All Rights Reserved.
//
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
//
// --------------------------------------------------------------------------
//
// Memory Controller Tiling definitions
//
//
//  To enable tiling for a buffer in your module you'll want to include
//  this spec file and then make use of either the ADD_TILE_MODE_REG_SPEC
//  or ADD_TILE_MODE_REG_FIELD_SPEC macro.
//
//  For the ADD_TILE_MODE_REG_SPEC macro, the regp arg is added to the
//  register name as a prefix to match the names of the other registers
//  for this buffer. The fldp is the field name prefix to make the name
//  unique so it works with arreggen generated reg blocks (e.g.):
//
//      // specify how addressing should occur for IB0 buffer
//      ADD_TILE_MODE_REG_SPEC(IB0, IB0);
//
//  There's also a REG_RW_SPEC version, if you need to specify a special
//  flag (e.g. rws for shadow, or rwt for trigger).
//
//  For the ADD_TILE_MODE_REG_FIELD_SPEC macro, the fldp is the field
//  name prefix and bitpos arg describes the starting bit position for
//  this field within another register.
//
//  Like the register version, there's a REG_RW_FIELD_SPEC version if
//  you need to set explicit bits other than "rw".
//
//  Note: this requires having at least NV_MC_TILE_MODEWIDTH bits of
//  space available after bitpos (e.g.) in the register:
//
//      ADD_TILE_MODE_REG_FIELD_SPEC(REF, 16)   // This parameter specifies how addressing
//                                              // for the REF buffer should occur
//
// --------------------------------------------------------------------------
//
// Copyright (c) 2004, NVIDIA Corp.
// All Rights Reserved.
//
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
//
// --------------------------------------------------------------------------
//

// Register G2SB_CTX2_INCR_SYNCPT_0
#define G2SB_CTX2_INCR_SYNCPT_0                 _MK_ADDR_CONST(0x8000)
#define G2SB_CTX2_INCR_SYNCPT_0_SECURE                  0x0
#define G2SB_CTX2_INCR_SYNCPT_0_WORD_COUNT                      0x1
#define G2SB_CTX2_INCR_SYNCPT_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_INCR_SYNCPT_0_RESET_MASK                      _MK_MASK_CONST(0xffff)
#define G2SB_CTX2_INCR_SYNCPT_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_INCR_SYNCPT_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_INCR_SYNCPT_0_READ_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX2_INCR_SYNCPT_0_WRITE_MASK                      _MK_MASK_CONST(0xffff)
// Condition mapped from raise/wait
#define G2SB_CTX2_INCR_SYNCPT_0_COND_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_CTX2_INCR_SYNCPT_0_COND_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX2_INCR_SYNCPT_0_COND_SHIFT)
#define G2SB_CTX2_INCR_SYNCPT_0_COND_RANGE                      15:8
#define G2SB_CTX2_INCR_SYNCPT_0_COND_WOFFSET                    0x0
#define G2SB_CTX2_INCR_SYNCPT_0_COND_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_INCR_SYNCPT_0_COND_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define G2SB_CTX2_INCR_SYNCPT_0_COND_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_INCR_SYNCPT_0_COND_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_INCR_SYNCPT_0_COND_IMMEDIATE                  _MK_ENUM_CONST(0)
#define G2SB_CTX2_INCR_SYNCPT_0_COND_OP_DONE                    _MK_ENUM_CONST(1)
#define G2SB_CTX2_INCR_SYNCPT_0_COND_RD_DONE                    _MK_ENUM_CONST(2)
#define G2SB_CTX2_INCR_SYNCPT_0_COND_REG_WR_SAFE                        _MK_ENUM_CONST(3)
#define G2SB_CTX2_INCR_SYNCPT_0_COND_COND_4                     _MK_ENUM_CONST(4)
#define G2SB_CTX2_INCR_SYNCPT_0_COND_COND_5                     _MK_ENUM_CONST(5)
#define G2SB_CTX2_INCR_SYNCPT_0_COND_COND_6                     _MK_ENUM_CONST(6)
#define G2SB_CTX2_INCR_SYNCPT_0_COND_COND_7                     _MK_ENUM_CONST(7)
#define G2SB_CTX2_INCR_SYNCPT_0_COND_COND_8                     _MK_ENUM_CONST(8)
#define G2SB_CTX2_INCR_SYNCPT_0_COND_COND_9                     _MK_ENUM_CONST(9)
#define G2SB_CTX2_INCR_SYNCPT_0_COND_COND_10                    _MK_ENUM_CONST(10)
#define G2SB_CTX2_INCR_SYNCPT_0_COND_COND_11                    _MK_ENUM_CONST(11)
#define G2SB_CTX2_INCR_SYNCPT_0_COND_COND_12                    _MK_ENUM_CONST(12)
#define G2SB_CTX2_INCR_SYNCPT_0_COND_COND_13                    _MK_ENUM_CONST(13)
#define G2SB_CTX2_INCR_SYNCPT_0_COND_COND_14                    _MK_ENUM_CONST(14)
#define G2SB_CTX2_INCR_SYNCPT_0_COND_COND_15                    _MK_ENUM_CONST(15)

// syncpt index value
#define G2SB_CTX2_INCR_SYNCPT_0_INDX_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX2_INCR_SYNCPT_0_INDX_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX2_INCR_SYNCPT_0_INDX_SHIFT)
#define G2SB_CTX2_INCR_SYNCPT_0_INDX_RANGE                      7:0
#define G2SB_CTX2_INCR_SYNCPT_0_INDX_WOFFSET                    0x0
#define G2SB_CTX2_INCR_SYNCPT_0_INDX_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_INCR_SYNCPT_0_INDX_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define G2SB_CTX2_INCR_SYNCPT_0_INDX_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_INCR_SYNCPT_0_INDX_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_INCR_SYNCPT_CNTRL_0
#define G2SB_CTX2_INCR_SYNCPT_CNTRL_0                   _MK_ADDR_CONST(0x8001)
#define G2SB_CTX2_INCR_SYNCPT_CNTRL_0_SECURE                    0x0
#define G2SB_CTX2_INCR_SYNCPT_CNTRL_0_WORD_COUNT                        0x1
#define G2SB_CTX2_INCR_SYNCPT_CNTRL_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_INCR_SYNCPT_CNTRL_0_RESET_MASK                        _MK_MASK_CONST(0x101)
#define G2SB_CTX2_INCR_SYNCPT_CNTRL_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_INCR_SYNCPT_CNTRL_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_INCR_SYNCPT_CNTRL_0_READ_MASK                         _MK_MASK_CONST(0x101)
#define G2SB_CTX2_INCR_SYNCPT_CNTRL_0_WRITE_MASK                        _MK_MASK_CONST(0x101)
// If NO_STALL is 1, then when fifos are full,
// INCR_SYNCPT methods will be dropped and the
// INCR_SYNCPT_ERROR[COND] bit will be set.
// If NO_STALL is 0, then when fifos are full,
// the client host interface will be stalled.
#define G2SB_CTX2_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SHIFT                        _MK_SHIFT_CONST(8)
#define G2SB_CTX2_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX2_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SHIFT)
#define G2SB_CTX2_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_RANGE                        8:8
#define G2SB_CTX2_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_WOFFSET                      0x0
#define G2SB_CTX2_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX2_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// If SOFT_RESET is set, then all internal state
// of the client syncpt block will be reset.
// To do soft reset, first set SOFT_RESET of
// all host1x clients affected, then clear all
// SOFT_RESETs.
#define G2SB_CTX2_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX2_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX2_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SHIFT)
#define G2SB_CTX2_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_RANGE                      0:0
#define G2SB_CTX2_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_WOFFSET                    0x0
#define G2SB_CTX2_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_CTX2_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_INCR_SYNCPT_ERROR_0
#define G2SB_CTX2_INCR_SYNCPT_ERROR_0                   _MK_ADDR_CONST(0x8002)
#define G2SB_CTX2_INCR_SYNCPT_ERROR_0_SECURE                    0x0
#define G2SB_CTX2_INCR_SYNCPT_ERROR_0_WORD_COUNT                        0x1
#define G2SB_CTX2_INCR_SYNCPT_ERROR_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_INCR_SYNCPT_ERROR_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_INCR_SYNCPT_ERROR_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_INCR_SYNCPT_ERROR_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_INCR_SYNCPT_ERROR_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_INCR_SYNCPT_ERROR_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// COND_STATUS[COND] is set if the fifo for COND overflows.
// This bit is sticky and will remain set until cleared.
// Cleared by writing 1.
#define G2SB_CTX2_INCR_SYNCPT_ERROR_0_COND_STATUS_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX2_INCR_SYNCPT_ERROR_0_COND_STATUS_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX2_INCR_SYNCPT_ERROR_0_COND_STATUS_SHIFT)
#define G2SB_CTX2_INCR_SYNCPT_ERROR_0_COND_STATUS_RANGE                 31:0
#define G2SB_CTX2_INCR_SYNCPT_ERROR_0_COND_STATUS_WOFFSET                       0x0
#define G2SB_CTX2_INCR_SYNCPT_ERROR_0_COND_STATUS_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_INCR_SYNCPT_ERROR_0_COND_STATUS_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_INCR_SYNCPT_ERROR_0_COND_STATUS_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_INCR_SYNCPT_ERROR_0_COND_STATUS_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// reserve locations for future expansion

// Reserved address 32771 [0x8003]

// Reserved address 32772 [0x8004]

// Reserved address 32773 [0x8005]

// Reserved address 32774 [0x8006]

// Reserved address 32775 [0x8007]
// just in case names were redefined using macros
// 2D syncpt behavior
//     - Each 2D context has its own syncpt client.
//     - OP_DONE increments when 2D's memory write client is idle, meaning all
//           preceding operations are complete.
//     - RD_DONE behaves like OP_DONE
//     - REG_WR_SAFE behaves like IMMEDIATE meaning a syncpt increment returns
//         immediately and does not indicate that a register write will NOT block.
//         The implications are that 2D's host FIFO can fill and block access to 2D,
//         which will indeterminately block a direct CPU access.

// Register G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0  //{index=8}
// This register can be accessed by both register read/write and command fifo
// in order not to break exsting code , keep suffix REGONLY.
//
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0                      _MK_ADDR_CONST(0x8008)
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_SECURE                       0x0
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_WORD_COUNT                   0x1
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_READ_MASK                    _MK_MASK_CONST(0x1f03ff)
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_WRITE_MASK                   _MK_MASK_CONST(0x1f0000)
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_FIELD                     (_MK_MASK_CONST(0x3ff) << G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SHIFT)
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_RANGE                     9:0
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_WOFFSET                   0x0
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_FIELD                   (_MK_MASK_CONST(0xf) << G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SHIFT)
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_RANGE                   19:16
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_WOFFSET                 0x0
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SHIFT                      _MK_SHIFT_CONST(20)
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SHIFT)
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_RANGE                      20:20
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_WOFFSET                    0x0
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Control methods, since they are not programmed often, put them is the beginning

// Register G2SB_CTX2_G2TRIGGER_0  //{host,2d,sb,index=9}
#define G2SB_CTX2_G2TRIGGER_0                   _MK_ADDR_CONST(0x8009)
#define G2SB_CTX2_G2TRIGGER_0_SECURE                    0x0
#define G2SB_CTX2_G2TRIGGER_0_WORD_COUNT                        0x1
#define G2SB_CTX2_G2TRIGGER_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TRIGGER_0_RESET_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX2_G2TRIGGER_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TRIGGER_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TRIGGER_0_READ_MASK                         _MK_MASK_CONST(0xffff)
#define G2SB_CTX2_G2TRIGGER_0_WRITE_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX2_G2TRIGGER_0_TRIGGER_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2TRIGGER_0_TRIGGER_FIELD                     (_MK_MASK_CONST(0xffff) << G2SB_CTX2_G2TRIGGER_0_TRIGGER_SHIFT)
#define G2SB_CTX2_G2TRIGGER_0_TRIGGER_RANGE                     15:0
#define G2SB_CTX2_G2TRIGGER_0_TRIGGER_WOFFSET                   0x0
#define G2SB_CTX2_G2TRIGGER_0_TRIGGER_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TRIGGER_0_TRIGGER_DEFAULT_MASK                      _MK_MASK_CONST(0xffff)
#define G2SB_CTX2_G2TRIGGER_0_TRIGGER_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TRIGGER_0_TRIGGER_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2TRIGGER1_0  //{host,2d,sb,index=a}
#define G2SB_CTX2_G2TRIGGER1_0                  _MK_ADDR_CONST(0x800a)
#define G2SB_CTX2_G2TRIGGER1_0_SECURE                   0x0
#define G2SB_CTX2_G2TRIGGER1_0_WORD_COUNT                       0x1
#define G2SB_CTX2_G2TRIGGER1_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TRIGGER1_0_RESET_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX2_G2TRIGGER1_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TRIGGER1_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TRIGGER1_0_READ_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX2_G2TRIGGER1_0_WRITE_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX2_G2TRIGGER1_0_TRIGGER1_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2TRIGGER1_0_TRIGGER1_FIELD                   (_MK_MASK_CONST(0xffff) << G2SB_CTX2_G2TRIGGER1_0_TRIGGER1_SHIFT)
#define G2SB_CTX2_G2TRIGGER1_0_TRIGGER1_RANGE                   15:0
#define G2SB_CTX2_G2TRIGGER1_0_TRIGGER1_WOFFSET                 0x0
#define G2SB_CTX2_G2TRIGGER1_0_TRIGGER1_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TRIGGER1_0_TRIGGER1_DEFAULT_MASK                    _MK_MASK_CONST(0xffff)
#define G2SB_CTX2_G2TRIGGER1_0_TRIGGER1_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TRIGGER1_0_TRIGGER1_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2TRIGGER2_0  //{2d,index=b}
#define G2SB_CTX2_G2TRIGGER2_0                  _MK_ADDR_CONST(0x800b)
#define G2SB_CTX2_G2TRIGGER2_0_SECURE                   0x0
#define G2SB_CTX2_G2TRIGGER2_0_WORD_COUNT                       0x1
#define G2SB_CTX2_G2TRIGGER2_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TRIGGER2_0_RESET_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX2_G2TRIGGER2_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TRIGGER2_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TRIGGER2_0_READ_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX2_G2TRIGGER2_0_WRITE_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX2_G2TRIGGER2_0_TRIGGER2_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2TRIGGER2_0_TRIGGER2_FIELD                   (_MK_MASK_CONST(0xffff) << G2SB_CTX2_G2TRIGGER2_0_TRIGGER2_SHIFT)
#define G2SB_CTX2_G2TRIGGER2_0_TRIGGER2_RANGE                   15:0
#define G2SB_CTX2_G2TRIGGER2_0_TRIGGER2_WOFFSET                 0x0
#define G2SB_CTX2_G2TRIGGER2_0_TRIGGER2_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TRIGGER2_0_TRIGGER2_DEFAULT_MASK                    _MK_MASK_CONST(0xffff)
#define G2SB_CTX2_G2TRIGGER2_0_TRIGGER2_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TRIGGER2_0_TRIGGER2_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2CMDSEL_0  //{host,2d,sb,index=c}
#define G2SB_CTX2_G2CMDSEL_0                    _MK_ADDR_CONST(0x800c)
#define G2SB_CTX2_G2CMDSEL_0_SECURE                     0x0
#define G2SB_CTX2_G2CMDSEL_0_WORD_COUNT                         0x1
#define G2SB_CTX2_G2CMDSEL_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_RESET_MASK                         _MK_MASK_CONST(0x1100d7f1)
#define G2SB_CTX2_G2CMDSEL_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_READ_MASK                  _MK_MASK_CONST(0x1fffd7f1)
#define G2SB_CTX2_G2CMDSEL_0_WRITE_MASK                         _MK_MASK_CONST(0x1fffd7f0)
#define G2SB_CTX2_G2CMDSEL_0_SBOR2D_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2CMDSEL_0_SBOR2D_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CMDSEL_0_SBOR2D_SHIFT)
#define G2SB_CTX2_G2CMDSEL_0_SBOR2D_RANGE                       0:0
#define G2SB_CTX2_G2CMDSEL_0_SBOR2D_WOFFSET                     0x0
#define G2SB_CTX2_G2CMDSEL_0_SBOR2D_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_SBOR2D_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CMDSEL_0_SBOR2D_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_SBOR2D_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_SBOR2D_G2                  _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CMDSEL_0_SBOR2D_SB                  _MK_ENUM_CONST(1)

//circular buffer feature enable    0= disable
#define G2SB_CTX2_G2CMDSEL_0_CBENABLE_SHIFT                     _MK_SHIFT_CONST(4)
#define G2SB_CTX2_G2CMDSEL_0_CBENABLE_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CMDSEL_0_CBENABLE_SHIFT)
#define G2SB_CTX2_G2CMDSEL_0_CBENABLE_RANGE                     4:4
#define G2SB_CTX2_G2CMDSEL_0_CBENABLE_WOFFSET                   0x0
#define G2SB_CTX2_G2CMDSEL_0_CBENABLE_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_CBENABLE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CMDSEL_0_CBENABLE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_CBENABLE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_CBENABLE_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CMDSEL_0_CBENABLE_ENABLE                    _MK_ENUM_CONST(1)

//VI trigger enable, can be circular buffer or full frame
#define G2SB_CTX2_G2CMDSEL_0_VITRIGGER_SHIFT                    _MK_SHIFT_CONST(5)
#define G2SB_CTX2_G2CMDSEL_0_VITRIGGER_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CMDSEL_0_VITRIGGER_SHIFT)
#define G2SB_CTX2_G2CMDSEL_0_VITRIGGER_RANGE                    5:5
#define G2SB_CTX2_G2CMDSEL_0_VITRIGGER_WOFFSET                  0x0
#define G2SB_CTX2_G2CMDSEL_0_VITRIGGER_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_VITRIGGER_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CMDSEL_0_VITRIGGER_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_VITRIGGER_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//host trigger the command, host also need program cicular buffer related data
#define G2SB_CTX2_G2CMDSEL_0_HOSTTRIGGER_SHIFT                  _MK_SHIFT_CONST(6)
#define G2SB_CTX2_G2CMDSEL_0_HOSTTRIGGER_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CMDSEL_0_HOSTTRIGGER_SHIFT)
#define G2SB_CTX2_G2CMDSEL_0_HOSTTRIGGER_RANGE                  6:6
#define G2SB_CTX2_G2CMDSEL_0_HOSTTRIGGER_WOFFSET                        0x0
#define G2SB_CTX2_G2CMDSEL_0_HOSTTRIGGER_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_HOSTTRIGGER_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CMDSEL_0_HOSTTRIGGER_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_HOSTTRIGGER_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX2_G2CMDSEL_0_CBSBDISABLE_SHIFT                  _MK_SHIFT_CONST(7)
#define G2SB_CTX2_G2CMDSEL_0_CBSBDISABLE_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CMDSEL_0_CBSBDISABLE_SHIFT)
#define G2SB_CTX2_G2CMDSEL_0_CBSBDISABLE_RANGE                  7:7
#define G2SB_CTX2_G2CMDSEL_0_CBSBDISABLE_WOFFSET                        0x0
#define G2SB_CTX2_G2CMDSEL_0_CBSBDISABLE_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_CBSBDISABLE_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CMDSEL_0_CBSBDISABLE_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_CBSBDISABLE_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// 00: to memory
// 01: to EPP
#define G2SB_CTX2_G2CMDSEL_0_G2OUTPUT_SHIFT                     _MK_SHIFT_CONST(8)
#define G2SB_CTX2_G2CMDSEL_0_G2OUTPUT_FIELD                     (_MK_MASK_CONST(0x3) << G2SB_CTX2_G2CMDSEL_0_G2OUTPUT_SHIFT)
#define G2SB_CTX2_G2CMDSEL_0_G2OUTPUT_RANGE                     9:8
#define G2SB_CTX2_G2CMDSEL_0_G2OUTPUT_WOFFSET                   0x0
#define G2SB_CTX2_G2CMDSEL_0_G2OUTPUT_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_G2OUTPUT_DEFAULT_MASK                      _MK_MASK_CONST(0x3)
#define G2SB_CTX2_G2CMDSEL_0_G2OUTPUT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_G2OUTPUT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_G2OUTPUT_MEMORY                    _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CMDSEL_0_G2OUTPUT_EPP                       _MK_ENUM_CONST(1)
#define G2SB_CTX2_G2CMDSEL_0_G2OUTPUT_RESERVED2                 _MK_ENUM_CONST(2)
#define G2SB_CTX2_G2CMDSEL_0_G2OUTPUT_RESERVED3                 _MK_ENUM_CONST(3)

// Reserved for HW Test, SW should not use this bit.
#define G2SB_CTX2_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SHIFT                       _MK_SHIFT_CONST(10)
#define G2SB_CTX2_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SHIFT)
#define G2SB_CTX2_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_RANGE                       10:10
#define G2SB_CTX2_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_WOFFSET                     0x0
#define G2SB_CTX2_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_ENABLE                      _MK_ENUM_CONST(1)

#define G2SB_CTX2_G2CMDSEL_0_LINK_WAIT_BUF_END_SHIFT                    _MK_SHIFT_CONST(12)
#define G2SB_CTX2_G2CMDSEL_0_LINK_WAIT_BUF_END_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CMDSEL_0_LINK_WAIT_BUF_END_SHIFT)
#define G2SB_CTX2_G2CMDSEL_0_LINK_WAIT_BUF_END_RANGE                    12:12
#define G2SB_CTX2_G2CMDSEL_0_LINK_WAIT_BUF_END_WOFFSET                  0x0
#define G2SB_CTX2_G2CMDSEL_0_LINK_WAIT_BUF_END_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_LINK_WAIT_BUF_END_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CMDSEL_0_LINK_WAIT_BUF_END_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_LINK_WAIT_BUF_END_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//host writes this bit to tell which buffer is ready
#define G2SB_CTX2_G2CMDSEL_0_FRAME_START_SHIFT                  _MK_SHIFT_CONST(14)
#define G2SB_CTX2_G2CMDSEL_0_FRAME_START_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CMDSEL_0_FRAME_START_SHIFT)
#define G2SB_CTX2_G2CMDSEL_0_FRAME_START_RANGE                  14:14
#define G2SB_CTX2_G2CMDSEL_0_FRAME_START_WOFFSET                        0x0
#define G2SB_CTX2_G2CMDSEL_0_FRAME_START_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_FRAME_START_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CMDSEL_0_FRAME_START_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_FRAME_START_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX2_G2CMDSEL_0_FRAME_END_SHIFT                    _MK_SHIFT_CONST(15)
#define G2SB_CTX2_G2CMDSEL_0_FRAME_END_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CMDSEL_0_FRAME_END_SHIFT)
#define G2SB_CTX2_G2CMDSEL_0_FRAME_END_RANGE                    15:15
#define G2SB_CTX2_G2CMDSEL_0_FRAME_END_WOFFSET                  0x0
#define G2SB_CTX2_G2CMDSEL_0_FRAME_END_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_FRAME_END_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CMDSEL_0_FRAME_END_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_FRAME_END_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

#define G2SB_CTX2_G2CMDSEL_0_BUFFER_INDEX_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_CTX2_G2CMDSEL_0_BUFFER_INDEX_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX2_G2CMDSEL_0_BUFFER_INDEX_SHIFT)
#define G2SB_CTX2_G2CMDSEL_0_BUFFER_INDEX_RANGE                 23:16
#define G2SB_CTX2_G2CMDSEL_0_BUFFER_INDEX_WOFFSET                       0x0
#define G2SB_CTX2_G2CMDSEL_0_BUFFER_INDEX_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_BUFFER_INDEX_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_BUFFER_INDEX_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_BUFFER_INDEX_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//Test purpose
#define G2SB_CTX2_G2CMDSEL_0_LINKEN_SHIFT                       _MK_SHIFT_CONST(24)
#define G2SB_CTX2_G2CMDSEL_0_LINKEN_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CMDSEL_0_LINKEN_SHIFT)
#define G2SB_CTX2_G2CMDSEL_0_LINKEN_RANGE                       24:24
#define G2SB_CTX2_G2CMDSEL_0_LINKEN_WOFFSET                     0x0
#define G2SB_CTX2_G2CMDSEL_0_LINKEN_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_LINKEN_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CMDSEL_0_LINKEN_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_LINKEN_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

#define G2SB_CTX2_G2CMDSEL_0_LINKVAL_SHIFT                      _MK_SHIFT_CONST(25)
#define G2SB_CTX2_G2CMDSEL_0_LINKVAL_FIELD                      (_MK_MASK_CONST(0x7) << G2SB_CTX2_G2CMDSEL_0_LINKVAL_SHIFT)
#define G2SB_CTX2_G2CMDSEL_0_LINKVAL_RANGE                      27:25
#define G2SB_CTX2_G2CMDSEL_0_LINKVAL_WOFFSET                    0x0
#define G2SB_CTX2_G2CMDSEL_0_LINKVAL_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_LINKVAL_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_LINKVAL_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_LINKVAL_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// indicates priority of the context, note vi-triggered contexts take priority over HIGH
#define G2SB_CTX2_G2CMDSEL_0_PRIORITY_SHIFT                     _MK_SHIFT_CONST(28)
#define G2SB_CTX2_G2CMDSEL_0_PRIORITY_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CMDSEL_0_PRIORITY_SHIFT)
#define G2SB_CTX2_G2CMDSEL_0_PRIORITY_RANGE                     28:28
#define G2SB_CTX2_G2CMDSEL_0_PRIORITY_WOFFSET                   0x0
#define G2SB_CTX2_G2CMDSEL_0_PRIORITY_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_PRIORITY_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CMDSEL_0_PRIORITY_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_PRIORITY_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMDSEL_0_PRIORITY_LOW                       _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CMDSEL_0_PRIORITY_HIGH                      _MK_ENUM_CONST(1)


// Register G2SB_CTX2_G2RAISE_0  //{host,2d,sb,index=d}
#define G2SB_CTX2_G2RAISE_0                     _MK_ADDR_CONST(0x800d)
#define G2SB_CTX2_G2RAISE_0_SECURE                      0x0
#define G2SB_CTX2_G2RAISE_0_WORD_COUNT                  0x1
#define G2SB_CTX2_G2RAISE_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2RAISE_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2RAISE_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2RAISE_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2RAISE_0_READ_MASK                   _MK_MASK_CONST(0xf001f)
#define G2SB_CTX2_G2RAISE_0_WRITE_MASK                  _MK_MASK_CONST(0xf001f)
//Push back to read fifo when all commands in the channel are done.
#define G2SB_CTX2_G2RAISE_0_RAISE_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2RAISE_0_RAISE_FIELD                 (_MK_MASK_CONST(0x1f) << G2SB_CTX2_G2RAISE_0_RAISE_SHIFT)
#define G2SB_CTX2_G2RAISE_0_RAISE_RANGE                 4:0
#define G2SB_CTX2_G2RAISE_0_RAISE_WOFFSET                       0x0
#define G2SB_CTX2_G2RAISE_0_RAISE_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2RAISE_0_RAISE_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2RAISE_0_RAISE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2RAISE_0_RAISE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

#define G2SB_CTX2_G2RAISE_0_RAISECHANNEL_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX2_G2RAISE_0_RAISECHANNEL_FIELD                  (_MK_MASK_CONST(0xf) << G2SB_CTX2_G2RAISE_0_RAISECHANNEL_SHIFT)
#define G2SB_CTX2_G2RAISE_0_RAISECHANNEL_RANGE                  19:16
#define G2SB_CTX2_G2RAISE_0_RAISECHANNEL_WOFFSET                        0x0
#define G2SB_CTX2_G2RAISE_0_RAISECHANNEL_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2RAISE_0_RAISECHANNEL_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2RAISE_0_RAISECHANNEL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2RAISE_0_RAISECHANNEL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Reserved address 32782 [0x800e]
//reg G2REFCOUNT incr1  //{host,2d,sb,index=e}
//#if (NV_HOST1X_HAS_FEATURE_REFCOUNT32B == 1)
//     31:0   rw REFCOUNT
//#else
//     15:0   rw REFCOUNT
//#endif
//    ;

// Register G2SB_CTX2_G2HOSTSET_0  //{host,2d,index=f}
#define G2SB_CTX2_G2HOSTSET_0                   _MK_ADDR_CONST(0x800f)
#define G2SB_CTX2_G2HOSTSET_0_SECURE                    0x0
#define G2SB_CTX2_G2HOSTSET_0_WORD_COUNT                        0x1
#define G2SB_CTX2_G2HOSTSET_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2HOSTSET_0_RESET_MASK                        _MK_MASK_CONST(0xff)
#define G2SB_CTX2_G2HOSTSET_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2HOSTSET_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2HOSTSET_0_READ_MASK                         _MK_MASK_CONST(0xff)
#define G2SB_CTX2_G2HOSTSET_0_WRITE_MASK                        _MK_MASK_CONST(0xff)
//  specifies distance (in byte) from last pixel of a line to the first
//  pixel of next line.
//  In mono mode, the value is the nearest byte number.
//  E.G. if gap is 3 bits, HSTLNGAP should be 1 (byte),
// if gap is 9 bits, HSTLNGAP should be 2 (byte)
#define G2SB_CTX2_G2HOSTSET_0_HSTLNGAP_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2HOSTSET_0_HSTLNGAP_FIELD                    (_MK_MASK_CONST(0xf) << G2SB_CTX2_G2HOSTSET_0_HSTLNGAP_SHIFT)
#define G2SB_CTX2_G2HOSTSET_0_HSTLNGAP_RANGE                    3:0
#define G2SB_CTX2_G2HOSTSET_0_HSTLNGAP_WOFFSET                  0x0
#define G2SB_CTX2_G2HOSTSET_0_HSTLNGAP_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2HOSTSET_0_HSTLNGAP_DEFAULT_MASK                     _MK_MASK_CONST(0xf)
#define G2SB_CTX2_G2HOSTSET_0_HSTLNGAP_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2HOSTSET_0_HSTLNGAP_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// specifies the
//  first pixel location (in byte) in the first source data entry.
// In mono mode pixel should always start in byte boundary
#define G2SB_CTX2_G2HOSTSET_0_HSTFPXL_SHIFT                     _MK_SHIFT_CONST(4)
#define G2SB_CTX2_G2HOSTSET_0_HSTFPXL_FIELD                     (_MK_MASK_CONST(0xf) << G2SB_CTX2_G2HOSTSET_0_HSTFPXL_SHIFT)
#define G2SB_CTX2_G2HOSTSET_0_HSTFPXL_RANGE                     7:4
#define G2SB_CTX2_G2HOSTSET_0_HSTFPXL_WOFFSET                   0x0
#define G2SB_CTX2_G2HOSTSET_0_HSTFPXL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2HOSTSET_0_HSTFPXL_DEFAULT_MASK                      _MK_MASK_CONST(0xf)
#define G2SB_CTX2_G2HOSTSET_0_HSTFPXL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2HOSTSET_0_HSTFPXL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2HOSTFIFO_0  //{host,2d,sb,index=10}
#define G2SB_CTX2_G2HOSTFIFO_0                  _MK_ADDR_CONST(0x8010)
#define G2SB_CTX2_G2HOSTFIFO_0_SECURE                   0x0
#define G2SB_CTX2_G2HOSTFIFO_0_WORD_COUNT                       0x1
#define G2SB_CTX2_G2HOSTFIFO_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2HOSTFIFO_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2HOSTFIFO_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2HOSTFIFO_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2HOSTFIFO_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2HOSTFIFO_0_WRITE_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2HOSTFIFO_0_HOSTFIFODATA_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2HOSTFIFO_0_HOSTFIFODATA_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX2_G2HOSTFIFO_0_HOSTFIFODATA_SHIFT)
#define G2SB_CTX2_G2HOSTFIFO_0_HOSTFIFODATA_RANGE                       31:0
#define G2SB_CTX2_G2HOSTFIFO_0_HOSTFIFODATA_WOFFSET                     0x0
#define G2SB_CTX2_G2HOSTFIFO_0_HOSTFIFODATA_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2HOSTFIFO_0_HOSTFIFODATA_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2HOSTFIFO_0_HOSTFIFODATA_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2HOSTFIFO_0_HOSTFIFODATA_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2VDDA_0  //{sb,sbm,index=11}
#define G2SB_CTX2_G2VDDA_0                      _MK_ADDR_CONST(0x8011)
#define G2SB_CTX2_G2VDDA_0_SECURE                       0x0
#define G2SB_CTX2_G2VDDA_0_WORD_COUNT                   0x1
#define G2SB_CTX2_G2VDDA_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VDDA_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VDDA_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VDDA_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VDDA_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2VDDA_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
//Vertical Scaling DDA
//Reset value: xxxx-xxxxh
//Vertical DDA Step (Increment) Value (VDSTEP[18:0])
// (upper 13 bits should be set to '0')
//This parameter specifies the increment value of the DDA used
//for vertical scaling and it is in the form of 6-bit integer and
//12-bit fraction.  This value is detemined by the equation:
// (Actual_source_height-1-VDTINI) / (Actual_destination_height-1)
// Truncate the rest bits to keep the 12bits fraction. Since we have to meet
// (Actual_source_height-1)*1.0 >= (Actual_destination_height - 1)*VDSTEP + VDTINI
// Refer to bug 353260 for more detail.
//The 6-bit integer allows maximum contraction ratio of 1/64, and
// 12-bit fraction assures the maximum limit of accumulated error less
// than half line-spacing for up to approximately 2000 target lines.
//For example, image expansion from 240 lines to 400 lines
//  VDSTEP[17:0]  =  19'b00_0000_1001_1001_1010   and
//image contraction from 240 lines to 150 lines
//   VDSTEP[17:0]  =  19'b00_0001_1001_1001_1010.
#define G2SB_CTX2_G2VDDA_0_VDSTEP_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2VDDA_0_VDSTEP_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX2_G2VDDA_0_VDSTEP_SHIFT)
#define G2SB_CTX2_G2VDDA_0_VDSTEP_RANGE                 31:0
#define G2SB_CTX2_G2VDDA_0_VDSTEP_WOFFSET                       0x0
#define G2SB_CTX2_G2VDDA_0_VDSTEP_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VDDA_0_VDSTEP_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VDDA_0_VDSTEP_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VDDA_0_VDSTEP_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2VDDAINI_0  //{sb,sbm,index=12}
#define G2SB_CTX2_G2VDDAINI_0                   _MK_ADDR_CONST(0x8012)
#define G2SB_CTX2_G2VDDAINI_0_SECURE                    0x0
#define G2SB_CTX2_G2VDDAINI_0_WORD_COUNT                        0x1
#define G2SB_CTX2_G2VDDAINI_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VDDAINI_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VDDAINI_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VDDAINI_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VDDAINI_0_READ_MASK                         _MK_MASK_CONST(0xffff)
#define G2SB_CTX2_G2VDDAINI_0_WRITE_MASK                        _MK_MASK_CONST(0xffff)
//Vertical Scaling DDA Initial Values
//Vertical DDA Initial Value for Top-Field (VDTINI[7:0])
//This parameter specifies the fraction part of initial
// value of the DDA used for vertical scaling.
//Given a pair of consecutive source image lines representing
// positions 0.0 and 1.0, a destination line-image will be created
// at any position in [0.0, 1.0), that is specified by the fraction
// part of the vertical DDA. The 8-bit initial fraction value
// specifies the position of the first output (destination) line-image
// located between the first and the second input (source) line-images,
// respectively at position 0.0 and 1.0.
//This parameter provides a way to compensate relative displacement of
// top and bottom fields of a source image. Suppose, 2-to-1 interlaced
// original video field images #1 and #2 are in the image buffer, to be
// displayed in an overlay window. Assume that the #1 field image is the
// top-field. Using VDTINI = 8'hC0 for the top-field image and
// VDBINI = 8'h40 for the bottom-field image, for example, the two images
// from #1 and #2 fields get mapped to identically positioned destination
// images in the overlay window.
#define G2SB_CTX2_G2VDDAINI_0_VDTINI_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2VDDAINI_0_VDTINI_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX2_G2VDDAINI_0_VDTINI_SHIFT)
#define G2SB_CTX2_G2VDDAINI_0_VDTINI_RANGE                      7:0
#define G2SB_CTX2_G2VDDAINI_0_VDTINI_WOFFSET                    0x0
#define G2SB_CTX2_G2VDDAINI_0_VDTINI_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VDDAINI_0_VDTINI_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VDDAINI_0_VDTINI_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VDDAINI_0_VDTINI_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

//Vertical DDA Initial Value for Bottom-Field (VDBINI[7:0])
// (see description above)
#define G2SB_CTX2_G2VDDAINI_0_VDBINI_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_CTX2_G2VDDAINI_0_VDBINI_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX2_G2VDDAINI_0_VDBINI_SHIFT)
#define G2SB_CTX2_G2VDDAINI_0_VDBINI_RANGE                      15:8
#define G2SB_CTX2_G2VDDAINI_0_VDBINI_WOFFSET                    0x0
#define G2SB_CTX2_G2VDDAINI_0_VDBINI_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VDDAINI_0_VDBINI_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VDDAINI_0_VDBINI_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VDDAINI_0_VDBINI_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2HDDA_0  //{sb,sbm,index=13}
#define G2SB_CTX2_G2HDDA_0                      _MK_ADDR_CONST(0x8013)
#define G2SB_CTX2_G2HDDA_0_SECURE                       0x0
#define G2SB_CTX2_G2HDDA_0_WORD_COUNT                   0x1
#define G2SB_CTX2_G2HDDA_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2HDDA_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2HDDA_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2HDDA_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2HDDA_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2HDDA_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
//Horizontal Scaling DDA
//Reset value: xxxx-xxxxh
//Horizontal DDA Step (Increment) Value (HDSTEP[18:0])
// (upper 13 bits should be set to '0')
//This parameter specifies the increment value of the DDA used
//for horizontal scaling and it is in the form of 6-bit integer and
//12-bit fraction.  This value is detemined by the equation:
// (Actual_source_width-1-HDINI) / (Actual_destination_width-1)
// Truncate the rest bits to keep the 12bits fraction.
// Refer to bug 353260 for more detail.
//The 6-bit integer allows maximum contraction ratio of 1/64, and
// 12-bit fraction assures the maximum limit of accumulated error less
// than half pixel-spacing for up to approximately 2000 destination pixels.
//For example, image expansion from 720 pixels to 800 pixels
//       HDSTEP[17:0]  =  19'b000_0000_1110_0110_0111   and
//image contraction from 720 pixels to 250 pixels
// HDSTEP[17:0]  =  19'b000_0010_1110_0001_0101.
#define G2SB_CTX2_G2HDDA_0_HDSTEP_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2HDDA_0_HDSTEP_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX2_G2HDDA_0_HDSTEP_SHIFT)
#define G2SB_CTX2_G2HDDA_0_HDSTEP_RANGE                 31:0
#define G2SB_CTX2_G2HDDA_0_HDSTEP_WOFFSET                       0x0
#define G2SB_CTX2_G2HDDA_0_HDSTEP_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2HDDA_0_HDSTEP_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2HDDA_0_HDSTEP_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2HDDA_0_HDSTEP_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2HDDAINILS_0  //{sb,sbm,index=14}
#define G2SB_CTX2_G2HDDAINILS_0                 _MK_ADDR_CONST(0x8014)
#define G2SB_CTX2_G2HDDAINILS_0_SECURE                  0x0
#define G2SB_CTX2_G2HDDAINILS_0_WORD_COUNT                      0x1
#define G2SB_CTX2_G2HDDAINILS_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2HDDAINILS_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2HDDAINILS_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2HDDAINILS_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2HDDAINILS_0_READ_MASK                       _MK_MASK_CONST(0xff)
#define G2SB_CTX2_G2HDDAINILS_0_WRITE_MASK                      _MK_MASK_CONST(0xff)
//Horizontal Scaling DDA Initial Value
//Horizontal DDA Initial Value (HDINI[7:0])
//This parameter specifies the fraction part of initial value
// of the DDA used for horizontal scaling.
//Given a group of six consecutive source pixels that
// the two pixels at the center representing positions 0.0
//and 1.0, a destination pixel will be created at any
// position in [0.0, 1.0), that is specified by the fraction part
//of the horizontal DDA. The 8-bit initial fraction
// value specifies the position of the first output (destination)
//pixel located between the first and the second input (source)
// pixels, respectively at position 0.0 and 1.0.
//For horizontal scaling this value may normally be set to 0.
#define G2SB_CTX2_G2HDDAINILS_0_HDINI_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2HDDAINILS_0_HDINI_FIELD                     (_MK_MASK_CONST(0xff) << G2SB_CTX2_G2HDDAINILS_0_HDINI_SHIFT)
#define G2SB_CTX2_G2HDDAINILS_0_HDINI_RANGE                     7:0
#define G2SB_CTX2_G2HDDAINILS_0_HDINI_WOFFSET                   0x0
#define G2SB_CTX2_G2HDDAINILS_0_HDINI_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2HDDAINILS_0_HDINI_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2HDDAINILS_0_HDINI_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2HDDAINILS_0_HDINI_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2CSCFIRST_0  //{sb,sbm,index=15}
// The next 3 registers contain 8 parameters used by the YCbCr (YUV)
// to RGB color space conversion logic.  This logic can also be
// used for RGB gain/gamma correction in RGB to RGB modes, and for
// luma gain in YUV to YUV modes.  For SC20 two new parameters
// (G2U, G2V) have been added for RGB to YUV conversion.  These are
// in address 0x38.  The equtions have the form:
//    YUV->RGB
// R = (CYX * (yin + YOS)) + ((CUR * uin) + (CVR * vin))
// G = (CYX * (yin + YOS)) + ((CUG * uin) + (CVG * vin))
// B = (CYX * (yin + YOS)) + ((CUB * uin) + (CVB * vin))
//    RGB -> RGB
// R = (CVR * rin) + (CUR * bin)
// G = (CYX * (gin + YOS)) + ((CUG * bin) + (CVG * rin))
// B = (CUB * bin) + (CVB * rin)
//    YUV -> YUV (not what rtl does: see note below)
// Y = (CYX * yin + YOS) + ((CUB * uin) + (CVB * vin))
// U = (CUG * uin) + (CVG * vin)
// V = (CVR * vin) + (CUR * uin)
//    RGB -> YUV (new for SC20)
// Y = (CVB * rin) + (CUB * bin) + (CYX * gin) + YOS
// U = (CVG * rin) + (CUG * bin) + (G2U * gin)
// V = (CVR * rin) + (CUR * bin) + (G2V * gin)
//
// NOTE: YUV->YUV above is definitely wrong
// the cmodel *appears* to match the RTL with the following pseudo-code:
//
//if (yuv2rgb)
//    (r,g,b) = matrix*(y+sbreg_yos,u,v)
//    matrix:
//        sbreg_cyx, sbreg_cur, sbreg_cvr,
//        sbreg_cyx, sbreg_cug, sbreg_cvg,
//        sbreg_cyx, sbreg_cub, sbreg_cvb,
//else if (rgb2rgb)
//    (r,g,b) = matrix*(r,g+sbreg_yos,b)
//    matrix:
//        sbreg_cvr, 0,         sbreg_cur,
//        sbreg_cvg, sbreg_cyx, sbreg_cug,
//        sbreg_cvb, 0,         sbreg_cub,
//else if (yuv2yuv)
//    (y,u,v) = matrix*(y,u,v)
//    matrix:
//        sbreg_cub, 0,         sbreg_cvb,
//        sbreg_cug, sbreg_cyx, sbreg_cvg,
//        sbreg_cur, 0,         sbreg_cvr,
//else if (rgb2yuv)
//    (y,u,v) = matrix*(r,g,b) +(sbreg_yos,0,0)
//    matrix:
//        sbreg_cvb, sbreg_cyx, sbreg_cub,
//        sbreg_cvg, sbreg_g2u, sbreg_cug,
//        sbreg_cvr, sbreg_g2v, sbreg_cur,
#define G2SB_CTX2_G2CSCFIRST_0                  _MK_ADDR_CONST(0x8015)
#define G2SB_CTX2_G2CSCFIRST_0_SECURE                   0x0
#define G2SB_CTX2_G2CSCFIRST_0_WORD_COUNT                       0x1
#define G2SB_CTX2_G2CSCFIRST_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCFIRST_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCFIRST_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCFIRST_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCFIRST_0_READ_MASK                        _MK_MASK_CONST(0xff3ff3ff)
#define G2SB_CTX2_G2CSCFIRST_0_WRITE_MASK                       _MK_MASK_CONST(0xff3ff3ff)
// multiplier for U/B for Y or B generation.
// consists of a sign bit and 9-bit magnitude (s2.7).
// For YUV->RGB, the recommended value is 2.0172 (decimal) or 0x102.
// If source data is in RGB format, this parameter
// may be used as gain adjustment for B component.
// For SC20, this register changes precision when doing RGB to YUV
// conversion (SIFMT=1xxx, DIFMT=0xxx).  CUB becomes s1.8 and the
// recommended value is +0.098 or 0x019
//11-10  Reserved
#define G2SB_CTX2_G2CSCFIRST_0_CUB_SHIFT                        _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2CSCFIRST_0_CUB_FIELD                        (_MK_MASK_CONST(0x3ff) << G2SB_CTX2_G2CSCFIRST_0_CUB_SHIFT)
#define G2SB_CTX2_G2CSCFIRST_0_CUB_RANGE                        9:0
#define G2SB_CTX2_G2CSCFIRST_0_CUB_WOFFSET                      0x0
#define G2SB_CTX2_G2CSCFIRST_0_CUB_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCFIRST_0_CUB_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCFIRST_0_CUB_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCFIRST_0_CUB_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// multiplier for V/R for V or R generation.
//This parameter consists of a sign bit and 9-bit magnitude (s2.7)
// For YUV->RGB the recommended value is 1.5960 (decimal) or 0x0CC
//If source data is in RGB format, this parameter
// may be used as gain adjustment for R component.
// For RGB->YUV the recommended value is +0.439 (decimal) or 0x038
//23-22  Reserved
#define G2SB_CTX2_G2CSCFIRST_0_CVR_SHIFT                        _MK_SHIFT_CONST(12)
#define G2SB_CTX2_G2CSCFIRST_0_CVR_FIELD                        (_MK_MASK_CONST(0x3ff) << G2SB_CTX2_G2CSCFIRST_0_CVR_SHIFT)
#define G2SB_CTX2_G2CSCFIRST_0_CVR_RANGE                        21:12
#define G2SB_CTX2_G2CSCFIRST_0_CVR_WOFFSET                      0x0
#define G2SB_CTX2_G2CSCFIRST_0_CVR_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCFIRST_0_CVR_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCFIRST_0_CVR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCFIRST_0_CVR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

//Y-Offset (YOFFSET[7:0]) for YUV generation
//This parameter consists of 8-bit 2's complement in the range [-128,127].
// For YUV->RGB the recommended value is -16 (decimal) or 0xF0
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is +16 (decimal) or 0x10
#define G2SB_CTX2_G2CSCFIRST_0_YOS_SHIFT                        _MK_SHIFT_CONST(24)
#define G2SB_CTX2_G2CSCFIRST_0_YOS_FIELD                        (_MK_MASK_CONST(0xff) << G2SB_CTX2_G2CSCFIRST_0_YOS_SHIFT)
#define G2SB_CTX2_G2CSCFIRST_0_YOS_RANGE                        31:24
#define G2SB_CTX2_G2CSCFIRST_0_YOS_WOFFSET                      0x0
#define G2SB_CTX2_G2CSCFIRST_0_YOS_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCFIRST_0_YOS_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCFIRST_0_YOS_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCFIRST_0_YOS_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2CSCSECOND_0  //{sb,sbm,index=16}
#define G2SB_CTX2_G2CSCSECOND_0                 _MK_ADDR_CONST(0x8016)
#define G2SB_CTX2_G2CSCSECOND_0_SECURE                  0x0
#define G2SB_CTX2_G2CSCSECOND_0_WORD_COUNT                      0x1
#define G2SB_CTX2_G2CSCSECOND_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCSECOND_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCSECOND_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCSECOND_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCSECOND_0_READ_MASK                       _MK_MASK_CONST(0xff3ff1ff)
#define G2SB_CTX2_G2CSCSECOND_0_WRITE_MASK                      _MK_MASK_CONST(0xff3ff1ff)
// multiplier for U/B for U or G generation.
// consists of a sign bit and 8-bit magnitude (s1.7)
// For YUV->RGB the recommended value is -0.3918 (decimal) or 0x132
// For  RGB->RGB, this parameter should be set to 0
// For  YUV->YUV, this parameter should be set to 1 (0x080)
// For RGB->YUV the recommended value is +0.439 (decimal) or 0x038
//11-9  Reserved
#define G2SB_CTX2_G2CSCSECOND_0_CUG_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2CSCSECOND_0_CUG_FIELD                       (_MK_MASK_CONST(0x1ff) << G2SB_CTX2_G2CSCSECOND_0_CUG_SHIFT)
#define G2SB_CTX2_G2CSCSECOND_0_CUG_RANGE                       8:0
#define G2SB_CTX2_G2CSCSECOND_0_CUG_WOFFSET                     0x0
#define G2SB_CTX2_G2CSCSECOND_0_CUG_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCSECOND_0_CUG_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCSECOND_0_CUG_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCSECOND_0_CUG_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// multiplier for U/B for V or R generation.
//This parameter consists of a sign bit and 9-bit magnitude (s2.7)
//  For YUV->RGB normally this parameter is programmed to 0.0.
// This parameter takes non-zero value if hue is rotated.
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is -0.071 (decimal) or 0x209
//23-22 Reserved
#define G2SB_CTX2_G2CSCSECOND_0_CUR_SHIFT                       _MK_SHIFT_CONST(12)
#define G2SB_CTX2_G2CSCSECOND_0_CUR_FIELD                       (_MK_MASK_CONST(0x3ff) << G2SB_CTX2_G2CSCSECOND_0_CUR_SHIFT)
#define G2SB_CTX2_G2CSCSECOND_0_CUR_RANGE                       21:12
#define G2SB_CTX2_G2CSCSECOND_0_CUR_WOFFSET                     0x0
#define G2SB_CTX2_G2CSCSECOND_0_CUR_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCSECOND_0_CUR_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCSECOND_0_CUR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCSECOND_0_CUR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// multiplier for Y/G (G gain)
//This positive-only parameter consists of 8-bit magnitude (1.7)
// For YUV->YUV the recommended value is 1.1644 (decimal) or 0x95
// For YUV->YUV or RGB->RGB this may be used as gain adjustment
// for Y or G component.
// For RGB->YUV the recommended value is +0.504 (decimal) or 0x041
#define G2SB_CTX2_G2CSCSECOND_0_CYX_SHIFT                       _MK_SHIFT_CONST(24)
#define G2SB_CTX2_G2CSCSECOND_0_CYX_FIELD                       (_MK_MASK_CONST(0xff) << G2SB_CTX2_G2CSCSECOND_0_CYX_SHIFT)
#define G2SB_CTX2_G2CSCSECOND_0_CYX_RANGE                       31:24
#define G2SB_CTX2_G2CSCSECOND_0_CYX_WOFFSET                     0x0
#define G2SB_CTX2_G2CSCSECOND_0_CYX_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCSECOND_0_CYX_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCSECOND_0_CYX_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCSECOND_0_CYX_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2CSCTHIRD_0  //{sb,sbm,index=17}
#define G2SB_CTX2_G2CSCTHIRD_0                  _MK_ADDR_CONST(0x8017)
#define G2SB_CTX2_G2CSCTHIRD_0_SECURE                   0x0
#define G2SB_CTX2_G2CSCTHIRD_0_WORD_COUNT                       0x1
#define G2SB_CTX2_G2CSCTHIRD_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCTHIRD_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCTHIRD_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCTHIRD_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCTHIRD_0_READ_MASK                        _MK_MASK_CONST(0x3ff01ff)
#define G2SB_CTX2_G2CSCTHIRD_0_WRITE_MASK                       _MK_MASK_CONST(0x3ff01ff)
// multiplier for V/R for U or G generation.
//This parameter consists of a sign bit and 8-bit magnitude (s1.7)
// For YUV->RGB the recommended value is -0.8130 (decimal) or 0x168
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is -0.148 (decimal) or 0x113
#define G2SB_CTX2_G2CSCTHIRD_0_CVG_SHIFT                        _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2CSCTHIRD_0_CVG_FIELD                        (_MK_MASK_CONST(0x1ff) << G2SB_CTX2_G2CSCTHIRD_0_CVG_SHIFT)
#define G2SB_CTX2_G2CSCTHIRD_0_CVG_RANGE                        8:0
#define G2SB_CTX2_G2CSCTHIRD_0_CVG_WOFFSET                      0x0
#define G2SB_CTX2_G2CSCTHIRD_0_CVG_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCTHIRD_0_CVG_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCTHIRD_0_CVG_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCTHIRD_0_CVG_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// multiplier for V/R for Y or B generation.
//This parameter consists of a sign bit and 9-bit magnitude (s2.7)
//For YUV->RGB, normally this parameter is programmed to 0.0.
// This coefficient takes non-zero value if hue is rotated.
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is +0.257 (decimal) or 0x021
#define G2SB_CTX2_G2CSCTHIRD_0_CVB_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_CTX2_G2CSCTHIRD_0_CVB_FIELD                        (_MK_MASK_CONST(0x3ff) << G2SB_CTX2_G2CSCTHIRD_0_CVB_SHIFT)
#define G2SB_CTX2_G2CSCTHIRD_0_CVB_RANGE                        25:16
#define G2SB_CTX2_G2CSCTHIRD_0_CVB_WOFFSET                      0x0
#define G2SB_CTX2_G2CSCTHIRD_0_CVB_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCTHIRD_0_CVB_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCTHIRD_0_CVB_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCTHIRD_0_CVB_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// StretchBLT, Color/Chroma Key Lower Limit Register

// Register G2SB_CTX2_G2CMKEYL_0  //{sb,sbm,index=18}
// When key generation is enabled, the value of this register is the
// lower color/chroma limit and G2CMKEYU is the upper color/chroma
// limit for component pixel data.
// Three component signal values (YCrCb/YUV or RGB) of
// every output pixel are compared to a set of three
// ranges that are specified by three pairs of lower and
// upper color/chroma key values.  If the Key Polarity is
// 0, the Key is set to 1 only when all three component values
// of an input pixel are respectively within the set
// of ranges (inclusive of the limit values), else the Key is set to 0.
// If the Key Polarity is 1, the Key is set to 1
// when any of the three component values of an input pixel
// are outside the set of ranges, else the Key is set to 0.
#define G2SB_CTX2_G2CMKEYL_0                    _MK_ADDR_CONST(0x8018)
#define G2SB_CTX2_G2CMKEYL_0_SECURE                     0x0
#define G2SB_CTX2_G2CMKEYL_0_WORD_COUNT                         0x1
#define G2SB_CTX2_G2CMKEYL_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMKEYL_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMKEYL_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMKEYL_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMKEYL_0_READ_MASK                  _MK_MASK_CONST(0xffffff)
#define G2SB_CTX2_G2CMKEYL_0_WRITE_MASK                         _MK_MASK_CONST(0xffffff)
// B or Y Color/Chroma Key Lower Limit (CKBL[7:0])
#define G2SB_CTX2_G2CMKEYL_0_CKBL_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2CMKEYL_0_CKBL_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX2_G2CMKEYL_0_CKBL_SHIFT)
#define G2SB_CTX2_G2CMKEYL_0_CKBL_RANGE                 7:0
#define G2SB_CTX2_G2CMKEYL_0_CKBL_WOFFSET                       0x0
#define G2SB_CTX2_G2CMKEYL_0_CKBL_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMKEYL_0_CKBL_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMKEYL_0_CKBL_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMKEYL_0_CKBL_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//G or Cb Color Chroma Key Lower Limit (CKGL[7:0])
// Cb signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity
// from the minimum signal level to the maximum signal level.
#define G2SB_CTX2_G2CMKEYL_0_CKGL_SHIFT                 _MK_SHIFT_CONST(8)
#define G2SB_CTX2_G2CMKEYL_0_CKGL_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX2_G2CMKEYL_0_CKGL_SHIFT)
#define G2SB_CTX2_G2CMKEYL_0_CKGL_RANGE                 15:8
#define G2SB_CTX2_G2CMKEYL_0_CKGL_WOFFSET                       0x0
#define G2SB_CTX2_G2CMKEYL_0_CKGL_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMKEYL_0_CKGL_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMKEYL_0_CKGL_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMKEYL_0_CKGL_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//R or Cr Color Chroma Key Lower Limit (CKRL[7:0])
// Cr signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity from
// the minimum signal level to the maximum signal level.
//31-24 Reserved
#define G2SB_CTX2_G2CMKEYL_0_CKRL_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_CTX2_G2CMKEYL_0_CKRL_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX2_G2CMKEYL_0_CKRL_SHIFT)
#define G2SB_CTX2_G2CMKEYL_0_CKRL_RANGE                 23:16
#define G2SB_CTX2_G2CMKEYL_0_CKRL_WOFFSET                       0x0
#define G2SB_CTX2_G2CMKEYL_0_CKRL_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMKEYL_0_CKRL_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMKEYL_0_CKRL_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMKEYL_0_CKRL_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//StretchBLT, Color/Chroma Key Upper Limit Register

// Register G2SB_CTX2_G2CMKEYU_0  //{sb,sbm,index=19}
#define G2SB_CTX2_G2CMKEYU_0                    _MK_ADDR_CONST(0x8019)
#define G2SB_CTX2_G2CMKEYU_0_SECURE                     0x0
#define G2SB_CTX2_G2CMKEYU_0_WORD_COUNT                         0x1
#define G2SB_CTX2_G2CMKEYU_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMKEYU_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMKEYU_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMKEYU_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMKEYU_0_READ_MASK                  _MK_MASK_CONST(0xffffff)
#define G2SB_CTX2_G2CMKEYU_0_WRITE_MASK                         _MK_MASK_CONST(0xffffff)
//This is B or Y color/chroma key upper limit value.
#define G2SB_CTX2_G2CMKEYU_0_CKBU_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2CMKEYU_0_CKBU_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX2_G2CMKEYU_0_CKBU_SHIFT)
#define G2SB_CTX2_G2CMKEYU_0_CKBU_RANGE                 7:0
#define G2SB_CTX2_G2CMKEYU_0_CKBU_WOFFSET                       0x0
#define G2SB_CTX2_G2CMKEYU_0_CKBU_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMKEYU_0_CKBU_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMKEYU_0_CKBU_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMKEYU_0_CKBU_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// G or Cb Color/Chroma Key Upper Limit (CKGU[7:0])
// Cb signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity
// the minimum signal level to the maximum signal level.
#define G2SB_CTX2_G2CMKEYU_0_CKGU_SHIFT                 _MK_SHIFT_CONST(8)
#define G2SB_CTX2_G2CMKEYU_0_CKGU_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX2_G2CMKEYU_0_CKGU_SHIFT)
#define G2SB_CTX2_G2CMKEYU_0_CKGU_RANGE                 15:8
#define G2SB_CTX2_G2CMKEYU_0_CKGU_WOFFSET                       0x0
#define G2SB_CTX2_G2CMKEYU_0_CKGU_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMKEYU_0_CKGU_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMKEYU_0_CKGU_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMKEYU_0_CKGU_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// R or Cr Color Chroma Key Upper Limit (CKRU[7:0])
// Cr signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity from
// the minimum signal level to the maximum signal level.
//31-24  Reserved
#define G2SB_CTX2_G2CMKEYU_0_CKRU_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_CTX2_G2CMKEYU_0_CKRU_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX2_G2CMKEYU_0_CKRU_SHIFT)
#define G2SB_CTX2_G2CMKEYU_0_CKRU_RANGE                 23:16
#define G2SB_CTX2_G2CMKEYU_0_CKRU_WOFFSET                       0x0
#define G2SB_CTX2_G2CMKEYU_0_CKRU_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMKEYU_0_CKRU_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMKEYU_0_CKRU_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CMKEYU_0_CKRU_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// StretchBLT, Source Image Data U base address A-buffer

// Register G2SB_CTX2_G2UBA_A_0  //{sb,sbm,index=1a}
#define G2SB_CTX2_G2UBA_A_0                     _MK_ADDR_CONST(0x801a)
#define G2SB_CTX2_G2UBA_A_0_SECURE                      0x0
#define G2SB_CTX2_G2UBA_A_0_WORD_COUNT                  0x1
#define G2SB_CTX2_G2UBA_A_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2UBA_A_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2UBA_A_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2UBA_A_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2UBA_A_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2UBA_A_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Start Address of  Source U-image Area, 4:2:0 Format.
// This parameter specifies the start address of source image stored in
// the image buffer memory.
// The [3:0] bits have to be 0, since memory client will assemble YUV into one
// 422 format.
#define G2SB_CTX2_G2UBA_A_0_SU1SA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2UBA_A_0_SU1SA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX2_G2UBA_A_0_SU1SA_SHIFT)
#define G2SB_CTX2_G2UBA_A_0_SU1SA_RANGE                 31:0
#define G2SB_CTX2_G2UBA_A_0_SU1SA_WOFFSET                       0x0
#define G2SB_CTX2_G2UBA_A_0_SU1SA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2UBA_A_0_SU1SA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2UBA_A_0_SU1SA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2UBA_A_0_SU1SA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2VBA_A_0  //{sb,sbm,index=1b}
#define G2SB_CTX2_G2VBA_A_0                     _MK_ADDR_CONST(0x801b)
#define G2SB_CTX2_G2VBA_A_0_SECURE                      0x0
#define G2SB_CTX2_G2VBA_A_0_WORD_COUNT                  0x1
#define G2SB_CTX2_G2VBA_A_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VBA_A_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VBA_A_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VBA_A_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VBA_A_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2VBA_A_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Start Address of  Source V-image Area, 4:2:0 Format.
// This parameter specifies the start address of  source image stored in
// the image buffer memory.
// The [3:0] bits have to be 0, since memory client will assemble YUV into one
// 422 format.
#define G2SB_CTX2_G2VBA_A_0_SV1SA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2VBA_A_0_SV1SA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX2_G2VBA_A_0_SV1SA_SHIFT)
#define G2SB_CTX2_G2VBA_A_0_SV1SA_RANGE                 31:0
#define G2SB_CTX2_G2VBA_A_0_SV1SA_WOFFSET                       0x0
#define G2SB_CTX2_G2VBA_A_0_SV1SA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VBA_A_0_SV1SA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VBA_A_0_SV1SA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VBA_A_0_SV1SA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2SBFORMAT_0  //{sb,sbm,index=1c}
#define G2SB_CTX2_G2SBFORMAT_0                  _MK_ADDR_CONST(0x801c)
#define G2SB_CTX2_G2SBFORMAT_0_SECURE                   0x0
#define G2SB_CTX2_G2SBFORMAT_0_WORD_COUNT                       0x1
#define G2SB_CTX2_G2SBFORMAT_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SBFORMAT_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SBFORMAT_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SBFORMAT_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SBFORMAT_0_READ_MASK                        _MK_MASK_CONST(0xffffdf1f)
#define G2SB_CTX2_G2SBFORMAT_0_WRITE_MASK                       _MK_MASK_CONST(0xffffdf1f)
// This parameter defines the data format of source input.
// There are two groups of data formats, RGB format and YCbCr (YUV) format.
// CbCr (UV) components may be represented in either offset binary or 2's complement.
//00000 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00001 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00010 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00011 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00100 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00101 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00110 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00111 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//01000 B5G6R5 5-6-5 {R[4:0], G[5:0], B[4:0]}
//01001 RESERVED
//01010 RESERVED
//01011 RESERVED
//01100 B5G6R5 5-6-5 Byte-swapped {G[2:0], B[4:0], R[4:0], G[5:3]}
//01101 RESERVED
//01110 R8G8B8A8
//01111 B8G8R8A8
//1xxxx RESERVED
//
// StretchBlit Inputs
// ==================
// RGB    inputs = {B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8}
// YUV420 input  = {YUV420 is converted into 4:2:2 UYVY via memory client}
// YUV422 inputs = {U8Y8V8Y8_OB, Y8U8Y8V8_OB, V8Y8U8Y8_OB, U8Y8V8Y8_OB, U8Y8V8Y8_TC, Y8U8Y8V8_TC, Y8V8Y8U8_TC, V8Y8U8Y8_TC}
//
// StretchBlit Outputs
// ===================
// RGB    outputs = {B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8}
// YUV422 outputs = {U8Y8V8Y8_OB, Y8U8Y8V8_OB, V8Y8U8Y8_OB, U8Y8V8Y8_OB, U8Y8V8Y8_TC, Y8U8Y8V8_TC, Y8V8Y8U8_TC, V8Y8U8Y8_TC}
//
// StretchBlit Input/Output Rules
// ==============================
//
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|    src format                                                | internal sb format |      dst format                                           |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|  B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8                        |      R8G8B8A8      |  B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8                     |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|  U8Y8V8Y8_*, Y8U8Y8V8_*, V8Y8U8Y8_*, U8Y8V8Y8_*, YUV420      |      YUV 4:4:4     |  U8Y8V8Y8_*, Y8U8Y8V8_*, V8Y8U8Y8_*, U8Y8V8Y8_*           |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|  U8Y8V8Y8_*, Y8U8Y8V8_*, V8Y8U8Y8_*, U8Y8V8Y8_*, YUV420      |      YUV 4:4:4     |  B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8                     |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//
//  StretchBlit color space converter supports YUV->RGB, YUV->YUV (gain) and RGB->RGB (gain).  There is no support for RGB->YUV.
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_FIELD                      (_MK_MASK_CONST(0x1f) << G2SB_CTX2_G2SBFORMAT_0_SIFMT_SHIFT)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_RANGE                      4:0
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_WOFFSET                    0x0
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_U8Y8V8Y8_OB                        _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_Y8U8Y8V8_OB                        _MK_ENUM_CONST(1)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_Y8V8Y8U8_OB                        _MK_ENUM_CONST(2)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_V8Y8U8Y8_OB                        _MK_ENUM_CONST(3)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_U8Y8V8Y8_TC                        _MK_ENUM_CONST(4)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_Y8U8Y8V8_TC                        _MK_ENUM_CONST(5)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_Y8V8Y8U8_TC                        _MK_ENUM_CONST(6)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_V8Y8U8Y8_TC                        _MK_ENUM_CONST(7)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_B5G6R5                     _MK_ENUM_CONST(8)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_RESERVED9                  _MK_ENUM_CONST(9)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_RESERVED10                 _MK_ENUM_CONST(10)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_RESERVED11                 _MK_ENUM_CONST(11)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_B5G6R5BS                   _MK_ENUM_CONST(12)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_RESERVED13                 _MK_ENUM_CONST(13)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_R8G8B8A8                   _MK_ENUM_CONST(14)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_B8G8R8A8                   _MK_ENUM_CONST(15)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_RESERVED16                 _MK_ENUM_CONST(16)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_RESERVED17                 _MK_ENUM_CONST(17)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_RESERVED18                 _MK_ENUM_CONST(18)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_RESERVED19                 _MK_ENUM_CONST(19)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_RESERVED20                 _MK_ENUM_CONST(20)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_RESERVED21                 _MK_ENUM_CONST(21)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_RESERVED22                 _MK_ENUM_CONST(22)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_RESERVED23                 _MK_ENUM_CONST(23)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_RESERVED24                 _MK_ENUM_CONST(24)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_RESERVED25                 _MK_ENUM_CONST(25)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_RESERVED26                 _MK_ENUM_CONST(26)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_RESERVED27                 _MK_ENUM_CONST(27)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_RESERVED28                 _MK_ENUM_CONST(28)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_RESERVED29                 _MK_ENUM_CONST(29)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_RESERVED30                 _MK_ENUM_CONST(30)
#define G2SB_CTX2_G2SBFORMAT_0_SIFMT_RESERVED31                 _MK_ENUM_CONST(31)

//Destination Image Data FormatThis parameter defines the data format of distination output.
// There are two groups of data formats, RGB and YCbCr (YUV) format.
// CbCr (UV) components may be represented in either offset binary or 2's complement.
//00000 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00001 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00010 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00011 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00100 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00101 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00110 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00111 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//01000 bpp16 5-6-5 {R[4:0], G[5:0], B[4:0]}
//01001 RESERVED
//01010 RESERVED
//01011 RESERVED
//01100 bpp16 5-6-5 Byte-swapped {G[2:0], B[4:0], R[4:0], G[5:3]}
//01101 RESERVED
//01110 R8G8B8A8
//01111 B8G8R8A8
//1xxxx RESERVED
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_FIELD                      (_MK_MASK_CONST(0x1f) << G2SB_CTX2_G2SBFORMAT_0_DIFMT_SHIFT)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_RANGE                      12:8
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_WOFFSET                    0x0
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_U8Y8V8Y8_OB                        _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_Y8U8Y8V8_OB                        _MK_ENUM_CONST(1)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_Y8V8Y8U8_OB                        _MK_ENUM_CONST(2)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_V8Y8U8Y8_OB                        _MK_ENUM_CONST(3)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_U8Y8V8Y8_TC                        _MK_ENUM_CONST(4)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_Y8U8Y8V8_TC                        _MK_ENUM_CONST(5)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_Y8V8Y8U8_TC                        _MK_ENUM_CONST(6)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_V8Y8U8Y8_TC                        _MK_ENUM_CONST(7)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_B5G6R5                     _MK_ENUM_CONST(8)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_RESERVED9                  _MK_ENUM_CONST(9)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_RESERVED10                 _MK_ENUM_CONST(10)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_RESERVED11                 _MK_ENUM_CONST(11)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_B5G6R5BS                   _MK_ENUM_CONST(12)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_RESERVED13                 _MK_ENUM_CONST(13)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_R8G8B8A8                   _MK_ENUM_CONST(14)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_B8G8R8A8                   _MK_ENUM_CONST(15)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_RESERVED16                 _MK_ENUM_CONST(16)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_RESERVED17                 _MK_ENUM_CONST(17)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_RESERVED18                 _MK_ENUM_CONST(18)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_RESERVED19                 _MK_ENUM_CONST(19)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_RESERVED20                 _MK_ENUM_CONST(20)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_RESERVED21                 _MK_ENUM_CONST(21)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_RESERVED22                 _MK_ENUM_CONST(22)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_RESERVED23                 _MK_ENUM_CONST(23)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_RESERVED24                 _MK_ENUM_CONST(24)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_RESERVED25                 _MK_ENUM_CONST(25)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_RESERVED26                 _MK_ENUM_CONST(26)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_RESERVED27                 _MK_ENUM_CONST(27)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_RESERVED28                 _MK_ENUM_CONST(28)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_RESERVED29                 _MK_ENUM_CONST(29)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_RESERVED30                 _MK_ENUM_CONST(30)
#define G2SB_CTX2_G2SBFORMAT_0_DIFMT_RESERVED31                 _MK_ENUM_CONST(31)

// ENABLE - SB needs to send a RAISE_BUFFER control bit to EPP
// DISABLE - do nothing.
#define G2SB_CTX2_G2SBFORMAT_0_RAISEBUFFEREN_SHIFT                      _MK_SHIFT_CONST(14)
#define G2SB_CTX2_G2SBFORMAT_0_RAISEBUFFEREN_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2SBFORMAT_0_RAISEBUFFEREN_SHIFT)
#define G2SB_CTX2_G2SBFORMAT_0_RAISEBUFFEREN_RANGE                      14:14
#define G2SB_CTX2_G2SBFORMAT_0_RAISEBUFFEREN_WOFFSET                    0x0
#define G2SB_CTX2_G2SBFORMAT_0_RAISEBUFFEREN_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SBFORMAT_0_RAISEBUFFEREN_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SBFORMAT_0_RAISEBUFFEREN_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SBFORMAT_0_RAISEBUFFEREN_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SBFORMAT_0_RAISEBUFFEREN_DISABLE                    _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2SBFORMAT_0_RAISEBUFFEREN_ENABLE                     _MK_ENUM_CONST(1)

// ENABLE - SB needs to send a RAISE_FRAME control bit to EPP
// DISABLE - do nothing.
#define G2SB_CTX2_G2SBFORMAT_0_RAISEFRAMEEN_SHIFT                       _MK_SHIFT_CONST(15)
#define G2SB_CTX2_G2SBFORMAT_0_RAISEFRAMEEN_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2SBFORMAT_0_RAISEFRAMEEN_SHIFT)
#define G2SB_CTX2_G2SBFORMAT_0_RAISEFRAMEEN_RANGE                       15:15
#define G2SB_CTX2_G2SBFORMAT_0_RAISEFRAMEEN_WOFFSET                     0x0
#define G2SB_CTX2_G2SBFORMAT_0_RAISEFRAMEEN_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SBFORMAT_0_RAISEFRAMEEN_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SBFORMAT_0_RAISEFRAMEEN_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SBFORMAT_0_RAISEFRAMEEN_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SBFORMAT_0_RAISEFRAMEEN_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2SBFORMAT_0_RAISEFRAMEEN_ENABLE                      _MK_ENUM_CONST(1)

// Raise buffer vector value.
#define G2SB_CTX2_G2SBFORMAT_0_RAISEBUFFERVALUE_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX2_G2SBFORMAT_0_RAISEBUFFERVALUE_FIELD                   (_MK_MASK_CONST(0xff) << G2SB_CTX2_G2SBFORMAT_0_RAISEBUFFERVALUE_SHIFT)
#define G2SB_CTX2_G2SBFORMAT_0_RAISEBUFFERVALUE_RANGE                   23:16
#define G2SB_CTX2_G2SBFORMAT_0_RAISEBUFFERVALUE_WOFFSET                 0x0
#define G2SB_CTX2_G2SBFORMAT_0_RAISEBUFFERVALUE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SBFORMAT_0_RAISEBUFFERVALUE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SBFORMAT_0_RAISEBUFFERVALUE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SBFORMAT_0_RAISEBUFFERVALUE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Raise Fram vector value.
#define G2SB_CTX2_G2SBFORMAT_0_RAISEFRAMEVALUE_SHIFT                    _MK_SHIFT_CONST(24)
#define G2SB_CTX2_G2SBFORMAT_0_RAISEFRAMEVALUE_FIELD                    (_MK_MASK_CONST(0xff) << G2SB_CTX2_G2SBFORMAT_0_RAISEFRAMEVALUE_SHIFT)
#define G2SB_CTX2_G2SBFORMAT_0_RAISEFRAMEVALUE_RANGE                    31:24
#define G2SB_CTX2_G2SBFORMAT_0_RAISEFRAMEVALUE_WOFFSET                  0x0
#define G2SB_CTX2_G2SBFORMAT_0_RAISEFRAMEVALUE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SBFORMAT_0_RAISEFRAMEVALUE_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SBFORMAT_0_RAISEFRAMEVALUE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SBFORMAT_0_RAISEFRAMEVALUE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2CONTROLSB_0  //{sb,sbm,index=1d}
#define G2SB_CTX2_G2CONTROLSB_0                 _MK_ADDR_CONST(0x801d)
#define G2SB_CTX2_G2CONTROLSB_0_SECURE                  0x0
#define G2SB_CTX2_G2CONTROLSB_0_WORD_COUNT                      0x1
#define G2SB_CTX2_G2CONTROLSB_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_RESET_MASK                      _MK_MASK_CONST(0xdfffa4f8)
#define G2SB_CTX2_G2CONTROLSB_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_READ_MASK                       _MK_MASK_CONST(0xdfffa7f8)
#define G2SB_CTX2_G2CONTROLSB_0_WRITE_MASK                      _MK_MASK_CONST(0xdfffa7f8)
//yuv422 plannar rotated
#define G2SB_CTX2_G2CONTROLSB_0_YUV422ROTATION_SHIFT                    _MK_SHIFT_CONST(3)
#define G2SB_CTX2_G2CONTROLSB_0_YUV422ROTATION_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLSB_0_YUV422ROTATION_SHIFT)
#define G2SB_CTX2_G2CONTROLSB_0_YUV422ROTATION_RANGE                    3:3
#define G2SB_CTX2_G2CONTROLSB_0_YUV422ROTATION_WOFFSET                  0x0
#define G2SB_CTX2_G2CONTROLSB_0_YUV422ROTATION_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_YUV422ROTATION_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLSB_0_YUV422ROTATION_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_YUV422ROTATION_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//source data is yuv422 planar valid when imode==PLANAR
#define G2SB_CTX2_G2CONTROLSB_0_YUV422PLANAR_SHIFT                      _MK_SHIFT_CONST(4)
#define G2SB_CTX2_G2CONTROLSB_0_YUV422PLANAR_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLSB_0_YUV422PLANAR_SHIFT)
#define G2SB_CTX2_G2CONTROLSB_0_YUV422PLANAR_RANGE                      4:4
#define G2SB_CTX2_G2CONTROLSB_0_YUV422PLANAR_WOFFSET                    0x0
#define G2SB_CTX2_G2CONTROLSB_0_YUV422PLANAR_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_YUV422PLANAR_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLSB_0_YUV422PLANAR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_YUV422PLANAR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Source (input) Data Mode  (IMODE) This parameter defines the data mode of source input.
// 0: Multiplexed Mode (data format is specified by SIFMT[2:0])
// One block of source data in the Image Buffer memory contains
// multiplexed component signals.
// 1: Planar mode, 4:2:0 YUV (SIFMT[2] specifies data format of U/V components)
// Three blocks of source data in the Image Buffer memory contain separate
// Y, U, and V component signals.
//
//  For circular buffer input to gr2d, the input format can not be planar.  It must be multiplex.
//    i.e. no YUV420 planar circular buffer input to gr2d.
#define G2SB_CTX2_G2CONTROLSB_0_IMODE_SHIFT                     _MK_SHIFT_CONST(5)
#define G2SB_CTX2_G2CONTROLSB_0_IMODE_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLSB_0_IMODE_SHIFT)
#define G2SB_CTX2_G2CONTROLSB_0_IMODE_RANGE                     5:5
#define G2SB_CTX2_G2CONTROLSB_0_IMODE_WOFFSET                   0x0
#define G2SB_CTX2_G2CONTROLSB_0_IMODE_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_IMODE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLSB_0_IMODE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_IMODE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_IMODE_MULTIPLEX                 _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLSB_0_IMODE_PLANAR                    _MK_ENUM_CONST(1)

//enable alpha vertical filter
#define G2SB_CTX2_G2CONTROLSB_0_ENAVF_SHIFT                     _MK_SHIFT_CONST(6)
#define G2SB_CTX2_G2CONTROLSB_0_ENAVF_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLSB_0_ENAVF_SHIFT)
#define G2SB_CTX2_G2CONTROLSB_0_ENAVF_RANGE                     6:6
#define G2SB_CTX2_G2CONTROLSB_0_ENAVF_WOFFSET                   0x0
#define G2SB_CTX2_G2CONTROLSB_0_ENAVF_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_ENAVF_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLSB_0_ENAVF_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_ENAVF_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_ENAVF_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLSB_0_ENAVF_ENABLE                    _MK_ENUM_CONST(1)

// enable horizontal alpha filtering
// if disabled, use the alpha value of third tap for output pixel
//U,V line stride in 4:2:0  Format,
#define G2SB_CTX2_G2CONTROLSB_0_ENAHF_SHIFT                     _MK_SHIFT_CONST(7)
#define G2SB_CTX2_G2CONTROLSB_0_ENAHF_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLSB_0_ENAHF_SHIFT)
#define G2SB_CTX2_G2CONTROLSB_0_ENAHF_RANGE                     7:7
#define G2SB_CTX2_G2CONTROLSB_0_ENAHF_WOFFSET                   0x0
#define G2SB_CTX2_G2CONTROLSB_0_ENAHF_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_ENAHF_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLSB_0_ENAHF_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_ENAHF_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_ENAHF_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLSB_0_ENAHF_ENABLE                    _MK_ENUM_CONST(1)

//   00= 1/2 of Luma Buffer Stride; in this case
//       Luma Buffer Stride should be multiple
//       of 2 bytes.
//   01= Equal to Luma Buffer Stride
//   10= 1/4 of Luma Buffer Stride; in this case
//       Luma Buffer Stride should be multiple
//       of 4 bytes.
//   11= use uvstride.
// Note: Use care when using a tiled surface, since 1/2 or 1/4
//   of luma stride may yield an invalid pitch (stride).
#define G2SB_CTX2_G2CONTROLSB_0_UVST_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_CTX2_G2CONTROLSB_0_UVST_FIELD                      (_MK_MASK_CONST(0x3) << G2SB_CTX2_G2CONTROLSB_0_UVST_SHIFT)
#define G2SB_CTX2_G2CONTROLSB_0_UVST_RANGE                      9:8
#define G2SB_CTX2_G2CONTROLSB_0_UVST_WOFFSET                    0x0
#define G2SB_CTX2_G2CONTROLSB_0_UVST_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_UVST_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_UVST_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_UVST_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_UVST_UVS2X                      _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLSB_0_UVST_UVS1X                      _MK_ENUM_CONST(1)
#define G2SB_CTX2_G2CONTROLSB_0_UVST_UVS4X                      _MK_ENUM_CONST(2)
#define G2SB_CTX2_G2CONTROLSB_0_UVST_UVS_G2UVSTRIDE                     _MK_ENUM_CONST(3)

// Source (input) Data Line Pairing  (SL)
// This parameter specifies one of two cases of Y vs. U/V line-pairing
// in the source data in 4:2:0 format.
// In the 4:2:0 format, there is one pair of U and V image-lines for
// every two Y image-lines.
//0 The first two Y image-lines share common pair of U and V image-lines.
//1 The first two Y image-lines are paired with two different
// pairs of U and V image-lines.
#define G2SB_CTX2_G2CONTROLSB_0_SL_SHIFT                        _MK_SHIFT_CONST(10)
#define G2SB_CTX2_G2CONTROLSB_0_SL_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLSB_0_SL_SHIFT)
#define G2SB_CTX2_G2CONTROLSB_0_SL_RANGE                        10:10
#define G2SB_CTX2_G2CONTROLSB_0_SL_WOFFSET                      0x0
#define G2SB_CTX2_G2CONTROLSB_0_SL_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_SL_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLSB_0_SL_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_SL_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_SL_COMMON_PAIR                  _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLSB_0_SL_DIFFERENT_PAIR                       _MK_ENUM_CONST(1)

// StretchBLT Source Provider Selection (SISEL)
// This bit indicates where the source images come from,  either the
// image buffer memory or system memory of the host CPU.  If source
//images come from host CPU, they come via CPU Read-FIFO.
//0 Image buffer memory.
//1 System memory of host CPU.
//14 Reserved
#define G2SB_CTX2_G2CONTROLSB_0_SISEL_SHIFT                     _MK_SHIFT_CONST(13)
#define G2SB_CTX2_G2CONTROLSB_0_SISEL_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLSB_0_SISEL_SHIFT)
#define G2SB_CTX2_G2CONTROLSB_0_SISEL_RANGE                     13:13
#define G2SB_CTX2_G2CONTROLSB_0_SISEL_WOFFSET                   0x0
#define G2SB_CTX2_G2CONTROLSB_0_SISEL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_SISEL_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLSB_0_SISEL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_SISEL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_SISEL_IMAGE_BUFFER                      _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLSB_0_SISEL_HOST                      _MK_ENUM_CONST(1)

// StretchBLT Source Selection  (SBLTSRC)
// CPU and VIP module can initiate StretchBLT operation. This bit indicates
// which one initiates current StretchBLT command. Depending on the initiator,
// appropriate source for the command execution request is selected. Whichever
// the initiator is, all the command parameters are supplied from the CPU (driver)
// through the G2 command-FIFO and shadow registers.
//0 CPU is the command initiator.
//1 VIP module is the command initiator.
#define G2SB_CTX2_G2CONTROLSB_0_SBLTSRC_SHIFT                   _MK_SHIFT_CONST(15)
#define G2SB_CTX2_G2CONTROLSB_0_SBLTSRC_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLSB_0_SBLTSRC_SHIFT)
#define G2SB_CTX2_G2CONTROLSB_0_SBLTSRC_RANGE                   15:15
#define G2SB_CTX2_G2CONTROLSB_0_SBLTSRC_WOFFSET                 0x0
#define G2SB_CTX2_G2CONTROLSB_0_SBLTSRC_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_SBLTSRC_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLSB_0_SBLTSRC_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_SBLTSRC_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_SBLTSRC_CPU                     _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLSB_0_SBLTSRC_VIP                     _MK_ENUM_CONST(1)

// StretchBLT Vertical Filter Mode (VFTYPE[1:0])
// This bit is effective when the Vertical Filter is enabled. (bit 18)
// The two-tap vertical interpolation filter can be operated in various modes.
// For the image expansion, it should be programmed as a pure 2-tap
// interpolator. For the image contraction, it can work as partly averager
// and partly interpolator with varying degree depending on the contraction ratio.
// For StretchBLT, this parameter is used as an index (selection) to
// an internal lookup table that stores the group of filter-coefficients for
// the different modes of vertical filtering.
//00 Pure interpolation filter.
//01 25% averager, 75% interpolator.
//10 50% averager, 50% interpolator.
//11 100% averager.
#define G2SB_CTX2_G2CONTROLSB_0_VFTYPE_SHIFT                    _MK_SHIFT_CONST(16)
#define G2SB_CTX2_G2CONTROLSB_0_VFTYPE_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX2_G2CONTROLSB_0_VFTYPE_SHIFT)
#define G2SB_CTX2_G2CONTROLSB_0_VFTYPE_RANGE                    17:16
#define G2SB_CTX2_G2CONTROLSB_0_VFTYPE_WOFFSET                  0x0
#define G2SB_CTX2_G2CONTROLSB_0_VFTYPE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_VFTYPE_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX2_G2CONTROLSB_0_VFTYPE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_VFTYPE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_VFTYPE_INTERP                   _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLSB_0_VFTYPE_AVG25_INTERP75                   _MK_ENUM_CONST(1)
#define G2SB_CTX2_G2CONTROLSB_0_VFTYPE_AVG50_INTERP50                   _MK_ENUM_CONST(2)
#define G2SB_CTX2_G2CONTROLSB_0_VFTYPE_AVG                      _MK_ENUM_CONST(3)

// StretchBLT Vertical Filter Enable (VFEN)
// Vertical filter shall be disabled if source images come from host CPU
// via CPU Read-FIFO. (SISEL)
// Vertical filter may be disabled to save some memory bandwidth but
// this will likely result in degradation of image quality.
// This option may also be used in the case where source image is progressive
// scanning and there is no vertical scaling.
//0 Vertical filter is disabled.
//1 Vertical filter is enabled.
#define G2SB_CTX2_G2CONTROLSB_0_VFEN_SHIFT                      _MK_SHIFT_CONST(18)
#define G2SB_CTX2_G2CONTROLSB_0_VFEN_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLSB_0_VFEN_SHIFT)
#define G2SB_CTX2_G2CONTROLSB_0_VFEN_RANGE                      18:18
#define G2SB_CTX2_G2CONTROLSB_0_VFEN_WOFFSET                    0x0
#define G2SB_CTX2_G2CONTROLSB_0_VFEN_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_VFEN_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLSB_0_VFEN_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_VFEN_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_VFEN_DISABLE                    _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLSB_0_VFEN_ENABLE                     _MK_ENUM_CONST(1)

// enabled color space converter by default
#define G2SB_CTX2_G2CONTROLSB_0_DISCSC_SHIFT                    _MK_SHIFT_CONST(19)
#define G2SB_CTX2_G2CONTROLSB_0_DISCSC_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLSB_0_DISCSC_SHIFT)
#define G2SB_CTX2_G2CONTROLSB_0_DISCSC_RANGE                    19:19
#define G2SB_CTX2_G2CONTROLSB_0_DISCSC_WOFFSET                  0x0
#define G2SB_CTX2_G2CONTROLSB_0_DISCSC_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_DISCSC_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLSB_0_DISCSC_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_DISCSC_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_DISCSC_ENABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLSB_0_DISCSC_DISABLE                  _MK_ENUM_CONST(1)

// StretchBLT Horizontal Filter Mode (HFTYPE[2:0])
// The six-tap horizontal interpolation filter can be operated in
// various operation modes. For the image expansion, it should be programmed
// as a pure 6-tap interpolator.  For the image contraction, it can work as
// partly lowpass filter and partly interpolater with varying degree depending
// the contraction ratio.
// For StretchBLT, this parameter is used as an index (selection)
// to an internal lookup table that stores the group of filter-coefficients
//for the different modes of horizontal filtering.
// 000: Pure interpolation filter.
// 001: 010 011 100 101 110: mix of interpolation and low pass filters
// 111: DISABLE.
#define G2SB_CTX2_G2CONTROLSB_0_HFTYPE_SHIFT                    _MK_SHIFT_CONST(20)
#define G2SB_CTX2_G2CONTROLSB_0_HFTYPE_FIELD                    (_MK_MASK_CONST(0x7) << G2SB_CTX2_G2CONTROLSB_0_HFTYPE_SHIFT)
#define G2SB_CTX2_G2CONTROLSB_0_HFTYPE_RANGE                    22:20
#define G2SB_CTX2_G2CONTROLSB_0_HFTYPE_WOFFSET                  0x0
#define G2SB_CTX2_G2CONTROLSB_0_HFTYPE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_HFTYPE_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define G2SB_CTX2_G2CONTROLSB_0_HFTYPE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_HFTYPE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_HFTYPE_INTERP                   _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLSB_0_HFTYPE_LPF1                     _MK_ENUM_CONST(1)
#define G2SB_CTX2_G2CONTROLSB_0_HFTYPE_LPF2                     _MK_ENUM_CONST(2)
#define G2SB_CTX2_G2CONTROLSB_0_HFTYPE_LPF3                     _MK_ENUM_CONST(3)
#define G2SB_CTX2_G2CONTROLSB_0_HFTYPE_LPF4                     _MK_ENUM_CONST(4)
#define G2SB_CTX2_G2CONTROLSB_0_HFTYPE_LPF5                     _MK_ENUM_CONST(5)
#define G2SB_CTX2_G2CONTROLSB_0_HFTYPE_LPF6                     _MK_ENUM_CONST(6)
#define G2SB_CTX2_G2CONTROLSB_0_HFTYPE_DISABLE                  _MK_ENUM_CONST(7)

//In the VC-1 specification, when the value of RANGEREDFRM variable (1-bit)
//  for a picture is equal to 1, the picture shall be scaled up according
// to the following equation:
//Y = clip( (( Y-128)*2) + 128);
//Cb = clip( ((Cb-128)*2) + 128);
//Cr = clip( ((Cr-128)*2) + 128);
//The clip operator limits the output to [0, 255].
//The input is also limited to [0, 255].
//In the VC-1 nomenclature, the output (Y, Cb, Cr) tuple corresponds to
// the 'decoded' picture. The input (Y, Cb, Cr) tuple corresponds to
// the 'reconstructed' picture.
// The above equations create the decoded picture while keeping
// the reconstructed picture intact.
//Only YUV _OB formats are supported with range reducation enabled,
// not the YUV _TC or RGB formats.
//----------------------------------------------------
//At PortalPlayer this functionality was implemented in the DVO module.
// The YUV data coming from the video frame buffers (reconstructed picture)
//  in the SDRAM was scaled up using the above equations and given to the display.
// the value of 1-bit wide RANGEREDFRM variable was configured in the DVO per frame
// and the frame was scaled whenever RANGEREDFRM == 1.
#define G2SB_CTX2_G2CONTROLSB_0_RANGEREDFRM_SHIFT                       _MK_SHIFT_CONST(23)
#define G2SB_CTX2_G2CONTROLSB_0_RANGEREDFRM_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLSB_0_RANGEREDFRM_SHIFT)
#define G2SB_CTX2_G2CONTROLSB_0_RANGEREDFRM_RANGE                       23:23
#define G2SB_CTX2_G2CONTROLSB_0_RANGEREDFRM_WOFFSET                     0x0
#define G2SB_CTX2_G2CONTROLSB_0_RANGEREDFRM_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_RANGEREDFRM_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLSB_0_RANGEREDFRM_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_RANGEREDFRM_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_RANGEREDFRM_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLSB_0_RANGEREDFRM_ENABLE                      _MK_ENUM_CONST(1)

// StretchBLT Source Type (SITYPE)
// This bit identifies two types of source images. If source image is 2-to-1
// interlaced and StretchBLT processes either one of the two interlaced
// field-images, physical (positional) displacement between the two
// interlaced fields must be taken into account.  One field-image that is
// placed higher in position than the other field-image is called top-field
// and the other is called bottom-field. StretchBLT processing has to
// lower the top-field (or raise the bottom-field) to match the corresponding
// two target images in the overlay window (that is progressively scanned)
// right at the same position.   If source image is full frame-image
// obtained from two interlaced field-images, its type is ?top-field?.
// If source images are progressively scanned, the type identification is not
// significant and they may be designated either one of the two types
//0 Source image is ?top-field?.
//1 Source image is ?bottom-field?.
#define G2SB_CTX2_G2CONTROLSB_0_SITYPE_SHIFT                    _MK_SHIFT_CONST(24)
#define G2SB_CTX2_G2CONTROLSB_0_SITYPE_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLSB_0_SITYPE_SHIFT)
#define G2SB_CTX2_G2CONTROLSB_0_SITYPE_RANGE                    24:24
#define G2SB_CTX2_G2CONTROLSB_0_SITYPE_WOFFSET                  0x0
#define G2SB_CTX2_G2CONTROLSB_0_SITYPE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_SITYPE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLSB_0_SITYPE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_SITYPE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_SITYPE_TOP_FIELD                        _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLSB_0_SITYPE_BOTTOM_FIELD                     _MK_ENUM_CONST(1)

// StretchBLT Source Buffer Selection (SBSEL)
// StretchBLT processing involves frame-rate conversion from a
// series of source images to another series of destination images
// (field-rate of the source video to frame-rate of the PC display).
// In order to avoid image tearing, it is preferred to use two buffer
// sections in the source video area. This bit selects one of the two
// buffering blocks from which this StretchBLT command receives the source image.
// The two buffering memory blocks are called source-A and source-B.
//0 Source image comes from ?source-A? buffer.
//1 Source image comes from ?source-B? buffer.
#define G2SB_CTX2_G2CONTROLSB_0_SBSEL_SHIFT                     _MK_SHIFT_CONST(25)
#define G2SB_CTX2_G2CONTROLSB_0_SBSEL_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLSB_0_SBSEL_SHIFT)
#define G2SB_CTX2_G2CONTROLSB_0_SBSEL_RANGE                     25:25
#define G2SB_CTX2_G2CONTROLSB_0_SBSEL_WOFFSET                   0x0
#define G2SB_CTX2_G2CONTROLSB_0_SBSEL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_SBSEL_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLSB_0_SBSEL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_SBSEL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_SBSEL_SRC_A                     _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLSB_0_SBSEL_SRC_B                     _MK_ENUM_CONST(1)

// StretchBLT Destination Buffer Selection (DBSEL)
// StretchBLT processing involves frame-rate conversion from a series of
// source images to another series of destination images (field-rate of
// the source video to frame-rate of the PC display). In order to avoid
// image tearing, it is preferred to use two buffer sections in the destination
// video area.  This bit selects one of the two buffering blocks to which this
// StretchBLT command delivers the destination image.
// The two buffering memory blocks are called A and B.
//0 Destination image goes to ?A? buffer.
//1 Destination image goes to ?B? buffer.
#define G2SB_CTX2_G2CONTROLSB_0_DBSEL_SHIFT                     _MK_SHIFT_CONST(26)
#define G2SB_CTX2_G2CONTROLSB_0_DBSEL_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLSB_0_DBSEL_SHIFT)
#define G2SB_CTX2_G2CONTROLSB_0_DBSEL_RANGE                     26:26
#define G2SB_CTX2_G2CONTROLSB_0_DBSEL_WOFFSET                   0x0
#define G2SB_CTX2_G2CONTROLSB_0_DBSEL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_DBSEL_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLSB_0_DBSEL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_DBSEL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_DBSEL_DST_A                     _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLSB_0_DBSEL_DST_B                     _MK_ENUM_CONST(1)

// Key Signal Generator Enable (KEYEN) Key signal generator generates either
// chroma key signal (from YCbCr signal) or color key signal (from RGB signal)
//0 Key signal generator is disabled.
//1 Key signal generator is enabled.
#define G2SB_CTX2_G2CONTROLSB_0_KEYEN_SHIFT                     _MK_SHIFT_CONST(27)
#define G2SB_CTX2_G2CONTROLSB_0_KEYEN_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLSB_0_KEYEN_SHIFT)
#define G2SB_CTX2_G2CONTROLSB_0_KEYEN_RANGE                     27:27
#define G2SB_CTX2_G2CONTROLSB_0_KEYEN_WOFFSET                   0x0
#define G2SB_CTX2_G2CONTROLSB_0_KEYEN_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_KEYEN_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLSB_0_KEYEN_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_KEYEN_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_KEYEN_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLSB_0_KEYEN_ENABLE                    _MK_ENUM_CONST(1)

// Key Signal Polarity (KPOL)
// Color/Chroma key signal is generated by comparing source input pixel
// color to a range of a color specified by lower and upper limit values.
// The key signal is interpreted in two ways, depending on which one of
// video and graphics images is foreground (and the other is background).
// This is effective only if Key signal generator is enabled.
// (see G2CMKEYL, G2CMKEYU)
// 0 Key signal is set to 1 when source pixel is within the lower and upper
// limit color range.
// 1 Key signal is set to 1 when source pixel is outside the lower and upper
// limit color range.
#define G2SB_CTX2_G2CONTROLSB_0_KPOL_SHIFT                      _MK_SHIFT_CONST(28)
#define G2SB_CTX2_G2CONTROLSB_0_KPOL_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLSB_0_KPOL_SHIFT)
#define G2SB_CTX2_G2CONTROLSB_0_KPOL_RANGE                      28:28
#define G2SB_CTX2_G2CONTROLSB_0_KPOL_WOFFSET                    0x0
#define G2SB_CTX2_G2CONTROLSB_0_KPOL_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_KPOL_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLSB_0_KPOL_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_KPOL_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_KPOL_WITHIN_BOUNDS                      _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLSB_0_KPOL_OUTSIDE_BOUNDS                     _MK_ENUM_CONST(1)

// Enable Dithering (ENDITH)
// For 16 bit RGB output modes, the LSB of the color components can be
// modified by adding a variable residual value that will reduce the banding
// artifacts that can appear on the display.
// 0 Normal operation
// 1 Enable Dithering
#define G2SB_CTX2_G2CONTROLSB_0_ENDITH_SHIFT                    _MK_SHIFT_CONST(30)
#define G2SB_CTX2_G2CONTROLSB_0_ENDITH_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLSB_0_ENDITH_SHIFT)
#define G2SB_CTX2_G2CONTROLSB_0_ENDITH_RANGE                    30:30
#define G2SB_CTX2_G2CONTROLSB_0_ENDITH_WOFFSET                  0x0
#define G2SB_CTX2_G2CONTROLSB_0_ENDITH_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_ENDITH_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLSB_0_ENDITH_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_ENDITH_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_ENDITH_DISABLE                  _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLSB_0_ENDITH_ENABLE                   _MK_ENUM_CONST(1)

//output destination writes (dw) go either to image memory or epp
//0 Output data is sent to memory
//1 YUV or RGB data is passed directly to EPP module and no destination writes
//  will take place.
#define G2SB_CTX2_G2CONTROLSB_0_DISDW_SHIFT                     _MK_SHIFT_CONST(31)
#define G2SB_CTX2_G2CONTROLSB_0_DISDW_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLSB_0_DISDW_SHIFT)
#define G2SB_CTX2_G2CONTROLSB_0_DISDW_RANGE                     31:31
#define G2SB_CTX2_G2CONTROLSB_0_DISDW_WOFFSET                   0x0
#define G2SB_CTX2_G2CONTROLSB_0_DISDW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_DISDW_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLSB_0_DISDW_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_DISDW_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSB_0_DISDW_GOTO_IMAGE_BUFFER                 _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLSB_0_DISDW_GOTO_EPP                  _MK_ENUM_CONST(1)


// Register G2SB_CTX2_G2CONTROLSECOND_0  //{host,2d,index=1e}
#define G2SB_CTX2_G2CONTROLSECOND_0                     _MK_ADDR_CONST(0x801e)
#define G2SB_CTX2_G2CONTROLSECOND_0_SECURE                      0x0
#define G2SB_CTX2_G2CONTROLSECOND_0_WORD_COUNT                  0x1
#define G2SB_CTX2_G2CONTROLSECOND_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_RESET_MASK                  _MK_MASK_CONST(0x3f61c3fe)
#define G2SB_CTX2_G2CONTROLSECOND_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_READ_MASK                   _MK_MASK_CONST(0x3f71c3fe)
#define G2SB_CTX2_G2CONTROLSECOND_0_WRITE_MASK                  _MK_MASK_CONST(0x3f71c3fe)
// Host port bit swap 1=enable   0= disable
//   1= enable
#define G2SB_CTX2_G2CONTROLSECOND_0_BITSWAP_SHIFT                       _MK_SHIFT_CONST(1)
#define G2SB_CTX2_G2CONTROLSECOND_0_BITSWAP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLSECOND_0_BITSWAP_SHIFT)
#define G2SB_CTX2_G2CONTROLSECOND_0_BITSWAP_RANGE                       1:1
#define G2SB_CTX2_G2CONTROLSECOND_0_BITSWAP_WOFFSET                     0x0
#define G2SB_CTX2_G2CONTROLSECOND_0_BITSWAP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_BITSWAP_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLSECOND_0_BITSWAP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_BITSWAP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_BITSWAP_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLSECOND_0_BITSWAP_ENABLE                      _MK_ENUM_CONST(1)

// Host port byte swap 1=enable   0= disable
//   1= enable
#define G2SB_CTX2_G2CONTROLSECOND_0_BEBSWAP_SHIFT                       _MK_SHIFT_CONST(2)
#define G2SB_CTX2_G2CONTROLSECOND_0_BEBSWAP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLSECOND_0_BEBSWAP_SHIFT)
#define G2SB_CTX2_G2CONTROLSECOND_0_BEBSWAP_RANGE                       2:2
#define G2SB_CTX2_G2CONTROLSECOND_0_BEBSWAP_WOFFSET                     0x0
#define G2SB_CTX2_G2CONTROLSECOND_0_BEBSWAP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_BEBSWAP_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLSECOND_0_BEBSWAP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_BEBSWAP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_BEBSWAP_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLSECOND_0_BEBSWAP_ENABLE                      _MK_ENUM_CONST(1)

// Host port word swap 1=enable   0= disable
#define G2SB_CTX2_G2CONTROLSECOND_0_BEWSWAP_SHIFT                       _MK_SHIFT_CONST(3)
#define G2SB_CTX2_G2CONTROLSECOND_0_BEWSWAP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLSECOND_0_BEWSWAP_SHIFT)
#define G2SB_CTX2_G2CONTROLSECOND_0_BEWSWAP_RANGE                       3:3
#define G2SB_CTX2_G2CONTROLSECOND_0_BEWSWAP_WOFFSET                     0x0
#define G2SB_CTX2_G2CONTROLSECOND_0_BEWSWAP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_BEWSWAP_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLSECOND_0_BEWSWAP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_BEWSWAP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_BEWSWAP_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLSECOND_0_BEWSWAP_ENABLE                      _MK_ENUM_CONST(1)

// Alpha blending method
// FIX:
//   ALPHA blending:  Fixed alpha,  ALPHA is the value, B5G6R5 * B5G6R5
//   VCAA:            B5G6R5->B5G6R5
// PL1BPP:
//   ALPHA blending:  Alpha 1bit/pixel from memory plane, B5G6R5 * B5G6R5
//      NOTE: when ALPTYPE is PL1BPP, DSTX[2:0] must be zero, see bug 344489
// PL2BPP:
//   ALPHA blending:  Alpha 2bits/pixel from memory plane, B5G6R5 * B5G6R5
//      NOTE: when ALPTYPE is PL2BPP, DSTX[1:0] must be zero, see bug 344489
// PL4BPP:
//   ALPHA blending:  Alpha 4bits/pixel from memory plane, B5G6R5 * B5G6R5
//      NOTE: when ALPTYPE is PL4BPP, DSTX[0:0] must be zero, see bug 344489
// PL8BPP:
//   ALPHA blending:  Alpha 8bits/pixel from memory plane, B5G6R5 * B5G6R5
// PL44BPP:
//   ALPHA blending:  Alpha 8bits/pixel from memory plane src*4bits+dst*4bits, B5G6R5 * B5G6R5
// PLS1BPP:
//   ALPHA blending:  Alpha 1bit from source B5G5R5A1, alpha(MSB). Dest: B5G6R5.
//   VCAA:            reserved
// PLS4BPPAL:
//   ALPHA blending:  Alpha 4bits from source A4B4G4R4, alpha(LSB). Dest: B5G6R5.
// PLS4BPP:
//   ALPHA blending:  Alpha 4bits from source B4G4R4A4, alpha(MSB). Dest: B5G6R5.
//   VCAA:            R8G8B8A8->B5G6R5 without reading VCAA plane
//                     (surface blit with bpp down convert - implemented in hw by vcaa engine; not really a vcaa resolve)
// PLS8BPP:
//   ALPHA blending:  Alpha 8bits from source/destination(decided by ALPSRCORDST),
//                    R8G8B8A8, alpha(MSB). DST: R8G8B8A8
//   VCAA:            R8G8B8A8->R8G8B8A8, alpha has same blending method as RGB
// PLS8BX:
//   ALPHA blending:  Alpha 8bits from source B8G8R8A8, alpha(MSB). Dest: B5G6R5. (**Restrictions)
//   VCAA:            R8G8B8A8->B5G6R5
// PLS1BPPAL:
//   ALPHA blending:  Alpha 1 bit from source A1B5G5R5, alpha(LSB). Dest: B5G6R5
//   VCAA:            A1B5G5R5->A1B5G5R5
// **Restriction
// PLS8BX alpha blending has the following restrictions
// 1. Source/destination addresses have to be in 128bit boundary.
// 2. Destination width has to be multiple of 4 pixels.
// 3. Source/Destination strides have to be multiple of 128bits.
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPTYPE_SHIFT                       _MK_SHIFT_CONST(4)
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPTYPE_FIELD                       (_MK_MASK_CONST(0x1f) << G2SB_CTX2_G2CONTROLSECOND_0_ALPTYPE_SHIFT)
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPTYPE_RANGE                       8:4
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPTYPE_WOFFSET                     0x0
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPTYPE_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPTYPE_DEFAULT_MASK                        _MK_MASK_CONST(0x1f)
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPTYPE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPTYPE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPTYPE_FIX                 _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPTYPE_PL1BPP                      _MK_ENUM_CONST(1)
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPTYPE_PL2BPP                      _MK_ENUM_CONST(2)
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPTYPE_PL4BPP                      _MK_ENUM_CONST(3)
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPTYPE_PL8BPP                      _MK_ENUM_CONST(4)
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPTYPE_PL44BPP                     _MK_ENUM_CONST(5)
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPTYPE_PLS1BPP                     _MK_ENUM_CONST(6)
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPTYPE_PLS4BPPAL                   _MK_ENUM_CONST(7)
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPTYPE_PLS4BPP                     _MK_ENUM_CONST(8)
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPTYPE_PLS8BPP                     _MK_ENUM_CONST(9)
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPTYPE_PLS8BX                      _MK_ENUM_CONST(10)
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPTYPE_PLS1BPPAL                   _MK_ENUM_CONST(11)

// 32bits blending mode, output alpha selection 0:source alpha, 1:destination alpha
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPSRCORDST_SHIFT                   _MK_SHIFT_CONST(9)
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPSRCORDST_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLSECOND_0_ALPSRCORDST_SHIFT)
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPSRCORDST_RANGE                   9:9
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPSRCORDST_WOFFSET                 0x0
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPSRCORDST_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPSRCORDST_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPSRCORDST_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPSRCORDST_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPSRCORDST_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLSECOND_0_ALPSRCORDST_ENABLE                  _MK_ENUM_CONST(1)

// Pixel replication for Palm OS.
#define G2SB_CTX2_G2CONTROLSECOND_0_PXLREP_SHIFT                        _MK_SHIFT_CONST(14)
#define G2SB_CTX2_G2CONTROLSECOND_0_PXLREP_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLSECOND_0_PXLREP_SHIFT)
#define G2SB_CTX2_G2CONTROLSECOND_0_PXLREP_RANGE                        14:14
#define G2SB_CTX2_G2CONTROLSECOND_0_PXLREP_WOFFSET                      0x0
#define G2SB_CTX2_G2CONTROLSECOND_0_PXLREP_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_PXLREP_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLSECOND_0_PXLREP_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_PXLREP_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_PXLREP_DISABLE                      _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLSECOND_0_PXLREP_ENABLE                       _MK_ENUM_CONST(1)

// Used by Palm OS to highlight a selected icon by swapping
//  Background and Foreground colors in a rectangle area
#define G2SB_CTX2_G2CONTROLSECOND_0_SWAPBLT_SHIFT                       _MK_SHIFT_CONST(15)
#define G2SB_CTX2_G2CONTROLSECOND_0_SWAPBLT_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLSECOND_0_SWAPBLT_SHIFT)
#define G2SB_CTX2_G2CONTROLSECOND_0_SWAPBLT_RANGE                       15:15
#define G2SB_CTX2_G2CONTROLSECOND_0_SWAPBLT_WOFFSET                     0x0
#define G2SB_CTX2_G2CONTROLSECOND_0_SWAPBLT_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_SWAPBLT_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLSECOND_0_SWAPBLT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_SWAPBLT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//VCAA safe mode, if turned on, all up/bottom color data will be read in. This is a debug/cya incase the top/bottom color
//  fetch is broken.
#define G2SB_CTX2_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_CTX2_G2CONTROLSECOND_0_VCAA_SAFE_MODE_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SHIFT)
#define G2SB_CTX2_G2CONTROLSECOND_0_VCAA_SAFE_MODE_RANGE                        16:16
#define G2SB_CTX2_G2CONTROLSECOND_0_VCAA_SAFE_MODE_WOFFSET                      0x0
#define G2SB_CTX2_G2CONTROLSECOND_0_VCAA_SAFE_MODE_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_VCAA_SAFE_MODE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_VCAA_SAFE_MODE_DISABLE                      _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLSECOND_0_VCAA_SAFE_MODE_ENABLE                       _MK_ENUM_CONST(1)

#define G2SB_CTX2_G2CONTROLSECOND_0_G2NOSTOP_SHIFT                      _MK_SHIFT_CONST(20)
#define G2SB_CTX2_G2CONTROLSECOND_0_G2NOSTOP_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLSECOND_0_G2NOSTOP_SHIFT)
#define G2SB_CTX2_G2CONTROLSECOND_0_G2NOSTOP_RANGE                      20:20
#define G2SB_CTX2_G2CONTROLSECOND_0_G2NOSTOP_WOFFSET                    0x0
#define G2SB_CTX2_G2CONTROLSECOND_0_G2NOSTOP_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_G2NOSTOP_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_G2NOSTOP_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_G2NOSTOP_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Clipping rectangle control,
// if clip enable, bit 57 XYTDW should be cleared.
// 0x=clipping disabled,
// 10=draw only inside clipping rectangle,
// 11=draw only outside clipping rectangle
#define G2SB_CTX2_G2CONTROLSECOND_0_CLIPC_SHIFT                 _MK_SHIFT_CONST(21)
#define G2SB_CTX2_G2CONTROLSECOND_0_CLIPC_FIELD                 (_MK_MASK_CONST(0x3) << G2SB_CTX2_G2CONTROLSECOND_0_CLIPC_SHIFT)
#define G2SB_CTX2_G2CONTROLSECOND_0_CLIPC_RANGE                 22:21
#define G2SB_CTX2_G2CONTROLSECOND_0_CLIPC_WOFFSET                       0x0
#define G2SB_CTX2_G2CONTROLSECOND_0_CLIPC_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_CLIPC_DEFAULT_MASK                  _MK_MASK_CONST(0x3)
#define G2SB_CTX2_G2CONTROLSECOND_0_CLIPC_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_CLIPC_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Fast Rotate mode sel
//------------------------------------------------------------------
// G2 Fast Rotate
//
// Transforms a surface via FR_TYPE transformation.
// Works in either 2-buffer (copy)  or 1-buffer mode (in place) mode.
// The engine breaks down a larger surface into a grid of smaller FR_BLOCKs.
// Works on the granularity of an FR_BLOCK.  An FR_BLOCK is:
//   16x16 pixel block (DSTCD = bpp8)
//    8x8  pixel block (DSTCD = bpp16)
//    4x4  pixel block (DSTCD = bpp32)
// Max surface size is 4096x4096
//
// Key information
//  - source and destination base address must be 128-bit word aligned
//  - engine works on FR_BLOCK granularity:
//      transformed surface width  in multiples of 16-bytes**
//      transformed surface height in multiples of 16/8/4 lines for bpp8/bpp16/bpp32 FR_BLOCK
//      if surface dimension is not a multiple, sw can program FR engine to transform larger surface
//         (round up to next FR_BLOCK in width and height-->transform-->calculate relative memory pointer address)
//  - during a rotational transformation (TRANS_LR, TRANS_RL, ROT_90, ROT_270):
//      the stride of the output surface != the stride of the input surface when working on non-square input
//      input:                        output:
//      *^----------------------           *$----------------------
//      $ 0  1  2  3  4  5  6  7           ^ 24 16 8  0  ^  ^  ^  ^
//      | 8  9 10 11 12 13 14 15           | 25 17 9  1  ^  ^  ^  ^
//      |16 17 18 19 20 21 22 23           | 26 18 10 2  ^  ^  ^  ^
//      |24 25 26 27 28 29 30 31           | 27 19 11 3  ^  ^  ^  ^
//      | -  -  -  -  *  *  *  *           | 28 20 12 4  *  *  *  *
//      | -  -  -  -  *  *  *  *           | 29 21 13 5  *  *  *  *
//      | -  -  -  -  *  *  *  *           | 30 22 14 6  *  *  *  *
//      | -  -  -  -  *  *  *  *           | 31 23 15 7  *  *  *  *
//
//  - Tiling alignment restrictions subsume FR restrictions because the
//    FR surface base address is the same as the start address.
//
//  Register Programming
//  ====================
//   FR_MODE - inplace or copy
//   FR_TYPE - type of transformation
//   DSTCD - bpp8, bpp16, bpp32
//   SRCBA - source base address
//   SRCWIDTH - (width in pixels-1)
//   SRCHEIGHT - (height in lines-1)
//   SRCS - source stride
//   DSTBA - dest base address
//   DSTS - dest stride
//   FR_READWAIT - always set to enable
//
// FR inefficency in the following setup :
// 1. FR_MODE==SQUARE
// 2. if(FR_TYPE==YFLIP && SRCHEIGHT==m*n && n==odd number) where m=8bpp?16:16bpp?8:4
//    Or if(FR_TYPE==XFLIP && SRCWIDTH==m*n && n==odd number) where m=8bpp?16:16bpp?8:4
// 3. Then, the middle 8 lines/pixels, E.G. YFLIP/16bpp/n==3, line8 to line15 will be processed twice. 00 = disable fast rotate - this turns off the 2nd level clock to fr_rotate engine.  Please remember to do so!
// 01 = src/dst copy mode - two separate buffers
// 10 = square in place - one buffer
// 11 = blank
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_MODE_SHIFT                       _MK_SHIFT_CONST(24)
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_MODE_FIELD                       (_MK_MASK_CONST(0x3) << G2SB_CTX2_G2CONTROLSECOND_0_FR_MODE_SHIFT)
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_MODE_RANGE                       25:24
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_MODE_WOFFSET                     0x0
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_MODE_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_MODE_DEFAULT_MASK                        _MK_MASK_CONST(0x3)
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_MODE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_MODE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_MODE_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_MODE_SRC_DST_COPY                        _MK_ENUM_CONST(1)
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_MODE_SQUARE                      _MK_ENUM_CONST(2)
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_MODE_BLANK                       _MK_ENUM_CONST(3)

//  Fast Rotate type     000 = FLIP_X
// 001 = FLIP_Y
// 010 = TRANS_LR (mirrors about diagonal. Diagonal runs from upper left to lower right)
// 011 = TRANS_RL (mirrors about diagonal. Diagonal runs from upper right to lower left)
// 100 = ROT_90 (counter clock wise by 90 degrees)
// 101 = ROT_180
// 110 = ROT_270 (clock wise by 90 degrees)
// 111 = IDENTITY
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_TYPE_SHIFT                       _MK_SHIFT_CONST(26)
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_TYPE_FIELD                       (_MK_MASK_CONST(0x7) << G2SB_CTX2_G2CONTROLSECOND_0_FR_TYPE_SHIFT)
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_TYPE_RANGE                       28:26
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_TYPE_WOFFSET                     0x0
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_TYPE_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_TYPE_DEFAULT_MASK                        _MK_MASK_CONST(0x7)
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_TYPE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_TYPE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_TYPE_FLIP_X                      _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_TYPE_FLIP_Y                      _MK_ENUM_CONST(1)
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_TYPE_TRANS_LR                    _MK_ENUM_CONST(2)
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_TYPE_TRANS_RL                    _MK_ENUM_CONST(3)
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_TYPE_ROT_90                      _MK_ENUM_CONST(4)
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_TYPE_ROT_180                     _MK_ENUM_CONST(5)
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_TYPE_ROT_270                     _MK_ENUM_CONST(6)
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_TYPE_IDENTITY                    _MK_ENUM_CONST(7)

//  Fast Rotate wait for read 0 = disable
// 1 = enable
// Enabling this bit forces FR to wait for the reads to be stored
// in the data return fifo before started to send writes out to
// the same block.
//
// Always set to ENABLE.  This is debug only.
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_READWAIT_SHIFT                   _MK_SHIFT_CONST(29)
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_READWAIT_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLSECOND_0_FR_READWAIT_SHIFT)
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_READWAIT_RANGE                   29:29
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_READWAIT_WOFFSET                 0x0
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_READWAIT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_READWAIT_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_READWAIT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_READWAIT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_READWAIT_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLSECOND_0_FR_READWAIT_ENABLE                  _MK_ENUM_CONST(1)

//----------------------------------------------------------------------
//
// G2 Blit Formats:
// (1) G2 Blit size is based on height in lines, width in pixels,
//     stride in bytes, and pixel size (color depth). Unless alpha
//     blending is enabled, G2 doesn't care about pixel components.
//
//     Source color depths supported by G2 Blit:
//     =========================================
//       color depth same as destination: G2CONTROLMAIN.SRCCD = 1
//       monochrome:                      G2CONTROLMAIN.SRCCD = 0
//       (source monochrome color determined by G2SRCBGC, G2SRCFGC)
//
//     Pattern color depths supported by G2 Blit:
//     =========================================
//       color depth same as destination: G2PATOS.PATCD = 1
//       monochrome:                      G2PATOS.PATCD = 0
//       (pattern monochrome color determined by G2PATBGC, G2PATFGC)
//
//     Destination color depths supported by G2 Blit:
//     ==============================================
//       1 byte per pixel:    G2CONTROLMAIN.DSTCD = BPP8
//       2 bytes per pixel:   G2CONTROLMAIN.DSTCD = BPP16
//       4 bytes per pixel:   G2CONTROLMAIN.DSTCD = BPP32
//
// (2) Alpha blending operates on 3 or 4 component pixels of a specified
//     color depth. One of the components may be alpha (A), depending on the
//     alpha blend format, which is only allowed in certain component
//     positions defined below. The only format rule of the remaining
//     components is that they must be in the same source and destination
//     position because the alpha blend engine does not support component
//     swapping. For example, valid 32BPP formats are: RGBA_8888->RGBA_8888,
//     BGRA_8888->BGRA_8888, GRBA_8888->GRBA_8888, etc.
//
//     Source formats supported by G2 alpha blend:
//     ===========================================
//       color depth BPP8:  no supported formats
//       color depth BPP16:
//          ALPTYPE_PLS1BPP: xxxA_5551 (ex: BGRA_5551 = A[15] R[14:10] G[9:5] B[4:0])
//          ALPTYPE_PLS4BPP: xxxA_4444 (ex: BGRA_4444 = A[15:12] R[11:8] G[7:4] B[3:0])
//          (other)        : xxx_565   (ex: BGR_565   = R[15:11] G[10:5] B[4:0])
//       color depth BPP32:
//          (all)          : xxxA_8888 (ex: BRGA_8888 = A[31:24] R[23:16] G[15:8] B[7:0])
//
//
//     Destination formats supported by G2 alpha blend:
//     ================================================
//       color depth BPP8:  no supported formats
//       color depth BPP16: xxx_565   (ex: BGR_565   = R[15:11] G[10:5] B[4:0])
//       color depth BPP32: xxxA_8888 (ex: BRGA_8888 = A[31:24] R[23:16] G[15:8] B[7:0])
//
//     The following table
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     | src cd  |   src format                  | dst cd  | dst format     | examples:                                  |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP8   |  no support                   |  BPP8   | no support     |                                            |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP16  | xyzA_5551, xyzA_4444, xyz_565 |  BPP16  | xyz_565        | BGRA_5551->BGR_565, RGB_565->RGB565        |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP32  | xyzA_8888                     |  BPP32  | xyzA_8888      | RGBA_8888->RGBA_8888, BGRA_8888->BGRA_8888 |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP32  | xyzA_8888                     |  BPP16  | xyz_565        | RGBA_8888->RGB_565, BGRA_8888->BGR_565     |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//
//----------------------------------------------------------
// VCAA Resolve engine
//
// (1) Format support
//
// +-----------------+--------------------+----------------------+
// | srcColor format | srcCoverage format | legal dest format(s) |
// +-----------------+--------------------+----------------------+
// |     A1B5G5R5    |        VCAA        |       A1B5G5R5       |
// +-----------------+--------------------+----------------------+
// |     R8G8B8A8    |        VCAA        |   R8G8B8A8, B5G6R5   |
// +-----------------+--------------------+----------------------+
// |      B5G6R5     |        VCAA        |         B5G6R5       |
// +-----------------+--------------------+----------------------+
//
// To program resolve type:
//   ALPTYPE == FIX:       B5G6R5   -> B5G6R5
//   ALPTYPE == PLS1BPPAL: A1B5G5R5 -> A1B5G5R5
//   ALPTYPE == PLS8BPP:   R8G8B8A8 -> R8G8B8A8
//   ALPTYPE == PLS8BX:    R8G8B8A8 -> B5G6R5
//
// (2) Color surface programming
//
//     color surface base address:  SRCBA
//       sub-surface start x:       SRCX      (pixel index)
//       sub-surface start y:       SRCY      (line index)
//     color surface stride:        SRCS      (bytes)
//
//     The engine supports sub-surface resolve.  One can imagine a full color buffer of 1024x768, but
//
//     [pseudo_code]
//       color_surface_start_address_fetch = pcurctx->regs.rG2SRCBA.uSRCBA() +
//        (pcurctx->regs.rG2SRCPS.uSRCX() * VCAAState.color_surface_depth) +
//        (pcurctx->regs.rG2SRCPS.uSRCY() * VCAAState.color_surface_stride);
//
// (3) VCAA surface programming
//
//     vcaa surface base address:   PATBA
//     vcaa surface stride:         PATST     (bytes)
//
//     [pseudo_code]
//       vcaa_surface_start_address_fetch = pcurctx->regs.rG2PATBA.uPATBA();
//
//       SW *MUST* directly program this register to the proper sub-surface location in the vcaa surface
//        which corresponds to the SRCX and SRCY programming. The calculation is
//            PATBA = vcaa_base_address + SRCX * (1) + SRCY * PATST;
//
// (4) Resolve surface programming
//
//     resolve window width:        DSTWIDTH  (pixels)
//     resolve window height:       DSTHEIGHT (lines)
//     resolve output stride:       DSTS      (bytes)
//
//  These values program the width and height of the resolved surface.  In the base case,
//   DSTWIDTH  = color surface width
//   DSTHEIGHT = color sufrace height
//   DSTS      = resolve surface format bpp * DSTWIDTH
//
//  The vcaa engine technically supports DSTX and DSTY (like its cousin SRCX and SRCY).  This was not
//  requested by the original RFE by SW during the initial design.
//
//  [pseudo_code]
//     resolve_surface_start_address_put = pcurctx->regs.rG2DSTBA.uDSTBA() +
//       (pcurctx->regs.rG2DSTPS.uDSTX() * resolve_surface_color_depth) +
//       (pcurctx->regs.rG2DSTPS.uDSTY() * resolve_surface_color_stride);
//
//
// (5) Resolving a pixel
//
//   The coverage surface is a 8 bits per pixel surface (C4X4).  The surface is initialized to all 1s by 3d.
//
//   For a given pixel, we need to look up 4 bits of coverage data.
//   If the data is 0xf, the pixel does not need to be resolved.
//   Otherwise, we need to reblend the pixel with certain weightings of its neighbors (i.e. we're on the edge of some geometry)
//
//   If any coverage bits is 0, we need to resolve the color.  To do so, we calculate the following eqn:
//   color_new = (
//                 20*color_old +
//                 27*(
//                     ((cover_down  == 0) ? color_down  : color_old) +
//                     ((cover_right == 0) ? color_right : color_old) +
//                     ((cover_left  == 0) ? color_left  : color_old) +
//                     ((cover_up    == 0) ? color_up    : color_old)
//                     )
//               ) / 128;
//
//   If coverage bit == 0, then we use the neighbor color value in the resolve
//   If coverage bit == 1, then we use the center   color value in the resolve
//
//   The resolve is done on a per channel (r/g/b/a) basis:
//     format convert input channel to 8-bit
//     perform resolve equation above
//     format convert to output format
//
//   For the resolution of the alpha channel:
//     In B5G6R5:   no alpha information.  do nothing.
//     In A1B5G5R5: no resolve.  keep the source color alpha bit.
//     In R8G8B8A8: normal 8-bit channel resolve
//
// (6) Resolving a pixel on the edge
//
//    When on an edge, the vcaa engine treats the coverage bit as a 1.  Use the center color value.
//    This holds true even on the edge of the sub-surface resolve window when located in the middle of the larger surface
//
// (7) Maximum dimensions
//
//    The maximum resolve sub-surface is 4096 pixels wide.
//
// (8) Surface restrictions
//    The VCAA engine has the following restrictions w.r.t input surfaces
//      - input base address is 128-bit memory word aligned
//      - input stride is multiple of 128-bits (16 bytes)
//    The VCAA engine has the following restrictions w.r.t output surfaces
//      - output base address is 128-bit memory word aligned
//      - output stride is multiple of 128-bits (16 bytes)
// (9) Coverage surface layout
//    The surface is C4X4.  doc/<previous projects>/3d/qrast_sides.vsd/qrast_arch.doc/qrast_vcaa.doc has a wealth of info.
//
//    Surface layout (C4X4)
//    =====================
//
//       (lsb2msb)  C0_C1_C2_C3_X_X_X_X     (X is a don't care.  Qrast inits to 1)
//       (msb2lsb)  X_X_X_X_C3_C2_C1_C0
//
//
//     +          o          o
//          C0
//             C1   Cov(0,1)
//        C2
//          C3
//     o          o          o
//
//       Cov(1,0)   Cov(1,1)
//
//     o          o          o
//
//
//     +/o = pixel centers
//
//     In the example above,
//        Cov(0,0) = X_X_X_X_C3_C2_C1_C0
//        C3       = V_C3(Cov(0,0));
//        ..         ..
//        C0       = V_C0(Cov(0,0));
//     #define V_C3(bits) (bits & 0x8)
//     #define V_C2(bits) (bits & 0x4)
//     #define V_C1(bits) (bits & 0x2)
//     #define V_C0(bits) (bits & 0x1)
//
//    Resolving a pixel
//    =================
//     In an ideal world, the coverage would be simply laid out such that when resolving Pixel(x,y), we would
//    need only to fetch Cov(x,y) to get all 4 bits of information.
//     In actuality, the coverage surface was rearranged to help qrast in performance.  To resolve Pixel(x,y)
//    gr2d has to fetch 4 C4X4 bytes [Cov(x,y), Cov(x-1,y), Cov(x,y-1), Cov(x-1,y-1)].  From each C4X4 byte, it
//    extracts one bit which is used in the resolve equations shown in (5).
//
//
//    Need the logical vcaa bits (DRLU) for blend which is spread across four C4X4 coverage bytes
//
//          U
//    L
//        o
//            R
//      D
//
//    where
//
//     o = Pixel(x,y)
//     D = V_C1(Cov(x-1,y))
//     R = V_C0(Cov(x,y))
//     L = V_C3(Cov(x-1,y-1))
//     U = V_C2(Cov(x,y-1))
//
//
// (10) Other documentation
//       cmod/g2/fsim/g2vcaa.cpp - cmodel implementation with comments
//       doc/<previous projects>/3d/qrast_sides.vsd/qrast_arch.doc/qrast_vcaa.doc
//

// Register G2SB_CTX2_G2CONTROLMAIN_0  //{host,2d,sb,index=1f}
#define G2SB_CTX2_G2CONTROLMAIN_0                       _MK_ADDR_CONST(0x801f)
#define G2SB_CTX2_G2CONTROLMAIN_0_SECURE                        0x0
#define G2SB_CTX2_G2CONTROLMAIN_0_WORD_COUNT                    0x1
#define G2SB_CTX2_G2CONTROLMAIN_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_RESET_MASK                    _MK_MASK_CONST(0x7eccffff)
#define G2SB_CTX2_G2CONTROLMAIN_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_READ_MASK                     _MK_MASK_CONST(0x7fffffff)
#define G2SB_CTX2_G2CONTROLMAIN_0_WRITE_MASK                    _MK_MASK_CONST(0x7fffffff)
// Command Type:  00=BitBlt
// 01=Line Draw
// 10=VCAA
// 11=reserved
//  When the raise command is in executing
//  (there are no other outstanding commands with same channel being executed)
#define G2SB_CTX2_G2CONTROLMAIN_0_CMDT_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2CONTROLMAIN_0_CMDT_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX2_G2CONTROLMAIN_0_CMDT_SHIFT)
#define G2SB_CTX2_G2CONTROLMAIN_0_CMDT_RANGE                    1:0
#define G2SB_CTX2_G2CONTROLMAIN_0_CMDT_WOFFSET                  0x0
#define G2SB_CTX2_G2CONTROLMAIN_0_CMDT_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_CMDT_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX2_G2CONTROLMAIN_0_CMDT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_CMDT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_CMDT_BITBLT                   _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLMAIN_0_CMDT_LINEDRAW                 _MK_ENUM_CONST(1)
#define G2SB_CTX2_G2CONTROLMAIN_0_CMDT_VCAA                     _MK_ENUM_CONST(2)
#define G2SB_CTX2_G2CONTROLMAIN_0_CMDT_RESERVED1                        _MK_ENUM_CONST(3)

//fast fill rectangle in 128bit/clock
//Some limitaions with this mode:
//srcsld==1 rop==0xcc, no clipping, no transparency
//xdir==0, ydir==0, flip==0, xytdw==0
//Results are undefined if the above limitations are not satified.
#define G2SB_CTX2_G2CONTROLMAIN_0_TURBOFILL_SHIFT                       _MK_SHIFT_CONST(2)
#define G2SB_CTX2_G2CONTROLMAIN_0_TURBOFILL_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLMAIN_0_TURBOFILL_SHIFT)
#define G2SB_CTX2_G2CONTROLMAIN_0_TURBOFILL_RANGE                       2:2
#define G2SB_CTX2_G2CONTROLMAIN_0_TURBOFILL_WOFFSET                     0x0
#define G2SB_CTX2_G2CONTROLMAIN_0_TURBOFILL_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_TURBOFILL_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLMAIN_0_TURBOFILL_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_TURBOFILL_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//Command finish timing bit 0: 2D command finishs when last data has been pushed to memory write client.
// 1: 2D command waits memory write client to be idle to finish.
#define G2SB_CTX2_G2CONTROLMAIN_0_TEST0BIT_SHIFT                        _MK_SHIFT_CONST(3)
#define G2SB_CTX2_G2CONTROLMAIN_0_TEST0BIT_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLMAIN_0_TEST0BIT_SHIFT)
#define G2SB_CTX2_G2CONTROLMAIN_0_TEST0BIT_RANGE                        3:3
#define G2SB_CTX2_G2CONTROLMAIN_0_TEST0BIT_WOFFSET                      0x0
#define G2SB_CTX2_G2CONTROLMAIN_0_TEST0BIT_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_TEST0BIT_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLMAIN_0_TEST0BIT_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_TEST0BIT_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_TEST0BIT_DISABLE                      _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLMAIN_0_TEST0BIT_ENABLE                       _MK_ENUM_CONST(1)

// BitBlt Source Copy Fade enable, 1=enable (share with mltln), only support
//  16bpp mode
#define G2SB_CTX2_G2CONTROLMAIN_0_FADEN_SHIFT                   _MK_SHIFT_CONST(4)
#define G2SB_CTX2_G2CONTROLMAIN_0_FADEN_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLMAIN_0_FADEN_SHIFT)
#define G2SB_CTX2_G2CONTROLMAIN_0_FADEN_RANGE                   4:4
#define G2SB_CTX2_G2CONTROLMAIN_0_FADEN_WOFFSET                 0x0
#define G2SB_CTX2_G2CONTROLMAIN_0_FADEN_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_FADEN_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLMAIN_0_FADEN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_FADEN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_FADEN_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLMAIN_0_FADEN_ENABLE                  _MK_ENUM_CONST(1)

// BitBlt Alpha Blending, 1=enable. 0=disable,
//when both Faden and alpen are 1, output=Source*alpha_v + fadoff,
// alpha_v is decided by alptype
#define G2SB_CTX2_G2CONTROLMAIN_0_ALPEN_SHIFT                   _MK_SHIFT_CONST(5)
#define G2SB_CTX2_G2CONTROLMAIN_0_ALPEN_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLMAIN_0_ALPEN_SHIFT)
#define G2SB_CTX2_G2CONTROLMAIN_0_ALPEN_RANGE                   5:5
#define G2SB_CTX2_G2CONTROLMAIN_0_ALPEN_WOFFSET                 0x0
#define G2SB_CTX2_G2CONTROLMAIN_0_ALPEN_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_ALPEN_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLMAIN_0_ALPEN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_ALPEN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// BitBlt Solid Source Color Fill: 1=enable. FGC will be used as
// the color value.
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCSLD_SHIFT                  _MK_SHIFT_CONST(6)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCSLD_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLMAIN_0_SRCSLD_SHIFT)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCSLD_RANGE                  6:6
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCSLD_WOFFSET                        0x0
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCSLD_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCSLD_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCSLD_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCSLD_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCSLD_DISABLE                        _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCSLD_ENABLE                 _MK_ENUM_CONST(1)

// BitBlt Solid Pattern Fill: 1=enable. BGC will be used as
// the color value.
#define G2SB_CTX2_G2CONTROLMAIN_0_PATSLD_SHIFT                  _MK_SHIFT_CONST(7)
#define G2SB_CTX2_G2CONTROLMAIN_0_PATSLD_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLMAIN_0_PATSLD_SHIFT)
#define G2SB_CTX2_G2CONTROLMAIN_0_PATSLD_RANGE                  7:7
#define G2SB_CTX2_G2CONTROLMAIN_0_PATSLD_WOFFSET                        0x0
#define G2SB_CTX2_G2CONTROLMAIN_0_PATSLD_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_PATSLD_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLMAIN_0_PATSLD_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_PATSLD_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_PATSLD_DISABLE                        _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLMAIN_0_PATSLD_ENABLE                 _MK_ENUM_CONST(1)

// When mono pattern is set, we use mono tile pattern fill.
//
//  current pattern client can support a 16x16 bit tile which can be used
//  to generate a larger surface (i.e. tile this surface in the x and y direction)
//  The tile is stored in memory.  Currently, PATXO and PATYO tell you where
//  to start in the 16x16 tile when expanding the monochrome data.
//
//  See patxo and patyo comments below for programming (hw bid 247332)
//   When xdir==1
//     Patxo = pattern width - (patxo+destination width)&0xF   -- For xoffsets
//  y offsets PATYO remains the same when xdir/ydir change.
//
//
//  How the tile replication pattern looks based on xdir/ydir (without programming patxo above):
//
//  xdir=0 ydir=0              xdir=1 ydir=0
//
//   +---+--+                  +--+---+
//   |^|^|^||                  ||^|^|^|
//   |~~~|~~|                  |~~|~~~|
//   +---+--|                  |--+---+
//   |^|^|^||                  ||^|^|^|
//   +------+                  +------+
//
//
//   +---+--+                  +--+---+
//   |^|^|^||                  ||^|^|^|
//   |~~~|~~|                  |~~|~~~|
//   +---+--|                  |--+---+
//   |^|^|^||                  ||^|^|^|
//   +------+                  +------+
//    //
//  xdir=0 ydir=1              xdir=1 ydir=1
//
//   Mono tile is
//      +---+
//      |^|^|
//      |~~~|
//      +---+
//
//
#define G2SB_CTX2_G2CONTROLMAIN_0_PATFL_SHIFT                   _MK_SHIFT_CONST(8)
#define G2SB_CTX2_G2CONTROLMAIN_0_PATFL_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLMAIN_0_PATFL_SHIFT)
#define G2SB_CTX2_G2CONTROLMAIN_0_PATFL_RANGE                   8:8
#define G2SB_CTX2_G2CONTROLMAIN_0_PATFL_WOFFSET                 0x0
#define G2SB_CTX2_G2CONTROLMAIN_0_PATFL_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_PATFL_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLMAIN_0_PATFL_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_PATFL_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_PATFL_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLMAIN_0_PATFL_ENABLE                  _MK_ENUM_CONST(1)

//  0=incrementing, 1=decrementing.
//  xdir should not be set when source surface has different color depth as destination surface.
//  e.g. ALPTYPE=PLS8BX (32bpp blending with 16bpp), xdir has to be 0
//  SRCCD==0 (mono src) OR PATCD==0 (mono pat), xdir has to be 0
#define G2SB_CTX2_G2CONTROLMAIN_0_XDIR_SHIFT                    _MK_SHIFT_CONST(9)
#define G2SB_CTX2_G2CONTROLMAIN_0_XDIR_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLMAIN_0_XDIR_SHIFT)
#define G2SB_CTX2_G2CONTROLMAIN_0_XDIR_RANGE                    9:9
#define G2SB_CTX2_G2CONTROLMAIN_0_XDIR_WOFFSET                  0x0
#define G2SB_CTX2_G2CONTROLMAIN_0_XDIR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_XDIR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLMAIN_0_XDIR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_XDIR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//  0=incrementing, 1=decrementing.
//  ydir should not be set when source surface has different color depth as destination surface.
//  SRCCD==0 (mono src) OR PATCD==0 (mono pat), ydir has to be 0
#define G2SB_CTX2_G2CONTROLMAIN_0_YDIR_SHIFT                    _MK_SHIFT_CONST(10)
#define G2SB_CTX2_G2CONTROLMAIN_0_YDIR_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLMAIN_0_YDIR_SHIFT)
#define G2SB_CTX2_G2CONTROLMAIN_0_YDIR_RANGE                    10:10
#define G2SB_CTX2_G2CONTROLMAIN_0_YDIR_WOFFSET                  0x0
#define G2SB_CTX2_G2CONTROLMAIN_0_YDIR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_YDIR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLMAIN_0_YDIR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_YDIR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// xy transpose,
// Line stride DSTS has to be 16bytes aligned if enabled.
// If XYTDW==1, ROP can not include destination.
#define G2SB_CTX2_G2CONTROLMAIN_0_XYTDW_SHIFT                   _MK_SHIFT_CONST(11)
#define G2SB_CTX2_G2CONTROLMAIN_0_XYTDW_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLMAIN_0_XYTDW_SHIFT)
#define G2SB_CTX2_G2CONTROLMAIN_0_XYTDW_RANGE                   11:11
#define G2SB_CTX2_G2CONTROLMAIN_0_XYTDW_WOFFSET                 0x0
#define G2SB_CTX2_G2CONTROLMAIN_0_XYTDW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_XYTDW_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLMAIN_0_XYTDW_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_XYTDW_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Source Data is in Pack Mode.
//  SRCLNGAP in G2SRCPACK is the line gap for source packed mode.
//  If(SRCPACK && ~SRCSEL), source data is packed and from screen, SRCMONOW/SRCMONOH
//  should be programmed properly to fetch data from
//  frame buffer.
//  Note, PACK is not offically supported when the surface is tiled.
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCPACK_SHIFT                 _MK_SHIFT_CONST(12)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCPACK_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLMAIN_0_SRCPACK_SHIFT)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCPACK_RANGE                 12:12
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCPACK_WOFFSET                       0x0
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCPACK_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCPACK_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCPACK_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCPACK_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCPACK_DISABLE                       _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCPACK_ENABLE                        _MK_ENUM_CONST(1)

// Pattern Data is in Pack Mode.
//  PATLNGAP in G2PATPACK is the line gap for pattern packed mode
//  If(PATPACK && ~PATSEl), pattern data is packed and from screen, PATMONOW/PATMONOH
//  should be programmed properly to fetch pattern data from
//  frame buffer.
//  Note, PACK is not offically supported when the surface is tiled.
#define G2SB_CTX2_G2CONTROLMAIN_0_PATPACK_SHIFT                 _MK_SHIFT_CONST(13)
#define G2SB_CTX2_G2CONTROLMAIN_0_PATPACK_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLMAIN_0_PATPACK_SHIFT)
#define G2SB_CTX2_G2CONTROLMAIN_0_PATPACK_RANGE                 13:13
#define G2SB_CTX2_G2CONTROLMAIN_0_PATPACK_WOFFSET                       0x0
#define G2SB_CTX2_G2CONTROLMAIN_0_PATPACK_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_PATPACK_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLMAIN_0_PATPACK_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_PATPACK_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_PATPACK_DISABLE                       _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLMAIN_0_PATPACK_ENABLE                        _MK_ENUM_CONST(1)

// flip y direction to make image upside down or the other way.
// If YFLIP==1, ROP can not include destination.
#define G2SB_CTX2_G2CONTROLMAIN_0_YFLIP_SHIFT                   _MK_SHIFT_CONST(14)
#define G2SB_CTX2_G2CONTROLMAIN_0_YFLIP_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLMAIN_0_YFLIP_SHIFT)
#define G2SB_CTX2_G2CONTROLMAIN_0_YFLIP_RANGE                   14:14
#define G2SB_CTX2_G2CONTROLMAIN_0_YFLIP_WOFFSET                 0x0
#define G2SB_CTX2_G2CONTROLMAIN_0_YFLIP_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_YFLIP_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLMAIN_0_YFLIP_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_YFLIP_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_YFLIP_DSIABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLMAIN_0_YFLIP_ENABLE                  _MK_ENUM_CONST(1)

// Source Data Select:
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCSEL_SHIFT                  _MK_SHIFT_CONST(15)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCSEL_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLMAIN_0_SRCSEL_SHIFT)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCSEL_RANGE                  15:15
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCSEL_WOFFSET                        0x0
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCSEL_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCSEL_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCSEL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCSEL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCSEL_SCREEN                 _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCSEL_MEMORY                 _MK_ENUM_CONST(1)

// Destination color depth:
//   00=8-bpp, 01=16-bpp, 10=32-bpp. 11=reserved
#define G2SB_CTX2_G2CONTROLMAIN_0_DSTCD_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX2_G2CONTROLMAIN_0_DSTCD_FIELD                   (_MK_MASK_CONST(0x3) << G2SB_CTX2_G2CONTROLMAIN_0_DSTCD_SHIFT)
#define G2SB_CTX2_G2CONTROLMAIN_0_DSTCD_RANGE                   17:16
#define G2SB_CTX2_G2CONTROLMAIN_0_DSTCD_WOFFSET                 0x0
#define G2SB_CTX2_G2CONTROLMAIN_0_DSTCD_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_DSTCD_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_DSTCD_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_DSTCD_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_DSTCD_BPP8                    _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLMAIN_0_DSTCD_BPP16                   _MK_ENUM_CONST(1)
#define G2SB_CTX2_G2CONTROLMAIN_0_DSTCD_BPP32                   _MK_ENUM_CONST(2)
#define G2SB_CTX2_G2CONTROLMAIN_0_DSTCD_RESERVED3                       _MK_ENUM_CONST(3)

// Destination read transparency enable:
//   0x=destination read transparency disabled
//   10=color destination read transparency
//   11=inverse color destination read transparency.
// 20 rw INIC
// Initiate Command
// (1=initiate command immediately, 0=wait for launch write)
#define G2SB_CTX2_G2CONTROLMAIN_0_DSTT_SHIFT                    _MK_SHIFT_CONST(18)
#define G2SB_CTX2_G2CONTROLMAIN_0_DSTT_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX2_G2CONTROLMAIN_0_DSTT_SHIFT)
#define G2SB_CTX2_G2CONTROLMAIN_0_DSTT_RANGE                    19:18
#define G2SB_CTX2_G2CONTROLMAIN_0_DSTT_WOFFSET                  0x0
#define G2SB_CTX2_G2CONTROLMAIN_0_DSTT_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_DSTT_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX2_G2CONTROLMAIN_0_DSTT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_DSTT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//0 Source mono
//1 Source has same color depth as destination
//  SRCCD==0 xdir/ydir has to be 0
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCCD_SHIFT                   _MK_SHIFT_CONST(20)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCCD_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLMAIN_0_SRCCD_SHIFT)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCCD_RANGE                   20:20
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCCD_WOFFSET                 0x0
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCCD_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCCD_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCCD_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCCD_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Start from Msb or lsb in byte when mono expansion
// If HLMONO is 1, bit 0 (the lsb) is the first bit
// If HLMONO is 0, bit 7 (the msb) is the first bit
#define G2SB_CTX2_G2CONTROLMAIN_0_HLMONO_SHIFT                  _MK_SHIFT_CONST(21)
#define G2SB_CTX2_G2CONTROLMAIN_0_HLMONO_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLMAIN_0_HLMONO_SHIFT)
#define G2SB_CTX2_G2CONTROLMAIN_0_HLMONO_RANGE                  21:21
#define G2SB_CTX2_G2CONTROLMAIN_0_HLMONO_WOFFSET                        0x0
#define G2SB_CTX2_G2CONTROLMAIN_0_HLMONO_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_HLMONO_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_HLMONO_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_HLMONO_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Source transparency enable: 0x=source transparency disabled,
// 10=mono source background transparency
//    or color source transparency,
// 11=mono source foreground transparency
//    or inverse color source transparency.
// NOTE: When source transparency is enabled and SRCCD==0(mono)
//       SRCBGC!=SRCFGC should be satisfied.
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCT_SHIFT                    _MK_SHIFT_CONST(22)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCT_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX2_G2CONTROLMAIN_0_SRCT_SHIFT)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCT_RANGE                    23:22
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCT_WOFFSET                  0x0
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCT_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCT_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Source base address select:
//  0=srcba, 1=dstba. This is not used for Line Draw and
// if source data comes from host memory.
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCBAS_SHIFT                  _MK_SHIFT_CONST(24)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCBAS_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLMAIN_0_SRCBAS_SHIFT)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCBAS_RANGE                  24:24
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCBAS_WOFFSET                        0x0
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCBAS_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCBAS_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCBAS_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCBAS_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//Display Switching Window Control (GCSW[1:0])
//This parameter controls multi-buffering for Display.
//x0 At end of current command, don't send signal to Display to switch buffer.
//01 two buffers, dstba and dstba_b are used
//11 three buffers, dstba, dstba_b dstba_c are used
#define G2SB_CTX2_G2CONTROLMAIN_0_GCSW_SHIFT                    _MK_SHIFT_CONST(25)
#define G2SB_CTX2_G2CONTROLMAIN_0_GCSW_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX2_G2CONTROLMAIN_0_GCSW_SHIFT)
#define G2SB_CTX2_G2CONTROLMAIN_0_GCSW_RANGE                    26:25
#define G2SB_CTX2_G2CONTROLMAIN_0_GCSW_WOFFSET                  0x0
#define G2SB_CTX2_G2CONTROLMAIN_0_GCSW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_GCSW_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX2_G2CONTROLMAIN_0_GCSW_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_GCSW_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//source direct addressing
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCDIR_SHIFT                  _MK_SHIFT_CONST(27)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCDIR_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLMAIN_0_SRCDIR_SHIFT)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCDIR_RANGE                  27:27
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCDIR_WOFFSET                        0x0
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCDIR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCDIR_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCDIR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_SRCDIR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//destination direct addressing
#define G2SB_CTX2_G2CONTROLMAIN_0_DSTDIR_SHIFT                  _MK_SHIFT_CONST(28)
#define G2SB_CTX2_G2CONTROLMAIN_0_DSTDIR_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLMAIN_0_DSTDIR_SHIFT)
#define G2SB_CTX2_G2CONTROLMAIN_0_DSTDIR_RANGE                  28:28
#define G2SB_CTX2_G2CONTROLMAIN_0_DSTDIR_WOFFSET                        0x0
#define G2SB_CTX2_G2CONTROLMAIN_0_DSTDIR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_DSTDIR_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLMAIN_0_DSTDIR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_DSTDIR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// This feature is not offically supported.
//seperate destination read/write surface address
//0: read/write use DSTBA
//1: read uses SRCBA_B, write uses DSTBA
#define G2SB_CTX2_G2CONTROLMAIN_0_DST_RD_WR_SEP_SHIFT                   _MK_SHIFT_CONST(29)
#define G2SB_CTX2_G2CONTROLMAIN_0_DST_RD_WR_SEP_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLMAIN_0_DST_RD_WR_SEP_SHIFT)
#define G2SB_CTX2_G2CONTROLMAIN_0_DST_RD_WR_SEP_RANGE                   29:29
#define G2SB_CTX2_G2CONTROLMAIN_0_DST_RD_WR_SEP_WOFFSET                 0x0
#define G2SB_CTX2_G2CONTROLMAIN_0_DST_RD_WR_SEP_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_DST_RD_WR_SEP_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLMAIN_0_DST_RD_WR_SEP_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_DST_RD_WR_SEP_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// pattern Data Select: SRCSEL and PATSEL can't be both enabled.
#define G2SB_CTX2_G2CONTROLMAIN_0_PATSEL_SHIFT                  _MK_SHIFT_CONST(30)
#define G2SB_CTX2_G2CONTROLMAIN_0_PATSEL_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CONTROLMAIN_0_PATSEL_SHIFT)
#define G2SB_CTX2_G2CONTROLMAIN_0_PATSEL_RANGE                  30:30
#define G2SB_CTX2_G2CONTROLMAIN_0_PATSEL_WOFFSET                        0x0
#define G2SB_CTX2_G2CONTROLMAIN_0_PATSEL_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_PATSEL_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CONTROLMAIN_0_PATSEL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_PATSEL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CONTROLMAIN_0_PATSEL_SCREEN                 _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CONTROLMAIN_0_PATSEL_MEMORY                 _MK_ENUM_CONST(1)


// Register G2SB_CTX2_G2ROPFADE_0  //{host,2d,index=20}
#define G2SB_CTX2_G2ROPFADE_0                   _MK_ADDR_CONST(0x8020)
#define G2SB_CTX2_G2ROPFADE_0_SECURE                    0x0
#define G2SB_CTX2_G2ROPFADE_0_WORD_COUNT                        0x1
#define G2SB_CTX2_G2ROPFADE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2ROPFADE_0_RESET_MASK                        _MK_MASK_CONST(0xff)
#define G2SB_CTX2_G2ROPFADE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2ROPFADE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2ROPFADE_0_READ_MASK                         _MK_MASK_CONST(0xffff00ff)
#define G2SB_CTX2_G2ROPFADE_0_WRITE_MASK                        _MK_MASK_CONST(0xffff00ff)
//If YFLIP==1 or XYTDW==1, ROP can not include destination.
//Since destination may have been corrupted before reading out.
#define G2SB_CTX2_G2ROPFADE_0_ROP_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2ROPFADE_0_ROP_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX2_G2ROPFADE_0_ROP_SHIFT)
#define G2SB_CTX2_G2ROPFADE_0_ROP_RANGE                 7:0
#define G2SB_CTX2_G2ROPFADE_0_ROP_WOFFSET                       0x0
#define G2SB_CTX2_G2ROPFADE_0_ROP_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2ROPFADE_0_ROP_DEFAULT_MASK                  _MK_MASK_CONST(0xff)
#define G2SB_CTX2_G2ROPFADE_0_ROP_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2ROPFADE_0_ROP_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//
#define G2SB_CTX2_G2ROPFADE_0_FADCOE_SHIFT                      _MK_SHIFT_CONST(16)
#define G2SB_CTX2_G2ROPFADE_0_FADCOE_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX2_G2ROPFADE_0_FADCOE_SHIFT)
#define G2SB_CTX2_G2ROPFADE_0_FADCOE_RANGE                      23:16
#define G2SB_CTX2_G2ROPFADE_0_FADCOE_WOFFSET                    0x0
#define G2SB_CTX2_G2ROPFADE_0_FADCOE_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2ROPFADE_0_FADCOE_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2ROPFADE_0_FADCOE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2ROPFADE_0_FADCOE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

//
#define G2SB_CTX2_G2ROPFADE_0_FADOFF_SHIFT                      _MK_SHIFT_CONST(24)
#define G2SB_CTX2_G2ROPFADE_0_FADOFF_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX2_G2ROPFADE_0_FADOFF_SHIFT)
#define G2SB_CTX2_G2ROPFADE_0_FADOFF_RANGE                      31:24
#define G2SB_CTX2_G2ROPFADE_0_FADOFF_WOFFSET                    0x0
#define G2SB_CTX2_G2ROPFADE_0_FADOFF_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2ROPFADE_0_FADOFF_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2ROPFADE_0_FADOFF_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2ROPFADE_0_FADOFF_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2ALPHABLEND_0  //{2d,index=21}
#define G2SB_CTX2_G2ALPHABLEND_0                        _MK_ADDR_CONST(0x8021)
#define G2SB_CTX2_G2ALPHABLEND_0_SECURE                         0x0
#define G2SB_CTX2_G2ALPHABLEND_0_WORD_COUNT                     0x1
#define G2SB_CTX2_G2ALPHABLEND_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2ALPHABLEND_0_RESET_MASK                     _MK_MASK_CONST(0x100)
#define G2SB_CTX2_G2ALPHABLEND_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2ALPHABLEND_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2ALPHABLEND_0_READ_MASK                      _MK_MASK_CONST(0xffff01ff)
#define G2SB_CTX2_G2ALPHABLEND_0_WRITE_MASK                     _MK_MASK_CONST(0xffff01ff)
#define G2SB_CTX2_G2ALPHABLEND_0_ALPHA_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2ALPHABLEND_0_ALPHA_FIELD                    (_MK_MASK_CONST(0xff) << G2SB_CTX2_G2ALPHABLEND_0_ALPHA_SHIFT)
#define G2SB_CTX2_G2ALPHABLEND_0_ALPHA_RANGE                    7:0
#define G2SB_CTX2_G2ALPHABLEND_0_ALPHA_WOFFSET                  0x0
#define G2SB_CTX2_G2ALPHABLEND_0_ALPHA_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2ALPHABLEND_0_ALPHA_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2ALPHABLEND_0_ALPHA_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2ALPHABLEND_0_ALPHA_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

#define G2SB_CTX2_G2ALPHABLEND_0_ALPHAINV_SHIFT                 _MK_SHIFT_CONST(8)
#define G2SB_CTX2_G2ALPHABLEND_0_ALPHAINV_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2ALPHABLEND_0_ALPHAINV_SHIFT)
#define G2SB_CTX2_G2ALPHABLEND_0_ALPHAINV_RANGE                 8:8
#define G2SB_CTX2_G2ALPHABLEND_0_ALPHAINV_WOFFSET                       0x0
#define G2SB_CTX2_G2ALPHABLEND_0_ALPHAINV_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2ALPHABLEND_0_ALPHAINV_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2ALPHABLEND_0_ALPHAINV_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2ALPHABLEND_0_ALPHAINV_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

#define G2SB_CTX2_G2ALPHABLEND_0_ALPHA0V_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX2_G2ALPHABLEND_0_ALPHA0V_FIELD                  (_MK_MASK_CONST(0xff) << G2SB_CTX2_G2ALPHABLEND_0_ALPHA0V_SHIFT)
#define G2SB_CTX2_G2ALPHABLEND_0_ALPHA0V_RANGE                  23:16
#define G2SB_CTX2_G2ALPHABLEND_0_ALPHA0V_WOFFSET                        0x0
#define G2SB_CTX2_G2ALPHABLEND_0_ALPHA0V_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2ALPHABLEND_0_ALPHA0V_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2ALPHABLEND_0_ALPHA0V_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2ALPHABLEND_0_ALPHA0V_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX2_G2ALPHABLEND_0_ALPHA1V_SHIFT                  _MK_SHIFT_CONST(24)
#define G2SB_CTX2_G2ALPHABLEND_0_ALPHA1V_FIELD                  (_MK_MASK_CONST(0xff) << G2SB_CTX2_G2ALPHABLEND_0_ALPHA1V_SHIFT)
#define G2SB_CTX2_G2ALPHABLEND_0_ALPHA1V_RANGE                  31:24
#define G2SB_CTX2_G2ALPHABLEND_0_ALPHA1V_WOFFSET                        0x0
#define G2SB_CTX2_G2ALPHABLEND_0_ALPHA1V_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2ALPHABLEND_0_ALPHA1V_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2ALPHABLEND_0_ALPHA1V_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2ALPHABLEND_0_ALPHA1V_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// ClipRect Methods
// top-left bounds are inclusive

// Register G2SB_CTX2_G2CLIPLEFTTOP_0  //{2d,index=22}
#define G2SB_CTX2_G2CLIPLEFTTOP_0                       _MK_ADDR_CONST(0x8022)
#define G2SB_CTX2_G2CLIPLEFTTOP_0_SECURE                        0x0
#define G2SB_CTX2_G2CLIPLEFTTOP_0_WORD_COUNT                    0x1
#define G2SB_CTX2_G2CLIPLEFTTOP_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLIPLEFTTOP_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLIPLEFTTOP_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLIPLEFTTOP_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLIPLEFTTOP_0_READ_MASK                     _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX2_G2CLIPLEFTTOP_0_WRITE_MASK                    _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX2_G2CLIPLEFTTOP_0_CLIPL_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2CLIPLEFTTOP_0_CLIPL_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX2_G2CLIPLEFTTOP_0_CLIPL_SHIFT)
#define G2SB_CTX2_G2CLIPLEFTTOP_0_CLIPL_RANGE                   14:0
#define G2SB_CTX2_G2CLIPLEFTTOP_0_CLIPL_WOFFSET                 0x0
#define G2SB_CTX2_G2CLIPLEFTTOP_0_CLIPL_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLIPLEFTTOP_0_CLIPL_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLIPLEFTTOP_0_CLIPL_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLIPLEFTTOP_0_CLIPL_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

#define G2SB_CTX2_G2CLIPLEFTTOP_0_CLIPT_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX2_G2CLIPLEFTTOP_0_CLIPT_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX2_G2CLIPLEFTTOP_0_CLIPT_SHIFT)
#define G2SB_CTX2_G2CLIPLEFTTOP_0_CLIPT_RANGE                   30:16
#define G2SB_CTX2_G2CLIPLEFTTOP_0_CLIPT_WOFFSET                 0x0
#define G2SB_CTX2_G2CLIPLEFTTOP_0_CLIPT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLIPLEFTTOP_0_CLIPT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLIPLEFTTOP_0_CLIPT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLIPLEFTTOP_0_CLIPT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// bottom-right bounds are exclusive

// Register G2SB_CTX2_G2CLIPRIGHTBOT_0  //{2d,index=23}
#define G2SB_CTX2_G2CLIPRIGHTBOT_0                      _MK_ADDR_CONST(0x8023)
#define G2SB_CTX2_G2CLIPRIGHTBOT_0_SECURE                       0x0
#define G2SB_CTX2_G2CLIPRIGHTBOT_0_WORD_COUNT                   0x1
#define G2SB_CTX2_G2CLIPRIGHTBOT_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLIPRIGHTBOT_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLIPRIGHTBOT_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLIPRIGHTBOT_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLIPRIGHTBOT_0_READ_MASK                    _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX2_G2CLIPRIGHTBOT_0_WRITE_MASK                   _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX2_G2CLIPRIGHTBOT_0_CLIPR_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2CLIPRIGHTBOT_0_CLIPR_FIELD                  (_MK_MASK_CONST(0x7fff) << G2SB_CTX2_G2CLIPRIGHTBOT_0_CLIPR_SHIFT)
#define G2SB_CTX2_G2CLIPRIGHTBOT_0_CLIPR_RANGE                  14:0
#define G2SB_CTX2_G2CLIPRIGHTBOT_0_CLIPR_WOFFSET                        0x0
#define G2SB_CTX2_G2CLIPRIGHTBOT_0_CLIPR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLIPRIGHTBOT_0_CLIPR_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLIPRIGHTBOT_0_CLIPR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLIPRIGHTBOT_0_CLIPR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX2_G2CLIPRIGHTBOT_0_CLIPB_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX2_G2CLIPRIGHTBOT_0_CLIPB_FIELD                  (_MK_MASK_CONST(0x7fff) << G2SB_CTX2_G2CLIPRIGHTBOT_0_CLIPB_SHIFT)
#define G2SB_CTX2_G2CLIPRIGHTBOT_0_CLIPB_RANGE                  30:16
#define G2SB_CTX2_G2CLIPRIGHTBOT_0_CLIPB_WOFFSET                        0x0
#define G2SB_CTX2_G2CLIPRIGHTBOT_0_CLIPB_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLIPRIGHTBOT_0_CLIPB_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLIPRIGHTBOT_0_CLIPB_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CLIPRIGHTBOT_0_CLIPB_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//pattern methods
// G2PATPACK should be used to specify the line gap
// use G2PATPACK_SIZE to program height and width
//  PACK is generally only useful with narrow monochrome surfaces
//  Note, PACK is not offically supported when the surface is tiled.

// Register G2SB_CTX2_G2PATPACK_0  //{2d,index=24} Pattern packed mode
#define G2SB_CTX2_G2PATPACK_0                   _MK_ADDR_CONST(0x8024)
#define G2SB_CTX2_G2PATPACK_0_SECURE                    0x0
#define G2SB_CTX2_G2PATPACK_0_WORD_COUNT                        0x1
#define G2SB_CTX2_G2PATPACK_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATPACK_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATPACK_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATPACK_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATPACK_0_READ_MASK                         _MK_MASK_CONST(0xf)
#define G2SB_CTX2_G2PATPACK_0_WRITE_MASK                        _MK_MASK_CONST(0xf)
// Packed mode, pattern data line gap. byte
#define G2SB_CTX2_G2PATPACK_0_PATLNGAP_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2PATPACK_0_PATLNGAP_FIELD                    (_MK_MASK_CONST(0xf) << G2SB_CTX2_G2PATPACK_0_PATLNGAP_SHIFT)
#define G2SB_CTX2_G2PATPACK_0_PATLNGAP_RANGE                    3:0
#define G2SB_CTX2_G2PATPACK_0_PATLNGAP_WOFFSET                  0x0
#define G2SB_CTX2_G2PATPACK_0_PATLNGAP_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATPACK_0_PATLNGAP_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATPACK_0_PATLNGAP_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATPACK_0_PATLNGAP_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// G2PATPACK_SIZE -- extension of G2PATPACK, this register only holds the size of the packed data
//  Note, PACK is not offically supported when the surface is tiled.

// Register G2SB_CTX2_G2PATPACK_SIZE_0  //{2d,index=25} Pattern packed mode
// Packed mode, pattern data line gap. byte
#define G2SB_CTX2_G2PATPACK_SIZE_0                      _MK_ADDR_CONST(0x8025)
#define G2SB_CTX2_G2PATPACK_SIZE_0_SECURE                       0x0
#define G2SB_CTX2_G2PATPACK_SIZE_0_WORD_COUNT                   0x1
#define G2SB_CTX2_G2PATPACK_SIZE_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATPACK_SIZE_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATPACK_SIZE_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATPACK_SIZE_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATPACK_SIZE_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2PATPACK_SIZE_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
// Mono data width in packed mode, byte
#define G2SB_CTX2_G2PATPACK_SIZE_0_PATMONOW_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2PATPACK_SIZE_0_PATMONOW_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_CTX2_G2PATPACK_SIZE_0_PATMONOW_SHIFT)
#define G2SB_CTX2_G2PATPACK_SIZE_0_PATMONOW_RANGE                       15:0
#define G2SB_CTX2_G2PATPACK_SIZE_0_PATMONOW_WOFFSET                     0x0
#define G2SB_CTX2_G2PATPACK_SIZE_0_PATMONOW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATPACK_SIZE_0_PATMONOW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATPACK_SIZE_0_PATMONOW_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATPACK_SIZE_0_PATMONOW_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//  Pattern mono data height in packed mode, byte
#define G2SB_CTX2_G2PATPACK_SIZE_0_PATMONOH_SHIFT                       _MK_SHIFT_CONST(16)
#define G2SB_CTX2_G2PATPACK_SIZE_0_PATMONOH_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_CTX2_G2PATPACK_SIZE_0_PATMONOH_SHIFT)
#define G2SB_CTX2_G2PATPACK_SIZE_0_PATMONOH_RANGE                       31:16
#define G2SB_CTX2_G2PATPACK_SIZE_0_PATMONOH_WOFFSET                     0x0
#define G2SB_CTX2_G2PATPACK_SIZE_0_PATMONOH_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATPACK_SIZE_0_PATMONOH_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATPACK_SIZE_0_PATMONOH_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATPACK_SIZE_0_PATMONOH_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2PATBA_0  //{2d,index=26}
#define G2SB_CTX2_G2PATBA_0                     _MK_ADDR_CONST(0x8026)
#define G2SB_CTX2_G2PATBA_0_SECURE                      0x0
#define G2SB_CTX2_G2PATBA_0_WORD_COUNT                  0x1
#define G2SB_CTX2_G2PATBA_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATBA_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATBA_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATBA_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATBA_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2PATBA_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// If(PATFL==1){
//   It has to be 16bytes aligned.
// }else{
//   Point to the first byte of the first pixel of pattern plane.
// }
#define G2SB_CTX2_G2PATBA_0_PATBA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2PATBA_0_PATBA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX2_G2PATBA_0_PATBA_SHIFT)
#define G2SB_CTX2_G2PATBA_0_PATBA_RANGE                 31:0
#define G2SB_CTX2_G2PATBA_0_PATBA_WOFFSET                       0x0
#define G2SB_CTX2_G2PATBA_0_PATBA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATBA_0_PATBA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATBA_0_PATBA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATBA_0_PATBA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2PATOS_0  //{2d,index=27}
#define G2SB_CTX2_G2PATOS_0                     _MK_ADDR_CONST(0x8027)
#define G2SB_CTX2_G2PATOS_0_SECURE                      0x0
#define G2SB_CTX2_G2PATOS_0_WORD_COUNT                  0x1
#define G2SB_CTX2_G2PATOS_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATOS_0_RESET_MASK                  _MK_MASK_CONST(0x600000)
#define G2SB_CTX2_G2PATOS_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATOS_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATOS_0_READ_MASK                   _MK_MASK_CONST(0xff61ffff)
#define G2SB_CTX2_G2PATOS_0_WRITE_MASK                  _MK_MASK_CONST(0xff61ffff)
//stride
#define G2SB_CTX2_G2PATOS_0_PATST_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2PATOS_0_PATST_FIELD                 (_MK_MASK_CONST(0xffff) << G2SB_CTX2_G2PATOS_0_PATST_SHIFT)
#define G2SB_CTX2_G2PATOS_0_PATST_RANGE                 15:0
#define G2SB_CTX2_G2PATOS_0_PATST_WOFFSET                       0x0
#define G2SB_CTX2_G2PATOS_0_PATST_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATOS_0_PATST_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATOS_0_PATST_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATOS_0_PATST_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//0 mono
//1 same as dstcd
//  PATCD==0 xdir/ydir has to be 0
#define G2SB_CTX2_G2PATOS_0_PATCD_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_CTX2_G2PATOS_0_PATCD_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2PATOS_0_PATCD_SHIFT)
#define G2SB_CTX2_G2PATOS_0_PATCD_RANGE                 16:16
#define G2SB_CTX2_G2PATOS_0_PATCD_WOFFSET                       0x0
#define G2SB_CTX2_G2PATOS_0_PATCD_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATOS_0_PATCD_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATOS_0_PATCD_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATOS_0_PATCD_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Mono pattern transparency enable:
// 0x=pattern transparency disabled,
// 10=mono pattern background transparency
//   or color pattern transparency,
// 11=mono pattern foreground transparency
//   or inverse color pattern transparency.
// NOTE: When pattern transparency is enabled and PATCD==0(mono)
//       PATBGC!=PATFGC should be satisfied.
#define G2SB_CTX2_G2PATOS_0_PATT_SHIFT                  _MK_SHIFT_CONST(21)
#define G2SB_CTX2_G2PATOS_0_PATT_FIELD                  (_MK_MASK_CONST(0x3) << G2SB_CTX2_G2PATOS_0_PATT_SHIFT)
#define G2SB_CTX2_G2PATOS_0_PATT_RANGE                  22:21
#define G2SB_CTX2_G2PATOS_0_PATT_WOFFSET                        0x0
#define G2SB_CTX2_G2PATOS_0_PATT_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATOS_0_PATT_DEFAULT_MASK                   _MK_MASK_CONST(0x3)
#define G2SB_CTX2_G2PATOS_0_PATT_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATOS_0_PATT_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//x offset for mono tile pattern fill.  see PATFL
#define G2SB_CTX2_G2PATOS_0_PATXO_SHIFT                 _MK_SHIFT_CONST(24)
#define G2SB_CTX2_G2PATOS_0_PATXO_FIELD                 (_MK_MASK_CONST(0xf) << G2SB_CTX2_G2PATOS_0_PATXO_SHIFT)
#define G2SB_CTX2_G2PATOS_0_PATXO_RANGE                 27:24
#define G2SB_CTX2_G2PATOS_0_PATXO_WOFFSET                       0x0
#define G2SB_CTX2_G2PATOS_0_PATXO_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATOS_0_PATXO_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATOS_0_PATXO_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATOS_0_PATXO_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//y offset for mono tile pattern fill.  see PATFL
#define G2SB_CTX2_G2PATOS_0_PATYO_SHIFT                 _MK_SHIFT_CONST(28)
#define G2SB_CTX2_G2PATOS_0_PATYO_FIELD                 (_MK_MASK_CONST(0xf) << G2SB_CTX2_G2PATOS_0_PATYO_SHIFT)
#define G2SB_CTX2_G2PATOS_0_PATYO_RANGE                 31:28
#define G2SB_CTX2_G2PATOS_0_PATYO_WOFFSET                       0x0
#define G2SB_CTX2_G2PATOS_0_PATYO_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATOS_0_PATYO_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATOS_0_PATYO_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATOS_0_PATYO_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2PATBGC_0  //{2d,index=28}
#define G2SB_CTX2_G2PATBGC_0                    _MK_ADDR_CONST(0x8028)
#define G2SB_CTX2_G2PATBGC_0_SECURE                     0x0
#define G2SB_CTX2_G2PATBGC_0_WORD_COUNT                         0x1
#define G2SB_CTX2_G2PATBGC_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATBGC_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATBGC_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATBGC_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATBGC_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2PATBGC_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2PATBGC_0_PATBGC_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2PATBGC_0_PATBGC_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX2_G2PATBGC_0_PATBGC_SHIFT)
#define G2SB_CTX2_G2PATBGC_0_PATBGC_RANGE                       31:0
#define G2SB_CTX2_G2PATBGC_0_PATBGC_WOFFSET                     0x0
#define G2SB_CTX2_G2PATBGC_0_PATBGC_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATBGC_0_PATBGC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATBGC_0_PATBGC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATBGC_0_PATBGC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2PATFGC_0  //{2d,index=29}
#define G2SB_CTX2_G2PATFGC_0                    _MK_ADDR_CONST(0x8029)
#define G2SB_CTX2_G2PATFGC_0_SECURE                     0x0
#define G2SB_CTX2_G2PATFGC_0_WORD_COUNT                         0x1
#define G2SB_CTX2_G2PATFGC_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATFGC_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATFGC_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATFGC_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATFGC_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2PATFGC_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2PATFGC_0_PATFGC_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2PATFGC_0_PATFGC_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX2_G2PATFGC_0_PATFGC_SHIFT)
#define G2SB_CTX2_G2PATFGC_0_PATFGC_RANGE                       31:0
#define G2SB_CTX2_G2PATFGC_0_PATFGC_WOFFSET                     0x0
#define G2SB_CTX2_G2PATFGC_0_PATFGC_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATFGC_0_PATFGC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATFGC_0_PATFGC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATFGC_0_PATFGC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2PATKEY_0  //{2d,index=2a}
#define G2SB_CTX2_G2PATKEY_0                    _MK_ADDR_CONST(0x802a)
#define G2SB_CTX2_G2PATKEY_0_SECURE                     0x0
#define G2SB_CTX2_G2PATKEY_0_WORD_COUNT                         0x1
#define G2SB_CTX2_G2PATKEY_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATKEY_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATKEY_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATKEY_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATKEY_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2PATKEY_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2PATKEY_0_PATKEY_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2PATKEY_0_PATKEY_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX2_G2PATKEY_0_PATKEY_SHIFT)
#define G2SB_CTX2_G2PATKEY_0_PATKEY_RANGE                       31:0
#define G2SB_CTX2_G2PATKEY_0_PATKEY_WOFFSET                     0x0
#define G2SB_CTX2_G2PATKEY_0_PATKEY_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATKEY_0_PATKEY_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATKEY_0_PATKEY_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATKEY_0_PATKEY_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2DSTBA_0  //{host,2d,sb,index=2b}
#define G2SB_CTX2_G2DSTBA_0                     _MK_ADDR_CONST(0x802b)
#define G2SB_CTX2_G2DSTBA_0_SECURE                      0x0
#define G2SB_CTX2_G2DSTBA_0_WORD_COUNT                  0x1
#define G2SB_CTX2_G2DSTBA_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2DSTBA_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Destination base address (byte address)
#define G2SB_CTX2_G2DSTBA_0_DSTBA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2DSTBA_0_DSTBA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX2_G2DSTBA_0_DSTBA_SHIFT)
#define G2SB_CTX2_G2DSTBA_0_DSTBA_RANGE                 31:0
#define G2SB_CTX2_G2DSTBA_0_DSTBA_WOFFSET                       0x0
#define G2SB_CTX2_G2DSTBA_0_DSTBA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_0_DSTBA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_0_DSTBA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_0_DSTBA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2DSTBA_B_0  //{host,2d,sb,index=2c}
#define G2SB_CTX2_G2DSTBA_B_0                   _MK_ADDR_CONST(0x802c)
#define G2SB_CTX2_G2DSTBA_B_0_SECURE                    0x0
#define G2SB_CTX2_G2DSTBA_B_0_WORD_COUNT                        0x1
#define G2SB_CTX2_G2DSTBA_B_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_B_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_B_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_B_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_B_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2DSTBA_B_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// Destination base address (byte address)
// only usable in hardware trigger mode by enable gcsw
#define G2SB_CTX2_G2DSTBA_B_0_DSTBA_B_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2DSTBA_B_0_DSTBA_B_FIELD                     (_MK_MASK_CONST(0xffffffff) << G2SB_CTX2_G2DSTBA_B_0_DSTBA_B_SHIFT)
#define G2SB_CTX2_G2DSTBA_B_0_DSTBA_B_RANGE                     31:0
#define G2SB_CTX2_G2DSTBA_B_0_DSTBA_B_WOFFSET                   0x0
#define G2SB_CTX2_G2DSTBA_B_0_DSTBA_B_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_B_0_DSTBA_B_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_B_0_DSTBA_B_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_B_0_DSTBA_B_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2DSTBA_C_0  //{2d,sb,index=2d}
#define G2SB_CTX2_G2DSTBA_C_0                   _MK_ADDR_CONST(0x802d)
#define G2SB_CTX2_G2DSTBA_C_0_SECURE                    0x0
#define G2SB_CTX2_G2DSTBA_C_0_WORD_COUNT                        0x1
#define G2SB_CTX2_G2DSTBA_C_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_C_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_C_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_C_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_C_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2DSTBA_C_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// Destination base address (byte address)
#define G2SB_CTX2_G2DSTBA_C_0_DSTBA_C_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2DSTBA_C_0_DSTBA_C_FIELD                     (_MK_MASK_CONST(0xffffffff) << G2SB_CTX2_G2DSTBA_C_0_DSTBA_C_SHIFT)
#define G2SB_CTX2_G2DSTBA_C_0_DSTBA_C_RANGE                     31:0
#define G2SB_CTX2_G2DSTBA_C_0_DSTBA_C_WOFFSET                   0x0
#define G2SB_CTX2_G2DSTBA_C_0_DSTBA_C_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_C_0_DSTBA_C_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_C_0_DSTBA_C_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_C_0_DSTBA_C_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2DSTST_0  //{host,2d,sb,sbm,index=2e}
#define G2SB_CTX2_G2DSTST_0                     _MK_ADDR_CONST(0x802e)
#define G2SB_CTX2_G2DSTST_0_SECURE                      0x0
#define G2SB_CTX2_G2DSTST_0_WORD_COUNT                  0x1
#define G2SB_CTX2_G2DSTST_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTST_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTST_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTST_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTST_0_READ_MASK                   _MK_MASK_CONST(0xffff)
#define G2SB_CTX2_G2DSTST_0_WRITE_MASK                  _MK_MASK_CONST(0xffff)
// Destination Stride coordinate(bytes) with respect to DSTBA.
#define G2SB_CTX2_G2DSTST_0_DSTS_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2DSTST_0_DSTS_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX2_G2DSTST_0_DSTS_SHIFT)
#define G2SB_CTX2_G2DSTST_0_DSTS_RANGE                  15:0
#define G2SB_CTX2_G2DSTST_0_DSTS_WOFFSET                        0x0
#define G2SB_CTX2_G2DSTST_0_DSTS_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTST_0_DSTS_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTST_0_DSTS_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTST_0_DSTS_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Surface methods
// G2SRCPACK should only be used to specify the line gap
// use G2SRCPACK_SIZE to program height and width

// Register G2SB_CTX2_G2SRCPACK_0  //{2d,index=2f} source data packed mode
#define G2SB_CTX2_G2SRCPACK_0                   _MK_ADDR_CONST(0x802f)
#define G2SB_CTX2_G2SRCPACK_0_SECURE                    0x0
#define G2SB_CTX2_G2SRCPACK_0_WORD_COUNT                        0x1
#define G2SB_CTX2_G2SRCPACK_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCPACK_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCPACK_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCPACK_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCPACK_0_READ_MASK                         _MK_MASK_CONST(0xf)
#define G2SB_CTX2_G2SRCPACK_0_WRITE_MASK                        _MK_MASK_CONST(0xf)
// Packed mode - source mono data line gap
#define G2SB_CTX2_G2SRCPACK_0_SRCLNGAP_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2SRCPACK_0_SRCLNGAP_FIELD                    (_MK_MASK_CONST(0xf) << G2SB_CTX2_G2SRCPACK_0_SRCLNGAP_SHIFT)
#define G2SB_CTX2_G2SRCPACK_0_SRCLNGAP_RANGE                    3:0
#define G2SB_CTX2_G2SRCPACK_0_SRCLNGAP_WOFFSET                  0x0
#define G2SB_CTX2_G2SRCPACK_0_SRCLNGAP_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCPACK_0_SRCLNGAP_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCPACK_0_SRCLNGAP_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCPACK_0_SRCLNGAP_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// G2SRCPACKS_SIZE -- extension of G2SRCPACK, this register only holds the size of the packed data

// Register G2SB_CTX2_G2SRCPACK_SIZE_0  //{2d,index=30} source data packed mode
// In packed mode, SRCMONOW holds the horizontal size (bytes).
// If MONOH > 1, it is required width/stride be 16 byte aligned.
// Packed mode - source mono data line gap
#define G2SB_CTX2_G2SRCPACK_SIZE_0                      _MK_ADDR_CONST(0x8030)
#define G2SB_CTX2_G2SRCPACK_SIZE_0_SECURE                       0x0
#define G2SB_CTX2_G2SRCPACK_SIZE_0_WORD_COUNT                   0x1
#define G2SB_CTX2_G2SRCPACK_SIZE_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCPACK_SIZE_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCPACK_SIZE_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCPACK_SIZE_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCPACK_SIZE_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2SRCPACK_SIZE_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
// Packed mode - source mono data width in bytes
#define G2SB_CTX2_G2SRCPACK_SIZE_0_SRCMONOW_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2SRCPACK_SIZE_0_SRCMONOW_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_CTX2_G2SRCPACK_SIZE_0_SRCMONOW_SHIFT)
#define G2SB_CTX2_G2SRCPACK_SIZE_0_SRCMONOW_RANGE                       15:0
#define G2SB_CTX2_G2SRCPACK_SIZE_0_SRCMONOW_WOFFSET                     0x0
#define G2SB_CTX2_G2SRCPACK_SIZE_0_SRCMONOW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCPACK_SIZE_0_SRCMONOW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCPACK_SIZE_0_SRCMONOW_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCPACK_SIZE_0_SRCMONOW_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Packed mode - source mono data height in bytes
#define G2SB_CTX2_G2SRCPACK_SIZE_0_SRCMONOH_SHIFT                       _MK_SHIFT_CONST(16)
#define G2SB_CTX2_G2SRCPACK_SIZE_0_SRCMONOH_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_CTX2_G2SRCPACK_SIZE_0_SRCMONOH_SHIFT)
#define G2SB_CTX2_G2SRCPACK_SIZE_0_SRCMONOH_RANGE                       31:16
#define G2SB_CTX2_G2SRCPACK_SIZE_0_SRCMONOH_WOFFSET                     0x0
#define G2SB_CTX2_G2SRCPACK_SIZE_0_SRCMONOH_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCPACK_SIZE_0_SRCMONOH_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCPACK_SIZE_0_SRCMONOH_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCPACK_SIZE_0_SRCMONOH_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2SRCBA_0  //{host,2d,sb,index=31}
//src base address
#define G2SB_CTX2_G2SRCBA_0                     _MK_ADDR_CONST(0x8031)
#define G2SB_CTX2_G2SRCBA_0_SECURE                      0x0
#define G2SB_CTX2_G2SRCBA_0_WORD_COUNT                  0x1
#define G2SB_CTX2_G2SRCBA_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCBA_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCBA_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCBA_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCBA_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2SRCBA_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Source base address (byte address)
#define G2SB_CTX2_G2SRCBA_0_SRCBA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2SRCBA_0_SRCBA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX2_G2SRCBA_0_SRCBA_SHIFT)
#define G2SB_CTX2_G2SRCBA_0_SRCBA_RANGE                 31:0
#define G2SB_CTX2_G2SRCBA_0_SRCBA_WOFFSET                       0x0
#define G2SB_CTX2_G2SRCBA_0_SRCBA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCBA_0_SRCBA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCBA_0_SRCBA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCBA_0_SRCBA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2SRCBA_B_0  //{2d,sb,index=32}
//SB only
#define G2SB_CTX2_G2SRCBA_B_0                   _MK_ADDR_CONST(0x8032)
#define G2SB_CTX2_G2SRCBA_B_0_SECURE                    0x0
#define G2SB_CTX2_G2SRCBA_B_0_WORD_COUNT                        0x1
#define G2SB_CTX2_G2SRCBA_B_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCBA_B_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCBA_B_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCBA_B_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCBA_B_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2SRCBA_B_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
//This parameter specifies the start address of source image
// stored in the image buffer memory. In 4:2:0
//format mode, this image block accommodates for Y-image.
//This address specifies byte-position, however, bits [2:0]
// are restricted with respect to the data formats to fit
//multiple pixels in one memory word (8 bytes),. For example,
// {0, 4} for any YcrCb formats, {0, 2, 4, 6} for
//RGB 16-bit format.  Since one Y pixel takes 8-bit, all
// 8 byte-positions are valid in 4:2:0 mode. (Unlike
//multiplexed pixels format, there is no restrictions on this value.)
#define G2SB_CTX2_G2SRCBA_B_0_SRCBA_B_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2SRCBA_B_0_SRCBA_B_FIELD                     (_MK_MASK_CONST(0xffffffff) << G2SB_CTX2_G2SRCBA_B_0_SRCBA_B_SHIFT)
#define G2SB_CTX2_G2SRCBA_B_0_SRCBA_B_RANGE                     31:0
#define G2SB_CTX2_G2SRCBA_B_0_SRCBA_B_WOFFSET                   0x0
#define G2SB_CTX2_G2SRCBA_B_0_SRCBA_B_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCBA_B_0_SRCBA_B_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCBA_B_0_SRCBA_B_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCBA_B_0_SRCBA_B_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2SRCST_0  //{host,2d,sb,sbm,index=33}
#define G2SB_CTX2_G2SRCST_0                     _MK_ADDR_CONST(0x8033)
#define G2SB_CTX2_G2SRCST_0_SECURE                      0x0
#define G2SB_CTX2_G2SRCST_0_WORD_COUNT                  0x1
#define G2SB_CTX2_G2SRCST_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCST_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCST_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCST_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCST_0_READ_MASK                   _MK_MASK_CONST(0xffff)
#define G2SB_CTX2_G2SRCST_0_WRITE_MASK                  _MK_MASK_CONST(0xffff)
// Source Stride coordinate(bytes) with respect to SRCBA.
//In order to fit multiple pixels in one memory word (8 bytes),
//  bits [2:0] are restricted with respect to the
//data formats. For example, {0, 4} for any YcrCb formats,
//  {0, 2, 4, 6} for RGB 16-bit format.
#define G2SB_CTX2_G2SRCST_0_SRCS_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2SRCST_0_SRCS_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX2_G2SRCST_0_SRCS_SHIFT)
#define G2SB_CTX2_G2SRCST_0_SRCS_RANGE                  15:0
#define G2SB_CTX2_G2SRCST_0_SRCS_WOFFSET                        0x0
#define G2SB_CTX2_G2SRCST_0_SRCS_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCST_0_SRCS_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCST_0_SRCS_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCST_0_SRCS_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//srcColors

// Register G2SB_CTX2_G2SRCBGC_0  //{2d,index=34}
#define G2SB_CTX2_G2SRCBGC_0                    _MK_ADDR_CONST(0x8034)
#define G2SB_CTX2_G2SRCBGC_0_SECURE                     0x0
#define G2SB_CTX2_G2SRCBGC_0_WORD_COUNT                         0x1
#define G2SB_CTX2_G2SRCBGC_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCBGC_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCBGC_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCBGC_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCBGC_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2SRCBGC_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2SRCBGC_0_SRCBGC_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2SRCBGC_0_SRCBGC_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX2_G2SRCBGC_0_SRCBGC_SHIFT)
#define G2SB_CTX2_G2SRCBGC_0_SRCBGC_RANGE                       31:0
#define G2SB_CTX2_G2SRCBGC_0_SRCBGC_WOFFSET                     0x0
#define G2SB_CTX2_G2SRCBGC_0_SRCBGC_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCBGC_0_SRCBGC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCBGC_0_SRCBGC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCBGC_0_SRCBGC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2SRCFGC_0  //{host,2d,index=35}
#define G2SB_CTX2_G2SRCFGC_0                    _MK_ADDR_CONST(0x8035)
#define G2SB_CTX2_G2SRCFGC_0_SECURE                     0x0
#define G2SB_CTX2_G2SRCFGC_0_WORD_COUNT                         0x1
#define G2SB_CTX2_G2SRCFGC_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCFGC_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCFGC_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCFGC_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCFGC_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2SRCFGC_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2SRCFGC_0_SRCFGC_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2SRCFGC_0_SRCFGC_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX2_G2SRCFGC_0_SRCFGC_SHIFT)
#define G2SB_CTX2_G2SRCFGC_0_SRCFGC_RANGE                       31:0
#define G2SB_CTX2_G2SRCFGC_0_SRCFGC_WOFFSET                     0x0
#define G2SB_CTX2_G2SRCFGC_0_SRCFGC_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCFGC_0_SRCFGC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCFGC_0_SRCFGC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCFGC_0_SRCFGC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2SRCKEY_0  //{2d,index=36}
#define G2SB_CTX2_G2SRCKEY_0                    _MK_ADDR_CONST(0x8036)
#define G2SB_CTX2_G2SRCKEY_0_SECURE                     0x0
#define G2SB_CTX2_G2SRCKEY_0_WORD_COUNT                         0x1
#define G2SB_CTX2_G2SRCKEY_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCKEY_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCKEY_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCKEY_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCKEY_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2SRCKEY_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2SRCKEY_0_SRCKEY_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2SRCKEY_0_SRCKEY_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX2_G2SRCKEY_0_SRCKEY_SHIFT)
#define G2SB_CTX2_G2SRCKEY_0_SRCKEY_RANGE                       31:0
#define G2SB_CTX2_G2SRCKEY_0_SRCKEY_WOFFSET                     0x0
#define G2SB_CTX2_G2SRCKEY_0_SRCKEY_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCKEY_0_SRCKEY_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCKEY_0_SRCKEY_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCKEY_0_SRCKEY_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// for sc15, SRCWIDTH bit 14 must be set to 0. (limit of 16383 pixels)

// Register G2SB_CTX2_G2SRCSIZE_0  //{host,2d,sb,sbm,index=37}
#define G2SB_CTX2_G2SRCSIZE_0                   _MK_ADDR_CONST(0x8037)
#define G2SB_CTX2_G2SRCSIZE_0_SECURE                    0x0
#define G2SB_CTX2_G2SRCSIZE_0_WORD_COUNT                        0x1
#define G2SB_CTX2_G2SRCSIZE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCSIZE_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCSIZE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCSIZE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCSIZE_0_READ_MASK                         _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX2_G2SRCSIZE_0_WRITE_MASK                        _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX2_G2SRCSIZE_0_SRCWIDTH_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2SRCSIZE_0_SRCWIDTH_FIELD                    (_MK_MASK_CONST(0x7fff) << G2SB_CTX2_G2SRCSIZE_0_SRCWIDTH_SHIFT)
#define G2SB_CTX2_G2SRCSIZE_0_SRCWIDTH_RANGE                    14:0
#define G2SB_CTX2_G2SRCSIZE_0_SRCWIDTH_WOFFSET                  0x0
#define G2SB_CTX2_G2SRCSIZE_0_SRCWIDTH_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCSIZE_0_SRCWIDTH_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCSIZE_0_SRCWIDTH_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCSIZE_0_SRCWIDTH_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// In SB mode, number of lines - 1
// In 2D mode, actual lines
#define G2SB_CTX2_G2SRCSIZE_0_SRCHEIGHT_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX2_G2SRCSIZE_0_SRCHEIGHT_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX2_G2SRCSIZE_0_SRCHEIGHT_SHIFT)
#define G2SB_CTX2_G2SRCSIZE_0_SRCHEIGHT_RANGE                   30:16
#define G2SB_CTX2_G2SRCSIZE_0_SRCHEIGHT_WOFFSET                 0x0
#define G2SB_CTX2_G2SRCSIZE_0_SRCHEIGHT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCSIZE_0_SRCHEIGHT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCSIZE_0_SRCHEIGHT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCSIZE_0_SRCHEIGHT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2DSTSIZE_0  //{host,2d,sb,sbm,index=38}
#define G2SB_CTX2_G2DSTSIZE_0                   _MK_ADDR_CONST(0x8038)
#define G2SB_CTX2_G2DSTSIZE_0_SECURE                    0x0
#define G2SB_CTX2_G2DSTSIZE_0_WORD_COUNT                        0x1
#define G2SB_CTX2_G2DSTSIZE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTSIZE_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTSIZE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTSIZE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTSIZE_0_READ_MASK                         _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX2_G2DSTSIZE_0_WRITE_MASK                        _MK_MASK_CONST(0x7fff7fff)
// In 2D mode, the largest number can be programmed is 0x7fef
#define G2SB_CTX2_G2DSTSIZE_0_DSTWIDTH_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2DSTSIZE_0_DSTWIDTH_FIELD                    (_MK_MASK_CONST(0x7fff) << G2SB_CTX2_G2DSTSIZE_0_DSTWIDTH_SHIFT)
#define G2SB_CTX2_G2DSTSIZE_0_DSTWIDTH_RANGE                    14:0
#define G2SB_CTX2_G2DSTSIZE_0_DSTWIDTH_WOFFSET                  0x0
#define G2SB_CTX2_G2DSTSIZE_0_DSTWIDTH_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTSIZE_0_DSTWIDTH_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTSIZE_0_DSTWIDTH_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTSIZE_0_DSTWIDTH_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// In SB mode, number of lines - 1
// In 2D mode, actual lines
#define G2SB_CTX2_G2DSTSIZE_0_DSTHEIGHT_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX2_G2DSTSIZE_0_DSTHEIGHT_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX2_G2DSTSIZE_0_DSTHEIGHT_SHIFT)
#define G2SB_CTX2_G2DSTSIZE_0_DSTHEIGHT_RANGE                   30:16
#define G2SB_CTX2_G2DSTSIZE_0_DSTHEIGHT_WOFFSET                 0x0
#define G2SB_CTX2_G2DSTSIZE_0_DSTHEIGHT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTSIZE_0_DSTHEIGHT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTSIZE_0_DSTHEIGHT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTSIZE_0_DSTHEIGHT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// ImageBlit Methods

// Register G2SB_CTX2_G2SRCPS_0  //{host,2d,index=39}
#define G2SB_CTX2_G2SRCPS_0                     _MK_ADDR_CONST(0x8039)
#define G2SB_CTX2_G2SRCPS_0_SECURE                      0x0
#define G2SB_CTX2_G2SRCPS_0_WORD_COUNT                  0x1
#define G2SB_CTX2_G2SRCPS_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCPS_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCPS_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCPS_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCPS_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2SRCPS_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
//SRCX[2:0] are ignored in SRCCD==0 (mono expansion),
//The first bit of the first byte (bit7 if HLMONO==0, or bit0 if HLMONO==1) always
//expand to DSTX,DSTY
#define G2SB_CTX2_G2SRCPS_0_SRCX_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2SRCPS_0_SRCX_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX2_G2SRCPS_0_SRCX_SHIFT)
#define G2SB_CTX2_G2SRCPS_0_SRCX_RANGE                  15:0
#define G2SB_CTX2_G2SRCPS_0_SRCX_WOFFSET                        0x0
#define G2SB_CTX2_G2SRCPS_0_SRCX_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCPS_0_SRCX_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCPS_0_SRCX_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCPS_0_SRCX_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX2_G2SRCPS_0_SRCY_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX2_G2SRCPS_0_SRCY_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX2_G2SRCPS_0_SRCY_SHIFT)
#define G2SB_CTX2_G2SRCPS_0_SRCY_RANGE                  31:16
#define G2SB_CTX2_G2SRCPS_0_SRCY_WOFFSET                        0x0
#define G2SB_CTX2_G2SRCPS_0_SRCY_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCPS_0_SRCY_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCPS_0_SRCY_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCPS_0_SRCY_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2DSTPS_0  //{host,2d,index=3a}
#define G2SB_CTX2_G2DSTPS_0                     _MK_ADDR_CONST(0x803a)
#define G2SB_CTX2_G2DSTPS_0_SECURE                      0x0
#define G2SB_CTX2_G2DSTPS_0_WORD_COUNT                  0x1
#define G2SB_CTX2_G2DSTPS_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTPS_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTPS_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTPS_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTPS_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2DSTPS_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// NOTE: when ALPTYPE is PL1BPP, DSTX[2:0] must be zero, see bug 344489
// NOTE: when ALPTYPE is PL2BPP, DSTX[1:0] must be zero, see bug 344489
// NOTE: when ALPTYPE is PL4BPP, DSTX[0:0] must be zero, see bug 344489
#define G2SB_CTX2_G2DSTPS_0_DSTX_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2DSTPS_0_DSTX_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX2_G2DSTPS_0_DSTX_SHIFT)
#define G2SB_CTX2_G2DSTPS_0_DSTX_RANGE                  15:0
#define G2SB_CTX2_G2DSTPS_0_DSTX_WOFFSET                        0x0
#define G2SB_CTX2_G2DSTPS_0_DSTX_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTPS_0_DSTX_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTPS_0_DSTX_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTPS_0_DSTX_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX2_G2DSTPS_0_DSTY_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX2_G2DSTPS_0_DSTY_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX2_G2DSTPS_0_DSTY_SHIFT)
#define G2SB_CTX2_G2DSTPS_0_DSTY_RANGE                  31:16
#define G2SB_CTX2_G2DSTPS_0_DSTY_WOFFSET                        0x0
#define G2SB_CTX2_G2DSTPS_0_DSTY_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTPS_0_DSTY_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTPS_0_DSTY_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTPS_0_DSTY_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// circular buffer

// Register G2SB_CTX2_G2CBDES_0  // {host,2d,sb,index=3b}
#define G2SB_CTX2_G2CBDES_0                     _MK_ADDR_CONST(0x803b)
#define G2SB_CTX2_G2CBDES_0_SECURE                      0x0
#define G2SB_CTX2_G2CBDES_0_WORD_COUNT                  0x1
#define G2SB_CTX2_G2CBDES_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBDES_0_RESET_MASK                  _MK_MASK_CONST(0x80000000)
#define G2SB_CTX2_G2CBDES_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBDES_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBDES_0_READ_MASK                   _MK_MASK_CONST(0xffff00ff)
#define G2SB_CTX2_G2CBDES_0_WRITE_MASK                  _MK_MASK_CONST(0xffff00ff)
// This specifies the number of buffers in
//circular buffer feature
#define G2SB_CTX2_G2CBDES_0_CBCOUNT_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2CBDES_0_CBCOUNT_FIELD                       (_MK_MASK_CONST(0xff) << G2SB_CTX2_G2CBDES_0_CBCOUNT_SHIFT)
#define G2SB_CTX2_G2CBDES_0_CBCOUNT_RANGE                       7:0
#define G2SB_CTX2_G2CBDES_0_CBCOUNT_WOFFSET                     0x0
#define G2SB_CTX2_G2CBDES_0_CBCOUNT_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBDES_0_CBCOUNT_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBDES_0_CBCOUNT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBDES_0_CBCOUNT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//vertical line number in one buffer
#define G2SB_CTX2_G2CBDES_0_CBLINE_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_CTX2_G2CBDES_0_CBLINE_FIELD                        (_MK_MASK_CONST(0x7fff) << G2SB_CTX2_G2CBDES_0_CBLINE_SHIFT)
#define G2SB_CTX2_G2CBDES_0_CBLINE_RANGE                        30:16
#define G2SB_CTX2_G2CBDES_0_CBLINE_WOFFSET                      0x0
#define G2SB_CTX2_G2CBDES_0_CBLINE_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBDES_0_CBLINE_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBDES_0_CBLINE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBDES_0_CBLINE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

//top clipping at the first buffer, (buffer start)
// refer to TOP_CBLINE in G2CBDES2 0= disable
#define G2SB_CTX2_G2CBDES_0_TOPCLIP_SHIFT                       _MK_SHIFT_CONST(31)
#define G2SB_CTX2_G2CBDES_0_TOPCLIP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2CBDES_0_TOPCLIP_SHIFT)
#define G2SB_CTX2_G2CBDES_0_TOPCLIP_RANGE                       31:31
#define G2SB_CTX2_G2CBDES_0_TOPCLIP_WOFFSET                     0x0
#define G2SB_CTX2_G2CBDES_0_TOPCLIP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBDES_0_TOPCLIP_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2CBDES_0_TOPCLIP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBDES_0_TOPCLIP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBDES_0_TOPCLIP_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CBDES_0_TOPCLIP_ENABLE                      _MK_ENUM_CONST(1)


// Register G2SB_CTX2_G2CBSTRIDE_0  // {host,2d,sb,index=3c}
#define G2SB_CTX2_G2CBSTRIDE_0                  _MK_ADDR_CONST(0x803c)
#define G2SB_CTX2_G2CBSTRIDE_0_SECURE                   0x0
#define G2SB_CTX2_G2CBSTRIDE_0_WORD_COUNT                       0x1
#define G2SB_CTX2_G2CBSTRIDE_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBSTRIDE_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBSTRIDE_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBSTRIDE_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBSTRIDE_0_READ_MASK                        _MK_MASK_CONST(0xc0ffffff)
#define G2SB_CTX2_G2CBSTRIDE_0_WRITE_MASK                       _MK_MASK_CONST(0xc0ffffff)
// Video Buffer Luma(or RGB) Buffer Stride
//  This is luma buffer stride (in bytes)
#define G2SB_CTX2_G2CBSTRIDE_0_CBSTRIDE_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2CBSTRIDE_0_CBSTRIDE_FIELD                   (_MK_MASK_CONST(0xffffff) << G2SB_CTX2_G2CBSTRIDE_0_CBSTRIDE_SHIFT)
#define G2SB_CTX2_G2CBSTRIDE_0_CBSTRIDE_RANGE                   23:0
#define G2SB_CTX2_G2CBSTRIDE_0_CBSTRIDE_WOFFSET                 0x0
#define G2SB_CTX2_G2CBSTRIDE_0_CBSTRIDE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBSTRIDE_0_CBSTRIDE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBSTRIDE_0_CBSTRIDE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBSTRIDE_0_CBSTRIDE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Chroma Buffer Stride default is half of luma
//   00= 1/2 of Luma Buffer Stride; in this
//       case, Luma Buffer Stride should be
//       multiple of 2 bytes.
//   01= Equal to Luma Buffer Stride
//   10= 1/4 of Luma Buffer Stride; in this
//       case, Luma Buffer Stride should be
//       multiple of 4 bytes.
//   1x= Reserved
#define G2SB_CTX2_G2CBSTRIDE_0_CBUVSTRIDE_SHIFT                 _MK_SHIFT_CONST(30)
#define G2SB_CTX2_G2CBSTRIDE_0_CBUVSTRIDE_FIELD                 (_MK_MASK_CONST(0x3) << G2SB_CTX2_G2CBSTRIDE_0_CBUVSTRIDE_SHIFT)
#define G2SB_CTX2_G2CBSTRIDE_0_CBUVSTRIDE_RANGE                 31:30
#define G2SB_CTX2_G2CBSTRIDE_0_CBUVSTRIDE_WOFFSET                       0x0
#define G2SB_CTX2_G2CBSTRIDE_0_CBUVSTRIDE_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBSTRIDE_0_CBUVSTRIDE_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBSTRIDE_0_CBUVSTRIDE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBSTRIDE_0_CBUVSTRIDE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBSTRIDE_0_CBUVSTRIDE_CBS2X                 _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2CBSTRIDE_0_CBUVSTRIDE_CBS1X                 _MK_ENUM_CONST(1)
#define G2SB_CTX2_G2CBSTRIDE_0_CBUVSTRIDE_CBS4X                 _MK_ENUM_CONST(2)

//Line Methods

// Register G2SB_CTX2_G2LINESETTING_0  //{2d,index=3d}
#define G2SB_CTX2_G2LINESETTING_0                       _MK_ADDR_CONST(0x803d)
#define G2SB_CTX2_G2LINESETTING_0_SECURE                        0x0
#define G2SB_CTX2_G2LINESETTING_0_WORD_COUNT                    0x1
#define G2SB_CTX2_G2LINESETTING_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINESETTING_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINESETTING_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINESETTING_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINESETTING_0_READ_MASK                     _MK_MASK_CONST(0xff1fffff)
#define G2SB_CTX2_G2LINESETTING_0_WRITE_MASK                    _MK_MASK_CONST(0xff1fffff)
#define G2SB_CTX2_G2LINESETTING_0_GAMMA_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2LINESETTING_0_GAMMA_FIELD                   (_MK_MASK_CONST(0x1fffff) << G2SB_CTX2_G2LINESETTING_0_GAMMA_SHIFT)
#define G2SB_CTX2_G2LINESETTING_0_GAMMA_RANGE                   20:0
#define G2SB_CTX2_G2LINESETTING_0_GAMMA_WOFFSET                 0x0
#define G2SB_CTX2_G2LINESETTING_0_GAMMA_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINESETTING_0_GAMMA_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINESETTING_0_GAMMA_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINESETTING_0_GAMMA_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

//0:xmajor 1: y major
#define G2SB_CTX2_G2LINESETTING_0_MAJOR_SHIFT                   _MK_SHIFT_CONST(24)
#define G2SB_CTX2_G2LINESETTING_0_MAJOR_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2LINESETTING_0_MAJOR_SHIFT)
#define G2SB_CTX2_G2LINESETTING_0_MAJOR_RANGE                   24:24
#define G2SB_CTX2_G2LINESETTING_0_MAJOR_WOFFSET                 0x0
#define G2SB_CTX2_G2LINESETTING_0_MAJOR_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINESETTING_0_MAJOR_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINESETTING_0_MAJOR_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINESETTING_0_MAJOR_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINESETTING_0_MAJOR_XMAJOR                  _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2LINESETTING_0_MAJOR_YMAJOR                  _MK_ENUM_CONST(1)

#define G2SB_CTX2_G2LINESETTING_0_LINEXDIR_SHIFT                        _MK_SHIFT_CONST(25)
#define G2SB_CTX2_G2LINESETTING_0_LINEXDIR_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2LINESETTING_0_LINEXDIR_SHIFT)
#define G2SB_CTX2_G2LINESETTING_0_LINEXDIR_RANGE                        25:25
#define G2SB_CTX2_G2LINESETTING_0_LINEXDIR_WOFFSET                      0x0
#define G2SB_CTX2_G2LINESETTING_0_LINEXDIR_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINESETTING_0_LINEXDIR_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINESETTING_0_LINEXDIR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINESETTING_0_LINEXDIR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

#define G2SB_CTX2_G2LINESETTING_0_LINEYDIR_SHIFT                        _MK_SHIFT_CONST(26)
#define G2SB_CTX2_G2LINESETTING_0_LINEYDIR_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2LINESETTING_0_LINEYDIR_SHIFT)
#define G2SB_CTX2_G2LINESETTING_0_LINEYDIR_RANGE                        26:26
#define G2SB_CTX2_G2LINESETTING_0_LINEYDIR_WOFFSET                      0x0
#define G2SB_CTX2_G2LINESETTING_0_LINEYDIR_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINESETTING_0_LINEYDIR_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINESETTING_0_LINEYDIR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINESETTING_0_LINEYDIR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

//draw last pixel or not
#define G2SB_CTX2_G2LINESETTING_0_DROPLASTP_SHIFT                       _MK_SHIFT_CONST(27)
#define G2SB_CTX2_G2LINESETTING_0_DROPLASTP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2LINESETTING_0_DROPLASTP_SHIFT)
#define G2SB_CTX2_G2LINESETTING_0_DROPLASTP_RANGE                       27:27
#define G2SB_CTX2_G2LINESETTING_0_DROPLASTP_WOFFSET                     0x0
#define G2SB_CTX2_G2LINESETTING_0_DROPLASTP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINESETTING_0_DROPLASTP_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINESETTING_0_DROPLASTP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINESETTING_0_DROPLASTP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//use OCTANTS in G2LINEDELTAN register instead of MAJOR LINEXDIR LINEYDIR
#define G2SB_CTX2_G2LINESETTING_0_LINEUSEOCTANT_SHIFT                   _MK_SHIFT_CONST(28)
#define G2SB_CTX2_G2LINESETTING_0_LINEUSEOCTANT_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2LINESETTING_0_LINEUSEOCTANT_SHIFT)
#define G2SB_CTX2_G2LINESETTING_0_LINEUSEOCTANT_RANGE                   28:28
#define G2SB_CTX2_G2LINESETTING_0_LINEUSEOCTANT_WOFFSET                 0x0
#define G2SB_CTX2_G2LINESETTING_0_LINEUSEOCTANT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINESETTING_0_LINEUSEOCTANT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINESETTING_0_LINEUSEOCTANT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINESETTING_0_LINEUSEOCTANT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

//000 octant 0
//001 octant 1
//010 octant 2
//011 octant 3
//100 octant 4
//101 octant 5
//110 octant 6
//111 octant 7
#define G2SB_CTX2_G2LINESETTING_0_OCTANTS_SHIFT                 _MK_SHIFT_CONST(29)
#define G2SB_CTX2_G2LINESETTING_0_OCTANTS_FIELD                 (_MK_MASK_CONST(0x7) << G2SB_CTX2_G2LINESETTING_0_OCTANTS_SHIFT)
#define G2SB_CTX2_G2LINESETTING_0_OCTANTS_RANGE                 31:29
#define G2SB_CTX2_G2LINESETTING_0_OCTANTS_WOFFSET                       0x0
#define G2SB_CTX2_G2LINESETTING_0_OCTANTS_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINESETTING_0_OCTANTS_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINESETTING_0_OCTANTS_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINESETTING_0_OCTANTS_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//
//
//
//   |    |    |
//    | 5 | 6 |
//     |  |  |
//    4 | | | 7
//       |||
//   ----------->
//       |||
//    3 | | | 0
//     |  |  |
//    | 2 | 1 |
//   |    |    |
//        V
//

// Register G2SB_CTX2_G2LINEDELTAN_0  //{2d,index=3e}
#define G2SB_CTX2_G2LINEDELTAN_0                        _MK_ADDR_CONST(0x803e)
#define G2SB_CTX2_G2LINEDELTAN_0_SECURE                         0x0
#define G2SB_CTX2_G2LINEDELTAN_0_WORD_COUNT                     0x1
#define G2SB_CTX2_G2LINEDELTAN_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINEDELTAN_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINEDELTAN_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINEDELTAN_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINEDELTAN_0_READ_MASK                      _MK_MASK_CONST(0x1fffff)
#define G2SB_CTX2_G2LINEDELTAN_0_WRITE_MASK                     _MK_MASK_CONST(0x1fffff)
#define G2SB_CTX2_G2LINEDELTAN_0_DELTAN_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2LINEDELTAN_0_DELTAN_FIELD                   (_MK_MASK_CONST(0x1fffff) << G2SB_CTX2_G2LINEDELTAN_0_DELTAN_SHIFT)
#define G2SB_CTX2_G2LINEDELTAN_0_DELTAN_RANGE                   20:0
#define G2SB_CTX2_G2LINEDELTAN_0_DELTAN_WOFFSET                 0x0
#define G2SB_CTX2_G2LINEDELTAN_0_DELTAN_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINEDELTAN_0_DELTAN_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINEDELTAN_0_DELTAN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINEDELTAN_0_DELTAN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2LINEDELTAM_0  //{2d,index=3f}
#define G2SB_CTX2_G2LINEDELTAM_0                        _MK_ADDR_CONST(0x803f)
#define G2SB_CTX2_G2LINEDELTAM_0_SECURE                         0x0
#define G2SB_CTX2_G2LINEDELTAM_0_WORD_COUNT                     0x1
#define G2SB_CTX2_G2LINEDELTAM_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINEDELTAM_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINEDELTAM_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINEDELTAM_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINEDELTAM_0_READ_MASK                      _MK_MASK_CONST(0x1fffff)
#define G2SB_CTX2_G2LINEDELTAM_0_WRITE_MASK                     _MK_MASK_CONST(0x1fffff)
#define G2SB_CTX2_G2LINEDELTAM_0_DELTAM_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2LINEDELTAM_0_DELTAM_FIELD                   (_MK_MASK_CONST(0x1fffff) << G2SB_CTX2_G2LINEDELTAM_0_DELTAM_SHIFT)
#define G2SB_CTX2_G2LINEDELTAM_0_DELTAM_RANGE                   20:0
#define G2SB_CTX2_G2LINEDELTAM_0_DELTAM_WOFFSET                 0x0
#define G2SB_CTX2_G2LINEDELTAM_0_DELTAM_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINEDELTAM_0_DELTAM_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINEDELTAM_0_DELTAM_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINEDELTAM_0_DELTAM_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2LINEPOS_0  //{2d,index=40}
#define G2SB_CTX2_G2LINEPOS_0                   _MK_ADDR_CONST(0x8040)
#define G2SB_CTX2_G2LINEPOS_0_SECURE                    0x0
#define G2SB_CTX2_G2LINEPOS_0_WORD_COUNT                        0x1
#define G2SB_CTX2_G2LINEPOS_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINEPOS_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINEPOS_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINEPOS_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINEPOS_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2LINEPOS_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2LINEPOS_0_LINEXPOS_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2LINEPOS_0_LINEXPOS_FIELD                    (_MK_MASK_CONST(0xffff) << G2SB_CTX2_G2LINEPOS_0_LINEXPOS_SHIFT)
#define G2SB_CTX2_G2LINEPOS_0_LINEXPOS_RANGE                    15:0
#define G2SB_CTX2_G2LINEPOS_0_LINEXPOS_WOFFSET                  0x0
#define G2SB_CTX2_G2LINEPOS_0_LINEXPOS_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINEPOS_0_LINEXPOS_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINEPOS_0_LINEXPOS_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINEPOS_0_LINEXPOS_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

#define G2SB_CTX2_G2LINEPOS_0_LINEYPOS_SHIFT                    _MK_SHIFT_CONST(16)
#define G2SB_CTX2_G2LINEPOS_0_LINEYPOS_FIELD                    (_MK_MASK_CONST(0xffff) << G2SB_CTX2_G2LINEPOS_0_LINEYPOS_SHIFT)
#define G2SB_CTX2_G2LINEPOS_0_LINEYPOS_RANGE                    31:16
#define G2SB_CTX2_G2LINEPOS_0_LINEYPOS_WOFFSET                  0x0
#define G2SB_CTX2_G2LINEPOS_0_LINEYPOS_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINEPOS_0_LINEYPOS_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINEPOS_0_LINEYPOS_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINEPOS_0_LINEYPOS_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2LINELEN_0  //{2d,index=41}
#define G2SB_CTX2_G2LINELEN_0                   _MK_ADDR_CONST(0x8041)
#define G2SB_CTX2_G2LINELEN_0_SECURE                    0x0
#define G2SB_CTX2_G2LINELEN_0_WORD_COUNT                        0x1
#define G2SB_CTX2_G2LINELEN_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINELEN_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINELEN_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINELEN_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINELEN_0_READ_MASK                         _MK_MASK_CONST(0x7fff)
#define G2SB_CTX2_G2LINELEN_0_WRITE_MASK                        _MK_MASK_CONST(0x7fff)
#define G2SB_CTX2_G2LINELEN_0_LINELEN_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2LINELEN_0_LINELEN_FIELD                     (_MK_MASK_CONST(0x7fff) << G2SB_CTX2_G2LINELEN_0_LINELEN_SHIFT)
#define G2SB_CTX2_G2LINELEN_0_LINELEN_RANGE                     14:0
#define G2SB_CTX2_G2LINELEN_0_LINELEN_WOFFSET                   0x0
#define G2SB_CTX2_G2LINELEN_0_LINELEN_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINELEN_0_LINELEN_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINELEN_0_LINELEN_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2LINELEN_0_LINELEN_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2CSCFOURTH_0  //{sb,sbm,index=42}
#define G2SB_CTX2_G2CSCFOURTH_0                 _MK_ADDR_CONST(0x8042)
#define G2SB_CTX2_G2CSCFOURTH_0_SECURE                  0x0
#define G2SB_CTX2_G2CSCFOURTH_0_WORD_COUNT                      0x1
#define G2SB_CTX2_G2CSCFOURTH_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCFOURTH_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCFOURTH_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCFOURTH_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCFOURTH_0_READ_MASK                       _MK_MASK_CONST(0x1ff01ff)
#define G2SB_CTX2_G2CSCFOURTH_0_WRITE_MASK                      _MK_MASK_CONST(0x1ff01ff)
// multiplier for G for U generation.
//This parameter consists of a sign bit and 8-bit magnitude (s1.7)
// For RGB->YUV the recommended value is -0.291 (decimal) or 0x125
// For any other combination this parameter is ignored
#define G2SB_CTX2_G2CSCFOURTH_0_G2U_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2CSCFOURTH_0_G2U_FIELD                       (_MK_MASK_CONST(0x1ff) << G2SB_CTX2_G2CSCFOURTH_0_G2U_SHIFT)
#define G2SB_CTX2_G2CSCFOURTH_0_G2U_RANGE                       8:0
#define G2SB_CTX2_G2CSCFOURTH_0_G2U_WOFFSET                     0x0
#define G2SB_CTX2_G2CSCFOURTH_0_G2U_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCFOURTH_0_G2U_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCFOURTH_0_G2U_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCFOURTH_0_G2U_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// multiplier for G for V generation.
//This parameter consists of a sign bit and 8-bit magnitude (s1.7)
// For RGB->YUV the recommended value is -0.368 (decimal) or 0x12F
// For any other combination this parameter is ignored
#define G2SB_CTX2_G2CSCFOURTH_0_G2V_SHIFT                       _MK_SHIFT_CONST(16)
#define G2SB_CTX2_G2CSCFOURTH_0_G2V_FIELD                       (_MK_MASK_CONST(0x1ff) << G2SB_CTX2_G2CSCFOURTH_0_G2V_SHIFT)
#define G2SB_CTX2_G2CSCFOURTH_0_G2V_RANGE                       24:16
#define G2SB_CTX2_G2CSCFOURTH_0_G2V_WOFFSET                     0x0
#define G2SB_CTX2_G2CSCFOURTH_0_G2V_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCFOURTH_0_G2V_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCFOURTH_0_G2V_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CSCFOURTH_0_G2V_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2SRCST_B_0  //{2d,index=43}
#define G2SB_CTX2_G2SRCST_B_0                   _MK_ADDR_CONST(0x8043)
#define G2SB_CTX2_G2SRCST_B_0_SECURE                    0x0
#define G2SB_CTX2_G2SRCST_B_0_WORD_COUNT                        0x1
#define G2SB_CTX2_G2SRCST_B_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCST_B_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCST_B_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCST_B_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCST_B_0_READ_MASK                         _MK_MASK_CONST(0xffff)
#define G2SB_CTX2_G2SRCST_B_0_WRITE_MASK                        _MK_MASK_CONST(0xffff)
// Source Stride B
#define G2SB_CTX2_G2SRCST_B_0_SRCS_B_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2SRCST_B_0_SRCS_B_FIELD                      (_MK_MASK_CONST(0xffff) << G2SB_CTX2_G2SRCST_B_0_SRCS_B_SHIFT)
#define G2SB_CTX2_G2SRCST_B_0_SRCS_B_RANGE                      15:0
#define G2SB_CTX2_G2SRCST_B_0_SRCS_B_WOFFSET                    0x0
#define G2SB_CTX2_G2SRCST_B_0_SRCS_B_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCST_B_0_SRCS_B_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCST_B_0_SRCS_B_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCST_B_0_SRCS_B_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2UVSTRIDE_0  //{2d,sb,index=44}
#define G2SB_CTX2_G2UVSTRIDE_0                  _MK_ADDR_CONST(0x8044)
#define G2SB_CTX2_G2UVSTRIDE_0_SECURE                   0x0
#define G2SB_CTX2_G2UVSTRIDE_0_WORD_COUNT                       0x1
#define G2SB_CTX2_G2UVSTRIDE_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2UVSTRIDE_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2UVSTRIDE_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2UVSTRIDE_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2UVSTRIDE_0_READ_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX2_G2UVSTRIDE_0_WRITE_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX2_G2UVSTRIDE_0_UVSTRIDE_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2UVSTRIDE_0_UVSTRIDE_FIELD                   (_MK_MASK_CONST(0xffff) << G2SB_CTX2_G2UVSTRIDE_0_UVSTRIDE_SHIFT)
#define G2SB_CTX2_G2UVSTRIDE_0_UVSTRIDE_RANGE                   15:0
#define G2SB_CTX2_G2UVSTRIDE_0_UVSTRIDE_WOFFSET                 0x0
#define G2SB_CTX2_G2UVSTRIDE_0_UVSTRIDE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2UVSTRIDE_0_UVSTRIDE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2UVSTRIDE_0_UVSTRIDE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2UVSTRIDE_0_UVSTRIDE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// circular buffer controller 2

// Register G2SB_CTX2_G2CBDES2_0  // {host,2d,sb,index=45}
#define G2SB_CTX2_G2CBDES2_0                    _MK_ADDR_CONST(0x8045)
#define G2SB_CTX2_G2CBDES2_0_SECURE                     0x0
#define G2SB_CTX2_G2CBDES2_0_WORD_COUNT                         0x1
#define G2SB_CTX2_G2CBDES2_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBDES2_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBDES2_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBDES2_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBDES2_0_READ_MASK                  _MK_MASK_CONST(0x7fff)
#define G2SB_CTX2_G2CBDES2_0_WRITE_MASK                         _MK_MASK_CONST(0x7fff)
// Circular buffer top clipping enabled, the first buffer line num
#define G2SB_CTX2_G2CBDES2_0_TOP_CBLINE_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2CBDES2_0_TOP_CBLINE_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX2_G2CBDES2_0_TOP_CBLINE_SHIFT)
#define G2SB_CTX2_G2CBDES2_0_TOP_CBLINE_RANGE                   14:0
#define G2SB_CTX2_G2CBDES2_0_TOP_CBLINE_WOFFSET                 0x0
#define G2SB_CTX2_G2CBDES2_0_TOP_CBLINE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBDES2_0_TOP_CBLINE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBDES2_0_TOP_CBLINE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2CBDES2_0_TOP_CBLINE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2TILEMODE_0  //{host,2d,sb,index=46}
#define G2SB_CTX2_G2TILEMODE_0                  _MK_ADDR_CONST(0x8046)
#define G2SB_CTX2_G2TILEMODE_0_SECURE                   0x0
#define G2SB_CTX2_G2TILEMODE_0_WORD_COUNT                       0x1
#define G2SB_CTX2_G2TILEMODE_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TILEMODE_0_RESET_MASK                       _MK_MASK_CONST(0x111111)
#define G2SB_CTX2_G2TILEMODE_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TILEMODE_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TILEMODE_0_READ_MASK                        _MK_MASK_CONST(0x111111)
#define G2SB_CTX2_G2TILEMODE_0_WRITE_MASK                       _MK_MASK_CONST(0x111111)
//Y or RGB surface
#define G2SB_CTX2_G2TILEMODE_0_SRC_Y_TILE_MODE_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2TILEMODE_0_SRC_Y_TILE_MODE_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2TILEMODE_0_SRC_Y_TILE_MODE_SHIFT)
#define G2SB_CTX2_G2TILEMODE_0_SRC_Y_TILE_MODE_RANGE                    0:0
#define G2SB_CTX2_G2TILEMODE_0_SRC_Y_TILE_MODE_WOFFSET                  0x0
#define G2SB_CTX2_G2TILEMODE_0_SRC_Y_TILE_MODE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TILEMODE_0_SRC_Y_TILE_MODE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2TILEMODE_0_SRC_Y_TILE_MODE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TILEMODE_0_SRC_Y_TILE_MODE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TILEMODE_0_SRC_Y_TILE_MODE_LINEAR                   _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2TILEMODE_0_SRC_Y_TILE_MODE_TILED                    _MK_ENUM_CONST(1)

//UV surface, ignored in RGB mode
#define G2SB_CTX2_G2TILEMODE_0_SRC_UV_TILE_MODE_SHIFT                   _MK_SHIFT_CONST(4)
#define G2SB_CTX2_G2TILEMODE_0_SRC_UV_TILE_MODE_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2TILEMODE_0_SRC_UV_TILE_MODE_SHIFT)
#define G2SB_CTX2_G2TILEMODE_0_SRC_UV_TILE_MODE_RANGE                   4:4
#define G2SB_CTX2_G2TILEMODE_0_SRC_UV_TILE_MODE_WOFFSET                 0x0
#define G2SB_CTX2_G2TILEMODE_0_SRC_UV_TILE_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TILEMODE_0_SRC_UV_TILE_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2TILEMODE_0_SRC_UV_TILE_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TILEMODE_0_SRC_UV_TILE_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TILEMODE_0_SRC_UV_TILE_MODE_LINEAR                  _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2TILEMODE_0_SRC_UV_TILE_MODE_TILED                   _MK_ENUM_CONST(1)

//Y or RGB surface
#define G2SB_CTX2_G2TILEMODE_0_PAT_Y_TILE_MODE_SHIFT                    _MK_SHIFT_CONST(8)
#define G2SB_CTX2_G2TILEMODE_0_PAT_Y_TILE_MODE_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2TILEMODE_0_PAT_Y_TILE_MODE_SHIFT)
#define G2SB_CTX2_G2TILEMODE_0_PAT_Y_TILE_MODE_RANGE                    8:8
#define G2SB_CTX2_G2TILEMODE_0_PAT_Y_TILE_MODE_WOFFSET                  0x0
#define G2SB_CTX2_G2TILEMODE_0_PAT_Y_TILE_MODE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TILEMODE_0_PAT_Y_TILE_MODE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2TILEMODE_0_PAT_Y_TILE_MODE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TILEMODE_0_PAT_Y_TILE_MODE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TILEMODE_0_PAT_Y_TILE_MODE_LINEAR                   _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2TILEMODE_0_PAT_Y_TILE_MODE_TILED                    _MK_ENUM_CONST(1)

//UNUSED
#define G2SB_CTX2_G2TILEMODE_0_PAT_UV_TILE_MODE_SHIFT                   _MK_SHIFT_CONST(12)
#define G2SB_CTX2_G2TILEMODE_0_PAT_UV_TILE_MODE_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2TILEMODE_0_PAT_UV_TILE_MODE_SHIFT)
#define G2SB_CTX2_G2TILEMODE_0_PAT_UV_TILE_MODE_RANGE                   12:12
#define G2SB_CTX2_G2TILEMODE_0_PAT_UV_TILE_MODE_WOFFSET                 0x0
#define G2SB_CTX2_G2TILEMODE_0_PAT_UV_TILE_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TILEMODE_0_PAT_UV_TILE_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2TILEMODE_0_PAT_UV_TILE_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TILEMODE_0_PAT_UV_TILE_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TILEMODE_0_PAT_UV_TILE_MODE_LINEAR                  _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2TILEMODE_0_PAT_UV_TILE_MODE_TILED                   _MK_ENUM_CONST(1)

//Same as destination write unless DST_RD_WR_SEP (not supported)
#define G2SB_CTX2_G2TILEMODE_0_DST_RD_TILE_MODE_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX2_G2TILEMODE_0_DST_RD_TILE_MODE_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2TILEMODE_0_DST_RD_TILE_MODE_SHIFT)
#define G2SB_CTX2_G2TILEMODE_0_DST_RD_TILE_MODE_RANGE                   16:16
#define G2SB_CTX2_G2TILEMODE_0_DST_RD_TILE_MODE_WOFFSET                 0x0
#define G2SB_CTX2_G2TILEMODE_0_DST_RD_TILE_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TILEMODE_0_DST_RD_TILE_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2TILEMODE_0_DST_RD_TILE_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TILEMODE_0_DST_RD_TILE_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TILEMODE_0_DST_RD_TILE_MODE_LINEAR                  _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2TILEMODE_0_DST_RD_TILE_MODE_TILED                   _MK_ENUM_CONST(1)

//destination surface
#define G2SB_CTX2_G2TILEMODE_0_DST_WR_TILE_MODE_SHIFT                   _MK_SHIFT_CONST(20)
#define G2SB_CTX2_G2TILEMODE_0_DST_WR_TILE_MODE_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX2_G2TILEMODE_0_DST_WR_TILE_MODE_SHIFT)
#define G2SB_CTX2_G2TILEMODE_0_DST_WR_TILE_MODE_RANGE                   20:20
#define G2SB_CTX2_G2TILEMODE_0_DST_WR_TILE_MODE_WOFFSET                 0x0
#define G2SB_CTX2_G2TILEMODE_0_DST_WR_TILE_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TILEMODE_0_DST_WR_TILE_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX2_G2TILEMODE_0_DST_WR_TILE_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TILEMODE_0_DST_WR_TILE_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2TILEMODE_0_DST_WR_TILE_MODE_LINEAR                  _MK_ENUM_CONST(0)
#define G2SB_CTX2_G2TILEMODE_0_DST_WR_TILE_MODE_TILED                   _MK_ENUM_CONST(1)


// Register G2SB_CTX2_G2PATBASE_0  //{2d,index=47}
#define G2SB_CTX2_G2PATBASE_0                   _MK_ADDR_CONST(0x8047)
#define G2SB_CTX2_G2PATBASE_0_SECURE                    0x0
#define G2SB_CTX2_G2PATBASE_0_WORD_COUNT                        0x1
#define G2SB_CTX2_G2PATBASE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATBASE_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATBASE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATBASE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATBASE_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2PATBASE_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
//pattern base address in tile mode,
// PATBA is the linear address where pixel start
#define G2SB_CTX2_G2PATBASE_0_PAT_BASE_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2PATBASE_0_PAT_BASE_FIELD                    (_MK_MASK_CONST(0xffffffff) << G2SB_CTX2_G2PATBASE_0_PAT_BASE_SHIFT)
#define G2SB_CTX2_G2PATBASE_0_PAT_BASE_RANGE                    31:0
#define G2SB_CTX2_G2PATBASE_0_PAT_BASE_WOFFSET                  0x0
#define G2SB_CTX2_G2PATBASE_0_PAT_BASE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATBASE_0_PAT_BASE_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATBASE_0_PAT_BASE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2PATBASE_0_PAT_BASE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// SB_SURFBASE registers
//    These registers need only be programmed when using SB.  They point to the base
//        of the various source and destination surfaces.  Technically they are only needed when
//        tiling is enabled, but there is no harm in always programming them.
//    Their counterpart registers (<reg>_SB_SURFBASE with SB_SURFBASE stripped off) indicate the
//        location of the first pixel  to be sourced or written within the surface.
//
//    This register exists to mimic the X, Y (SRCX, SRCY) functionality found in the BitBlt engine.
//
//    For example, to get at pixel X, Y:
//        SRCBA = SRCBA_SB_SURFBASE + Y*stride + X*Bpp

// Register G2SB_CTX2_G2SRCBA_SB_SURFBASE_0
#define G2SB_CTX2_G2SRCBA_SB_SURFBASE_0                 _MK_ADDR_CONST(0x8048)
#define G2SB_CTX2_G2SRCBA_SB_SURFBASE_0_SECURE                  0x0
#define G2SB_CTX2_G2SRCBA_SB_SURFBASE_0_WORD_COUNT                      0x1
#define G2SB_CTX2_G2SRCBA_SB_SURFBASE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCBA_SB_SURFBASE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCBA_SB_SURFBASE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCBA_SB_SURFBASE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCBA_SB_SURFBASE_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2SRCBA_SB_SURFBASE_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2SRCBA:
//    -base of interleaved sources (RGB, YUV)
//    -base of Y plane
// Only used by the StretchBlit Engine
#define G2SB_CTX2_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_FIELD                  (_MK_MASK_CONST(0xffffffff) << G2SB_CTX2_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SHIFT)
#define G2SB_CTX2_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_RANGE                  31:0
#define G2SB_CTX2_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_WOFFSET                        0x0
#define G2SB_CTX2_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2DSTBA_SB_SURFBASE_0
#define G2SB_CTX2_G2DSTBA_SB_SURFBASE_0                 _MK_ADDR_CONST(0x8049)
#define G2SB_CTX2_G2DSTBA_SB_SURFBASE_0_SECURE                  0x0
#define G2SB_CTX2_G2DSTBA_SB_SURFBASE_0_WORD_COUNT                      0x1
#define G2SB_CTX2_G2DSTBA_SB_SURFBASE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_SB_SURFBASE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_SB_SURFBASE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_SB_SURFBASE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_SB_SURFBASE_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2DSTBA_SB_SURFBASE_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2DSTBA
// Only used by the StretchBlit Engine
#define G2SB_CTX2_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2DSTBA_SB_SURFBASE_0_DST_ADDR_FIELD                  (_MK_MASK_CONST(0xffffffff) << G2SB_CTX2_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SHIFT)
#define G2SB_CTX2_G2DSTBA_SB_SURFBASE_0_DST_ADDR_RANGE                  31:0
#define G2SB_CTX2_G2DSTBA_SB_SURFBASE_0_DST_ADDR_WOFFSET                        0x0
#define G2SB_CTX2_G2DSTBA_SB_SURFBASE_0_DST_ADDR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_SB_SURFBASE_0_DST_ADDR_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2DSTBA_B_SB_SURFBASE_0
#define G2SB_CTX2_G2DSTBA_B_SB_SURFBASE_0                       _MK_ADDR_CONST(0x804a)
#define G2SB_CTX2_G2DSTBA_B_SB_SURFBASE_0_SECURE                        0x0
#define G2SB_CTX2_G2DSTBA_B_SB_SURFBASE_0_WORD_COUNT                    0x1
#define G2SB_CTX2_G2DSTBA_B_SB_SURFBASE_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_B_SB_SURFBASE_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_B_SB_SURFBASE_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_B_SB_SURFBASE_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_B_SB_SURFBASE_0_READ_MASK                     _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2DSTBA_B_SB_SURFBASE_0_WRITE_MASK                    _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2DSTBA_B
// Only used by the StretchBlit Engine, and G2CONTROLSB.DBSEL() is enabled
#define G2SB_CTX2_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_FIELD                      (_MK_MASK_CONST(0xffffffff) << G2SB_CTX2_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SHIFT)
#define G2SB_CTX2_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_RANGE                      31:0
#define G2SB_CTX2_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_WOFFSET                    0x0
#define G2SB_CTX2_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2VBA_A_SB_SURFBASE_0
#define G2SB_CTX2_G2VBA_A_SB_SURFBASE_0                 _MK_ADDR_CONST(0x804b)
#define G2SB_CTX2_G2VBA_A_SB_SURFBASE_0_SECURE                  0x0
#define G2SB_CTX2_G2VBA_A_SB_SURFBASE_0_WORD_COUNT                      0x1
#define G2SB_CTX2_G2VBA_A_SB_SURFBASE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VBA_A_SB_SURFBASE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VBA_A_SB_SURFBASE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VBA_A_SB_SURFBASE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VBA_A_SB_SURFBASE_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2VBA_A_SB_SURFBASE_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2VBA
//     used for YUV 4:2:0 planar, base of V plane
// Only used by the StretchBlit Engine
#define G2SB_CTX2_G2VBA_A_SB_SURFBASE_0_V_ADDR_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2VBA_A_SB_SURFBASE_0_V_ADDR_FIELD                    (_MK_MASK_CONST(0xffffffff) << G2SB_CTX2_G2VBA_A_SB_SURFBASE_0_V_ADDR_SHIFT)
#define G2SB_CTX2_G2VBA_A_SB_SURFBASE_0_V_ADDR_RANGE                    31:0
#define G2SB_CTX2_G2VBA_A_SB_SURFBASE_0_V_ADDR_WOFFSET                  0x0
#define G2SB_CTX2_G2VBA_A_SB_SURFBASE_0_V_ADDR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VBA_A_SB_SURFBASE_0_V_ADDR_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VBA_A_SB_SURFBASE_0_V_ADDR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2VBA_A_SB_SURFBASE_0_V_ADDR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_CTX2_G2UBA_A_SB_SURFBASE_0
#define G2SB_CTX2_G2UBA_A_SB_SURFBASE_0                 _MK_ADDR_CONST(0x804c)
#define G2SB_CTX2_G2UBA_A_SB_SURFBASE_0_SECURE                  0x0
#define G2SB_CTX2_G2UBA_A_SB_SURFBASE_0_WORD_COUNT                      0x1
#define G2SB_CTX2_G2UBA_A_SB_SURFBASE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2UBA_A_SB_SURFBASE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2UBA_A_SB_SURFBASE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2UBA_A_SB_SURFBASE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2UBA_A_SB_SURFBASE_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX2_G2UBA_A_SB_SURFBASE_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2VBA
//     used for YUV 4:2:0 planar, base of U plane
// Only used by the StretchBlit Engine
#define G2SB_CTX2_G2UBA_A_SB_SURFBASE_0_U_ADDR_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX2_G2UBA_A_SB_SURFBASE_0_U_ADDR_FIELD                    (_MK_MASK_CONST(0xffffffff) << G2SB_CTX2_G2UBA_A_SB_SURFBASE_0_U_ADDR_SHIFT)
#define G2SB_CTX2_G2UBA_A_SB_SURFBASE_0_U_ADDR_RANGE                    31:0
#define G2SB_CTX2_G2UBA_A_SB_SURFBASE_0_U_ADDR_WOFFSET                  0x0
#define G2SB_CTX2_G2UBA_A_SB_SURFBASE_0_U_ADDR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2UBA_A_SB_SURFBASE_0_U_ADDR_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2UBA_A_SB_SURFBASE_0_U_ADDR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX2_G2UBA_A_SB_SURFBASE_0_U_ADDR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//
// --------------------------------------------------------------------------
//
// Copyright (c) 2004, NVIDIA Corp.
// All Rights Reserved.
//
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
//
// --------------------------------------------------------------------------
// --------------------------------------------------------------------------
//
// Copyright (c) 2004-2005, NVIDIA Corp.
// All Rights Reserved.
//
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
//
// --------------------------------------------------------------------------
//
// Memory Controller Tiling definitions
//
//
//  To enable tiling for a buffer in your module you'll want to include
//  this spec file and then make use of either the ADD_TILE_MODE_REG_SPEC
//  or ADD_TILE_MODE_REG_FIELD_SPEC macro.
//
//  For the ADD_TILE_MODE_REG_SPEC macro, the regp arg is added to the
//  register name as a prefix to match the names of the other registers
//  for this buffer. The fldp is the field name prefix to make the name
//  unique so it works with arreggen generated reg blocks (e.g.):
//
//      // specify how addressing should occur for IB0 buffer
//      ADD_TILE_MODE_REG_SPEC(IB0, IB0);
//
//  There's also a REG_RW_SPEC version, if you need to specify a special
//  flag (e.g. rws for shadow, or rwt for trigger).
//
//  For the ADD_TILE_MODE_REG_FIELD_SPEC macro, the fldp is the field
//  name prefix and bitpos arg describes the starting bit position for
//  this field within another register.
//
//  Like the register version, there's a REG_RW_FIELD_SPEC version if
//  you need to set explicit bits other than "rw".
//
//  Note: this requires having at least NV_MC_TILE_MODEWIDTH bits of
//  space available after bitpos (e.g.) in the register:
//
//      ADD_TILE_MODE_REG_FIELD_SPEC(REF, 16)   // This parameter specifies how addressing
//                                              // for the REF buffer should occur
//
// --------------------------------------------------------------------------
//
// Copyright (c) 2004, NVIDIA Corp.
// All Rights Reserved.
//
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
//
// --------------------------------------------------------------------------
//

// Register G2SB_CTX3_INCR_SYNCPT_0
#define G2SB_CTX3_INCR_SYNCPT_0                 _MK_ADDR_CONST(0x1000)
#define G2SB_CTX3_INCR_SYNCPT_0_SECURE                  0x0
#define G2SB_CTX3_INCR_SYNCPT_0_WORD_COUNT                      0x1
#define G2SB_CTX3_INCR_SYNCPT_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_INCR_SYNCPT_0_RESET_MASK                      _MK_MASK_CONST(0xffff)
#define G2SB_CTX3_INCR_SYNCPT_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_INCR_SYNCPT_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_INCR_SYNCPT_0_READ_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX3_INCR_SYNCPT_0_WRITE_MASK                      _MK_MASK_CONST(0xffff)
// Condition mapped from raise/wait
#define G2SB_CTX3_INCR_SYNCPT_0_COND_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_CTX3_INCR_SYNCPT_0_COND_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX3_INCR_SYNCPT_0_COND_SHIFT)
#define G2SB_CTX3_INCR_SYNCPT_0_COND_RANGE                      15:8
#define G2SB_CTX3_INCR_SYNCPT_0_COND_WOFFSET                    0x0
#define G2SB_CTX3_INCR_SYNCPT_0_COND_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_INCR_SYNCPT_0_COND_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define G2SB_CTX3_INCR_SYNCPT_0_COND_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_INCR_SYNCPT_0_COND_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_INCR_SYNCPT_0_COND_IMMEDIATE                  _MK_ENUM_CONST(0)
#define G2SB_CTX3_INCR_SYNCPT_0_COND_OP_DONE                    _MK_ENUM_CONST(1)
#define G2SB_CTX3_INCR_SYNCPT_0_COND_RD_DONE                    _MK_ENUM_CONST(2)
#define G2SB_CTX3_INCR_SYNCPT_0_COND_REG_WR_SAFE                        _MK_ENUM_CONST(3)
#define G2SB_CTX3_INCR_SYNCPT_0_COND_COND_4                     _MK_ENUM_CONST(4)
#define G2SB_CTX3_INCR_SYNCPT_0_COND_COND_5                     _MK_ENUM_CONST(5)
#define G2SB_CTX3_INCR_SYNCPT_0_COND_COND_6                     _MK_ENUM_CONST(6)
#define G2SB_CTX3_INCR_SYNCPT_0_COND_COND_7                     _MK_ENUM_CONST(7)
#define G2SB_CTX3_INCR_SYNCPT_0_COND_COND_8                     _MK_ENUM_CONST(8)
#define G2SB_CTX3_INCR_SYNCPT_0_COND_COND_9                     _MK_ENUM_CONST(9)
#define G2SB_CTX3_INCR_SYNCPT_0_COND_COND_10                    _MK_ENUM_CONST(10)
#define G2SB_CTX3_INCR_SYNCPT_0_COND_COND_11                    _MK_ENUM_CONST(11)
#define G2SB_CTX3_INCR_SYNCPT_0_COND_COND_12                    _MK_ENUM_CONST(12)
#define G2SB_CTX3_INCR_SYNCPT_0_COND_COND_13                    _MK_ENUM_CONST(13)
#define G2SB_CTX3_INCR_SYNCPT_0_COND_COND_14                    _MK_ENUM_CONST(14)
#define G2SB_CTX3_INCR_SYNCPT_0_COND_COND_15                    _MK_ENUM_CONST(15)

// syncpt index value
#define G2SB_CTX3_INCR_SYNCPT_0_INDX_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX3_INCR_SYNCPT_0_INDX_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX3_INCR_SYNCPT_0_INDX_SHIFT)
#define G2SB_CTX3_INCR_SYNCPT_0_INDX_RANGE                      7:0
#define G2SB_CTX3_INCR_SYNCPT_0_INDX_WOFFSET                    0x0
#define G2SB_CTX3_INCR_SYNCPT_0_INDX_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_INCR_SYNCPT_0_INDX_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define G2SB_CTX3_INCR_SYNCPT_0_INDX_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_INCR_SYNCPT_0_INDX_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_INCR_SYNCPT_CNTRL_0
#define G2SB_CTX3_INCR_SYNCPT_CNTRL_0                   _MK_ADDR_CONST(0x1001)
#define G2SB_CTX3_INCR_SYNCPT_CNTRL_0_SECURE                    0x0
#define G2SB_CTX3_INCR_SYNCPT_CNTRL_0_WORD_COUNT                        0x1
#define G2SB_CTX3_INCR_SYNCPT_CNTRL_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_INCR_SYNCPT_CNTRL_0_RESET_MASK                        _MK_MASK_CONST(0x101)
#define G2SB_CTX3_INCR_SYNCPT_CNTRL_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_INCR_SYNCPT_CNTRL_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_INCR_SYNCPT_CNTRL_0_READ_MASK                         _MK_MASK_CONST(0x101)
#define G2SB_CTX3_INCR_SYNCPT_CNTRL_0_WRITE_MASK                        _MK_MASK_CONST(0x101)
// If NO_STALL is 1, then when fifos are full,
// INCR_SYNCPT methods will be dropped and the
// INCR_SYNCPT_ERROR[COND] bit will be set.
// If NO_STALL is 0, then when fifos are full,
// the client host interface will be stalled.
#define G2SB_CTX3_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SHIFT                        _MK_SHIFT_CONST(8)
#define G2SB_CTX3_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX3_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SHIFT)
#define G2SB_CTX3_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_RANGE                        8:8
#define G2SB_CTX3_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_WOFFSET                      0x0
#define G2SB_CTX3_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX3_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// If SOFT_RESET is set, then all internal state
// of the client syncpt block will be reset.
// To do soft reset, first set SOFT_RESET of
// all host1x clients affected, then clear all
// SOFT_RESETs.
#define G2SB_CTX3_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX3_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX3_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SHIFT)
#define G2SB_CTX3_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_RANGE                      0:0
#define G2SB_CTX3_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_WOFFSET                    0x0
#define G2SB_CTX3_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_CTX3_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_INCR_SYNCPT_ERROR_0
#define G2SB_CTX3_INCR_SYNCPT_ERROR_0                   _MK_ADDR_CONST(0x1002)
#define G2SB_CTX3_INCR_SYNCPT_ERROR_0_SECURE                    0x0
#define G2SB_CTX3_INCR_SYNCPT_ERROR_0_WORD_COUNT                        0x1
#define G2SB_CTX3_INCR_SYNCPT_ERROR_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_INCR_SYNCPT_ERROR_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_INCR_SYNCPT_ERROR_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_INCR_SYNCPT_ERROR_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_INCR_SYNCPT_ERROR_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_INCR_SYNCPT_ERROR_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// COND_STATUS[COND] is set if the fifo for COND overflows.
// This bit is sticky and will remain set until cleared.
// Cleared by writing 1.
#define G2SB_CTX3_INCR_SYNCPT_ERROR_0_COND_STATUS_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX3_INCR_SYNCPT_ERROR_0_COND_STATUS_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX3_INCR_SYNCPT_ERROR_0_COND_STATUS_SHIFT)
#define G2SB_CTX3_INCR_SYNCPT_ERROR_0_COND_STATUS_RANGE                 31:0
#define G2SB_CTX3_INCR_SYNCPT_ERROR_0_COND_STATUS_WOFFSET                       0x0
#define G2SB_CTX3_INCR_SYNCPT_ERROR_0_COND_STATUS_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_INCR_SYNCPT_ERROR_0_COND_STATUS_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_INCR_SYNCPT_ERROR_0_COND_STATUS_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_INCR_SYNCPT_ERROR_0_COND_STATUS_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// reserve locations for future expansion

// Reserved address 4099 [0x1003]

// Reserved address 4100 [0x1004]

// Reserved address 4101 [0x1005]

// Reserved address 4102 [0x1006]

// Reserved address 4103 [0x1007]
// just in case names were redefined using macros
// 2D syncpt behavior
//     - Each 2D context has its own syncpt client.
//     - OP_DONE increments when 2D's memory write client is idle, meaning all
//           preceding operations are complete.
//     - RD_DONE behaves like OP_DONE
//     - REG_WR_SAFE behaves like IMMEDIATE meaning a syncpt increment returns
//         immediately and does not indicate that a register write will NOT block.
//         The implications are that 2D's host FIFO can fill and block access to 2D,
//         which will indeterminately block a direct CPU access.

// Register G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0  //{index=8}
// This register can be accessed by both register read/write and command fifo
// in order not to break exsting code , keep suffix REGONLY.
//
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0                      _MK_ADDR_CONST(0x1008)
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_SECURE                       0x0
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_WORD_COUNT                   0x1
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_READ_MASK                    _MK_MASK_CONST(0x1f03ff)
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_WRITE_MASK                   _MK_MASK_CONST(0x1f0000)
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_FIELD                     (_MK_MASK_CONST(0x3ff) << G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SHIFT)
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_RANGE                     9:0
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_WOFFSET                   0x0
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_FIELD                   (_MK_MASK_CONST(0xf) << G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SHIFT)
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_RANGE                   19:16
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_WOFFSET                 0x0
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SHIFT                      _MK_SHIFT_CONST(20)
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SHIFT)
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_RANGE                      20:20
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_WOFFSET                    0x0
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Control methods, since they are not programmed often, put them is the beginning

// Register G2SB_CTX3_G2TRIGGER_0  //{host,2d,sb,index=9}
#define G2SB_CTX3_G2TRIGGER_0                   _MK_ADDR_CONST(0x1009)
#define G2SB_CTX3_G2TRIGGER_0_SECURE                    0x0
#define G2SB_CTX3_G2TRIGGER_0_WORD_COUNT                        0x1
#define G2SB_CTX3_G2TRIGGER_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TRIGGER_0_RESET_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX3_G2TRIGGER_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TRIGGER_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TRIGGER_0_READ_MASK                         _MK_MASK_CONST(0xffff)
#define G2SB_CTX3_G2TRIGGER_0_WRITE_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX3_G2TRIGGER_0_TRIGGER_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2TRIGGER_0_TRIGGER_FIELD                     (_MK_MASK_CONST(0xffff) << G2SB_CTX3_G2TRIGGER_0_TRIGGER_SHIFT)
#define G2SB_CTX3_G2TRIGGER_0_TRIGGER_RANGE                     15:0
#define G2SB_CTX3_G2TRIGGER_0_TRIGGER_WOFFSET                   0x0
#define G2SB_CTX3_G2TRIGGER_0_TRIGGER_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TRIGGER_0_TRIGGER_DEFAULT_MASK                      _MK_MASK_CONST(0xffff)
#define G2SB_CTX3_G2TRIGGER_0_TRIGGER_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TRIGGER_0_TRIGGER_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2TRIGGER1_0  //{host,2d,sb,index=a}
#define G2SB_CTX3_G2TRIGGER1_0                  _MK_ADDR_CONST(0x100a)
#define G2SB_CTX3_G2TRIGGER1_0_SECURE                   0x0
#define G2SB_CTX3_G2TRIGGER1_0_WORD_COUNT                       0x1
#define G2SB_CTX3_G2TRIGGER1_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TRIGGER1_0_RESET_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX3_G2TRIGGER1_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TRIGGER1_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TRIGGER1_0_READ_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX3_G2TRIGGER1_0_WRITE_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX3_G2TRIGGER1_0_TRIGGER1_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2TRIGGER1_0_TRIGGER1_FIELD                   (_MK_MASK_CONST(0xffff) << G2SB_CTX3_G2TRIGGER1_0_TRIGGER1_SHIFT)
#define G2SB_CTX3_G2TRIGGER1_0_TRIGGER1_RANGE                   15:0
#define G2SB_CTX3_G2TRIGGER1_0_TRIGGER1_WOFFSET                 0x0
#define G2SB_CTX3_G2TRIGGER1_0_TRIGGER1_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TRIGGER1_0_TRIGGER1_DEFAULT_MASK                    _MK_MASK_CONST(0xffff)
#define G2SB_CTX3_G2TRIGGER1_0_TRIGGER1_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TRIGGER1_0_TRIGGER1_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2TRIGGER2_0  //{2d,index=b}
#define G2SB_CTX3_G2TRIGGER2_0                  _MK_ADDR_CONST(0x100b)
#define G2SB_CTX3_G2TRIGGER2_0_SECURE                   0x0
#define G2SB_CTX3_G2TRIGGER2_0_WORD_COUNT                       0x1
#define G2SB_CTX3_G2TRIGGER2_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TRIGGER2_0_RESET_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX3_G2TRIGGER2_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TRIGGER2_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TRIGGER2_0_READ_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX3_G2TRIGGER2_0_WRITE_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX3_G2TRIGGER2_0_TRIGGER2_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2TRIGGER2_0_TRIGGER2_FIELD                   (_MK_MASK_CONST(0xffff) << G2SB_CTX3_G2TRIGGER2_0_TRIGGER2_SHIFT)
#define G2SB_CTX3_G2TRIGGER2_0_TRIGGER2_RANGE                   15:0
#define G2SB_CTX3_G2TRIGGER2_0_TRIGGER2_WOFFSET                 0x0
#define G2SB_CTX3_G2TRIGGER2_0_TRIGGER2_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TRIGGER2_0_TRIGGER2_DEFAULT_MASK                    _MK_MASK_CONST(0xffff)
#define G2SB_CTX3_G2TRIGGER2_0_TRIGGER2_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TRIGGER2_0_TRIGGER2_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2CMDSEL_0  //{host,2d,sb,index=c}
#define G2SB_CTX3_G2CMDSEL_0                    _MK_ADDR_CONST(0x100c)
#define G2SB_CTX3_G2CMDSEL_0_SECURE                     0x0
#define G2SB_CTX3_G2CMDSEL_0_WORD_COUNT                         0x1
#define G2SB_CTX3_G2CMDSEL_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_RESET_MASK                         _MK_MASK_CONST(0x1100d7f1)
#define G2SB_CTX3_G2CMDSEL_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_READ_MASK                  _MK_MASK_CONST(0x1fffd7f1)
#define G2SB_CTX3_G2CMDSEL_0_WRITE_MASK                         _MK_MASK_CONST(0x1fffd7f0)
#define G2SB_CTX3_G2CMDSEL_0_SBOR2D_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2CMDSEL_0_SBOR2D_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CMDSEL_0_SBOR2D_SHIFT)
#define G2SB_CTX3_G2CMDSEL_0_SBOR2D_RANGE                       0:0
#define G2SB_CTX3_G2CMDSEL_0_SBOR2D_WOFFSET                     0x0
#define G2SB_CTX3_G2CMDSEL_0_SBOR2D_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_SBOR2D_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CMDSEL_0_SBOR2D_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_SBOR2D_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_SBOR2D_G2                  _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CMDSEL_0_SBOR2D_SB                  _MK_ENUM_CONST(1)

//circular buffer feature enable    0= disable
#define G2SB_CTX3_G2CMDSEL_0_CBENABLE_SHIFT                     _MK_SHIFT_CONST(4)
#define G2SB_CTX3_G2CMDSEL_0_CBENABLE_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CMDSEL_0_CBENABLE_SHIFT)
#define G2SB_CTX3_G2CMDSEL_0_CBENABLE_RANGE                     4:4
#define G2SB_CTX3_G2CMDSEL_0_CBENABLE_WOFFSET                   0x0
#define G2SB_CTX3_G2CMDSEL_0_CBENABLE_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_CBENABLE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CMDSEL_0_CBENABLE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_CBENABLE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_CBENABLE_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CMDSEL_0_CBENABLE_ENABLE                    _MK_ENUM_CONST(1)

//VI trigger enable, can be circular buffer or full frame
#define G2SB_CTX3_G2CMDSEL_0_VITRIGGER_SHIFT                    _MK_SHIFT_CONST(5)
#define G2SB_CTX3_G2CMDSEL_0_VITRIGGER_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CMDSEL_0_VITRIGGER_SHIFT)
#define G2SB_CTX3_G2CMDSEL_0_VITRIGGER_RANGE                    5:5
#define G2SB_CTX3_G2CMDSEL_0_VITRIGGER_WOFFSET                  0x0
#define G2SB_CTX3_G2CMDSEL_0_VITRIGGER_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_VITRIGGER_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CMDSEL_0_VITRIGGER_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_VITRIGGER_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//host trigger the command, host also need program cicular buffer related data
#define G2SB_CTX3_G2CMDSEL_0_HOSTTRIGGER_SHIFT                  _MK_SHIFT_CONST(6)
#define G2SB_CTX3_G2CMDSEL_0_HOSTTRIGGER_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CMDSEL_0_HOSTTRIGGER_SHIFT)
#define G2SB_CTX3_G2CMDSEL_0_HOSTTRIGGER_RANGE                  6:6
#define G2SB_CTX3_G2CMDSEL_0_HOSTTRIGGER_WOFFSET                        0x0
#define G2SB_CTX3_G2CMDSEL_0_HOSTTRIGGER_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_HOSTTRIGGER_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CMDSEL_0_HOSTTRIGGER_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_HOSTTRIGGER_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX3_G2CMDSEL_0_CBSBDISABLE_SHIFT                  _MK_SHIFT_CONST(7)
#define G2SB_CTX3_G2CMDSEL_0_CBSBDISABLE_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CMDSEL_0_CBSBDISABLE_SHIFT)
#define G2SB_CTX3_G2CMDSEL_0_CBSBDISABLE_RANGE                  7:7
#define G2SB_CTX3_G2CMDSEL_0_CBSBDISABLE_WOFFSET                        0x0
#define G2SB_CTX3_G2CMDSEL_0_CBSBDISABLE_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_CBSBDISABLE_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CMDSEL_0_CBSBDISABLE_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_CBSBDISABLE_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// 00: to memory
// 01: to EPP
#define G2SB_CTX3_G2CMDSEL_0_G2OUTPUT_SHIFT                     _MK_SHIFT_CONST(8)
#define G2SB_CTX3_G2CMDSEL_0_G2OUTPUT_FIELD                     (_MK_MASK_CONST(0x3) << G2SB_CTX3_G2CMDSEL_0_G2OUTPUT_SHIFT)
#define G2SB_CTX3_G2CMDSEL_0_G2OUTPUT_RANGE                     9:8
#define G2SB_CTX3_G2CMDSEL_0_G2OUTPUT_WOFFSET                   0x0
#define G2SB_CTX3_G2CMDSEL_0_G2OUTPUT_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_G2OUTPUT_DEFAULT_MASK                      _MK_MASK_CONST(0x3)
#define G2SB_CTX3_G2CMDSEL_0_G2OUTPUT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_G2OUTPUT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_G2OUTPUT_MEMORY                    _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CMDSEL_0_G2OUTPUT_EPP                       _MK_ENUM_CONST(1)
#define G2SB_CTX3_G2CMDSEL_0_G2OUTPUT_RESERVED2                 _MK_ENUM_CONST(2)
#define G2SB_CTX3_G2CMDSEL_0_G2OUTPUT_RESERVED3                 _MK_ENUM_CONST(3)

// Reserved for HW Test, SW should not use this bit.
#define G2SB_CTX3_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SHIFT                       _MK_SHIFT_CONST(10)
#define G2SB_CTX3_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SHIFT)
#define G2SB_CTX3_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_RANGE                       10:10
#define G2SB_CTX3_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_WOFFSET                     0x0
#define G2SB_CTX3_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_ENABLE                      _MK_ENUM_CONST(1)

#define G2SB_CTX3_G2CMDSEL_0_LINK_WAIT_BUF_END_SHIFT                    _MK_SHIFT_CONST(12)
#define G2SB_CTX3_G2CMDSEL_0_LINK_WAIT_BUF_END_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CMDSEL_0_LINK_WAIT_BUF_END_SHIFT)
#define G2SB_CTX3_G2CMDSEL_0_LINK_WAIT_BUF_END_RANGE                    12:12
#define G2SB_CTX3_G2CMDSEL_0_LINK_WAIT_BUF_END_WOFFSET                  0x0
#define G2SB_CTX3_G2CMDSEL_0_LINK_WAIT_BUF_END_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_LINK_WAIT_BUF_END_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CMDSEL_0_LINK_WAIT_BUF_END_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_LINK_WAIT_BUF_END_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//host writes this bit to tell which buffer is ready
#define G2SB_CTX3_G2CMDSEL_0_FRAME_START_SHIFT                  _MK_SHIFT_CONST(14)
#define G2SB_CTX3_G2CMDSEL_0_FRAME_START_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CMDSEL_0_FRAME_START_SHIFT)
#define G2SB_CTX3_G2CMDSEL_0_FRAME_START_RANGE                  14:14
#define G2SB_CTX3_G2CMDSEL_0_FRAME_START_WOFFSET                        0x0
#define G2SB_CTX3_G2CMDSEL_0_FRAME_START_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_FRAME_START_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CMDSEL_0_FRAME_START_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_FRAME_START_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX3_G2CMDSEL_0_FRAME_END_SHIFT                    _MK_SHIFT_CONST(15)
#define G2SB_CTX3_G2CMDSEL_0_FRAME_END_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CMDSEL_0_FRAME_END_SHIFT)
#define G2SB_CTX3_G2CMDSEL_0_FRAME_END_RANGE                    15:15
#define G2SB_CTX3_G2CMDSEL_0_FRAME_END_WOFFSET                  0x0
#define G2SB_CTX3_G2CMDSEL_0_FRAME_END_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_FRAME_END_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CMDSEL_0_FRAME_END_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_FRAME_END_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

#define G2SB_CTX3_G2CMDSEL_0_BUFFER_INDEX_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_CTX3_G2CMDSEL_0_BUFFER_INDEX_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX3_G2CMDSEL_0_BUFFER_INDEX_SHIFT)
#define G2SB_CTX3_G2CMDSEL_0_BUFFER_INDEX_RANGE                 23:16
#define G2SB_CTX3_G2CMDSEL_0_BUFFER_INDEX_WOFFSET                       0x0
#define G2SB_CTX3_G2CMDSEL_0_BUFFER_INDEX_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_BUFFER_INDEX_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_BUFFER_INDEX_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_BUFFER_INDEX_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//Test purpose
#define G2SB_CTX3_G2CMDSEL_0_LINKEN_SHIFT                       _MK_SHIFT_CONST(24)
#define G2SB_CTX3_G2CMDSEL_0_LINKEN_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CMDSEL_0_LINKEN_SHIFT)
#define G2SB_CTX3_G2CMDSEL_0_LINKEN_RANGE                       24:24
#define G2SB_CTX3_G2CMDSEL_0_LINKEN_WOFFSET                     0x0
#define G2SB_CTX3_G2CMDSEL_0_LINKEN_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_LINKEN_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CMDSEL_0_LINKEN_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_LINKEN_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

#define G2SB_CTX3_G2CMDSEL_0_LINKVAL_SHIFT                      _MK_SHIFT_CONST(25)
#define G2SB_CTX3_G2CMDSEL_0_LINKVAL_FIELD                      (_MK_MASK_CONST(0x7) << G2SB_CTX3_G2CMDSEL_0_LINKVAL_SHIFT)
#define G2SB_CTX3_G2CMDSEL_0_LINKVAL_RANGE                      27:25
#define G2SB_CTX3_G2CMDSEL_0_LINKVAL_WOFFSET                    0x0
#define G2SB_CTX3_G2CMDSEL_0_LINKVAL_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_LINKVAL_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_LINKVAL_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_LINKVAL_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// indicates priority of the context, note vi-triggered contexts take priority over HIGH
#define G2SB_CTX3_G2CMDSEL_0_PRIORITY_SHIFT                     _MK_SHIFT_CONST(28)
#define G2SB_CTX3_G2CMDSEL_0_PRIORITY_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CMDSEL_0_PRIORITY_SHIFT)
#define G2SB_CTX3_G2CMDSEL_0_PRIORITY_RANGE                     28:28
#define G2SB_CTX3_G2CMDSEL_0_PRIORITY_WOFFSET                   0x0
#define G2SB_CTX3_G2CMDSEL_0_PRIORITY_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_PRIORITY_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CMDSEL_0_PRIORITY_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_PRIORITY_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMDSEL_0_PRIORITY_LOW                       _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CMDSEL_0_PRIORITY_HIGH                      _MK_ENUM_CONST(1)


// Register G2SB_CTX3_G2RAISE_0  //{host,2d,sb,index=d}
#define G2SB_CTX3_G2RAISE_0                     _MK_ADDR_CONST(0x100d)
#define G2SB_CTX3_G2RAISE_0_SECURE                      0x0
#define G2SB_CTX3_G2RAISE_0_WORD_COUNT                  0x1
#define G2SB_CTX3_G2RAISE_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2RAISE_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2RAISE_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2RAISE_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2RAISE_0_READ_MASK                   _MK_MASK_CONST(0xf001f)
#define G2SB_CTX3_G2RAISE_0_WRITE_MASK                  _MK_MASK_CONST(0xf001f)
//Push back to read fifo when all commands in the channel are done.
#define G2SB_CTX3_G2RAISE_0_RAISE_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2RAISE_0_RAISE_FIELD                 (_MK_MASK_CONST(0x1f) << G2SB_CTX3_G2RAISE_0_RAISE_SHIFT)
#define G2SB_CTX3_G2RAISE_0_RAISE_RANGE                 4:0
#define G2SB_CTX3_G2RAISE_0_RAISE_WOFFSET                       0x0
#define G2SB_CTX3_G2RAISE_0_RAISE_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2RAISE_0_RAISE_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2RAISE_0_RAISE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2RAISE_0_RAISE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

#define G2SB_CTX3_G2RAISE_0_RAISECHANNEL_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX3_G2RAISE_0_RAISECHANNEL_FIELD                  (_MK_MASK_CONST(0xf) << G2SB_CTX3_G2RAISE_0_RAISECHANNEL_SHIFT)
#define G2SB_CTX3_G2RAISE_0_RAISECHANNEL_RANGE                  19:16
#define G2SB_CTX3_G2RAISE_0_RAISECHANNEL_WOFFSET                        0x0
#define G2SB_CTX3_G2RAISE_0_RAISECHANNEL_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2RAISE_0_RAISECHANNEL_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2RAISE_0_RAISECHANNEL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2RAISE_0_RAISECHANNEL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Reserved address 4110 [0x100e]
//reg G2REFCOUNT incr1  //{host,2d,sb,index=e}
//#if (NV_HOST1X_HAS_FEATURE_REFCOUNT32B == 1)
//     31:0   rw REFCOUNT
//#else
//     15:0   rw REFCOUNT
//#endif
//    ;

// Register G2SB_CTX3_G2HOSTSET_0  //{host,2d,index=f}
#define G2SB_CTX3_G2HOSTSET_0                   _MK_ADDR_CONST(0x100f)
#define G2SB_CTX3_G2HOSTSET_0_SECURE                    0x0
#define G2SB_CTX3_G2HOSTSET_0_WORD_COUNT                        0x1
#define G2SB_CTX3_G2HOSTSET_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2HOSTSET_0_RESET_MASK                        _MK_MASK_CONST(0xff)
#define G2SB_CTX3_G2HOSTSET_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2HOSTSET_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2HOSTSET_0_READ_MASK                         _MK_MASK_CONST(0xff)
#define G2SB_CTX3_G2HOSTSET_0_WRITE_MASK                        _MK_MASK_CONST(0xff)
//  specifies distance (in byte) from last pixel of a line to the first
//  pixel of next line.
//  In mono mode, the value is the nearest byte number.
//  E.G. if gap is 3 bits, HSTLNGAP should be 1 (byte),
// if gap is 9 bits, HSTLNGAP should be 2 (byte)
#define G2SB_CTX3_G2HOSTSET_0_HSTLNGAP_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2HOSTSET_0_HSTLNGAP_FIELD                    (_MK_MASK_CONST(0xf) << G2SB_CTX3_G2HOSTSET_0_HSTLNGAP_SHIFT)
#define G2SB_CTX3_G2HOSTSET_0_HSTLNGAP_RANGE                    3:0
#define G2SB_CTX3_G2HOSTSET_0_HSTLNGAP_WOFFSET                  0x0
#define G2SB_CTX3_G2HOSTSET_0_HSTLNGAP_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2HOSTSET_0_HSTLNGAP_DEFAULT_MASK                     _MK_MASK_CONST(0xf)
#define G2SB_CTX3_G2HOSTSET_0_HSTLNGAP_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2HOSTSET_0_HSTLNGAP_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// specifies the
//  first pixel location (in byte) in the first source data entry.
// In mono mode pixel should always start in byte boundary
#define G2SB_CTX3_G2HOSTSET_0_HSTFPXL_SHIFT                     _MK_SHIFT_CONST(4)
#define G2SB_CTX3_G2HOSTSET_0_HSTFPXL_FIELD                     (_MK_MASK_CONST(0xf) << G2SB_CTX3_G2HOSTSET_0_HSTFPXL_SHIFT)
#define G2SB_CTX3_G2HOSTSET_0_HSTFPXL_RANGE                     7:4
#define G2SB_CTX3_G2HOSTSET_0_HSTFPXL_WOFFSET                   0x0
#define G2SB_CTX3_G2HOSTSET_0_HSTFPXL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2HOSTSET_0_HSTFPXL_DEFAULT_MASK                      _MK_MASK_CONST(0xf)
#define G2SB_CTX3_G2HOSTSET_0_HSTFPXL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2HOSTSET_0_HSTFPXL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2HOSTFIFO_0  //{host,2d,sb,index=10}
#define G2SB_CTX3_G2HOSTFIFO_0                  _MK_ADDR_CONST(0x1010)
#define G2SB_CTX3_G2HOSTFIFO_0_SECURE                   0x0
#define G2SB_CTX3_G2HOSTFIFO_0_WORD_COUNT                       0x1
#define G2SB_CTX3_G2HOSTFIFO_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2HOSTFIFO_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2HOSTFIFO_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2HOSTFIFO_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2HOSTFIFO_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2HOSTFIFO_0_WRITE_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2HOSTFIFO_0_HOSTFIFODATA_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2HOSTFIFO_0_HOSTFIFODATA_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX3_G2HOSTFIFO_0_HOSTFIFODATA_SHIFT)
#define G2SB_CTX3_G2HOSTFIFO_0_HOSTFIFODATA_RANGE                       31:0
#define G2SB_CTX3_G2HOSTFIFO_0_HOSTFIFODATA_WOFFSET                     0x0
#define G2SB_CTX3_G2HOSTFIFO_0_HOSTFIFODATA_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2HOSTFIFO_0_HOSTFIFODATA_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2HOSTFIFO_0_HOSTFIFODATA_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2HOSTFIFO_0_HOSTFIFODATA_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2VDDA_0  //{sb,sbm,index=11}
#define G2SB_CTX3_G2VDDA_0                      _MK_ADDR_CONST(0x1011)
#define G2SB_CTX3_G2VDDA_0_SECURE                       0x0
#define G2SB_CTX3_G2VDDA_0_WORD_COUNT                   0x1
#define G2SB_CTX3_G2VDDA_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VDDA_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VDDA_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VDDA_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VDDA_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2VDDA_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
//Vertical Scaling DDA
//Reset value: xxxx-xxxxh
//Vertical DDA Step (Increment) Value (VDSTEP[18:0])
// (upper 13 bits should be set to '0')
//This parameter specifies the increment value of the DDA used
//for vertical scaling and it is in the form of 6-bit integer and
//12-bit fraction.  This value is detemined by the equation:
// (Actual_source_height-1-VDTINI) / (Actual_destination_height-1)
// Truncate the rest bits to keep the 12bits fraction. Since we have to meet
// (Actual_source_height-1)*1.0 >= (Actual_destination_height - 1)*VDSTEP + VDTINI
// Refer to bug 353260 for more detail.
//The 6-bit integer allows maximum contraction ratio of 1/64, and
// 12-bit fraction assures the maximum limit of accumulated error less
// than half line-spacing for up to approximately 2000 target lines.
//For example, image expansion from 240 lines to 400 lines
//  VDSTEP[17:0]  =  19'b00_0000_1001_1001_1010   and
//image contraction from 240 lines to 150 lines
//   VDSTEP[17:0]  =  19'b00_0001_1001_1001_1010.
#define G2SB_CTX3_G2VDDA_0_VDSTEP_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2VDDA_0_VDSTEP_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX3_G2VDDA_0_VDSTEP_SHIFT)
#define G2SB_CTX3_G2VDDA_0_VDSTEP_RANGE                 31:0
#define G2SB_CTX3_G2VDDA_0_VDSTEP_WOFFSET                       0x0
#define G2SB_CTX3_G2VDDA_0_VDSTEP_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VDDA_0_VDSTEP_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VDDA_0_VDSTEP_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VDDA_0_VDSTEP_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2VDDAINI_0  //{sb,sbm,index=12}
#define G2SB_CTX3_G2VDDAINI_0                   _MK_ADDR_CONST(0x1012)
#define G2SB_CTX3_G2VDDAINI_0_SECURE                    0x0
#define G2SB_CTX3_G2VDDAINI_0_WORD_COUNT                        0x1
#define G2SB_CTX3_G2VDDAINI_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VDDAINI_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VDDAINI_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VDDAINI_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VDDAINI_0_READ_MASK                         _MK_MASK_CONST(0xffff)
#define G2SB_CTX3_G2VDDAINI_0_WRITE_MASK                        _MK_MASK_CONST(0xffff)
//Vertical Scaling DDA Initial Values
//Vertical DDA Initial Value for Top-Field (VDTINI[7:0])
//This parameter specifies the fraction part of initial
// value of the DDA used for vertical scaling.
//Given a pair of consecutive source image lines representing
// positions 0.0 and 1.0, a destination line-image will be created
// at any position in [0.0, 1.0), that is specified by the fraction
// part of the vertical DDA. The 8-bit initial fraction value
// specifies the position of the first output (destination) line-image
// located between the first and the second input (source) line-images,
// respectively at position 0.0 and 1.0.
//This parameter provides a way to compensate relative displacement of
// top and bottom fields of a source image. Suppose, 2-to-1 interlaced
// original video field images #1 and #2 are in the image buffer, to be
// displayed in an overlay window. Assume that the #1 field image is the
// top-field. Using VDTINI = 8'hC0 for the top-field image and
// VDBINI = 8'h40 for the bottom-field image, for example, the two images
// from #1 and #2 fields get mapped to identically positioned destination
// images in the overlay window.
#define G2SB_CTX3_G2VDDAINI_0_VDTINI_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2VDDAINI_0_VDTINI_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX3_G2VDDAINI_0_VDTINI_SHIFT)
#define G2SB_CTX3_G2VDDAINI_0_VDTINI_RANGE                      7:0
#define G2SB_CTX3_G2VDDAINI_0_VDTINI_WOFFSET                    0x0
#define G2SB_CTX3_G2VDDAINI_0_VDTINI_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VDDAINI_0_VDTINI_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VDDAINI_0_VDTINI_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VDDAINI_0_VDTINI_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

//Vertical DDA Initial Value for Bottom-Field (VDBINI[7:0])
// (see description above)
#define G2SB_CTX3_G2VDDAINI_0_VDBINI_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_CTX3_G2VDDAINI_0_VDBINI_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX3_G2VDDAINI_0_VDBINI_SHIFT)
#define G2SB_CTX3_G2VDDAINI_0_VDBINI_RANGE                      15:8
#define G2SB_CTX3_G2VDDAINI_0_VDBINI_WOFFSET                    0x0
#define G2SB_CTX3_G2VDDAINI_0_VDBINI_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VDDAINI_0_VDBINI_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VDDAINI_0_VDBINI_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VDDAINI_0_VDBINI_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2HDDA_0  //{sb,sbm,index=13}
#define G2SB_CTX3_G2HDDA_0                      _MK_ADDR_CONST(0x1013)
#define G2SB_CTX3_G2HDDA_0_SECURE                       0x0
#define G2SB_CTX3_G2HDDA_0_WORD_COUNT                   0x1
#define G2SB_CTX3_G2HDDA_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2HDDA_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2HDDA_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2HDDA_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2HDDA_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2HDDA_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
//Horizontal Scaling DDA
//Reset value: xxxx-xxxxh
//Horizontal DDA Step (Increment) Value (HDSTEP[18:0])
// (upper 13 bits should be set to '0')
//This parameter specifies the increment value of the DDA used
//for horizontal scaling and it is in the form of 6-bit integer and
//12-bit fraction.  This value is detemined by the equation:
// (Actual_source_width-1-HDINI) / (Actual_destination_width-1)
// Truncate the rest bits to keep the 12bits fraction.
// Refer to bug 353260 for more detail.
//The 6-bit integer allows maximum contraction ratio of 1/64, and
// 12-bit fraction assures the maximum limit of accumulated error less
// than half pixel-spacing for up to approximately 2000 destination pixels.
//For example, image expansion from 720 pixels to 800 pixels
//       HDSTEP[17:0]  =  19'b000_0000_1110_0110_0111   and
//image contraction from 720 pixels to 250 pixels
// HDSTEP[17:0]  =  19'b000_0010_1110_0001_0101.
#define G2SB_CTX3_G2HDDA_0_HDSTEP_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2HDDA_0_HDSTEP_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX3_G2HDDA_0_HDSTEP_SHIFT)
#define G2SB_CTX3_G2HDDA_0_HDSTEP_RANGE                 31:0
#define G2SB_CTX3_G2HDDA_0_HDSTEP_WOFFSET                       0x0
#define G2SB_CTX3_G2HDDA_0_HDSTEP_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2HDDA_0_HDSTEP_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2HDDA_0_HDSTEP_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2HDDA_0_HDSTEP_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2HDDAINILS_0  //{sb,sbm,index=14}
#define G2SB_CTX3_G2HDDAINILS_0                 _MK_ADDR_CONST(0x1014)
#define G2SB_CTX3_G2HDDAINILS_0_SECURE                  0x0
#define G2SB_CTX3_G2HDDAINILS_0_WORD_COUNT                      0x1
#define G2SB_CTX3_G2HDDAINILS_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2HDDAINILS_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2HDDAINILS_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2HDDAINILS_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2HDDAINILS_0_READ_MASK                       _MK_MASK_CONST(0xff)
#define G2SB_CTX3_G2HDDAINILS_0_WRITE_MASK                      _MK_MASK_CONST(0xff)
//Horizontal Scaling DDA Initial Value
//Horizontal DDA Initial Value (HDINI[7:0])
//This parameter specifies the fraction part of initial value
// of the DDA used for horizontal scaling.
//Given a group of six consecutive source pixels that
// the two pixels at the center representing positions 0.0
//and 1.0, a destination pixel will be created at any
// position in [0.0, 1.0), that is specified by the fraction part
//of the horizontal DDA. The 8-bit initial fraction
// value specifies the position of the first output (destination)
//pixel located between the first and the second input (source)
// pixels, respectively at position 0.0 and 1.0.
//For horizontal scaling this value may normally be set to 0.
#define G2SB_CTX3_G2HDDAINILS_0_HDINI_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2HDDAINILS_0_HDINI_FIELD                     (_MK_MASK_CONST(0xff) << G2SB_CTX3_G2HDDAINILS_0_HDINI_SHIFT)
#define G2SB_CTX3_G2HDDAINILS_0_HDINI_RANGE                     7:0
#define G2SB_CTX3_G2HDDAINILS_0_HDINI_WOFFSET                   0x0
#define G2SB_CTX3_G2HDDAINILS_0_HDINI_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2HDDAINILS_0_HDINI_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2HDDAINILS_0_HDINI_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2HDDAINILS_0_HDINI_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2CSCFIRST_0  //{sb,sbm,index=15}
// The next 3 registers contain 8 parameters used by the YCbCr (YUV)
// to RGB color space conversion logic.  This logic can also be
// used for RGB gain/gamma correction in RGB to RGB modes, and for
// luma gain in YUV to YUV modes.  For SC20 two new parameters
// (G2U, G2V) have been added for RGB to YUV conversion.  These are
// in address 0x38.  The equtions have the form:
//    YUV->RGB
// R = (CYX * (yin + YOS)) + ((CUR * uin) + (CVR * vin))
// G = (CYX * (yin + YOS)) + ((CUG * uin) + (CVG * vin))
// B = (CYX * (yin + YOS)) + ((CUB * uin) + (CVB * vin))
//    RGB -> RGB
// R = (CVR * rin) + (CUR * bin)
// G = (CYX * (gin + YOS)) + ((CUG * bin) + (CVG * rin))
// B = (CUB * bin) + (CVB * rin)
//    YUV -> YUV (not what rtl does: see note below)
// Y = (CYX * yin + YOS) + ((CUB * uin) + (CVB * vin))
// U = (CUG * uin) + (CVG * vin)
// V = (CVR * vin) + (CUR * uin)
//    RGB -> YUV (new for SC20)
// Y = (CVB * rin) + (CUB * bin) + (CYX * gin) + YOS
// U = (CVG * rin) + (CUG * bin) + (G2U * gin)
// V = (CVR * rin) + (CUR * bin) + (G2V * gin)
//
// NOTE: YUV->YUV above is definitely wrong
// the cmodel *appears* to match the RTL with the following pseudo-code:
//
//if (yuv2rgb)
//    (r,g,b) = matrix*(y+sbreg_yos,u,v)
//    matrix:
//        sbreg_cyx, sbreg_cur, sbreg_cvr,
//        sbreg_cyx, sbreg_cug, sbreg_cvg,
//        sbreg_cyx, sbreg_cub, sbreg_cvb,
//else if (rgb2rgb)
//    (r,g,b) = matrix*(r,g+sbreg_yos,b)
//    matrix:
//        sbreg_cvr, 0,         sbreg_cur,
//        sbreg_cvg, sbreg_cyx, sbreg_cug,
//        sbreg_cvb, 0,         sbreg_cub,
//else if (yuv2yuv)
//    (y,u,v) = matrix*(y,u,v)
//    matrix:
//        sbreg_cub, 0,         sbreg_cvb,
//        sbreg_cug, sbreg_cyx, sbreg_cvg,
//        sbreg_cur, 0,         sbreg_cvr,
//else if (rgb2yuv)
//    (y,u,v) = matrix*(r,g,b) +(sbreg_yos,0,0)
//    matrix:
//        sbreg_cvb, sbreg_cyx, sbreg_cub,
//        sbreg_cvg, sbreg_g2u, sbreg_cug,
//        sbreg_cvr, sbreg_g2v, sbreg_cur,
#define G2SB_CTX3_G2CSCFIRST_0                  _MK_ADDR_CONST(0x1015)
#define G2SB_CTX3_G2CSCFIRST_0_SECURE                   0x0
#define G2SB_CTX3_G2CSCFIRST_0_WORD_COUNT                       0x1
#define G2SB_CTX3_G2CSCFIRST_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCFIRST_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCFIRST_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCFIRST_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCFIRST_0_READ_MASK                        _MK_MASK_CONST(0xff3ff3ff)
#define G2SB_CTX3_G2CSCFIRST_0_WRITE_MASK                       _MK_MASK_CONST(0xff3ff3ff)
// multiplier for U/B for Y or B generation.
// consists of a sign bit and 9-bit magnitude (s2.7).
// For YUV->RGB, the recommended value is 2.0172 (decimal) or 0x102.
// If source data is in RGB format, this parameter
// may be used as gain adjustment for B component.
// For SC20, this register changes precision when doing RGB to YUV
// conversion (SIFMT=1xxx, DIFMT=0xxx).  CUB becomes s1.8 and the
// recommended value is +0.098 or 0x019
//11-10  Reserved
#define G2SB_CTX3_G2CSCFIRST_0_CUB_SHIFT                        _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2CSCFIRST_0_CUB_FIELD                        (_MK_MASK_CONST(0x3ff) << G2SB_CTX3_G2CSCFIRST_0_CUB_SHIFT)
#define G2SB_CTX3_G2CSCFIRST_0_CUB_RANGE                        9:0
#define G2SB_CTX3_G2CSCFIRST_0_CUB_WOFFSET                      0x0
#define G2SB_CTX3_G2CSCFIRST_0_CUB_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCFIRST_0_CUB_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCFIRST_0_CUB_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCFIRST_0_CUB_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// multiplier for V/R for V or R generation.
//This parameter consists of a sign bit and 9-bit magnitude (s2.7)
// For YUV->RGB the recommended value is 1.5960 (decimal) or 0x0CC
//If source data is in RGB format, this parameter
// may be used as gain adjustment for R component.
// For RGB->YUV the recommended value is +0.439 (decimal) or 0x038
//23-22  Reserved
#define G2SB_CTX3_G2CSCFIRST_0_CVR_SHIFT                        _MK_SHIFT_CONST(12)
#define G2SB_CTX3_G2CSCFIRST_0_CVR_FIELD                        (_MK_MASK_CONST(0x3ff) << G2SB_CTX3_G2CSCFIRST_0_CVR_SHIFT)
#define G2SB_CTX3_G2CSCFIRST_0_CVR_RANGE                        21:12
#define G2SB_CTX3_G2CSCFIRST_0_CVR_WOFFSET                      0x0
#define G2SB_CTX3_G2CSCFIRST_0_CVR_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCFIRST_0_CVR_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCFIRST_0_CVR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCFIRST_0_CVR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

//Y-Offset (YOFFSET[7:0]) for YUV generation
//This parameter consists of 8-bit 2's complement in the range [-128,127].
// For YUV->RGB the recommended value is -16 (decimal) or 0xF0
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is +16 (decimal) or 0x10
#define G2SB_CTX3_G2CSCFIRST_0_YOS_SHIFT                        _MK_SHIFT_CONST(24)
#define G2SB_CTX3_G2CSCFIRST_0_YOS_FIELD                        (_MK_MASK_CONST(0xff) << G2SB_CTX3_G2CSCFIRST_0_YOS_SHIFT)
#define G2SB_CTX3_G2CSCFIRST_0_YOS_RANGE                        31:24
#define G2SB_CTX3_G2CSCFIRST_0_YOS_WOFFSET                      0x0
#define G2SB_CTX3_G2CSCFIRST_0_YOS_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCFIRST_0_YOS_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCFIRST_0_YOS_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCFIRST_0_YOS_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2CSCSECOND_0  //{sb,sbm,index=16}
#define G2SB_CTX3_G2CSCSECOND_0                 _MK_ADDR_CONST(0x1016)
#define G2SB_CTX3_G2CSCSECOND_0_SECURE                  0x0
#define G2SB_CTX3_G2CSCSECOND_0_WORD_COUNT                      0x1
#define G2SB_CTX3_G2CSCSECOND_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCSECOND_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCSECOND_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCSECOND_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCSECOND_0_READ_MASK                       _MK_MASK_CONST(0xff3ff1ff)
#define G2SB_CTX3_G2CSCSECOND_0_WRITE_MASK                      _MK_MASK_CONST(0xff3ff1ff)
// multiplier for U/B for U or G generation.
// consists of a sign bit and 8-bit magnitude (s1.7)
// For YUV->RGB the recommended value is -0.3918 (decimal) or 0x132
// For  RGB->RGB, this parameter should be set to 0
// For  YUV->YUV, this parameter should be set to 1 (0x080)
// For RGB->YUV the recommended value is +0.439 (decimal) or 0x038
//11-9  Reserved
#define G2SB_CTX3_G2CSCSECOND_0_CUG_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2CSCSECOND_0_CUG_FIELD                       (_MK_MASK_CONST(0x1ff) << G2SB_CTX3_G2CSCSECOND_0_CUG_SHIFT)
#define G2SB_CTX3_G2CSCSECOND_0_CUG_RANGE                       8:0
#define G2SB_CTX3_G2CSCSECOND_0_CUG_WOFFSET                     0x0
#define G2SB_CTX3_G2CSCSECOND_0_CUG_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCSECOND_0_CUG_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCSECOND_0_CUG_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCSECOND_0_CUG_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// multiplier for U/B for V or R generation.
//This parameter consists of a sign bit and 9-bit magnitude (s2.7)
//  For YUV->RGB normally this parameter is programmed to 0.0.
// This parameter takes non-zero value if hue is rotated.
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is -0.071 (decimal) or 0x209
//23-22 Reserved
#define G2SB_CTX3_G2CSCSECOND_0_CUR_SHIFT                       _MK_SHIFT_CONST(12)
#define G2SB_CTX3_G2CSCSECOND_0_CUR_FIELD                       (_MK_MASK_CONST(0x3ff) << G2SB_CTX3_G2CSCSECOND_0_CUR_SHIFT)
#define G2SB_CTX3_G2CSCSECOND_0_CUR_RANGE                       21:12
#define G2SB_CTX3_G2CSCSECOND_0_CUR_WOFFSET                     0x0
#define G2SB_CTX3_G2CSCSECOND_0_CUR_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCSECOND_0_CUR_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCSECOND_0_CUR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCSECOND_0_CUR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// multiplier for Y/G (G gain)
//This positive-only parameter consists of 8-bit magnitude (1.7)
// For YUV->YUV the recommended value is 1.1644 (decimal) or 0x95
// For YUV->YUV or RGB->RGB this may be used as gain adjustment
// for Y or G component.
// For RGB->YUV the recommended value is +0.504 (decimal) or 0x041
#define G2SB_CTX3_G2CSCSECOND_0_CYX_SHIFT                       _MK_SHIFT_CONST(24)
#define G2SB_CTX3_G2CSCSECOND_0_CYX_FIELD                       (_MK_MASK_CONST(0xff) << G2SB_CTX3_G2CSCSECOND_0_CYX_SHIFT)
#define G2SB_CTX3_G2CSCSECOND_0_CYX_RANGE                       31:24
#define G2SB_CTX3_G2CSCSECOND_0_CYX_WOFFSET                     0x0
#define G2SB_CTX3_G2CSCSECOND_0_CYX_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCSECOND_0_CYX_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCSECOND_0_CYX_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCSECOND_0_CYX_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2CSCTHIRD_0  //{sb,sbm,index=17}
#define G2SB_CTX3_G2CSCTHIRD_0                  _MK_ADDR_CONST(0x1017)
#define G2SB_CTX3_G2CSCTHIRD_0_SECURE                   0x0
#define G2SB_CTX3_G2CSCTHIRD_0_WORD_COUNT                       0x1
#define G2SB_CTX3_G2CSCTHIRD_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCTHIRD_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCTHIRD_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCTHIRD_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCTHIRD_0_READ_MASK                        _MK_MASK_CONST(0x3ff01ff)
#define G2SB_CTX3_G2CSCTHIRD_0_WRITE_MASK                       _MK_MASK_CONST(0x3ff01ff)
// multiplier for V/R for U or G generation.
//This parameter consists of a sign bit and 8-bit magnitude (s1.7)
// For YUV->RGB the recommended value is -0.8130 (decimal) or 0x168
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is -0.148 (decimal) or 0x113
#define G2SB_CTX3_G2CSCTHIRD_0_CVG_SHIFT                        _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2CSCTHIRD_0_CVG_FIELD                        (_MK_MASK_CONST(0x1ff) << G2SB_CTX3_G2CSCTHIRD_0_CVG_SHIFT)
#define G2SB_CTX3_G2CSCTHIRD_0_CVG_RANGE                        8:0
#define G2SB_CTX3_G2CSCTHIRD_0_CVG_WOFFSET                      0x0
#define G2SB_CTX3_G2CSCTHIRD_0_CVG_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCTHIRD_0_CVG_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCTHIRD_0_CVG_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCTHIRD_0_CVG_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// multiplier for V/R for Y or B generation.
//This parameter consists of a sign bit and 9-bit magnitude (s2.7)
//For YUV->RGB, normally this parameter is programmed to 0.0.
// This coefficient takes non-zero value if hue is rotated.
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is +0.257 (decimal) or 0x021
#define G2SB_CTX3_G2CSCTHIRD_0_CVB_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_CTX3_G2CSCTHIRD_0_CVB_FIELD                        (_MK_MASK_CONST(0x3ff) << G2SB_CTX3_G2CSCTHIRD_0_CVB_SHIFT)
#define G2SB_CTX3_G2CSCTHIRD_0_CVB_RANGE                        25:16
#define G2SB_CTX3_G2CSCTHIRD_0_CVB_WOFFSET                      0x0
#define G2SB_CTX3_G2CSCTHIRD_0_CVB_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCTHIRD_0_CVB_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCTHIRD_0_CVB_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCTHIRD_0_CVB_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// StretchBLT, Color/Chroma Key Lower Limit Register

// Register G2SB_CTX3_G2CMKEYL_0  //{sb,sbm,index=18}
// When key generation is enabled, the value of this register is the
// lower color/chroma limit and G2CMKEYU is the upper color/chroma
// limit for component pixel data.
// Three component signal values (YCrCb/YUV or RGB) of
// every output pixel are compared to a set of three
// ranges that are specified by three pairs of lower and
// upper color/chroma key values.  If the Key Polarity is
// 0, the Key is set to 1 only when all three component values
// of an input pixel are respectively within the set
// of ranges (inclusive of the limit values), else the Key is set to 0.
// If the Key Polarity is 1, the Key is set to 1
// when any of the three component values of an input pixel
// are outside the set of ranges, else the Key is set to 0.
#define G2SB_CTX3_G2CMKEYL_0                    _MK_ADDR_CONST(0x1018)
#define G2SB_CTX3_G2CMKEYL_0_SECURE                     0x0
#define G2SB_CTX3_G2CMKEYL_0_WORD_COUNT                         0x1
#define G2SB_CTX3_G2CMKEYL_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMKEYL_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMKEYL_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMKEYL_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMKEYL_0_READ_MASK                  _MK_MASK_CONST(0xffffff)
#define G2SB_CTX3_G2CMKEYL_0_WRITE_MASK                         _MK_MASK_CONST(0xffffff)
// B or Y Color/Chroma Key Lower Limit (CKBL[7:0])
#define G2SB_CTX3_G2CMKEYL_0_CKBL_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2CMKEYL_0_CKBL_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX3_G2CMKEYL_0_CKBL_SHIFT)
#define G2SB_CTX3_G2CMKEYL_0_CKBL_RANGE                 7:0
#define G2SB_CTX3_G2CMKEYL_0_CKBL_WOFFSET                       0x0
#define G2SB_CTX3_G2CMKEYL_0_CKBL_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMKEYL_0_CKBL_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMKEYL_0_CKBL_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMKEYL_0_CKBL_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//G or Cb Color Chroma Key Lower Limit (CKGL[7:0])
// Cb signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity
// from the minimum signal level to the maximum signal level.
#define G2SB_CTX3_G2CMKEYL_0_CKGL_SHIFT                 _MK_SHIFT_CONST(8)
#define G2SB_CTX3_G2CMKEYL_0_CKGL_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX3_G2CMKEYL_0_CKGL_SHIFT)
#define G2SB_CTX3_G2CMKEYL_0_CKGL_RANGE                 15:8
#define G2SB_CTX3_G2CMKEYL_0_CKGL_WOFFSET                       0x0
#define G2SB_CTX3_G2CMKEYL_0_CKGL_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMKEYL_0_CKGL_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMKEYL_0_CKGL_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMKEYL_0_CKGL_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//R or Cr Color Chroma Key Lower Limit (CKRL[7:0])
// Cr signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity from
// the minimum signal level to the maximum signal level.
//31-24 Reserved
#define G2SB_CTX3_G2CMKEYL_0_CKRL_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_CTX3_G2CMKEYL_0_CKRL_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX3_G2CMKEYL_0_CKRL_SHIFT)
#define G2SB_CTX3_G2CMKEYL_0_CKRL_RANGE                 23:16
#define G2SB_CTX3_G2CMKEYL_0_CKRL_WOFFSET                       0x0
#define G2SB_CTX3_G2CMKEYL_0_CKRL_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMKEYL_0_CKRL_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMKEYL_0_CKRL_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMKEYL_0_CKRL_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//StretchBLT, Color/Chroma Key Upper Limit Register

// Register G2SB_CTX3_G2CMKEYU_0  //{sb,sbm,index=19}
#define G2SB_CTX3_G2CMKEYU_0                    _MK_ADDR_CONST(0x1019)
#define G2SB_CTX3_G2CMKEYU_0_SECURE                     0x0
#define G2SB_CTX3_G2CMKEYU_0_WORD_COUNT                         0x1
#define G2SB_CTX3_G2CMKEYU_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMKEYU_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMKEYU_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMKEYU_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMKEYU_0_READ_MASK                  _MK_MASK_CONST(0xffffff)
#define G2SB_CTX3_G2CMKEYU_0_WRITE_MASK                         _MK_MASK_CONST(0xffffff)
//This is B or Y color/chroma key upper limit value.
#define G2SB_CTX3_G2CMKEYU_0_CKBU_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2CMKEYU_0_CKBU_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX3_G2CMKEYU_0_CKBU_SHIFT)
#define G2SB_CTX3_G2CMKEYU_0_CKBU_RANGE                 7:0
#define G2SB_CTX3_G2CMKEYU_0_CKBU_WOFFSET                       0x0
#define G2SB_CTX3_G2CMKEYU_0_CKBU_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMKEYU_0_CKBU_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMKEYU_0_CKBU_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMKEYU_0_CKBU_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// G or Cb Color/Chroma Key Upper Limit (CKGU[7:0])
// Cb signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity
// the minimum signal level to the maximum signal level.
#define G2SB_CTX3_G2CMKEYU_0_CKGU_SHIFT                 _MK_SHIFT_CONST(8)
#define G2SB_CTX3_G2CMKEYU_0_CKGU_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX3_G2CMKEYU_0_CKGU_SHIFT)
#define G2SB_CTX3_G2CMKEYU_0_CKGU_RANGE                 15:8
#define G2SB_CTX3_G2CMKEYU_0_CKGU_WOFFSET                       0x0
#define G2SB_CTX3_G2CMKEYU_0_CKGU_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMKEYU_0_CKGU_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMKEYU_0_CKGU_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMKEYU_0_CKGU_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// R or Cr Color Chroma Key Upper Limit (CKRU[7:0])
// Cr signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity from
// the minimum signal level to the maximum signal level.
//31-24  Reserved
#define G2SB_CTX3_G2CMKEYU_0_CKRU_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_CTX3_G2CMKEYU_0_CKRU_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX3_G2CMKEYU_0_CKRU_SHIFT)
#define G2SB_CTX3_G2CMKEYU_0_CKRU_RANGE                 23:16
#define G2SB_CTX3_G2CMKEYU_0_CKRU_WOFFSET                       0x0
#define G2SB_CTX3_G2CMKEYU_0_CKRU_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMKEYU_0_CKRU_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMKEYU_0_CKRU_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CMKEYU_0_CKRU_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// StretchBLT, Source Image Data U base address A-buffer

// Register G2SB_CTX3_G2UBA_A_0  //{sb,sbm,index=1a}
#define G2SB_CTX3_G2UBA_A_0                     _MK_ADDR_CONST(0x101a)
#define G2SB_CTX3_G2UBA_A_0_SECURE                      0x0
#define G2SB_CTX3_G2UBA_A_0_WORD_COUNT                  0x1
#define G2SB_CTX3_G2UBA_A_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2UBA_A_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2UBA_A_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2UBA_A_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2UBA_A_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2UBA_A_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Start Address of  Source U-image Area, 4:2:0 Format.
// This parameter specifies the start address of source image stored in
// the image buffer memory.
// The [3:0] bits have to be 0, since memory client will assemble YUV into one
// 422 format.
#define G2SB_CTX3_G2UBA_A_0_SU1SA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2UBA_A_0_SU1SA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX3_G2UBA_A_0_SU1SA_SHIFT)
#define G2SB_CTX3_G2UBA_A_0_SU1SA_RANGE                 31:0
#define G2SB_CTX3_G2UBA_A_0_SU1SA_WOFFSET                       0x0
#define G2SB_CTX3_G2UBA_A_0_SU1SA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2UBA_A_0_SU1SA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2UBA_A_0_SU1SA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2UBA_A_0_SU1SA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2VBA_A_0  //{sb,sbm,index=1b}
#define G2SB_CTX3_G2VBA_A_0                     _MK_ADDR_CONST(0x101b)
#define G2SB_CTX3_G2VBA_A_0_SECURE                      0x0
#define G2SB_CTX3_G2VBA_A_0_WORD_COUNT                  0x1
#define G2SB_CTX3_G2VBA_A_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VBA_A_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VBA_A_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VBA_A_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VBA_A_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2VBA_A_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Start Address of  Source V-image Area, 4:2:0 Format.
// This parameter specifies the start address of  source image stored in
// the image buffer memory.
// The [3:0] bits have to be 0, since memory client will assemble YUV into one
// 422 format.
#define G2SB_CTX3_G2VBA_A_0_SV1SA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2VBA_A_0_SV1SA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX3_G2VBA_A_0_SV1SA_SHIFT)
#define G2SB_CTX3_G2VBA_A_0_SV1SA_RANGE                 31:0
#define G2SB_CTX3_G2VBA_A_0_SV1SA_WOFFSET                       0x0
#define G2SB_CTX3_G2VBA_A_0_SV1SA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VBA_A_0_SV1SA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VBA_A_0_SV1SA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VBA_A_0_SV1SA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2SBFORMAT_0  //{sb,sbm,index=1c}
#define G2SB_CTX3_G2SBFORMAT_0                  _MK_ADDR_CONST(0x101c)
#define G2SB_CTX3_G2SBFORMAT_0_SECURE                   0x0
#define G2SB_CTX3_G2SBFORMAT_0_WORD_COUNT                       0x1
#define G2SB_CTX3_G2SBFORMAT_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SBFORMAT_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SBFORMAT_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SBFORMAT_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SBFORMAT_0_READ_MASK                        _MK_MASK_CONST(0xffffdf1f)
#define G2SB_CTX3_G2SBFORMAT_0_WRITE_MASK                       _MK_MASK_CONST(0xffffdf1f)
// This parameter defines the data format of source input.
// There are two groups of data formats, RGB format and YCbCr (YUV) format.
// CbCr (UV) components may be represented in either offset binary or 2's complement.
//00000 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00001 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00010 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00011 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00100 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00101 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00110 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00111 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//01000 B5G6R5 5-6-5 {R[4:0], G[5:0], B[4:0]}
//01001 RESERVED
//01010 RESERVED
//01011 RESERVED
//01100 B5G6R5 5-6-5 Byte-swapped {G[2:0], B[4:0], R[4:0], G[5:3]}
//01101 RESERVED
//01110 R8G8B8A8
//01111 B8G8R8A8
//1xxxx RESERVED
//
// StretchBlit Inputs
// ==================
// RGB    inputs = {B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8}
// YUV420 input  = {YUV420 is converted into 4:2:2 UYVY via memory client}
// YUV422 inputs = {U8Y8V8Y8_OB, Y8U8Y8V8_OB, V8Y8U8Y8_OB, U8Y8V8Y8_OB, U8Y8V8Y8_TC, Y8U8Y8V8_TC, Y8V8Y8U8_TC, V8Y8U8Y8_TC}
//
// StretchBlit Outputs
// ===================
// RGB    outputs = {B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8}
// YUV422 outputs = {U8Y8V8Y8_OB, Y8U8Y8V8_OB, V8Y8U8Y8_OB, U8Y8V8Y8_OB, U8Y8V8Y8_TC, Y8U8Y8V8_TC, Y8V8Y8U8_TC, V8Y8U8Y8_TC}
//
// StretchBlit Input/Output Rules
// ==============================
//
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|    src format                                                | internal sb format |      dst format                                           |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|  B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8                        |      R8G8B8A8      |  B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8                     |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|  U8Y8V8Y8_*, Y8U8Y8V8_*, V8Y8U8Y8_*, U8Y8V8Y8_*, YUV420      |      YUV 4:4:4     |  U8Y8V8Y8_*, Y8U8Y8V8_*, V8Y8U8Y8_*, U8Y8V8Y8_*           |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|  U8Y8V8Y8_*, Y8U8Y8V8_*, V8Y8U8Y8_*, U8Y8V8Y8_*, YUV420      |      YUV 4:4:4     |  B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8                     |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//
//  StretchBlit color space converter supports YUV->RGB, YUV->YUV (gain) and RGB->RGB (gain).  There is no support for RGB->YUV.
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_FIELD                      (_MK_MASK_CONST(0x1f) << G2SB_CTX3_G2SBFORMAT_0_SIFMT_SHIFT)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_RANGE                      4:0
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_WOFFSET                    0x0
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_U8Y8V8Y8_OB                        _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_Y8U8Y8V8_OB                        _MK_ENUM_CONST(1)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_Y8V8Y8U8_OB                        _MK_ENUM_CONST(2)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_V8Y8U8Y8_OB                        _MK_ENUM_CONST(3)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_U8Y8V8Y8_TC                        _MK_ENUM_CONST(4)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_Y8U8Y8V8_TC                        _MK_ENUM_CONST(5)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_Y8V8Y8U8_TC                        _MK_ENUM_CONST(6)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_V8Y8U8Y8_TC                        _MK_ENUM_CONST(7)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_B5G6R5                     _MK_ENUM_CONST(8)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_RESERVED9                  _MK_ENUM_CONST(9)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_RESERVED10                 _MK_ENUM_CONST(10)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_RESERVED11                 _MK_ENUM_CONST(11)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_B5G6R5BS                   _MK_ENUM_CONST(12)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_RESERVED13                 _MK_ENUM_CONST(13)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_R8G8B8A8                   _MK_ENUM_CONST(14)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_B8G8R8A8                   _MK_ENUM_CONST(15)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_RESERVED16                 _MK_ENUM_CONST(16)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_RESERVED17                 _MK_ENUM_CONST(17)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_RESERVED18                 _MK_ENUM_CONST(18)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_RESERVED19                 _MK_ENUM_CONST(19)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_RESERVED20                 _MK_ENUM_CONST(20)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_RESERVED21                 _MK_ENUM_CONST(21)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_RESERVED22                 _MK_ENUM_CONST(22)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_RESERVED23                 _MK_ENUM_CONST(23)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_RESERVED24                 _MK_ENUM_CONST(24)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_RESERVED25                 _MK_ENUM_CONST(25)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_RESERVED26                 _MK_ENUM_CONST(26)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_RESERVED27                 _MK_ENUM_CONST(27)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_RESERVED28                 _MK_ENUM_CONST(28)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_RESERVED29                 _MK_ENUM_CONST(29)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_RESERVED30                 _MK_ENUM_CONST(30)
#define G2SB_CTX3_G2SBFORMAT_0_SIFMT_RESERVED31                 _MK_ENUM_CONST(31)

//Destination Image Data FormatThis parameter defines the data format of distination output.
// There are two groups of data formats, RGB and YCbCr (YUV) format.
// CbCr (UV) components may be represented in either offset binary or 2's complement.
//00000 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00001 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00010 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00011 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00100 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00101 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00110 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00111 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//01000 bpp16 5-6-5 {R[4:0], G[5:0], B[4:0]}
//01001 RESERVED
//01010 RESERVED
//01011 RESERVED
//01100 bpp16 5-6-5 Byte-swapped {G[2:0], B[4:0], R[4:0], G[5:3]}
//01101 RESERVED
//01110 R8G8B8A8
//01111 B8G8R8A8
//1xxxx RESERVED
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_FIELD                      (_MK_MASK_CONST(0x1f) << G2SB_CTX3_G2SBFORMAT_0_DIFMT_SHIFT)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_RANGE                      12:8
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_WOFFSET                    0x0
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_U8Y8V8Y8_OB                        _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_Y8U8Y8V8_OB                        _MK_ENUM_CONST(1)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_Y8V8Y8U8_OB                        _MK_ENUM_CONST(2)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_V8Y8U8Y8_OB                        _MK_ENUM_CONST(3)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_U8Y8V8Y8_TC                        _MK_ENUM_CONST(4)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_Y8U8Y8V8_TC                        _MK_ENUM_CONST(5)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_Y8V8Y8U8_TC                        _MK_ENUM_CONST(6)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_V8Y8U8Y8_TC                        _MK_ENUM_CONST(7)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_B5G6R5                     _MK_ENUM_CONST(8)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_RESERVED9                  _MK_ENUM_CONST(9)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_RESERVED10                 _MK_ENUM_CONST(10)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_RESERVED11                 _MK_ENUM_CONST(11)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_B5G6R5BS                   _MK_ENUM_CONST(12)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_RESERVED13                 _MK_ENUM_CONST(13)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_R8G8B8A8                   _MK_ENUM_CONST(14)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_B8G8R8A8                   _MK_ENUM_CONST(15)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_RESERVED16                 _MK_ENUM_CONST(16)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_RESERVED17                 _MK_ENUM_CONST(17)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_RESERVED18                 _MK_ENUM_CONST(18)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_RESERVED19                 _MK_ENUM_CONST(19)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_RESERVED20                 _MK_ENUM_CONST(20)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_RESERVED21                 _MK_ENUM_CONST(21)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_RESERVED22                 _MK_ENUM_CONST(22)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_RESERVED23                 _MK_ENUM_CONST(23)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_RESERVED24                 _MK_ENUM_CONST(24)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_RESERVED25                 _MK_ENUM_CONST(25)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_RESERVED26                 _MK_ENUM_CONST(26)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_RESERVED27                 _MK_ENUM_CONST(27)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_RESERVED28                 _MK_ENUM_CONST(28)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_RESERVED29                 _MK_ENUM_CONST(29)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_RESERVED30                 _MK_ENUM_CONST(30)
#define G2SB_CTX3_G2SBFORMAT_0_DIFMT_RESERVED31                 _MK_ENUM_CONST(31)

// ENABLE - SB needs to send a RAISE_BUFFER control bit to EPP
// DISABLE - do nothing.
#define G2SB_CTX3_G2SBFORMAT_0_RAISEBUFFEREN_SHIFT                      _MK_SHIFT_CONST(14)
#define G2SB_CTX3_G2SBFORMAT_0_RAISEBUFFEREN_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2SBFORMAT_0_RAISEBUFFEREN_SHIFT)
#define G2SB_CTX3_G2SBFORMAT_0_RAISEBUFFEREN_RANGE                      14:14
#define G2SB_CTX3_G2SBFORMAT_0_RAISEBUFFEREN_WOFFSET                    0x0
#define G2SB_CTX3_G2SBFORMAT_0_RAISEBUFFEREN_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SBFORMAT_0_RAISEBUFFEREN_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SBFORMAT_0_RAISEBUFFEREN_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SBFORMAT_0_RAISEBUFFEREN_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SBFORMAT_0_RAISEBUFFEREN_DISABLE                    _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2SBFORMAT_0_RAISEBUFFEREN_ENABLE                     _MK_ENUM_CONST(1)

// ENABLE - SB needs to send a RAISE_FRAME control bit to EPP
// DISABLE - do nothing.
#define G2SB_CTX3_G2SBFORMAT_0_RAISEFRAMEEN_SHIFT                       _MK_SHIFT_CONST(15)
#define G2SB_CTX3_G2SBFORMAT_0_RAISEFRAMEEN_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2SBFORMAT_0_RAISEFRAMEEN_SHIFT)
#define G2SB_CTX3_G2SBFORMAT_0_RAISEFRAMEEN_RANGE                       15:15
#define G2SB_CTX3_G2SBFORMAT_0_RAISEFRAMEEN_WOFFSET                     0x0
#define G2SB_CTX3_G2SBFORMAT_0_RAISEFRAMEEN_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SBFORMAT_0_RAISEFRAMEEN_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SBFORMAT_0_RAISEFRAMEEN_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SBFORMAT_0_RAISEFRAMEEN_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SBFORMAT_0_RAISEFRAMEEN_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2SBFORMAT_0_RAISEFRAMEEN_ENABLE                      _MK_ENUM_CONST(1)

// Raise buffer vector value.
#define G2SB_CTX3_G2SBFORMAT_0_RAISEBUFFERVALUE_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX3_G2SBFORMAT_0_RAISEBUFFERVALUE_FIELD                   (_MK_MASK_CONST(0xff) << G2SB_CTX3_G2SBFORMAT_0_RAISEBUFFERVALUE_SHIFT)
#define G2SB_CTX3_G2SBFORMAT_0_RAISEBUFFERVALUE_RANGE                   23:16
#define G2SB_CTX3_G2SBFORMAT_0_RAISEBUFFERVALUE_WOFFSET                 0x0
#define G2SB_CTX3_G2SBFORMAT_0_RAISEBUFFERVALUE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SBFORMAT_0_RAISEBUFFERVALUE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SBFORMAT_0_RAISEBUFFERVALUE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SBFORMAT_0_RAISEBUFFERVALUE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Raise Fram vector value.
#define G2SB_CTX3_G2SBFORMAT_0_RAISEFRAMEVALUE_SHIFT                    _MK_SHIFT_CONST(24)
#define G2SB_CTX3_G2SBFORMAT_0_RAISEFRAMEVALUE_FIELD                    (_MK_MASK_CONST(0xff) << G2SB_CTX3_G2SBFORMAT_0_RAISEFRAMEVALUE_SHIFT)
#define G2SB_CTX3_G2SBFORMAT_0_RAISEFRAMEVALUE_RANGE                    31:24
#define G2SB_CTX3_G2SBFORMAT_0_RAISEFRAMEVALUE_WOFFSET                  0x0
#define G2SB_CTX3_G2SBFORMAT_0_RAISEFRAMEVALUE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SBFORMAT_0_RAISEFRAMEVALUE_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SBFORMAT_0_RAISEFRAMEVALUE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SBFORMAT_0_RAISEFRAMEVALUE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2CONTROLSB_0  //{sb,sbm,index=1d}
#define G2SB_CTX3_G2CONTROLSB_0                 _MK_ADDR_CONST(0x101d)
#define G2SB_CTX3_G2CONTROLSB_0_SECURE                  0x0
#define G2SB_CTX3_G2CONTROLSB_0_WORD_COUNT                      0x1
#define G2SB_CTX3_G2CONTROLSB_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_RESET_MASK                      _MK_MASK_CONST(0xdfffa4f8)
#define G2SB_CTX3_G2CONTROLSB_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_READ_MASK                       _MK_MASK_CONST(0xdfffa7f8)
#define G2SB_CTX3_G2CONTROLSB_0_WRITE_MASK                      _MK_MASK_CONST(0xdfffa7f8)
//yuv422 plannar rotated
#define G2SB_CTX3_G2CONTROLSB_0_YUV422ROTATION_SHIFT                    _MK_SHIFT_CONST(3)
#define G2SB_CTX3_G2CONTROLSB_0_YUV422ROTATION_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLSB_0_YUV422ROTATION_SHIFT)
#define G2SB_CTX3_G2CONTROLSB_0_YUV422ROTATION_RANGE                    3:3
#define G2SB_CTX3_G2CONTROLSB_0_YUV422ROTATION_WOFFSET                  0x0
#define G2SB_CTX3_G2CONTROLSB_0_YUV422ROTATION_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_YUV422ROTATION_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLSB_0_YUV422ROTATION_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_YUV422ROTATION_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//source data is yuv422 planar valid when imode==PLANAR
#define G2SB_CTX3_G2CONTROLSB_0_YUV422PLANAR_SHIFT                      _MK_SHIFT_CONST(4)
#define G2SB_CTX3_G2CONTROLSB_0_YUV422PLANAR_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLSB_0_YUV422PLANAR_SHIFT)
#define G2SB_CTX3_G2CONTROLSB_0_YUV422PLANAR_RANGE                      4:4
#define G2SB_CTX3_G2CONTROLSB_0_YUV422PLANAR_WOFFSET                    0x0
#define G2SB_CTX3_G2CONTROLSB_0_YUV422PLANAR_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_YUV422PLANAR_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLSB_0_YUV422PLANAR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_YUV422PLANAR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Source (input) Data Mode  (IMODE) This parameter defines the data mode of source input.
// 0: Multiplexed Mode (data format is specified by SIFMT[2:0])
// One block of source data in the Image Buffer memory contains
// multiplexed component signals.
// 1: Planar mode, 4:2:0 YUV (SIFMT[2] specifies data format of U/V components)
// Three blocks of source data in the Image Buffer memory contain separate
// Y, U, and V component signals.
//
//  For circular buffer input to gr2d, the input format can not be planar.  It must be multiplex.
//    i.e. no YUV420 planar circular buffer input to gr2d.
#define G2SB_CTX3_G2CONTROLSB_0_IMODE_SHIFT                     _MK_SHIFT_CONST(5)
#define G2SB_CTX3_G2CONTROLSB_0_IMODE_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLSB_0_IMODE_SHIFT)
#define G2SB_CTX3_G2CONTROLSB_0_IMODE_RANGE                     5:5
#define G2SB_CTX3_G2CONTROLSB_0_IMODE_WOFFSET                   0x0
#define G2SB_CTX3_G2CONTROLSB_0_IMODE_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_IMODE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLSB_0_IMODE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_IMODE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_IMODE_MULTIPLEX                 _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLSB_0_IMODE_PLANAR                    _MK_ENUM_CONST(1)

//enable alpha vertical filter
#define G2SB_CTX3_G2CONTROLSB_0_ENAVF_SHIFT                     _MK_SHIFT_CONST(6)
#define G2SB_CTX3_G2CONTROLSB_0_ENAVF_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLSB_0_ENAVF_SHIFT)
#define G2SB_CTX3_G2CONTROLSB_0_ENAVF_RANGE                     6:6
#define G2SB_CTX3_G2CONTROLSB_0_ENAVF_WOFFSET                   0x0
#define G2SB_CTX3_G2CONTROLSB_0_ENAVF_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_ENAVF_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLSB_0_ENAVF_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_ENAVF_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_ENAVF_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLSB_0_ENAVF_ENABLE                    _MK_ENUM_CONST(1)

// enable horizontal alpha filtering
// if disabled, use the alpha value of third tap for output pixel
//U,V line stride in 4:2:0  Format,
#define G2SB_CTX3_G2CONTROLSB_0_ENAHF_SHIFT                     _MK_SHIFT_CONST(7)
#define G2SB_CTX3_G2CONTROLSB_0_ENAHF_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLSB_0_ENAHF_SHIFT)
#define G2SB_CTX3_G2CONTROLSB_0_ENAHF_RANGE                     7:7
#define G2SB_CTX3_G2CONTROLSB_0_ENAHF_WOFFSET                   0x0
#define G2SB_CTX3_G2CONTROLSB_0_ENAHF_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_ENAHF_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLSB_0_ENAHF_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_ENAHF_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_ENAHF_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLSB_0_ENAHF_ENABLE                    _MK_ENUM_CONST(1)

//   00= 1/2 of Luma Buffer Stride; in this case
//       Luma Buffer Stride should be multiple
//       of 2 bytes.
//   01= Equal to Luma Buffer Stride
//   10= 1/4 of Luma Buffer Stride; in this case
//       Luma Buffer Stride should be multiple
//       of 4 bytes.
//   11= use uvstride.
// Note: Use care when using a tiled surface, since 1/2 or 1/4
//   of luma stride may yield an invalid pitch (stride).
#define G2SB_CTX3_G2CONTROLSB_0_UVST_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_CTX3_G2CONTROLSB_0_UVST_FIELD                      (_MK_MASK_CONST(0x3) << G2SB_CTX3_G2CONTROLSB_0_UVST_SHIFT)
#define G2SB_CTX3_G2CONTROLSB_0_UVST_RANGE                      9:8
#define G2SB_CTX3_G2CONTROLSB_0_UVST_WOFFSET                    0x0
#define G2SB_CTX3_G2CONTROLSB_0_UVST_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_UVST_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_UVST_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_UVST_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_UVST_UVS2X                      _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLSB_0_UVST_UVS1X                      _MK_ENUM_CONST(1)
#define G2SB_CTX3_G2CONTROLSB_0_UVST_UVS4X                      _MK_ENUM_CONST(2)
#define G2SB_CTX3_G2CONTROLSB_0_UVST_UVS_G2UVSTRIDE                     _MK_ENUM_CONST(3)

// Source (input) Data Line Pairing  (SL)
// This parameter specifies one of two cases of Y vs. U/V line-pairing
// in the source data in 4:2:0 format.
// In the 4:2:0 format, there is one pair of U and V image-lines for
// every two Y image-lines.
//0 The first two Y image-lines share common pair of U and V image-lines.
//1 The first two Y image-lines are paired with two different
// pairs of U and V image-lines.
#define G2SB_CTX3_G2CONTROLSB_0_SL_SHIFT                        _MK_SHIFT_CONST(10)
#define G2SB_CTX3_G2CONTROLSB_0_SL_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLSB_0_SL_SHIFT)
#define G2SB_CTX3_G2CONTROLSB_0_SL_RANGE                        10:10
#define G2SB_CTX3_G2CONTROLSB_0_SL_WOFFSET                      0x0
#define G2SB_CTX3_G2CONTROLSB_0_SL_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_SL_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLSB_0_SL_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_SL_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_SL_COMMON_PAIR                  _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLSB_0_SL_DIFFERENT_PAIR                       _MK_ENUM_CONST(1)

// StretchBLT Source Provider Selection (SISEL)
// This bit indicates where the source images come from,  either the
// image buffer memory or system memory of the host CPU.  If source
//images come from host CPU, they come via CPU Read-FIFO.
//0 Image buffer memory.
//1 System memory of host CPU.
//14 Reserved
#define G2SB_CTX3_G2CONTROLSB_0_SISEL_SHIFT                     _MK_SHIFT_CONST(13)
#define G2SB_CTX3_G2CONTROLSB_0_SISEL_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLSB_0_SISEL_SHIFT)
#define G2SB_CTX3_G2CONTROLSB_0_SISEL_RANGE                     13:13
#define G2SB_CTX3_G2CONTROLSB_0_SISEL_WOFFSET                   0x0
#define G2SB_CTX3_G2CONTROLSB_0_SISEL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_SISEL_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLSB_0_SISEL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_SISEL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_SISEL_IMAGE_BUFFER                      _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLSB_0_SISEL_HOST                      _MK_ENUM_CONST(1)

// StretchBLT Source Selection  (SBLTSRC)
// CPU and VIP module can initiate StretchBLT operation. This bit indicates
// which one initiates current StretchBLT command. Depending on the initiator,
// appropriate source for the command execution request is selected. Whichever
// the initiator is, all the command parameters are supplied from the CPU (driver)
// through the G2 command-FIFO and shadow registers.
//0 CPU is the command initiator.
//1 VIP module is the command initiator.
#define G2SB_CTX3_G2CONTROLSB_0_SBLTSRC_SHIFT                   _MK_SHIFT_CONST(15)
#define G2SB_CTX3_G2CONTROLSB_0_SBLTSRC_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLSB_0_SBLTSRC_SHIFT)
#define G2SB_CTX3_G2CONTROLSB_0_SBLTSRC_RANGE                   15:15
#define G2SB_CTX3_G2CONTROLSB_0_SBLTSRC_WOFFSET                 0x0
#define G2SB_CTX3_G2CONTROLSB_0_SBLTSRC_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_SBLTSRC_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLSB_0_SBLTSRC_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_SBLTSRC_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_SBLTSRC_CPU                     _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLSB_0_SBLTSRC_VIP                     _MK_ENUM_CONST(1)

// StretchBLT Vertical Filter Mode (VFTYPE[1:0])
// This bit is effective when the Vertical Filter is enabled. (bit 18)
// The two-tap vertical interpolation filter can be operated in various modes.
// For the image expansion, it should be programmed as a pure 2-tap
// interpolator. For the image contraction, it can work as partly averager
// and partly interpolator with varying degree depending on the contraction ratio.
// For StretchBLT, this parameter is used as an index (selection) to
// an internal lookup table that stores the group of filter-coefficients for
// the different modes of vertical filtering.
//00 Pure interpolation filter.
//01 25% averager, 75% interpolator.
//10 50% averager, 50% interpolator.
//11 100% averager.
#define G2SB_CTX3_G2CONTROLSB_0_VFTYPE_SHIFT                    _MK_SHIFT_CONST(16)
#define G2SB_CTX3_G2CONTROLSB_0_VFTYPE_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX3_G2CONTROLSB_0_VFTYPE_SHIFT)
#define G2SB_CTX3_G2CONTROLSB_0_VFTYPE_RANGE                    17:16
#define G2SB_CTX3_G2CONTROLSB_0_VFTYPE_WOFFSET                  0x0
#define G2SB_CTX3_G2CONTROLSB_0_VFTYPE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_VFTYPE_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX3_G2CONTROLSB_0_VFTYPE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_VFTYPE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_VFTYPE_INTERP                   _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLSB_0_VFTYPE_AVG25_INTERP75                   _MK_ENUM_CONST(1)
#define G2SB_CTX3_G2CONTROLSB_0_VFTYPE_AVG50_INTERP50                   _MK_ENUM_CONST(2)
#define G2SB_CTX3_G2CONTROLSB_0_VFTYPE_AVG                      _MK_ENUM_CONST(3)

// StretchBLT Vertical Filter Enable (VFEN)
// Vertical filter shall be disabled if source images come from host CPU
// via CPU Read-FIFO. (SISEL)
// Vertical filter may be disabled to save some memory bandwidth but
// this will likely result in degradation of image quality.
// This option may also be used in the case where source image is progressive
// scanning and there is no vertical scaling.
//0 Vertical filter is disabled.
//1 Vertical filter is enabled.
#define G2SB_CTX3_G2CONTROLSB_0_VFEN_SHIFT                      _MK_SHIFT_CONST(18)
#define G2SB_CTX3_G2CONTROLSB_0_VFEN_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLSB_0_VFEN_SHIFT)
#define G2SB_CTX3_G2CONTROLSB_0_VFEN_RANGE                      18:18
#define G2SB_CTX3_G2CONTROLSB_0_VFEN_WOFFSET                    0x0
#define G2SB_CTX3_G2CONTROLSB_0_VFEN_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_VFEN_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLSB_0_VFEN_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_VFEN_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_VFEN_DISABLE                    _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLSB_0_VFEN_ENABLE                     _MK_ENUM_CONST(1)

// enabled color space converter by default
#define G2SB_CTX3_G2CONTROLSB_0_DISCSC_SHIFT                    _MK_SHIFT_CONST(19)
#define G2SB_CTX3_G2CONTROLSB_0_DISCSC_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLSB_0_DISCSC_SHIFT)
#define G2SB_CTX3_G2CONTROLSB_0_DISCSC_RANGE                    19:19
#define G2SB_CTX3_G2CONTROLSB_0_DISCSC_WOFFSET                  0x0
#define G2SB_CTX3_G2CONTROLSB_0_DISCSC_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_DISCSC_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLSB_0_DISCSC_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_DISCSC_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_DISCSC_ENABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLSB_0_DISCSC_DISABLE                  _MK_ENUM_CONST(1)

// StretchBLT Horizontal Filter Mode (HFTYPE[2:0])
// The six-tap horizontal interpolation filter can be operated in
// various operation modes. For the image expansion, it should be programmed
// as a pure 6-tap interpolator.  For the image contraction, it can work as
// partly lowpass filter and partly interpolater with varying degree depending
// the contraction ratio.
// For StretchBLT, this parameter is used as an index (selection)
// to an internal lookup table that stores the group of filter-coefficients
//for the different modes of horizontal filtering.
// 000: Pure interpolation filter.
// 001: 010 011 100 101 110: mix of interpolation and low pass filters
// 111: DISABLE.
#define G2SB_CTX3_G2CONTROLSB_0_HFTYPE_SHIFT                    _MK_SHIFT_CONST(20)
#define G2SB_CTX3_G2CONTROLSB_0_HFTYPE_FIELD                    (_MK_MASK_CONST(0x7) << G2SB_CTX3_G2CONTROLSB_0_HFTYPE_SHIFT)
#define G2SB_CTX3_G2CONTROLSB_0_HFTYPE_RANGE                    22:20
#define G2SB_CTX3_G2CONTROLSB_0_HFTYPE_WOFFSET                  0x0
#define G2SB_CTX3_G2CONTROLSB_0_HFTYPE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_HFTYPE_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define G2SB_CTX3_G2CONTROLSB_0_HFTYPE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_HFTYPE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_HFTYPE_INTERP                   _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLSB_0_HFTYPE_LPF1                     _MK_ENUM_CONST(1)
#define G2SB_CTX3_G2CONTROLSB_0_HFTYPE_LPF2                     _MK_ENUM_CONST(2)
#define G2SB_CTX3_G2CONTROLSB_0_HFTYPE_LPF3                     _MK_ENUM_CONST(3)
#define G2SB_CTX3_G2CONTROLSB_0_HFTYPE_LPF4                     _MK_ENUM_CONST(4)
#define G2SB_CTX3_G2CONTROLSB_0_HFTYPE_LPF5                     _MK_ENUM_CONST(5)
#define G2SB_CTX3_G2CONTROLSB_0_HFTYPE_LPF6                     _MK_ENUM_CONST(6)
#define G2SB_CTX3_G2CONTROLSB_0_HFTYPE_DISABLE                  _MK_ENUM_CONST(7)

//In the VC-1 specification, when the value of RANGEREDFRM variable (1-bit)
//  for a picture is equal to 1, the picture shall be scaled up according
// to the following equation:
//Y = clip( (( Y-128)*2) + 128);
//Cb = clip( ((Cb-128)*2) + 128);
//Cr = clip( ((Cr-128)*2) + 128);
//The clip operator limits the output to [0, 255].
//The input is also limited to [0, 255].
//In the VC-1 nomenclature, the output (Y, Cb, Cr) tuple corresponds to
// the 'decoded' picture. The input (Y, Cb, Cr) tuple corresponds to
// the 'reconstructed' picture.
// The above equations create the decoded picture while keeping
// the reconstructed picture intact.
//Only YUV _OB formats are supported with range reducation enabled,
// not the YUV _TC or RGB formats.
//----------------------------------------------------
//At PortalPlayer this functionality was implemented in the DVO module.
// The YUV data coming from the video frame buffers (reconstructed picture)
//  in the SDRAM was scaled up using the above equations and given to the display.
// the value of 1-bit wide RANGEREDFRM variable was configured in the DVO per frame
// and the frame was scaled whenever RANGEREDFRM == 1.
#define G2SB_CTX3_G2CONTROLSB_0_RANGEREDFRM_SHIFT                       _MK_SHIFT_CONST(23)
#define G2SB_CTX3_G2CONTROLSB_0_RANGEREDFRM_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLSB_0_RANGEREDFRM_SHIFT)
#define G2SB_CTX3_G2CONTROLSB_0_RANGEREDFRM_RANGE                       23:23
#define G2SB_CTX3_G2CONTROLSB_0_RANGEREDFRM_WOFFSET                     0x0
#define G2SB_CTX3_G2CONTROLSB_0_RANGEREDFRM_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_RANGEREDFRM_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLSB_0_RANGEREDFRM_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_RANGEREDFRM_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_RANGEREDFRM_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLSB_0_RANGEREDFRM_ENABLE                      _MK_ENUM_CONST(1)

// StretchBLT Source Type (SITYPE)
// This bit identifies two types of source images. If source image is 2-to-1
// interlaced and StretchBLT processes either one of the two interlaced
// field-images, physical (positional) displacement between the two
// interlaced fields must be taken into account.  One field-image that is
// placed higher in position than the other field-image is called top-field
// and the other is called bottom-field. StretchBLT processing has to
// lower the top-field (or raise the bottom-field) to match the corresponding
// two target images in the overlay window (that is progressively scanned)
// right at the same position.   If source image is full frame-image
// obtained from two interlaced field-images, its type is ?top-field?.
// If source images are progressively scanned, the type identification is not
// significant and they may be designated either one of the two types
//0 Source image is ?top-field?.
//1 Source image is ?bottom-field?.
#define G2SB_CTX3_G2CONTROLSB_0_SITYPE_SHIFT                    _MK_SHIFT_CONST(24)
#define G2SB_CTX3_G2CONTROLSB_0_SITYPE_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLSB_0_SITYPE_SHIFT)
#define G2SB_CTX3_G2CONTROLSB_0_SITYPE_RANGE                    24:24
#define G2SB_CTX3_G2CONTROLSB_0_SITYPE_WOFFSET                  0x0
#define G2SB_CTX3_G2CONTROLSB_0_SITYPE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_SITYPE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLSB_0_SITYPE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_SITYPE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_SITYPE_TOP_FIELD                        _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLSB_0_SITYPE_BOTTOM_FIELD                     _MK_ENUM_CONST(1)

// StretchBLT Source Buffer Selection (SBSEL)
// StretchBLT processing involves frame-rate conversion from a
// series of source images to another series of destination images
// (field-rate of the source video to frame-rate of the PC display).
// In order to avoid image tearing, it is preferred to use two buffer
// sections in the source video area. This bit selects one of the two
// buffering blocks from which this StretchBLT command receives the source image.
// The two buffering memory blocks are called source-A and source-B.
//0 Source image comes from ?source-A? buffer.
//1 Source image comes from ?source-B? buffer.
#define G2SB_CTX3_G2CONTROLSB_0_SBSEL_SHIFT                     _MK_SHIFT_CONST(25)
#define G2SB_CTX3_G2CONTROLSB_0_SBSEL_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLSB_0_SBSEL_SHIFT)
#define G2SB_CTX3_G2CONTROLSB_0_SBSEL_RANGE                     25:25
#define G2SB_CTX3_G2CONTROLSB_0_SBSEL_WOFFSET                   0x0
#define G2SB_CTX3_G2CONTROLSB_0_SBSEL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_SBSEL_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLSB_0_SBSEL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_SBSEL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_SBSEL_SRC_A                     _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLSB_0_SBSEL_SRC_B                     _MK_ENUM_CONST(1)

// StretchBLT Destination Buffer Selection (DBSEL)
// StretchBLT processing involves frame-rate conversion from a series of
// source images to another series of destination images (field-rate of
// the source video to frame-rate of the PC display). In order to avoid
// image tearing, it is preferred to use two buffer sections in the destination
// video area.  This bit selects one of the two buffering blocks to which this
// StretchBLT command delivers the destination image.
// The two buffering memory blocks are called A and B.
//0 Destination image goes to ?A? buffer.
//1 Destination image goes to ?B? buffer.
#define G2SB_CTX3_G2CONTROLSB_0_DBSEL_SHIFT                     _MK_SHIFT_CONST(26)
#define G2SB_CTX3_G2CONTROLSB_0_DBSEL_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLSB_0_DBSEL_SHIFT)
#define G2SB_CTX3_G2CONTROLSB_0_DBSEL_RANGE                     26:26
#define G2SB_CTX3_G2CONTROLSB_0_DBSEL_WOFFSET                   0x0
#define G2SB_CTX3_G2CONTROLSB_0_DBSEL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_DBSEL_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLSB_0_DBSEL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_DBSEL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_DBSEL_DST_A                     _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLSB_0_DBSEL_DST_B                     _MK_ENUM_CONST(1)

// Key Signal Generator Enable (KEYEN) Key signal generator generates either
// chroma key signal (from YCbCr signal) or color key signal (from RGB signal)
//0 Key signal generator is disabled.
//1 Key signal generator is enabled.
#define G2SB_CTX3_G2CONTROLSB_0_KEYEN_SHIFT                     _MK_SHIFT_CONST(27)
#define G2SB_CTX3_G2CONTROLSB_0_KEYEN_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLSB_0_KEYEN_SHIFT)
#define G2SB_CTX3_G2CONTROLSB_0_KEYEN_RANGE                     27:27
#define G2SB_CTX3_G2CONTROLSB_0_KEYEN_WOFFSET                   0x0
#define G2SB_CTX3_G2CONTROLSB_0_KEYEN_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_KEYEN_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLSB_0_KEYEN_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_KEYEN_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_KEYEN_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLSB_0_KEYEN_ENABLE                    _MK_ENUM_CONST(1)

// Key Signal Polarity (KPOL)
// Color/Chroma key signal is generated by comparing source input pixel
// color to a range of a color specified by lower and upper limit values.
// The key signal is interpreted in two ways, depending on which one of
// video and graphics images is foreground (and the other is background).
// This is effective only if Key signal generator is enabled.
// (see G2CMKEYL, G2CMKEYU)
// 0 Key signal is set to 1 when source pixel is within the lower and upper
// limit color range.
// 1 Key signal is set to 1 when source pixel is outside the lower and upper
// limit color range.
#define G2SB_CTX3_G2CONTROLSB_0_KPOL_SHIFT                      _MK_SHIFT_CONST(28)
#define G2SB_CTX3_G2CONTROLSB_0_KPOL_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLSB_0_KPOL_SHIFT)
#define G2SB_CTX3_G2CONTROLSB_0_KPOL_RANGE                      28:28
#define G2SB_CTX3_G2CONTROLSB_0_KPOL_WOFFSET                    0x0
#define G2SB_CTX3_G2CONTROLSB_0_KPOL_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_KPOL_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLSB_0_KPOL_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_KPOL_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_KPOL_WITHIN_BOUNDS                      _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLSB_0_KPOL_OUTSIDE_BOUNDS                     _MK_ENUM_CONST(1)

// Enable Dithering (ENDITH)
// For 16 bit RGB output modes, the LSB of the color components can be
// modified by adding a variable residual value that will reduce the banding
// artifacts that can appear on the display.
// 0 Normal operation
// 1 Enable Dithering
#define G2SB_CTX3_G2CONTROLSB_0_ENDITH_SHIFT                    _MK_SHIFT_CONST(30)
#define G2SB_CTX3_G2CONTROLSB_0_ENDITH_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLSB_0_ENDITH_SHIFT)
#define G2SB_CTX3_G2CONTROLSB_0_ENDITH_RANGE                    30:30
#define G2SB_CTX3_G2CONTROLSB_0_ENDITH_WOFFSET                  0x0
#define G2SB_CTX3_G2CONTROLSB_0_ENDITH_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_ENDITH_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLSB_0_ENDITH_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_ENDITH_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_ENDITH_DISABLE                  _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLSB_0_ENDITH_ENABLE                   _MK_ENUM_CONST(1)

//output destination writes (dw) go either to image memory or epp
//0 Output data is sent to memory
//1 YUV or RGB data is passed directly to EPP module and no destination writes
//  will take place.
#define G2SB_CTX3_G2CONTROLSB_0_DISDW_SHIFT                     _MK_SHIFT_CONST(31)
#define G2SB_CTX3_G2CONTROLSB_0_DISDW_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLSB_0_DISDW_SHIFT)
#define G2SB_CTX3_G2CONTROLSB_0_DISDW_RANGE                     31:31
#define G2SB_CTX3_G2CONTROLSB_0_DISDW_WOFFSET                   0x0
#define G2SB_CTX3_G2CONTROLSB_0_DISDW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_DISDW_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLSB_0_DISDW_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_DISDW_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSB_0_DISDW_GOTO_IMAGE_BUFFER                 _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLSB_0_DISDW_GOTO_EPP                  _MK_ENUM_CONST(1)


// Register G2SB_CTX3_G2CONTROLSECOND_0  //{host,2d,index=1e}
#define G2SB_CTX3_G2CONTROLSECOND_0                     _MK_ADDR_CONST(0x101e)
#define G2SB_CTX3_G2CONTROLSECOND_0_SECURE                      0x0
#define G2SB_CTX3_G2CONTROLSECOND_0_WORD_COUNT                  0x1
#define G2SB_CTX3_G2CONTROLSECOND_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_RESET_MASK                  _MK_MASK_CONST(0x3f61c3fe)
#define G2SB_CTX3_G2CONTROLSECOND_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_READ_MASK                   _MK_MASK_CONST(0x3f71c3fe)
#define G2SB_CTX3_G2CONTROLSECOND_0_WRITE_MASK                  _MK_MASK_CONST(0x3f71c3fe)
// Host port bit swap 1=enable   0= disable
//   1= enable
#define G2SB_CTX3_G2CONTROLSECOND_0_BITSWAP_SHIFT                       _MK_SHIFT_CONST(1)
#define G2SB_CTX3_G2CONTROLSECOND_0_BITSWAP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLSECOND_0_BITSWAP_SHIFT)
#define G2SB_CTX3_G2CONTROLSECOND_0_BITSWAP_RANGE                       1:1
#define G2SB_CTX3_G2CONTROLSECOND_0_BITSWAP_WOFFSET                     0x0
#define G2SB_CTX3_G2CONTROLSECOND_0_BITSWAP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_BITSWAP_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLSECOND_0_BITSWAP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_BITSWAP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_BITSWAP_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLSECOND_0_BITSWAP_ENABLE                      _MK_ENUM_CONST(1)

// Host port byte swap 1=enable   0= disable
//   1= enable
#define G2SB_CTX3_G2CONTROLSECOND_0_BEBSWAP_SHIFT                       _MK_SHIFT_CONST(2)
#define G2SB_CTX3_G2CONTROLSECOND_0_BEBSWAP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLSECOND_0_BEBSWAP_SHIFT)
#define G2SB_CTX3_G2CONTROLSECOND_0_BEBSWAP_RANGE                       2:2
#define G2SB_CTX3_G2CONTROLSECOND_0_BEBSWAP_WOFFSET                     0x0
#define G2SB_CTX3_G2CONTROLSECOND_0_BEBSWAP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_BEBSWAP_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLSECOND_0_BEBSWAP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_BEBSWAP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_BEBSWAP_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLSECOND_0_BEBSWAP_ENABLE                      _MK_ENUM_CONST(1)

// Host port word swap 1=enable   0= disable
#define G2SB_CTX3_G2CONTROLSECOND_0_BEWSWAP_SHIFT                       _MK_SHIFT_CONST(3)
#define G2SB_CTX3_G2CONTROLSECOND_0_BEWSWAP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLSECOND_0_BEWSWAP_SHIFT)
#define G2SB_CTX3_G2CONTROLSECOND_0_BEWSWAP_RANGE                       3:3
#define G2SB_CTX3_G2CONTROLSECOND_0_BEWSWAP_WOFFSET                     0x0
#define G2SB_CTX3_G2CONTROLSECOND_0_BEWSWAP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_BEWSWAP_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLSECOND_0_BEWSWAP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_BEWSWAP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_BEWSWAP_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLSECOND_0_BEWSWAP_ENABLE                      _MK_ENUM_CONST(1)

// Alpha blending method
// FIX:
//   ALPHA blending:  Fixed alpha,  ALPHA is the value, B5G6R5 * B5G6R5
//   VCAA:            B5G6R5->B5G6R5
// PL1BPP:
//   ALPHA blending:  Alpha 1bit/pixel from memory plane, B5G6R5 * B5G6R5
//      NOTE: when ALPTYPE is PL1BPP, DSTX[2:0] must be zero, see bug 344489
// PL2BPP:
//   ALPHA blending:  Alpha 2bits/pixel from memory plane, B5G6R5 * B5G6R5
//      NOTE: when ALPTYPE is PL2BPP, DSTX[1:0] must be zero, see bug 344489
// PL4BPP:
//   ALPHA blending:  Alpha 4bits/pixel from memory plane, B5G6R5 * B5G6R5
//      NOTE: when ALPTYPE is PL4BPP, DSTX[0:0] must be zero, see bug 344489
// PL8BPP:
//   ALPHA blending:  Alpha 8bits/pixel from memory plane, B5G6R5 * B5G6R5
// PL44BPP:
//   ALPHA blending:  Alpha 8bits/pixel from memory plane src*4bits+dst*4bits, B5G6R5 * B5G6R5
// PLS1BPP:
//   ALPHA blending:  Alpha 1bit from source B5G5R5A1, alpha(MSB). Dest: B5G6R5.
//   VCAA:            reserved
// PLS4BPPAL:
//   ALPHA blending:  Alpha 4bits from source A4B4G4R4, alpha(LSB). Dest: B5G6R5.
// PLS4BPP:
//   ALPHA blending:  Alpha 4bits from source B4G4R4A4, alpha(MSB). Dest: B5G6R5.
//   VCAA:            R8G8B8A8->B5G6R5 without reading VCAA plane
//                     (surface blit with bpp down convert - implemented in hw by vcaa engine; not really a vcaa resolve)
// PLS8BPP:
//   ALPHA blending:  Alpha 8bits from source/destination(decided by ALPSRCORDST),
//                    R8G8B8A8, alpha(MSB). DST: R8G8B8A8
//   VCAA:            R8G8B8A8->R8G8B8A8, alpha has same blending method as RGB
// PLS8BX:
//   ALPHA blending:  Alpha 8bits from source B8G8R8A8, alpha(MSB). Dest: B5G6R5. (**Restrictions)
//   VCAA:            R8G8B8A8->B5G6R5
// PLS1BPPAL:
//   ALPHA blending:  Alpha 1 bit from source A1B5G5R5, alpha(LSB). Dest: B5G6R5
//   VCAA:            A1B5G5R5->A1B5G5R5
// **Restriction
// PLS8BX alpha blending has the following restrictions
// 1. Source/destination addresses have to be in 128bit boundary.
// 2. Destination width has to be multiple of 4 pixels.
// 3. Source/Destination strides have to be multiple of 128bits.
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPTYPE_SHIFT                       _MK_SHIFT_CONST(4)
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPTYPE_FIELD                       (_MK_MASK_CONST(0x1f) << G2SB_CTX3_G2CONTROLSECOND_0_ALPTYPE_SHIFT)
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPTYPE_RANGE                       8:4
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPTYPE_WOFFSET                     0x0
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPTYPE_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPTYPE_DEFAULT_MASK                        _MK_MASK_CONST(0x1f)
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPTYPE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPTYPE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPTYPE_FIX                 _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPTYPE_PL1BPP                      _MK_ENUM_CONST(1)
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPTYPE_PL2BPP                      _MK_ENUM_CONST(2)
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPTYPE_PL4BPP                      _MK_ENUM_CONST(3)
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPTYPE_PL8BPP                      _MK_ENUM_CONST(4)
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPTYPE_PL44BPP                     _MK_ENUM_CONST(5)
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPTYPE_PLS1BPP                     _MK_ENUM_CONST(6)
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPTYPE_PLS4BPPAL                   _MK_ENUM_CONST(7)
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPTYPE_PLS4BPP                     _MK_ENUM_CONST(8)
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPTYPE_PLS8BPP                     _MK_ENUM_CONST(9)
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPTYPE_PLS8BX                      _MK_ENUM_CONST(10)
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPTYPE_PLS1BPPAL                   _MK_ENUM_CONST(11)

// 32bits blending mode, output alpha selection 0:source alpha, 1:destination alpha
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPSRCORDST_SHIFT                   _MK_SHIFT_CONST(9)
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPSRCORDST_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLSECOND_0_ALPSRCORDST_SHIFT)
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPSRCORDST_RANGE                   9:9
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPSRCORDST_WOFFSET                 0x0
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPSRCORDST_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPSRCORDST_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPSRCORDST_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPSRCORDST_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPSRCORDST_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLSECOND_0_ALPSRCORDST_ENABLE                  _MK_ENUM_CONST(1)

// Pixel replication for Palm OS.
#define G2SB_CTX3_G2CONTROLSECOND_0_PXLREP_SHIFT                        _MK_SHIFT_CONST(14)
#define G2SB_CTX3_G2CONTROLSECOND_0_PXLREP_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLSECOND_0_PXLREP_SHIFT)
#define G2SB_CTX3_G2CONTROLSECOND_0_PXLREP_RANGE                        14:14
#define G2SB_CTX3_G2CONTROLSECOND_0_PXLREP_WOFFSET                      0x0
#define G2SB_CTX3_G2CONTROLSECOND_0_PXLREP_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_PXLREP_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLSECOND_0_PXLREP_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_PXLREP_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_PXLREP_DISABLE                      _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLSECOND_0_PXLREP_ENABLE                       _MK_ENUM_CONST(1)

// Used by Palm OS to highlight a selected icon by swapping
//  Background and Foreground colors in a rectangle area
#define G2SB_CTX3_G2CONTROLSECOND_0_SWAPBLT_SHIFT                       _MK_SHIFT_CONST(15)
#define G2SB_CTX3_G2CONTROLSECOND_0_SWAPBLT_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLSECOND_0_SWAPBLT_SHIFT)
#define G2SB_CTX3_G2CONTROLSECOND_0_SWAPBLT_RANGE                       15:15
#define G2SB_CTX3_G2CONTROLSECOND_0_SWAPBLT_WOFFSET                     0x0
#define G2SB_CTX3_G2CONTROLSECOND_0_SWAPBLT_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_SWAPBLT_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLSECOND_0_SWAPBLT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_SWAPBLT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//VCAA safe mode, if turned on, all up/bottom color data will be read in. This is a debug/cya incase the top/bottom color
//  fetch is broken.
#define G2SB_CTX3_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_CTX3_G2CONTROLSECOND_0_VCAA_SAFE_MODE_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SHIFT)
#define G2SB_CTX3_G2CONTROLSECOND_0_VCAA_SAFE_MODE_RANGE                        16:16
#define G2SB_CTX3_G2CONTROLSECOND_0_VCAA_SAFE_MODE_WOFFSET                      0x0
#define G2SB_CTX3_G2CONTROLSECOND_0_VCAA_SAFE_MODE_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_VCAA_SAFE_MODE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_VCAA_SAFE_MODE_DISABLE                      _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLSECOND_0_VCAA_SAFE_MODE_ENABLE                       _MK_ENUM_CONST(1)

#define G2SB_CTX3_G2CONTROLSECOND_0_G2NOSTOP_SHIFT                      _MK_SHIFT_CONST(20)
#define G2SB_CTX3_G2CONTROLSECOND_0_G2NOSTOP_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLSECOND_0_G2NOSTOP_SHIFT)
#define G2SB_CTX3_G2CONTROLSECOND_0_G2NOSTOP_RANGE                      20:20
#define G2SB_CTX3_G2CONTROLSECOND_0_G2NOSTOP_WOFFSET                    0x0
#define G2SB_CTX3_G2CONTROLSECOND_0_G2NOSTOP_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_G2NOSTOP_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_G2NOSTOP_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_G2NOSTOP_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Clipping rectangle control,
// if clip enable, bit 57 XYTDW should be cleared.
// 0x=clipping disabled,
// 10=draw only inside clipping rectangle,
// 11=draw only outside clipping rectangle
#define G2SB_CTX3_G2CONTROLSECOND_0_CLIPC_SHIFT                 _MK_SHIFT_CONST(21)
#define G2SB_CTX3_G2CONTROLSECOND_0_CLIPC_FIELD                 (_MK_MASK_CONST(0x3) << G2SB_CTX3_G2CONTROLSECOND_0_CLIPC_SHIFT)
#define G2SB_CTX3_G2CONTROLSECOND_0_CLIPC_RANGE                 22:21
#define G2SB_CTX3_G2CONTROLSECOND_0_CLIPC_WOFFSET                       0x0
#define G2SB_CTX3_G2CONTROLSECOND_0_CLIPC_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_CLIPC_DEFAULT_MASK                  _MK_MASK_CONST(0x3)
#define G2SB_CTX3_G2CONTROLSECOND_0_CLIPC_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_CLIPC_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Fast Rotate mode sel
//------------------------------------------------------------------
// G2 Fast Rotate
//
// Transforms a surface via FR_TYPE transformation.
// Works in either 2-buffer (copy)  or 1-buffer mode (in place) mode.
// The engine breaks down a larger surface into a grid of smaller FR_BLOCKs.
// Works on the granularity of an FR_BLOCK.  An FR_BLOCK is:
//   16x16 pixel block (DSTCD = bpp8)
//    8x8  pixel block (DSTCD = bpp16)
//    4x4  pixel block (DSTCD = bpp32)
// Max surface size is 4096x4096
//
// Key information
//  - source and destination base address must be 128-bit word aligned
//  - engine works on FR_BLOCK granularity:
//      transformed surface width  in multiples of 16-bytes**
//      transformed surface height in multiples of 16/8/4 lines for bpp8/bpp16/bpp32 FR_BLOCK
//      if surface dimension is not a multiple, sw can program FR engine to transform larger surface
//         (round up to next FR_BLOCK in width and height-->transform-->calculate relative memory pointer address)
//  - during a rotational transformation (TRANS_LR, TRANS_RL, ROT_90, ROT_270):
//      the stride of the output surface != the stride of the input surface when working on non-square input
//      input:                        output:
//      *^----------------------           *$----------------------
//      $ 0  1  2  3  4  5  6  7           ^ 24 16 8  0  ^  ^  ^  ^
//      | 8  9 10 11 12 13 14 15           | 25 17 9  1  ^  ^  ^  ^
//      |16 17 18 19 20 21 22 23           | 26 18 10 2  ^  ^  ^  ^
//      |24 25 26 27 28 29 30 31           | 27 19 11 3  ^  ^  ^  ^
//      | -  -  -  -  *  *  *  *           | 28 20 12 4  *  *  *  *
//      | -  -  -  -  *  *  *  *           | 29 21 13 5  *  *  *  *
//      | -  -  -  -  *  *  *  *           | 30 22 14 6  *  *  *  *
//      | -  -  -  -  *  *  *  *           | 31 23 15 7  *  *  *  *
//
//  - Tiling alignment restrictions subsume FR restrictions because the
//    FR surface base address is the same as the start address.
//
//  Register Programming
//  ====================
//   FR_MODE - inplace or copy
//   FR_TYPE - type of transformation
//   DSTCD - bpp8, bpp16, bpp32
//   SRCBA - source base address
//   SRCWIDTH - (width in pixels-1)
//   SRCHEIGHT - (height in lines-1)
//   SRCS - source stride
//   DSTBA - dest base address
//   DSTS - dest stride
//   FR_READWAIT - always set to enable
//
// FR inefficency in the following setup :
// 1. FR_MODE==SQUARE
// 2. if(FR_TYPE==YFLIP && SRCHEIGHT==m*n && n==odd number) where m=8bpp?16:16bpp?8:4
//    Or if(FR_TYPE==XFLIP && SRCWIDTH==m*n && n==odd number) where m=8bpp?16:16bpp?8:4
// 3. Then, the middle 8 lines/pixels, E.G. YFLIP/16bpp/n==3, line8 to line15 will be processed twice. 00 = disable fast rotate - this turns off the 2nd level clock to fr_rotate engine.  Please remember to do so!
// 01 = src/dst copy mode - two separate buffers
// 10 = square in place - one buffer
// 11 = blank
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_MODE_SHIFT                       _MK_SHIFT_CONST(24)
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_MODE_FIELD                       (_MK_MASK_CONST(0x3) << G2SB_CTX3_G2CONTROLSECOND_0_FR_MODE_SHIFT)
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_MODE_RANGE                       25:24
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_MODE_WOFFSET                     0x0
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_MODE_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_MODE_DEFAULT_MASK                        _MK_MASK_CONST(0x3)
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_MODE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_MODE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_MODE_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_MODE_SRC_DST_COPY                        _MK_ENUM_CONST(1)
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_MODE_SQUARE                      _MK_ENUM_CONST(2)
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_MODE_BLANK                       _MK_ENUM_CONST(3)

//  Fast Rotate type     000 = FLIP_X
// 001 = FLIP_Y
// 010 = TRANS_LR (mirrors about diagonal. Diagonal runs from upper left to lower right)
// 011 = TRANS_RL (mirrors about diagonal. Diagonal runs from upper right to lower left)
// 100 = ROT_90 (counter clock wise by 90 degrees)
// 101 = ROT_180
// 110 = ROT_270 (clock wise by 90 degrees)
// 111 = IDENTITY
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_TYPE_SHIFT                       _MK_SHIFT_CONST(26)
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_TYPE_FIELD                       (_MK_MASK_CONST(0x7) << G2SB_CTX3_G2CONTROLSECOND_0_FR_TYPE_SHIFT)
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_TYPE_RANGE                       28:26
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_TYPE_WOFFSET                     0x0
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_TYPE_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_TYPE_DEFAULT_MASK                        _MK_MASK_CONST(0x7)
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_TYPE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_TYPE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_TYPE_FLIP_X                      _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_TYPE_FLIP_Y                      _MK_ENUM_CONST(1)
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_TYPE_TRANS_LR                    _MK_ENUM_CONST(2)
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_TYPE_TRANS_RL                    _MK_ENUM_CONST(3)
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_TYPE_ROT_90                      _MK_ENUM_CONST(4)
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_TYPE_ROT_180                     _MK_ENUM_CONST(5)
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_TYPE_ROT_270                     _MK_ENUM_CONST(6)
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_TYPE_IDENTITY                    _MK_ENUM_CONST(7)

//  Fast Rotate wait for read 0 = disable
// 1 = enable
// Enabling this bit forces FR to wait for the reads to be stored
// in the data return fifo before started to send writes out to
// the same block.
//
// Always set to ENABLE.  This is debug only.
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_READWAIT_SHIFT                   _MK_SHIFT_CONST(29)
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_READWAIT_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLSECOND_0_FR_READWAIT_SHIFT)
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_READWAIT_RANGE                   29:29
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_READWAIT_WOFFSET                 0x0
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_READWAIT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_READWAIT_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_READWAIT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_READWAIT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_READWAIT_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLSECOND_0_FR_READWAIT_ENABLE                  _MK_ENUM_CONST(1)

//----------------------------------------------------------------------
//
// G2 Blit Formats:
// (1) G2 Blit size is based on height in lines, width in pixels,
//     stride in bytes, and pixel size (color depth). Unless alpha
//     blending is enabled, G2 doesn't care about pixel components.
//
//     Source color depths supported by G2 Blit:
//     =========================================
//       color depth same as destination: G2CONTROLMAIN.SRCCD = 1
//       monochrome:                      G2CONTROLMAIN.SRCCD = 0
//       (source monochrome color determined by G2SRCBGC, G2SRCFGC)
//
//     Pattern color depths supported by G2 Blit:
//     =========================================
//       color depth same as destination: G2PATOS.PATCD = 1
//       monochrome:                      G2PATOS.PATCD = 0
//       (pattern monochrome color determined by G2PATBGC, G2PATFGC)
//
//     Destination color depths supported by G2 Blit:
//     ==============================================
//       1 byte per pixel:    G2CONTROLMAIN.DSTCD = BPP8
//       2 bytes per pixel:   G2CONTROLMAIN.DSTCD = BPP16
//       4 bytes per pixel:   G2CONTROLMAIN.DSTCD = BPP32
//
// (2) Alpha blending operates on 3 or 4 component pixels of a specified
//     color depth. One of the components may be alpha (A), depending on the
//     alpha blend format, which is only allowed in certain component
//     positions defined below. The only format rule of the remaining
//     components is that they must be in the same source and destination
//     position because the alpha blend engine does not support component
//     swapping. For example, valid 32BPP formats are: RGBA_8888->RGBA_8888,
//     BGRA_8888->BGRA_8888, GRBA_8888->GRBA_8888, etc.
//
//     Source formats supported by G2 alpha blend:
//     ===========================================
//       color depth BPP8:  no supported formats
//       color depth BPP16:
//          ALPTYPE_PLS1BPP: xxxA_5551 (ex: BGRA_5551 = A[15] R[14:10] G[9:5] B[4:0])
//          ALPTYPE_PLS4BPP: xxxA_4444 (ex: BGRA_4444 = A[15:12] R[11:8] G[7:4] B[3:0])
//          (other)        : xxx_565   (ex: BGR_565   = R[15:11] G[10:5] B[4:0])
//       color depth BPP32:
//          (all)          : xxxA_8888 (ex: BRGA_8888 = A[31:24] R[23:16] G[15:8] B[7:0])
//
//
//     Destination formats supported by G2 alpha blend:
//     ================================================
//       color depth BPP8:  no supported formats
//       color depth BPP16: xxx_565   (ex: BGR_565   = R[15:11] G[10:5] B[4:0])
//       color depth BPP32: xxxA_8888 (ex: BRGA_8888 = A[31:24] R[23:16] G[15:8] B[7:0])
//
//     The following table
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     | src cd  |   src format                  | dst cd  | dst format     | examples:                                  |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP8   |  no support                   |  BPP8   | no support     |                                            |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP16  | xyzA_5551, xyzA_4444, xyz_565 |  BPP16  | xyz_565        | BGRA_5551->BGR_565, RGB_565->RGB565        |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP32  | xyzA_8888                     |  BPP32  | xyzA_8888      | RGBA_8888->RGBA_8888, BGRA_8888->BGRA_8888 |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP32  | xyzA_8888                     |  BPP16  | xyz_565        | RGBA_8888->RGB_565, BGRA_8888->BGR_565     |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//
//----------------------------------------------------------
// VCAA Resolve engine
//
// (1) Format support
//
// +-----------------+--------------------+----------------------+
// | srcColor format | srcCoverage format | legal dest format(s) |
// +-----------------+--------------------+----------------------+
// |     A1B5G5R5    |        VCAA        |       A1B5G5R5       |
// +-----------------+--------------------+----------------------+
// |     R8G8B8A8    |        VCAA        |   R8G8B8A8, B5G6R5   |
// +-----------------+--------------------+----------------------+
// |      B5G6R5     |        VCAA        |         B5G6R5       |
// +-----------------+--------------------+----------------------+
//
// To program resolve type:
//   ALPTYPE == FIX:       B5G6R5   -> B5G6R5
//   ALPTYPE == PLS1BPPAL: A1B5G5R5 -> A1B5G5R5
//   ALPTYPE == PLS8BPP:   R8G8B8A8 -> R8G8B8A8
//   ALPTYPE == PLS8BX:    R8G8B8A8 -> B5G6R5
//
// (2) Color surface programming
//
//     color surface base address:  SRCBA
//       sub-surface start x:       SRCX      (pixel index)
//       sub-surface start y:       SRCY      (line index)
//     color surface stride:        SRCS      (bytes)
//
//     The engine supports sub-surface resolve.  One can imagine a full color buffer of 1024x768, but
//
//     [pseudo_code]
//       color_surface_start_address_fetch = pcurctx->regs.rG2SRCBA.uSRCBA() +
//        (pcurctx->regs.rG2SRCPS.uSRCX() * VCAAState.color_surface_depth) +
//        (pcurctx->regs.rG2SRCPS.uSRCY() * VCAAState.color_surface_stride);
//
// (3) VCAA surface programming
//
//     vcaa surface base address:   PATBA
//     vcaa surface stride:         PATST     (bytes)
//
//     [pseudo_code]
//       vcaa_surface_start_address_fetch = pcurctx->regs.rG2PATBA.uPATBA();
//
//       SW *MUST* directly program this register to the proper sub-surface location in the vcaa surface
//        which corresponds to the SRCX and SRCY programming. The calculation is
//            PATBA = vcaa_base_address + SRCX * (1) + SRCY * PATST;
//
// (4) Resolve surface programming
//
//     resolve window width:        DSTWIDTH  (pixels)
//     resolve window height:       DSTHEIGHT (lines)
//     resolve output stride:       DSTS      (bytes)
//
//  These values program the width and height of the resolved surface.  In the base case,
//   DSTWIDTH  = color surface width
//   DSTHEIGHT = color sufrace height
//   DSTS      = resolve surface format bpp * DSTWIDTH
//
//  The vcaa engine technically supports DSTX and DSTY (like its cousin SRCX and SRCY).  This was not
//  requested by the original RFE by SW during the initial design.
//
//  [pseudo_code]
//     resolve_surface_start_address_put = pcurctx->regs.rG2DSTBA.uDSTBA() +
//       (pcurctx->regs.rG2DSTPS.uDSTX() * resolve_surface_color_depth) +
//       (pcurctx->regs.rG2DSTPS.uDSTY() * resolve_surface_color_stride);
//
//
// (5) Resolving a pixel
//
//   The coverage surface is a 8 bits per pixel surface (C4X4).  The surface is initialized to all 1s by 3d.
//
//   For a given pixel, we need to look up 4 bits of coverage data.
//   If the data is 0xf, the pixel does not need to be resolved.
//   Otherwise, we need to reblend the pixel with certain weightings of its neighbors (i.e. we're on the edge of some geometry)
//
//   If any coverage bits is 0, we need to resolve the color.  To do so, we calculate the following eqn:
//   color_new = (
//                 20*color_old +
//                 27*(
//                     ((cover_down  == 0) ? color_down  : color_old) +
//                     ((cover_right == 0) ? color_right : color_old) +
//                     ((cover_left  == 0) ? color_left  : color_old) +
//                     ((cover_up    == 0) ? color_up    : color_old)
//                     )
//               ) / 128;
//
//   If coverage bit == 0, then we use the neighbor color value in the resolve
//   If coverage bit == 1, then we use the center   color value in the resolve
//
//   The resolve is done on a per channel (r/g/b/a) basis:
//     format convert input channel to 8-bit
//     perform resolve equation above
//     format convert to output format
//
//   For the resolution of the alpha channel:
//     In B5G6R5:   no alpha information.  do nothing.
//     In A1B5G5R5: no resolve.  keep the source color alpha bit.
//     In R8G8B8A8: normal 8-bit channel resolve
//
// (6) Resolving a pixel on the edge
//
//    When on an edge, the vcaa engine treats the coverage bit as a 1.  Use the center color value.
//    This holds true even on the edge of the sub-surface resolve window when located in the middle of the larger surface
//
// (7) Maximum dimensions
//
//    The maximum resolve sub-surface is 4096 pixels wide.
//
// (8) Surface restrictions
//    The VCAA engine has the following restrictions w.r.t input surfaces
//      - input base address is 128-bit memory word aligned
//      - input stride is multiple of 128-bits (16 bytes)
//    The VCAA engine has the following restrictions w.r.t output surfaces
//      - output base address is 128-bit memory word aligned
//      - output stride is multiple of 128-bits (16 bytes)
// (9) Coverage surface layout
//    The surface is C4X4.  doc/<previous projects>/3d/qrast_sides.vsd/qrast_arch.doc/qrast_vcaa.doc has a wealth of info.
//
//    Surface layout (C4X4)
//    =====================
//
//       (lsb2msb)  C0_C1_C2_C3_X_X_X_X     (X is a don't care.  Qrast inits to 1)
//       (msb2lsb)  X_X_X_X_C3_C2_C1_C0
//
//
//     +          o          o
//          C0
//             C1   Cov(0,1)
//        C2
//          C3
//     o          o          o
//
//       Cov(1,0)   Cov(1,1)
//
//     o          o          o
//
//
//     +/o = pixel centers
//
//     In the example above,
//        Cov(0,0) = X_X_X_X_C3_C2_C1_C0
//        C3       = V_C3(Cov(0,0));
//        ..         ..
//        C0       = V_C0(Cov(0,0));
//     #define V_C3(bits) (bits & 0x8)
//     #define V_C2(bits) (bits & 0x4)
//     #define V_C1(bits) (bits & 0x2)
//     #define V_C0(bits) (bits & 0x1)
//
//    Resolving a pixel
//    =================
//     In an ideal world, the coverage would be simply laid out such that when resolving Pixel(x,y), we would
//    need only to fetch Cov(x,y) to get all 4 bits of information.
//     In actuality, the coverage surface was rearranged to help qrast in performance.  To resolve Pixel(x,y)
//    gr2d has to fetch 4 C4X4 bytes [Cov(x,y), Cov(x-1,y), Cov(x,y-1), Cov(x-1,y-1)].  From each C4X4 byte, it
//    extracts one bit which is used in the resolve equations shown in (5).
//
//
//    Need the logical vcaa bits (DRLU) for blend which is spread across four C4X4 coverage bytes
//
//          U
//    L
//        o
//            R
//      D
//
//    where
//
//     o = Pixel(x,y)
//     D = V_C1(Cov(x-1,y))
//     R = V_C0(Cov(x,y))
//     L = V_C3(Cov(x-1,y-1))
//     U = V_C2(Cov(x,y-1))
//
//
// (10) Other documentation
//       cmod/g2/fsim/g2vcaa.cpp - cmodel implementation with comments
//       doc/<previous projects>/3d/qrast_sides.vsd/qrast_arch.doc/qrast_vcaa.doc
//

// Register G2SB_CTX3_G2CONTROLMAIN_0  //{host,2d,sb,index=1f}
#define G2SB_CTX3_G2CONTROLMAIN_0                       _MK_ADDR_CONST(0x101f)
#define G2SB_CTX3_G2CONTROLMAIN_0_SECURE                        0x0
#define G2SB_CTX3_G2CONTROLMAIN_0_WORD_COUNT                    0x1
#define G2SB_CTX3_G2CONTROLMAIN_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_RESET_MASK                    _MK_MASK_CONST(0x7eccffff)
#define G2SB_CTX3_G2CONTROLMAIN_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_READ_MASK                     _MK_MASK_CONST(0x7fffffff)
#define G2SB_CTX3_G2CONTROLMAIN_0_WRITE_MASK                    _MK_MASK_CONST(0x7fffffff)
// Command Type:  00=BitBlt
// 01=Line Draw
// 10=VCAA
// 11=reserved
//  When the raise command is in executing
//  (there are no other outstanding commands with same channel being executed)
#define G2SB_CTX3_G2CONTROLMAIN_0_CMDT_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2CONTROLMAIN_0_CMDT_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX3_G2CONTROLMAIN_0_CMDT_SHIFT)
#define G2SB_CTX3_G2CONTROLMAIN_0_CMDT_RANGE                    1:0
#define G2SB_CTX3_G2CONTROLMAIN_0_CMDT_WOFFSET                  0x0
#define G2SB_CTX3_G2CONTROLMAIN_0_CMDT_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_CMDT_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX3_G2CONTROLMAIN_0_CMDT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_CMDT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_CMDT_BITBLT                   _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLMAIN_0_CMDT_LINEDRAW                 _MK_ENUM_CONST(1)
#define G2SB_CTX3_G2CONTROLMAIN_0_CMDT_VCAA                     _MK_ENUM_CONST(2)
#define G2SB_CTX3_G2CONTROLMAIN_0_CMDT_RESERVED1                        _MK_ENUM_CONST(3)

//fast fill rectangle in 128bit/clock
//Some limitaions with this mode:
//srcsld==1 rop==0xcc, no clipping, no transparency
//xdir==0, ydir==0, flip==0, xytdw==0
//Results are undefined if the above limitations are not satified.
#define G2SB_CTX3_G2CONTROLMAIN_0_TURBOFILL_SHIFT                       _MK_SHIFT_CONST(2)
#define G2SB_CTX3_G2CONTROLMAIN_0_TURBOFILL_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLMAIN_0_TURBOFILL_SHIFT)
#define G2SB_CTX3_G2CONTROLMAIN_0_TURBOFILL_RANGE                       2:2
#define G2SB_CTX3_G2CONTROLMAIN_0_TURBOFILL_WOFFSET                     0x0
#define G2SB_CTX3_G2CONTROLMAIN_0_TURBOFILL_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_TURBOFILL_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLMAIN_0_TURBOFILL_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_TURBOFILL_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//Command finish timing bit 0: 2D command finishs when last data has been pushed to memory write client.
// 1: 2D command waits memory write client to be idle to finish.
#define G2SB_CTX3_G2CONTROLMAIN_0_TEST0BIT_SHIFT                        _MK_SHIFT_CONST(3)
#define G2SB_CTX3_G2CONTROLMAIN_0_TEST0BIT_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLMAIN_0_TEST0BIT_SHIFT)
#define G2SB_CTX3_G2CONTROLMAIN_0_TEST0BIT_RANGE                        3:3
#define G2SB_CTX3_G2CONTROLMAIN_0_TEST0BIT_WOFFSET                      0x0
#define G2SB_CTX3_G2CONTROLMAIN_0_TEST0BIT_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_TEST0BIT_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLMAIN_0_TEST0BIT_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_TEST0BIT_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_TEST0BIT_DISABLE                      _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLMAIN_0_TEST0BIT_ENABLE                       _MK_ENUM_CONST(1)

// BitBlt Source Copy Fade enable, 1=enable (share with mltln), only support
//  16bpp mode
#define G2SB_CTX3_G2CONTROLMAIN_0_FADEN_SHIFT                   _MK_SHIFT_CONST(4)
#define G2SB_CTX3_G2CONTROLMAIN_0_FADEN_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLMAIN_0_FADEN_SHIFT)
#define G2SB_CTX3_G2CONTROLMAIN_0_FADEN_RANGE                   4:4
#define G2SB_CTX3_G2CONTROLMAIN_0_FADEN_WOFFSET                 0x0
#define G2SB_CTX3_G2CONTROLMAIN_0_FADEN_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_FADEN_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLMAIN_0_FADEN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_FADEN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_FADEN_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLMAIN_0_FADEN_ENABLE                  _MK_ENUM_CONST(1)

// BitBlt Alpha Blending, 1=enable. 0=disable,
//when both Faden and alpen are 1, output=Source*alpha_v + fadoff,
// alpha_v is decided by alptype
#define G2SB_CTX3_G2CONTROLMAIN_0_ALPEN_SHIFT                   _MK_SHIFT_CONST(5)
#define G2SB_CTX3_G2CONTROLMAIN_0_ALPEN_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLMAIN_0_ALPEN_SHIFT)
#define G2SB_CTX3_G2CONTROLMAIN_0_ALPEN_RANGE                   5:5
#define G2SB_CTX3_G2CONTROLMAIN_0_ALPEN_WOFFSET                 0x0
#define G2SB_CTX3_G2CONTROLMAIN_0_ALPEN_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_ALPEN_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLMAIN_0_ALPEN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_ALPEN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// BitBlt Solid Source Color Fill: 1=enable. FGC will be used as
// the color value.
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCSLD_SHIFT                  _MK_SHIFT_CONST(6)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCSLD_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLMAIN_0_SRCSLD_SHIFT)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCSLD_RANGE                  6:6
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCSLD_WOFFSET                        0x0
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCSLD_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCSLD_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCSLD_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCSLD_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCSLD_DISABLE                        _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCSLD_ENABLE                 _MK_ENUM_CONST(1)

// BitBlt Solid Pattern Fill: 1=enable. BGC will be used as
// the color value.
#define G2SB_CTX3_G2CONTROLMAIN_0_PATSLD_SHIFT                  _MK_SHIFT_CONST(7)
#define G2SB_CTX3_G2CONTROLMAIN_0_PATSLD_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLMAIN_0_PATSLD_SHIFT)
#define G2SB_CTX3_G2CONTROLMAIN_0_PATSLD_RANGE                  7:7
#define G2SB_CTX3_G2CONTROLMAIN_0_PATSLD_WOFFSET                        0x0
#define G2SB_CTX3_G2CONTROLMAIN_0_PATSLD_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_PATSLD_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLMAIN_0_PATSLD_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_PATSLD_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_PATSLD_DISABLE                        _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLMAIN_0_PATSLD_ENABLE                 _MK_ENUM_CONST(1)

// When mono pattern is set, we use mono tile pattern fill.
//
//  current pattern client can support a 16x16 bit tile which can be used
//  to generate a larger surface (i.e. tile this surface in the x and y direction)
//  The tile is stored in memory.  Currently, PATXO and PATYO tell you where
//  to start in the 16x16 tile when expanding the monochrome data.
//
//  See patxo and patyo comments below for programming (hw bid 247332)
//   When xdir==1
//     Patxo = pattern width - (patxo+destination width)&0xF   -- For xoffsets
//  y offsets PATYO remains the same when xdir/ydir change.
//
//
//  How the tile replication pattern looks based on xdir/ydir (without programming patxo above):
//
//  xdir=0 ydir=0              xdir=1 ydir=0
//
//   +---+--+                  +--+---+
//   |^|^|^||                  ||^|^|^|
//   |~~~|~~|                  |~~|~~~|
//   +---+--|                  |--+---+
//   |^|^|^||                  ||^|^|^|
//   +------+                  +------+
//
//
//   +---+--+                  +--+---+
//   |^|^|^||                  ||^|^|^|
//   |~~~|~~|                  |~~|~~~|
//   +---+--|                  |--+---+
//   |^|^|^||                  ||^|^|^|
//   +------+                  +------+
//    //
//  xdir=0 ydir=1              xdir=1 ydir=1
//
//   Mono tile is
//      +---+
//      |^|^|
//      |~~~|
//      +---+
//
//
#define G2SB_CTX3_G2CONTROLMAIN_0_PATFL_SHIFT                   _MK_SHIFT_CONST(8)
#define G2SB_CTX3_G2CONTROLMAIN_0_PATFL_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLMAIN_0_PATFL_SHIFT)
#define G2SB_CTX3_G2CONTROLMAIN_0_PATFL_RANGE                   8:8
#define G2SB_CTX3_G2CONTROLMAIN_0_PATFL_WOFFSET                 0x0
#define G2SB_CTX3_G2CONTROLMAIN_0_PATFL_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_PATFL_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLMAIN_0_PATFL_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_PATFL_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_PATFL_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLMAIN_0_PATFL_ENABLE                  _MK_ENUM_CONST(1)

//  0=incrementing, 1=decrementing.
//  xdir should not be set when source surface has different color depth as destination surface.
//  e.g. ALPTYPE=PLS8BX (32bpp blending with 16bpp), xdir has to be 0
//  SRCCD==0 (mono src) OR PATCD==0 (mono pat), xdir has to be 0
#define G2SB_CTX3_G2CONTROLMAIN_0_XDIR_SHIFT                    _MK_SHIFT_CONST(9)
#define G2SB_CTX3_G2CONTROLMAIN_0_XDIR_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLMAIN_0_XDIR_SHIFT)
#define G2SB_CTX3_G2CONTROLMAIN_0_XDIR_RANGE                    9:9
#define G2SB_CTX3_G2CONTROLMAIN_0_XDIR_WOFFSET                  0x0
#define G2SB_CTX3_G2CONTROLMAIN_0_XDIR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_XDIR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLMAIN_0_XDIR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_XDIR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//  0=incrementing, 1=decrementing.
//  ydir should not be set when source surface has different color depth as destination surface.
//  SRCCD==0 (mono src) OR PATCD==0 (mono pat), ydir has to be 0
#define G2SB_CTX3_G2CONTROLMAIN_0_YDIR_SHIFT                    _MK_SHIFT_CONST(10)
#define G2SB_CTX3_G2CONTROLMAIN_0_YDIR_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLMAIN_0_YDIR_SHIFT)
#define G2SB_CTX3_G2CONTROLMAIN_0_YDIR_RANGE                    10:10
#define G2SB_CTX3_G2CONTROLMAIN_0_YDIR_WOFFSET                  0x0
#define G2SB_CTX3_G2CONTROLMAIN_0_YDIR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_YDIR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLMAIN_0_YDIR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_YDIR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// xy transpose,
// Line stride DSTS has to be 16bytes aligned if enabled.
// If XYTDW==1, ROP can not include destination.
#define G2SB_CTX3_G2CONTROLMAIN_0_XYTDW_SHIFT                   _MK_SHIFT_CONST(11)
#define G2SB_CTX3_G2CONTROLMAIN_0_XYTDW_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLMAIN_0_XYTDW_SHIFT)
#define G2SB_CTX3_G2CONTROLMAIN_0_XYTDW_RANGE                   11:11
#define G2SB_CTX3_G2CONTROLMAIN_0_XYTDW_WOFFSET                 0x0
#define G2SB_CTX3_G2CONTROLMAIN_0_XYTDW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_XYTDW_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLMAIN_0_XYTDW_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_XYTDW_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Source Data is in Pack Mode.
//  SRCLNGAP in G2SRCPACK is the line gap for source packed mode.
//  If(SRCPACK && ~SRCSEL), source data is packed and from screen, SRCMONOW/SRCMONOH
//  should be programmed properly to fetch data from
//  frame buffer.
//  Note, PACK is not offically supported when the surface is tiled.
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCPACK_SHIFT                 _MK_SHIFT_CONST(12)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCPACK_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLMAIN_0_SRCPACK_SHIFT)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCPACK_RANGE                 12:12
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCPACK_WOFFSET                       0x0
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCPACK_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCPACK_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCPACK_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCPACK_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCPACK_DISABLE                       _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCPACK_ENABLE                        _MK_ENUM_CONST(1)

// Pattern Data is in Pack Mode.
//  PATLNGAP in G2PATPACK is the line gap for pattern packed mode
//  If(PATPACK && ~PATSEl), pattern data is packed and from screen, PATMONOW/PATMONOH
//  should be programmed properly to fetch pattern data from
//  frame buffer.
//  Note, PACK is not offically supported when the surface is tiled.
#define G2SB_CTX3_G2CONTROLMAIN_0_PATPACK_SHIFT                 _MK_SHIFT_CONST(13)
#define G2SB_CTX3_G2CONTROLMAIN_0_PATPACK_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLMAIN_0_PATPACK_SHIFT)
#define G2SB_CTX3_G2CONTROLMAIN_0_PATPACK_RANGE                 13:13
#define G2SB_CTX3_G2CONTROLMAIN_0_PATPACK_WOFFSET                       0x0
#define G2SB_CTX3_G2CONTROLMAIN_0_PATPACK_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_PATPACK_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLMAIN_0_PATPACK_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_PATPACK_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_PATPACK_DISABLE                       _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLMAIN_0_PATPACK_ENABLE                        _MK_ENUM_CONST(1)

// flip y direction to make image upside down or the other way.
// If YFLIP==1, ROP can not include destination.
#define G2SB_CTX3_G2CONTROLMAIN_0_YFLIP_SHIFT                   _MK_SHIFT_CONST(14)
#define G2SB_CTX3_G2CONTROLMAIN_0_YFLIP_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLMAIN_0_YFLIP_SHIFT)
#define G2SB_CTX3_G2CONTROLMAIN_0_YFLIP_RANGE                   14:14
#define G2SB_CTX3_G2CONTROLMAIN_0_YFLIP_WOFFSET                 0x0
#define G2SB_CTX3_G2CONTROLMAIN_0_YFLIP_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_YFLIP_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLMAIN_0_YFLIP_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_YFLIP_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_YFLIP_DSIABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLMAIN_0_YFLIP_ENABLE                  _MK_ENUM_CONST(1)

// Source Data Select:
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCSEL_SHIFT                  _MK_SHIFT_CONST(15)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCSEL_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLMAIN_0_SRCSEL_SHIFT)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCSEL_RANGE                  15:15
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCSEL_WOFFSET                        0x0
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCSEL_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCSEL_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCSEL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCSEL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCSEL_SCREEN                 _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCSEL_MEMORY                 _MK_ENUM_CONST(1)

// Destination color depth:
//   00=8-bpp, 01=16-bpp, 10=32-bpp. 11=reserved
#define G2SB_CTX3_G2CONTROLMAIN_0_DSTCD_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX3_G2CONTROLMAIN_0_DSTCD_FIELD                   (_MK_MASK_CONST(0x3) << G2SB_CTX3_G2CONTROLMAIN_0_DSTCD_SHIFT)
#define G2SB_CTX3_G2CONTROLMAIN_0_DSTCD_RANGE                   17:16
#define G2SB_CTX3_G2CONTROLMAIN_0_DSTCD_WOFFSET                 0x0
#define G2SB_CTX3_G2CONTROLMAIN_0_DSTCD_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_DSTCD_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_DSTCD_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_DSTCD_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_DSTCD_BPP8                    _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLMAIN_0_DSTCD_BPP16                   _MK_ENUM_CONST(1)
#define G2SB_CTX3_G2CONTROLMAIN_0_DSTCD_BPP32                   _MK_ENUM_CONST(2)
#define G2SB_CTX3_G2CONTROLMAIN_0_DSTCD_RESERVED3                       _MK_ENUM_CONST(3)

// Destination read transparency enable:
//   0x=destination read transparency disabled
//   10=color destination read transparency
//   11=inverse color destination read transparency.
// 20 rw INIC
// Initiate Command
// (1=initiate command immediately, 0=wait for launch write)
#define G2SB_CTX3_G2CONTROLMAIN_0_DSTT_SHIFT                    _MK_SHIFT_CONST(18)
#define G2SB_CTX3_G2CONTROLMAIN_0_DSTT_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX3_G2CONTROLMAIN_0_DSTT_SHIFT)
#define G2SB_CTX3_G2CONTROLMAIN_0_DSTT_RANGE                    19:18
#define G2SB_CTX3_G2CONTROLMAIN_0_DSTT_WOFFSET                  0x0
#define G2SB_CTX3_G2CONTROLMAIN_0_DSTT_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_DSTT_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX3_G2CONTROLMAIN_0_DSTT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_DSTT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//0 Source mono
//1 Source has same color depth as destination
//  SRCCD==0 xdir/ydir has to be 0
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCCD_SHIFT                   _MK_SHIFT_CONST(20)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCCD_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLMAIN_0_SRCCD_SHIFT)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCCD_RANGE                   20:20
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCCD_WOFFSET                 0x0
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCCD_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCCD_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCCD_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCCD_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Start from Msb or lsb in byte when mono expansion
// If HLMONO is 1, bit 0 (the lsb) is the first bit
// If HLMONO is 0, bit 7 (the msb) is the first bit
#define G2SB_CTX3_G2CONTROLMAIN_0_HLMONO_SHIFT                  _MK_SHIFT_CONST(21)
#define G2SB_CTX3_G2CONTROLMAIN_0_HLMONO_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLMAIN_0_HLMONO_SHIFT)
#define G2SB_CTX3_G2CONTROLMAIN_0_HLMONO_RANGE                  21:21
#define G2SB_CTX3_G2CONTROLMAIN_0_HLMONO_WOFFSET                        0x0
#define G2SB_CTX3_G2CONTROLMAIN_0_HLMONO_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_HLMONO_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_HLMONO_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_HLMONO_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Source transparency enable: 0x=source transparency disabled,
// 10=mono source background transparency
//    or color source transparency,
// 11=mono source foreground transparency
//    or inverse color source transparency.
// NOTE: When source transparency is enabled and SRCCD==0(mono)
//       SRCBGC!=SRCFGC should be satisfied.
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCT_SHIFT                    _MK_SHIFT_CONST(22)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCT_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX3_G2CONTROLMAIN_0_SRCT_SHIFT)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCT_RANGE                    23:22
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCT_WOFFSET                  0x0
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCT_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCT_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Source base address select:
//  0=srcba, 1=dstba. This is not used for Line Draw and
// if source data comes from host memory.
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCBAS_SHIFT                  _MK_SHIFT_CONST(24)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCBAS_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLMAIN_0_SRCBAS_SHIFT)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCBAS_RANGE                  24:24
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCBAS_WOFFSET                        0x0
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCBAS_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCBAS_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCBAS_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCBAS_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//Display Switching Window Control (GCSW[1:0])
//This parameter controls multi-buffering for Display.
//x0 At end of current command, don't send signal to Display to switch buffer.
//01 two buffers, dstba and dstba_b are used
//11 three buffers, dstba, dstba_b dstba_c are used
#define G2SB_CTX3_G2CONTROLMAIN_0_GCSW_SHIFT                    _MK_SHIFT_CONST(25)
#define G2SB_CTX3_G2CONTROLMAIN_0_GCSW_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX3_G2CONTROLMAIN_0_GCSW_SHIFT)
#define G2SB_CTX3_G2CONTROLMAIN_0_GCSW_RANGE                    26:25
#define G2SB_CTX3_G2CONTROLMAIN_0_GCSW_WOFFSET                  0x0
#define G2SB_CTX3_G2CONTROLMAIN_0_GCSW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_GCSW_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX3_G2CONTROLMAIN_0_GCSW_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_GCSW_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//source direct addressing
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCDIR_SHIFT                  _MK_SHIFT_CONST(27)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCDIR_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLMAIN_0_SRCDIR_SHIFT)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCDIR_RANGE                  27:27
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCDIR_WOFFSET                        0x0
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCDIR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCDIR_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCDIR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_SRCDIR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//destination direct addressing
#define G2SB_CTX3_G2CONTROLMAIN_0_DSTDIR_SHIFT                  _MK_SHIFT_CONST(28)
#define G2SB_CTX3_G2CONTROLMAIN_0_DSTDIR_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLMAIN_0_DSTDIR_SHIFT)
#define G2SB_CTX3_G2CONTROLMAIN_0_DSTDIR_RANGE                  28:28
#define G2SB_CTX3_G2CONTROLMAIN_0_DSTDIR_WOFFSET                        0x0
#define G2SB_CTX3_G2CONTROLMAIN_0_DSTDIR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_DSTDIR_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLMAIN_0_DSTDIR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_DSTDIR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// This feature is not offically supported.
//seperate destination read/write surface address
//0: read/write use DSTBA
//1: read uses SRCBA_B, write uses DSTBA
#define G2SB_CTX3_G2CONTROLMAIN_0_DST_RD_WR_SEP_SHIFT                   _MK_SHIFT_CONST(29)
#define G2SB_CTX3_G2CONTROLMAIN_0_DST_RD_WR_SEP_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLMAIN_0_DST_RD_WR_SEP_SHIFT)
#define G2SB_CTX3_G2CONTROLMAIN_0_DST_RD_WR_SEP_RANGE                   29:29
#define G2SB_CTX3_G2CONTROLMAIN_0_DST_RD_WR_SEP_WOFFSET                 0x0
#define G2SB_CTX3_G2CONTROLMAIN_0_DST_RD_WR_SEP_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_DST_RD_WR_SEP_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLMAIN_0_DST_RD_WR_SEP_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_DST_RD_WR_SEP_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// pattern Data Select: SRCSEL and PATSEL can't be both enabled.
#define G2SB_CTX3_G2CONTROLMAIN_0_PATSEL_SHIFT                  _MK_SHIFT_CONST(30)
#define G2SB_CTX3_G2CONTROLMAIN_0_PATSEL_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CONTROLMAIN_0_PATSEL_SHIFT)
#define G2SB_CTX3_G2CONTROLMAIN_0_PATSEL_RANGE                  30:30
#define G2SB_CTX3_G2CONTROLMAIN_0_PATSEL_WOFFSET                        0x0
#define G2SB_CTX3_G2CONTROLMAIN_0_PATSEL_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_PATSEL_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CONTROLMAIN_0_PATSEL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_PATSEL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CONTROLMAIN_0_PATSEL_SCREEN                 _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CONTROLMAIN_0_PATSEL_MEMORY                 _MK_ENUM_CONST(1)


// Register G2SB_CTX3_G2ROPFADE_0  //{host,2d,index=20}
#define G2SB_CTX3_G2ROPFADE_0                   _MK_ADDR_CONST(0x1020)
#define G2SB_CTX3_G2ROPFADE_0_SECURE                    0x0
#define G2SB_CTX3_G2ROPFADE_0_WORD_COUNT                        0x1
#define G2SB_CTX3_G2ROPFADE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2ROPFADE_0_RESET_MASK                        _MK_MASK_CONST(0xff)
#define G2SB_CTX3_G2ROPFADE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2ROPFADE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2ROPFADE_0_READ_MASK                         _MK_MASK_CONST(0xffff00ff)
#define G2SB_CTX3_G2ROPFADE_0_WRITE_MASK                        _MK_MASK_CONST(0xffff00ff)
//If YFLIP==1 or XYTDW==1, ROP can not include destination.
//Since destination may have been corrupted before reading out.
#define G2SB_CTX3_G2ROPFADE_0_ROP_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2ROPFADE_0_ROP_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX3_G2ROPFADE_0_ROP_SHIFT)
#define G2SB_CTX3_G2ROPFADE_0_ROP_RANGE                 7:0
#define G2SB_CTX3_G2ROPFADE_0_ROP_WOFFSET                       0x0
#define G2SB_CTX3_G2ROPFADE_0_ROP_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2ROPFADE_0_ROP_DEFAULT_MASK                  _MK_MASK_CONST(0xff)
#define G2SB_CTX3_G2ROPFADE_0_ROP_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2ROPFADE_0_ROP_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//
#define G2SB_CTX3_G2ROPFADE_0_FADCOE_SHIFT                      _MK_SHIFT_CONST(16)
#define G2SB_CTX3_G2ROPFADE_0_FADCOE_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX3_G2ROPFADE_0_FADCOE_SHIFT)
#define G2SB_CTX3_G2ROPFADE_0_FADCOE_RANGE                      23:16
#define G2SB_CTX3_G2ROPFADE_0_FADCOE_WOFFSET                    0x0
#define G2SB_CTX3_G2ROPFADE_0_FADCOE_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2ROPFADE_0_FADCOE_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2ROPFADE_0_FADCOE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2ROPFADE_0_FADCOE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

//
#define G2SB_CTX3_G2ROPFADE_0_FADOFF_SHIFT                      _MK_SHIFT_CONST(24)
#define G2SB_CTX3_G2ROPFADE_0_FADOFF_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX3_G2ROPFADE_0_FADOFF_SHIFT)
#define G2SB_CTX3_G2ROPFADE_0_FADOFF_RANGE                      31:24
#define G2SB_CTX3_G2ROPFADE_0_FADOFF_WOFFSET                    0x0
#define G2SB_CTX3_G2ROPFADE_0_FADOFF_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2ROPFADE_0_FADOFF_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2ROPFADE_0_FADOFF_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2ROPFADE_0_FADOFF_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2ALPHABLEND_0  //{2d,index=21}
#define G2SB_CTX3_G2ALPHABLEND_0                        _MK_ADDR_CONST(0x1021)
#define G2SB_CTX3_G2ALPHABLEND_0_SECURE                         0x0
#define G2SB_CTX3_G2ALPHABLEND_0_WORD_COUNT                     0x1
#define G2SB_CTX3_G2ALPHABLEND_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2ALPHABLEND_0_RESET_MASK                     _MK_MASK_CONST(0x100)
#define G2SB_CTX3_G2ALPHABLEND_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2ALPHABLEND_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2ALPHABLEND_0_READ_MASK                      _MK_MASK_CONST(0xffff01ff)
#define G2SB_CTX3_G2ALPHABLEND_0_WRITE_MASK                     _MK_MASK_CONST(0xffff01ff)
#define G2SB_CTX3_G2ALPHABLEND_0_ALPHA_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2ALPHABLEND_0_ALPHA_FIELD                    (_MK_MASK_CONST(0xff) << G2SB_CTX3_G2ALPHABLEND_0_ALPHA_SHIFT)
#define G2SB_CTX3_G2ALPHABLEND_0_ALPHA_RANGE                    7:0
#define G2SB_CTX3_G2ALPHABLEND_0_ALPHA_WOFFSET                  0x0
#define G2SB_CTX3_G2ALPHABLEND_0_ALPHA_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2ALPHABLEND_0_ALPHA_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2ALPHABLEND_0_ALPHA_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2ALPHABLEND_0_ALPHA_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

#define G2SB_CTX3_G2ALPHABLEND_0_ALPHAINV_SHIFT                 _MK_SHIFT_CONST(8)
#define G2SB_CTX3_G2ALPHABLEND_0_ALPHAINV_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2ALPHABLEND_0_ALPHAINV_SHIFT)
#define G2SB_CTX3_G2ALPHABLEND_0_ALPHAINV_RANGE                 8:8
#define G2SB_CTX3_G2ALPHABLEND_0_ALPHAINV_WOFFSET                       0x0
#define G2SB_CTX3_G2ALPHABLEND_0_ALPHAINV_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2ALPHABLEND_0_ALPHAINV_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2ALPHABLEND_0_ALPHAINV_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2ALPHABLEND_0_ALPHAINV_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

#define G2SB_CTX3_G2ALPHABLEND_0_ALPHA0V_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX3_G2ALPHABLEND_0_ALPHA0V_FIELD                  (_MK_MASK_CONST(0xff) << G2SB_CTX3_G2ALPHABLEND_0_ALPHA0V_SHIFT)
#define G2SB_CTX3_G2ALPHABLEND_0_ALPHA0V_RANGE                  23:16
#define G2SB_CTX3_G2ALPHABLEND_0_ALPHA0V_WOFFSET                        0x0
#define G2SB_CTX3_G2ALPHABLEND_0_ALPHA0V_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2ALPHABLEND_0_ALPHA0V_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2ALPHABLEND_0_ALPHA0V_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2ALPHABLEND_0_ALPHA0V_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX3_G2ALPHABLEND_0_ALPHA1V_SHIFT                  _MK_SHIFT_CONST(24)
#define G2SB_CTX3_G2ALPHABLEND_0_ALPHA1V_FIELD                  (_MK_MASK_CONST(0xff) << G2SB_CTX3_G2ALPHABLEND_0_ALPHA1V_SHIFT)
#define G2SB_CTX3_G2ALPHABLEND_0_ALPHA1V_RANGE                  31:24
#define G2SB_CTX3_G2ALPHABLEND_0_ALPHA1V_WOFFSET                        0x0
#define G2SB_CTX3_G2ALPHABLEND_0_ALPHA1V_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2ALPHABLEND_0_ALPHA1V_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2ALPHABLEND_0_ALPHA1V_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2ALPHABLEND_0_ALPHA1V_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// ClipRect Methods
// top-left bounds are inclusive

// Register G2SB_CTX3_G2CLIPLEFTTOP_0  //{2d,index=22}
#define G2SB_CTX3_G2CLIPLEFTTOP_0                       _MK_ADDR_CONST(0x1022)
#define G2SB_CTX3_G2CLIPLEFTTOP_0_SECURE                        0x0
#define G2SB_CTX3_G2CLIPLEFTTOP_0_WORD_COUNT                    0x1
#define G2SB_CTX3_G2CLIPLEFTTOP_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLIPLEFTTOP_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLIPLEFTTOP_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLIPLEFTTOP_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLIPLEFTTOP_0_READ_MASK                     _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX3_G2CLIPLEFTTOP_0_WRITE_MASK                    _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX3_G2CLIPLEFTTOP_0_CLIPL_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2CLIPLEFTTOP_0_CLIPL_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX3_G2CLIPLEFTTOP_0_CLIPL_SHIFT)
#define G2SB_CTX3_G2CLIPLEFTTOP_0_CLIPL_RANGE                   14:0
#define G2SB_CTX3_G2CLIPLEFTTOP_0_CLIPL_WOFFSET                 0x0
#define G2SB_CTX3_G2CLIPLEFTTOP_0_CLIPL_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLIPLEFTTOP_0_CLIPL_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLIPLEFTTOP_0_CLIPL_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLIPLEFTTOP_0_CLIPL_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

#define G2SB_CTX3_G2CLIPLEFTTOP_0_CLIPT_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX3_G2CLIPLEFTTOP_0_CLIPT_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX3_G2CLIPLEFTTOP_0_CLIPT_SHIFT)
#define G2SB_CTX3_G2CLIPLEFTTOP_0_CLIPT_RANGE                   30:16
#define G2SB_CTX3_G2CLIPLEFTTOP_0_CLIPT_WOFFSET                 0x0
#define G2SB_CTX3_G2CLIPLEFTTOP_0_CLIPT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLIPLEFTTOP_0_CLIPT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLIPLEFTTOP_0_CLIPT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLIPLEFTTOP_0_CLIPT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// bottom-right bounds are exclusive

// Register G2SB_CTX3_G2CLIPRIGHTBOT_0  //{2d,index=23}
#define G2SB_CTX3_G2CLIPRIGHTBOT_0                      _MK_ADDR_CONST(0x1023)
#define G2SB_CTX3_G2CLIPRIGHTBOT_0_SECURE                       0x0
#define G2SB_CTX3_G2CLIPRIGHTBOT_0_WORD_COUNT                   0x1
#define G2SB_CTX3_G2CLIPRIGHTBOT_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLIPRIGHTBOT_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLIPRIGHTBOT_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLIPRIGHTBOT_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLIPRIGHTBOT_0_READ_MASK                    _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX3_G2CLIPRIGHTBOT_0_WRITE_MASK                   _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX3_G2CLIPRIGHTBOT_0_CLIPR_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2CLIPRIGHTBOT_0_CLIPR_FIELD                  (_MK_MASK_CONST(0x7fff) << G2SB_CTX3_G2CLIPRIGHTBOT_0_CLIPR_SHIFT)
#define G2SB_CTX3_G2CLIPRIGHTBOT_0_CLIPR_RANGE                  14:0
#define G2SB_CTX3_G2CLIPRIGHTBOT_0_CLIPR_WOFFSET                        0x0
#define G2SB_CTX3_G2CLIPRIGHTBOT_0_CLIPR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLIPRIGHTBOT_0_CLIPR_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLIPRIGHTBOT_0_CLIPR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLIPRIGHTBOT_0_CLIPR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX3_G2CLIPRIGHTBOT_0_CLIPB_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX3_G2CLIPRIGHTBOT_0_CLIPB_FIELD                  (_MK_MASK_CONST(0x7fff) << G2SB_CTX3_G2CLIPRIGHTBOT_0_CLIPB_SHIFT)
#define G2SB_CTX3_G2CLIPRIGHTBOT_0_CLIPB_RANGE                  30:16
#define G2SB_CTX3_G2CLIPRIGHTBOT_0_CLIPB_WOFFSET                        0x0
#define G2SB_CTX3_G2CLIPRIGHTBOT_0_CLIPB_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLIPRIGHTBOT_0_CLIPB_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLIPRIGHTBOT_0_CLIPB_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CLIPRIGHTBOT_0_CLIPB_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//pattern methods
// G2PATPACK should be used to specify the line gap
// use G2PATPACK_SIZE to program height and width
//  PACK is generally only useful with narrow monochrome surfaces
//  Note, PACK is not offically supported when the surface is tiled.

// Register G2SB_CTX3_G2PATPACK_0  //{2d,index=24} Pattern packed mode
#define G2SB_CTX3_G2PATPACK_0                   _MK_ADDR_CONST(0x1024)
#define G2SB_CTX3_G2PATPACK_0_SECURE                    0x0
#define G2SB_CTX3_G2PATPACK_0_WORD_COUNT                        0x1
#define G2SB_CTX3_G2PATPACK_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATPACK_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATPACK_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATPACK_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATPACK_0_READ_MASK                         _MK_MASK_CONST(0xf)
#define G2SB_CTX3_G2PATPACK_0_WRITE_MASK                        _MK_MASK_CONST(0xf)
// Packed mode, pattern data line gap. byte
#define G2SB_CTX3_G2PATPACK_0_PATLNGAP_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2PATPACK_0_PATLNGAP_FIELD                    (_MK_MASK_CONST(0xf) << G2SB_CTX3_G2PATPACK_0_PATLNGAP_SHIFT)
#define G2SB_CTX3_G2PATPACK_0_PATLNGAP_RANGE                    3:0
#define G2SB_CTX3_G2PATPACK_0_PATLNGAP_WOFFSET                  0x0
#define G2SB_CTX3_G2PATPACK_0_PATLNGAP_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATPACK_0_PATLNGAP_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATPACK_0_PATLNGAP_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATPACK_0_PATLNGAP_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// G2PATPACK_SIZE -- extension of G2PATPACK, this register only holds the size of the packed data
//  Note, PACK is not offically supported when the surface is tiled.

// Register G2SB_CTX3_G2PATPACK_SIZE_0  //{2d,index=25} Pattern packed mode
// Packed mode, pattern data line gap. byte
#define G2SB_CTX3_G2PATPACK_SIZE_0                      _MK_ADDR_CONST(0x1025)
#define G2SB_CTX3_G2PATPACK_SIZE_0_SECURE                       0x0
#define G2SB_CTX3_G2PATPACK_SIZE_0_WORD_COUNT                   0x1
#define G2SB_CTX3_G2PATPACK_SIZE_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATPACK_SIZE_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATPACK_SIZE_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATPACK_SIZE_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATPACK_SIZE_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2PATPACK_SIZE_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
// Mono data width in packed mode, byte
#define G2SB_CTX3_G2PATPACK_SIZE_0_PATMONOW_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2PATPACK_SIZE_0_PATMONOW_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_CTX3_G2PATPACK_SIZE_0_PATMONOW_SHIFT)
#define G2SB_CTX3_G2PATPACK_SIZE_0_PATMONOW_RANGE                       15:0
#define G2SB_CTX3_G2PATPACK_SIZE_0_PATMONOW_WOFFSET                     0x0
#define G2SB_CTX3_G2PATPACK_SIZE_0_PATMONOW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATPACK_SIZE_0_PATMONOW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATPACK_SIZE_0_PATMONOW_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATPACK_SIZE_0_PATMONOW_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//  Pattern mono data height in packed mode, byte
#define G2SB_CTX3_G2PATPACK_SIZE_0_PATMONOH_SHIFT                       _MK_SHIFT_CONST(16)
#define G2SB_CTX3_G2PATPACK_SIZE_0_PATMONOH_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_CTX3_G2PATPACK_SIZE_0_PATMONOH_SHIFT)
#define G2SB_CTX3_G2PATPACK_SIZE_0_PATMONOH_RANGE                       31:16
#define G2SB_CTX3_G2PATPACK_SIZE_0_PATMONOH_WOFFSET                     0x0
#define G2SB_CTX3_G2PATPACK_SIZE_0_PATMONOH_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATPACK_SIZE_0_PATMONOH_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATPACK_SIZE_0_PATMONOH_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATPACK_SIZE_0_PATMONOH_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2PATBA_0  //{2d,index=26}
#define G2SB_CTX3_G2PATBA_0                     _MK_ADDR_CONST(0x1026)
#define G2SB_CTX3_G2PATBA_0_SECURE                      0x0
#define G2SB_CTX3_G2PATBA_0_WORD_COUNT                  0x1
#define G2SB_CTX3_G2PATBA_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATBA_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATBA_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATBA_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATBA_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2PATBA_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// If(PATFL==1){
//   It has to be 16bytes aligned.
// }else{
//   Point to the first byte of the first pixel of pattern plane.
// }
#define G2SB_CTX3_G2PATBA_0_PATBA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2PATBA_0_PATBA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX3_G2PATBA_0_PATBA_SHIFT)
#define G2SB_CTX3_G2PATBA_0_PATBA_RANGE                 31:0
#define G2SB_CTX3_G2PATBA_0_PATBA_WOFFSET                       0x0
#define G2SB_CTX3_G2PATBA_0_PATBA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATBA_0_PATBA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATBA_0_PATBA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATBA_0_PATBA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2PATOS_0  //{2d,index=27}
#define G2SB_CTX3_G2PATOS_0                     _MK_ADDR_CONST(0x1027)
#define G2SB_CTX3_G2PATOS_0_SECURE                      0x0
#define G2SB_CTX3_G2PATOS_0_WORD_COUNT                  0x1
#define G2SB_CTX3_G2PATOS_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATOS_0_RESET_MASK                  _MK_MASK_CONST(0x600000)
#define G2SB_CTX3_G2PATOS_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATOS_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATOS_0_READ_MASK                   _MK_MASK_CONST(0xff61ffff)
#define G2SB_CTX3_G2PATOS_0_WRITE_MASK                  _MK_MASK_CONST(0xff61ffff)
//stride
#define G2SB_CTX3_G2PATOS_0_PATST_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2PATOS_0_PATST_FIELD                 (_MK_MASK_CONST(0xffff) << G2SB_CTX3_G2PATOS_0_PATST_SHIFT)
#define G2SB_CTX3_G2PATOS_0_PATST_RANGE                 15:0
#define G2SB_CTX3_G2PATOS_0_PATST_WOFFSET                       0x0
#define G2SB_CTX3_G2PATOS_0_PATST_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATOS_0_PATST_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATOS_0_PATST_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATOS_0_PATST_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//0 mono
//1 same as dstcd
//  PATCD==0 xdir/ydir has to be 0
#define G2SB_CTX3_G2PATOS_0_PATCD_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_CTX3_G2PATOS_0_PATCD_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2PATOS_0_PATCD_SHIFT)
#define G2SB_CTX3_G2PATOS_0_PATCD_RANGE                 16:16
#define G2SB_CTX3_G2PATOS_0_PATCD_WOFFSET                       0x0
#define G2SB_CTX3_G2PATOS_0_PATCD_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATOS_0_PATCD_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATOS_0_PATCD_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATOS_0_PATCD_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Mono pattern transparency enable:
// 0x=pattern transparency disabled,
// 10=mono pattern background transparency
//   or color pattern transparency,
// 11=mono pattern foreground transparency
//   or inverse color pattern transparency.
// NOTE: When pattern transparency is enabled and PATCD==0(mono)
//       PATBGC!=PATFGC should be satisfied.
#define G2SB_CTX3_G2PATOS_0_PATT_SHIFT                  _MK_SHIFT_CONST(21)
#define G2SB_CTX3_G2PATOS_0_PATT_FIELD                  (_MK_MASK_CONST(0x3) << G2SB_CTX3_G2PATOS_0_PATT_SHIFT)
#define G2SB_CTX3_G2PATOS_0_PATT_RANGE                  22:21
#define G2SB_CTX3_G2PATOS_0_PATT_WOFFSET                        0x0
#define G2SB_CTX3_G2PATOS_0_PATT_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATOS_0_PATT_DEFAULT_MASK                   _MK_MASK_CONST(0x3)
#define G2SB_CTX3_G2PATOS_0_PATT_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATOS_0_PATT_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//x offset for mono tile pattern fill.  see PATFL
#define G2SB_CTX3_G2PATOS_0_PATXO_SHIFT                 _MK_SHIFT_CONST(24)
#define G2SB_CTX3_G2PATOS_0_PATXO_FIELD                 (_MK_MASK_CONST(0xf) << G2SB_CTX3_G2PATOS_0_PATXO_SHIFT)
#define G2SB_CTX3_G2PATOS_0_PATXO_RANGE                 27:24
#define G2SB_CTX3_G2PATOS_0_PATXO_WOFFSET                       0x0
#define G2SB_CTX3_G2PATOS_0_PATXO_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATOS_0_PATXO_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATOS_0_PATXO_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATOS_0_PATXO_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//y offset for mono tile pattern fill.  see PATFL
#define G2SB_CTX3_G2PATOS_0_PATYO_SHIFT                 _MK_SHIFT_CONST(28)
#define G2SB_CTX3_G2PATOS_0_PATYO_FIELD                 (_MK_MASK_CONST(0xf) << G2SB_CTX3_G2PATOS_0_PATYO_SHIFT)
#define G2SB_CTX3_G2PATOS_0_PATYO_RANGE                 31:28
#define G2SB_CTX3_G2PATOS_0_PATYO_WOFFSET                       0x0
#define G2SB_CTX3_G2PATOS_0_PATYO_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATOS_0_PATYO_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATOS_0_PATYO_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATOS_0_PATYO_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2PATBGC_0  //{2d,index=28}
#define G2SB_CTX3_G2PATBGC_0                    _MK_ADDR_CONST(0x1028)
#define G2SB_CTX3_G2PATBGC_0_SECURE                     0x0
#define G2SB_CTX3_G2PATBGC_0_WORD_COUNT                         0x1
#define G2SB_CTX3_G2PATBGC_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATBGC_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATBGC_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATBGC_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATBGC_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2PATBGC_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2PATBGC_0_PATBGC_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2PATBGC_0_PATBGC_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX3_G2PATBGC_0_PATBGC_SHIFT)
#define G2SB_CTX3_G2PATBGC_0_PATBGC_RANGE                       31:0
#define G2SB_CTX3_G2PATBGC_0_PATBGC_WOFFSET                     0x0
#define G2SB_CTX3_G2PATBGC_0_PATBGC_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATBGC_0_PATBGC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATBGC_0_PATBGC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATBGC_0_PATBGC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2PATFGC_0  //{2d,index=29}
#define G2SB_CTX3_G2PATFGC_0                    _MK_ADDR_CONST(0x1029)
#define G2SB_CTX3_G2PATFGC_0_SECURE                     0x0
#define G2SB_CTX3_G2PATFGC_0_WORD_COUNT                         0x1
#define G2SB_CTX3_G2PATFGC_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATFGC_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATFGC_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATFGC_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATFGC_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2PATFGC_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2PATFGC_0_PATFGC_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2PATFGC_0_PATFGC_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX3_G2PATFGC_0_PATFGC_SHIFT)
#define G2SB_CTX3_G2PATFGC_0_PATFGC_RANGE                       31:0
#define G2SB_CTX3_G2PATFGC_0_PATFGC_WOFFSET                     0x0
#define G2SB_CTX3_G2PATFGC_0_PATFGC_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATFGC_0_PATFGC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATFGC_0_PATFGC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATFGC_0_PATFGC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2PATKEY_0  //{2d,index=2a}
#define G2SB_CTX3_G2PATKEY_0                    _MK_ADDR_CONST(0x102a)
#define G2SB_CTX3_G2PATKEY_0_SECURE                     0x0
#define G2SB_CTX3_G2PATKEY_0_WORD_COUNT                         0x1
#define G2SB_CTX3_G2PATKEY_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATKEY_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATKEY_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATKEY_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATKEY_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2PATKEY_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2PATKEY_0_PATKEY_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2PATKEY_0_PATKEY_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX3_G2PATKEY_0_PATKEY_SHIFT)
#define G2SB_CTX3_G2PATKEY_0_PATKEY_RANGE                       31:0
#define G2SB_CTX3_G2PATKEY_0_PATKEY_WOFFSET                     0x0
#define G2SB_CTX3_G2PATKEY_0_PATKEY_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATKEY_0_PATKEY_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATKEY_0_PATKEY_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATKEY_0_PATKEY_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2DSTBA_0  //{host,2d,sb,index=2b}
#define G2SB_CTX3_G2DSTBA_0                     _MK_ADDR_CONST(0x102b)
#define G2SB_CTX3_G2DSTBA_0_SECURE                      0x0
#define G2SB_CTX3_G2DSTBA_0_WORD_COUNT                  0x1
#define G2SB_CTX3_G2DSTBA_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2DSTBA_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Destination base address (byte address)
#define G2SB_CTX3_G2DSTBA_0_DSTBA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2DSTBA_0_DSTBA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX3_G2DSTBA_0_DSTBA_SHIFT)
#define G2SB_CTX3_G2DSTBA_0_DSTBA_RANGE                 31:0
#define G2SB_CTX3_G2DSTBA_0_DSTBA_WOFFSET                       0x0
#define G2SB_CTX3_G2DSTBA_0_DSTBA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_0_DSTBA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_0_DSTBA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_0_DSTBA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2DSTBA_B_0  //{host,2d,sb,index=2c}
#define G2SB_CTX3_G2DSTBA_B_0                   _MK_ADDR_CONST(0x102c)
#define G2SB_CTX3_G2DSTBA_B_0_SECURE                    0x0
#define G2SB_CTX3_G2DSTBA_B_0_WORD_COUNT                        0x1
#define G2SB_CTX3_G2DSTBA_B_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_B_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_B_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_B_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_B_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2DSTBA_B_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// Destination base address (byte address)
// only usable in hardware trigger mode by enable gcsw
#define G2SB_CTX3_G2DSTBA_B_0_DSTBA_B_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2DSTBA_B_0_DSTBA_B_FIELD                     (_MK_MASK_CONST(0xffffffff) << G2SB_CTX3_G2DSTBA_B_0_DSTBA_B_SHIFT)
#define G2SB_CTX3_G2DSTBA_B_0_DSTBA_B_RANGE                     31:0
#define G2SB_CTX3_G2DSTBA_B_0_DSTBA_B_WOFFSET                   0x0
#define G2SB_CTX3_G2DSTBA_B_0_DSTBA_B_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_B_0_DSTBA_B_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_B_0_DSTBA_B_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_B_0_DSTBA_B_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2DSTBA_C_0  //{2d,sb,index=2d}
#define G2SB_CTX3_G2DSTBA_C_0                   _MK_ADDR_CONST(0x102d)
#define G2SB_CTX3_G2DSTBA_C_0_SECURE                    0x0
#define G2SB_CTX3_G2DSTBA_C_0_WORD_COUNT                        0x1
#define G2SB_CTX3_G2DSTBA_C_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_C_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_C_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_C_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_C_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2DSTBA_C_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// Destination base address (byte address)
#define G2SB_CTX3_G2DSTBA_C_0_DSTBA_C_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2DSTBA_C_0_DSTBA_C_FIELD                     (_MK_MASK_CONST(0xffffffff) << G2SB_CTX3_G2DSTBA_C_0_DSTBA_C_SHIFT)
#define G2SB_CTX3_G2DSTBA_C_0_DSTBA_C_RANGE                     31:0
#define G2SB_CTX3_G2DSTBA_C_0_DSTBA_C_WOFFSET                   0x0
#define G2SB_CTX3_G2DSTBA_C_0_DSTBA_C_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_C_0_DSTBA_C_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_C_0_DSTBA_C_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_C_0_DSTBA_C_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2DSTST_0  //{host,2d,sb,sbm,index=2e}
#define G2SB_CTX3_G2DSTST_0                     _MK_ADDR_CONST(0x102e)
#define G2SB_CTX3_G2DSTST_0_SECURE                      0x0
#define G2SB_CTX3_G2DSTST_0_WORD_COUNT                  0x1
#define G2SB_CTX3_G2DSTST_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTST_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTST_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTST_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTST_0_READ_MASK                   _MK_MASK_CONST(0xffff)
#define G2SB_CTX3_G2DSTST_0_WRITE_MASK                  _MK_MASK_CONST(0xffff)
// Destination Stride coordinate(bytes) with respect to DSTBA.
#define G2SB_CTX3_G2DSTST_0_DSTS_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2DSTST_0_DSTS_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX3_G2DSTST_0_DSTS_SHIFT)
#define G2SB_CTX3_G2DSTST_0_DSTS_RANGE                  15:0
#define G2SB_CTX3_G2DSTST_0_DSTS_WOFFSET                        0x0
#define G2SB_CTX3_G2DSTST_0_DSTS_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTST_0_DSTS_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTST_0_DSTS_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTST_0_DSTS_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Surface methods
// G2SRCPACK should only be used to specify the line gap
// use G2SRCPACK_SIZE to program height and width

// Register G2SB_CTX3_G2SRCPACK_0  //{2d,index=2f} source data packed mode
#define G2SB_CTX3_G2SRCPACK_0                   _MK_ADDR_CONST(0x102f)
#define G2SB_CTX3_G2SRCPACK_0_SECURE                    0x0
#define G2SB_CTX3_G2SRCPACK_0_WORD_COUNT                        0x1
#define G2SB_CTX3_G2SRCPACK_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCPACK_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCPACK_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCPACK_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCPACK_0_READ_MASK                         _MK_MASK_CONST(0xf)
#define G2SB_CTX3_G2SRCPACK_0_WRITE_MASK                        _MK_MASK_CONST(0xf)
// Packed mode - source mono data line gap
#define G2SB_CTX3_G2SRCPACK_0_SRCLNGAP_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2SRCPACK_0_SRCLNGAP_FIELD                    (_MK_MASK_CONST(0xf) << G2SB_CTX3_G2SRCPACK_0_SRCLNGAP_SHIFT)
#define G2SB_CTX3_G2SRCPACK_0_SRCLNGAP_RANGE                    3:0
#define G2SB_CTX3_G2SRCPACK_0_SRCLNGAP_WOFFSET                  0x0
#define G2SB_CTX3_G2SRCPACK_0_SRCLNGAP_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCPACK_0_SRCLNGAP_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCPACK_0_SRCLNGAP_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCPACK_0_SRCLNGAP_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// G2SRCPACKS_SIZE -- extension of G2SRCPACK, this register only holds the size of the packed data

// Register G2SB_CTX3_G2SRCPACK_SIZE_0  //{2d,index=30} source data packed mode
// In packed mode, SRCMONOW holds the horizontal size (bytes).
// If MONOH > 1, it is required width/stride be 16 byte aligned.
// Packed mode - source mono data line gap
#define G2SB_CTX3_G2SRCPACK_SIZE_0                      _MK_ADDR_CONST(0x1030)
#define G2SB_CTX3_G2SRCPACK_SIZE_0_SECURE                       0x0
#define G2SB_CTX3_G2SRCPACK_SIZE_0_WORD_COUNT                   0x1
#define G2SB_CTX3_G2SRCPACK_SIZE_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCPACK_SIZE_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCPACK_SIZE_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCPACK_SIZE_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCPACK_SIZE_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2SRCPACK_SIZE_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
// Packed mode - source mono data width in bytes
#define G2SB_CTX3_G2SRCPACK_SIZE_0_SRCMONOW_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2SRCPACK_SIZE_0_SRCMONOW_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_CTX3_G2SRCPACK_SIZE_0_SRCMONOW_SHIFT)
#define G2SB_CTX3_G2SRCPACK_SIZE_0_SRCMONOW_RANGE                       15:0
#define G2SB_CTX3_G2SRCPACK_SIZE_0_SRCMONOW_WOFFSET                     0x0
#define G2SB_CTX3_G2SRCPACK_SIZE_0_SRCMONOW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCPACK_SIZE_0_SRCMONOW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCPACK_SIZE_0_SRCMONOW_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCPACK_SIZE_0_SRCMONOW_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Packed mode - source mono data height in bytes
#define G2SB_CTX3_G2SRCPACK_SIZE_0_SRCMONOH_SHIFT                       _MK_SHIFT_CONST(16)
#define G2SB_CTX3_G2SRCPACK_SIZE_0_SRCMONOH_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_CTX3_G2SRCPACK_SIZE_0_SRCMONOH_SHIFT)
#define G2SB_CTX3_G2SRCPACK_SIZE_0_SRCMONOH_RANGE                       31:16
#define G2SB_CTX3_G2SRCPACK_SIZE_0_SRCMONOH_WOFFSET                     0x0
#define G2SB_CTX3_G2SRCPACK_SIZE_0_SRCMONOH_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCPACK_SIZE_0_SRCMONOH_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCPACK_SIZE_0_SRCMONOH_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCPACK_SIZE_0_SRCMONOH_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2SRCBA_0  //{host,2d,sb,index=31}
//src base address
#define G2SB_CTX3_G2SRCBA_0                     _MK_ADDR_CONST(0x1031)
#define G2SB_CTX3_G2SRCBA_0_SECURE                      0x0
#define G2SB_CTX3_G2SRCBA_0_WORD_COUNT                  0x1
#define G2SB_CTX3_G2SRCBA_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCBA_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCBA_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCBA_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCBA_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2SRCBA_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Source base address (byte address)
#define G2SB_CTX3_G2SRCBA_0_SRCBA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2SRCBA_0_SRCBA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX3_G2SRCBA_0_SRCBA_SHIFT)
#define G2SB_CTX3_G2SRCBA_0_SRCBA_RANGE                 31:0
#define G2SB_CTX3_G2SRCBA_0_SRCBA_WOFFSET                       0x0
#define G2SB_CTX3_G2SRCBA_0_SRCBA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCBA_0_SRCBA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCBA_0_SRCBA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCBA_0_SRCBA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2SRCBA_B_0  //{2d,sb,index=32}
//SB only
#define G2SB_CTX3_G2SRCBA_B_0                   _MK_ADDR_CONST(0x1032)
#define G2SB_CTX3_G2SRCBA_B_0_SECURE                    0x0
#define G2SB_CTX3_G2SRCBA_B_0_WORD_COUNT                        0x1
#define G2SB_CTX3_G2SRCBA_B_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCBA_B_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCBA_B_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCBA_B_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCBA_B_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2SRCBA_B_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
//This parameter specifies the start address of source image
// stored in the image buffer memory. In 4:2:0
//format mode, this image block accommodates for Y-image.
//This address specifies byte-position, however, bits [2:0]
// are restricted with respect to the data formats to fit
//multiple pixels in one memory word (8 bytes),. For example,
// {0, 4} for any YcrCb formats, {0, 2, 4, 6} for
//RGB 16-bit format.  Since one Y pixel takes 8-bit, all
// 8 byte-positions are valid in 4:2:0 mode. (Unlike
//multiplexed pixels format, there is no restrictions on this value.)
#define G2SB_CTX3_G2SRCBA_B_0_SRCBA_B_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2SRCBA_B_0_SRCBA_B_FIELD                     (_MK_MASK_CONST(0xffffffff) << G2SB_CTX3_G2SRCBA_B_0_SRCBA_B_SHIFT)
#define G2SB_CTX3_G2SRCBA_B_0_SRCBA_B_RANGE                     31:0
#define G2SB_CTX3_G2SRCBA_B_0_SRCBA_B_WOFFSET                   0x0
#define G2SB_CTX3_G2SRCBA_B_0_SRCBA_B_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCBA_B_0_SRCBA_B_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCBA_B_0_SRCBA_B_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCBA_B_0_SRCBA_B_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2SRCST_0  //{host,2d,sb,sbm,index=33}
#define G2SB_CTX3_G2SRCST_0                     _MK_ADDR_CONST(0x1033)
#define G2SB_CTX3_G2SRCST_0_SECURE                      0x0
#define G2SB_CTX3_G2SRCST_0_WORD_COUNT                  0x1
#define G2SB_CTX3_G2SRCST_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCST_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCST_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCST_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCST_0_READ_MASK                   _MK_MASK_CONST(0xffff)
#define G2SB_CTX3_G2SRCST_0_WRITE_MASK                  _MK_MASK_CONST(0xffff)
// Source Stride coordinate(bytes) with respect to SRCBA.
//In order to fit multiple pixels in one memory word (8 bytes),
//  bits [2:0] are restricted with respect to the
//data formats. For example, {0, 4} for any YcrCb formats,
//  {0, 2, 4, 6} for RGB 16-bit format.
#define G2SB_CTX3_G2SRCST_0_SRCS_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2SRCST_0_SRCS_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX3_G2SRCST_0_SRCS_SHIFT)
#define G2SB_CTX3_G2SRCST_0_SRCS_RANGE                  15:0
#define G2SB_CTX3_G2SRCST_0_SRCS_WOFFSET                        0x0
#define G2SB_CTX3_G2SRCST_0_SRCS_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCST_0_SRCS_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCST_0_SRCS_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCST_0_SRCS_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//srcColors

// Register G2SB_CTX3_G2SRCBGC_0  //{2d,index=34}
#define G2SB_CTX3_G2SRCBGC_0                    _MK_ADDR_CONST(0x1034)
#define G2SB_CTX3_G2SRCBGC_0_SECURE                     0x0
#define G2SB_CTX3_G2SRCBGC_0_WORD_COUNT                         0x1
#define G2SB_CTX3_G2SRCBGC_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCBGC_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCBGC_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCBGC_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCBGC_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2SRCBGC_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2SRCBGC_0_SRCBGC_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2SRCBGC_0_SRCBGC_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX3_G2SRCBGC_0_SRCBGC_SHIFT)
#define G2SB_CTX3_G2SRCBGC_0_SRCBGC_RANGE                       31:0
#define G2SB_CTX3_G2SRCBGC_0_SRCBGC_WOFFSET                     0x0
#define G2SB_CTX3_G2SRCBGC_0_SRCBGC_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCBGC_0_SRCBGC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCBGC_0_SRCBGC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCBGC_0_SRCBGC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2SRCFGC_0  //{host,2d,index=35}
#define G2SB_CTX3_G2SRCFGC_0                    _MK_ADDR_CONST(0x1035)
#define G2SB_CTX3_G2SRCFGC_0_SECURE                     0x0
#define G2SB_CTX3_G2SRCFGC_0_WORD_COUNT                         0x1
#define G2SB_CTX3_G2SRCFGC_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCFGC_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCFGC_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCFGC_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCFGC_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2SRCFGC_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2SRCFGC_0_SRCFGC_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2SRCFGC_0_SRCFGC_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX3_G2SRCFGC_0_SRCFGC_SHIFT)
#define G2SB_CTX3_G2SRCFGC_0_SRCFGC_RANGE                       31:0
#define G2SB_CTX3_G2SRCFGC_0_SRCFGC_WOFFSET                     0x0
#define G2SB_CTX3_G2SRCFGC_0_SRCFGC_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCFGC_0_SRCFGC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCFGC_0_SRCFGC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCFGC_0_SRCFGC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2SRCKEY_0  //{2d,index=36}
#define G2SB_CTX3_G2SRCKEY_0                    _MK_ADDR_CONST(0x1036)
#define G2SB_CTX3_G2SRCKEY_0_SECURE                     0x0
#define G2SB_CTX3_G2SRCKEY_0_WORD_COUNT                         0x1
#define G2SB_CTX3_G2SRCKEY_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCKEY_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCKEY_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCKEY_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCKEY_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2SRCKEY_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2SRCKEY_0_SRCKEY_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2SRCKEY_0_SRCKEY_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX3_G2SRCKEY_0_SRCKEY_SHIFT)
#define G2SB_CTX3_G2SRCKEY_0_SRCKEY_RANGE                       31:0
#define G2SB_CTX3_G2SRCKEY_0_SRCKEY_WOFFSET                     0x0
#define G2SB_CTX3_G2SRCKEY_0_SRCKEY_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCKEY_0_SRCKEY_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCKEY_0_SRCKEY_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCKEY_0_SRCKEY_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// for sc15, SRCWIDTH bit 14 must be set to 0. (limit of 16383 pixels)

// Register G2SB_CTX3_G2SRCSIZE_0  //{host,2d,sb,sbm,index=37}
#define G2SB_CTX3_G2SRCSIZE_0                   _MK_ADDR_CONST(0x1037)
#define G2SB_CTX3_G2SRCSIZE_0_SECURE                    0x0
#define G2SB_CTX3_G2SRCSIZE_0_WORD_COUNT                        0x1
#define G2SB_CTX3_G2SRCSIZE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCSIZE_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCSIZE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCSIZE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCSIZE_0_READ_MASK                         _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX3_G2SRCSIZE_0_WRITE_MASK                        _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX3_G2SRCSIZE_0_SRCWIDTH_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2SRCSIZE_0_SRCWIDTH_FIELD                    (_MK_MASK_CONST(0x7fff) << G2SB_CTX3_G2SRCSIZE_0_SRCWIDTH_SHIFT)
#define G2SB_CTX3_G2SRCSIZE_0_SRCWIDTH_RANGE                    14:0
#define G2SB_CTX3_G2SRCSIZE_0_SRCWIDTH_WOFFSET                  0x0
#define G2SB_CTX3_G2SRCSIZE_0_SRCWIDTH_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCSIZE_0_SRCWIDTH_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCSIZE_0_SRCWIDTH_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCSIZE_0_SRCWIDTH_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// In SB mode, number of lines - 1
// In 2D mode, actual lines
#define G2SB_CTX3_G2SRCSIZE_0_SRCHEIGHT_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX3_G2SRCSIZE_0_SRCHEIGHT_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX3_G2SRCSIZE_0_SRCHEIGHT_SHIFT)
#define G2SB_CTX3_G2SRCSIZE_0_SRCHEIGHT_RANGE                   30:16
#define G2SB_CTX3_G2SRCSIZE_0_SRCHEIGHT_WOFFSET                 0x0
#define G2SB_CTX3_G2SRCSIZE_0_SRCHEIGHT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCSIZE_0_SRCHEIGHT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCSIZE_0_SRCHEIGHT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCSIZE_0_SRCHEIGHT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2DSTSIZE_0  //{host,2d,sb,sbm,index=38}
#define G2SB_CTX3_G2DSTSIZE_0                   _MK_ADDR_CONST(0x1038)
#define G2SB_CTX3_G2DSTSIZE_0_SECURE                    0x0
#define G2SB_CTX3_G2DSTSIZE_0_WORD_COUNT                        0x1
#define G2SB_CTX3_G2DSTSIZE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTSIZE_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTSIZE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTSIZE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTSIZE_0_READ_MASK                         _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX3_G2DSTSIZE_0_WRITE_MASK                        _MK_MASK_CONST(0x7fff7fff)
// In 2D mode, the largest number can be programmed is 0x7fef
#define G2SB_CTX3_G2DSTSIZE_0_DSTWIDTH_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2DSTSIZE_0_DSTWIDTH_FIELD                    (_MK_MASK_CONST(0x7fff) << G2SB_CTX3_G2DSTSIZE_0_DSTWIDTH_SHIFT)
#define G2SB_CTX3_G2DSTSIZE_0_DSTWIDTH_RANGE                    14:0
#define G2SB_CTX3_G2DSTSIZE_0_DSTWIDTH_WOFFSET                  0x0
#define G2SB_CTX3_G2DSTSIZE_0_DSTWIDTH_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTSIZE_0_DSTWIDTH_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTSIZE_0_DSTWIDTH_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTSIZE_0_DSTWIDTH_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// In SB mode, number of lines - 1
// In 2D mode, actual lines
#define G2SB_CTX3_G2DSTSIZE_0_DSTHEIGHT_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX3_G2DSTSIZE_0_DSTHEIGHT_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX3_G2DSTSIZE_0_DSTHEIGHT_SHIFT)
#define G2SB_CTX3_G2DSTSIZE_0_DSTHEIGHT_RANGE                   30:16
#define G2SB_CTX3_G2DSTSIZE_0_DSTHEIGHT_WOFFSET                 0x0
#define G2SB_CTX3_G2DSTSIZE_0_DSTHEIGHT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTSIZE_0_DSTHEIGHT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTSIZE_0_DSTHEIGHT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTSIZE_0_DSTHEIGHT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// ImageBlit Methods

// Register G2SB_CTX3_G2SRCPS_0  //{host,2d,index=39}
#define G2SB_CTX3_G2SRCPS_0                     _MK_ADDR_CONST(0x1039)
#define G2SB_CTX3_G2SRCPS_0_SECURE                      0x0
#define G2SB_CTX3_G2SRCPS_0_WORD_COUNT                  0x1
#define G2SB_CTX3_G2SRCPS_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCPS_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCPS_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCPS_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCPS_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2SRCPS_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
//SRCX[2:0] are ignored in SRCCD==0 (mono expansion),
//The first bit of the first byte (bit7 if HLMONO==0, or bit0 if HLMONO==1) always
//expand to DSTX,DSTY
#define G2SB_CTX3_G2SRCPS_0_SRCX_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2SRCPS_0_SRCX_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX3_G2SRCPS_0_SRCX_SHIFT)
#define G2SB_CTX3_G2SRCPS_0_SRCX_RANGE                  15:0
#define G2SB_CTX3_G2SRCPS_0_SRCX_WOFFSET                        0x0
#define G2SB_CTX3_G2SRCPS_0_SRCX_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCPS_0_SRCX_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCPS_0_SRCX_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCPS_0_SRCX_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX3_G2SRCPS_0_SRCY_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX3_G2SRCPS_0_SRCY_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX3_G2SRCPS_0_SRCY_SHIFT)
#define G2SB_CTX3_G2SRCPS_0_SRCY_RANGE                  31:16
#define G2SB_CTX3_G2SRCPS_0_SRCY_WOFFSET                        0x0
#define G2SB_CTX3_G2SRCPS_0_SRCY_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCPS_0_SRCY_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCPS_0_SRCY_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCPS_0_SRCY_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2DSTPS_0  //{host,2d,index=3a}
#define G2SB_CTX3_G2DSTPS_0                     _MK_ADDR_CONST(0x103a)
#define G2SB_CTX3_G2DSTPS_0_SECURE                      0x0
#define G2SB_CTX3_G2DSTPS_0_WORD_COUNT                  0x1
#define G2SB_CTX3_G2DSTPS_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTPS_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTPS_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTPS_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTPS_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2DSTPS_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// NOTE: when ALPTYPE is PL1BPP, DSTX[2:0] must be zero, see bug 344489
// NOTE: when ALPTYPE is PL2BPP, DSTX[1:0] must be zero, see bug 344489
// NOTE: when ALPTYPE is PL4BPP, DSTX[0:0] must be zero, see bug 344489
#define G2SB_CTX3_G2DSTPS_0_DSTX_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2DSTPS_0_DSTX_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX3_G2DSTPS_0_DSTX_SHIFT)
#define G2SB_CTX3_G2DSTPS_0_DSTX_RANGE                  15:0
#define G2SB_CTX3_G2DSTPS_0_DSTX_WOFFSET                        0x0
#define G2SB_CTX3_G2DSTPS_0_DSTX_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTPS_0_DSTX_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTPS_0_DSTX_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTPS_0_DSTX_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX3_G2DSTPS_0_DSTY_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX3_G2DSTPS_0_DSTY_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX3_G2DSTPS_0_DSTY_SHIFT)
#define G2SB_CTX3_G2DSTPS_0_DSTY_RANGE                  31:16
#define G2SB_CTX3_G2DSTPS_0_DSTY_WOFFSET                        0x0
#define G2SB_CTX3_G2DSTPS_0_DSTY_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTPS_0_DSTY_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTPS_0_DSTY_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTPS_0_DSTY_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// circular buffer

// Register G2SB_CTX3_G2CBDES_0  // {host,2d,sb,index=3b}
#define G2SB_CTX3_G2CBDES_0                     _MK_ADDR_CONST(0x103b)
#define G2SB_CTX3_G2CBDES_0_SECURE                      0x0
#define G2SB_CTX3_G2CBDES_0_WORD_COUNT                  0x1
#define G2SB_CTX3_G2CBDES_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBDES_0_RESET_MASK                  _MK_MASK_CONST(0x80000000)
#define G2SB_CTX3_G2CBDES_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBDES_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBDES_0_READ_MASK                   _MK_MASK_CONST(0xffff00ff)
#define G2SB_CTX3_G2CBDES_0_WRITE_MASK                  _MK_MASK_CONST(0xffff00ff)
// This specifies the number of buffers in
//circular buffer feature
#define G2SB_CTX3_G2CBDES_0_CBCOUNT_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2CBDES_0_CBCOUNT_FIELD                       (_MK_MASK_CONST(0xff) << G2SB_CTX3_G2CBDES_0_CBCOUNT_SHIFT)
#define G2SB_CTX3_G2CBDES_0_CBCOUNT_RANGE                       7:0
#define G2SB_CTX3_G2CBDES_0_CBCOUNT_WOFFSET                     0x0
#define G2SB_CTX3_G2CBDES_0_CBCOUNT_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBDES_0_CBCOUNT_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBDES_0_CBCOUNT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBDES_0_CBCOUNT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//vertical line number in one buffer
#define G2SB_CTX3_G2CBDES_0_CBLINE_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_CTX3_G2CBDES_0_CBLINE_FIELD                        (_MK_MASK_CONST(0x7fff) << G2SB_CTX3_G2CBDES_0_CBLINE_SHIFT)
#define G2SB_CTX3_G2CBDES_0_CBLINE_RANGE                        30:16
#define G2SB_CTX3_G2CBDES_0_CBLINE_WOFFSET                      0x0
#define G2SB_CTX3_G2CBDES_0_CBLINE_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBDES_0_CBLINE_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBDES_0_CBLINE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBDES_0_CBLINE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

//top clipping at the first buffer, (buffer start)
// refer to TOP_CBLINE in G2CBDES2 0= disable
#define G2SB_CTX3_G2CBDES_0_TOPCLIP_SHIFT                       _MK_SHIFT_CONST(31)
#define G2SB_CTX3_G2CBDES_0_TOPCLIP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2CBDES_0_TOPCLIP_SHIFT)
#define G2SB_CTX3_G2CBDES_0_TOPCLIP_RANGE                       31:31
#define G2SB_CTX3_G2CBDES_0_TOPCLIP_WOFFSET                     0x0
#define G2SB_CTX3_G2CBDES_0_TOPCLIP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBDES_0_TOPCLIP_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2CBDES_0_TOPCLIP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBDES_0_TOPCLIP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBDES_0_TOPCLIP_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CBDES_0_TOPCLIP_ENABLE                      _MK_ENUM_CONST(1)


// Register G2SB_CTX3_G2CBSTRIDE_0  // {host,2d,sb,index=3c}
#define G2SB_CTX3_G2CBSTRIDE_0                  _MK_ADDR_CONST(0x103c)
#define G2SB_CTX3_G2CBSTRIDE_0_SECURE                   0x0
#define G2SB_CTX3_G2CBSTRIDE_0_WORD_COUNT                       0x1
#define G2SB_CTX3_G2CBSTRIDE_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBSTRIDE_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBSTRIDE_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBSTRIDE_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBSTRIDE_0_READ_MASK                        _MK_MASK_CONST(0xc0ffffff)
#define G2SB_CTX3_G2CBSTRIDE_0_WRITE_MASK                       _MK_MASK_CONST(0xc0ffffff)
// Video Buffer Luma(or RGB) Buffer Stride
//  This is luma buffer stride (in bytes)
#define G2SB_CTX3_G2CBSTRIDE_0_CBSTRIDE_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2CBSTRIDE_0_CBSTRIDE_FIELD                   (_MK_MASK_CONST(0xffffff) << G2SB_CTX3_G2CBSTRIDE_0_CBSTRIDE_SHIFT)
#define G2SB_CTX3_G2CBSTRIDE_0_CBSTRIDE_RANGE                   23:0
#define G2SB_CTX3_G2CBSTRIDE_0_CBSTRIDE_WOFFSET                 0x0
#define G2SB_CTX3_G2CBSTRIDE_0_CBSTRIDE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBSTRIDE_0_CBSTRIDE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBSTRIDE_0_CBSTRIDE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBSTRIDE_0_CBSTRIDE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Chroma Buffer Stride default is half of luma
//   00= 1/2 of Luma Buffer Stride; in this
//       case, Luma Buffer Stride should be
//       multiple of 2 bytes.
//   01= Equal to Luma Buffer Stride
//   10= 1/4 of Luma Buffer Stride; in this
//       case, Luma Buffer Stride should be
//       multiple of 4 bytes.
//   1x= Reserved
#define G2SB_CTX3_G2CBSTRIDE_0_CBUVSTRIDE_SHIFT                 _MK_SHIFT_CONST(30)
#define G2SB_CTX3_G2CBSTRIDE_0_CBUVSTRIDE_FIELD                 (_MK_MASK_CONST(0x3) << G2SB_CTX3_G2CBSTRIDE_0_CBUVSTRIDE_SHIFT)
#define G2SB_CTX3_G2CBSTRIDE_0_CBUVSTRIDE_RANGE                 31:30
#define G2SB_CTX3_G2CBSTRIDE_0_CBUVSTRIDE_WOFFSET                       0x0
#define G2SB_CTX3_G2CBSTRIDE_0_CBUVSTRIDE_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBSTRIDE_0_CBUVSTRIDE_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBSTRIDE_0_CBUVSTRIDE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBSTRIDE_0_CBUVSTRIDE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBSTRIDE_0_CBUVSTRIDE_CBS2X                 _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2CBSTRIDE_0_CBUVSTRIDE_CBS1X                 _MK_ENUM_CONST(1)
#define G2SB_CTX3_G2CBSTRIDE_0_CBUVSTRIDE_CBS4X                 _MK_ENUM_CONST(2)

//Line Methods

// Register G2SB_CTX3_G2LINESETTING_0  //{2d,index=3d}
#define G2SB_CTX3_G2LINESETTING_0                       _MK_ADDR_CONST(0x103d)
#define G2SB_CTX3_G2LINESETTING_0_SECURE                        0x0
#define G2SB_CTX3_G2LINESETTING_0_WORD_COUNT                    0x1
#define G2SB_CTX3_G2LINESETTING_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINESETTING_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINESETTING_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINESETTING_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINESETTING_0_READ_MASK                     _MK_MASK_CONST(0xff1fffff)
#define G2SB_CTX3_G2LINESETTING_0_WRITE_MASK                    _MK_MASK_CONST(0xff1fffff)
#define G2SB_CTX3_G2LINESETTING_0_GAMMA_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2LINESETTING_0_GAMMA_FIELD                   (_MK_MASK_CONST(0x1fffff) << G2SB_CTX3_G2LINESETTING_0_GAMMA_SHIFT)
#define G2SB_CTX3_G2LINESETTING_0_GAMMA_RANGE                   20:0
#define G2SB_CTX3_G2LINESETTING_0_GAMMA_WOFFSET                 0x0
#define G2SB_CTX3_G2LINESETTING_0_GAMMA_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINESETTING_0_GAMMA_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINESETTING_0_GAMMA_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINESETTING_0_GAMMA_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

//0:xmajor 1: y major
#define G2SB_CTX3_G2LINESETTING_0_MAJOR_SHIFT                   _MK_SHIFT_CONST(24)
#define G2SB_CTX3_G2LINESETTING_0_MAJOR_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2LINESETTING_0_MAJOR_SHIFT)
#define G2SB_CTX3_G2LINESETTING_0_MAJOR_RANGE                   24:24
#define G2SB_CTX3_G2LINESETTING_0_MAJOR_WOFFSET                 0x0
#define G2SB_CTX3_G2LINESETTING_0_MAJOR_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINESETTING_0_MAJOR_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINESETTING_0_MAJOR_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINESETTING_0_MAJOR_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINESETTING_0_MAJOR_XMAJOR                  _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2LINESETTING_0_MAJOR_YMAJOR                  _MK_ENUM_CONST(1)

#define G2SB_CTX3_G2LINESETTING_0_LINEXDIR_SHIFT                        _MK_SHIFT_CONST(25)
#define G2SB_CTX3_G2LINESETTING_0_LINEXDIR_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2LINESETTING_0_LINEXDIR_SHIFT)
#define G2SB_CTX3_G2LINESETTING_0_LINEXDIR_RANGE                        25:25
#define G2SB_CTX3_G2LINESETTING_0_LINEXDIR_WOFFSET                      0x0
#define G2SB_CTX3_G2LINESETTING_0_LINEXDIR_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINESETTING_0_LINEXDIR_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINESETTING_0_LINEXDIR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINESETTING_0_LINEXDIR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

#define G2SB_CTX3_G2LINESETTING_0_LINEYDIR_SHIFT                        _MK_SHIFT_CONST(26)
#define G2SB_CTX3_G2LINESETTING_0_LINEYDIR_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2LINESETTING_0_LINEYDIR_SHIFT)
#define G2SB_CTX3_G2LINESETTING_0_LINEYDIR_RANGE                        26:26
#define G2SB_CTX3_G2LINESETTING_0_LINEYDIR_WOFFSET                      0x0
#define G2SB_CTX3_G2LINESETTING_0_LINEYDIR_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINESETTING_0_LINEYDIR_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINESETTING_0_LINEYDIR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINESETTING_0_LINEYDIR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

//draw last pixel or not
#define G2SB_CTX3_G2LINESETTING_0_DROPLASTP_SHIFT                       _MK_SHIFT_CONST(27)
#define G2SB_CTX3_G2LINESETTING_0_DROPLASTP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2LINESETTING_0_DROPLASTP_SHIFT)
#define G2SB_CTX3_G2LINESETTING_0_DROPLASTP_RANGE                       27:27
#define G2SB_CTX3_G2LINESETTING_0_DROPLASTP_WOFFSET                     0x0
#define G2SB_CTX3_G2LINESETTING_0_DROPLASTP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINESETTING_0_DROPLASTP_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINESETTING_0_DROPLASTP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINESETTING_0_DROPLASTP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//use OCTANTS in G2LINEDELTAN register instead of MAJOR LINEXDIR LINEYDIR
#define G2SB_CTX3_G2LINESETTING_0_LINEUSEOCTANT_SHIFT                   _MK_SHIFT_CONST(28)
#define G2SB_CTX3_G2LINESETTING_0_LINEUSEOCTANT_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2LINESETTING_0_LINEUSEOCTANT_SHIFT)
#define G2SB_CTX3_G2LINESETTING_0_LINEUSEOCTANT_RANGE                   28:28
#define G2SB_CTX3_G2LINESETTING_0_LINEUSEOCTANT_WOFFSET                 0x0
#define G2SB_CTX3_G2LINESETTING_0_LINEUSEOCTANT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINESETTING_0_LINEUSEOCTANT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINESETTING_0_LINEUSEOCTANT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINESETTING_0_LINEUSEOCTANT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

//000 octant 0
//001 octant 1
//010 octant 2
//011 octant 3
//100 octant 4
//101 octant 5
//110 octant 6
//111 octant 7
#define G2SB_CTX3_G2LINESETTING_0_OCTANTS_SHIFT                 _MK_SHIFT_CONST(29)
#define G2SB_CTX3_G2LINESETTING_0_OCTANTS_FIELD                 (_MK_MASK_CONST(0x7) << G2SB_CTX3_G2LINESETTING_0_OCTANTS_SHIFT)
#define G2SB_CTX3_G2LINESETTING_0_OCTANTS_RANGE                 31:29
#define G2SB_CTX3_G2LINESETTING_0_OCTANTS_WOFFSET                       0x0
#define G2SB_CTX3_G2LINESETTING_0_OCTANTS_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINESETTING_0_OCTANTS_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINESETTING_0_OCTANTS_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINESETTING_0_OCTANTS_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//
//
//
//   |    |    |
//    | 5 | 6 |
//     |  |  |
//    4 | | | 7
//       |||
//   ----------->
//       |||
//    3 | | | 0
//     |  |  |
//    | 2 | 1 |
//   |    |    |
//        V
//

// Register G2SB_CTX3_G2LINEDELTAN_0  //{2d,index=3e}
#define G2SB_CTX3_G2LINEDELTAN_0                        _MK_ADDR_CONST(0x103e)
#define G2SB_CTX3_G2LINEDELTAN_0_SECURE                         0x0
#define G2SB_CTX3_G2LINEDELTAN_0_WORD_COUNT                     0x1
#define G2SB_CTX3_G2LINEDELTAN_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINEDELTAN_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINEDELTAN_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINEDELTAN_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINEDELTAN_0_READ_MASK                      _MK_MASK_CONST(0x1fffff)
#define G2SB_CTX3_G2LINEDELTAN_0_WRITE_MASK                     _MK_MASK_CONST(0x1fffff)
#define G2SB_CTX3_G2LINEDELTAN_0_DELTAN_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2LINEDELTAN_0_DELTAN_FIELD                   (_MK_MASK_CONST(0x1fffff) << G2SB_CTX3_G2LINEDELTAN_0_DELTAN_SHIFT)
#define G2SB_CTX3_G2LINEDELTAN_0_DELTAN_RANGE                   20:0
#define G2SB_CTX3_G2LINEDELTAN_0_DELTAN_WOFFSET                 0x0
#define G2SB_CTX3_G2LINEDELTAN_0_DELTAN_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINEDELTAN_0_DELTAN_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINEDELTAN_0_DELTAN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINEDELTAN_0_DELTAN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2LINEDELTAM_0  //{2d,index=3f}
#define G2SB_CTX3_G2LINEDELTAM_0                        _MK_ADDR_CONST(0x103f)
#define G2SB_CTX3_G2LINEDELTAM_0_SECURE                         0x0
#define G2SB_CTX3_G2LINEDELTAM_0_WORD_COUNT                     0x1
#define G2SB_CTX3_G2LINEDELTAM_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINEDELTAM_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINEDELTAM_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINEDELTAM_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINEDELTAM_0_READ_MASK                      _MK_MASK_CONST(0x1fffff)
#define G2SB_CTX3_G2LINEDELTAM_0_WRITE_MASK                     _MK_MASK_CONST(0x1fffff)
#define G2SB_CTX3_G2LINEDELTAM_0_DELTAM_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2LINEDELTAM_0_DELTAM_FIELD                   (_MK_MASK_CONST(0x1fffff) << G2SB_CTX3_G2LINEDELTAM_0_DELTAM_SHIFT)
#define G2SB_CTX3_G2LINEDELTAM_0_DELTAM_RANGE                   20:0
#define G2SB_CTX3_G2LINEDELTAM_0_DELTAM_WOFFSET                 0x0
#define G2SB_CTX3_G2LINEDELTAM_0_DELTAM_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINEDELTAM_0_DELTAM_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINEDELTAM_0_DELTAM_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINEDELTAM_0_DELTAM_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2LINEPOS_0  //{2d,index=40}
#define G2SB_CTX3_G2LINEPOS_0                   _MK_ADDR_CONST(0x1040)
#define G2SB_CTX3_G2LINEPOS_0_SECURE                    0x0
#define G2SB_CTX3_G2LINEPOS_0_WORD_COUNT                        0x1
#define G2SB_CTX3_G2LINEPOS_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINEPOS_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINEPOS_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINEPOS_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINEPOS_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2LINEPOS_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2LINEPOS_0_LINEXPOS_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2LINEPOS_0_LINEXPOS_FIELD                    (_MK_MASK_CONST(0xffff) << G2SB_CTX3_G2LINEPOS_0_LINEXPOS_SHIFT)
#define G2SB_CTX3_G2LINEPOS_0_LINEXPOS_RANGE                    15:0
#define G2SB_CTX3_G2LINEPOS_0_LINEXPOS_WOFFSET                  0x0
#define G2SB_CTX3_G2LINEPOS_0_LINEXPOS_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINEPOS_0_LINEXPOS_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINEPOS_0_LINEXPOS_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINEPOS_0_LINEXPOS_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

#define G2SB_CTX3_G2LINEPOS_0_LINEYPOS_SHIFT                    _MK_SHIFT_CONST(16)
#define G2SB_CTX3_G2LINEPOS_0_LINEYPOS_FIELD                    (_MK_MASK_CONST(0xffff) << G2SB_CTX3_G2LINEPOS_0_LINEYPOS_SHIFT)
#define G2SB_CTX3_G2LINEPOS_0_LINEYPOS_RANGE                    31:16
#define G2SB_CTX3_G2LINEPOS_0_LINEYPOS_WOFFSET                  0x0
#define G2SB_CTX3_G2LINEPOS_0_LINEYPOS_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINEPOS_0_LINEYPOS_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINEPOS_0_LINEYPOS_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINEPOS_0_LINEYPOS_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2LINELEN_0  //{2d,index=41}
#define G2SB_CTX3_G2LINELEN_0                   _MK_ADDR_CONST(0x1041)
#define G2SB_CTX3_G2LINELEN_0_SECURE                    0x0
#define G2SB_CTX3_G2LINELEN_0_WORD_COUNT                        0x1
#define G2SB_CTX3_G2LINELEN_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINELEN_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINELEN_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINELEN_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINELEN_0_READ_MASK                         _MK_MASK_CONST(0x7fff)
#define G2SB_CTX3_G2LINELEN_0_WRITE_MASK                        _MK_MASK_CONST(0x7fff)
#define G2SB_CTX3_G2LINELEN_0_LINELEN_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2LINELEN_0_LINELEN_FIELD                     (_MK_MASK_CONST(0x7fff) << G2SB_CTX3_G2LINELEN_0_LINELEN_SHIFT)
#define G2SB_CTX3_G2LINELEN_0_LINELEN_RANGE                     14:0
#define G2SB_CTX3_G2LINELEN_0_LINELEN_WOFFSET                   0x0
#define G2SB_CTX3_G2LINELEN_0_LINELEN_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINELEN_0_LINELEN_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINELEN_0_LINELEN_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2LINELEN_0_LINELEN_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2CSCFOURTH_0  //{sb,sbm,index=42}
#define G2SB_CTX3_G2CSCFOURTH_0                 _MK_ADDR_CONST(0x1042)
#define G2SB_CTX3_G2CSCFOURTH_0_SECURE                  0x0
#define G2SB_CTX3_G2CSCFOURTH_0_WORD_COUNT                      0x1
#define G2SB_CTX3_G2CSCFOURTH_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCFOURTH_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCFOURTH_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCFOURTH_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCFOURTH_0_READ_MASK                       _MK_MASK_CONST(0x1ff01ff)
#define G2SB_CTX3_G2CSCFOURTH_0_WRITE_MASK                      _MK_MASK_CONST(0x1ff01ff)
// multiplier for G for U generation.
//This parameter consists of a sign bit and 8-bit magnitude (s1.7)
// For RGB->YUV the recommended value is -0.291 (decimal) or 0x125
// For any other combination this parameter is ignored
#define G2SB_CTX3_G2CSCFOURTH_0_G2U_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2CSCFOURTH_0_G2U_FIELD                       (_MK_MASK_CONST(0x1ff) << G2SB_CTX3_G2CSCFOURTH_0_G2U_SHIFT)
#define G2SB_CTX3_G2CSCFOURTH_0_G2U_RANGE                       8:0
#define G2SB_CTX3_G2CSCFOURTH_0_G2U_WOFFSET                     0x0
#define G2SB_CTX3_G2CSCFOURTH_0_G2U_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCFOURTH_0_G2U_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCFOURTH_0_G2U_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCFOURTH_0_G2U_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// multiplier for G for V generation.
//This parameter consists of a sign bit and 8-bit magnitude (s1.7)
// For RGB->YUV the recommended value is -0.368 (decimal) or 0x12F
// For any other combination this parameter is ignored
#define G2SB_CTX3_G2CSCFOURTH_0_G2V_SHIFT                       _MK_SHIFT_CONST(16)
#define G2SB_CTX3_G2CSCFOURTH_0_G2V_FIELD                       (_MK_MASK_CONST(0x1ff) << G2SB_CTX3_G2CSCFOURTH_0_G2V_SHIFT)
#define G2SB_CTX3_G2CSCFOURTH_0_G2V_RANGE                       24:16
#define G2SB_CTX3_G2CSCFOURTH_0_G2V_WOFFSET                     0x0
#define G2SB_CTX3_G2CSCFOURTH_0_G2V_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCFOURTH_0_G2V_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCFOURTH_0_G2V_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CSCFOURTH_0_G2V_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2SRCST_B_0  //{2d,index=43}
#define G2SB_CTX3_G2SRCST_B_0                   _MK_ADDR_CONST(0x1043)
#define G2SB_CTX3_G2SRCST_B_0_SECURE                    0x0
#define G2SB_CTX3_G2SRCST_B_0_WORD_COUNT                        0x1
#define G2SB_CTX3_G2SRCST_B_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCST_B_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCST_B_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCST_B_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCST_B_0_READ_MASK                         _MK_MASK_CONST(0xffff)
#define G2SB_CTX3_G2SRCST_B_0_WRITE_MASK                        _MK_MASK_CONST(0xffff)
// Source Stride B
#define G2SB_CTX3_G2SRCST_B_0_SRCS_B_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2SRCST_B_0_SRCS_B_FIELD                      (_MK_MASK_CONST(0xffff) << G2SB_CTX3_G2SRCST_B_0_SRCS_B_SHIFT)
#define G2SB_CTX3_G2SRCST_B_0_SRCS_B_RANGE                      15:0
#define G2SB_CTX3_G2SRCST_B_0_SRCS_B_WOFFSET                    0x0
#define G2SB_CTX3_G2SRCST_B_0_SRCS_B_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCST_B_0_SRCS_B_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCST_B_0_SRCS_B_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCST_B_0_SRCS_B_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2UVSTRIDE_0  //{2d,sb,index=44}
#define G2SB_CTX3_G2UVSTRIDE_0                  _MK_ADDR_CONST(0x1044)
#define G2SB_CTX3_G2UVSTRIDE_0_SECURE                   0x0
#define G2SB_CTX3_G2UVSTRIDE_0_WORD_COUNT                       0x1
#define G2SB_CTX3_G2UVSTRIDE_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2UVSTRIDE_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2UVSTRIDE_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2UVSTRIDE_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2UVSTRIDE_0_READ_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX3_G2UVSTRIDE_0_WRITE_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX3_G2UVSTRIDE_0_UVSTRIDE_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2UVSTRIDE_0_UVSTRIDE_FIELD                   (_MK_MASK_CONST(0xffff) << G2SB_CTX3_G2UVSTRIDE_0_UVSTRIDE_SHIFT)
#define G2SB_CTX3_G2UVSTRIDE_0_UVSTRIDE_RANGE                   15:0
#define G2SB_CTX3_G2UVSTRIDE_0_UVSTRIDE_WOFFSET                 0x0
#define G2SB_CTX3_G2UVSTRIDE_0_UVSTRIDE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2UVSTRIDE_0_UVSTRIDE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2UVSTRIDE_0_UVSTRIDE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2UVSTRIDE_0_UVSTRIDE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// circular buffer controller 2

// Register G2SB_CTX3_G2CBDES2_0  // {host,2d,sb,index=45}
#define G2SB_CTX3_G2CBDES2_0                    _MK_ADDR_CONST(0x1045)
#define G2SB_CTX3_G2CBDES2_0_SECURE                     0x0
#define G2SB_CTX3_G2CBDES2_0_WORD_COUNT                         0x1
#define G2SB_CTX3_G2CBDES2_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBDES2_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBDES2_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBDES2_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBDES2_0_READ_MASK                  _MK_MASK_CONST(0x7fff)
#define G2SB_CTX3_G2CBDES2_0_WRITE_MASK                         _MK_MASK_CONST(0x7fff)
// Circular buffer top clipping enabled, the first buffer line num
#define G2SB_CTX3_G2CBDES2_0_TOP_CBLINE_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2CBDES2_0_TOP_CBLINE_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX3_G2CBDES2_0_TOP_CBLINE_SHIFT)
#define G2SB_CTX3_G2CBDES2_0_TOP_CBLINE_RANGE                   14:0
#define G2SB_CTX3_G2CBDES2_0_TOP_CBLINE_WOFFSET                 0x0
#define G2SB_CTX3_G2CBDES2_0_TOP_CBLINE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBDES2_0_TOP_CBLINE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBDES2_0_TOP_CBLINE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2CBDES2_0_TOP_CBLINE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2TILEMODE_0  //{host,2d,sb,index=46}
#define G2SB_CTX3_G2TILEMODE_0                  _MK_ADDR_CONST(0x1046)
#define G2SB_CTX3_G2TILEMODE_0_SECURE                   0x0
#define G2SB_CTX3_G2TILEMODE_0_WORD_COUNT                       0x1
#define G2SB_CTX3_G2TILEMODE_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TILEMODE_0_RESET_MASK                       _MK_MASK_CONST(0x111111)
#define G2SB_CTX3_G2TILEMODE_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TILEMODE_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TILEMODE_0_READ_MASK                        _MK_MASK_CONST(0x111111)
#define G2SB_CTX3_G2TILEMODE_0_WRITE_MASK                       _MK_MASK_CONST(0x111111)
//Y or RGB surface
#define G2SB_CTX3_G2TILEMODE_0_SRC_Y_TILE_MODE_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2TILEMODE_0_SRC_Y_TILE_MODE_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2TILEMODE_0_SRC_Y_TILE_MODE_SHIFT)
#define G2SB_CTX3_G2TILEMODE_0_SRC_Y_TILE_MODE_RANGE                    0:0
#define G2SB_CTX3_G2TILEMODE_0_SRC_Y_TILE_MODE_WOFFSET                  0x0
#define G2SB_CTX3_G2TILEMODE_0_SRC_Y_TILE_MODE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TILEMODE_0_SRC_Y_TILE_MODE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2TILEMODE_0_SRC_Y_TILE_MODE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TILEMODE_0_SRC_Y_TILE_MODE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TILEMODE_0_SRC_Y_TILE_MODE_LINEAR                   _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2TILEMODE_0_SRC_Y_TILE_MODE_TILED                    _MK_ENUM_CONST(1)

//UV surface, ignored in RGB mode
#define G2SB_CTX3_G2TILEMODE_0_SRC_UV_TILE_MODE_SHIFT                   _MK_SHIFT_CONST(4)
#define G2SB_CTX3_G2TILEMODE_0_SRC_UV_TILE_MODE_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2TILEMODE_0_SRC_UV_TILE_MODE_SHIFT)
#define G2SB_CTX3_G2TILEMODE_0_SRC_UV_TILE_MODE_RANGE                   4:4
#define G2SB_CTX3_G2TILEMODE_0_SRC_UV_TILE_MODE_WOFFSET                 0x0
#define G2SB_CTX3_G2TILEMODE_0_SRC_UV_TILE_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TILEMODE_0_SRC_UV_TILE_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2TILEMODE_0_SRC_UV_TILE_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TILEMODE_0_SRC_UV_TILE_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TILEMODE_0_SRC_UV_TILE_MODE_LINEAR                  _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2TILEMODE_0_SRC_UV_TILE_MODE_TILED                   _MK_ENUM_CONST(1)

//Y or RGB surface
#define G2SB_CTX3_G2TILEMODE_0_PAT_Y_TILE_MODE_SHIFT                    _MK_SHIFT_CONST(8)
#define G2SB_CTX3_G2TILEMODE_0_PAT_Y_TILE_MODE_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2TILEMODE_0_PAT_Y_TILE_MODE_SHIFT)
#define G2SB_CTX3_G2TILEMODE_0_PAT_Y_TILE_MODE_RANGE                    8:8
#define G2SB_CTX3_G2TILEMODE_0_PAT_Y_TILE_MODE_WOFFSET                  0x0
#define G2SB_CTX3_G2TILEMODE_0_PAT_Y_TILE_MODE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TILEMODE_0_PAT_Y_TILE_MODE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2TILEMODE_0_PAT_Y_TILE_MODE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TILEMODE_0_PAT_Y_TILE_MODE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TILEMODE_0_PAT_Y_TILE_MODE_LINEAR                   _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2TILEMODE_0_PAT_Y_TILE_MODE_TILED                    _MK_ENUM_CONST(1)

//UNUSED
#define G2SB_CTX3_G2TILEMODE_0_PAT_UV_TILE_MODE_SHIFT                   _MK_SHIFT_CONST(12)
#define G2SB_CTX3_G2TILEMODE_0_PAT_UV_TILE_MODE_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2TILEMODE_0_PAT_UV_TILE_MODE_SHIFT)
#define G2SB_CTX3_G2TILEMODE_0_PAT_UV_TILE_MODE_RANGE                   12:12
#define G2SB_CTX3_G2TILEMODE_0_PAT_UV_TILE_MODE_WOFFSET                 0x0
#define G2SB_CTX3_G2TILEMODE_0_PAT_UV_TILE_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TILEMODE_0_PAT_UV_TILE_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2TILEMODE_0_PAT_UV_TILE_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TILEMODE_0_PAT_UV_TILE_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TILEMODE_0_PAT_UV_TILE_MODE_LINEAR                  _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2TILEMODE_0_PAT_UV_TILE_MODE_TILED                   _MK_ENUM_CONST(1)

//Same as destination write unless DST_RD_WR_SEP (not supported)
#define G2SB_CTX3_G2TILEMODE_0_DST_RD_TILE_MODE_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX3_G2TILEMODE_0_DST_RD_TILE_MODE_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2TILEMODE_0_DST_RD_TILE_MODE_SHIFT)
#define G2SB_CTX3_G2TILEMODE_0_DST_RD_TILE_MODE_RANGE                   16:16
#define G2SB_CTX3_G2TILEMODE_0_DST_RD_TILE_MODE_WOFFSET                 0x0
#define G2SB_CTX3_G2TILEMODE_0_DST_RD_TILE_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TILEMODE_0_DST_RD_TILE_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2TILEMODE_0_DST_RD_TILE_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TILEMODE_0_DST_RD_TILE_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TILEMODE_0_DST_RD_TILE_MODE_LINEAR                  _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2TILEMODE_0_DST_RD_TILE_MODE_TILED                   _MK_ENUM_CONST(1)

//destination surface
#define G2SB_CTX3_G2TILEMODE_0_DST_WR_TILE_MODE_SHIFT                   _MK_SHIFT_CONST(20)
#define G2SB_CTX3_G2TILEMODE_0_DST_WR_TILE_MODE_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX3_G2TILEMODE_0_DST_WR_TILE_MODE_SHIFT)
#define G2SB_CTX3_G2TILEMODE_0_DST_WR_TILE_MODE_RANGE                   20:20
#define G2SB_CTX3_G2TILEMODE_0_DST_WR_TILE_MODE_WOFFSET                 0x0
#define G2SB_CTX3_G2TILEMODE_0_DST_WR_TILE_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TILEMODE_0_DST_WR_TILE_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX3_G2TILEMODE_0_DST_WR_TILE_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TILEMODE_0_DST_WR_TILE_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2TILEMODE_0_DST_WR_TILE_MODE_LINEAR                  _MK_ENUM_CONST(0)
#define G2SB_CTX3_G2TILEMODE_0_DST_WR_TILE_MODE_TILED                   _MK_ENUM_CONST(1)


// Register G2SB_CTX3_G2PATBASE_0  //{2d,index=47}
#define G2SB_CTX3_G2PATBASE_0                   _MK_ADDR_CONST(0x1047)
#define G2SB_CTX3_G2PATBASE_0_SECURE                    0x0
#define G2SB_CTX3_G2PATBASE_0_WORD_COUNT                        0x1
#define G2SB_CTX3_G2PATBASE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATBASE_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATBASE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATBASE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATBASE_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2PATBASE_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
//pattern base address in tile mode,
// PATBA is the linear address where pixel start
#define G2SB_CTX3_G2PATBASE_0_PAT_BASE_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2PATBASE_0_PAT_BASE_FIELD                    (_MK_MASK_CONST(0xffffffff) << G2SB_CTX3_G2PATBASE_0_PAT_BASE_SHIFT)
#define G2SB_CTX3_G2PATBASE_0_PAT_BASE_RANGE                    31:0
#define G2SB_CTX3_G2PATBASE_0_PAT_BASE_WOFFSET                  0x0
#define G2SB_CTX3_G2PATBASE_0_PAT_BASE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATBASE_0_PAT_BASE_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATBASE_0_PAT_BASE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2PATBASE_0_PAT_BASE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// SB_SURFBASE registers
//    These registers need only be programmed when using SB.  They point to the base
//        of the various source and destination surfaces.  Technically they are only needed when
//        tiling is enabled, but there is no harm in always programming them.
//    Their counterpart registers (<reg>_SB_SURFBASE with SB_SURFBASE stripped off) indicate the
//        location of the first pixel  to be sourced or written within the surface.
//
//    This register exists to mimic the X, Y (SRCX, SRCY) functionality found in the BitBlt engine.
//
//    For example, to get at pixel X, Y:
//        SRCBA = SRCBA_SB_SURFBASE + Y*stride + X*Bpp

// Register G2SB_CTX3_G2SRCBA_SB_SURFBASE_0
#define G2SB_CTX3_G2SRCBA_SB_SURFBASE_0                 _MK_ADDR_CONST(0x1048)
#define G2SB_CTX3_G2SRCBA_SB_SURFBASE_0_SECURE                  0x0
#define G2SB_CTX3_G2SRCBA_SB_SURFBASE_0_WORD_COUNT                      0x1
#define G2SB_CTX3_G2SRCBA_SB_SURFBASE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCBA_SB_SURFBASE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCBA_SB_SURFBASE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCBA_SB_SURFBASE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCBA_SB_SURFBASE_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2SRCBA_SB_SURFBASE_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2SRCBA:
//    -base of interleaved sources (RGB, YUV)
//    -base of Y plane
// Only used by the StretchBlit Engine
#define G2SB_CTX3_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_FIELD                  (_MK_MASK_CONST(0xffffffff) << G2SB_CTX3_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SHIFT)
#define G2SB_CTX3_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_RANGE                  31:0
#define G2SB_CTX3_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_WOFFSET                        0x0
#define G2SB_CTX3_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2DSTBA_SB_SURFBASE_0
#define G2SB_CTX3_G2DSTBA_SB_SURFBASE_0                 _MK_ADDR_CONST(0x1049)
#define G2SB_CTX3_G2DSTBA_SB_SURFBASE_0_SECURE                  0x0
#define G2SB_CTX3_G2DSTBA_SB_SURFBASE_0_WORD_COUNT                      0x1
#define G2SB_CTX3_G2DSTBA_SB_SURFBASE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_SB_SURFBASE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_SB_SURFBASE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_SB_SURFBASE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_SB_SURFBASE_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2DSTBA_SB_SURFBASE_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2DSTBA
// Only used by the StretchBlit Engine
#define G2SB_CTX3_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2DSTBA_SB_SURFBASE_0_DST_ADDR_FIELD                  (_MK_MASK_CONST(0xffffffff) << G2SB_CTX3_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SHIFT)
#define G2SB_CTX3_G2DSTBA_SB_SURFBASE_0_DST_ADDR_RANGE                  31:0
#define G2SB_CTX3_G2DSTBA_SB_SURFBASE_0_DST_ADDR_WOFFSET                        0x0
#define G2SB_CTX3_G2DSTBA_SB_SURFBASE_0_DST_ADDR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_SB_SURFBASE_0_DST_ADDR_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2DSTBA_B_SB_SURFBASE_0
#define G2SB_CTX3_G2DSTBA_B_SB_SURFBASE_0                       _MK_ADDR_CONST(0x104a)
#define G2SB_CTX3_G2DSTBA_B_SB_SURFBASE_0_SECURE                        0x0
#define G2SB_CTX3_G2DSTBA_B_SB_SURFBASE_0_WORD_COUNT                    0x1
#define G2SB_CTX3_G2DSTBA_B_SB_SURFBASE_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_B_SB_SURFBASE_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_B_SB_SURFBASE_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_B_SB_SURFBASE_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_B_SB_SURFBASE_0_READ_MASK                     _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2DSTBA_B_SB_SURFBASE_0_WRITE_MASK                    _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2DSTBA_B
// Only used by the StretchBlit Engine, and G2CONTROLSB.DBSEL() is enabled
#define G2SB_CTX3_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_FIELD                      (_MK_MASK_CONST(0xffffffff) << G2SB_CTX3_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SHIFT)
#define G2SB_CTX3_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_RANGE                      31:0
#define G2SB_CTX3_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_WOFFSET                    0x0
#define G2SB_CTX3_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2VBA_A_SB_SURFBASE_0
#define G2SB_CTX3_G2VBA_A_SB_SURFBASE_0                 _MK_ADDR_CONST(0x104b)
#define G2SB_CTX3_G2VBA_A_SB_SURFBASE_0_SECURE                  0x0
#define G2SB_CTX3_G2VBA_A_SB_SURFBASE_0_WORD_COUNT                      0x1
#define G2SB_CTX3_G2VBA_A_SB_SURFBASE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VBA_A_SB_SURFBASE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VBA_A_SB_SURFBASE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VBA_A_SB_SURFBASE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VBA_A_SB_SURFBASE_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2VBA_A_SB_SURFBASE_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2VBA
//     used for YUV 4:2:0 planar, base of V plane
// Only used by the StretchBlit Engine
#define G2SB_CTX3_G2VBA_A_SB_SURFBASE_0_V_ADDR_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2VBA_A_SB_SURFBASE_0_V_ADDR_FIELD                    (_MK_MASK_CONST(0xffffffff) << G2SB_CTX3_G2VBA_A_SB_SURFBASE_0_V_ADDR_SHIFT)
#define G2SB_CTX3_G2VBA_A_SB_SURFBASE_0_V_ADDR_RANGE                    31:0
#define G2SB_CTX3_G2VBA_A_SB_SURFBASE_0_V_ADDR_WOFFSET                  0x0
#define G2SB_CTX3_G2VBA_A_SB_SURFBASE_0_V_ADDR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VBA_A_SB_SURFBASE_0_V_ADDR_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VBA_A_SB_SURFBASE_0_V_ADDR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2VBA_A_SB_SURFBASE_0_V_ADDR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_CTX3_G2UBA_A_SB_SURFBASE_0
#define G2SB_CTX3_G2UBA_A_SB_SURFBASE_0                 _MK_ADDR_CONST(0x104c)
#define G2SB_CTX3_G2UBA_A_SB_SURFBASE_0_SECURE                  0x0
#define G2SB_CTX3_G2UBA_A_SB_SURFBASE_0_WORD_COUNT                      0x1
#define G2SB_CTX3_G2UBA_A_SB_SURFBASE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2UBA_A_SB_SURFBASE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2UBA_A_SB_SURFBASE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2UBA_A_SB_SURFBASE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2UBA_A_SB_SURFBASE_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX3_G2UBA_A_SB_SURFBASE_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2VBA
//     used for YUV 4:2:0 planar, base of U plane
// Only used by the StretchBlit Engine
#define G2SB_CTX3_G2UBA_A_SB_SURFBASE_0_U_ADDR_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX3_G2UBA_A_SB_SURFBASE_0_U_ADDR_FIELD                    (_MK_MASK_CONST(0xffffffff) << G2SB_CTX3_G2UBA_A_SB_SURFBASE_0_U_ADDR_SHIFT)
#define G2SB_CTX3_G2UBA_A_SB_SURFBASE_0_U_ADDR_RANGE                    31:0
#define G2SB_CTX3_G2UBA_A_SB_SURFBASE_0_U_ADDR_WOFFSET                  0x0
#define G2SB_CTX3_G2UBA_A_SB_SURFBASE_0_U_ADDR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2UBA_A_SB_SURFBASE_0_U_ADDR_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2UBA_A_SB_SURFBASE_0_U_ADDR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX3_G2UBA_A_SB_SURFBASE_0_U_ADDR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//
// --------------------------------------------------------------------------
//
// Copyright (c) 2004, NVIDIA Corp.
// All Rights Reserved.
//
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
//
// --------------------------------------------------------------------------
// --------------------------------------------------------------------------
//
// Copyright (c) 2004-2005, NVIDIA Corp.
// All Rights Reserved.
//
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
//
// --------------------------------------------------------------------------
//
// Memory Controller Tiling definitions
//
//
//  To enable tiling for a buffer in your module you'll want to include
//  this spec file and then make use of either the ADD_TILE_MODE_REG_SPEC
//  or ADD_TILE_MODE_REG_FIELD_SPEC macro.
//
//  For the ADD_TILE_MODE_REG_SPEC macro, the regp arg is added to the
//  register name as a prefix to match the names of the other registers
//  for this buffer. The fldp is the field name prefix to make the name
//  unique so it works with arreggen generated reg blocks (e.g.):
//
//      // specify how addressing should occur for IB0 buffer
//      ADD_TILE_MODE_REG_SPEC(IB0, IB0);
//
//  There's also a REG_RW_SPEC version, if you need to specify a special
//  flag (e.g. rws for shadow, or rwt for trigger).
//
//  For the ADD_TILE_MODE_REG_FIELD_SPEC macro, the fldp is the field
//  name prefix and bitpos arg describes the starting bit position for
//  this field within another register.
//
//  Like the register version, there's a REG_RW_FIELD_SPEC version if
//  you need to set explicit bits other than "rw".
//
//  Note: this requires having at least NV_MC_TILE_MODEWIDTH bits of
//  space available after bitpos (e.g.) in the register:
//
//      ADD_TILE_MODE_REG_FIELD_SPEC(REF, 16)   // This parameter specifies how addressing
//                                              // for the REF buffer should occur
//
// --------------------------------------------------------------------------
//
// Copyright (c) 2004, NVIDIA Corp.
// All Rights Reserved.
//
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
//
// --------------------------------------------------------------------------
//

// Register G2SB_CTX4_INCR_SYNCPT_0
#define G2SB_CTX4_INCR_SYNCPT_0                 _MK_ADDR_CONST(0x5000)
#define G2SB_CTX4_INCR_SYNCPT_0_SECURE                  0x0
#define G2SB_CTX4_INCR_SYNCPT_0_WORD_COUNT                      0x1
#define G2SB_CTX4_INCR_SYNCPT_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_INCR_SYNCPT_0_RESET_MASK                      _MK_MASK_CONST(0xffff)
#define G2SB_CTX4_INCR_SYNCPT_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_INCR_SYNCPT_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_INCR_SYNCPT_0_READ_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX4_INCR_SYNCPT_0_WRITE_MASK                      _MK_MASK_CONST(0xffff)
// Condition mapped from raise/wait
#define G2SB_CTX4_INCR_SYNCPT_0_COND_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_CTX4_INCR_SYNCPT_0_COND_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX4_INCR_SYNCPT_0_COND_SHIFT)
#define G2SB_CTX4_INCR_SYNCPT_0_COND_RANGE                      15:8
#define G2SB_CTX4_INCR_SYNCPT_0_COND_WOFFSET                    0x0
#define G2SB_CTX4_INCR_SYNCPT_0_COND_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_INCR_SYNCPT_0_COND_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define G2SB_CTX4_INCR_SYNCPT_0_COND_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_INCR_SYNCPT_0_COND_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_INCR_SYNCPT_0_COND_IMMEDIATE                  _MK_ENUM_CONST(0)
#define G2SB_CTX4_INCR_SYNCPT_0_COND_OP_DONE                    _MK_ENUM_CONST(1)
#define G2SB_CTX4_INCR_SYNCPT_0_COND_RD_DONE                    _MK_ENUM_CONST(2)
#define G2SB_CTX4_INCR_SYNCPT_0_COND_REG_WR_SAFE                        _MK_ENUM_CONST(3)
#define G2SB_CTX4_INCR_SYNCPT_0_COND_COND_4                     _MK_ENUM_CONST(4)
#define G2SB_CTX4_INCR_SYNCPT_0_COND_COND_5                     _MK_ENUM_CONST(5)
#define G2SB_CTX4_INCR_SYNCPT_0_COND_COND_6                     _MK_ENUM_CONST(6)
#define G2SB_CTX4_INCR_SYNCPT_0_COND_COND_7                     _MK_ENUM_CONST(7)
#define G2SB_CTX4_INCR_SYNCPT_0_COND_COND_8                     _MK_ENUM_CONST(8)
#define G2SB_CTX4_INCR_SYNCPT_0_COND_COND_9                     _MK_ENUM_CONST(9)
#define G2SB_CTX4_INCR_SYNCPT_0_COND_COND_10                    _MK_ENUM_CONST(10)
#define G2SB_CTX4_INCR_SYNCPT_0_COND_COND_11                    _MK_ENUM_CONST(11)
#define G2SB_CTX4_INCR_SYNCPT_0_COND_COND_12                    _MK_ENUM_CONST(12)
#define G2SB_CTX4_INCR_SYNCPT_0_COND_COND_13                    _MK_ENUM_CONST(13)
#define G2SB_CTX4_INCR_SYNCPT_0_COND_COND_14                    _MK_ENUM_CONST(14)
#define G2SB_CTX4_INCR_SYNCPT_0_COND_COND_15                    _MK_ENUM_CONST(15)

// syncpt index value
#define G2SB_CTX4_INCR_SYNCPT_0_INDX_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX4_INCR_SYNCPT_0_INDX_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX4_INCR_SYNCPT_0_INDX_SHIFT)
#define G2SB_CTX4_INCR_SYNCPT_0_INDX_RANGE                      7:0
#define G2SB_CTX4_INCR_SYNCPT_0_INDX_WOFFSET                    0x0
#define G2SB_CTX4_INCR_SYNCPT_0_INDX_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_INCR_SYNCPT_0_INDX_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define G2SB_CTX4_INCR_SYNCPT_0_INDX_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_INCR_SYNCPT_0_INDX_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_INCR_SYNCPT_CNTRL_0
#define G2SB_CTX4_INCR_SYNCPT_CNTRL_0                   _MK_ADDR_CONST(0x5001)
#define G2SB_CTX4_INCR_SYNCPT_CNTRL_0_SECURE                    0x0
#define G2SB_CTX4_INCR_SYNCPT_CNTRL_0_WORD_COUNT                        0x1
#define G2SB_CTX4_INCR_SYNCPT_CNTRL_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_INCR_SYNCPT_CNTRL_0_RESET_MASK                        _MK_MASK_CONST(0x101)
#define G2SB_CTX4_INCR_SYNCPT_CNTRL_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_INCR_SYNCPT_CNTRL_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_INCR_SYNCPT_CNTRL_0_READ_MASK                         _MK_MASK_CONST(0x101)
#define G2SB_CTX4_INCR_SYNCPT_CNTRL_0_WRITE_MASK                        _MK_MASK_CONST(0x101)
// If NO_STALL is 1, then when fifos are full,
// INCR_SYNCPT methods will be dropped and the
// INCR_SYNCPT_ERROR[COND] bit will be set.
// If NO_STALL is 0, then when fifos are full,
// the client host interface will be stalled.
#define G2SB_CTX4_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SHIFT                        _MK_SHIFT_CONST(8)
#define G2SB_CTX4_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX4_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SHIFT)
#define G2SB_CTX4_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_RANGE                        8:8
#define G2SB_CTX4_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_WOFFSET                      0x0
#define G2SB_CTX4_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX4_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// If SOFT_RESET is set, then all internal state
// of the client syncpt block will be reset.
// To do soft reset, first set SOFT_RESET of
// all host1x clients affected, then clear all
// SOFT_RESETs.
#define G2SB_CTX4_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX4_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX4_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SHIFT)
#define G2SB_CTX4_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_RANGE                      0:0
#define G2SB_CTX4_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_WOFFSET                    0x0
#define G2SB_CTX4_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_CTX4_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_INCR_SYNCPT_ERROR_0
#define G2SB_CTX4_INCR_SYNCPT_ERROR_0                   _MK_ADDR_CONST(0x5002)
#define G2SB_CTX4_INCR_SYNCPT_ERROR_0_SECURE                    0x0
#define G2SB_CTX4_INCR_SYNCPT_ERROR_0_WORD_COUNT                        0x1
#define G2SB_CTX4_INCR_SYNCPT_ERROR_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_INCR_SYNCPT_ERROR_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_INCR_SYNCPT_ERROR_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_INCR_SYNCPT_ERROR_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_INCR_SYNCPT_ERROR_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_INCR_SYNCPT_ERROR_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// COND_STATUS[COND] is set if the fifo for COND overflows.
// This bit is sticky and will remain set until cleared.
// Cleared by writing 1.
#define G2SB_CTX4_INCR_SYNCPT_ERROR_0_COND_STATUS_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX4_INCR_SYNCPT_ERROR_0_COND_STATUS_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX4_INCR_SYNCPT_ERROR_0_COND_STATUS_SHIFT)
#define G2SB_CTX4_INCR_SYNCPT_ERROR_0_COND_STATUS_RANGE                 31:0
#define G2SB_CTX4_INCR_SYNCPT_ERROR_0_COND_STATUS_WOFFSET                       0x0
#define G2SB_CTX4_INCR_SYNCPT_ERROR_0_COND_STATUS_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_INCR_SYNCPT_ERROR_0_COND_STATUS_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_INCR_SYNCPT_ERROR_0_COND_STATUS_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_INCR_SYNCPT_ERROR_0_COND_STATUS_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// reserve locations for future expansion

// Reserved address 20483 [0x5003]

// Reserved address 20484 [0x5004]

// Reserved address 20485 [0x5005]

// Reserved address 20486 [0x5006]

// Reserved address 20487 [0x5007]
// just in case names were redefined using macros
// 2D syncpt behavior
//     - Each 2D context has its own syncpt client.
//     - OP_DONE increments when 2D's memory write client is idle, meaning all
//           preceding operations are complete.
//     - RD_DONE behaves like OP_DONE
//     - REG_WR_SAFE behaves like IMMEDIATE meaning a syncpt increment returns
//         immediately and does not indicate that a register write will NOT block.
//         The implications are that 2D's host FIFO can fill and block access to 2D,
//         which will indeterminately block a direct CPU access.

// Register G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0  //{index=8}
// This register can be accessed by both register read/write and command fifo
// in order not to break exsting code , keep suffix REGONLY.
//
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0                      _MK_ADDR_CONST(0x5008)
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_SECURE                       0x0
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_WORD_COUNT                   0x1
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_READ_MASK                    _MK_MASK_CONST(0x1f03ff)
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_WRITE_MASK                   _MK_MASK_CONST(0x1f0000)
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_FIELD                     (_MK_MASK_CONST(0x3ff) << G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SHIFT)
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_RANGE                     9:0
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_WOFFSET                   0x0
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_FIELD                   (_MK_MASK_CONST(0xf) << G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SHIFT)
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_RANGE                   19:16
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_WOFFSET                 0x0
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SHIFT                      _MK_SHIFT_CONST(20)
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SHIFT)
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_RANGE                      20:20
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_WOFFSET                    0x0
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Control methods, since they are not programmed often, put them is the beginning

// Register G2SB_CTX4_G2TRIGGER_0  //{host,2d,sb,index=9}
#define G2SB_CTX4_G2TRIGGER_0                   _MK_ADDR_CONST(0x5009)
#define G2SB_CTX4_G2TRIGGER_0_SECURE                    0x0
#define G2SB_CTX4_G2TRIGGER_0_WORD_COUNT                        0x1
#define G2SB_CTX4_G2TRIGGER_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TRIGGER_0_RESET_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX4_G2TRIGGER_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TRIGGER_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TRIGGER_0_READ_MASK                         _MK_MASK_CONST(0xffff)
#define G2SB_CTX4_G2TRIGGER_0_WRITE_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX4_G2TRIGGER_0_TRIGGER_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2TRIGGER_0_TRIGGER_FIELD                     (_MK_MASK_CONST(0xffff) << G2SB_CTX4_G2TRIGGER_0_TRIGGER_SHIFT)
#define G2SB_CTX4_G2TRIGGER_0_TRIGGER_RANGE                     15:0
#define G2SB_CTX4_G2TRIGGER_0_TRIGGER_WOFFSET                   0x0
#define G2SB_CTX4_G2TRIGGER_0_TRIGGER_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TRIGGER_0_TRIGGER_DEFAULT_MASK                      _MK_MASK_CONST(0xffff)
#define G2SB_CTX4_G2TRIGGER_0_TRIGGER_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TRIGGER_0_TRIGGER_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2TRIGGER1_0  //{host,2d,sb,index=a}
#define G2SB_CTX4_G2TRIGGER1_0                  _MK_ADDR_CONST(0x500a)
#define G2SB_CTX4_G2TRIGGER1_0_SECURE                   0x0
#define G2SB_CTX4_G2TRIGGER1_0_WORD_COUNT                       0x1
#define G2SB_CTX4_G2TRIGGER1_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TRIGGER1_0_RESET_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX4_G2TRIGGER1_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TRIGGER1_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TRIGGER1_0_READ_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX4_G2TRIGGER1_0_WRITE_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX4_G2TRIGGER1_0_TRIGGER1_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2TRIGGER1_0_TRIGGER1_FIELD                   (_MK_MASK_CONST(0xffff) << G2SB_CTX4_G2TRIGGER1_0_TRIGGER1_SHIFT)
#define G2SB_CTX4_G2TRIGGER1_0_TRIGGER1_RANGE                   15:0
#define G2SB_CTX4_G2TRIGGER1_0_TRIGGER1_WOFFSET                 0x0
#define G2SB_CTX4_G2TRIGGER1_0_TRIGGER1_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TRIGGER1_0_TRIGGER1_DEFAULT_MASK                    _MK_MASK_CONST(0xffff)
#define G2SB_CTX4_G2TRIGGER1_0_TRIGGER1_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TRIGGER1_0_TRIGGER1_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2TRIGGER2_0  //{2d,index=b}
#define G2SB_CTX4_G2TRIGGER2_0                  _MK_ADDR_CONST(0x500b)
#define G2SB_CTX4_G2TRIGGER2_0_SECURE                   0x0
#define G2SB_CTX4_G2TRIGGER2_0_WORD_COUNT                       0x1
#define G2SB_CTX4_G2TRIGGER2_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TRIGGER2_0_RESET_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX4_G2TRIGGER2_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TRIGGER2_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TRIGGER2_0_READ_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX4_G2TRIGGER2_0_WRITE_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX4_G2TRIGGER2_0_TRIGGER2_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2TRIGGER2_0_TRIGGER2_FIELD                   (_MK_MASK_CONST(0xffff) << G2SB_CTX4_G2TRIGGER2_0_TRIGGER2_SHIFT)
#define G2SB_CTX4_G2TRIGGER2_0_TRIGGER2_RANGE                   15:0
#define G2SB_CTX4_G2TRIGGER2_0_TRIGGER2_WOFFSET                 0x0
#define G2SB_CTX4_G2TRIGGER2_0_TRIGGER2_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TRIGGER2_0_TRIGGER2_DEFAULT_MASK                    _MK_MASK_CONST(0xffff)
#define G2SB_CTX4_G2TRIGGER2_0_TRIGGER2_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TRIGGER2_0_TRIGGER2_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2CMDSEL_0  //{host,2d,sb,index=c}
#define G2SB_CTX4_G2CMDSEL_0                    _MK_ADDR_CONST(0x500c)
#define G2SB_CTX4_G2CMDSEL_0_SECURE                     0x0
#define G2SB_CTX4_G2CMDSEL_0_WORD_COUNT                         0x1
#define G2SB_CTX4_G2CMDSEL_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_RESET_MASK                         _MK_MASK_CONST(0x1100d7f1)
#define G2SB_CTX4_G2CMDSEL_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_READ_MASK                  _MK_MASK_CONST(0x1fffd7f1)
#define G2SB_CTX4_G2CMDSEL_0_WRITE_MASK                         _MK_MASK_CONST(0x1fffd7f0)
#define G2SB_CTX4_G2CMDSEL_0_SBOR2D_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2CMDSEL_0_SBOR2D_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CMDSEL_0_SBOR2D_SHIFT)
#define G2SB_CTX4_G2CMDSEL_0_SBOR2D_RANGE                       0:0
#define G2SB_CTX4_G2CMDSEL_0_SBOR2D_WOFFSET                     0x0
#define G2SB_CTX4_G2CMDSEL_0_SBOR2D_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_SBOR2D_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CMDSEL_0_SBOR2D_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_SBOR2D_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_SBOR2D_G2                  _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CMDSEL_0_SBOR2D_SB                  _MK_ENUM_CONST(1)

//circular buffer feature enable    0= disable
#define G2SB_CTX4_G2CMDSEL_0_CBENABLE_SHIFT                     _MK_SHIFT_CONST(4)
#define G2SB_CTX4_G2CMDSEL_0_CBENABLE_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CMDSEL_0_CBENABLE_SHIFT)
#define G2SB_CTX4_G2CMDSEL_0_CBENABLE_RANGE                     4:4
#define G2SB_CTX4_G2CMDSEL_0_CBENABLE_WOFFSET                   0x0
#define G2SB_CTX4_G2CMDSEL_0_CBENABLE_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_CBENABLE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CMDSEL_0_CBENABLE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_CBENABLE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_CBENABLE_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CMDSEL_0_CBENABLE_ENABLE                    _MK_ENUM_CONST(1)

//VI trigger enable, can be circular buffer or full frame
#define G2SB_CTX4_G2CMDSEL_0_VITRIGGER_SHIFT                    _MK_SHIFT_CONST(5)
#define G2SB_CTX4_G2CMDSEL_0_VITRIGGER_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CMDSEL_0_VITRIGGER_SHIFT)
#define G2SB_CTX4_G2CMDSEL_0_VITRIGGER_RANGE                    5:5
#define G2SB_CTX4_G2CMDSEL_0_VITRIGGER_WOFFSET                  0x0
#define G2SB_CTX4_G2CMDSEL_0_VITRIGGER_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_VITRIGGER_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CMDSEL_0_VITRIGGER_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_VITRIGGER_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//host trigger the command, host also need program cicular buffer related data
#define G2SB_CTX4_G2CMDSEL_0_HOSTTRIGGER_SHIFT                  _MK_SHIFT_CONST(6)
#define G2SB_CTX4_G2CMDSEL_0_HOSTTRIGGER_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CMDSEL_0_HOSTTRIGGER_SHIFT)
#define G2SB_CTX4_G2CMDSEL_0_HOSTTRIGGER_RANGE                  6:6
#define G2SB_CTX4_G2CMDSEL_0_HOSTTRIGGER_WOFFSET                        0x0
#define G2SB_CTX4_G2CMDSEL_0_HOSTTRIGGER_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_HOSTTRIGGER_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CMDSEL_0_HOSTTRIGGER_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_HOSTTRIGGER_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX4_G2CMDSEL_0_CBSBDISABLE_SHIFT                  _MK_SHIFT_CONST(7)
#define G2SB_CTX4_G2CMDSEL_0_CBSBDISABLE_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CMDSEL_0_CBSBDISABLE_SHIFT)
#define G2SB_CTX4_G2CMDSEL_0_CBSBDISABLE_RANGE                  7:7
#define G2SB_CTX4_G2CMDSEL_0_CBSBDISABLE_WOFFSET                        0x0
#define G2SB_CTX4_G2CMDSEL_0_CBSBDISABLE_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_CBSBDISABLE_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CMDSEL_0_CBSBDISABLE_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_CBSBDISABLE_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// 00: to memory
// 01: to EPP
#define G2SB_CTX4_G2CMDSEL_0_G2OUTPUT_SHIFT                     _MK_SHIFT_CONST(8)
#define G2SB_CTX4_G2CMDSEL_0_G2OUTPUT_FIELD                     (_MK_MASK_CONST(0x3) << G2SB_CTX4_G2CMDSEL_0_G2OUTPUT_SHIFT)
#define G2SB_CTX4_G2CMDSEL_0_G2OUTPUT_RANGE                     9:8
#define G2SB_CTX4_G2CMDSEL_0_G2OUTPUT_WOFFSET                   0x0
#define G2SB_CTX4_G2CMDSEL_0_G2OUTPUT_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_G2OUTPUT_DEFAULT_MASK                      _MK_MASK_CONST(0x3)
#define G2SB_CTX4_G2CMDSEL_0_G2OUTPUT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_G2OUTPUT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_G2OUTPUT_MEMORY                    _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CMDSEL_0_G2OUTPUT_EPP                       _MK_ENUM_CONST(1)
#define G2SB_CTX4_G2CMDSEL_0_G2OUTPUT_RESERVED2                 _MK_ENUM_CONST(2)
#define G2SB_CTX4_G2CMDSEL_0_G2OUTPUT_RESERVED3                 _MK_ENUM_CONST(3)

// Reserved for HW Test, SW should not use this bit.
#define G2SB_CTX4_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SHIFT                       _MK_SHIFT_CONST(10)
#define G2SB_CTX4_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SHIFT)
#define G2SB_CTX4_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_RANGE                       10:10
#define G2SB_CTX4_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_WOFFSET                     0x0
#define G2SB_CTX4_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_ENABLE                      _MK_ENUM_CONST(1)

#define G2SB_CTX4_G2CMDSEL_0_LINK_WAIT_BUF_END_SHIFT                    _MK_SHIFT_CONST(12)
#define G2SB_CTX4_G2CMDSEL_0_LINK_WAIT_BUF_END_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CMDSEL_0_LINK_WAIT_BUF_END_SHIFT)
#define G2SB_CTX4_G2CMDSEL_0_LINK_WAIT_BUF_END_RANGE                    12:12
#define G2SB_CTX4_G2CMDSEL_0_LINK_WAIT_BUF_END_WOFFSET                  0x0
#define G2SB_CTX4_G2CMDSEL_0_LINK_WAIT_BUF_END_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_LINK_WAIT_BUF_END_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CMDSEL_0_LINK_WAIT_BUF_END_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_LINK_WAIT_BUF_END_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//host writes this bit to tell which buffer is ready
#define G2SB_CTX4_G2CMDSEL_0_FRAME_START_SHIFT                  _MK_SHIFT_CONST(14)
#define G2SB_CTX4_G2CMDSEL_0_FRAME_START_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CMDSEL_0_FRAME_START_SHIFT)
#define G2SB_CTX4_G2CMDSEL_0_FRAME_START_RANGE                  14:14
#define G2SB_CTX4_G2CMDSEL_0_FRAME_START_WOFFSET                        0x0
#define G2SB_CTX4_G2CMDSEL_0_FRAME_START_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_FRAME_START_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CMDSEL_0_FRAME_START_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_FRAME_START_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX4_G2CMDSEL_0_FRAME_END_SHIFT                    _MK_SHIFT_CONST(15)
#define G2SB_CTX4_G2CMDSEL_0_FRAME_END_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CMDSEL_0_FRAME_END_SHIFT)
#define G2SB_CTX4_G2CMDSEL_0_FRAME_END_RANGE                    15:15
#define G2SB_CTX4_G2CMDSEL_0_FRAME_END_WOFFSET                  0x0
#define G2SB_CTX4_G2CMDSEL_0_FRAME_END_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_FRAME_END_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CMDSEL_0_FRAME_END_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_FRAME_END_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

#define G2SB_CTX4_G2CMDSEL_0_BUFFER_INDEX_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_CTX4_G2CMDSEL_0_BUFFER_INDEX_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX4_G2CMDSEL_0_BUFFER_INDEX_SHIFT)
#define G2SB_CTX4_G2CMDSEL_0_BUFFER_INDEX_RANGE                 23:16
#define G2SB_CTX4_G2CMDSEL_0_BUFFER_INDEX_WOFFSET                       0x0
#define G2SB_CTX4_G2CMDSEL_0_BUFFER_INDEX_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_BUFFER_INDEX_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_BUFFER_INDEX_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_BUFFER_INDEX_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//Test purpose
#define G2SB_CTX4_G2CMDSEL_0_LINKEN_SHIFT                       _MK_SHIFT_CONST(24)
#define G2SB_CTX4_G2CMDSEL_0_LINKEN_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CMDSEL_0_LINKEN_SHIFT)
#define G2SB_CTX4_G2CMDSEL_0_LINKEN_RANGE                       24:24
#define G2SB_CTX4_G2CMDSEL_0_LINKEN_WOFFSET                     0x0
#define G2SB_CTX4_G2CMDSEL_0_LINKEN_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_LINKEN_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CMDSEL_0_LINKEN_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_LINKEN_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

#define G2SB_CTX4_G2CMDSEL_0_LINKVAL_SHIFT                      _MK_SHIFT_CONST(25)
#define G2SB_CTX4_G2CMDSEL_0_LINKVAL_FIELD                      (_MK_MASK_CONST(0x7) << G2SB_CTX4_G2CMDSEL_0_LINKVAL_SHIFT)
#define G2SB_CTX4_G2CMDSEL_0_LINKVAL_RANGE                      27:25
#define G2SB_CTX4_G2CMDSEL_0_LINKVAL_WOFFSET                    0x0
#define G2SB_CTX4_G2CMDSEL_0_LINKVAL_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_LINKVAL_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_LINKVAL_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_LINKVAL_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// indicates priority of the context, note vi-triggered contexts take priority over HIGH
#define G2SB_CTX4_G2CMDSEL_0_PRIORITY_SHIFT                     _MK_SHIFT_CONST(28)
#define G2SB_CTX4_G2CMDSEL_0_PRIORITY_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CMDSEL_0_PRIORITY_SHIFT)
#define G2SB_CTX4_G2CMDSEL_0_PRIORITY_RANGE                     28:28
#define G2SB_CTX4_G2CMDSEL_0_PRIORITY_WOFFSET                   0x0
#define G2SB_CTX4_G2CMDSEL_0_PRIORITY_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_PRIORITY_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CMDSEL_0_PRIORITY_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_PRIORITY_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMDSEL_0_PRIORITY_LOW                       _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CMDSEL_0_PRIORITY_HIGH                      _MK_ENUM_CONST(1)


// Register G2SB_CTX4_G2RAISE_0  //{host,2d,sb,index=d}
#define G2SB_CTX4_G2RAISE_0                     _MK_ADDR_CONST(0x500d)
#define G2SB_CTX4_G2RAISE_0_SECURE                      0x0
#define G2SB_CTX4_G2RAISE_0_WORD_COUNT                  0x1
#define G2SB_CTX4_G2RAISE_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2RAISE_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2RAISE_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2RAISE_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2RAISE_0_READ_MASK                   _MK_MASK_CONST(0xf001f)
#define G2SB_CTX4_G2RAISE_0_WRITE_MASK                  _MK_MASK_CONST(0xf001f)
//Push back to read fifo when all commands in the channel are done.
#define G2SB_CTX4_G2RAISE_0_RAISE_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2RAISE_0_RAISE_FIELD                 (_MK_MASK_CONST(0x1f) << G2SB_CTX4_G2RAISE_0_RAISE_SHIFT)
#define G2SB_CTX4_G2RAISE_0_RAISE_RANGE                 4:0
#define G2SB_CTX4_G2RAISE_0_RAISE_WOFFSET                       0x0
#define G2SB_CTX4_G2RAISE_0_RAISE_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2RAISE_0_RAISE_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2RAISE_0_RAISE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2RAISE_0_RAISE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

#define G2SB_CTX4_G2RAISE_0_RAISECHANNEL_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX4_G2RAISE_0_RAISECHANNEL_FIELD                  (_MK_MASK_CONST(0xf) << G2SB_CTX4_G2RAISE_0_RAISECHANNEL_SHIFT)
#define G2SB_CTX4_G2RAISE_0_RAISECHANNEL_RANGE                  19:16
#define G2SB_CTX4_G2RAISE_0_RAISECHANNEL_WOFFSET                        0x0
#define G2SB_CTX4_G2RAISE_0_RAISECHANNEL_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2RAISE_0_RAISECHANNEL_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2RAISE_0_RAISECHANNEL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2RAISE_0_RAISECHANNEL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Reserved address 20494 [0x500e]
//reg G2REFCOUNT incr1  //{host,2d,sb,index=e}
//#if (NV_HOST1X_HAS_FEATURE_REFCOUNT32B == 1)
//     31:0   rw REFCOUNT
//#else
//     15:0   rw REFCOUNT
//#endif
//    ;

// Register G2SB_CTX4_G2HOSTSET_0  //{host,2d,index=f}
#define G2SB_CTX4_G2HOSTSET_0                   _MK_ADDR_CONST(0x500f)
#define G2SB_CTX4_G2HOSTSET_0_SECURE                    0x0
#define G2SB_CTX4_G2HOSTSET_0_WORD_COUNT                        0x1
#define G2SB_CTX4_G2HOSTSET_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2HOSTSET_0_RESET_MASK                        _MK_MASK_CONST(0xff)
#define G2SB_CTX4_G2HOSTSET_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2HOSTSET_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2HOSTSET_0_READ_MASK                         _MK_MASK_CONST(0xff)
#define G2SB_CTX4_G2HOSTSET_0_WRITE_MASK                        _MK_MASK_CONST(0xff)
//  specifies distance (in byte) from last pixel of a line to the first
//  pixel of next line.
//  In mono mode, the value is the nearest byte number.
//  E.G. if gap is 3 bits, HSTLNGAP should be 1 (byte),
// if gap is 9 bits, HSTLNGAP should be 2 (byte)
#define G2SB_CTX4_G2HOSTSET_0_HSTLNGAP_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2HOSTSET_0_HSTLNGAP_FIELD                    (_MK_MASK_CONST(0xf) << G2SB_CTX4_G2HOSTSET_0_HSTLNGAP_SHIFT)
#define G2SB_CTX4_G2HOSTSET_0_HSTLNGAP_RANGE                    3:0
#define G2SB_CTX4_G2HOSTSET_0_HSTLNGAP_WOFFSET                  0x0
#define G2SB_CTX4_G2HOSTSET_0_HSTLNGAP_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2HOSTSET_0_HSTLNGAP_DEFAULT_MASK                     _MK_MASK_CONST(0xf)
#define G2SB_CTX4_G2HOSTSET_0_HSTLNGAP_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2HOSTSET_0_HSTLNGAP_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// specifies the
//  first pixel location (in byte) in the first source data entry.
// In mono mode pixel should always start in byte boundary
#define G2SB_CTX4_G2HOSTSET_0_HSTFPXL_SHIFT                     _MK_SHIFT_CONST(4)
#define G2SB_CTX4_G2HOSTSET_0_HSTFPXL_FIELD                     (_MK_MASK_CONST(0xf) << G2SB_CTX4_G2HOSTSET_0_HSTFPXL_SHIFT)
#define G2SB_CTX4_G2HOSTSET_0_HSTFPXL_RANGE                     7:4
#define G2SB_CTX4_G2HOSTSET_0_HSTFPXL_WOFFSET                   0x0
#define G2SB_CTX4_G2HOSTSET_0_HSTFPXL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2HOSTSET_0_HSTFPXL_DEFAULT_MASK                      _MK_MASK_CONST(0xf)
#define G2SB_CTX4_G2HOSTSET_0_HSTFPXL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2HOSTSET_0_HSTFPXL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2HOSTFIFO_0  //{host,2d,sb,index=10}
#define G2SB_CTX4_G2HOSTFIFO_0                  _MK_ADDR_CONST(0x5010)
#define G2SB_CTX4_G2HOSTFIFO_0_SECURE                   0x0
#define G2SB_CTX4_G2HOSTFIFO_0_WORD_COUNT                       0x1
#define G2SB_CTX4_G2HOSTFIFO_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2HOSTFIFO_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2HOSTFIFO_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2HOSTFIFO_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2HOSTFIFO_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2HOSTFIFO_0_WRITE_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2HOSTFIFO_0_HOSTFIFODATA_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2HOSTFIFO_0_HOSTFIFODATA_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX4_G2HOSTFIFO_0_HOSTFIFODATA_SHIFT)
#define G2SB_CTX4_G2HOSTFIFO_0_HOSTFIFODATA_RANGE                       31:0
#define G2SB_CTX4_G2HOSTFIFO_0_HOSTFIFODATA_WOFFSET                     0x0
#define G2SB_CTX4_G2HOSTFIFO_0_HOSTFIFODATA_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2HOSTFIFO_0_HOSTFIFODATA_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2HOSTFIFO_0_HOSTFIFODATA_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2HOSTFIFO_0_HOSTFIFODATA_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2VDDA_0  //{sb,sbm,index=11}
#define G2SB_CTX4_G2VDDA_0                      _MK_ADDR_CONST(0x5011)
#define G2SB_CTX4_G2VDDA_0_SECURE                       0x0
#define G2SB_CTX4_G2VDDA_0_WORD_COUNT                   0x1
#define G2SB_CTX4_G2VDDA_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VDDA_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VDDA_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VDDA_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VDDA_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2VDDA_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
//Vertical Scaling DDA
//Reset value: xxxx-xxxxh
//Vertical DDA Step (Increment) Value (VDSTEP[18:0])
// (upper 13 bits should be set to '0')
//This parameter specifies the increment value of the DDA used
//for vertical scaling and it is in the form of 6-bit integer and
//12-bit fraction.  This value is detemined by the equation:
// (Actual_source_height-1-VDTINI) / (Actual_destination_height-1)
// Truncate the rest bits to keep the 12bits fraction. Since we have to meet
// (Actual_source_height-1)*1.0 >= (Actual_destination_height - 1)*VDSTEP + VDTINI
// Refer to bug 353260 for more detail.
//The 6-bit integer allows maximum contraction ratio of 1/64, and
// 12-bit fraction assures the maximum limit of accumulated error less
// than half line-spacing for up to approximately 2000 target lines.
//For example, image expansion from 240 lines to 400 lines
//  VDSTEP[17:0]  =  19'b00_0000_1001_1001_1010   and
//image contraction from 240 lines to 150 lines
//   VDSTEP[17:0]  =  19'b00_0001_1001_1001_1010.
#define G2SB_CTX4_G2VDDA_0_VDSTEP_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2VDDA_0_VDSTEP_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX4_G2VDDA_0_VDSTEP_SHIFT)
#define G2SB_CTX4_G2VDDA_0_VDSTEP_RANGE                 31:0
#define G2SB_CTX4_G2VDDA_0_VDSTEP_WOFFSET                       0x0
#define G2SB_CTX4_G2VDDA_0_VDSTEP_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VDDA_0_VDSTEP_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VDDA_0_VDSTEP_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VDDA_0_VDSTEP_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2VDDAINI_0  //{sb,sbm,index=12}
#define G2SB_CTX4_G2VDDAINI_0                   _MK_ADDR_CONST(0x5012)
#define G2SB_CTX4_G2VDDAINI_0_SECURE                    0x0
#define G2SB_CTX4_G2VDDAINI_0_WORD_COUNT                        0x1
#define G2SB_CTX4_G2VDDAINI_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VDDAINI_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VDDAINI_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VDDAINI_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VDDAINI_0_READ_MASK                         _MK_MASK_CONST(0xffff)
#define G2SB_CTX4_G2VDDAINI_0_WRITE_MASK                        _MK_MASK_CONST(0xffff)
//Vertical Scaling DDA Initial Values
//Vertical DDA Initial Value for Top-Field (VDTINI[7:0])
//This parameter specifies the fraction part of initial
// value of the DDA used for vertical scaling.
//Given a pair of consecutive source image lines representing
// positions 0.0 and 1.0, a destination line-image will be created
// at any position in [0.0, 1.0), that is specified by the fraction
// part of the vertical DDA. The 8-bit initial fraction value
// specifies the position of the first output (destination) line-image
// located between the first and the second input (source) line-images,
// respectively at position 0.0 and 1.0.
//This parameter provides a way to compensate relative displacement of
// top and bottom fields of a source image. Suppose, 2-to-1 interlaced
// original video field images #1 and #2 are in the image buffer, to be
// displayed in an overlay window. Assume that the #1 field image is the
// top-field. Using VDTINI = 8'hC0 for the top-field image and
// VDBINI = 8'h40 for the bottom-field image, for example, the two images
// from #1 and #2 fields get mapped to identically positioned destination
// images in the overlay window.
#define G2SB_CTX4_G2VDDAINI_0_VDTINI_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2VDDAINI_0_VDTINI_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX4_G2VDDAINI_0_VDTINI_SHIFT)
#define G2SB_CTX4_G2VDDAINI_0_VDTINI_RANGE                      7:0
#define G2SB_CTX4_G2VDDAINI_0_VDTINI_WOFFSET                    0x0
#define G2SB_CTX4_G2VDDAINI_0_VDTINI_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VDDAINI_0_VDTINI_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VDDAINI_0_VDTINI_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VDDAINI_0_VDTINI_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

//Vertical DDA Initial Value for Bottom-Field (VDBINI[7:0])
// (see description above)
#define G2SB_CTX4_G2VDDAINI_0_VDBINI_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_CTX4_G2VDDAINI_0_VDBINI_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX4_G2VDDAINI_0_VDBINI_SHIFT)
#define G2SB_CTX4_G2VDDAINI_0_VDBINI_RANGE                      15:8
#define G2SB_CTX4_G2VDDAINI_0_VDBINI_WOFFSET                    0x0
#define G2SB_CTX4_G2VDDAINI_0_VDBINI_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VDDAINI_0_VDBINI_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VDDAINI_0_VDBINI_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VDDAINI_0_VDBINI_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2HDDA_0  //{sb,sbm,index=13}
#define G2SB_CTX4_G2HDDA_0                      _MK_ADDR_CONST(0x5013)
#define G2SB_CTX4_G2HDDA_0_SECURE                       0x0
#define G2SB_CTX4_G2HDDA_0_WORD_COUNT                   0x1
#define G2SB_CTX4_G2HDDA_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2HDDA_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2HDDA_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2HDDA_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2HDDA_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2HDDA_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
//Horizontal Scaling DDA
//Reset value: xxxx-xxxxh
//Horizontal DDA Step (Increment) Value (HDSTEP[18:0])
// (upper 13 bits should be set to '0')
//This parameter specifies the increment value of the DDA used
//for horizontal scaling and it is in the form of 6-bit integer and
//12-bit fraction.  This value is detemined by the equation:
// (Actual_source_width-1-HDINI) / (Actual_destination_width-1)
// Truncate the rest bits to keep the 12bits fraction.
// Refer to bug 353260 for more detail.
//The 6-bit integer allows maximum contraction ratio of 1/64, and
// 12-bit fraction assures the maximum limit of accumulated error less
// than half pixel-spacing for up to approximately 2000 destination pixels.
//For example, image expansion from 720 pixels to 800 pixels
//       HDSTEP[17:0]  =  19'b000_0000_1110_0110_0111   and
//image contraction from 720 pixels to 250 pixels
// HDSTEP[17:0]  =  19'b000_0010_1110_0001_0101.
#define G2SB_CTX4_G2HDDA_0_HDSTEP_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2HDDA_0_HDSTEP_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX4_G2HDDA_0_HDSTEP_SHIFT)
#define G2SB_CTX4_G2HDDA_0_HDSTEP_RANGE                 31:0
#define G2SB_CTX4_G2HDDA_0_HDSTEP_WOFFSET                       0x0
#define G2SB_CTX4_G2HDDA_0_HDSTEP_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2HDDA_0_HDSTEP_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2HDDA_0_HDSTEP_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2HDDA_0_HDSTEP_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2HDDAINILS_0  //{sb,sbm,index=14}
#define G2SB_CTX4_G2HDDAINILS_0                 _MK_ADDR_CONST(0x5014)
#define G2SB_CTX4_G2HDDAINILS_0_SECURE                  0x0
#define G2SB_CTX4_G2HDDAINILS_0_WORD_COUNT                      0x1
#define G2SB_CTX4_G2HDDAINILS_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2HDDAINILS_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2HDDAINILS_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2HDDAINILS_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2HDDAINILS_0_READ_MASK                       _MK_MASK_CONST(0xff)
#define G2SB_CTX4_G2HDDAINILS_0_WRITE_MASK                      _MK_MASK_CONST(0xff)
//Horizontal Scaling DDA Initial Value
//Horizontal DDA Initial Value (HDINI[7:0])
//This parameter specifies the fraction part of initial value
// of the DDA used for horizontal scaling.
//Given a group of six consecutive source pixels that
// the two pixels at the center representing positions 0.0
//and 1.0, a destination pixel will be created at any
// position in [0.0, 1.0), that is specified by the fraction part
//of the horizontal DDA. The 8-bit initial fraction
// value specifies the position of the first output (destination)
//pixel located between the first and the second input (source)
// pixels, respectively at position 0.0 and 1.0.
//For horizontal scaling this value may normally be set to 0.
#define G2SB_CTX4_G2HDDAINILS_0_HDINI_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2HDDAINILS_0_HDINI_FIELD                     (_MK_MASK_CONST(0xff) << G2SB_CTX4_G2HDDAINILS_0_HDINI_SHIFT)
#define G2SB_CTX4_G2HDDAINILS_0_HDINI_RANGE                     7:0
#define G2SB_CTX4_G2HDDAINILS_0_HDINI_WOFFSET                   0x0
#define G2SB_CTX4_G2HDDAINILS_0_HDINI_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2HDDAINILS_0_HDINI_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2HDDAINILS_0_HDINI_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2HDDAINILS_0_HDINI_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2CSCFIRST_0  //{sb,sbm,index=15}
// The next 3 registers contain 8 parameters used by the YCbCr (YUV)
// to RGB color space conversion logic.  This logic can also be
// used for RGB gain/gamma correction in RGB to RGB modes, and for
// luma gain in YUV to YUV modes.  For SC20 two new parameters
// (G2U, G2V) have been added for RGB to YUV conversion.  These are
// in address 0x38.  The equtions have the form:
//    YUV->RGB
// R = (CYX * (yin + YOS)) + ((CUR * uin) + (CVR * vin))
// G = (CYX * (yin + YOS)) + ((CUG * uin) + (CVG * vin))
// B = (CYX * (yin + YOS)) + ((CUB * uin) + (CVB * vin))
//    RGB -> RGB
// R = (CVR * rin) + (CUR * bin)
// G = (CYX * (gin + YOS)) + ((CUG * bin) + (CVG * rin))
// B = (CUB * bin) + (CVB * rin)
//    YUV -> YUV (not what rtl does: see note below)
// Y = (CYX * yin + YOS) + ((CUB * uin) + (CVB * vin))
// U = (CUG * uin) + (CVG * vin)
// V = (CVR * vin) + (CUR * uin)
//    RGB -> YUV (new for SC20)
// Y = (CVB * rin) + (CUB * bin) + (CYX * gin) + YOS
// U = (CVG * rin) + (CUG * bin) + (G2U * gin)
// V = (CVR * rin) + (CUR * bin) + (G2V * gin)
//
// NOTE: YUV->YUV above is definitely wrong
// the cmodel *appears* to match the RTL with the following pseudo-code:
//
//if (yuv2rgb)
//    (r,g,b) = matrix*(y+sbreg_yos,u,v)
//    matrix:
//        sbreg_cyx, sbreg_cur, sbreg_cvr,
//        sbreg_cyx, sbreg_cug, sbreg_cvg,
//        sbreg_cyx, sbreg_cub, sbreg_cvb,
//else if (rgb2rgb)
//    (r,g,b) = matrix*(r,g+sbreg_yos,b)
//    matrix:
//        sbreg_cvr, 0,         sbreg_cur,
//        sbreg_cvg, sbreg_cyx, sbreg_cug,
//        sbreg_cvb, 0,         sbreg_cub,
//else if (yuv2yuv)
//    (y,u,v) = matrix*(y,u,v)
//    matrix:
//        sbreg_cub, 0,         sbreg_cvb,
//        sbreg_cug, sbreg_cyx, sbreg_cvg,
//        sbreg_cur, 0,         sbreg_cvr,
//else if (rgb2yuv)
//    (y,u,v) = matrix*(r,g,b) +(sbreg_yos,0,0)
//    matrix:
//        sbreg_cvb, sbreg_cyx, sbreg_cub,
//        sbreg_cvg, sbreg_g2u, sbreg_cug,
//        sbreg_cvr, sbreg_g2v, sbreg_cur,
#define G2SB_CTX4_G2CSCFIRST_0                  _MK_ADDR_CONST(0x5015)
#define G2SB_CTX4_G2CSCFIRST_0_SECURE                   0x0
#define G2SB_CTX4_G2CSCFIRST_0_WORD_COUNT                       0x1
#define G2SB_CTX4_G2CSCFIRST_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCFIRST_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCFIRST_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCFIRST_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCFIRST_0_READ_MASK                        _MK_MASK_CONST(0xff3ff3ff)
#define G2SB_CTX4_G2CSCFIRST_0_WRITE_MASK                       _MK_MASK_CONST(0xff3ff3ff)
// multiplier for U/B for Y or B generation.
// consists of a sign bit and 9-bit magnitude (s2.7).
// For YUV->RGB, the recommended value is 2.0172 (decimal) or 0x102.
// If source data is in RGB format, this parameter
// may be used as gain adjustment for B component.
// For SC20, this register changes precision when doing RGB to YUV
// conversion (SIFMT=1xxx, DIFMT=0xxx).  CUB becomes s1.8 and the
// recommended value is +0.098 or 0x019
//11-10  Reserved
#define G2SB_CTX4_G2CSCFIRST_0_CUB_SHIFT                        _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2CSCFIRST_0_CUB_FIELD                        (_MK_MASK_CONST(0x3ff) << G2SB_CTX4_G2CSCFIRST_0_CUB_SHIFT)
#define G2SB_CTX4_G2CSCFIRST_0_CUB_RANGE                        9:0
#define G2SB_CTX4_G2CSCFIRST_0_CUB_WOFFSET                      0x0
#define G2SB_CTX4_G2CSCFIRST_0_CUB_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCFIRST_0_CUB_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCFIRST_0_CUB_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCFIRST_0_CUB_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// multiplier for V/R for V or R generation.
//This parameter consists of a sign bit and 9-bit magnitude (s2.7)
// For YUV->RGB the recommended value is 1.5960 (decimal) or 0x0CC
//If source data is in RGB format, this parameter
// may be used as gain adjustment for R component.
// For RGB->YUV the recommended value is +0.439 (decimal) or 0x038
//23-22  Reserved
#define G2SB_CTX4_G2CSCFIRST_0_CVR_SHIFT                        _MK_SHIFT_CONST(12)
#define G2SB_CTX4_G2CSCFIRST_0_CVR_FIELD                        (_MK_MASK_CONST(0x3ff) << G2SB_CTX4_G2CSCFIRST_0_CVR_SHIFT)
#define G2SB_CTX4_G2CSCFIRST_0_CVR_RANGE                        21:12
#define G2SB_CTX4_G2CSCFIRST_0_CVR_WOFFSET                      0x0
#define G2SB_CTX4_G2CSCFIRST_0_CVR_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCFIRST_0_CVR_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCFIRST_0_CVR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCFIRST_0_CVR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

//Y-Offset (YOFFSET[7:0]) for YUV generation
//This parameter consists of 8-bit 2's complement in the range [-128,127].
// For YUV->RGB the recommended value is -16 (decimal) or 0xF0
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is +16 (decimal) or 0x10
#define G2SB_CTX4_G2CSCFIRST_0_YOS_SHIFT                        _MK_SHIFT_CONST(24)
#define G2SB_CTX4_G2CSCFIRST_0_YOS_FIELD                        (_MK_MASK_CONST(0xff) << G2SB_CTX4_G2CSCFIRST_0_YOS_SHIFT)
#define G2SB_CTX4_G2CSCFIRST_0_YOS_RANGE                        31:24
#define G2SB_CTX4_G2CSCFIRST_0_YOS_WOFFSET                      0x0
#define G2SB_CTX4_G2CSCFIRST_0_YOS_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCFIRST_0_YOS_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCFIRST_0_YOS_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCFIRST_0_YOS_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2CSCSECOND_0  //{sb,sbm,index=16}
#define G2SB_CTX4_G2CSCSECOND_0                 _MK_ADDR_CONST(0x5016)
#define G2SB_CTX4_G2CSCSECOND_0_SECURE                  0x0
#define G2SB_CTX4_G2CSCSECOND_0_WORD_COUNT                      0x1
#define G2SB_CTX4_G2CSCSECOND_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCSECOND_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCSECOND_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCSECOND_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCSECOND_0_READ_MASK                       _MK_MASK_CONST(0xff3ff1ff)
#define G2SB_CTX4_G2CSCSECOND_0_WRITE_MASK                      _MK_MASK_CONST(0xff3ff1ff)
// multiplier for U/B for U or G generation.
// consists of a sign bit and 8-bit magnitude (s1.7)
// For YUV->RGB the recommended value is -0.3918 (decimal) or 0x132
// For  RGB->RGB, this parameter should be set to 0
// For  YUV->YUV, this parameter should be set to 1 (0x080)
// For RGB->YUV the recommended value is +0.439 (decimal) or 0x038
//11-9  Reserved
#define G2SB_CTX4_G2CSCSECOND_0_CUG_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2CSCSECOND_0_CUG_FIELD                       (_MK_MASK_CONST(0x1ff) << G2SB_CTX4_G2CSCSECOND_0_CUG_SHIFT)
#define G2SB_CTX4_G2CSCSECOND_0_CUG_RANGE                       8:0
#define G2SB_CTX4_G2CSCSECOND_0_CUG_WOFFSET                     0x0
#define G2SB_CTX4_G2CSCSECOND_0_CUG_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCSECOND_0_CUG_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCSECOND_0_CUG_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCSECOND_0_CUG_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// multiplier for U/B for V or R generation.
//This parameter consists of a sign bit and 9-bit magnitude (s2.7)
//  For YUV->RGB normally this parameter is programmed to 0.0.
// This parameter takes non-zero value if hue is rotated.
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is -0.071 (decimal) or 0x209
//23-22 Reserved
#define G2SB_CTX4_G2CSCSECOND_0_CUR_SHIFT                       _MK_SHIFT_CONST(12)
#define G2SB_CTX4_G2CSCSECOND_0_CUR_FIELD                       (_MK_MASK_CONST(0x3ff) << G2SB_CTX4_G2CSCSECOND_0_CUR_SHIFT)
#define G2SB_CTX4_G2CSCSECOND_0_CUR_RANGE                       21:12
#define G2SB_CTX4_G2CSCSECOND_0_CUR_WOFFSET                     0x0
#define G2SB_CTX4_G2CSCSECOND_0_CUR_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCSECOND_0_CUR_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCSECOND_0_CUR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCSECOND_0_CUR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// multiplier for Y/G (G gain)
//This positive-only parameter consists of 8-bit magnitude (1.7)
// For YUV->YUV the recommended value is 1.1644 (decimal) or 0x95
// For YUV->YUV or RGB->RGB this may be used as gain adjustment
// for Y or G component.
// For RGB->YUV the recommended value is +0.504 (decimal) or 0x041
#define G2SB_CTX4_G2CSCSECOND_0_CYX_SHIFT                       _MK_SHIFT_CONST(24)
#define G2SB_CTX4_G2CSCSECOND_0_CYX_FIELD                       (_MK_MASK_CONST(0xff) << G2SB_CTX4_G2CSCSECOND_0_CYX_SHIFT)
#define G2SB_CTX4_G2CSCSECOND_0_CYX_RANGE                       31:24
#define G2SB_CTX4_G2CSCSECOND_0_CYX_WOFFSET                     0x0
#define G2SB_CTX4_G2CSCSECOND_0_CYX_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCSECOND_0_CYX_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCSECOND_0_CYX_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCSECOND_0_CYX_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2CSCTHIRD_0  //{sb,sbm,index=17}
#define G2SB_CTX4_G2CSCTHIRD_0                  _MK_ADDR_CONST(0x5017)
#define G2SB_CTX4_G2CSCTHIRD_0_SECURE                   0x0
#define G2SB_CTX4_G2CSCTHIRD_0_WORD_COUNT                       0x1
#define G2SB_CTX4_G2CSCTHIRD_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCTHIRD_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCTHIRD_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCTHIRD_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCTHIRD_0_READ_MASK                        _MK_MASK_CONST(0x3ff01ff)
#define G2SB_CTX4_G2CSCTHIRD_0_WRITE_MASK                       _MK_MASK_CONST(0x3ff01ff)
// multiplier for V/R for U or G generation.
//This parameter consists of a sign bit and 8-bit magnitude (s1.7)
// For YUV->RGB the recommended value is -0.8130 (decimal) or 0x168
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is -0.148 (decimal) or 0x113
#define G2SB_CTX4_G2CSCTHIRD_0_CVG_SHIFT                        _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2CSCTHIRD_0_CVG_FIELD                        (_MK_MASK_CONST(0x1ff) << G2SB_CTX4_G2CSCTHIRD_0_CVG_SHIFT)
#define G2SB_CTX4_G2CSCTHIRD_0_CVG_RANGE                        8:0
#define G2SB_CTX4_G2CSCTHIRD_0_CVG_WOFFSET                      0x0
#define G2SB_CTX4_G2CSCTHIRD_0_CVG_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCTHIRD_0_CVG_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCTHIRD_0_CVG_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCTHIRD_0_CVG_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// multiplier for V/R for Y or B generation.
//This parameter consists of a sign bit and 9-bit magnitude (s2.7)
//For YUV->RGB, normally this parameter is programmed to 0.0.
// This coefficient takes non-zero value if hue is rotated.
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is +0.257 (decimal) or 0x021
#define G2SB_CTX4_G2CSCTHIRD_0_CVB_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_CTX4_G2CSCTHIRD_0_CVB_FIELD                        (_MK_MASK_CONST(0x3ff) << G2SB_CTX4_G2CSCTHIRD_0_CVB_SHIFT)
#define G2SB_CTX4_G2CSCTHIRD_0_CVB_RANGE                        25:16
#define G2SB_CTX4_G2CSCTHIRD_0_CVB_WOFFSET                      0x0
#define G2SB_CTX4_G2CSCTHIRD_0_CVB_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCTHIRD_0_CVB_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCTHIRD_0_CVB_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCTHIRD_0_CVB_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// StretchBLT, Color/Chroma Key Lower Limit Register

// Register G2SB_CTX4_G2CMKEYL_0  //{sb,sbm,index=18}
// When key generation is enabled, the value of this register is the
// lower color/chroma limit and G2CMKEYU is the upper color/chroma
// limit for component pixel data.
// Three component signal values (YCrCb/YUV or RGB) of
// every output pixel are compared to a set of three
// ranges that are specified by three pairs of lower and
// upper color/chroma key values.  If the Key Polarity is
// 0, the Key is set to 1 only when all three component values
// of an input pixel are respectively within the set
// of ranges (inclusive of the limit values), else the Key is set to 0.
// If the Key Polarity is 1, the Key is set to 1
// when any of the three component values of an input pixel
// are outside the set of ranges, else the Key is set to 0.
#define G2SB_CTX4_G2CMKEYL_0                    _MK_ADDR_CONST(0x5018)
#define G2SB_CTX4_G2CMKEYL_0_SECURE                     0x0
#define G2SB_CTX4_G2CMKEYL_0_WORD_COUNT                         0x1
#define G2SB_CTX4_G2CMKEYL_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMKEYL_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMKEYL_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMKEYL_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMKEYL_0_READ_MASK                  _MK_MASK_CONST(0xffffff)
#define G2SB_CTX4_G2CMKEYL_0_WRITE_MASK                         _MK_MASK_CONST(0xffffff)
// B or Y Color/Chroma Key Lower Limit (CKBL[7:0])
#define G2SB_CTX4_G2CMKEYL_0_CKBL_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2CMKEYL_0_CKBL_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX4_G2CMKEYL_0_CKBL_SHIFT)
#define G2SB_CTX4_G2CMKEYL_0_CKBL_RANGE                 7:0
#define G2SB_CTX4_G2CMKEYL_0_CKBL_WOFFSET                       0x0
#define G2SB_CTX4_G2CMKEYL_0_CKBL_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMKEYL_0_CKBL_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMKEYL_0_CKBL_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMKEYL_0_CKBL_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//G or Cb Color Chroma Key Lower Limit (CKGL[7:0])
// Cb signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity
// from the minimum signal level to the maximum signal level.
#define G2SB_CTX4_G2CMKEYL_0_CKGL_SHIFT                 _MK_SHIFT_CONST(8)
#define G2SB_CTX4_G2CMKEYL_0_CKGL_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX4_G2CMKEYL_0_CKGL_SHIFT)
#define G2SB_CTX4_G2CMKEYL_0_CKGL_RANGE                 15:8
#define G2SB_CTX4_G2CMKEYL_0_CKGL_WOFFSET                       0x0
#define G2SB_CTX4_G2CMKEYL_0_CKGL_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMKEYL_0_CKGL_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMKEYL_0_CKGL_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMKEYL_0_CKGL_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//R or Cr Color Chroma Key Lower Limit (CKRL[7:0])
// Cr signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity from
// the minimum signal level to the maximum signal level.
//31-24 Reserved
#define G2SB_CTX4_G2CMKEYL_0_CKRL_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_CTX4_G2CMKEYL_0_CKRL_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX4_G2CMKEYL_0_CKRL_SHIFT)
#define G2SB_CTX4_G2CMKEYL_0_CKRL_RANGE                 23:16
#define G2SB_CTX4_G2CMKEYL_0_CKRL_WOFFSET                       0x0
#define G2SB_CTX4_G2CMKEYL_0_CKRL_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMKEYL_0_CKRL_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMKEYL_0_CKRL_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMKEYL_0_CKRL_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//StretchBLT, Color/Chroma Key Upper Limit Register

// Register G2SB_CTX4_G2CMKEYU_0  //{sb,sbm,index=19}
#define G2SB_CTX4_G2CMKEYU_0                    _MK_ADDR_CONST(0x5019)
#define G2SB_CTX4_G2CMKEYU_0_SECURE                     0x0
#define G2SB_CTX4_G2CMKEYU_0_WORD_COUNT                         0x1
#define G2SB_CTX4_G2CMKEYU_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMKEYU_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMKEYU_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMKEYU_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMKEYU_0_READ_MASK                  _MK_MASK_CONST(0xffffff)
#define G2SB_CTX4_G2CMKEYU_0_WRITE_MASK                         _MK_MASK_CONST(0xffffff)
//This is B or Y color/chroma key upper limit value.
#define G2SB_CTX4_G2CMKEYU_0_CKBU_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2CMKEYU_0_CKBU_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX4_G2CMKEYU_0_CKBU_SHIFT)
#define G2SB_CTX4_G2CMKEYU_0_CKBU_RANGE                 7:0
#define G2SB_CTX4_G2CMKEYU_0_CKBU_WOFFSET                       0x0
#define G2SB_CTX4_G2CMKEYU_0_CKBU_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMKEYU_0_CKBU_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMKEYU_0_CKBU_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMKEYU_0_CKBU_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// G or Cb Color/Chroma Key Upper Limit (CKGU[7:0])
// Cb signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity
// the minimum signal level to the maximum signal level.
#define G2SB_CTX4_G2CMKEYU_0_CKGU_SHIFT                 _MK_SHIFT_CONST(8)
#define G2SB_CTX4_G2CMKEYU_0_CKGU_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX4_G2CMKEYU_0_CKGU_SHIFT)
#define G2SB_CTX4_G2CMKEYU_0_CKGU_RANGE                 15:8
#define G2SB_CTX4_G2CMKEYU_0_CKGU_WOFFSET                       0x0
#define G2SB_CTX4_G2CMKEYU_0_CKGU_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMKEYU_0_CKGU_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMKEYU_0_CKGU_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMKEYU_0_CKGU_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// R or Cr Color Chroma Key Upper Limit (CKRU[7:0])
// Cr signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity from
// the minimum signal level to the maximum signal level.
//31-24  Reserved
#define G2SB_CTX4_G2CMKEYU_0_CKRU_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_CTX4_G2CMKEYU_0_CKRU_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX4_G2CMKEYU_0_CKRU_SHIFT)
#define G2SB_CTX4_G2CMKEYU_0_CKRU_RANGE                 23:16
#define G2SB_CTX4_G2CMKEYU_0_CKRU_WOFFSET                       0x0
#define G2SB_CTX4_G2CMKEYU_0_CKRU_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMKEYU_0_CKRU_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMKEYU_0_CKRU_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CMKEYU_0_CKRU_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// StretchBLT, Source Image Data U base address A-buffer

// Register G2SB_CTX4_G2UBA_A_0  //{sb,sbm,index=1a}
#define G2SB_CTX4_G2UBA_A_0                     _MK_ADDR_CONST(0x501a)
#define G2SB_CTX4_G2UBA_A_0_SECURE                      0x0
#define G2SB_CTX4_G2UBA_A_0_WORD_COUNT                  0x1
#define G2SB_CTX4_G2UBA_A_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2UBA_A_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2UBA_A_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2UBA_A_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2UBA_A_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2UBA_A_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Start Address of  Source U-image Area, 4:2:0 Format.
// This parameter specifies the start address of source image stored in
// the image buffer memory.
// The [3:0] bits have to be 0, since memory client will assemble YUV into one
// 422 format.
#define G2SB_CTX4_G2UBA_A_0_SU1SA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2UBA_A_0_SU1SA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX4_G2UBA_A_0_SU1SA_SHIFT)
#define G2SB_CTX4_G2UBA_A_0_SU1SA_RANGE                 31:0
#define G2SB_CTX4_G2UBA_A_0_SU1SA_WOFFSET                       0x0
#define G2SB_CTX4_G2UBA_A_0_SU1SA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2UBA_A_0_SU1SA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2UBA_A_0_SU1SA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2UBA_A_0_SU1SA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2VBA_A_0  //{sb,sbm,index=1b}
#define G2SB_CTX4_G2VBA_A_0                     _MK_ADDR_CONST(0x501b)
#define G2SB_CTX4_G2VBA_A_0_SECURE                      0x0
#define G2SB_CTX4_G2VBA_A_0_WORD_COUNT                  0x1
#define G2SB_CTX4_G2VBA_A_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VBA_A_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VBA_A_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VBA_A_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VBA_A_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2VBA_A_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Start Address of  Source V-image Area, 4:2:0 Format.
// This parameter specifies the start address of  source image stored in
// the image buffer memory.
// The [3:0] bits have to be 0, since memory client will assemble YUV into one
// 422 format.
#define G2SB_CTX4_G2VBA_A_0_SV1SA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2VBA_A_0_SV1SA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX4_G2VBA_A_0_SV1SA_SHIFT)
#define G2SB_CTX4_G2VBA_A_0_SV1SA_RANGE                 31:0
#define G2SB_CTX4_G2VBA_A_0_SV1SA_WOFFSET                       0x0
#define G2SB_CTX4_G2VBA_A_0_SV1SA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VBA_A_0_SV1SA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VBA_A_0_SV1SA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VBA_A_0_SV1SA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2SBFORMAT_0  //{sb,sbm,index=1c}
#define G2SB_CTX4_G2SBFORMAT_0                  _MK_ADDR_CONST(0x501c)
#define G2SB_CTX4_G2SBFORMAT_0_SECURE                   0x0
#define G2SB_CTX4_G2SBFORMAT_0_WORD_COUNT                       0x1
#define G2SB_CTX4_G2SBFORMAT_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SBFORMAT_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SBFORMAT_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SBFORMAT_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SBFORMAT_0_READ_MASK                        _MK_MASK_CONST(0xffffdf1f)
#define G2SB_CTX4_G2SBFORMAT_0_WRITE_MASK                       _MK_MASK_CONST(0xffffdf1f)
// This parameter defines the data format of source input.
// There are two groups of data formats, RGB format and YCbCr (YUV) format.
// CbCr (UV) components may be represented in either offset binary or 2's complement.
//00000 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00001 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00010 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00011 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00100 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00101 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00110 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00111 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//01000 B5G6R5 5-6-5 {R[4:0], G[5:0], B[4:0]}
//01001 RESERVED
//01010 RESERVED
//01011 RESERVED
//01100 B5G6R5 5-6-5 Byte-swapped {G[2:0], B[4:0], R[4:0], G[5:3]}
//01101 RESERVED
//01110 R8G8B8A8
//01111 B8G8R8A8
//1xxxx RESERVED
//
// StretchBlit Inputs
// ==================
// RGB    inputs = {B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8}
// YUV420 input  = {YUV420 is converted into 4:2:2 UYVY via memory client}
// YUV422 inputs = {U8Y8V8Y8_OB, Y8U8Y8V8_OB, V8Y8U8Y8_OB, U8Y8V8Y8_OB, U8Y8V8Y8_TC, Y8U8Y8V8_TC, Y8V8Y8U8_TC, V8Y8U8Y8_TC}
//
// StretchBlit Outputs
// ===================
// RGB    outputs = {B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8}
// YUV422 outputs = {U8Y8V8Y8_OB, Y8U8Y8V8_OB, V8Y8U8Y8_OB, U8Y8V8Y8_OB, U8Y8V8Y8_TC, Y8U8Y8V8_TC, Y8V8Y8U8_TC, V8Y8U8Y8_TC}
//
// StretchBlit Input/Output Rules
// ==============================
//
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|    src format                                                | internal sb format |      dst format                                           |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|  B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8                        |      R8G8B8A8      |  B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8                     |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|  U8Y8V8Y8_*, Y8U8Y8V8_*, V8Y8U8Y8_*, U8Y8V8Y8_*, YUV420      |      YUV 4:4:4     |  U8Y8V8Y8_*, Y8U8Y8V8_*, V8Y8U8Y8_*, U8Y8V8Y8_*           |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|  U8Y8V8Y8_*, Y8U8Y8V8_*, V8Y8U8Y8_*, U8Y8V8Y8_*, YUV420      |      YUV 4:4:4     |  B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8                     |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//
//  StretchBlit color space converter supports YUV->RGB, YUV->YUV (gain) and RGB->RGB (gain).  There is no support for RGB->YUV.
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_FIELD                      (_MK_MASK_CONST(0x1f) << G2SB_CTX4_G2SBFORMAT_0_SIFMT_SHIFT)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_RANGE                      4:0
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_WOFFSET                    0x0
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_U8Y8V8Y8_OB                        _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_Y8U8Y8V8_OB                        _MK_ENUM_CONST(1)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_Y8V8Y8U8_OB                        _MK_ENUM_CONST(2)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_V8Y8U8Y8_OB                        _MK_ENUM_CONST(3)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_U8Y8V8Y8_TC                        _MK_ENUM_CONST(4)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_Y8U8Y8V8_TC                        _MK_ENUM_CONST(5)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_Y8V8Y8U8_TC                        _MK_ENUM_CONST(6)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_V8Y8U8Y8_TC                        _MK_ENUM_CONST(7)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_B5G6R5                     _MK_ENUM_CONST(8)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_RESERVED9                  _MK_ENUM_CONST(9)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_RESERVED10                 _MK_ENUM_CONST(10)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_RESERVED11                 _MK_ENUM_CONST(11)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_B5G6R5BS                   _MK_ENUM_CONST(12)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_RESERVED13                 _MK_ENUM_CONST(13)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_R8G8B8A8                   _MK_ENUM_CONST(14)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_B8G8R8A8                   _MK_ENUM_CONST(15)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_RESERVED16                 _MK_ENUM_CONST(16)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_RESERVED17                 _MK_ENUM_CONST(17)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_RESERVED18                 _MK_ENUM_CONST(18)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_RESERVED19                 _MK_ENUM_CONST(19)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_RESERVED20                 _MK_ENUM_CONST(20)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_RESERVED21                 _MK_ENUM_CONST(21)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_RESERVED22                 _MK_ENUM_CONST(22)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_RESERVED23                 _MK_ENUM_CONST(23)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_RESERVED24                 _MK_ENUM_CONST(24)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_RESERVED25                 _MK_ENUM_CONST(25)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_RESERVED26                 _MK_ENUM_CONST(26)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_RESERVED27                 _MK_ENUM_CONST(27)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_RESERVED28                 _MK_ENUM_CONST(28)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_RESERVED29                 _MK_ENUM_CONST(29)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_RESERVED30                 _MK_ENUM_CONST(30)
#define G2SB_CTX4_G2SBFORMAT_0_SIFMT_RESERVED31                 _MK_ENUM_CONST(31)

//Destination Image Data FormatThis parameter defines the data format of distination output.
// There are two groups of data formats, RGB and YCbCr (YUV) format.
// CbCr (UV) components may be represented in either offset binary or 2's complement.
//00000 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00001 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00010 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00011 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00100 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00101 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00110 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00111 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//01000 bpp16 5-6-5 {R[4:0], G[5:0], B[4:0]}
//01001 RESERVED
//01010 RESERVED
//01011 RESERVED
//01100 bpp16 5-6-5 Byte-swapped {G[2:0], B[4:0], R[4:0], G[5:3]}
//01101 RESERVED
//01110 R8G8B8A8
//01111 B8G8R8A8
//1xxxx RESERVED
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_FIELD                      (_MK_MASK_CONST(0x1f) << G2SB_CTX4_G2SBFORMAT_0_DIFMT_SHIFT)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_RANGE                      12:8
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_WOFFSET                    0x0
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_U8Y8V8Y8_OB                        _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_Y8U8Y8V8_OB                        _MK_ENUM_CONST(1)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_Y8V8Y8U8_OB                        _MK_ENUM_CONST(2)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_V8Y8U8Y8_OB                        _MK_ENUM_CONST(3)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_U8Y8V8Y8_TC                        _MK_ENUM_CONST(4)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_Y8U8Y8V8_TC                        _MK_ENUM_CONST(5)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_Y8V8Y8U8_TC                        _MK_ENUM_CONST(6)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_V8Y8U8Y8_TC                        _MK_ENUM_CONST(7)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_B5G6R5                     _MK_ENUM_CONST(8)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_RESERVED9                  _MK_ENUM_CONST(9)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_RESERVED10                 _MK_ENUM_CONST(10)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_RESERVED11                 _MK_ENUM_CONST(11)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_B5G6R5BS                   _MK_ENUM_CONST(12)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_RESERVED13                 _MK_ENUM_CONST(13)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_R8G8B8A8                   _MK_ENUM_CONST(14)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_B8G8R8A8                   _MK_ENUM_CONST(15)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_RESERVED16                 _MK_ENUM_CONST(16)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_RESERVED17                 _MK_ENUM_CONST(17)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_RESERVED18                 _MK_ENUM_CONST(18)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_RESERVED19                 _MK_ENUM_CONST(19)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_RESERVED20                 _MK_ENUM_CONST(20)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_RESERVED21                 _MK_ENUM_CONST(21)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_RESERVED22                 _MK_ENUM_CONST(22)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_RESERVED23                 _MK_ENUM_CONST(23)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_RESERVED24                 _MK_ENUM_CONST(24)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_RESERVED25                 _MK_ENUM_CONST(25)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_RESERVED26                 _MK_ENUM_CONST(26)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_RESERVED27                 _MK_ENUM_CONST(27)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_RESERVED28                 _MK_ENUM_CONST(28)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_RESERVED29                 _MK_ENUM_CONST(29)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_RESERVED30                 _MK_ENUM_CONST(30)
#define G2SB_CTX4_G2SBFORMAT_0_DIFMT_RESERVED31                 _MK_ENUM_CONST(31)

// ENABLE - SB needs to send a RAISE_BUFFER control bit to EPP
// DISABLE - do nothing.
#define G2SB_CTX4_G2SBFORMAT_0_RAISEBUFFEREN_SHIFT                      _MK_SHIFT_CONST(14)
#define G2SB_CTX4_G2SBFORMAT_0_RAISEBUFFEREN_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2SBFORMAT_0_RAISEBUFFEREN_SHIFT)
#define G2SB_CTX4_G2SBFORMAT_0_RAISEBUFFEREN_RANGE                      14:14
#define G2SB_CTX4_G2SBFORMAT_0_RAISEBUFFEREN_WOFFSET                    0x0
#define G2SB_CTX4_G2SBFORMAT_0_RAISEBUFFEREN_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SBFORMAT_0_RAISEBUFFEREN_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SBFORMAT_0_RAISEBUFFEREN_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SBFORMAT_0_RAISEBUFFEREN_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SBFORMAT_0_RAISEBUFFEREN_DISABLE                    _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2SBFORMAT_0_RAISEBUFFEREN_ENABLE                     _MK_ENUM_CONST(1)

// ENABLE - SB needs to send a RAISE_FRAME control bit to EPP
// DISABLE - do nothing.
#define G2SB_CTX4_G2SBFORMAT_0_RAISEFRAMEEN_SHIFT                       _MK_SHIFT_CONST(15)
#define G2SB_CTX4_G2SBFORMAT_0_RAISEFRAMEEN_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2SBFORMAT_0_RAISEFRAMEEN_SHIFT)
#define G2SB_CTX4_G2SBFORMAT_0_RAISEFRAMEEN_RANGE                       15:15
#define G2SB_CTX4_G2SBFORMAT_0_RAISEFRAMEEN_WOFFSET                     0x0
#define G2SB_CTX4_G2SBFORMAT_0_RAISEFRAMEEN_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SBFORMAT_0_RAISEFRAMEEN_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SBFORMAT_0_RAISEFRAMEEN_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SBFORMAT_0_RAISEFRAMEEN_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SBFORMAT_0_RAISEFRAMEEN_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2SBFORMAT_0_RAISEFRAMEEN_ENABLE                      _MK_ENUM_CONST(1)

// Raise buffer vector value.
#define G2SB_CTX4_G2SBFORMAT_0_RAISEBUFFERVALUE_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX4_G2SBFORMAT_0_RAISEBUFFERVALUE_FIELD                   (_MK_MASK_CONST(0xff) << G2SB_CTX4_G2SBFORMAT_0_RAISEBUFFERVALUE_SHIFT)
#define G2SB_CTX4_G2SBFORMAT_0_RAISEBUFFERVALUE_RANGE                   23:16
#define G2SB_CTX4_G2SBFORMAT_0_RAISEBUFFERVALUE_WOFFSET                 0x0
#define G2SB_CTX4_G2SBFORMAT_0_RAISEBUFFERVALUE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SBFORMAT_0_RAISEBUFFERVALUE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SBFORMAT_0_RAISEBUFFERVALUE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SBFORMAT_0_RAISEBUFFERVALUE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Raise Fram vector value.
#define G2SB_CTX4_G2SBFORMAT_0_RAISEFRAMEVALUE_SHIFT                    _MK_SHIFT_CONST(24)
#define G2SB_CTX4_G2SBFORMAT_0_RAISEFRAMEVALUE_FIELD                    (_MK_MASK_CONST(0xff) << G2SB_CTX4_G2SBFORMAT_0_RAISEFRAMEVALUE_SHIFT)
#define G2SB_CTX4_G2SBFORMAT_0_RAISEFRAMEVALUE_RANGE                    31:24
#define G2SB_CTX4_G2SBFORMAT_0_RAISEFRAMEVALUE_WOFFSET                  0x0
#define G2SB_CTX4_G2SBFORMAT_0_RAISEFRAMEVALUE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SBFORMAT_0_RAISEFRAMEVALUE_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SBFORMAT_0_RAISEFRAMEVALUE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SBFORMAT_0_RAISEFRAMEVALUE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2CONTROLSB_0  //{sb,sbm,index=1d}
#define G2SB_CTX4_G2CONTROLSB_0                 _MK_ADDR_CONST(0x501d)
#define G2SB_CTX4_G2CONTROLSB_0_SECURE                  0x0
#define G2SB_CTX4_G2CONTROLSB_0_WORD_COUNT                      0x1
#define G2SB_CTX4_G2CONTROLSB_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_RESET_MASK                      _MK_MASK_CONST(0xdfffa4f8)
#define G2SB_CTX4_G2CONTROLSB_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_READ_MASK                       _MK_MASK_CONST(0xdfffa7f8)
#define G2SB_CTX4_G2CONTROLSB_0_WRITE_MASK                      _MK_MASK_CONST(0xdfffa7f8)
//yuv422 plannar rotated
#define G2SB_CTX4_G2CONTROLSB_0_YUV422ROTATION_SHIFT                    _MK_SHIFT_CONST(3)
#define G2SB_CTX4_G2CONTROLSB_0_YUV422ROTATION_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLSB_0_YUV422ROTATION_SHIFT)
#define G2SB_CTX4_G2CONTROLSB_0_YUV422ROTATION_RANGE                    3:3
#define G2SB_CTX4_G2CONTROLSB_0_YUV422ROTATION_WOFFSET                  0x0
#define G2SB_CTX4_G2CONTROLSB_0_YUV422ROTATION_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_YUV422ROTATION_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLSB_0_YUV422ROTATION_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_YUV422ROTATION_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//source data is yuv422 planar valid when imode==PLANAR
#define G2SB_CTX4_G2CONTROLSB_0_YUV422PLANAR_SHIFT                      _MK_SHIFT_CONST(4)
#define G2SB_CTX4_G2CONTROLSB_0_YUV422PLANAR_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLSB_0_YUV422PLANAR_SHIFT)
#define G2SB_CTX4_G2CONTROLSB_0_YUV422PLANAR_RANGE                      4:4
#define G2SB_CTX4_G2CONTROLSB_0_YUV422PLANAR_WOFFSET                    0x0
#define G2SB_CTX4_G2CONTROLSB_0_YUV422PLANAR_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_YUV422PLANAR_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLSB_0_YUV422PLANAR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_YUV422PLANAR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Source (input) Data Mode  (IMODE) This parameter defines the data mode of source input.
// 0: Multiplexed Mode (data format is specified by SIFMT[2:0])
// One block of source data in the Image Buffer memory contains
// multiplexed component signals.
// 1: Planar mode, 4:2:0 YUV (SIFMT[2] specifies data format of U/V components)
// Three blocks of source data in the Image Buffer memory contain separate
// Y, U, and V component signals.
//
//  For circular buffer input to gr2d, the input format can not be planar.  It must be multiplex.
//    i.e. no YUV420 planar circular buffer input to gr2d.
#define G2SB_CTX4_G2CONTROLSB_0_IMODE_SHIFT                     _MK_SHIFT_CONST(5)
#define G2SB_CTX4_G2CONTROLSB_0_IMODE_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLSB_0_IMODE_SHIFT)
#define G2SB_CTX4_G2CONTROLSB_0_IMODE_RANGE                     5:5
#define G2SB_CTX4_G2CONTROLSB_0_IMODE_WOFFSET                   0x0
#define G2SB_CTX4_G2CONTROLSB_0_IMODE_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_IMODE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLSB_0_IMODE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_IMODE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_IMODE_MULTIPLEX                 _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLSB_0_IMODE_PLANAR                    _MK_ENUM_CONST(1)

//enable alpha vertical filter
#define G2SB_CTX4_G2CONTROLSB_0_ENAVF_SHIFT                     _MK_SHIFT_CONST(6)
#define G2SB_CTX4_G2CONTROLSB_0_ENAVF_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLSB_0_ENAVF_SHIFT)
#define G2SB_CTX4_G2CONTROLSB_0_ENAVF_RANGE                     6:6
#define G2SB_CTX4_G2CONTROLSB_0_ENAVF_WOFFSET                   0x0
#define G2SB_CTX4_G2CONTROLSB_0_ENAVF_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_ENAVF_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLSB_0_ENAVF_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_ENAVF_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_ENAVF_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLSB_0_ENAVF_ENABLE                    _MK_ENUM_CONST(1)

// enable horizontal alpha filtering
// if disabled, use the alpha value of third tap for output pixel
//U,V line stride in 4:2:0  Format,
#define G2SB_CTX4_G2CONTROLSB_0_ENAHF_SHIFT                     _MK_SHIFT_CONST(7)
#define G2SB_CTX4_G2CONTROLSB_0_ENAHF_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLSB_0_ENAHF_SHIFT)
#define G2SB_CTX4_G2CONTROLSB_0_ENAHF_RANGE                     7:7
#define G2SB_CTX4_G2CONTROLSB_0_ENAHF_WOFFSET                   0x0
#define G2SB_CTX4_G2CONTROLSB_0_ENAHF_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_ENAHF_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLSB_0_ENAHF_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_ENAHF_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_ENAHF_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLSB_0_ENAHF_ENABLE                    _MK_ENUM_CONST(1)

//   00= 1/2 of Luma Buffer Stride; in this case
//       Luma Buffer Stride should be multiple
//       of 2 bytes.
//   01= Equal to Luma Buffer Stride
//   10= 1/4 of Luma Buffer Stride; in this case
//       Luma Buffer Stride should be multiple
//       of 4 bytes.
//   11= use uvstride.
// Note: Use care when using a tiled surface, since 1/2 or 1/4
//   of luma stride may yield an invalid pitch (stride).
#define G2SB_CTX4_G2CONTROLSB_0_UVST_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_CTX4_G2CONTROLSB_0_UVST_FIELD                      (_MK_MASK_CONST(0x3) << G2SB_CTX4_G2CONTROLSB_0_UVST_SHIFT)
#define G2SB_CTX4_G2CONTROLSB_0_UVST_RANGE                      9:8
#define G2SB_CTX4_G2CONTROLSB_0_UVST_WOFFSET                    0x0
#define G2SB_CTX4_G2CONTROLSB_0_UVST_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_UVST_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_UVST_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_UVST_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_UVST_UVS2X                      _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLSB_0_UVST_UVS1X                      _MK_ENUM_CONST(1)
#define G2SB_CTX4_G2CONTROLSB_0_UVST_UVS4X                      _MK_ENUM_CONST(2)
#define G2SB_CTX4_G2CONTROLSB_0_UVST_UVS_G2UVSTRIDE                     _MK_ENUM_CONST(3)

// Source (input) Data Line Pairing  (SL)
// This parameter specifies one of two cases of Y vs. U/V line-pairing
// in the source data in 4:2:0 format.
// In the 4:2:0 format, there is one pair of U and V image-lines for
// every two Y image-lines.
//0 The first two Y image-lines share common pair of U and V image-lines.
//1 The first two Y image-lines are paired with two different
// pairs of U and V image-lines.
#define G2SB_CTX4_G2CONTROLSB_0_SL_SHIFT                        _MK_SHIFT_CONST(10)
#define G2SB_CTX4_G2CONTROLSB_0_SL_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLSB_0_SL_SHIFT)
#define G2SB_CTX4_G2CONTROLSB_0_SL_RANGE                        10:10
#define G2SB_CTX4_G2CONTROLSB_0_SL_WOFFSET                      0x0
#define G2SB_CTX4_G2CONTROLSB_0_SL_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_SL_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLSB_0_SL_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_SL_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_SL_COMMON_PAIR                  _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLSB_0_SL_DIFFERENT_PAIR                       _MK_ENUM_CONST(1)

// StretchBLT Source Provider Selection (SISEL)
// This bit indicates where the source images come from,  either the
// image buffer memory or system memory of the host CPU.  If source
//images come from host CPU, they come via CPU Read-FIFO.
//0 Image buffer memory.
//1 System memory of host CPU.
//14 Reserved
#define G2SB_CTX4_G2CONTROLSB_0_SISEL_SHIFT                     _MK_SHIFT_CONST(13)
#define G2SB_CTX4_G2CONTROLSB_0_SISEL_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLSB_0_SISEL_SHIFT)
#define G2SB_CTX4_G2CONTROLSB_0_SISEL_RANGE                     13:13
#define G2SB_CTX4_G2CONTROLSB_0_SISEL_WOFFSET                   0x0
#define G2SB_CTX4_G2CONTROLSB_0_SISEL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_SISEL_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLSB_0_SISEL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_SISEL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_SISEL_IMAGE_BUFFER                      _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLSB_0_SISEL_HOST                      _MK_ENUM_CONST(1)

// StretchBLT Source Selection  (SBLTSRC)
// CPU and VIP module can initiate StretchBLT operation. This bit indicates
// which one initiates current StretchBLT command. Depending on the initiator,
// appropriate source for the command execution request is selected. Whichever
// the initiator is, all the command parameters are supplied from the CPU (driver)
// through the G2 command-FIFO and shadow registers.
//0 CPU is the command initiator.
//1 VIP module is the command initiator.
#define G2SB_CTX4_G2CONTROLSB_0_SBLTSRC_SHIFT                   _MK_SHIFT_CONST(15)
#define G2SB_CTX4_G2CONTROLSB_0_SBLTSRC_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLSB_0_SBLTSRC_SHIFT)
#define G2SB_CTX4_G2CONTROLSB_0_SBLTSRC_RANGE                   15:15
#define G2SB_CTX4_G2CONTROLSB_0_SBLTSRC_WOFFSET                 0x0
#define G2SB_CTX4_G2CONTROLSB_0_SBLTSRC_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_SBLTSRC_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLSB_0_SBLTSRC_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_SBLTSRC_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_SBLTSRC_CPU                     _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLSB_0_SBLTSRC_VIP                     _MK_ENUM_CONST(1)

// StretchBLT Vertical Filter Mode (VFTYPE[1:0])
// This bit is effective when the Vertical Filter is enabled. (bit 18)
// The two-tap vertical interpolation filter can be operated in various modes.
// For the image expansion, it should be programmed as a pure 2-tap
// interpolator. For the image contraction, it can work as partly averager
// and partly interpolator with varying degree depending on the contraction ratio.
// For StretchBLT, this parameter is used as an index (selection) to
// an internal lookup table that stores the group of filter-coefficients for
// the different modes of vertical filtering.
//00 Pure interpolation filter.
//01 25% averager, 75% interpolator.
//10 50% averager, 50% interpolator.
//11 100% averager.
#define G2SB_CTX4_G2CONTROLSB_0_VFTYPE_SHIFT                    _MK_SHIFT_CONST(16)
#define G2SB_CTX4_G2CONTROLSB_0_VFTYPE_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX4_G2CONTROLSB_0_VFTYPE_SHIFT)
#define G2SB_CTX4_G2CONTROLSB_0_VFTYPE_RANGE                    17:16
#define G2SB_CTX4_G2CONTROLSB_0_VFTYPE_WOFFSET                  0x0
#define G2SB_CTX4_G2CONTROLSB_0_VFTYPE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_VFTYPE_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX4_G2CONTROLSB_0_VFTYPE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_VFTYPE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_VFTYPE_INTERP                   _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLSB_0_VFTYPE_AVG25_INTERP75                   _MK_ENUM_CONST(1)
#define G2SB_CTX4_G2CONTROLSB_0_VFTYPE_AVG50_INTERP50                   _MK_ENUM_CONST(2)
#define G2SB_CTX4_G2CONTROLSB_0_VFTYPE_AVG                      _MK_ENUM_CONST(3)

// StretchBLT Vertical Filter Enable (VFEN)
// Vertical filter shall be disabled if source images come from host CPU
// via CPU Read-FIFO. (SISEL)
// Vertical filter may be disabled to save some memory bandwidth but
// this will likely result in degradation of image quality.
// This option may also be used in the case where source image is progressive
// scanning and there is no vertical scaling.
//0 Vertical filter is disabled.
//1 Vertical filter is enabled.
#define G2SB_CTX4_G2CONTROLSB_0_VFEN_SHIFT                      _MK_SHIFT_CONST(18)
#define G2SB_CTX4_G2CONTROLSB_0_VFEN_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLSB_0_VFEN_SHIFT)
#define G2SB_CTX4_G2CONTROLSB_0_VFEN_RANGE                      18:18
#define G2SB_CTX4_G2CONTROLSB_0_VFEN_WOFFSET                    0x0
#define G2SB_CTX4_G2CONTROLSB_0_VFEN_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_VFEN_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLSB_0_VFEN_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_VFEN_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_VFEN_DISABLE                    _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLSB_0_VFEN_ENABLE                     _MK_ENUM_CONST(1)

// enabled color space converter by default
#define G2SB_CTX4_G2CONTROLSB_0_DISCSC_SHIFT                    _MK_SHIFT_CONST(19)
#define G2SB_CTX4_G2CONTROLSB_0_DISCSC_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLSB_0_DISCSC_SHIFT)
#define G2SB_CTX4_G2CONTROLSB_0_DISCSC_RANGE                    19:19
#define G2SB_CTX4_G2CONTROLSB_0_DISCSC_WOFFSET                  0x0
#define G2SB_CTX4_G2CONTROLSB_0_DISCSC_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_DISCSC_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLSB_0_DISCSC_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_DISCSC_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_DISCSC_ENABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLSB_0_DISCSC_DISABLE                  _MK_ENUM_CONST(1)

// StretchBLT Horizontal Filter Mode (HFTYPE[2:0])
// The six-tap horizontal interpolation filter can be operated in
// various operation modes. For the image expansion, it should be programmed
// as a pure 6-tap interpolator.  For the image contraction, it can work as
// partly lowpass filter and partly interpolater with varying degree depending
// the contraction ratio.
// For StretchBLT, this parameter is used as an index (selection)
// to an internal lookup table that stores the group of filter-coefficients
//for the different modes of horizontal filtering.
// 000: Pure interpolation filter.
// 001: 010 011 100 101 110: mix of interpolation and low pass filters
// 111: DISABLE.
#define G2SB_CTX4_G2CONTROLSB_0_HFTYPE_SHIFT                    _MK_SHIFT_CONST(20)
#define G2SB_CTX4_G2CONTROLSB_0_HFTYPE_FIELD                    (_MK_MASK_CONST(0x7) << G2SB_CTX4_G2CONTROLSB_0_HFTYPE_SHIFT)
#define G2SB_CTX4_G2CONTROLSB_0_HFTYPE_RANGE                    22:20
#define G2SB_CTX4_G2CONTROLSB_0_HFTYPE_WOFFSET                  0x0
#define G2SB_CTX4_G2CONTROLSB_0_HFTYPE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_HFTYPE_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define G2SB_CTX4_G2CONTROLSB_0_HFTYPE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_HFTYPE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_HFTYPE_INTERP                   _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLSB_0_HFTYPE_LPF1                     _MK_ENUM_CONST(1)
#define G2SB_CTX4_G2CONTROLSB_0_HFTYPE_LPF2                     _MK_ENUM_CONST(2)
#define G2SB_CTX4_G2CONTROLSB_0_HFTYPE_LPF3                     _MK_ENUM_CONST(3)
#define G2SB_CTX4_G2CONTROLSB_0_HFTYPE_LPF4                     _MK_ENUM_CONST(4)
#define G2SB_CTX4_G2CONTROLSB_0_HFTYPE_LPF5                     _MK_ENUM_CONST(5)
#define G2SB_CTX4_G2CONTROLSB_0_HFTYPE_LPF6                     _MK_ENUM_CONST(6)
#define G2SB_CTX4_G2CONTROLSB_0_HFTYPE_DISABLE                  _MK_ENUM_CONST(7)

//In the VC-1 specification, when the value of RANGEREDFRM variable (1-bit)
//  for a picture is equal to 1, the picture shall be scaled up according
// to the following equation:
//Y = clip( (( Y-128)*2) + 128);
//Cb = clip( ((Cb-128)*2) + 128);
//Cr = clip( ((Cr-128)*2) + 128);
//The clip operator limits the output to [0, 255].
//The input is also limited to [0, 255].
//In the VC-1 nomenclature, the output (Y, Cb, Cr) tuple corresponds to
// the 'decoded' picture. The input (Y, Cb, Cr) tuple corresponds to
// the 'reconstructed' picture.
// The above equations create the decoded picture while keeping
// the reconstructed picture intact.
//Only YUV _OB formats are supported with range reducation enabled,
// not the YUV _TC or RGB formats.
//----------------------------------------------------
//At PortalPlayer this functionality was implemented in the DVO module.
// The YUV data coming from the video frame buffers (reconstructed picture)
//  in the SDRAM was scaled up using the above equations and given to the display.
// the value of 1-bit wide RANGEREDFRM variable was configured in the DVO per frame
// and the frame was scaled whenever RANGEREDFRM == 1.
#define G2SB_CTX4_G2CONTROLSB_0_RANGEREDFRM_SHIFT                       _MK_SHIFT_CONST(23)
#define G2SB_CTX4_G2CONTROLSB_0_RANGEREDFRM_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLSB_0_RANGEREDFRM_SHIFT)
#define G2SB_CTX4_G2CONTROLSB_0_RANGEREDFRM_RANGE                       23:23
#define G2SB_CTX4_G2CONTROLSB_0_RANGEREDFRM_WOFFSET                     0x0
#define G2SB_CTX4_G2CONTROLSB_0_RANGEREDFRM_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_RANGEREDFRM_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLSB_0_RANGEREDFRM_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_RANGEREDFRM_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_RANGEREDFRM_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLSB_0_RANGEREDFRM_ENABLE                      _MK_ENUM_CONST(1)

// StretchBLT Source Type (SITYPE)
// This bit identifies two types of source images. If source image is 2-to-1
// interlaced and StretchBLT processes either one of the two interlaced
// field-images, physical (positional) displacement between the two
// interlaced fields must be taken into account.  One field-image that is
// placed higher in position than the other field-image is called top-field
// and the other is called bottom-field. StretchBLT processing has to
// lower the top-field (or raise the bottom-field) to match the corresponding
// two target images in the overlay window (that is progressively scanned)
// right at the same position.   If source image is full frame-image
// obtained from two interlaced field-images, its type is ?top-field?.
// If source images are progressively scanned, the type identification is not
// significant and they may be designated either one of the two types
//0 Source image is ?top-field?.
//1 Source image is ?bottom-field?.
#define G2SB_CTX4_G2CONTROLSB_0_SITYPE_SHIFT                    _MK_SHIFT_CONST(24)
#define G2SB_CTX4_G2CONTROLSB_0_SITYPE_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLSB_0_SITYPE_SHIFT)
#define G2SB_CTX4_G2CONTROLSB_0_SITYPE_RANGE                    24:24
#define G2SB_CTX4_G2CONTROLSB_0_SITYPE_WOFFSET                  0x0
#define G2SB_CTX4_G2CONTROLSB_0_SITYPE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_SITYPE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLSB_0_SITYPE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_SITYPE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_SITYPE_TOP_FIELD                        _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLSB_0_SITYPE_BOTTOM_FIELD                     _MK_ENUM_CONST(1)

// StretchBLT Source Buffer Selection (SBSEL)
// StretchBLT processing involves frame-rate conversion from a
// series of source images to another series of destination images
// (field-rate of the source video to frame-rate of the PC display).
// In order to avoid image tearing, it is preferred to use two buffer
// sections in the source video area. This bit selects one of the two
// buffering blocks from which this StretchBLT command receives the source image.
// The two buffering memory blocks are called source-A and source-B.
//0 Source image comes from ?source-A? buffer.
//1 Source image comes from ?source-B? buffer.
#define G2SB_CTX4_G2CONTROLSB_0_SBSEL_SHIFT                     _MK_SHIFT_CONST(25)
#define G2SB_CTX4_G2CONTROLSB_0_SBSEL_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLSB_0_SBSEL_SHIFT)
#define G2SB_CTX4_G2CONTROLSB_0_SBSEL_RANGE                     25:25
#define G2SB_CTX4_G2CONTROLSB_0_SBSEL_WOFFSET                   0x0
#define G2SB_CTX4_G2CONTROLSB_0_SBSEL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_SBSEL_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLSB_0_SBSEL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_SBSEL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_SBSEL_SRC_A                     _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLSB_0_SBSEL_SRC_B                     _MK_ENUM_CONST(1)

// StretchBLT Destination Buffer Selection (DBSEL)
// StretchBLT processing involves frame-rate conversion from a series of
// source images to another series of destination images (field-rate of
// the source video to frame-rate of the PC display). In order to avoid
// image tearing, it is preferred to use two buffer sections in the destination
// video area.  This bit selects one of the two buffering blocks to which this
// StretchBLT command delivers the destination image.
// The two buffering memory blocks are called A and B.
//0 Destination image goes to ?A? buffer.
//1 Destination image goes to ?B? buffer.
#define G2SB_CTX4_G2CONTROLSB_0_DBSEL_SHIFT                     _MK_SHIFT_CONST(26)
#define G2SB_CTX4_G2CONTROLSB_0_DBSEL_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLSB_0_DBSEL_SHIFT)
#define G2SB_CTX4_G2CONTROLSB_0_DBSEL_RANGE                     26:26
#define G2SB_CTX4_G2CONTROLSB_0_DBSEL_WOFFSET                   0x0
#define G2SB_CTX4_G2CONTROLSB_0_DBSEL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_DBSEL_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLSB_0_DBSEL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_DBSEL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_DBSEL_DST_A                     _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLSB_0_DBSEL_DST_B                     _MK_ENUM_CONST(1)

// Key Signal Generator Enable (KEYEN) Key signal generator generates either
// chroma key signal (from YCbCr signal) or color key signal (from RGB signal)
//0 Key signal generator is disabled.
//1 Key signal generator is enabled.
#define G2SB_CTX4_G2CONTROLSB_0_KEYEN_SHIFT                     _MK_SHIFT_CONST(27)
#define G2SB_CTX4_G2CONTROLSB_0_KEYEN_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLSB_0_KEYEN_SHIFT)
#define G2SB_CTX4_G2CONTROLSB_0_KEYEN_RANGE                     27:27
#define G2SB_CTX4_G2CONTROLSB_0_KEYEN_WOFFSET                   0x0
#define G2SB_CTX4_G2CONTROLSB_0_KEYEN_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_KEYEN_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLSB_0_KEYEN_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_KEYEN_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_KEYEN_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLSB_0_KEYEN_ENABLE                    _MK_ENUM_CONST(1)

// Key Signal Polarity (KPOL)
// Color/Chroma key signal is generated by comparing source input pixel
// color to a range of a color specified by lower and upper limit values.
// The key signal is interpreted in two ways, depending on which one of
// video and graphics images is foreground (and the other is background).
// This is effective only if Key signal generator is enabled.
// (see G2CMKEYL, G2CMKEYU)
// 0 Key signal is set to 1 when source pixel is within the lower and upper
// limit color range.
// 1 Key signal is set to 1 when source pixel is outside the lower and upper
// limit color range.
#define G2SB_CTX4_G2CONTROLSB_0_KPOL_SHIFT                      _MK_SHIFT_CONST(28)
#define G2SB_CTX4_G2CONTROLSB_0_KPOL_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLSB_0_KPOL_SHIFT)
#define G2SB_CTX4_G2CONTROLSB_0_KPOL_RANGE                      28:28
#define G2SB_CTX4_G2CONTROLSB_0_KPOL_WOFFSET                    0x0
#define G2SB_CTX4_G2CONTROLSB_0_KPOL_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_KPOL_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLSB_0_KPOL_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_KPOL_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_KPOL_WITHIN_BOUNDS                      _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLSB_0_KPOL_OUTSIDE_BOUNDS                     _MK_ENUM_CONST(1)

// Enable Dithering (ENDITH)
// For 16 bit RGB output modes, the LSB of the color components can be
// modified by adding a variable residual value that will reduce the banding
// artifacts that can appear on the display.
// 0 Normal operation
// 1 Enable Dithering
#define G2SB_CTX4_G2CONTROLSB_0_ENDITH_SHIFT                    _MK_SHIFT_CONST(30)
#define G2SB_CTX4_G2CONTROLSB_0_ENDITH_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLSB_0_ENDITH_SHIFT)
#define G2SB_CTX4_G2CONTROLSB_0_ENDITH_RANGE                    30:30
#define G2SB_CTX4_G2CONTROLSB_0_ENDITH_WOFFSET                  0x0
#define G2SB_CTX4_G2CONTROLSB_0_ENDITH_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_ENDITH_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLSB_0_ENDITH_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_ENDITH_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_ENDITH_DISABLE                  _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLSB_0_ENDITH_ENABLE                   _MK_ENUM_CONST(1)

//output destination writes (dw) go either to image memory or epp
//0 Output data is sent to memory
//1 YUV or RGB data is passed directly to EPP module and no destination writes
//  will take place.
#define G2SB_CTX4_G2CONTROLSB_0_DISDW_SHIFT                     _MK_SHIFT_CONST(31)
#define G2SB_CTX4_G2CONTROLSB_0_DISDW_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLSB_0_DISDW_SHIFT)
#define G2SB_CTX4_G2CONTROLSB_0_DISDW_RANGE                     31:31
#define G2SB_CTX4_G2CONTROLSB_0_DISDW_WOFFSET                   0x0
#define G2SB_CTX4_G2CONTROLSB_0_DISDW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_DISDW_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLSB_0_DISDW_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_DISDW_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSB_0_DISDW_GOTO_IMAGE_BUFFER                 _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLSB_0_DISDW_GOTO_EPP                  _MK_ENUM_CONST(1)


// Register G2SB_CTX4_G2CONTROLSECOND_0  //{host,2d,index=1e}
#define G2SB_CTX4_G2CONTROLSECOND_0                     _MK_ADDR_CONST(0x501e)
#define G2SB_CTX4_G2CONTROLSECOND_0_SECURE                      0x0
#define G2SB_CTX4_G2CONTROLSECOND_0_WORD_COUNT                  0x1
#define G2SB_CTX4_G2CONTROLSECOND_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_RESET_MASK                  _MK_MASK_CONST(0x3f61c3fe)
#define G2SB_CTX4_G2CONTROLSECOND_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_READ_MASK                   _MK_MASK_CONST(0x3f71c3fe)
#define G2SB_CTX4_G2CONTROLSECOND_0_WRITE_MASK                  _MK_MASK_CONST(0x3f71c3fe)
// Host port bit swap 1=enable   0= disable
//   1= enable
#define G2SB_CTX4_G2CONTROLSECOND_0_BITSWAP_SHIFT                       _MK_SHIFT_CONST(1)
#define G2SB_CTX4_G2CONTROLSECOND_0_BITSWAP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLSECOND_0_BITSWAP_SHIFT)
#define G2SB_CTX4_G2CONTROLSECOND_0_BITSWAP_RANGE                       1:1
#define G2SB_CTX4_G2CONTROLSECOND_0_BITSWAP_WOFFSET                     0x0
#define G2SB_CTX4_G2CONTROLSECOND_0_BITSWAP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_BITSWAP_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLSECOND_0_BITSWAP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_BITSWAP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_BITSWAP_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLSECOND_0_BITSWAP_ENABLE                      _MK_ENUM_CONST(1)

// Host port byte swap 1=enable   0= disable
//   1= enable
#define G2SB_CTX4_G2CONTROLSECOND_0_BEBSWAP_SHIFT                       _MK_SHIFT_CONST(2)
#define G2SB_CTX4_G2CONTROLSECOND_0_BEBSWAP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLSECOND_0_BEBSWAP_SHIFT)
#define G2SB_CTX4_G2CONTROLSECOND_0_BEBSWAP_RANGE                       2:2
#define G2SB_CTX4_G2CONTROLSECOND_0_BEBSWAP_WOFFSET                     0x0
#define G2SB_CTX4_G2CONTROLSECOND_0_BEBSWAP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_BEBSWAP_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLSECOND_0_BEBSWAP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_BEBSWAP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_BEBSWAP_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLSECOND_0_BEBSWAP_ENABLE                      _MK_ENUM_CONST(1)

// Host port word swap 1=enable   0= disable
#define G2SB_CTX4_G2CONTROLSECOND_0_BEWSWAP_SHIFT                       _MK_SHIFT_CONST(3)
#define G2SB_CTX4_G2CONTROLSECOND_0_BEWSWAP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLSECOND_0_BEWSWAP_SHIFT)
#define G2SB_CTX4_G2CONTROLSECOND_0_BEWSWAP_RANGE                       3:3
#define G2SB_CTX4_G2CONTROLSECOND_0_BEWSWAP_WOFFSET                     0x0
#define G2SB_CTX4_G2CONTROLSECOND_0_BEWSWAP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_BEWSWAP_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLSECOND_0_BEWSWAP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_BEWSWAP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_BEWSWAP_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLSECOND_0_BEWSWAP_ENABLE                      _MK_ENUM_CONST(1)

// Alpha blending method
// FIX:
//   ALPHA blending:  Fixed alpha,  ALPHA is the value, B5G6R5 * B5G6R5
//   VCAA:            B5G6R5->B5G6R5
// PL1BPP:
//   ALPHA blending:  Alpha 1bit/pixel from memory plane, B5G6R5 * B5G6R5
//      NOTE: when ALPTYPE is PL1BPP, DSTX[2:0] must be zero, see bug 344489
// PL2BPP:
//   ALPHA blending:  Alpha 2bits/pixel from memory plane, B5G6R5 * B5G6R5
//      NOTE: when ALPTYPE is PL2BPP, DSTX[1:0] must be zero, see bug 344489
// PL4BPP:
//   ALPHA blending:  Alpha 4bits/pixel from memory plane, B5G6R5 * B5G6R5
//      NOTE: when ALPTYPE is PL4BPP, DSTX[0:0] must be zero, see bug 344489
// PL8BPP:
//   ALPHA blending:  Alpha 8bits/pixel from memory plane, B5G6R5 * B5G6R5
// PL44BPP:
//   ALPHA blending:  Alpha 8bits/pixel from memory plane src*4bits+dst*4bits, B5G6R5 * B5G6R5
// PLS1BPP:
//   ALPHA blending:  Alpha 1bit from source B5G5R5A1, alpha(MSB). Dest: B5G6R5.
//   VCAA:            reserved
// PLS4BPPAL:
//   ALPHA blending:  Alpha 4bits from source A4B4G4R4, alpha(LSB). Dest: B5G6R5.
// PLS4BPP:
//   ALPHA blending:  Alpha 4bits from source B4G4R4A4, alpha(MSB). Dest: B5G6R5.
//   VCAA:            R8G8B8A8->B5G6R5 without reading VCAA plane
//                     (surface blit with bpp down convert - implemented in hw by vcaa engine; not really a vcaa resolve)
// PLS8BPP:
//   ALPHA blending:  Alpha 8bits from source/destination(decided by ALPSRCORDST),
//                    R8G8B8A8, alpha(MSB). DST: R8G8B8A8
//   VCAA:            R8G8B8A8->R8G8B8A8, alpha has same blending method as RGB
// PLS8BX:
//   ALPHA blending:  Alpha 8bits from source B8G8R8A8, alpha(MSB). Dest: B5G6R5. (**Restrictions)
//   VCAA:            R8G8B8A8->B5G6R5
// PLS1BPPAL:
//   ALPHA blending:  Alpha 1 bit from source A1B5G5R5, alpha(LSB). Dest: B5G6R5
//   VCAA:            A1B5G5R5->A1B5G5R5
// **Restriction
// PLS8BX alpha blending has the following restrictions
// 1. Source/destination addresses have to be in 128bit boundary.
// 2. Destination width has to be multiple of 4 pixels.
// 3. Source/Destination strides have to be multiple of 128bits.
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPTYPE_SHIFT                       _MK_SHIFT_CONST(4)
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPTYPE_FIELD                       (_MK_MASK_CONST(0x1f) << G2SB_CTX4_G2CONTROLSECOND_0_ALPTYPE_SHIFT)
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPTYPE_RANGE                       8:4
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPTYPE_WOFFSET                     0x0
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPTYPE_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPTYPE_DEFAULT_MASK                        _MK_MASK_CONST(0x1f)
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPTYPE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPTYPE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPTYPE_FIX                 _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPTYPE_PL1BPP                      _MK_ENUM_CONST(1)
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPTYPE_PL2BPP                      _MK_ENUM_CONST(2)
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPTYPE_PL4BPP                      _MK_ENUM_CONST(3)
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPTYPE_PL8BPP                      _MK_ENUM_CONST(4)
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPTYPE_PL44BPP                     _MK_ENUM_CONST(5)
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPTYPE_PLS1BPP                     _MK_ENUM_CONST(6)
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPTYPE_PLS4BPPAL                   _MK_ENUM_CONST(7)
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPTYPE_PLS4BPP                     _MK_ENUM_CONST(8)
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPTYPE_PLS8BPP                     _MK_ENUM_CONST(9)
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPTYPE_PLS8BX                      _MK_ENUM_CONST(10)
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPTYPE_PLS1BPPAL                   _MK_ENUM_CONST(11)

// 32bits blending mode, output alpha selection 0:source alpha, 1:destination alpha
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPSRCORDST_SHIFT                   _MK_SHIFT_CONST(9)
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPSRCORDST_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLSECOND_0_ALPSRCORDST_SHIFT)
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPSRCORDST_RANGE                   9:9
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPSRCORDST_WOFFSET                 0x0
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPSRCORDST_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPSRCORDST_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPSRCORDST_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPSRCORDST_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPSRCORDST_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLSECOND_0_ALPSRCORDST_ENABLE                  _MK_ENUM_CONST(1)

// Pixel replication for Palm OS.
#define G2SB_CTX4_G2CONTROLSECOND_0_PXLREP_SHIFT                        _MK_SHIFT_CONST(14)
#define G2SB_CTX4_G2CONTROLSECOND_0_PXLREP_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLSECOND_0_PXLREP_SHIFT)
#define G2SB_CTX4_G2CONTROLSECOND_0_PXLREP_RANGE                        14:14
#define G2SB_CTX4_G2CONTROLSECOND_0_PXLREP_WOFFSET                      0x0
#define G2SB_CTX4_G2CONTROLSECOND_0_PXLREP_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_PXLREP_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLSECOND_0_PXLREP_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_PXLREP_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_PXLREP_DISABLE                      _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLSECOND_0_PXLREP_ENABLE                       _MK_ENUM_CONST(1)

// Used by Palm OS to highlight a selected icon by swapping
//  Background and Foreground colors in a rectangle area
#define G2SB_CTX4_G2CONTROLSECOND_0_SWAPBLT_SHIFT                       _MK_SHIFT_CONST(15)
#define G2SB_CTX4_G2CONTROLSECOND_0_SWAPBLT_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLSECOND_0_SWAPBLT_SHIFT)
#define G2SB_CTX4_G2CONTROLSECOND_0_SWAPBLT_RANGE                       15:15
#define G2SB_CTX4_G2CONTROLSECOND_0_SWAPBLT_WOFFSET                     0x0
#define G2SB_CTX4_G2CONTROLSECOND_0_SWAPBLT_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_SWAPBLT_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLSECOND_0_SWAPBLT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_SWAPBLT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//VCAA safe mode, if turned on, all up/bottom color data will be read in. This is a debug/cya incase the top/bottom color
//  fetch is broken.
#define G2SB_CTX4_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_CTX4_G2CONTROLSECOND_0_VCAA_SAFE_MODE_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SHIFT)
#define G2SB_CTX4_G2CONTROLSECOND_0_VCAA_SAFE_MODE_RANGE                        16:16
#define G2SB_CTX4_G2CONTROLSECOND_0_VCAA_SAFE_MODE_WOFFSET                      0x0
#define G2SB_CTX4_G2CONTROLSECOND_0_VCAA_SAFE_MODE_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_VCAA_SAFE_MODE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_VCAA_SAFE_MODE_DISABLE                      _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLSECOND_0_VCAA_SAFE_MODE_ENABLE                       _MK_ENUM_CONST(1)

#define G2SB_CTX4_G2CONTROLSECOND_0_G2NOSTOP_SHIFT                      _MK_SHIFT_CONST(20)
#define G2SB_CTX4_G2CONTROLSECOND_0_G2NOSTOP_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLSECOND_0_G2NOSTOP_SHIFT)
#define G2SB_CTX4_G2CONTROLSECOND_0_G2NOSTOP_RANGE                      20:20
#define G2SB_CTX4_G2CONTROLSECOND_0_G2NOSTOP_WOFFSET                    0x0
#define G2SB_CTX4_G2CONTROLSECOND_0_G2NOSTOP_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_G2NOSTOP_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_G2NOSTOP_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_G2NOSTOP_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Clipping rectangle control,
// if clip enable, bit 57 XYTDW should be cleared.
// 0x=clipping disabled,
// 10=draw only inside clipping rectangle,
// 11=draw only outside clipping rectangle
#define G2SB_CTX4_G2CONTROLSECOND_0_CLIPC_SHIFT                 _MK_SHIFT_CONST(21)
#define G2SB_CTX4_G2CONTROLSECOND_0_CLIPC_FIELD                 (_MK_MASK_CONST(0x3) << G2SB_CTX4_G2CONTROLSECOND_0_CLIPC_SHIFT)
#define G2SB_CTX4_G2CONTROLSECOND_0_CLIPC_RANGE                 22:21
#define G2SB_CTX4_G2CONTROLSECOND_0_CLIPC_WOFFSET                       0x0
#define G2SB_CTX4_G2CONTROLSECOND_0_CLIPC_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_CLIPC_DEFAULT_MASK                  _MK_MASK_CONST(0x3)
#define G2SB_CTX4_G2CONTROLSECOND_0_CLIPC_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_CLIPC_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Fast Rotate mode sel
//------------------------------------------------------------------
// G2 Fast Rotate
//
// Transforms a surface via FR_TYPE transformation.
// Works in either 2-buffer (copy)  or 1-buffer mode (in place) mode.
// The engine breaks down a larger surface into a grid of smaller FR_BLOCKs.
// Works on the granularity of an FR_BLOCK.  An FR_BLOCK is:
//   16x16 pixel block (DSTCD = bpp8)
//    8x8  pixel block (DSTCD = bpp16)
//    4x4  pixel block (DSTCD = bpp32)
// Max surface size is 4096x4096
//
// Key information
//  - source and destination base address must be 128-bit word aligned
//  - engine works on FR_BLOCK granularity:
//      transformed surface width  in multiples of 16-bytes**
//      transformed surface height in multiples of 16/8/4 lines for bpp8/bpp16/bpp32 FR_BLOCK
//      if surface dimension is not a multiple, sw can program FR engine to transform larger surface
//         (round up to next FR_BLOCK in width and height-->transform-->calculate relative memory pointer address)
//  - during a rotational transformation (TRANS_LR, TRANS_RL, ROT_90, ROT_270):
//      the stride of the output surface != the stride of the input surface when working on non-square input
//      input:                        output:
//      *^----------------------           *$----------------------
//      $ 0  1  2  3  4  5  6  7           ^ 24 16 8  0  ^  ^  ^  ^
//      | 8  9 10 11 12 13 14 15           | 25 17 9  1  ^  ^  ^  ^
//      |16 17 18 19 20 21 22 23           | 26 18 10 2  ^  ^  ^  ^
//      |24 25 26 27 28 29 30 31           | 27 19 11 3  ^  ^  ^  ^
//      | -  -  -  -  *  *  *  *           | 28 20 12 4  *  *  *  *
//      | -  -  -  -  *  *  *  *           | 29 21 13 5  *  *  *  *
//      | -  -  -  -  *  *  *  *           | 30 22 14 6  *  *  *  *
//      | -  -  -  -  *  *  *  *           | 31 23 15 7  *  *  *  *
//
//  - Tiling alignment restrictions subsume FR restrictions because the
//    FR surface base address is the same as the start address.
//
//  Register Programming
//  ====================
//   FR_MODE - inplace or copy
//   FR_TYPE - type of transformation
//   DSTCD - bpp8, bpp16, bpp32
//   SRCBA - source base address
//   SRCWIDTH - (width in pixels-1)
//   SRCHEIGHT - (height in lines-1)
//   SRCS - source stride
//   DSTBA - dest base address
//   DSTS - dest stride
//   FR_READWAIT - always set to enable
//
// FR inefficency in the following setup :
// 1. FR_MODE==SQUARE
// 2. if(FR_TYPE==YFLIP && SRCHEIGHT==m*n && n==odd number) where m=8bpp?16:16bpp?8:4
//    Or if(FR_TYPE==XFLIP && SRCWIDTH==m*n && n==odd number) where m=8bpp?16:16bpp?8:4
// 3. Then, the middle 8 lines/pixels, E.G. YFLIP/16bpp/n==3, line8 to line15 will be processed twice. 00 = disable fast rotate - this turns off the 2nd level clock to fr_rotate engine.  Please remember to do so!
// 01 = src/dst copy mode - two separate buffers
// 10 = square in place - one buffer
// 11 = blank
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_MODE_SHIFT                       _MK_SHIFT_CONST(24)
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_MODE_FIELD                       (_MK_MASK_CONST(0x3) << G2SB_CTX4_G2CONTROLSECOND_0_FR_MODE_SHIFT)
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_MODE_RANGE                       25:24
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_MODE_WOFFSET                     0x0
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_MODE_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_MODE_DEFAULT_MASK                        _MK_MASK_CONST(0x3)
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_MODE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_MODE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_MODE_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_MODE_SRC_DST_COPY                        _MK_ENUM_CONST(1)
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_MODE_SQUARE                      _MK_ENUM_CONST(2)
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_MODE_BLANK                       _MK_ENUM_CONST(3)

//  Fast Rotate type     000 = FLIP_X
// 001 = FLIP_Y
// 010 = TRANS_LR (mirrors about diagonal. Diagonal runs from upper left to lower right)
// 011 = TRANS_RL (mirrors about diagonal. Diagonal runs from upper right to lower left)
// 100 = ROT_90 (counter clock wise by 90 degrees)
// 101 = ROT_180
// 110 = ROT_270 (clock wise by 90 degrees)
// 111 = IDENTITY
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_TYPE_SHIFT                       _MK_SHIFT_CONST(26)
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_TYPE_FIELD                       (_MK_MASK_CONST(0x7) << G2SB_CTX4_G2CONTROLSECOND_0_FR_TYPE_SHIFT)
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_TYPE_RANGE                       28:26
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_TYPE_WOFFSET                     0x0
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_TYPE_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_TYPE_DEFAULT_MASK                        _MK_MASK_CONST(0x7)
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_TYPE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_TYPE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_TYPE_FLIP_X                      _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_TYPE_FLIP_Y                      _MK_ENUM_CONST(1)
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_TYPE_TRANS_LR                    _MK_ENUM_CONST(2)
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_TYPE_TRANS_RL                    _MK_ENUM_CONST(3)
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_TYPE_ROT_90                      _MK_ENUM_CONST(4)
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_TYPE_ROT_180                     _MK_ENUM_CONST(5)
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_TYPE_ROT_270                     _MK_ENUM_CONST(6)
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_TYPE_IDENTITY                    _MK_ENUM_CONST(7)

//  Fast Rotate wait for read 0 = disable
// 1 = enable
// Enabling this bit forces FR to wait for the reads to be stored
// in the data return fifo before started to send writes out to
// the same block.
//
// Always set to ENABLE.  This is debug only.
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_READWAIT_SHIFT                   _MK_SHIFT_CONST(29)
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_READWAIT_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLSECOND_0_FR_READWAIT_SHIFT)
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_READWAIT_RANGE                   29:29
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_READWAIT_WOFFSET                 0x0
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_READWAIT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_READWAIT_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_READWAIT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_READWAIT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_READWAIT_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLSECOND_0_FR_READWAIT_ENABLE                  _MK_ENUM_CONST(1)

//----------------------------------------------------------------------
//
// G2 Blit Formats:
// (1) G2 Blit size is based on height in lines, width in pixels,
//     stride in bytes, and pixel size (color depth). Unless alpha
//     blending is enabled, G2 doesn't care about pixel components.
//
//     Source color depths supported by G2 Blit:
//     =========================================
//       color depth same as destination: G2CONTROLMAIN.SRCCD = 1
//       monochrome:                      G2CONTROLMAIN.SRCCD = 0
//       (source monochrome color determined by G2SRCBGC, G2SRCFGC)
//
//     Pattern color depths supported by G2 Blit:
//     =========================================
//       color depth same as destination: G2PATOS.PATCD = 1
//       monochrome:                      G2PATOS.PATCD = 0
//       (pattern monochrome color determined by G2PATBGC, G2PATFGC)
//
//     Destination color depths supported by G2 Blit:
//     ==============================================
//       1 byte per pixel:    G2CONTROLMAIN.DSTCD = BPP8
//       2 bytes per pixel:   G2CONTROLMAIN.DSTCD = BPP16
//       4 bytes per pixel:   G2CONTROLMAIN.DSTCD = BPP32
//
// (2) Alpha blending operates on 3 or 4 component pixels of a specified
//     color depth. One of the components may be alpha (A), depending on the
//     alpha blend format, which is only allowed in certain component
//     positions defined below. The only format rule of the remaining
//     components is that they must be in the same source and destination
//     position because the alpha blend engine does not support component
//     swapping. For example, valid 32BPP formats are: RGBA_8888->RGBA_8888,
//     BGRA_8888->BGRA_8888, GRBA_8888->GRBA_8888, etc.
//
//     Source formats supported by G2 alpha blend:
//     ===========================================
//       color depth BPP8:  no supported formats
//       color depth BPP16:
//          ALPTYPE_PLS1BPP: xxxA_5551 (ex: BGRA_5551 = A[15] R[14:10] G[9:5] B[4:0])
//          ALPTYPE_PLS4BPP: xxxA_4444 (ex: BGRA_4444 = A[15:12] R[11:8] G[7:4] B[3:0])
//          (other)        : xxx_565   (ex: BGR_565   = R[15:11] G[10:5] B[4:0])
//       color depth BPP32:
//          (all)          : xxxA_8888 (ex: BRGA_8888 = A[31:24] R[23:16] G[15:8] B[7:0])
//
//
//     Destination formats supported by G2 alpha blend:
//     ================================================
//       color depth BPP8:  no supported formats
//       color depth BPP16: xxx_565   (ex: BGR_565   = R[15:11] G[10:5] B[4:0])
//       color depth BPP32: xxxA_8888 (ex: BRGA_8888 = A[31:24] R[23:16] G[15:8] B[7:0])
//
//     The following table
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     | src cd  |   src format                  | dst cd  | dst format     | examples:                                  |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP8   |  no support                   |  BPP8   | no support     |                                            |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP16  | xyzA_5551, xyzA_4444, xyz_565 |  BPP16  | xyz_565        | BGRA_5551->BGR_565, RGB_565->RGB565        |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP32  | xyzA_8888                     |  BPP32  | xyzA_8888      | RGBA_8888->RGBA_8888, BGRA_8888->BGRA_8888 |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP32  | xyzA_8888                     |  BPP16  | xyz_565        | RGBA_8888->RGB_565, BGRA_8888->BGR_565     |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//
//----------------------------------------------------------
// VCAA Resolve engine
//
// (1) Format support
//
// +-----------------+--------------------+----------------------+
// | srcColor format | srcCoverage format | legal dest format(s) |
// +-----------------+--------------------+----------------------+
// |     A1B5G5R5    |        VCAA        |       A1B5G5R5       |
// +-----------------+--------------------+----------------------+
// |     R8G8B8A8    |        VCAA        |   R8G8B8A8, B5G6R5   |
// +-----------------+--------------------+----------------------+
// |      B5G6R5     |        VCAA        |         B5G6R5       |
// +-----------------+--------------------+----------------------+
//
// To program resolve type:
//   ALPTYPE == FIX:       B5G6R5   -> B5G6R5
//   ALPTYPE == PLS1BPPAL: A1B5G5R5 -> A1B5G5R5
//   ALPTYPE == PLS8BPP:   R8G8B8A8 -> R8G8B8A8
//   ALPTYPE == PLS8BX:    R8G8B8A8 -> B5G6R5
//
// (2) Color surface programming
//
//     color surface base address:  SRCBA
//       sub-surface start x:       SRCX      (pixel index)
//       sub-surface start y:       SRCY      (line index)
//     color surface stride:        SRCS      (bytes)
//
//     The engine supports sub-surface resolve.  One can imagine a full color buffer of 1024x768, but
//
//     [pseudo_code]
//       color_surface_start_address_fetch = pcurctx->regs.rG2SRCBA.uSRCBA() +
//        (pcurctx->regs.rG2SRCPS.uSRCX() * VCAAState.color_surface_depth) +
//        (pcurctx->regs.rG2SRCPS.uSRCY() * VCAAState.color_surface_stride);
//
// (3) VCAA surface programming
//
//     vcaa surface base address:   PATBA
//     vcaa surface stride:         PATST     (bytes)
//
//     [pseudo_code]
//       vcaa_surface_start_address_fetch = pcurctx->regs.rG2PATBA.uPATBA();
//
//       SW *MUST* directly program this register to the proper sub-surface location in the vcaa surface
//        which corresponds to the SRCX and SRCY programming. The calculation is
//            PATBA = vcaa_base_address + SRCX * (1) + SRCY * PATST;
//
// (4) Resolve surface programming
//
//     resolve window width:        DSTWIDTH  (pixels)
//     resolve window height:       DSTHEIGHT (lines)
//     resolve output stride:       DSTS      (bytes)
//
//  These values program the width and height of the resolved surface.  In the base case,
//   DSTWIDTH  = color surface width
//   DSTHEIGHT = color sufrace height
//   DSTS      = resolve surface format bpp * DSTWIDTH
//
//  The vcaa engine technically supports DSTX and DSTY (like its cousin SRCX and SRCY).  This was not
//  requested by the original RFE by SW during the initial design.
//
//  [pseudo_code]
//     resolve_surface_start_address_put = pcurctx->regs.rG2DSTBA.uDSTBA() +
//       (pcurctx->regs.rG2DSTPS.uDSTX() * resolve_surface_color_depth) +
//       (pcurctx->regs.rG2DSTPS.uDSTY() * resolve_surface_color_stride);
//
//
// (5) Resolving a pixel
//
//   The coverage surface is a 8 bits per pixel surface (C4X4).  The surface is initialized to all 1s by 3d.
//
//   For a given pixel, we need to look up 4 bits of coverage data.
//   If the data is 0xf, the pixel does not need to be resolved.
//   Otherwise, we need to reblend the pixel with certain weightings of its neighbors (i.e. we're on the edge of some geometry)
//
//   If any coverage bits is 0, we need to resolve the color.  To do so, we calculate the following eqn:
//   color_new = (
//                 20*color_old +
//                 27*(
//                     ((cover_down  == 0) ? color_down  : color_old) +
//                     ((cover_right == 0) ? color_right : color_old) +
//                     ((cover_left  == 0) ? color_left  : color_old) +
//                     ((cover_up    == 0) ? color_up    : color_old)
//                     )
//               ) / 128;
//
//   If coverage bit == 0, then we use the neighbor color value in the resolve
//   If coverage bit == 1, then we use the center   color value in the resolve
//
//   The resolve is done on a per channel (r/g/b/a) basis:
//     format convert input channel to 8-bit
//     perform resolve equation above
//     format convert to output format
//
//   For the resolution of the alpha channel:
//     In B5G6R5:   no alpha information.  do nothing.
//     In A1B5G5R5: no resolve.  keep the source color alpha bit.
//     In R8G8B8A8: normal 8-bit channel resolve
//
// (6) Resolving a pixel on the edge
//
//    When on an edge, the vcaa engine treats the coverage bit as a 1.  Use the center color value.
//    This holds true even on the edge of the sub-surface resolve window when located in the middle of the larger surface
//
// (7) Maximum dimensions
//
//    The maximum resolve sub-surface is 4096 pixels wide.
//
// (8) Surface restrictions
//    The VCAA engine has the following restrictions w.r.t input surfaces
//      - input base address is 128-bit memory word aligned
//      - input stride is multiple of 128-bits (16 bytes)
//    The VCAA engine has the following restrictions w.r.t output surfaces
//      - output base address is 128-bit memory word aligned
//      - output stride is multiple of 128-bits (16 bytes)
// (9) Coverage surface layout
//    The surface is C4X4.  doc/<previous projects>/3d/qrast_sides.vsd/qrast_arch.doc/qrast_vcaa.doc has a wealth of info.
//
//    Surface layout (C4X4)
//    =====================
//
//       (lsb2msb)  C0_C1_C2_C3_X_X_X_X     (X is a don't care.  Qrast inits to 1)
//       (msb2lsb)  X_X_X_X_C3_C2_C1_C0
//
//
//     +          o          o
//          C0
//             C1   Cov(0,1)
//        C2
//          C3
//     o          o          o
//
//       Cov(1,0)   Cov(1,1)
//
//     o          o          o
//
//
//     +/o = pixel centers
//
//     In the example above,
//        Cov(0,0) = X_X_X_X_C3_C2_C1_C0
//        C3       = V_C3(Cov(0,0));
//        ..         ..
//        C0       = V_C0(Cov(0,0));
//     #define V_C3(bits) (bits & 0x8)
//     #define V_C2(bits) (bits & 0x4)
//     #define V_C1(bits) (bits & 0x2)
//     #define V_C0(bits) (bits & 0x1)
//
//    Resolving a pixel
//    =================
//     In an ideal world, the coverage would be simply laid out such that when resolving Pixel(x,y), we would
//    need only to fetch Cov(x,y) to get all 4 bits of information.
//     In actuality, the coverage surface was rearranged to help qrast in performance.  To resolve Pixel(x,y)
//    gr2d has to fetch 4 C4X4 bytes [Cov(x,y), Cov(x-1,y), Cov(x,y-1), Cov(x-1,y-1)].  From each C4X4 byte, it
//    extracts one bit which is used in the resolve equations shown in (5).
//
//
//    Need the logical vcaa bits (DRLU) for blend which is spread across four C4X4 coverage bytes
//
//          U
//    L
//        o
//            R
//      D
//
//    where
//
//     o = Pixel(x,y)
//     D = V_C1(Cov(x-1,y))
//     R = V_C0(Cov(x,y))
//     L = V_C3(Cov(x-1,y-1))
//     U = V_C2(Cov(x,y-1))
//
//
// (10) Other documentation
//       cmod/g2/fsim/g2vcaa.cpp - cmodel implementation with comments
//       doc/<previous projects>/3d/qrast_sides.vsd/qrast_arch.doc/qrast_vcaa.doc
//

// Register G2SB_CTX4_G2CONTROLMAIN_0  //{host,2d,sb,index=1f}
#define G2SB_CTX4_G2CONTROLMAIN_0                       _MK_ADDR_CONST(0x501f)
#define G2SB_CTX4_G2CONTROLMAIN_0_SECURE                        0x0
#define G2SB_CTX4_G2CONTROLMAIN_0_WORD_COUNT                    0x1
#define G2SB_CTX4_G2CONTROLMAIN_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_RESET_MASK                    _MK_MASK_CONST(0x7eccffff)
#define G2SB_CTX4_G2CONTROLMAIN_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_READ_MASK                     _MK_MASK_CONST(0x7fffffff)
#define G2SB_CTX4_G2CONTROLMAIN_0_WRITE_MASK                    _MK_MASK_CONST(0x7fffffff)
// Command Type:  00=BitBlt
// 01=Line Draw
// 10=VCAA
// 11=reserved
//  When the raise command is in executing
//  (there are no other outstanding commands with same channel being executed)
#define G2SB_CTX4_G2CONTROLMAIN_0_CMDT_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2CONTROLMAIN_0_CMDT_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX4_G2CONTROLMAIN_0_CMDT_SHIFT)
#define G2SB_CTX4_G2CONTROLMAIN_0_CMDT_RANGE                    1:0
#define G2SB_CTX4_G2CONTROLMAIN_0_CMDT_WOFFSET                  0x0
#define G2SB_CTX4_G2CONTROLMAIN_0_CMDT_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_CMDT_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX4_G2CONTROLMAIN_0_CMDT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_CMDT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_CMDT_BITBLT                   _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLMAIN_0_CMDT_LINEDRAW                 _MK_ENUM_CONST(1)
#define G2SB_CTX4_G2CONTROLMAIN_0_CMDT_VCAA                     _MK_ENUM_CONST(2)
#define G2SB_CTX4_G2CONTROLMAIN_0_CMDT_RESERVED1                        _MK_ENUM_CONST(3)

//fast fill rectangle in 128bit/clock
//Some limitaions with this mode:
//srcsld==1 rop==0xcc, no clipping, no transparency
//xdir==0, ydir==0, flip==0, xytdw==0
//Results are undefined if the above limitations are not satified.
#define G2SB_CTX4_G2CONTROLMAIN_0_TURBOFILL_SHIFT                       _MK_SHIFT_CONST(2)
#define G2SB_CTX4_G2CONTROLMAIN_0_TURBOFILL_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLMAIN_0_TURBOFILL_SHIFT)
#define G2SB_CTX4_G2CONTROLMAIN_0_TURBOFILL_RANGE                       2:2
#define G2SB_CTX4_G2CONTROLMAIN_0_TURBOFILL_WOFFSET                     0x0
#define G2SB_CTX4_G2CONTROLMAIN_0_TURBOFILL_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_TURBOFILL_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLMAIN_0_TURBOFILL_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_TURBOFILL_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//Command finish timing bit 0: 2D command finishs when last data has been pushed to memory write client.
// 1: 2D command waits memory write client to be idle to finish.
#define G2SB_CTX4_G2CONTROLMAIN_0_TEST0BIT_SHIFT                        _MK_SHIFT_CONST(3)
#define G2SB_CTX4_G2CONTROLMAIN_0_TEST0BIT_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLMAIN_0_TEST0BIT_SHIFT)
#define G2SB_CTX4_G2CONTROLMAIN_0_TEST0BIT_RANGE                        3:3
#define G2SB_CTX4_G2CONTROLMAIN_0_TEST0BIT_WOFFSET                      0x0
#define G2SB_CTX4_G2CONTROLMAIN_0_TEST0BIT_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_TEST0BIT_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLMAIN_0_TEST0BIT_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_TEST0BIT_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_TEST0BIT_DISABLE                      _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLMAIN_0_TEST0BIT_ENABLE                       _MK_ENUM_CONST(1)

// BitBlt Source Copy Fade enable, 1=enable (share with mltln), only support
//  16bpp mode
#define G2SB_CTX4_G2CONTROLMAIN_0_FADEN_SHIFT                   _MK_SHIFT_CONST(4)
#define G2SB_CTX4_G2CONTROLMAIN_0_FADEN_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLMAIN_0_FADEN_SHIFT)
#define G2SB_CTX4_G2CONTROLMAIN_0_FADEN_RANGE                   4:4
#define G2SB_CTX4_G2CONTROLMAIN_0_FADEN_WOFFSET                 0x0
#define G2SB_CTX4_G2CONTROLMAIN_0_FADEN_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_FADEN_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLMAIN_0_FADEN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_FADEN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_FADEN_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLMAIN_0_FADEN_ENABLE                  _MK_ENUM_CONST(1)

// BitBlt Alpha Blending, 1=enable. 0=disable,
//when both Faden and alpen are 1, output=Source*alpha_v + fadoff,
// alpha_v is decided by alptype
#define G2SB_CTX4_G2CONTROLMAIN_0_ALPEN_SHIFT                   _MK_SHIFT_CONST(5)
#define G2SB_CTX4_G2CONTROLMAIN_0_ALPEN_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLMAIN_0_ALPEN_SHIFT)
#define G2SB_CTX4_G2CONTROLMAIN_0_ALPEN_RANGE                   5:5
#define G2SB_CTX4_G2CONTROLMAIN_0_ALPEN_WOFFSET                 0x0
#define G2SB_CTX4_G2CONTROLMAIN_0_ALPEN_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_ALPEN_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLMAIN_0_ALPEN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_ALPEN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// BitBlt Solid Source Color Fill: 1=enable. FGC will be used as
// the color value.
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCSLD_SHIFT                  _MK_SHIFT_CONST(6)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCSLD_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLMAIN_0_SRCSLD_SHIFT)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCSLD_RANGE                  6:6
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCSLD_WOFFSET                        0x0
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCSLD_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCSLD_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCSLD_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCSLD_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCSLD_DISABLE                        _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCSLD_ENABLE                 _MK_ENUM_CONST(1)

// BitBlt Solid Pattern Fill: 1=enable. BGC will be used as
// the color value.
#define G2SB_CTX4_G2CONTROLMAIN_0_PATSLD_SHIFT                  _MK_SHIFT_CONST(7)
#define G2SB_CTX4_G2CONTROLMAIN_0_PATSLD_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLMAIN_0_PATSLD_SHIFT)
#define G2SB_CTX4_G2CONTROLMAIN_0_PATSLD_RANGE                  7:7
#define G2SB_CTX4_G2CONTROLMAIN_0_PATSLD_WOFFSET                        0x0
#define G2SB_CTX4_G2CONTROLMAIN_0_PATSLD_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_PATSLD_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLMAIN_0_PATSLD_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_PATSLD_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_PATSLD_DISABLE                        _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLMAIN_0_PATSLD_ENABLE                 _MK_ENUM_CONST(1)

// When mono pattern is set, we use mono tile pattern fill.
//
//  current pattern client can support a 16x16 bit tile which can be used
//  to generate a larger surface (i.e. tile this surface in the x and y direction)
//  The tile is stored in memory.  Currently, PATXO and PATYO tell you where
//  to start in the 16x16 tile when expanding the monochrome data.
//
//  See patxo and patyo comments below for programming (hw bid 247332)
//   When xdir==1
//     Patxo = pattern width - (patxo+destination width)&0xF   -- For xoffsets
//  y offsets PATYO remains the same when xdir/ydir change.
//
//
//  How the tile replication pattern looks based on xdir/ydir (without programming patxo above):
//
//  xdir=0 ydir=0              xdir=1 ydir=0
//
//   +---+--+                  +--+---+
//   |^|^|^||                  ||^|^|^|
//   |~~~|~~|                  |~~|~~~|
//   +---+--|                  |--+---+
//   |^|^|^||                  ||^|^|^|
//   +------+                  +------+
//
//
//   +---+--+                  +--+---+
//   |^|^|^||                  ||^|^|^|
//   |~~~|~~|                  |~~|~~~|
//   +---+--|                  |--+---+
//   |^|^|^||                  ||^|^|^|
//   +------+                  +------+
//    //
//  xdir=0 ydir=1              xdir=1 ydir=1
//
//   Mono tile is
//      +---+
//      |^|^|
//      |~~~|
//      +---+
//
//
#define G2SB_CTX4_G2CONTROLMAIN_0_PATFL_SHIFT                   _MK_SHIFT_CONST(8)
#define G2SB_CTX4_G2CONTROLMAIN_0_PATFL_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLMAIN_0_PATFL_SHIFT)
#define G2SB_CTX4_G2CONTROLMAIN_0_PATFL_RANGE                   8:8
#define G2SB_CTX4_G2CONTROLMAIN_0_PATFL_WOFFSET                 0x0
#define G2SB_CTX4_G2CONTROLMAIN_0_PATFL_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_PATFL_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLMAIN_0_PATFL_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_PATFL_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_PATFL_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLMAIN_0_PATFL_ENABLE                  _MK_ENUM_CONST(1)

//  0=incrementing, 1=decrementing.
//  xdir should not be set when source surface has different color depth as destination surface.
//  e.g. ALPTYPE=PLS8BX (32bpp blending with 16bpp), xdir has to be 0
//  SRCCD==0 (mono src) OR PATCD==0 (mono pat), xdir has to be 0
#define G2SB_CTX4_G2CONTROLMAIN_0_XDIR_SHIFT                    _MK_SHIFT_CONST(9)
#define G2SB_CTX4_G2CONTROLMAIN_0_XDIR_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLMAIN_0_XDIR_SHIFT)
#define G2SB_CTX4_G2CONTROLMAIN_0_XDIR_RANGE                    9:9
#define G2SB_CTX4_G2CONTROLMAIN_0_XDIR_WOFFSET                  0x0
#define G2SB_CTX4_G2CONTROLMAIN_0_XDIR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_XDIR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLMAIN_0_XDIR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_XDIR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//  0=incrementing, 1=decrementing.
//  ydir should not be set when source surface has different color depth as destination surface.
//  SRCCD==0 (mono src) OR PATCD==0 (mono pat), ydir has to be 0
#define G2SB_CTX4_G2CONTROLMAIN_0_YDIR_SHIFT                    _MK_SHIFT_CONST(10)
#define G2SB_CTX4_G2CONTROLMAIN_0_YDIR_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLMAIN_0_YDIR_SHIFT)
#define G2SB_CTX4_G2CONTROLMAIN_0_YDIR_RANGE                    10:10
#define G2SB_CTX4_G2CONTROLMAIN_0_YDIR_WOFFSET                  0x0
#define G2SB_CTX4_G2CONTROLMAIN_0_YDIR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_YDIR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLMAIN_0_YDIR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_YDIR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// xy transpose,
// Line stride DSTS has to be 16bytes aligned if enabled.
// If XYTDW==1, ROP can not include destination.
#define G2SB_CTX4_G2CONTROLMAIN_0_XYTDW_SHIFT                   _MK_SHIFT_CONST(11)
#define G2SB_CTX4_G2CONTROLMAIN_0_XYTDW_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLMAIN_0_XYTDW_SHIFT)
#define G2SB_CTX4_G2CONTROLMAIN_0_XYTDW_RANGE                   11:11
#define G2SB_CTX4_G2CONTROLMAIN_0_XYTDW_WOFFSET                 0x0
#define G2SB_CTX4_G2CONTROLMAIN_0_XYTDW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_XYTDW_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLMAIN_0_XYTDW_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_XYTDW_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Source Data is in Pack Mode.
//  SRCLNGAP in G2SRCPACK is the line gap for source packed mode.
//  If(SRCPACK && ~SRCSEL), source data is packed and from screen, SRCMONOW/SRCMONOH
//  should be programmed properly to fetch data from
//  frame buffer.
//  Note, PACK is not offically supported when the surface is tiled.
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCPACK_SHIFT                 _MK_SHIFT_CONST(12)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCPACK_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLMAIN_0_SRCPACK_SHIFT)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCPACK_RANGE                 12:12
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCPACK_WOFFSET                       0x0
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCPACK_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCPACK_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCPACK_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCPACK_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCPACK_DISABLE                       _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCPACK_ENABLE                        _MK_ENUM_CONST(1)

// Pattern Data is in Pack Mode.
//  PATLNGAP in G2PATPACK is the line gap for pattern packed mode
//  If(PATPACK && ~PATSEl), pattern data is packed and from screen, PATMONOW/PATMONOH
//  should be programmed properly to fetch pattern data from
//  frame buffer.
//  Note, PACK is not offically supported when the surface is tiled.
#define G2SB_CTX4_G2CONTROLMAIN_0_PATPACK_SHIFT                 _MK_SHIFT_CONST(13)
#define G2SB_CTX4_G2CONTROLMAIN_0_PATPACK_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLMAIN_0_PATPACK_SHIFT)
#define G2SB_CTX4_G2CONTROLMAIN_0_PATPACK_RANGE                 13:13
#define G2SB_CTX4_G2CONTROLMAIN_0_PATPACK_WOFFSET                       0x0
#define G2SB_CTX4_G2CONTROLMAIN_0_PATPACK_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_PATPACK_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLMAIN_0_PATPACK_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_PATPACK_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_PATPACK_DISABLE                       _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLMAIN_0_PATPACK_ENABLE                        _MK_ENUM_CONST(1)

// flip y direction to make image upside down or the other way.
// If YFLIP==1, ROP can not include destination.
#define G2SB_CTX4_G2CONTROLMAIN_0_YFLIP_SHIFT                   _MK_SHIFT_CONST(14)
#define G2SB_CTX4_G2CONTROLMAIN_0_YFLIP_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLMAIN_0_YFLIP_SHIFT)
#define G2SB_CTX4_G2CONTROLMAIN_0_YFLIP_RANGE                   14:14
#define G2SB_CTX4_G2CONTROLMAIN_0_YFLIP_WOFFSET                 0x0
#define G2SB_CTX4_G2CONTROLMAIN_0_YFLIP_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_YFLIP_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLMAIN_0_YFLIP_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_YFLIP_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_YFLIP_DSIABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLMAIN_0_YFLIP_ENABLE                  _MK_ENUM_CONST(1)

// Source Data Select:
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCSEL_SHIFT                  _MK_SHIFT_CONST(15)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCSEL_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLMAIN_0_SRCSEL_SHIFT)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCSEL_RANGE                  15:15
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCSEL_WOFFSET                        0x0
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCSEL_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCSEL_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCSEL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCSEL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCSEL_SCREEN                 _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCSEL_MEMORY                 _MK_ENUM_CONST(1)

// Destination color depth:
//   00=8-bpp, 01=16-bpp, 10=32-bpp. 11=reserved
#define G2SB_CTX4_G2CONTROLMAIN_0_DSTCD_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX4_G2CONTROLMAIN_0_DSTCD_FIELD                   (_MK_MASK_CONST(0x3) << G2SB_CTX4_G2CONTROLMAIN_0_DSTCD_SHIFT)
#define G2SB_CTX4_G2CONTROLMAIN_0_DSTCD_RANGE                   17:16
#define G2SB_CTX4_G2CONTROLMAIN_0_DSTCD_WOFFSET                 0x0
#define G2SB_CTX4_G2CONTROLMAIN_0_DSTCD_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_DSTCD_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_DSTCD_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_DSTCD_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_DSTCD_BPP8                    _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLMAIN_0_DSTCD_BPP16                   _MK_ENUM_CONST(1)
#define G2SB_CTX4_G2CONTROLMAIN_0_DSTCD_BPP32                   _MK_ENUM_CONST(2)
#define G2SB_CTX4_G2CONTROLMAIN_0_DSTCD_RESERVED3                       _MK_ENUM_CONST(3)

// Destination read transparency enable:
//   0x=destination read transparency disabled
//   10=color destination read transparency
//   11=inverse color destination read transparency.
// 20 rw INIC
// Initiate Command
// (1=initiate command immediately, 0=wait for launch write)
#define G2SB_CTX4_G2CONTROLMAIN_0_DSTT_SHIFT                    _MK_SHIFT_CONST(18)
#define G2SB_CTX4_G2CONTROLMAIN_0_DSTT_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX4_G2CONTROLMAIN_0_DSTT_SHIFT)
#define G2SB_CTX4_G2CONTROLMAIN_0_DSTT_RANGE                    19:18
#define G2SB_CTX4_G2CONTROLMAIN_0_DSTT_WOFFSET                  0x0
#define G2SB_CTX4_G2CONTROLMAIN_0_DSTT_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_DSTT_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX4_G2CONTROLMAIN_0_DSTT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_DSTT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//0 Source mono
//1 Source has same color depth as destination
//  SRCCD==0 xdir/ydir has to be 0
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCCD_SHIFT                   _MK_SHIFT_CONST(20)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCCD_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLMAIN_0_SRCCD_SHIFT)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCCD_RANGE                   20:20
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCCD_WOFFSET                 0x0
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCCD_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCCD_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCCD_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCCD_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Start from Msb or lsb in byte when mono expansion
// If HLMONO is 1, bit 0 (the lsb) is the first bit
// If HLMONO is 0, bit 7 (the msb) is the first bit
#define G2SB_CTX4_G2CONTROLMAIN_0_HLMONO_SHIFT                  _MK_SHIFT_CONST(21)
#define G2SB_CTX4_G2CONTROLMAIN_0_HLMONO_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLMAIN_0_HLMONO_SHIFT)
#define G2SB_CTX4_G2CONTROLMAIN_0_HLMONO_RANGE                  21:21
#define G2SB_CTX4_G2CONTROLMAIN_0_HLMONO_WOFFSET                        0x0
#define G2SB_CTX4_G2CONTROLMAIN_0_HLMONO_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_HLMONO_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_HLMONO_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_HLMONO_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Source transparency enable: 0x=source transparency disabled,
// 10=mono source background transparency
//    or color source transparency,
// 11=mono source foreground transparency
//    or inverse color source transparency.
// NOTE: When source transparency is enabled and SRCCD==0(mono)
//       SRCBGC!=SRCFGC should be satisfied.
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCT_SHIFT                    _MK_SHIFT_CONST(22)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCT_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX4_G2CONTROLMAIN_0_SRCT_SHIFT)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCT_RANGE                    23:22
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCT_WOFFSET                  0x0
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCT_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCT_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Source base address select:
//  0=srcba, 1=dstba. This is not used for Line Draw and
// if source data comes from host memory.
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCBAS_SHIFT                  _MK_SHIFT_CONST(24)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCBAS_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLMAIN_0_SRCBAS_SHIFT)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCBAS_RANGE                  24:24
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCBAS_WOFFSET                        0x0
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCBAS_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCBAS_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCBAS_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCBAS_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//Display Switching Window Control (GCSW[1:0])
//This parameter controls multi-buffering for Display.
//x0 At end of current command, don't send signal to Display to switch buffer.
//01 two buffers, dstba and dstba_b are used
//11 three buffers, dstba, dstba_b dstba_c are used
#define G2SB_CTX4_G2CONTROLMAIN_0_GCSW_SHIFT                    _MK_SHIFT_CONST(25)
#define G2SB_CTX4_G2CONTROLMAIN_0_GCSW_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX4_G2CONTROLMAIN_0_GCSW_SHIFT)
#define G2SB_CTX4_G2CONTROLMAIN_0_GCSW_RANGE                    26:25
#define G2SB_CTX4_G2CONTROLMAIN_0_GCSW_WOFFSET                  0x0
#define G2SB_CTX4_G2CONTROLMAIN_0_GCSW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_GCSW_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX4_G2CONTROLMAIN_0_GCSW_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_GCSW_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//source direct addressing
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCDIR_SHIFT                  _MK_SHIFT_CONST(27)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCDIR_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLMAIN_0_SRCDIR_SHIFT)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCDIR_RANGE                  27:27
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCDIR_WOFFSET                        0x0
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCDIR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCDIR_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCDIR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_SRCDIR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//destination direct addressing
#define G2SB_CTX4_G2CONTROLMAIN_0_DSTDIR_SHIFT                  _MK_SHIFT_CONST(28)
#define G2SB_CTX4_G2CONTROLMAIN_0_DSTDIR_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLMAIN_0_DSTDIR_SHIFT)
#define G2SB_CTX4_G2CONTROLMAIN_0_DSTDIR_RANGE                  28:28
#define G2SB_CTX4_G2CONTROLMAIN_0_DSTDIR_WOFFSET                        0x0
#define G2SB_CTX4_G2CONTROLMAIN_0_DSTDIR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_DSTDIR_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLMAIN_0_DSTDIR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_DSTDIR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// This feature is not offically supported.
//seperate destination read/write surface address
//0: read/write use DSTBA
//1: read uses SRCBA_B, write uses DSTBA
#define G2SB_CTX4_G2CONTROLMAIN_0_DST_RD_WR_SEP_SHIFT                   _MK_SHIFT_CONST(29)
#define G2SB_CTX4_G2CONTROLMAIN_0_DST_RD_WR_SEP_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLMAIN_0_DST_RD_WR_SEP_SHIFT)
#define G2SB_CTX4_G2CONTROLMAIN_0_DST_RD_WR_SEP_RANGE                   29:29
#define G2SB_CTX4_G2CONTROLMAIN_0_DST_RD_WR_SEP_WOFFSET                 0x0
#define G2SB_CTX4_G2CONTROLMAIN_0_DST_RD_WR_SEP_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_DST_RD_WR_SEP_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLMAIN_0_DST_RD_WR_SEP_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_DST_RD_WR_SEP_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// pattern Data Select: SRCSEL and PATSEL can't be both enabled.
#define G2SB_CTX4_G2CONTROLMAIN_0_PATSEL_SHIFT                  _MK_SHIFT_CONST(30)
#define G2SB_CTX4_G2CONTROLMAIN_0_PATSEL_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CONTROLMAIN_0_PATSEL_SHIFT)
#define G2SB_CTX4_G2CONTROLMAIN_0_PATSEL_RANGE                  30:30
#define G2SB_CTX4_G2CONTROLMAIN_0_PATSEL_WOFFSET                        0x0
#define G2SB_CTX4_G2CONTROLMAIN_0_PATSEL_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_PATSEL_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CONTROLMAIN_0_PATSEL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_PATSEL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CONTROLMAIN_0_PATSEL_SCREEN                 _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CONTROLMAIN_0_PATSEL_MEMORY                 _MK_ENUM_CONST(1)


// Register G2SB_CTX4_G2ROPFADE_0  //{host,2d,index=20}
#define G2SB_CTX4_G2ROPFADE_0                   _MK_ADDR_CONST(0x5020)
#define G2SB_CTX4_G2ROPFADE_0_SECURE                    0x0
#define G2SB_CTX4_G2ROPFADE_0_WORD_COUNT                        0x1
#define G2SB_CTX4_G2ROPFADE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2ROPFADE_0_RESET_MASK                        _MK_MASK_CONST(0xff)
#define G2SB_CTX4_G2ROPFADE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2ROPFADE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2ROPFADE_0_READ_MASK                         _MK_MASK_CONST(0xffff00ff)
#define G2SB_CTX4_G2ROPFADE_0_WRITE_MASK                        _MK_MASK_CONST(0xffff00ff)
//If YFLIP==1 or XYTDW==1, ROP can not include destination.
//Since destination may have been corrupted before reading out.
#define G2SB_CTX4_G2ROPFADE_0_ROP_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2ROPFADE_0_ROP_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX4_G2ROPFADE_0_ROP_SHIFT)
#define G2SB_CTX4_G2ROPFADE_0_ROP_RANGE                 7:0
#define G2SB_CTX4_G2ROPFADE_0_ROP_WOFFSET                       0x0
#define G2SB_CTX4_G2ROPFADE_0_ROP_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2ROPFADE_0_ROP_DEFAULT_MASK                  _MK_MASK_CONST(0xff)
#define G2SB_CTX4_G2ROPFADE_0_ROP_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2ROPFADE_0_ROP_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//
#define G2SB_CTX4_G2ROPFADE_0_FADCOE_SHIFT                      _MK_SHIFT_CONST(16)
#define G2SB_CTX4_G2ROPFADE_0_FADCOE_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX4_G2ROPFADE_0_FADCOE_SHIFT)
#define G2SB_CTX4_G2ROPFADE_0_FADCOE_RANGE                      23:16
#define G2SB_CTX4_G2ROPFADE_0_FADCOE_WOFFSET                    0x0
#define G2SB_CTX4_G2ROPFADE_0_FADCOE_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2ROPFADE_0_FADCOE_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2ROPFADE_0_FADCOE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2ROPFADE_0_FADCOE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

//
#define G2SB_CTX4_G2ROPFADE_0_FADOFF_SHIFT                      _MK_SHIFT_CONST(24)
#define G2SB_CTX4_G2ROPFADE_0_FADOFF_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX4_G2ROPFADE_0_FADOFF_SHIFT)
#define G2SB_CTX4_G2ROPFADE_0_FADOFF_RANGE                      31:24
#define G2SB_CTX4_G2ROPFADE_0_FADOFF_WOFFSET                    0x0
#define G2SB_CTX4_G2ROPFADE_0_FADOFF_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2ROPFADE_0_FADOFF_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2ROPFADE_0_FADOFF_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2ROPFADE_0_FADOFF_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2ALPHABLEND_0  //{2d,index=21}
#define G2SB_CTX4_G2ALPHABLEND_0                        _MK_ADDR_CONST(0x5021)
#define G2SB_CTX4_G2ALPHABLEND_0_SECURE                         0x0
#define G2SB_CTX4_G2ALPHABLEND_0_WORD_COUNT                     0x1
#define G2SB_CTX4_G2ALPHABLEND_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2ALPHABLEND_0_RESET_MASK                     _MK_MASK_CONST(0x100)
#define G2SB_CTX4_G2ALPHABLEND_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2ALPHABLEND_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2ALPHABLEND_0_READ_MASK                      _MK_MASK_CONST(0xffff01ff)
#define G2SB_CTX4_G2ALPHABLEND_0_WRITE_MASK                     _MK_MASK_CONST(0xffff01ff)
#define G2SB_CTX4_G2ALPHABLEND_0_ALPHA_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2ALPHABLEND_0_ALPHA_FIELD                    (_MK_MASK_CONST(0xff) << G2SB_CTX4_G2ALPHABLEND_0_ALPHA_SHIFT)
#define G2SB_CTX4_G2ALPHABLEND_0_ALPHA_RANGE                    7:0
#define G2SB_CTX4_G2ALPHABLEND_0_ALPHA_WOFFSET                  0x0
#define G2SB_CTX4_G2ALPHABLEND_0_ALPHA_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2ALPHABLEND_0_ALPHA_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2ALPHABLEND_0_ALPHA_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2ALPHABLEND_0_ALPHA_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

#define G2SB_CTX4_G2ALPHABLEND_0_ALPHAINV_SHIFT                 _MK_SHIFT_CONST(8)
#define G2SB_CTX4_G2ALPHABLEND_0_ALPHAINV_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2ALPHABLEND_0_ALPHAINV_SHIFT)
#define G2SB_CTX4_G2ALPHABLEND_0_ALPHAINV_RANGE                 8:8
#define G2SB_CTX4_G2ALPHABLEND_0_ALPHAINV_WOFFSET                       0x0
#define G2SB_CTX4_G2ALPHABLEND_0_ALPHAINV_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2ALPHABLEND_0_ALPHAINV_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2ALPHABLEND_0_ALPHAINV_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2ALPHABLEND_0_ALPHAINV_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

#define G2SB_CTX4_G2ALPHABLEND_0_ALPHA0V_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX4_G2ALPHABLEND_0_ALPHA0V_FIELD                  (_MK_MASK_CONST(0xff) << G2SB_CTX4_G2ALPHABLEND_0_ALPHA0V_SHIFT)
#define G2SB_CTX4_G2ALPHABLEND_0_ALPHA0V_RANGE                  23:16
#define G2SB_CTX4_G2ALPHABLEND_0_ALPHA0V_WOFFSET                        0x0
#define G2SB_CTX4_G2ALPHABLEND_0_ALPHA0V_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2ALPHABLEND_0_ALPHA0V_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2ALPHABLEND_0_ALPHA0V_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2ALPHABLEND_0_ALPHA0V_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX4_G2ALPHABLEND_0_ALPHA1V_SHIFT                  _MK_SHIFT_CONST(24)
#define G2SB_CTX4_G2ALPHABLEND_0_ALPHA1V_FIELD                  (_MK_MASK_CONST(0xff) << G2SB_CTX4_G2ALPHABLEND_0_ALPHA1V_SHIFT)
#define G2SB_CTX4_G2ALPHABLEND_0_ALPHA1V_RANGE                  31:24
#define G2SB_CTX4_G2ALPHABLEND_0_ALPHA1V_WOFFSET                        0x0
#define G2SB_CTX4_G2ALPHABLEND_0_ALPHA1V_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2ALPHABLEND_0_ALPHA1V_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2ALPHABLEND_0_ALPHA1V_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2ALPHABLEND_0_ALPHA1V_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// ClipRect Methods
// top-left bounds are inclusive

// Register G2SB_CTX4_G2CLIPLEFTTOP_0  //{2d,index=22}
#define G2SB_CTX4_G2CLIPLEFTTOP_0                       _MK_ADDR_CONST(0x5022)
#define G2SB_CTX4_G2CLIPLEFTTOP_0_SECURE                        0x0
#define G2SB_CTX4_G2CLIPLEFTTOP_0_WORD_COUNT                    0x1
#define G2SB_CTX4_G2CLIPLEFTTOP_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLIPLEFTTOP_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLIPLEFTTOP_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLIPLEFTTOP_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLIPLEFTTOP_0_READ_MASK                     _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX4_G2CLIPLEFTTOP_0_WRITE_MASK                    _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX4_G2CLIPLEFTTOP_0_CLIPL_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2CLIPLEFTTOP_0_CLIPL_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX4_G2CLIPLEFTTOP_0_CLIPL_SHIFT)
#define G2SB_CTX4_G2CLIPLEFTTOP_0_CLIPL_RANGE                   14:0
#define G2SB_CTX4_G2CLIPLEFTTOP_0_CLIPL_WOFFSET                 0x0
#define G2SB_CTX4_G2CLIPLEFTTOP_0_CLIPL_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLIPLEFTTOP_0_CLIPL_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLIPLEFTTOP_0_CLIPL_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLIPLEFTTOP_0_CLIPL_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

#define G2SB_CTX4_G2CLIPLEFTTOP_0_CLIPT_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX4_G2CLIPLEFTTOP_0_CLIPT_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX4_G2CLIPLEFTTOP_0_CLIPT_SHIFT)
#define G2SB_CTX4_G2CLIPLEFTTOP_0_CLIPT_RANGE                   30:16
#define G2SB_CTX4_G2CLIPLEFTTOP_0_CLIPT_WOFFSET                 0x0
#define G2SB_CTX4_G2CLIPLEFTTOP_0_CLIPT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLIPLEFTTOP_0_CLIPT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLIPLEFTTOP_0_CLIPT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLIPLEFTTOP_0_CLIPT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// bottom-right bounds are exclusive

// Register G2SB_CTX4_G2CLIPRIGHTBOT_0  //{2d,index=23}
#define G2SB_CTX4_G2CLIPRIGHTBOT_0                      _MK_ADDR_CONST(0x5023)
#define G2SB_CTX4_G2CLIPRIGHTBOT_0_SECURE                       0x0
#define G2SB_CTX4_G2CLIPRIGHTBOT_0_WORD_COUNT                   0x1
#define G2SB_CTX4_G2CLIPRIGHTBOT_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLIPRIGHTBOT_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLIPRIGHTBOT_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLIPRIGHTBOT_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLIPRIGHTBOT_0_READ_MASK                    _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX4_G2CLIPRIGHTBOT_0_WRITE_MASK                   _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX4_G2CLIPRIGHTBOT_0_CLIPR_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2CLIPRIGHTBOT_0_CLIPR_FIELD                  (_MK_MASK_CONST(0x7fff) << G2SB_CTX4_G2CLIPRIGHTBOT_0_CLIPR_SHIFT)
#define G2SB_CTX4_G2CLIPRIGHTBOT_0_CLIPR_RANGE                  14:0
#define G2SB_CTX4_G2CLIPRIGHTBOT_0_CLIPR_WOFFSET                        0x0
#define G2SB_CTX4_G2CLIPRIGHTBOT_0_CLIPR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLIPRIGHTBOT_0_CLIPR_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLIPRIGHTBOT_0_CLIPR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLIPRIGHTBOT_0_CLIPR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX4_G2CLIPRIGHTBOT_0_CLIPB_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX4_G2CLIPRIGHTBOT_0_CLIPB_FIELD                  (_MK_MASK_CONST(0x7fff) << G2SB_CTX4_G2CLIPRIGHTBOT_0_CLIPB_SHIFT)
#define G2SB_CTX4_G2CLIPRIGHTBOT_0_CLIPB_RANGE                  30:16
#define G2SB_CTX4_G2CLIPRIGHTBOT_0_CLIPB_WOFFSET                        0x0
#define G2SB_CTX4_G2CLIPRIGHTBOT_0_CLIPB_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLIPRIGHTBOT_0_CLIPB_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLIPRIGHTBOT_0_CLIPB_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CLIPRIGHTBOT_0_CLIPB_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//pattern methods
// G2PATPACK should be used to specify the line gap
// use G2PATPACK_SIZE to program height and width
//  PACK is generally only useful with narrow monochrome surfaces
//  Note, PACK is not offically supported when the surface is tiled.

// Register G2SB_CTX4_G2PATPACK_0  //{2d,index=24} Pattern packed mode
#define G2SB_CTX4_G2PATPACK_0                   _MK_ADDR_CONST(0x5024)
#define G2SB_CTX4_G2PATPACK_0_SECURE                    0x0
#define G2SB_CTX4_G2PATPACK_0_WORD_COUNT                        0x1
#define G2SB_CTX4_G2PATPACK_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATPACK_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATPACK_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATPACK_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATPACK_0_READ_MASK                         _MK_MASK_CONST(0xf)
#define G2SB_CTX4_G2PATPACK_0_WRITE_MASK                        _MK_MASK_CONST(0xf)
// Packed mode, pattern data line gap. byte
#define G2SB_CTX4_G2PATPACK_0_PATLNGAP_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2PATPACK_0_PATLNGAP_FIELD                    (_MK_MASK_CONST(0xf) << G2SB_CTX4_G2PATPACK_0_PATLNGAP_SHIFT)
#define G2SB_CTX4_G2PATPACK_0_PATLNGAP_RANGE                    3:0
#define G2SB_CTX4_G2PATPACK_0_PATLNGAP_WOFFSET                  0x0
#define G2SB_CTX4_G2PATPACK_0_PATLNGAP_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATPACK_0_PATLNGAP_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATPACK_0_PATLNGAP_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATPACK_0_PATLNGAP_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// G2PATPACK_SIZE -- extension of G2PATPACK, this register only holds the size of the packed data
//  Note, PACK is not offically supported when the surface is tiled.

// Register G2SB_CTX4_G2PATPACK_SIZE_0  //{2d,index=25} Pattern packed mode
// Packed mode, pattern data line gap. byte
#define G2SB_CTX4_G2PATPACK_SIZE_0                      _MK_ADDR_CONST(0x5025)
#define G2SB_CTX4_G2PATPACK_SIZE_0_SECURE                       0x0
#define G2SB_CTX4_G2PATPACK_SIZE_0_WORD_COUNT                   0x1
#define G2SB_CTX4_G2PATPACK_SIZE_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATPACK_SIZE_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATPACK_SIZE_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATPACK_SIZE_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATPACK_SIZE_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2PATPACK_SIZE_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
// Mono data width in packed mode, byte
#define G2SB_CTX4_G2PATPACK_SIZE_0_PATMONOW_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2PATPACK_SIZE_0_PATMONOW_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_CTX4_G2PATPACK_SIZE_0_PATMONOW_SHIFT)
#define G2SB_CTX4_G2PATPACK_SIZE_0_PATMONOW_RANGE                       15:0
#define G2SB_CTX4_G2PATPACK_SIZE_0_PATMONOW_WOFFSET                     0x0
#define G2SB_CTX4_G2PATPACK_SIZE_0_PATMONOW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATPACK_SIZE_0_PATMONOW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATPACK_SIZE_0_PATMONOW_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATPACK_SIZE_0_PATMONOW_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//  Pattern mono data height in packed mode, byte
#define G2SB_CTX4_G2PATPACK_SIZE_0_PATMONOH_SHIFT                       _MK_SHIFT_CONST(16)
#define G2SB_CTX4_G2PATPACK_SIZE_0_PATMONOH_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_CTX4_G2PATPACK_SIZE_0_PATMONOH_SHIFT)
#define G2SB_CTX4_G2PATPACK_SIZE_0_PATMONOH_RANGE                       31:16
#define G2SB_CTX4_G2PATPACK_SIZE_0_PATMONOH_WOFFSET                     0x0
#define G2SB_CTX4_G2PATPACK_SIZE_0_PATMONOH_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATPACK_SIZE_0_PATMONOH_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATPACK_SIZE_0_PATMONOH_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATPACK_SIZE_0_PATMONOH_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2PATBA_0  //{2d,index=26}
#define G2SB_CTX4_G2PATBA_0                     _MK_ADDR_CONST(0x5026)
#define G2SB_CTX4_G2PATBA_0_SECURE                      0x0
#define G2SB_CTX4_G2PATBA_0_WORD_COUNT                  0x1
#define G2SB_CTX4_G2PATBA_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATBA_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATBA_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATBA_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATBA_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2PATBA_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// If(PATFL==1){
//   It has to be 16bytes aligned.
// }else{
//   Point to the first byte of the first pixel of pattern plane.
// }
#define G2SB_CTX4_G2PATBA_0_PATBA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2PATBA_0_PATBA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX4_G2PATBA_0_PATBA_SHIFT)
#define G2SB_CTX4_G2PATBA_0_PATBA_RANGE                 31:0
#define G2SB_CTX4_G2PATBA_0_PATBA_WOFFSET                       0x0
#define G2SB_CTX4_G2PATBA_0_PATBA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATBA_0_PATBA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATBA_0_PATBA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATBA_0_PATBA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2PATOS_0  //{2d,index=27}
#define G2SB_CTX4_G2PATOS_0                     _MK_ADDR_CONST(0x5027)
#define G2SB_CTX4_G2PATOS_0_SECURE                      0x0
#define G2SB_CTX4_G2PATOS_0_WORD_COUNT                  0x1
#define G2SB_CTX4_G2PATOS_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATOS_0_RESET_MASK                  _MK_MASK_CONST(0x600000)
#define G2SB_CTX4_G2PATOS_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATOS_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATOS_0_READ_MASK                   _MK_MASK_CONST(0xff61ffff)
#define G2SB_CTX4_G2PATOS_0_WRITE_MASK                  _MK_MASK_CONST(0xff61ffff)
//stride
#define G2SB_CTX4_G2PATOS_0_PATST_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2PATOS_0_PATST_FIELD                 (_MK_MASK_CONST(0xffff) << G2SB_CTX4_G2PATOS_0_PATST_SHIFT)
#define G2SB_CTX4_G2PATOS_0_PATST_RANGE                 15:0
#define G2SB_CTX4_G2PATOS_0_PATST_WOFFSET                       0x0
#define G2SB_CTX4_G2PATOS_0_PATST_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATOS_0_PATST_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATOS_0_PATST_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATOS_0_PATST_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//0 mono
//1 same as dstcd
//  PATCD==0 xdir/ydir has to be 0
#define G2SB_CTX4_G2PATOS_0_PATCD_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_CTX4_G2PATOS_0_PATCD_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2PATOS_0_PATCD_SHIFT)
#define G2SB_CTX4_G2PATOS_0_PATCD_RANGE                 16:16
#define G2SB_CTX4_G2PATOS_0_PATCD_WOFFSET                       0x0
#define G2SB_CTX4_G2PATOS_0_PATCD_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATOS_0_PATCD_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATOS_0_PATCD_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATOS_0_PATCD_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Mono pattern transparency enable:
// 0x=pattern transparency disabled,
// 10=mono pattern background transparency
//   or color pattern transparency,
// 11=mono pattern foreground transparency
//   or inverse color pattern transparency.
// NOTE: When pattern transparency is enabled and PATCD==0(mono)
//       PATBGC!=PATFGC should be satisfied.
#define G2SB_CTX4_G2PATOS_0_PATT_SHIFT                  _MK_SHIFT_CONST(21)
#define G2SB_CTX4_G2PATOS_0_PATT_FIELD                  (_MK_MASK_CONST(0x3) << G2SB_CTX4_G2PATOS_0_PATT_SHIFT)
#define G2SB_CTX4_G2PATOS_0_PATT_RANGE                  22:21
#define G2SB_CTX4_G2PATOS_0_PATT_WOFFSET                        0x0
#define G2SB_CTX4_G2PATOS_0_PATT_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATOS_0_PATT_DEFAULT_MASK                   _MK_MASK_CONST(0x3)
#define G2SB_CTX4_G2PATOS_0_PATT_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATOS_0_PATT_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//x offset for mono tile pattern fill.  see PATFL
#define G2SB_CTX4_G2PATOS_0_PATXO_SHIFT                 _MK_SHIFT_CONST(24)
#define G2SB_CTX4_G2PATOS_0_PATXO_FIELD                 (_MK_MASK_CONST(0xf) << G2SB_CTX4_G2PATOS_0_PATXO_SHIFT)
#define G2SB_CTX4_G2PATOS_0_PATXO_RANGE                 27:24
#define G2SB_CTX4_G2PATOS_0_PATXO_WOFFSET                       0x0
#define G2SB_CTX4_G2PATOS_0_PATXO_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATOS_0_PATXO_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATOS_0_PATXO_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATOS_0_PATXO_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//y offset for mono tile pattern fill.  see PATFL
#define G2SB_CTX4_G2PATOS_0_PATYO_SHIFT                 _MK_SHIFT_CONST(28)
#define G2SB_CTX4_G2PATOS_0_PATYO_FIELD                 (_MK_MASK_CONST(0xf) << G2SB_CTX4_G2PATOS_0_PATYO_SHIFT)
#define G2SB_CTX4_G2PATOS_0_PATYO_RANGE                 31:28
#define G2SB_CTX4_G2PATOS_0_PATYO_WOFFSET                       0x0
#define G2SB_CTX4_G2PATOS_0_PATYO_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATOS_0_PATYO_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATOS_0_PATYO_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATOS_0_PATYO_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2PATBGC_0  //{2d,index=28}
#define G2SB_CTX4_G2PATBGC_0                    _MK_ADDR_CONST(0x5028)
#define G2SB_CTX4_G2PATBGC_0_SECURE                     0x0
#define G2SB_CTX4_G2PATBGC_0_WORD_COUNT                         0x1
#define G2SB_CTX4_G2PATBGC_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATBGC_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATBGC_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATBGC_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATBGC_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2PATBGC_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2PATBGC_0_PATBGC_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2PATBGC_0_PATBGC_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX4_G2PATBGC_0_PATBGC_SHIFT)
#define G2SB_CTX4_G2PATBGC_0_PATBGC_RANGE                       31:0
#define G2SB_CTX4_G2PATBGC_0_PATBGC_WOFFSET                     0x0
#define G2SB_CTX4_G2PATBGC_0_PATBGC_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATBGC_0_PATBGC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATBGC_0_PATBGC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATBGC_0_PATBGC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2PATFGC_0  //{2d,index=29}
#define G2SB_CTX4_G2PATFGC_0                    _MK_ADDR_CONST(0x5029)
#define G2SB_CTX4_G2PATFGC_0_SECURE                     0x0
#define G2SB_CTX4_G2PATFGC_0_WORD_COUNT                         0x1
#define G2SB_CTX4_G2PATFGC_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATFGC_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATFGC_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATFGC_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATFGC_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2PATFGC_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2PATFGC_0_PATFGC_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2PATFGC_0_PATFGC_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX4_G2PATFGC_0_PATFGC_SHIFT)
#define G2SB_CTX4_G2PATFGC_0_PATFGC_RANGE                       31:0
#define G2SB_CTX4_G2PATFGC_0_PATFGC_WOFFSET                     0x0
#define G2SB_CTX4_G2PATFGC_0_PATFGC_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATFGC_0_PATFGC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATFGC_0_PATFGC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATFGC_0_PATFGC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2PATKEY_0  //{2d,index=2a}
#define G2SB_CTX4_G2PATKEY_0                    _MK_ADDR_CONST(0x502a)
#define G2SB_CTX4_G2PATKEY_0_SECURE                     0x0
#define G2SB_CTX4_G2PATKEY_0_WORD_COUNT                         0x1
#define G2SB_CTX4_G2PATKEY_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATKEY_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATKEY_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATKEY_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATKEY_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2PATKEY_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2PATKEY_0_PATKEY_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2PATKEY_0_PATKEY_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX4_G2PATKEY_0_PATKEY_SHIFT)
#define G2SB_CTX4_G2PATKEY_0_PATKEY_RANGE                       31:0
#define G2SB_CTX4_G2PATKEY_0_PATKEY_WOFFSET                     0x0
#define G2SB_CTX4_G2PATKEY_0_PATKEY_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATKEY_0_PATKEY_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATKEY_0_PATKEY_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATKEY_0_PATKEY_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2DSTBA_0  //{host,2d,sb,index=2b}
#define G2SB_CTX4_G2DSTBA_0                     _MK_ADDR_CONST(0x502b)
#define G2SB_CTX4_G2DSTBA_0_SECURE                      0x0
#define G2SB_CTX4_G2DSTBA_0_WORD_COUNT                  0x1
#define G2SB_CTX4_G2DSTBA_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2DSTBA_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Destination base address (byte address)
#define G2SB_CTX4_G2DSTBA_0_DSTBA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2DSTBA_0_DSTBA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX4_G2DSTBA_0_DSTBA_SHIFT)
#define G2SB_CTX4_G2DSTBA_0_DSTBA_RANGE                 31:0
#define G2SB_CTX4_G2DSTBA_0_DSTBA_WOFFSET                       0x0
#define G2SB_CTX4_G2DSTBA_0_DSTBA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_0_DSTBA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_0_DSTBA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_0_DSTBA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2DSTBA_B_0  //{host,2d,sb,index=2c}
#define G2SB_CTX4_G2DSTBA_B_0                   _MK_ADDR_CONST(0x502c)
#define G2SB_CTX4_G2DSTBA_B_0_SECURE                    0x0
#define G2SB_CTX4_G2DSTBA_B_0_WORD_COUNT                        0x1
#define G2SB_CTX4_G2DSTBA_B_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_B_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_B_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_B_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_B_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2DSTBA_B_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// Destination base address (byte address)
// only usable in hardware trigger mode by enable gcsw
#define G2SB_CTX4_G2DSTBA_B_0_DSTBA_B_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2DSTBA_B_0_DSTBA_B_FIELD                     (_MK_MASK_CONST(0xffffffff) << G2SB_CTX4_G2DSTBA_B_0_DSTBA_B_SHIFT)
#define G2SB_CTX4_G2DSTBA_B_0_DSTBA_B_RANGE                     31:0
#define G2SB_CTX4_G2DSTBA_B_0_DSTBA_B_WOFFSET                   0x0
#define G2SB_CTX4_G2DSTBA_B_0_DSTBA_B_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_B_0_DSTBA_B_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_B_0_DSTBA_B_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_B_0_DSTBA_B_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2DSTBA_C_0  //{2d,sb,index=2d}
#define G2SB_CTX4_G2DSTBA_C_0                   _MK_ADDR_CONST(0x502d)
#define G2SB_CTX4_G2DSTBA_C_0_SECURE                    0x0
#define G2SB_CTX4_G2DSTBA_C_0_WORD_COUNT                        0x1
#define G2SB_CTX4_G2DSTBA_C_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_C_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_C_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_C_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_C_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2DSTBA_C_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// Destination base address (byte address)
#define G2SB_CTX4_G2DSTBA_C_0_DSTBA_C_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2DSTBA_C_0_DSTBA_C_FIELD                     (_MK_MASK_CONST(0xffffffff) << G2SB_CTX4_G2DSTBA_C_0_DSTBA_C_SHIFT)
#define G2SB_CTX4_G2DSTBA_C_0_DSTBA_C_RANGE                     31:0
#define G2SB_CTX4_G2DSTBA_C_0_DSTBA_C_WOFFSET                   0x0
#define G2SB_CTX4_G2DSTBA_C_0_DSTBA_C_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_C_0_DSTBA_C_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_C_0_DSTBA_C_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_C_0_DSTBA_C_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2DSTST_0  //{host,2d,sb,sbm,index=2e}
#define G2SB_CTX4_G2DSTST_0                     _MK_ADDR_CONST(0x502e)
#define G2SB_CTX4_G2DSTST_0_SECURE                      0x0
#define G2SB_CTX4_G2DSTST_0_WORD_COUNT                  0x1
#define G2SB_CTX4_G2DSTST_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTST_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTST_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTST_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTST_0_READ_MASK                   _MK_MASK_CONST(0xffff)
#define G2SB_CTX4_G2DSTST_0_WRITE_MASK                  _MK_MASK_CONST(0xffff)
// Destination Stride coordinate(bytes) with respect to DSTBA.
#define G2SB_CTX4_G2DSTST_0_DSTS_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2DSTST_0_DSTS_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX4_G2DSTST_0_DSTS_SHIFT)
#define G2SB_CTX4_G2DSTST_0_DSTS_RANGE                  15:0
#define G2SB_CTX4_G2DSTST_0_DSTS_WOFFSET                        0x0
#define G2SB_CTX4_G2DSTST_0_DSTS_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTST_0_DSTS_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTST_0_DSTS_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTST_0_DSTS_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Surface methods
// G2SRCPACK should only be used to specify the line gap
// use G2SRCPACK_SIZE to program height and width

// Register G2SB_CTX4_G2SRCPACK_0  //{2d,index=2f} source data packed mode
#define G2SB_CTX4_G2SRCPACK_0                   _MK_ADDR_CONST(0x502f)
#define G2SB_CTX4_G2SRCPACK_0_SECURE                    0x0
#define G2SB_CTX4_G2SRCPACK_0_WORD_COUNT                        0x1
#define G2SB_CTX4_G2SRCPACK_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCPACK_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCPACK_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCPACK_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCPACK_0_READ_MASK                         _MK_MASK_CONST(0xf)
#define G2SB_CTX4_G2SRCPACK_0_WRITE_MASK                        _MK_MASK_CONST(0xf)
// Packed mode - source mono data line gap
#define G2SB_CTX4_G2SRCPACK_0_SRCLNGAP_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2SRCPACK_0_SRCLNGAP_FIELD                    (_MK_MASK_CONST(0xf) << G2SB_CTX4_G2SRCPACK_0_SRCLNGAP_SHIFT)
#define G2SB_CTX4_G2SRCPACK_0_SRCLNGAP_RANGE                    3:0
#define G2SB_CTX4_G2SRCPACK_0_SRCLNGAP_WOFFSET                  0x0
#define G2SB_CTX4_G2SRCPACK_0_SRCLNGAP_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCPACK_0_SRCLNGAP_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCPACK_0_SRCLNGAP_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCPACK_0_SRCLNGAP_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// G2SRCPACKS_SIZE -- extension of G2SRCPACK, this register only holds the size of the packed data

// Register G2SB_CTX4_G2SRCPACK_SIZE_0  //{2d,index=30} source data packed mode
// In packed mode, SRCMONOW holds the horizontal size (bytes).
// If MONOH > 1, it is required width/stride be 16 byte aligned.
// Packed mode - source mono data line gap
#define G2SB_CTX4_G2SRCPACK_SIZE_0                      _MK_ADDR_CONST(0x5030)
#define G2SB_CTX4_G2SRCPACK_SIZE_0_SECURE                       0x0
#define G2SB_CTX4_G2SRCPACK_SIZE_0_WORD_COUNT                   0x1
#define G2SB_CTX4_G2SRCPACK_SIZE_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCPACK_SIZE_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCPACK_SIZE_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCPACK_SIZE_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCPACK_SIZE_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2SRCPACK_SIZE_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
// Packed mode - source mono data width in bytes
#define G2SB_CTX4_G2SRCPACK_SIZE_0_SRCMONOW_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2SRCPACK_SIZE_0_SRCMONOW_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_CTX4_G2SRCPACK_SIZE_0_SRCMONOW_SHIFT)
#define G2SB_CTX4_G2SRCPACK_SIZE_0_SRCMONOW_RANGE                       15:0
#define G2SB_CTX4_G2SRCPACK_SIZE_0_SRCMONOW_WOFFSET                     0x0
#define G2SB_CTX4_G2SRCPACK_SIZE_0_SRCMONOW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCPACK_SIZE_0_SRCMONOW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCPACK_SIZE_0_SRCMONOW_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCPACK_SIZE_0_SRCMONOW_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Packed mode - source mono data height in bytes
#define G2SB_CTX4_G2SRCPACK_SIZE_0_SRCMONOH_SHIFT                       _MK_SHIFT_CONST(16)
#define G2SB_CTX4_G2SRCPACK_SIZE_0_SRCMONOH_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_CTX4_G2SRCPACK_SIZE_0_SRCMONOH_SHIFT)
#define G2SB_CTX4_G2SRCPACK_SIZE_0_SRCMONOH_RANGE                       31:16
#define G2SB_CTX4_G2SRCPACK_SIZE_0_SRCMONOH_WOFFSET                     0x0
#define G2SB_CTX4_G2SRCPACK_SIZE_0_SRCMONOH_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCPACK_SIZE_0_SRCMONOH_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCPACK_SIZE_0_SRCMONOH_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCPACK_SIZE_0_SRCMONOH_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2SRCBA_0  //{host,2d,sb,index=31}
//src base address
#define G2SB_CTX4_G2SRCBA_0                     _MK_ADDR_CONST(0x5031)
#define G2SB_CTX4_G2SRCBA_0_SECURE                      0x0
#define G2SB_CTX4_G2SRCBA_0_WORD_COUNT                  0x1
#define G2SB_CTX4_G2SRCBA_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCBA_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCBA_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCBA_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCBA_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2SRCBA_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Source base address (byte address)
#define G2SB_CTX4_G2SRCBA_0_SRCBA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2SRCBA_0_SRCBA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX4_G2SRCBA_0_SRCBA_SHIFT)
#define G2SB_CTX4_G2SRCBA_0_SRCBA_RANGE                 31:0
#define G2SB_CTX4_G2SRCBA_0_SRCBA_WOFFSET                       0x0
#define G2SB_CTX4_G2SRCBA_0_SRCBA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCBA_0_SRCBA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCBA_0_SRCBA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCBA_0_SRCBA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2SRCBA_B_0  //{2d,sb,index=32}
//SB only
#define G2SB_CTX4_G2SRCBA_B_0                   _MK_ADDR_CONST(0x5032)
#define G2SB_CTX4_G2SRCBA_B_0_SECURE                    0x0
#define G2SB_CTX4_G2SRCBA_B_0_WORD_COUNT                        0x1
#define G2SB_CTX4_G2SRCBA_B_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCBA_B_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCBA_B_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCBA_B_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCBA_B_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2SRCBA_B_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
//This parameter specifies the start address of source image
// stored in the image buffer memory. In 4:2:0
//format mode, this image block accommodates for Y-image.
//This address specifies byte-position, however, bits [2:0]
// are restricted with respect to the data formats to fit
//multiple pixels in one memory word (8 bytes),. For example,
// {0, 4} for any YcrCb formats, {0, 2, 4, 6} for
//RGB 16-bit format.  Since one Y pixel takes 8-bit, all
// 8 byte-positions are valid in 4:2:0 mode. (Unlike
//multiplexed pixels format, there is no restrictions on this value.)
#define G2SB_CTX4_G2SRCBA_B_0_SRCBA_B_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2SRCBA_B_0_SRCBA_B_FIELD                     (_MK_MASK_CONST(0xffffffff) << G2SB_CTX4_G2SRCBA_B_0_SRCBA_B_SHIFT)
#define G2SB_CTX4_G2SRCBA_B_0_SRCBA_B_RANGE                     31:0
#define G2SB_CTX4_G2SRCBA_B_0_SRCBA_B_WOFFSET                   0x0
#define G2SB_CTX4_G2SRCBA_B_0_SRCBA_B_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCBA_B_0_SRCBA_B_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCBA_B_0_SRCBA_B_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCBA_B_0_SRCBA_B_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2SRCST_0  //{host,2d,sb,sbm,index=33}
#define G2SB_CTX4_G2SRCST_0                     _MK_ADDR_CONST(0x5033)
#define G2SB_CTX4_G2SRCST_0_SECURE                      0x0
#define G2SB_CTX4_G2SRCST_0_WORD_COUNT                  0x1
#define G2SB_CTX4_G2SRCST_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCST_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCST_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCST_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCST_0_READ_MASK                   _MK_MASK_CONST(0xffff)
#define G2SB_CTX4_G2SRCST_0_WRITE_MASK                  _MK_MASK_CONST(0xffff)
// Source Stride coordinate(bytes) with respect to SRCBA.
//In order to fit multiple pixels in one memory word (8 bytes),
//  bits [2:0] are restricted with respect to the
//data formats. For example, {0, 4} for any YcrCb formats,
//  {0, 2, 4, 6} for RGB 16-bit format.
#define G2SB_CTX4_G2SRCST_0_SRCS_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2SRCST_0_SRCS_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX4_G2SRCST_0_SRCS_SHIFT)
#define G2SB_CTX4_G2SRCST_0_SRCS_RANGE                  15:0
#define G2SB_CTX4_G2SRCST_0_SRCS_WOFFSET                        0x0
#define G2SB_CTX4_G2SRCST_0_SRCS_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCST_0_SRCS_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCST_0_SRCS_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCST_0_SRCS_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//srcColors

// Register G2SB_CTX4_G2SRCBGC_0  //{2d,index=34}
#define G2SB_CTX4_G2SRCBGC_0                    _MK_ADDR_CONST(0x5034)
#define G2SB_CTX4_G2SRCBGC_0_SECURE                     0x0
#define G2SB_CTX4_G2SRCBGC_0_WORD_COUNT                         0x1
#define G2SB_CTX4_G2SRCBGC_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCBGC_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCBGC_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCBGC_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCBGC_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2SRCBGC_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2SRCBGC_0_SRCBGC_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2SRCBGC_0_SRCBGC_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX4_G2SRCBGC_0_SRCBGC_SHIFT)
#define G2SB_CTX4_G2SRCBGC_0_SRCBGC_RANGE                       31:0
#define G2SB_CTX4_G2SRCBGC_0_SRCBGC_WOFFSET                     0x0
#define G2SB_CTX4_G2SRCBGC_0_SRCBGC_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCBGC_0_SRCBGC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCBGC_0_SRCBGC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCBGC_0_SRCBGC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2SRCFGC_0  //{host,2d,index=35}
#define G2SB_CTX4_G2SRCFGC_0                    _MK_ADDR_CONST(0x5035)
#define G2SB_CTX4_G2SRCFGC_0_SECURE                     0x0
#define G2SB_CTX4_G2SRCFGC_0_WORD_COUNT                         0x1
#define G2SB_CTX4_G2SRCFGC_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCFGC_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCFGC_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCFGC_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCFGC_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2SRCFGC_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2SRCFGC_0_SRCFGC_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2SRCFGC_0_SRCFGC_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX4_G2SRCFGC_0_SRCFGC_SHIFT)
#define G2SB_CTX4_G2SRCFGC_0_SRCFGC_RANGE                       31:0
#define G2SB_CTX4_G2SRCFGC_0_SRCFGC_WOFFSET                     0x0
#define G2SB_CTX4_G2SRCFGC_0_SRCFGC_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCFGC_0_SRCFGC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCFGC_0_SRCFGC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCFGC_0_SRCFGC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2SRCKEY_0  //{2d,index=36}
#define G2SB_CTX4_G2SRCKEY_0                    _MK_ADDR_CONST(0x5036)
#define G2SB_CTX4_G2SRCKEY_0_SECURE                     0x0
#define G2SB_CTX4_G2SRCKEY_0_WORD_COUNT                         0x1
#define G2SB_CTX4_G2SRCKEY_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCKEY_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCKEY_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCKEY_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCKEY_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2SRCKEY_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2SRCKEY_0_SRCKEY_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2SRCKEY_0_SRCKEY_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX4_G2SRCKEY_0_SRCKEY_SHIFT)
#define G2SB_CTX4_G2SRCKEY_0_SRCKEY_RANGE                       31:0
#define G2SB_CTX4_G2SRCKEY_0_SRCKEY_WOFFSET                     0x0
#define G2SB_CTX4_G2SRCKEY_0_SRCKEY_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCKEY_0_SRCKEY_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCKEY_0_SRCKEY_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCKEY_0_SRCKEY_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// for sc15, SRCWIDTH bit 14 must be set to 0. (limit of 16383 pixels)

// Register G2SB_CTX4_G2SRCSIZE_0  //{host,2d,sb,sbm,index=37}
#define G2SB_CTX4_G2SRCSIZE_0                   _MK_ADDR_CONST(0x5037)
#define G2SB_CTX4_G2SRCSIZE_0_SECURE                    0x0
#define G2SB_CTX4_G2SRCSIZE_0_WORD_COUNT                        0x1
#define G2SB_CTX4_G2SRCSIZE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCSIZE_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCSIZE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCSIZE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCSIZE_0_READ_MASK                         _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX4_G2SRCSIZE_0_WRITE_MASK                        _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX4_G2SRCSIZE_0_SRCWIDTH_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2SRCSIZE_0_SRCWIDTH_FIELD                    (_MK_MASK_CONST(0x7fff) << G2SB_CTX4_G2SRCSIZE_0_SRCWIDTH_SHIFT)
#define G2SB_CTX4_G2SRCSIZE_0_SRCWIDTH_RANGE                    14:0
#define G2SB_CTX4_G2SRCSIZE_0_SRCWIDTH_WOFFSET                  0x0
#define G2SB_CTX4_G2SRCSIZE_0_SRCWIDTH_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCSIZE_0_SRCWIDTH_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCSIZE_0_SRCWIDTH_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCSIZE_0_SRCWIDTH_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// In SB mode, number of lines - 1
// In 2D mode, actual lines
#define G2SB_CTX4_G2SRCSIZE_0_SRCHEIGHT_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX4_G2SRCSIZE_0_SRCHEIGHT_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX4_G2SRCSIZE_0_SRCHEIGHT_SHIFT)
#define G2SB_CTX4_G2SRCSIZE_0_SRCHEIGHT_RANGE                   30:16
#define G2SB_CTX4_G2SRCSIZE_0_SRCHEIGHT_WOFFSET                 0x0
#define G2SB_CTX4_G2SRCSIZE_0_SRCHEIGHT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCSIZE_0_SRCHEIGHT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCSIZE_0_SRCHEIGHT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCSIZE_0_SRCHEIGHT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2DSTSIZE_0  //{host,2d,sb,sbm,index=38}
#define G2SB_CTX4_G2DSTSIZE_0                   _MK_ADDR_CONST(0x5038)
#define G2SB_CTX4_G2DSTSIZE_0_SECURE                    0x0
#define G2SB_CTX4_G2DSTSIZE_0_WORD_COUNT                        0x1
#define G2SB_CTX4_G2DSTSIZE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTSIZE_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTSIZE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTSIZE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTSIZE_0_READ_MASK                         _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX4_G2DSTSIZE_0_WRITE_MASK                        _MK_MASK_CONST(0x7fff7fff)
// In 2D mode, the largest number can be programmed is 0x7fef
#define G2SB_CTX4_G2DSTSIZE_0_DSTWIDTH_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2DSTSIZE_0_DSTWIDTH_FIELD                    (_MK_MASK_CONST(0x7fff) << G2SB_CTX4_G2DSTSIZE_0_DSTWIDTH_SHIFT)
#define G2SB_CTX4_G2DSTSIZE_0_DSTWIDTH_RANGE                    14:0
#define G2SB_CTX4_G2DSTSIZE_0_DSTWIDTH_WOFFSET                  0x0
#define G2SB_CTX4_G2DSTSIZE_0_DSTWIDTH_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTSIZE_0_DSTWIDTH_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTSIZE_0_DSTWIDTH_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTSIZE_0_DSTWIDTH_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// In SB mode, number of lines - 1
// In 2D mode, actual lines
#define G2SB_CTX4_G2DSTSIZE_0_DSTHEIGHT_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX4_G2DSTSIZE_0_DSTHEIGHT_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX4_G2DSTSIZE_0_DSTHEIGHT_SHIFT)
#define G2SB_CTX4_G2DSTSIZE_0_DSTHEIGHT_RANGE                   30:16
#define G2SB_CTX4_G2DSTSIZE_0_DSTHEIGHT_WOFFSET                 0x0
#define G2SB_CTX4_G2DSTSIZE_0_DSTHEIGHT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTSIZE_0_DSTHEIGHT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTSIZE_0_DSTHEIGHT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTSIZE_0_DSTHEIGHT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// ImageBlit Methods

// Register G2SB_CTX4_G2SRCPS_0  //{host,2d,index=39}
#define G2SB_CTX4_G2SRCPS_0                     _MK_ADDR_CONST(0x5039)
#define G2SB_CTX4_G2SRCPS_0_SECURE                      0x0
#define G2SB_CTX4_G2SRCPS_0_WORD_COUNT                  0x1
#define G2SB_CTX4_G2SRCPS_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCPS_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCPS_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCPS_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCPS_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2SRCPS_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
//SRCX[2:0] are ignored in SRCCD==0 (mono expansion),
//The first bit of the first byte (bit7 if HLMONO==0, or bit0 if HLMONO==1) always
//expand to DSTX,DSTY
#define G2SB_CTX4_G2SRCPS_0_SRCX_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2SRCPS_0_SRCX_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX4_G2SRCPS_0_SRCX_SHIFT)
#define G2SB_CTX4_G2SRCPS_0_SRCX_RANGE                  15:0
#define G2SB_CTX4_G2SRCPS_0_SRCX_WOFFSET                        0x0
#define G2SB_CTX4_G2SRCPS_0_SRCX_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCPS_0_SRCX_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCPS_0_SRCX_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCPS_0_SRCX_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX4_G2SRCPS_0_SRCY_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX4_G2SRCPS_0_SRCY_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX4_G2SRCPS_0_SRCY_SHIFT)
#define G2SB_CTX4_G2SRCPS_0_SRCY_RANGE                  31:16
#define G2SB_CTX4_G2SRCPS_0_SRCY_WOFFSET                        0x0
#define G2SB_CTX4_G2SRCPS_0_SRCY_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCPS_0_SRCY_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCPS_0_SRCY_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCPS_0_SRCY_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2DSTPS_0  //{host,2d,index=3a}
#define G2SB_CTX4_G2DSTPS_0                     _MK_ADDR_CONST(0x503a)
#define G2SB_CTX4_G2DSTPS_0_SECURE                      0x0
#define G2SB_CTX4_G2DSTPS_0_WORD_COUNT                  0x1
#define G2SB_CTX4_G2DSTPS_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTPS_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTPS_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTPS_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTPS_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2DSTPS_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// NOTE: when ALPTYPE is PL1BPP, DSTX[2:0] must be zero, see bug 344489
// NOTE: when ALPTYPE is PL2BPP, DSTX[1:0] must be zero, see bug 344489
// NOTE: when ALPTYPE is PL4BPP, DSTX[0:0] must be zero, see bug 344489
#define G2SB_CTX4_G2DSTPS_0_DSTX_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2DSTPS_0_DSTX_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX4_G2DSTPS_0_DSTX_SHIFT)
#define G2SB_CTX4_G2DSTPS_0_DSTX_RANGE                  15:0
#define G2SB_CTX4_G2DSTPS_0_DSTX_WOFFSET                        0x0
#define G2SB_CTX4_G2DSTPS_0_DSTX_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTPS_0_DSTX_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTPS_0_DSTX_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTPS_0_DSTX_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX4_G2DSTPS_0_DSTY_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX4_G2DSTPS_0_DSTY_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX4_G2DSTPS_0_DSTY_SHIFT)
#define G2SB_CTX4_G2DSTPS_0_DSTY_RANGE                  31:16
#define G2SB_CTX4_G2DSTPS_0_DSTY_WOFFSET                        0x0
#define G2SB_CTX4_G2DSTPS_0_DSTY_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTPS_0_DSTY_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTPS_0_DSTY_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTPS_0_DSTY_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// circular buffer

// Register G2SB_CTX4_G2CBDES_0  // {host,2d,sb,index=3b}
#define G2SB_CTX4_G2CBDES_0                     _MK_ADDR_CONST(0x503b)
#define G2SB_CTX4_G2CBDES_0_SECURE                      0x0
#define G2SB_CTX4_G2CBDES_0_WORD_COUNT                  0x1
#define G2SB_CTX4_G2CBDES_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBDES_0_RESET_MASK                  _MK_MASK_CONST(0x80000000)
#define G2SB_CTX4_G2CBDES_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBDES_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBDES_0_READ_MASK                   _MK_MASK_CONST(0xffff00ff)
#define G2SB_CTX4_G2CBDES_0_WRITE_MASK                  _MK_MASK_CONST(0xffff00ff)
// This specifies the number of buffers in
//circular buffer feature
#define G2SB_CTX4_G2CBDES_0_CBCOUNT_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2CBDES_0_CBCOUNT_FIELD                       (_MK_MASK_CONST(0xff) << G2SB_CTX4_G2CBDES_0_CBCOUNT_SHIFT)
#define G2SB_CTX4_G2CBDES_0_CBCOUNT_RANGE                       7:0
#define G2SB_CTX4_G2CBDES_0_CBCOUNT_WOFFSET                     0x0
#define G2SB_CTX4_G2CBDES_0_CBCOUNT_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBDES_0_CBCOUNT_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBDES_0_CBCOUNT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBDES_0_CBCOUNT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//vertical line number in one buffer
#define G2SB_CTX4_G2CBDES_0_CBLINE_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_CTX4_G2CBDES_0_CBLINE_FIELD                        (_MK_MASK_CONST(0x7fff) << G2SB_CTX4_G2CBDES_0_CBLINE_SHIFT)
#define G2SB_CTX4_G2CBDES_0_CBLINE_RANGE                        30:16
#define G2SB_CTX4_G2CBDES_0_CBLINE_WOFFSET                      0x0
#define G2SB_CTX4_G2CBDES_0_CBLINE_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBDES_0_CBLINE_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBDES_0_CBLINE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBDES_0_CBLINE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

//top clipping at the first buffer, (buffer start)
// refer to TOP_CBLINE in G2CBDES2 0= disable
#define G2SB_CTX4_G2CBDES_0_TOPCLIP_SHIFT                       _MK_SHIFT_CONST(31)
#define G2SB_CTX4_G2CBDES_0_TOPCLIP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2CBDES_0_TOPCLIP_SHIFT)
#define G2SB_CTX4_G2CBDES_0_TOPCLIP_RANGE                       31:31
#define G2SB_CTX4_G2CBDES_0_TOPCLIP_WOFFSET                     0x0
#define G2SB_CTX4_G2CBDES_0_TOPCLIP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBDES_0_TOPCLIP_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2CBDES_0_TOPCLIP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBDES_0_TOPCLIP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBDES_0_TOPCLIP_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CBDES_0_TOPCLIP_ENABLE                      _MK_ENUM_CONST(1)


// Register G2SB_CTX4_G2CBSTRIDE_0  // {host,2d,sb,index=3c}
#define G2SB_CTX4_G2CBSTRIDE_0                  _MK_ADDR_CONST(0x503c)
#define G2SB_CTX4_G2CBSTRIDE_0_SECURE                   0x0
#define G2SB_CTX4_G2CBSTRIDE_0_WORD_COUNT                       0x1
#define G2SB_CTX4_G2CBSTRIDE_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBSTRIDE_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBSTRIDE_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBSTRIDE_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBSTRIDE_0_READ_MASK                        _MK_MASK_CONST(0xc0ffffff)
#define G2SB_CTX4_G2CBSTRIDE_0_WRITE_MASK                       _MK_MASK_CONST(0xc0ffffff)
// Video Buffer Luma(or RGB) Buffer Stride
//  This is luma buffer stride (in bytes)
#define G2SB_CTX4_G2CBSTRIDE_0_CBSTRIDE_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2CBSTRIDE_0_CBSTRIDE_FIELD                   (_MK_MASK_CONST(0xffffff) << G2SB_CTX4_G2CBSTRIDE_0_CBSTRIDE_SHIFT)
#define G2SB_CTX4_G2CBSTRIDE_0_CBSTRIDE_RANGE                   23:0
#define G2SB_CTX4_G2CBSTRIDE_0_CBSTRIDE_WOFFSET                 0x0
#define G2SB_CTX4_G2CBSTRIDE_0_CBSTRIDE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBSTRIDE_0_CBSTRIDE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBSTRIDE_0_CBSTRIDE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBSTRIDE_0_CBSTRIDE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Chroma Buffer Stride default is half of luma
//   00= 1/2 of Luma Buffer Stride; in this
//       case, Luma Buffer Stride should be
//       multiple of 2 bytes.
//   01= Equal to Luma Buffer Stride
//   10= 1/4 of Luma Buffer Stride; in this
//       case, Luma Buffer Stride should be
//       multiple of 4 bytes.
//   1x= Reserved
#define G2SB_CTX4_G2CBSTRIDE_0_CBUVSTRIDE_SHIFT                 _MK_SHIFT_CONST(30)
#define G2SB_CTX4_G2CBSTRIDE_0_CBUVSTRIDE_FIELD                 (_MK_MASK_CONST(0x3) << G2SB_CTX4_G2CBSTRIDE_0_CBUVSTRIDE_SHIFT)
#define G2SB_CTX4_G2CBSTRIDE_0_CBUVSTRIDE_RANGE                 31:30
#define G2SB_CTX4_G2CBSTRIDE_0_CBUVSTRIDE_WOFFSET                       0x0
#define G2SB_CTX4_G2CBSTRIDE_0_CBUVSTRIDE_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBSTRIDE_0_CBUVSTRIDE_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBSTRIDE_0_CBUVSTRIDE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBSTRIDE_0_CBUVSTRIDE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBSTRIDE_0_CBUVSTRIDE_CBS2X                 _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2CBSTRIDE_0_CBUVSTRIDE_CBS1X                 _MK_ENUM_CONST(1)
#define G2SB_CTX4_G2CBSTRIDE_0_CBUVSTRIDE_CBS4X                 _MK_ENUM_CONST(2)

//Line Methods

// Register G2SB_CTX4_G2LINESETTING_0  //{2d,index=3d}
#define G2SB_CTX4_G2LINESETTING_0                       _MK_ADDR_CONST(0x503d)
#define G2SB_CTX4_G2LINESETTING_0_SECURE                        0x0
#define G2SB_CTX4_G2LINESETTING_0_WORD_COUNT                    0x1
#define G2SB_CTX4_G2LINESETTING_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINESETTING_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINESETTING_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINESETTING_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINESETTING_0_READ_MASK                     _MK_MASK_CONST(0xff1fffff)
#define G2SB_CTX4_G2LINESETTING_0_WRITE_MASK                    _MK_MASK_CONST(0xff1fffff)
#define G2SB_CTX4_G2LINESETTING_0_GAMMA_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2LINESETTING_0_GAMMA_FIELD                   (_MK_MASK_CONST(0x1fffff) << G2SB_CTX4_G2LINESETTING_0_GAMMA_SHIFT)
#define G2SB_CTX4_G2LINESETTING_0_GAMMA_RANGE                   20:0
#define G2SB_CTX4_G2LINESETTING_0_GAMMA_WOFFSET                 0x0
#define G2SB_CTX4_G2LINESETTING_0_GAMMA_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINESETTING_0_GAMMA_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINESETTING_0_GAMMA_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINESETTING_0_GAMMA_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

//0:xmajor 1: y major
#define G2SB_CTX4_G2LINESETTING_0_MAJOR_SHIFT                   _MK_SHIFT_CONST(24)
#define G2SB_CTX4_G2LINESETTING_0_MAJOR_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2LINESETTING_0_MAJOR_SHIFT)
#define G2SB_CTX4_G2LINESETTING_0_MAJOR_RANGE                   24:24
#define G2SB_CTX4_G2LINESETTING_0_MAJOR_WOFFSET                 0x0
#define G2SB_CTX4_G2LINESETTING_0_MAJOR_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINESETTING_0_MAJOR_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINESETTING_0_MAJOR_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINESETTING_0_MAJOR_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINESETTING_0_MAJOR_XMAJOR                  _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2LINESETTING_0_MAJOR_YMAJOR                  _MK_ENUM_CONST(1)

#define G2SB_CTX4_G2LINESETTING_0_LINEXDIR_SHIFT                        _MK_SHIFT_CONST(25)
#define G2SB_CTX4_G2LINESETTING_0_LINEXDIR_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2LINESETTING_0_LINEXDIR_SHIFT)
#define G2SB_CTX4_G2LINESETTING_0_LINEXDIR_RANGE                        25:25
#define G2SB_CTX4_G2LINESETTING_0_LINEXDIR_WOFFSET                      0x0
#define G2SB_CTX4_G2LINESETTING_0_LINEXDIR_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINESETTING_0_LINEXDIR_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINESETTING_0_LINEXDIR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINESETTING_0_LINEXDIR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

#define G2SB_CTX4_G2LINESETTING_0_LINEYDIR_SHIFT                        _MK_SHIFT_CONST(26)
#define G2SB_CTX4_G2LINESETTING_0_LINEYDIR_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2LINESETTING_0_LINEYDIR_SHIFT)
#define G2SB_CTX4_G2LINESETTING_0_LINEYDIR_RANGE                        26:26
#define G2SB_CTX4_G2LINESETTING_0_LINEYDIR_WOFFSET                      0x0
#define G2SB_CTX4_G2LINESETTING_0_LINEYDIR_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINESETTING_0_LINEYDIR_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINESETTING_0_LINEYDIR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINESETTING_0_LINEYDIR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

//draw last pixel or not
#define G2SB_CTX4_G2LINESETTING_0_DROPLASTP_SHIFT                       _MK_SHIFT_CONST(27)
#define G2SB_CTX4_G2LINESETTING_0_DROPLASTP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2LINESETTING_0_DROPLASTP_SHIFT)
#define G2SB_CTX4_G2LINESETTING_0_DROPLASTP_RANGE                       27:27
#define G2SB_CTX4_G2LINESETTING_0_DROPLASTP_WOFFSET                     0x0
#define G2SB_CTX4_G2LINESETTING_0_DROPLASTP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINESETTING_0_DROPLASTP_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINESETTING_0_DROPLASTP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINESETTING_0_DROPLASTP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//use OCTANTS in G2LINEDELTAN register instead of MAJOR LINEXDIR LINEYDIR
#define G2SB_CTX4_G2LINESETTING_0_LINEUSEOCTANT_SHIFT                   _MK_SHIFT_CONST(28)
#define G2SB_CTX4_G2LINESETTING_0_LINEUSEOCTANT_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2LINESETTING_0_LINEUSEOCTANT_SHIFT)
#define G2SB_CTX4_G2LINESETTING_0_LINEUSEOCTANT_RANGE                   28:28
#define G2SB_CTX4_G2LINESETTING_0_LINEUSEOCTANT_WOFFSET                 0x0
#define G2SB_CTX4_G2LINESETTING_0_LINEUSEOCTANT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINESETTING_0_LINEUSEOCTANT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINESETTING_0_LINEUSEOCTANT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINESETTING_0_LINEUSEOCTANT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

//000 octant 0
//001 octant 1
//010 octant 2
//011 octant 3
//100 octant 4
//101 octant 5
//110 octant 6
//111 octant 7
#define G2SB_CTX4_G2LINESETTING_0_OCTANTS_SHIFT                 _MK_SHIFT_CONST(29)
#define G2SB_CTX4_G2LINESETTING_0_OCTANTS_FIELD                 (_MK_MASK_CONST(0x7) << G2SB_CTX4_G2LINESETTING_0_OCTANTS_SHIFT)
#define G2SB_CTX4_G2LINESETTING_0_OCTANTS_RANGE                 31:29
#define G2SB_CTX4_G2LINESETTING_0_OCTANTS_WOFFSET                       0x0
#define G2SB_CTX4_G2LINESETTING_0_OCTANTS_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINESETTING_0_OCTANTS_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINESETTING_0_OCTANTS_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINESETTING_0_OCTANTS_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//
//
//
//   |    |    |
//    | 5 | 6 |
//     |  |  |
//    4 | | | 7
//       |||
//   ----------->
//       |||
//    3 | | | 0
//     |  |  |
//    | 2 | 1 |
//   |    |    |
//        V
//

// Register G2SB_CTX4_G2LINEDELTAN_0  //{2d,index=3e}
#define G2SB_CTX4_G2LINEDELTAN_0                        _MK_ADDR_CONST(0x503e)
#define G2SB_CTX4_G2LINEDELTAN_0_SECURE                         0x0
#define G2SB_CTX4_G2LINEDELTAN_0_WORD_COUNT                     0x1
#define G2SB_CTX4_G2LINEDELTAN_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINEDELTAN_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINEDELTAN_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINEDELTAN_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINEDELTAN_0_READ_MASK                      _MK_MASK_CONST(0x1fffff)
#define G2SB_CTX4_G2LINEDELTAN_0_WRITE_MASK                     _MK_MASK_CONST(0x1fffff)
#define G2SB_CTX4_G2LINEDELTAN_0_DELTAN_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2LINEDELTAN_0_DELTAN_FIELD                   (_MK_MASK_CONST(0x1fffff) << G2SB_CTX4_G2LINEDELTAN_0_DELTAN_SHIFT)
#define G2SB_CTX4_G2LINEDELTAN_0_DELTAN_RANGE                   20:0
#define G2SB_CTX4_G2LINEDELTAN_0_DELTAN_WOFFSET                 0x0
#define G2SB_CTX4_G2LINEDELTAN_0_DELTAN_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINEDELTAN_0_DELTAN_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINEDELTAN_0_DELTAN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINEDELTAN_0_DELTAN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2LINEDELTAM_0  //{2d,index=3f}
#define G2SB_CTX4_G2LINEDELTAM_0                        _MK_ADDR_CONST(0x503f)
#define G2SB_CTX4_G2LINEDELTAM_0_SECURE                         0x0
#define G2SB_CTX4_G2LINEDELTAM_0_WORD_COUNT                     0x1
#define G2SB_CTX4_G2LINEDELTAM_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINEDELTAM_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINEDELTAM_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINEDELTAM_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINEDELTAM_0_READ_MASK                      _MK_MASK_CONST(0x1fffff)
#define G2SB_CTX4_G2LINEDELTAM_0_WRITE_MASK                     _MK_MASK_CONST(0x1fffff)
#define G2SB_CTX4_G2LINEDELTAM_0_DELTAM_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2LINEDELTAM_0_DELTAM_FIELD                   (_MK_MASK_CONST(0x1fffff) << G2SB_CTX4_G2LINEDELTAM_0_DELTAM_SHIFT)
#define G2SB_CTX4_G2LINEDELTAM_0_DELTAM_RANGE                   20:0
#define G2SB_CTX4_G2LINEDELTAM_0_DELTAM_WOFFSET                 0x0
#define G2SB_CTX4_G2LINEDELTAM_0_DELTAM_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINEDELTAM_0_DELTAM_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINEDELTAM_0_DELTAM_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINEDELTAM_0_DELTAM_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2LINEPOS_0  //{2d,index=40}
#define G2SB_CTX4_G2LINEPOS_0                   _MK_ADDR_CONST(0x5040)
#define G2SB_CTX4_G2LINEPOS_0_SECURE                    0x0
#define G2SB_CTX4_G2LINEPOS_0_WORD_COUNT                        0x1
#define G2SB_CTX4_G2LINEPOS_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINEPOS_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINEPOS_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINEPOS_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINEPOS_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2LINEPOS_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2LINEPOS_0_LINEXPOS_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2LINEPOS_0_LINEXPOS_FIELD                    (_MK_MASK_CONST(0xffff) << G2SB_CTX4_G2LINEPOS_0_LINEXPOS_SHIFT)
#define G2SB_CTX4_G2LINEPOS_0_LINEXPOS_RANGE                    15:0
#define G2SB_CTX4_G2LINEPOS_0_LINEXPOS_WOFFSET                  0x0
#define G2SB_CTX4_G2LINEPOS_0_LINEXPOS_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINEPOS_0_LINEXPOS_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINEPOS_0_LINEXPOS_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINEPOS_0_LINEXPOS_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

#define G2SB_CTX4_G2LINEPOS_0_LINEYPOS_SHIFT                    _MK_SHIFT_CONST(16)
#define G2SB_CTX4_G2LINEPOS_0_LINEYPOS_FIELD                    (_MK_MASK_CONST(0xffff) << G2SB_CTX4_G2LINEPOS_0_LINEYPOS_SHIFT)
#define G2SB_CTX4_G2LINEPOS_0_LINEYPOS_RANGE                    31:16
#define G2SB_CTX4_G2LINEPOS_0_LINEYPOS_WOFFSET                  0x0
#define G2SB_CTX4_G2LINEPOS_0_LINEYPOS_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINEPOS_0_LINEYPOS_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINEPOS_0_LINEYPOS_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINEPOS_0_LINEYPOS_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2LINELEN_0  //{2d,index=41}
#define G2SB_CTX4_G2LINELEN_0                   _MK_ADDR_CONST(0x5041)
#define G2SB_CTX4_G2LINELEN_0_SECURE                    0x0
#define G2SB_CTX4_G2LINELEN_0_WORD_COUNT                        0x1
#define G2SB_CTX4_G2LINELEN_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINELEN_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINELEN_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINELEN_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINELEN_0_READ_MASK                         _MK_MASK_CONST(0x7fff)
#define G2SB_CTX4_G2LINELEN_0_WRITE_MASK                        _MK_MASK_CONST(0x7fff)
#define G2SB_CTX4_G2LINELEN_0_LINELEN_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2LINELEN_0_LINELEN_FIELD                     (_MK_MASK_CONST(0x7fff) << G2SB_CTX4_G2LINELEN_0_LINELEN_SHIFT)
#define G2SB_CTX4_G2LINELEN_0_LINELEN_RANGE                     14:0
#define G2SB_CTX4_G2LINELEN_0_LINELEN_WOFFSET                   0x0
#define G2SB_CTX4_G2LINELEN_0_LINELEN_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINELEN_0_LINELEN_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINELEN_0_LINELEN_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2LINELEN_0_LINELEN_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2CSCFOURTH_0  //{sb,sbm,index=42}
#define G2SB_CTX4_G2CSCFOURTH_0                 _MK_ADDR_CONST(0x5042)
#define G2SB_CTX4_G2CSCFOURTH_0_SECURE                  0x0
#define G2SB_CTX4_G2CSCFOURTH_0_WORD_COUNT                      0x1
#define G2SB_CTX4_G2CSCFOURTH_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCFOURTH_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCFOURTH_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCFOURTH_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCFOURTH_0_READ_MASK                       _MK_MASK_CONST(0x1ff01ff)
#define G2SB_CTX4_G2CSCFOURTH_0_WRITE_MASK                      _MK_MASK_CONST(0x1ff01ff)
// multiplier for G for U generation.
//This parameter consists of a sign bit and 8-bit magnitude (s1.7)
// For RGB->YUV the recommended value is -0.291 (decimal) or 0x125
// For any other combination this parameter is ignored
#define G2SB_CTX4_G2CSCFOURTH_0_G2U_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2CSCFOURTH_0_G2U_FIELD                       (_MK_MASK_CONST(0x1ff) << G2SB_CTX4_G2CSCFOURTH_0_G2U_SHIFT)
#define G2SB_CTX4_G2CSCFOURTH_0_G2U_RANGE                       8:0
#define G2SB_CTX4_G2CSCFOURTH_0_G2U_WOFFSET                     0x0
#define G2SB_CTX4_G2CSCFOURTH_0_G2U_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCFOURTH_0_G2U_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCFOURTH_0_G2U_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCFOURTH_0_G2U_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// multiplier for G for V generation.
//This parameter consists of a sign bit and 8-bit magnitude (s1.7)
// For RGB->YUV the recommended value is -0.368 (decimal) or 0x12F
// For any other combination this parameter is ignored
#define G2SB_CTX4_G2CSCFOURTH_0_G2V_SHIFT                       _MK_SHIFT_CONST(16)
#define G2SB_CTX4_G2CSCFOURTH_0_G2V_FIELD                       (_MK_MASK_CONST(0x1ff) << G2SB_CTX4_G2CSCFOURTH_0_G2V_SHIFT)
#define G2SB_CTX4_G2CSCFOURTH_0_G2V_RANGE                       24:16
#define G2SB_CTX4_G2CSCFOURTH_0_G2V_WOFFSET                     0x0
#define G2SB_CTX4_G2CSCFOURTH_0_G2V_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCFOURTH_0_G2V_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCFOURTH_0_G2V_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CSCFOURTH_0_G2V_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2SRCST_B_0  //{2d,index=43}
#define G2SB_CTX4_G2SRCST_B_0                   _MK_ADDR_CONST(0x5043)
#define G2SB_CTX4_G2SRCST_B_0_SECURE                    0x0
#define G2SB_CTX4_G2SRCST_B_0_WORD_COUNT                        0x1
#define G2SB_CTX4_G2SRCST_B_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCST_B_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCST_B_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCST_B_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCST_B_0_READ_MASK                         _MK_MASK_CONST(0xffff)
#define G2SB_CTX4_G2SRCST_B_0_WRITE_MASK                        _MK_MASK_CONST(0xffff)
// Source Stride B
#define G2SB_CTX4_G2SRCST_B_0_SRCS_B_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2SRCST_B_0_SRCS_B_FIELD                      (_MK_MASK_CONST(0xffff) << G2SB_CTX4_G2SRCST_B_0_SRCS_B_SHIFT)
#define G2SB_CTX4_G2SRCST_B_0_SRCS_B_RANGE                      15:0
#define G2SB_CTX4_G2SRCST_B_0_SRCS_B_WOFFSET                    0x0
#define G2SB_CTX4_G2SRCST_B_0_SRCS_B_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCST_B_0_SRCS_B_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCST_B_0_SRCS_B_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCST_B_0_SRCS_B_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2UVSTRIDE_0  //{2d,sb,index=44}
#define G2SB_CTX4_G2UVSTRIDE_0                  _MK_ADDR_CONST(0x5044)
#define G2SB_CTX4_G2UVSTRIDE_0_SECURE                   0x0
#define G2SB_CTX4_G2UVSTRIDE_0_WORD_COUNT                       0x1
#define G2SB_CTX4_G2UVSTRIDE_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2UVSTRIDE_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2UVSTRIDE_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2UVSTRIDE_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2UVSTRIDE_0_READ_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX4_G2UVSTRIDE_0_WRITE_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX4_G2UVSTRIDE_0_UVSTRIDE_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2UVSTRIDE_0_UVSTRIDE_FIELD                   (_MK_MASK_CONST(0xffff) << G2SB_CTX4_G2UVSTRIDE_0_UVSTRIDE_SHIFT)
#define G2SB_CTX4_G2UVSTRIDE_0_UVSTRIDE_RANGE                   15:0
#define G2SB_CTX4_G2UVSTRIDE_0_UVSTRIDE_WOFFSET                 0x0
#define G2SB_CTX4_G2UVSTRIDE_0_UVSTRIDE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2UVSTRIDE_0_UVSTRIDE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2UVSTRIDE_0_UVSTRIDE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2UVSTRIDE_0_UVSTRIDE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// circular buffer controller 2

// Register G2SB_CTX4_G2CBDES2_0  // {host,2d,sb,index=45}
#define G2SB_CTX4_G2CBDES2_0                    _MK_ADDR_CONST(0x5045)
#define G2SB_CTX4_G2CBDES2_0_SECURE                     0x0
#define G2SB_CTX4_G2CBDES2_0_WORD_COUNT                         0x1
#define G2SB_CTX4_G2CBDES2_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBDES2_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBDES2_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBDES2_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBDES2_0_READ_MASK                  _MK_MASK_CONST(0x7fff)
#define G2SB_CTX4_G2CBDES2_0_WRITE_MASK                         _MK_MASK_CONST(0x7fff)
// Circular buffer top clipping enabled, the first buffer line num
#define G2SB_CTX4_G2CBDES2_0_TOP_CBLINE_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2CBDES2_0_TOP_CBLINE_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX4_G2CBDES2_0_TOP_CBLINE_SHIFT)
#define G2SB_CTX4_G2CBDES2_0_TOP_CBLINE_RANGE                   14:0
#define G2SB_CTX4_G2CBDES2_0_TOP_CBLINE_WOFFSET                 0x0
#define G2SB_CTX4_G2CBDES2_0_TOP_CBLINE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBDES2_0_TOP_CBLINE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBDES2_0_TOP_CBLINE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2CBDES2_0_TOP_CBLINE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2TILEMODE_0  //{host,2d,sb,index=46}
#define G2SB_CTX4_G2TILEMODE_0                  _MK_ADDR_CONST(0x5046)
#define G2SB_CTX4_G2TILEMODE_0_SECURE                   0x0
#define G2SB_CTX4_G2TILEMODE_0_WORD_COUNT                       0x1
#define G2SB_CTX4_G2TILEMODE_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TILEMODE_0_RESET_MASK                       _MK_MASK_CONST(0x111111)
#define G2SB_CTX4_G2TILEMODE_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TILEMODE_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TILEMODE_0_READ_MASK                        _MK_MASK_CONST(0x111111)
#define G2SB_CTX4_G2TILEMODE_0_WRITE_MASK                       _MK_MASK_CONST(0x111111)
//Y or RGB surface
#define G2SB_CTX4_G2TILEMODE_0_SRC_Y_TILE_MODE_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2TILEMODE_0_SRC_Y_TILE_MODE_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2TILEMODE_0_SRC_Y_TILE_MODE_SHIFT)
#define G2SB_CTX4_G2TILEMODE_0_SRC_Y_TILE_MODE_RANGE                    0:0
#define G2SB_CTX4_G2TILEMODE_0_SRC_Y_TILE_MODE_WOFFSET                  0x0
#define G2SB_CTX4_G2TILEMODE_0_SRC_Y_TILE_MODE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TILEMODE_0_SRC_Y_TILE_MODE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2TILEMODE_0_SRC_Y_TILE_MODE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TILEMODE_0_SRC_Y_TILE_MODE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TILEMODE_0_SRC_Y_TILE_MODE_LINEAR                   _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2TILEMODE_0_SRC_Y_TILE_MODE_TILED                    _MK_ENUM_CONST(1)

//UV surface, ignored in RGB mode
#define G2SB_CTX4_G2TILEMODE_0_SRC_UV_TILE_MODE_SHIFT                   _MK_SHIFT_CONST(4)
#define G2SB_CTX4_G2TILEMODE_0_SRC_UV_TILE_MODE_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2TILEMODE_0_SRC_UV_TILE_MODE_SHIFT)
#define G2SB_CTX4_G2TILEMODE_0_SRC_UV_TILE_MODE_RANGE                   4:4
#define G2SB_CTX4_G2TILEMODE_0_SRC_UV_TILE_MODE_WOFFSET                 0x0
#define G2SB_CTX4_G2TILEMODE_0_SRC_UV_TILE_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TILEMODE_0_SRC_UV_TILE_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2TILEMODE_0_SRC_UV_TILE_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TILEMODE_0_SRC_UV_TILE_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TILEMODE_0_SRC_UV_TILE_MODE_LINEAR                  _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2TILEMODE_0_SRC_UV_TILE_MODE_TILED                   _MK_ENUM_CONST(1)

//Y or RGB surface
#define G2SB_CTX4_G2TILEMODE_0_PAT_Y_TILE_MODE_SHIFT                    _MK_SHIFT_CONST(8)
#define G2SB_CTX4_G2TILEMODE_0_PAT_Y_TILE_MODE_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2TILEMODE_0_PAT_Y_TILE_MODE_SHIFT)
#define G2SB_CTX4_G2TILEMODE_0_PAT_Y_TILE_MODE_RANGE                    8:8
#define G2SB_CTX4_G2TILEMODE_0_PAT_Y_TILE_MODE_WOFFSET                  0x0
#define G2SB_CTX4_G2TILEMODE_0_PAT_Y_TILE_MODE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TILEMODE_0_PAT_Y_TILE_MODE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2TILEMODE_0_PAT_Y_TILE_MODE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TILEMODE_0_PAT_Y_TILE_MODE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TILEMODE_0_PAT_Y_TILE_MODE_LINEAR                   _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2TILEMODE_0_PAT_Y_TILE_MODE_TILED                    _MK_ENUM_CONST(1)

//UNUSED
#define G2SB_CTX4_G2TILEMODE_0_PAT_UV_TILE_MODE_SHIFT                   _MK_SHIFT_CONST(12)
#define G2SB_CTX4_G2TILEMODE_0_PAT_UV_TILE_MODE_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2TILEMODE_0_PAT_UV_TILE_MODE_SHIFT)
#define G2SB_CTX4_G2TILEMODE_0_PAT_UV_TILE_MODE_RANGE                   12:12
#define G2SB_CTX4_G2TILEMODE_0_PAT_UV_TILE_MODE_WOFFSET                 0x0
#define G2SB_CTX4_G2TILEMODE_0_PAT_UV_TILE_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TILEMODE_0_PAT_UV_TILE_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2TILEMODE_0_PAT_UV_TILE_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TILEMODE_0_PAT_UV_TILE_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TILEMODE_0_PAT_UV_TILE_MODE_LINEAR                  _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2TILEMODE_0_PAT_UV_TILE_MODE_TILED                   _MK_ENUM_CONST(1)

//Same as destination write unless DST_RD_WR_SEP (not supported)
#define G2SB_CTX4_G2TILEMODE_0_DST_RD_TILE_MODE_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX4_G2TILEMODE_0_DST_RD_TILE_MODE_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2TILEMODE_0_DST_RD_TILE_MODE_SHIFT)
#define G2SB_CTX4_G2TILEMODE_0_DST_RD_TILE_MODE_RANGE                   16:16
#define G2SB_CTX4_G2TILEMODE_0_DST_RD_TILE_MODE_WOFFSET                 0x0
#define G2SB_CTX4_G2TILEMODE_0_DST_RD_TILE_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TILEMODE_0_DST_RD_TILE_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2TILEMODE_0_DST_RD_TILE_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TILEMODE_0_DST_RD_TILE_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TILEMODE_0_DST_RD_TILE_MODE_LINEAR                  _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2TILEMODE_0_DST_RD_TILE_MODE_TILED                   _MK_ENUM_CONST(1)

//destination surface
#define G2SB_CTX4_G2TILEMODE_0_DST_WR_TILE_MODE_SHIFT                   _MK_SHIFT_CONST(20)
#define G2SB_CTX4_G2TILEMODE_0_DST_WR_TILE_MODE_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX4_G2TILEMODE_0_DST_WR_TILE_MODE_SHIFT)
#define G2SB_CTX4_G2TILEMODE_0_DST_WR_TILE_MODE_RANGE                   20:20
#define G2SB_CTX4_G2TILEMODE_0_DST_WR_TILE_MODE_WOFFSET                 0x0
#define G2SB_CTX4_G2TILEMODE_0_DST_WR_TILE_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TILEMODE_0_DST_WR_TILE_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX4_G2TILEMODE_0_DST_WR_TILE_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TILEMODE_0_DST_WR_TILE_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2TILEMODE_0_DST_WR_TILE_MODE_LINEAR                  _MK_ENUM_CONST(0)
#define G2SB_CTX4_G2TILEMODE_0_DST_WR_TILE_MODE_TILED                   _MK_ENUM_CONST(1)


// Register G2SB_CTX4_G2PATBASE_0  //{2d,index=47}
#define G2SB_CTX4_G2PATBASE_0                   _MK_ADDR_CONST(0x5047)
#define G2SB_CTX4_G2PATBASE_0_SECURE                    0x0
#define G2SB_CTX4_G2PATBASE_0_WORD_COUNT                        0x1
#define G2SB_CTX4_G2PATBASE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATBASE_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATBASE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATBASE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATBASE_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2PATBASE_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
//pattern base address in tile mode,
// PATBA is the linear address where pixel start
#define G2SB_CTX4_G2PATBASE_0_PAT_BASE_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2PATBASE_0_PAT_BASE_FIELD                    (_MK_MASK_CONST(0xffffffff) << G2SB_CTX4_G2PATBASE_0_PAT_BASE_SHIFT)
#define G2SB_CTX4_G2PATBASE_0_PAT_BASE_RANGE                    31:0
#define G2SB_CTX4_G2PATBASE_0_PAT_BASE_WOFFSET                  0x0
#define G2SB_CTX4_G2PATBASE_0_PAT_BASE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATBASE_0_PAT_BASE_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATBASE_0_PAT_BASE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2PATBASE_0_PAT_BASE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// SB_SURFBASE registers
//    These registers need only be programmed when using SB.  They point to the base
//        of the various source and destination surfaces.  Technically they are only needed when
//        tiling is enabled, but there is no harm in always programming them.
//    Their counterpart registers (<reg>_SB_SURFBASE with SB_SURFBASE stripped off) indicate the
//        location of the first pixel  to be sourced or written within the surface.
//
//    This register exists to mimic the X, Y (SRCX, SRCY) functionality found in the BitBlt engine.
//
//    For example, to get at pixel X, Y:
//        SRCBA = SRCBA_SB_SURFBASE + Y*stride + X*Bpp

// Register G2SB_CTX4_G2SRCBA_SB_SURFBASE_0
#define G2SB_CTX4_G2SRCBA_SB_SURFBASE_0                 _MK_ADDR_CONST(0x5048)
#define G2SB_CTX4_G2SRCBA_SB_SURFBASE_0_SECURE                  0x0
#define G2SB_CTX4_G2SRCBA_SB_SURFBASE_0_WORD_COUNT                      0x1
#define G2SB_CTX4_G2SRCBA_SB_SURFBASE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCBA_SB_SURFBASE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCBA_SB_SURFBASE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCBA_SB_SURFBASE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCBA_SB_SURFBASE_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2SRCBA_SB_SURFBASE_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2SRCBA:
//    -base of interleaved sources (RGB, YUV)
//    -base of Y plane
// Only used by the StretchBlit Engine
#define G2SB_CTX4_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_FIELD                  (_MK_MASK_CONST(0xffffffff) << G2SB_CTX4_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SHIFT)
#define G2SB_CTX4_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_RANGE                  31:0
#define G2SB_CTX4_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_WOFFSET                        0x0
#define G2SB_CTX4_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2DSTBA_SB_SURFBASE_0
#define G2SB_CTX4_G2DSTBA_SB_SURFBASE_0                 _MK_ADDR_CONST(0x5049)
#define G2SB_CTX4_G2DSTBA_SB_SURFBASE_0_SECURE                  0x0
#define G2SB_CTX4_G2DSTBA_SB_SURFBASE_0_WORD_COUNT                      0x1
#define G2SB_CTX4_G2DSTBA_SB_SURFBASE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_SB_SURFBASE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_SB_SURFBASE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_SB_SURFBASE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_SB_SURFBASE_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2DSTBA_SB_SURFBASE_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2DSTBA
// Only used by the StretchBlit Engine
#define G2SB_CTX4_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2DSTBA_SB_SURFBASE_0_DST_ADDR_FIELD                  (_MK_MASK_CONST(0xffffffff) << G2SB_CTX4_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SHIFT)
#define G2SB_CTX4_G2DSTBA_SB_SURFBASE_0_DST_ADDR_RANGE                  31:0
#define G2SB_CTX4_G2DSTBA_SB_SURFBASE_0_DST_ADDR_WOFFSET                        0x0
#define G2SB_CTX4_G2DSTBA_SB_SURFBASE_0_DST_ADDR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_SB_SURFBASE_0_DST_ADDR_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2DSTBA_B_SB_SURFBASE_0
#define G2SB_CTX4_G2DSTBA_B_SB_SURFBASE_0                       _MK_ADDR_CONST(0x504a)
#define G2SB_CTX4_G2DSTBA_B_SB_SURFBASE_0_SECURE                        0x0
#define G2SB_CTX4_G2DSTBA_B_SB_SURFBASE_0_WORD_COUNT                    0x1
#define G2SB_CTX4_G2DSTBA_B_SB_SURFBASE_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_B_SB_SURFBASE_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_B_SB_SURFBASE_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_B_SB_SURFBASE_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_B_SB_SURFBASE_0_READ_MASK                     _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2DSTBA_B_SB_SURFBASE_0_WRITE_MASK                    _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2DSTBA_B
// Only used by the StretchBlit Engine, and G2CONTROLSB.DBSEL() is enabled
#define G2SB_CTX4_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_FIELD                      (_MK_MASK_CONST(0xffffffff) << G2SB_CTX4_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SHIFT)
#define G2SB_CTX4_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_RANGE                      31:0
#define G2SB_CTX4_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_WOFFSET                    0x0
#define G2SB_CTX4_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2VBA_A_SB_SURFBASE_0
#define G2SB_CTX4_G2VBA_A_SB_SURFBASE_0                 _MK_ADDR_CONST(0x504b)
#define G2SB_CTX4_G2VBA_A_SB_SURFBASE_0_SECURE                  0x0
#define G2SB_CTX4_G2VBA_A_SB_SURFBASE_0_WORD_COUNT                      0x1
#define G2SB_CTX4_G2VBA_A_SB_SURFBASE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VBA_A_SB_SURFBASE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VBA_A_SB_SURFBASE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VBA_A_SB_SURFBASE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VBA_A_SB_SURFBASE_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2VBA_A_SB_SURFBASE_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2VBA
//     used for YUV 4:2:0 planar, base of V plane
// Only used by the StretchBlit Engine
#define G2SB_CTX4_G2VBA_A_SB_SURFBASE_0_V_ADDR_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2VBA_A_SB_SURFBASE_0_V_ADDR_FIELD                    (_MK_MASK_CONST(0xffffffff) << G2SB_CTX4_G2VBA_A_SB_SURFBASE_0_V_ADDR_SHIFT)
#define G2SB_CTX4_G2VBA_A_SB_SURFBASE_0_V_ADDR_RANGE                    31:0
#define G2SB_CTX4_G2VBA_A_SB_SURFBASE_0_V_ADDR_WOFFSET                  0x0
#define G2SB_CTX4_G2VBA_A_SB_SURFBASE_0_V_ADDR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VBA_A_SB_SURFBASE_0_V_ADDR_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VBA_A_SB_SURFBASE_0_V_ADDR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2VBA_A_SB_SURFBASE_0_V_ADDR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_CTX4_G2UBA_A_SB_SURFBASE_0
#define G2SB_CTX4_G2UBA_A_SB_SURFBASE_0                 _MK_ADDR_CONST(0x504c)
#define G2SB_CTX4_G2UBA_A_SB_SURFBASE_0_SECURE                  0x0
#define G2SB_CTX4_G2UBA_A_SB_SURFBASE_0_WORD_COUNT                      0x1
#define G2SB_CTX4_G2UBA_A_SB_SURFBASE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2UBA_A_SB_SURFBASE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2UBA_A_SB_SURFBASE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2UBA_A_SB_SURFBASE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2UBA_A_SB_SURFBASE_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX4_G2UBA_A_SB_SURFBASE_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2VBA
//     used for YUV 4:2:0 planar, base of U plane
// Only used by the StretchBlit Engine
#define G2SB_CTX4_G2UBA_A_SB_SURFBASE_0_U_ADDR_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX4_G2UBA_A_SB_SURFBASE_0_U_ADDR_FIELD                    (_MK_MASK_CONST(0xffffffff) << G2SB_CTX4_G2UBA_A_SB_SURFBASE_0_U_ADDR_SHIFT)
#define G2SB_CTX4_G2UBA_A_SB_SURFBASE_0_U_ADDR_RANGE                    31:0
#define G2SB_CTX4_G2UBA_A_SB_SURFBASE_0_U_ADDR_WOFFSET                  0x0
#define G2SB_CTX4_G2UBA_A_SB_SURFBASE_0_U_ADDR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2UBA_A_SB_SURFBASE_0_U_ADDR_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2UBA_A_SB_SURFBASE_0_U_ADDR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX4_G2UBA_A_SB_SURFBASE_0_U_ADDR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//
// --------------------------------------------------------------------------
//
// Copyright (c) 2004, NVIDIA Corp.
// All Rights Reserved.
//
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
//
// --------------------------------------------------------------------------
// --------------------------------------------------------------------------
//
// Copyright (c) 2004-2005, NVIDIA Corp.
// All Rights Reserved.
//
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
//
// --------------------------------------------------------------------------
//
// Memory Controller Tiling definitions
//
//
//  To enable tiling for a buffer in your module you'll want to include
//  this spec file and then make use of either the ADD_TILE_MODE_REG_SPEC
//  or ADD_TILE_MODE_REG_FIELD_SPEC macro.
//
//  For the ADD_TILE_MODE_REG_SPEC macro, the regp arg is added to the
//  register name as a prefix to match the names of the other registers
//  for this buffer. The fldp is the field name prefix to make the name
//  unique so it works with arreggen generated reg blocks (e.g.):
//
//      // specify how addressing should occur for IB0 buffer
//      ADD_TILE_MODE_REG_SPEC(IB0, IB0);
//
//  There's also a REG_RW_SPEC version, if you need to specify a special
//  flag (e.g. rws for shadow, or rwt for trigger).
//
//  For the ADD_TILE_MODE_REG_FIELD_SPEC macro, the fldp is the field
//  name prefix and bitpos arg describes the starting bit position for
//  this field within another register.
//
//  Like the register version, there's a REG_RW_FIELD_SPEC version if
//  you need to set explicit bits other than "rw".
//
//  Note: this requires having at least NV_MC_TILE_MODEWIDTH bits of
//  space available after bitpos (e.g.) in the register:
//
//      ADD_TILE_MODE_REG_FIELD_SPEC(REF, 16)   // This parameter specifies how addressing
//                                              // for the REF buffer should occur
//
// --------------------------------------------------------------------------
//
// Copyright (c) 2004, NVIDIA Corp.
// All Rights Reserved.
//
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
//
// --------------------------------------------------------------------------
//

// Register G2SB_CTX5_INCR_SYNCPT_0
#define G2SB_CTX5_INCR_SYNCPT_0                 _MK_ADDR_CONST(0x2000)
#define G2SB_CTX5_INCR_SYNCPT_0_SECURE                  0x0
#define G2SB_CTX5_INCR_SYNCPT_0_WORD_COUNT                      0x1
#define G2SB_CTX5_INCR_SYNCPT_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_INCR_SYNCPT_0_RESET_MASK                      _MK_MASK_CONST(0xffff)
#define G2SB_CTX5_INCR_SYNCPT_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_INCR_SYNCPT_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_INCR_SYNCPT_0_READ_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX5_INCR_SYNCPT_0_WRITE_MASK                      _MK_MASK_CONST(0xffff)
// Condition mapped from raise/wait
#define G2SB_CTX5_INCR_SYNCPT_0_COND_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_CTX5_INCR_SYNCPT_0_COND_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX5_INCR_SYNCPT_0_COND_SHIFT)
#define G2SB_CTX5_INCR_SYNCPT_0_COND_RANGE                      15:8
#define G2SB_CTX5_INCR_SYNCPT_0_COND_WOFFSET                    0x0
#define G2SB_CTX5_INCR_SYNCPT_0_COND_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_INCR_SYNCPT_0_COND_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define G2SB_CTX5_INCR_SYNCPT_0_COND_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_INCR_SYNCPT_0_COND_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_INCR_SYNCPT_0_COND_IMMEDIATE                  _MK_ENUM_CONST(0)
#define G2SB_CTX5_INCR_SYNCPT_0_COND_OP_DONE                    _MK_ENUM_CONST(1)
#define G2SB_CTX5_INCR_SYNCPT_0_COND_RD_DONE                    _MK_ENUM_CONST(2)
#define G2SB_CTX5_INCR_SYNCPT_0_COND_REG_WR_SAFE                        _MK_ENUM_CONST(3)
#define G2SB_CTX5_INCR_SYNCPT_0_COND_COND_4                     _MK_ENUM_CONST(4)
#define G2SB_CTX5_INCR_SYNCPT_0_COND_COND_5                     _MK_ENUM_CONST(5)
#define G2SB_CTX5_INCR_SYNCPT_0_COND_COND_6                     _MK_ENUM_CONST(6)
#define G2SB_CTX5_INCR_SYNCPT_0_COND_COND_7                     _MK_ENUM_CONST(7)
#define G2SB_CTX5_INCR_SYNCPT_0_COND_COND_8                     _MK_ENUM_CONST(8)
#define G2SB_CTX5_INCR_SYNCPT_0_COND_COND_9                     _MK_ENUM_CONST(9)
#define G2SB_CTX5_INCR_SYNCPT_0_COND_COND_10                    _MK_ENUM_CONST(10)
#define G2SB_CTX5_INCR_SYNCPT_0_COND_COND_11                    _MK_ENUM_CONST(11)
#define G2SB_CTX5_INCR_SYNCPT_0_COND_COND_12                    _MK_ENUM_CONST(12)
#define G2SB_CTX5_INCR_SYNCPT_0_COND_COND_13                    _MK_ENUM_CONST(13)
#define G2SB_CTX5_INCR_SYNCPT_0_COND_COND_14                    _MK_ENUM_CONST(14)
#define G2SB_CTX5_INCR_SYNCPT_0_COND_COND_15                    _MK_ENUM_CONST(15)

// syncpt index value
#define G2SB_CTX5_INCR_SYNCPT_0_INDX_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX5_INCR_SYNCPT_0_INDX_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX5_INCR_SYNCPT_0_INDX_SHIFT)
#define G2SB_CTX5_INCR_SYNCPT_0_INDX_RANGE                      7:0
#define G2SB_CTX5_INCR_SYNCPT_0_INDX_WOFFSET                    0x0
#define G2SB_CTX5_INCR_SYNCPT_0_INDX_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_INCR_SYNCPT_0_INDX_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define G2SB_CTX5_INCR_SYNCPT_0_INDX_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_INCR_SYNCPT_0_INDX_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_INCR_SYNCPT_CNTRL_0
#define G2SB_CTX5_INCR_SYNCPT_CNTRL_0                   _MK_ADDR_CONST(0x2001)
#define G2SB_CTX5_INCR_SYNCPT_CNTRL_0_SECURE                    0x0
#define G2SB_CTX5_INCR_SYNCPT_CNTRL_0_WORD_COUNT                        0x1
#define G2SB_CTX5_INCR_SYNCPT_CNTRL_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_INCR_SYNCPT_CNTRL_0_RESET_MASK                        _MK_MASK_CONST(0x101)
#define G2SB_CTX5_INCR_SYNCPT_CNTRL_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_INCR_SYNCPT_CNTRL_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_INCR_SYNCPT_CNTRL_0_READ_MASK                         _MK_MASK_CONST(0x101)
#define G2SB_CTX5_INCR_SYNCPT_CNTRL_0_WRITE_MASK                        _MK_MASK_CONST(0x101)
// If NO_STALL is 1, then when fifos are full,
// INCR_SYNCPT methods will be dropped and the
// INCR_SYNCPT_ERROR[COND] bit will be set.
// If NO_STALL is 0, then when fifos are full,
// the client host interface will be stalled.
#define G2SB_CTX5_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SHIFT                        _MK_SHIFT_CONST(8)
#define G2SB_CTX5_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX5_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SHIFT)
#define G2SB_CTX5_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_RANGE                        8:8
#define G2SB_CTX5_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_WOFFSET                      0x0
#define G2SB_CTX5_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX5_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// If SOFT_RESET is set, then all internal state
// of the client syncpt block will be reset.
// To do soft reset, first set SOFT_RESET of
// all host1x clients affected, then clear all
// SOFT_RESETs.
#define G2SB_CTX5_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX5_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX5_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SHIFT)
#define G2SB_CTX5_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_RANGE                      0:0
#define G2SB_CTX5_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_WOFFSET                    0x0
#define G2SB_CTX5_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_CTX5_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_INCR_SYNCPT_ERROR_0
#define G2SB_CTX5_INCR_SYNCPT_ERROR_0                   _MK_ADDR_CONST(0x2002)
#define G2SB_CTX5_INCR_SYNCPT_ERROR_0_SECURE                    0x0
#define G2SB_CTX5_INCR_SYNCPT_ERROR_0_WORD_COUNT                        0x1
#define G2SB_CTX5_INCR_SYNCPT_ERROR_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_INCR_SYNCPT_ERROR_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_INCR_SYNCPT_ERROR_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_INCR_SYNCPT_ERROR_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_INCR_SYNCPT_ERROR_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_INCR_SYNCPT_ERROR_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// COND_STATUS[COND] is set if the fifo for COND overflows.
// This bit is sticky and will remain set until cleared.
// Cleared by writing 1.
#define G2SB_CTX5_INCR_SYNCPT_ERROR_0_COND_STATUS_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX5_INCR_SYNCPT_ERROR_0_COND_STATUS_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX5_INCR_SYNCPT_ERROR_0_COND_STATUS_SHIFT)
#define G2SB_CTX5_INCR_SYNCPT_ERROR_0_COND_STATUS_RANGE                 31:0
#define G2SB_CTX5_INCR_SYNCPT_ERROR_0_COND_STATUS_WOFFSET                       0x0
#define G2SB_CTX5_INCR_SYNCPT_ERROR_0_COND_STATUS_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_INCR_SYNCPT_ERROR_0_COND_STATUS_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_INCR_SYNCPT_ERROR_0_COND_STATUS_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_INCR_SYNCPT_ERROR_0_COND_STATUS_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// reserve locations for future expansion

// Reserved address 8195 [0x2003]

// Reserved address 8196 [0x2004]

// Reserved address 8197 [0x2005]

// Reserved address 8198 [0x2006]

// Reserved address 8199 [0x2007]
// just in case names were redefined using macros
// 2D syncpt behavior
//     - Each 2D context has its own syncpt client.
//     - OP_DONE increments when 2D's memory write client is idle, meaning all
//           preceding operations are complete.
//     - RD_DONE behaves like OP_DONE
//     - REG_WR_SAFE behaves like IMMEDIATE meaning a syncpt increment returns
//         immediately and does not indicate that a register write will NOT block.
//         The implications are that 2D's host FIFO can fill and block access to 2D,
//         which will indeterminately block a direct CPU access.

// Register G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0  //{index=8}
// This register can be accessed by both register read/write and command fifo
// in order not to break exsting code , keep suffix REGONLY.
//
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0                      _MK_ADDR_CONST(0x2008)
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_SECURE                       0x0
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_WORD_COUNT                   0x1
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_READ_MASK                    _MK_MASK_CONST(0x1f03ff)
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_WRITE_MASK                   _MK_MASK_CONST(0x1f0000)
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_FIELD                     (_MK_MASK_CONST(0x3ff) << G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SHIFT)
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_RANGE                     9:0
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_WOFFSET                   0x0
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_FIELD                   (_MK_MASK_CONST(0xf) << G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SHIFT)
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_RANGE                   19:16
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_WOFFSET                 0x0
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SHIFT                      _MK_SHIFT_CONST(20)
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SHIFT)
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_RANGE                      20:20
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_WOFFSET                    0x0
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Control methods, since they are not programmed often, put them is the beginning

// Register G2SB_CTX5_G2TRIGGER_0  //{host,2d,sb,index=9}
#define G2SB_CTX5_G2TRIGGER_0                   _MK_ADDR_CONST(0x2009)
#define G2SB_CTX5_G2TRIGGER_0_SECURE                    0x0
#define G2SB_CTX5_G2TRIGGER_0_WORD_COUNT                        0x1
#define G2SB_CTX5_G2TRIGGER_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TRIGGER_0_RESET_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX5_G2TRIGGER_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TRIGGER_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TRIGGER_0_READ_MASK                         _MK_MASK_CONST(0xffff)
#define G2SB_CTX5_G2TRIGGER_0_WRITE_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX5_G2TRIGGER_0_TRIGGER_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2TRIGGER_0_TRIGGER_FIELD                     (_MK_MASK_CONST(0xffff) << G2SB_CTX5_G2TRIGGER_0_TRIGGER_SHIFT)
#define G2SB_CTX5_G2TRIGGER_0_TRIGGER_RANGE                     15:0
#define G2SB_CTX5_G2TRIGGER_0_TRIGGER_WOFFSET                   0x0
#define G2SB_CTX5_G2TRIGGER_0_TRIGGER_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TRIGGER_0_TRIGGER_DEFAULT_MASK                      _MK_MASK_CONST(0xffff)
#define G2SB_CTX5_G2TRIGGER_0_TRIGGER_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TRIGGER_0_TRIGGER_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2TRIGGER1_0  //{host,2d,sb,index=a}
#define G2SB_CTX5_G2TRIGGER1_0                  _MK_ADDR_CONST(0x200a)
#define G2SB_CTX5_G2TRIGGER1_0_SECURE                   0x0
#define G2SB_CTX5_G2TRIGGER1_0_WORD_COUNT                       0x1
#define G2SB_CTX5_G2TRIGGER1_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TRIGGER1_0_RESET_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX5_G2TRIGGER1_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TRIGGER1_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TRIGGER1_0_READ_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX5_G2TRIGGER1_0_WRITE_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX5_G2TRIGGER1_0_TRIGGER1_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2TRIGGER1_0_TRIGGER1_FIELD                   (_MK_MASK_CONST(0xffff) << G2SB_CTX5_G2TRIGGER1_0_TRIGGER1_SHIFT)
#define G2SB_CTX5_G2TRIGGER1_0_TRIGGER1_RANGE                   15:0
#define G2SB_CTX5_G2TRIGGER1_0_TRIGGER1_WOFFSET                 0x0
#define G2SB_CTX5_G2TRIGGER1_0_TRIGGER1_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TRIGGER1_0_TRIGGER1_DEFAULT_MASK                    _MK_MASK_CONST(0xffff)
#define G2SB_CTX5_G2TRIGGER1_0_TRIGGER1_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TRIGGER1_0_TRIGGER1_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2TRIGGER2_0  //{2d,index=b}
#define G2SB_CTX5_G2TRIGGER2_0                  _MK_ADDR_CONST(0x200b)
#define G2SB_CTX5_G2TRIGGER2_0_SECURE                   0x0
#define G2SB_CTX5_G2TRIGGER2_0_WORD_COUNT                       0x1
#define G2SB_CTX5_G2TRIGGER2_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TRIGGER2_0_RESET_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX5_G2TRIGGER2_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TRIGGER2_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TRIGGER2_0_READ_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX5_G2TRIGGER2_0_WRITE_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX5_G2TRIGGER2_0_TRIGGER2_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2TRIGGER2_0_TRIGGER2_FIELD                   (_MK_MASK_CONST(0xffff) << G2SB_CTX5_G2TRIGGER2_0_TRIGGER2_SHIFT)
#define G2SB_CTX5_G2TRIGGER2_0_TRIGGER2_RANGE                   15:0
#define G2SB_CTX5_G2TRIGGER2_0_TRIGGER2_WOFFSET                 0x0
#define G2SB_CTX5_G2TRIGGER2_0_TRIGGER2_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TRIGGER2_0_TRIGGER2_DEFAULT_MASK                    _MK_MASK_CONST(0xffff)
#define G2SB_CTX5_G2TRIGGER2_0_TRIGGER2_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TRIGGER2_0_TRIGGER2_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2CMDSEL_0  //{host,2d,sb,index=c}
#define G2SB_CTX5_G2CMDSEL_0                    _MK_ADDR_CONST(0x200c)
#define G2SB_CTX5_G2CMDSEL_0_SECURE                     0x0
#define G2SB_CTX5_G2CMDSEL_0_WORD_COUNT                         0x1
#define G2SB_CTX5_G2CMDSEL_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_RESET_MASK                         _MK_MASK_CONST(0x1100d7f1)
#define G2SB_CTX5_G2CMDSEL_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_READ_MASK                  _MK_MASK_CONST(0x1fffd7f1)
#define G2SB_CTX5_G2CMDSEL_0_WRITE_MASK                         _MK_MASK_CONST(0x1fffd7f0)
#define G2SB_CTX5_G2CMDSEL_0_SBOR2D_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2CMDSEL_0_SBOR2D_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CMDSEL_0_SBOR2D_SHIFT)
#define G2SB_CTX5_G2CMDSEL_0_SBOR2D_RANGE                       0:0
#define G2SB_CTX5_G2CMDSEL_0_SBOR2D_WOFFSET                     0x0
#define G2SB_CTX5_G2CMDSEL_0_SBOR2D_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_SBOR2D_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CMDSEL_0_SBOR2D_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_SBOR2D_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_SBOR2D_G2                  _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CMDSEL_0_SBOR2D_SB                  _MK_ENUM_CONST(1)

//circular buffer feature enable    0= disable
#define G2SB_CTX5_G2CMDSEL_0_CBENABLE_SHIFT                     _MK_SHIFT_CONST(4)
#define G2SB_CTX5_G2CMDSEL_0_CBENABLE_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CMDSEL_0_CBENABLE_SHIFT)
#define G2SB_CTX5_G2CMDSEL_0_CBENABLE_RANGE                     4:4
#define G2SB_CTX5_G2CMDSEL_0_CBENABLE_WOFFSET                   0x0
#define G2SB_CTX5_G2CMDSEL_0_CBENABLE_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_CBENABLE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CMDSEL_0_CBENABLE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_CBENABLE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_CBENABLE_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CMDSEL_0_CBENABLE_ENABLE                    _MK_ENUM_CONST(1)

//VI trigger enable, can be circular buffer or full frame
#define G2SB_CTX5_G2CMDSEL_0_VITRIGGER_SHIFT                    _MK_SHIFT_CONST(5)
#define G2SB_CTX5_G2CMDSEL_0_VITRIGGER_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CMDSEL_0_VITRIGGER_SHIFT)
#define G2SB_CTX5_G2CMDSEL_0_VITRIGGER_RANGE                    5:5
#define G2SB_CTX5_G2CMDSEL_0_VITRIGGER_WOFFSET                  0x0
#define G2SB_CTX5_G2CMDSEL_0_VITRIGGER_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_VITRIGGER_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CMDSEL_0_VITRIGGER_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_VITRIGGER_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//host trigger the command, host also need program cicular buffer related data
#define G2SB_CTX5_G2CMDSEL_0_HOSTTRIGGER_SHIFT                  _MK_SHIFT_CONST(6)
#define G2SB_CTX5_G2CMDSEL_0_HOSTTRIGGER_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CMDSEL_0_HOSTTRIGGER_SHIFT)
#define G2SB_CTX5_G2CMDSEL_0_HOSTTRIGGER_RANGE                  6:6
#define G2SB_CTX5_G2CMDSEL_0_HOSTTRIGGER_WOFFSET                        0x0
#define G2SB_CTX5_G2CMDSEL_0_HOSTTRIGGER_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_HOSTTRIGGER_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CMDSEL_0_HOSTTRIGGER_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_HOSTTRIGGER_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX5_G2CMDSEL_0_CBSBDISABLE_SHIFT                  _MK_SHIFT_CONST(7)
#define G2SB_CTX5_G2CMDSEL_0_CBSBDISABLE_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CMDSEL_0_CBSBDISABLE_SHIFT)
#define G2SB_CTX5_G2CMDSEL_0_CBSBDISABLE_RANGE                  7:7
#define G2SB_CTX5_G2CMDSEL_0_CBSBDISABLE_WOFFSET                        0x0
#define G2SB_CTX5_G2CMDSEL_0_CBSBDISABLE_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_CBSBDISABLE_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CMDSEL_0_CBSBDISABLE_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_CBSBDISABLE_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// 00: to memory
// 01: to EPP
#define G2SB_CTX5_G2CMDSEL_0_G2OUTPUT_SHIFT                     _MK_SHIFT_CONST(8)
#define G2SB_CTX5_G2CMDSEL_0_G2OUTPUT_FIELD                     (_MK_MASK_CONST(0x3) << G2SB_CTX5_G2CMDSEL_0_G2OUTPUT_SHIFT)
#define G2SB_CTX5_G2CMDSEL_0_G2OUTPUT_RANGE                     9:8
#define G2SB_CTX5_G2CMDSEL_0_G2OUTPUT_WOFFSET                   0x0
#define G2SB_CTX5_G2CMDSEL_0_G2OUTPUT_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_G2OUTPUT_DEFAULT_MASK                      _MK_MASK_CONST(0x3)
#define G2SB_CTX5_G2CMDSEL_0_G2OUTPUT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_G2OUTPUT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_G2OUTPUT_MEMORY                    _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CMDSEL_0_G2OUTPUT_EPP                       _MK_ENUM_CONST(1)
#define G2SB_CTX5_G2CMDSEL_0_G2OUTPUT_RESERVED2                 _MK_ENUM_CONST(2)
#define G2SB_CTX5_G2CMDSEL_0_G2OUTPUT_RESERVED3                 _MK_ENUM_CONST(3)

// Reserved for HW Test, SW should not use this bit.
#define G2SB_CTX5_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SHIFT                       _MK_SHIFT_CONST(10)
#define G2SB_CTX5_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SHIFT)
#define G2SB_CTX5_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_RANGE                       10:10
#define G2SB_CTX5_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_WOFFSET                     0x0
#define G2SB_CTX5_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_ENABLE                      _MK_ENUM_CONST(1)

#define G2SB_CTX5_G2CMDSEL_0_LINK_WAIT_BUF_END_SHIFT                    _MK_SHIFT_CONST(12)
#define G2SB_CTX5_G2CMDSEL_0_LINK_WAIT_BUF_END_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CMDSEL_0_LINK_WAIT_BUF_END_SHIFT)
#define G2SB_CTX5_G2CMDSEL_0_LINK_WAIT_BUF_END_RANGE                    12:12
#define G2SB_CTX5_G2CMDSEL_0_LINK_WAIT_BUF_END_WOFFSET                  0x0
#define G2SB_CTX5_G2CMDSEL_0_LINK_WAIT_BUF_END_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_LINK_WAIT_BUF_END_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CMDSEL_0_LINK_WAIT_BUF_END_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_LINK_WAIT_BUF_END_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//host writes this bit to tell which buffer is ready
#define G2SB_CTX5_G2CMDSEL_0_FRAME_START_SHIFT                  _MK_SHIFT_CONST(14)
#define G2SB_CTX5_G2CMDSEL_0_FRAME_START_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CMDSEL_0_FRAME_START_SHIFT)
#define G2SB_CTX5_G2CMDSEL_0_FRAME_START_RANGE                  14:14
#define G2SB_CTX5_G2CMDSEL_0_FRAME_START_WOFFSET                        0x0
#define G2SB_CTX5_G2CMDSEL_0_FRAME_START_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_FRAME_START_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CMDSEL_0_FRAME_START_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_FRAME_START_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX5_G2CMDSEL_0_FRAME_END_SHIFT                    _MK_SHIFT_CONST(15)
#define G2SB_CTX5_G2CMDSEL_0_FRAME_END_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CMDSEL_0_FRAME_END_SHIFT)
#define G2SB_CTX5_G2CMDSEL_0_FRAME_END_RANGE                    15:15
#define G2SB_CTX5_G2CMDSEL_0_FRAME_END_WOFFSET                  0x0
#define G2SB_CTX5_G2CMDSEL_0_FRAME_END_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_FRAME_END_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CMDSEL_0_FRAME_END_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_FRAME_END_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

#define G2SB_CTX5_G2CMDSEL_0_BUFFER_INDEX_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_CTX5_G2CMDSEL_0_BUFFER_INDEX_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX5_G2CMDSEL_0_BUFFER_INDEX_SHIFT)
#define G2SB_CTX5_G2CMDSEL_0_BUFFER_INDEX_RANGE                 23:16
#define G2SB_CTX5_G2CMDSEL_0_BUFFER_INDEX_WOFFSET                       0x0
#define G2SB_CTX5_G2CMDSEL_0_BUFFER_INDEX_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_BUFFER_INDEX_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_BUFFER_INDEX_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_BUFFER_INDEX_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//Test purpose
#define G2SB_CTX5_G2CMDSEL_0_LINKEN_SHIFT                       _MK_SHIFT_CONST(24)
#define G2SB_CTX5_G2CMDSEL_0_LINKEN_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CMDSEL_0_LINKEN_SHIFT)
#define G2SB_CTX5_G2CMDSEL_0_LINKEN_RANGE                       24:24
#define G2SB_CTX5_G2CMDSEL_0_LINKEN_WOFFSET                     0x0
#define G2SB_CTX5_G2CMDSEL_0_LINKEN_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_LINKEN_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CMDSEL_0_LINKEN_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_LINKEN_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

#define G2SB_CTX5_G2CMDSEL_0_LINKVAL_SHIFT                      _MK_SHIFT_CONST(25)
#define G2SB_CTX5_G2CMDSEL_0_LINKVAL_FIELD                      (_MK_MASK_CONST(0x7) << G2SB_CTX5_G2CMDSEL_0_LINKVAL_SHIFT)
#define G2SB_CTX5_G2CMDSEL_0_LINKVAL_RANGE                      27:25
#define G2SB_CTX5_G2CMDSEL_0_LINKVAL_WOFFSET                    0x0
#define G2SB_CTX5_G2CMDSEL_0_LINKVAL_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_LINKVAL_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_LINKVAL_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_LINKVAL_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// indicates priority of the context, note vi-triggered contexts take priority over HIGH
#define G2SB_CTX5_G2CMDSEL_0_PRIORITY_SHIFT                     _MK_SHIFT_CONST(28)
#define G2SB_CTX5_G2CMDSEL_0_PRIORITY_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CMDSEL_0_PRIORITY_SHIFT)
#define G2SB_CTX5_G2CMDSEL_0_PRIORITY_RANGE                     28:28
#define G2SB_CTX5_G2CMDSEL_0_PRIORITY_WOFFSET                   0x0
#define G2SB_CTX5_G2CMDSEL_0_PRIORITY_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_PRIORITY_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CMDSEL_0_PRIORITY_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_PRIORITY_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMDSEL_0_PRIORITY_LOW                       _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CMDSEL_0_PRIORITY_HIGH                      _MK_ENUM_CONST(1)


// Register G2SB_CTX5_G2RAISE_0  //{host,2d,sb,index=d}
#define G2SB_CTX5_G2RAISE_0                     _MK_ADDR_CONST(0x200d)
#define G2SB_CTX5_G2RAISE_0_SECURE                      0x0
#define G2SB_CTX5_G2RAISE_0_WORD_COUNT                  0x1
#define G2SB_CTX5_G2RAISE_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2RAISE_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2RAISE_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2RAISE_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2RAISE_0_READ_MASK                   _MK_MASK_CONST(0xf001f)
#define G2SB_CTX5_G2RAISE_0_WRITE_MASK                  _MK_MASK_CONST(0xf001f)
//Push back to read fifo when all commands in the channel are done.
#define G2SB_CTX5_G2RAISE_0_RAISE_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2RAISE_0_RAISE_FIELD                 (_MK_MASK_CONST(0x1f) << G2SB_CTX5_G2RAISE_0_RAISE_SHIFT)
#define G2SB_CTX5_G2RAISE_0_RAISE_RANGE                 4:0
#define G2SB_CTX5_G2RAISE_0_RAISE_WOFFSET                       0x0
#define G2SB_CTX5_G2RAISE_0_RAISE_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2RAISE_0_RAISE_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2RAISE_0_RAISE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2RAISE_0_RAISE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

#define G2SB_CTX5_G2RAISE_0_RAISECHANNEL_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX5_G2RAISE_0_RAISECHANNEL_FIELD                  (_MK_MASK_CONST(0xf) << G2SB_CTX5_G2RAISE_0_RAISECHANNEL_SHIFT)
#define G2SB_CTX5_G2RAISE_0_RAISECHANNEL_RANGE                  19:16
#define G2SB_CTX5_G2RAISE_0_RAISECHANNEL_WOFFSET                        0x0
#define G2SB_CTX5_G2RAISE_0_RAISECHANNEL_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2RAISE_0_RAISECHANNEL_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2RAISE_0_RAISECHANNEL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2RAISE_0_RAISECHANNEL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Reserved address 8206 [0x200e]
//reg G2REFCOUNT incr1  //{host,2d,sb,index=e}
//#if (NV_HOST1X_HAS_FEATURE_REFCOUNT32B == 1)
//     31:0   rw REFCOUNT
//#else
//     15:0   rw REFCOUNT
//#endif
//    ;

// Register G2SB_CTX5_G2HOSTSET_0  //{host,2d,index=f}
#define G2SB_CTX5_G2HOSTSET_0                   _MK_ADDR_CONST(0x200f)
#define G2SB_CTX5_G2HOSTSET_0_SECURE                    0x0
#define G2SB_CTX5_G2HOSTSET_0_WORD_COUNT                        0x1
#define G2SB_CTX5_G2HOSTSET_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2HOSTSET_0_RESET_MASK                        _MK_MASK_CONST(0xff)
#define G2SB_CTX5_G2HOSTSET_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2HOSTSET_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2HOSTSET_0_READ_MASK                         _MK_MASK_CONST(0xff)
#define G2SB_CTX5_G2HOSTSET_0_WRITE_MASK                        _MK_MASK_CONST(0xff)
//  specifies distance (in byte) from last pixel of a line to the first
//  pixel of next line.
//  In mono mode, the value is the nearest byte number.
//  E.G. if gap is 3 bits, HSTLNGAP should be 1 (byte),
// if gap is 9 bits, HSTLNGAP should be 2 (byte)
#define G2SB_CTX5_G2HOSTSET_0_HSTLNGAP_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2HOSTSET_0_HSTLNGAP_FIELD                    (_MK_MASK_CONST(0xf) << G2SB_CTX5_G2HOSTSET_0_HSTLNGAP_SHIFT)
#define G2SB_CTX5_G2HOSTSET_0_HSTLNGAP_RANGE                    3:0
#define G2SB_CTX5_G2HOSTSET_0_HSTLNGAP_WOFFSET                  0x0
#define G2SB_CTX5_G2HOSTSET_0_HSTLNGAP_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2HOSTSET_0_HSTLNGAP_DEFAULT_MASK                     _MK_MASK_CONST(0xf)
#define G2SB_CTX5_G2HOSTSET_0_HSTLNGAP_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2HOSTSET_0_HSTLNGAP_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// specifies the
//  first pixel location (in byte) in the first source data entry.
// In mono mode pixel should always start in byte boundary
#define G2SB_CTX5_G2HOSTSET_0_HSTFPXL_SHIFT                     _MK_SHIFT_CONST(4)
#define G2SB_CTX5_G2HOSTSET_0_HSTFPXL_FIELD                     (_MK_MASK_CONST(0xf) << G2SB_CTX5_G2HOSTSET_0_HSTFPXL_SHIFT)
#define G2SB_CTX5_G2HOSTSET_0_HSTFPXL_RANGE                     7:4
#define G2SB_CTX5_G2HOSTSET_0_HSTFPXL_WOFFSET                   0x0
#define G2SB_CTX5_G2HOSTSET_0_HSTFPXL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2HOSTSET_0_HSTFPXL_DEFAULT_MASK                      _MK_MASK_CONST(0xf)
#define G2SB_CTX5_G2HOSTSET_0_HSTFPXL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2HOSTSET_0_HSTFPXL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2HOSTFIFO_0  //{host,2d,sb,index=10}
#define G2SB_CTX5_G2HOSTFIFO_0                  _MK_ADDR_CONST(0x2010)
#define G2SB_CTX5_G2HOSTFIFO_0_SECURE                   0x0
#define G2SB_CTX5_G2HOSTFIFO_0_WORD_COUNT                       0x1
#define G2SB_CTX5_G2HOSTFIFO_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2HOSTFIFO_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2HOSTFIFO_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2HOSTFIFO_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2HOSTFIFO_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2HOSTFIFO_0_WRITE_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2HOSTFIFO_0_HOSTFIFODATA_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2HOSTFIFO_0_HOSTFIFODATA_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX5_G2HOSTFIFO_0_HOSTFIFODATA_SHIFT)
#define G2SB_CTX5_G2HOSTFIFO_0_HOSTFIFODATA_RANGE                       31:0
#define G2SB_CTX5_G2HOSTFIFO_0_HOSTFIFODATA_WOFFSET                     0x0
#define G2SB_CTX5_G2HOSTFIFO_0_HOSTFIFODATA_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2HOSTFIFO_0_HOSTFIFODATA_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2HOSTFIFO_0_HOSTFIFODATA_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2HOSTFIFO_0_HOSTFIFODATA_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2VDDA_0  //{sb,sbm,index=11}
#define G2SB_CTX5_G2VDDA_0                      _MK_ADDR_CONST(0x2011)
#define G2SB_CTX5_G2VDDA_0_SECURE                       0x0
#define G2SB_CTX5_G2VDDA_0_WORD_COUNT                   0x1
#define G2SB_CTX5_G2VDDA_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VDDA_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VDDA_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VDDA_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VDDA_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2VDDA_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
//Vertical Scaling DDA
//Reset value: xxxx-xxxxh
//Vertical DDA Step (Increment) Value (VDSTEP[18:0])
// (upper 13 bits should be set to '0')
//This parameter specifies the increment value of the DDA used
//for vertical scaling and it is in the form of 6-bit integer and
//12-bit fraction.  This value is detemined by the equation:
// (Actual_source_height-1-VDTINI) / (Actual_destination_height-1)
// Truncate the rest bits to keep the 12bits fraction. Since we have to meet
// (Actual_source_height-1)*1.0 >= (Actual_destination_height - 1)*VDSTEP + VDTINI
// Refer to bug 353260 for more detail.
//The 6-bit integer allows maximum contraction ratio of 1/64, and
// 12-bit fraction assures the maximum limit of accumulated error less
// than half line-spacing for up to approximately 2000 target lines.
//For example, image expansion from 240 lines to 400 lines
//  VDSTEP[17:0]  =  19'b00_0000_1001_1001_1010   and
//image contraction from 240 lines to 150 lines
//   VDSTEP[17:0]  =  19'b00_0001_1001_1001_1010.
#define G2SB_CTX5_G2VDDA_0_VDSTEP_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2VDDA_0_VDSTEP_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX5_G2VDDA_0_VDSTEP_SHIFT)
#define G2SB_CTX5_G2VDDA_0_VDSTEP_RANGE                 31:0
#define G2SB_CTX5_G2VDDA_0_VDSTEP_WOFFSET                       0x0
#define G2SB_CTX5_G2VDDA_0_VDSTEP_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VDDA_0_VDSTEP_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VDDA_0_VDSTEP_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VDDA_0_VDSTEP_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2VDDAINI_0  //{sb,sbm,index=12}
#define G2SB_CTX5_G2VDDAINI_0                   _MK_ADDR_CONST(0x2012)
#define G2SB_CTX5_G2VDDAINI_0_SECURE                    0x0
#define G2SB_CTX5_G2VDDAINI_0_WORD_COUNT                        0x1
#define G2SB_CTX5_G2VDDAINI_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VDDAINI_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VDDAINI_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VDDAINI_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VDDAINI_0_READ_MASK                         _MK_MASK_CONST(0xffff)
#define G2SB_CTX5_G2VDDAINI_0_WRITE_MASK                        _MK_MASK_CONST(0xffff)
//Vertical Scaling DDA Initial Values
//Vertical DDA Initial Value for Top-Field (VDTINI[7:0])
//This parameter specifies the fraction part of initial
// value of the DDA used for vertical scaling.
//Given a pair of consecutive source image lines representing
// positions 0.0 and 1.0, a destination line-image will be created
// at any position in [0.0, 1.0), that is specified by the fraction
// part of the vertical DDA. The 8-bit initial fraction value
// specifies the position of the first output (destination) line-image
// located between the first and the second input (source) line-images,
// respectively at position 0.0 and 1.0.
//This parameter provides a way to compensate relative displacement of
// top and bottom fields of a source image. Suppose, 2-to-1 interlaced
// original video field images #1 and #2 are in the image buffer, to be
// displayed in an overlay window. Assume that the #1 field image is the
// top-field. Using VDTINI = 8'hC0 for the top-field image and
// VDBINI = 8'h40 for the bottom-field image, for example, the two images
// from #1 and #2 fields get mapped to identically positioned destination
// images in the overlay window.
#define G2SB_CTX5_G2VDDAINI_0_VDTINI_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2VDDAINI_0_VDTINI_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX5_G2VDDAINI_0_VDTINI_SHIFT)
#define G2SB_CTX5_G2VDDAINI_0_VDTINI_RANGE                      7:0
#define G2SB_CTX5_G2VDDAINI_0_VDTINI_WOFFSET                    0x0
#define G2SB_CTX5_G2VDDAINI_0_VDTINI_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VDDAINI_0_VDTINI_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VDDAINI_0_VDTINI_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VDDAINI_0_VDTINI_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

//Vertical DDA Initial Value for Bottom-Field (VDBINI[7:0])
// (see description above)
#define G2SB_CTX5_G2VDDAINI_0_VDBINI_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_CTX5_G2VDDAINI_0_VDBINI_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX5_G2VDDAINI_0_VDBINI_SHIFT)
#define G2SB_CTX5_G2VDDAINI_0_VDBINI_RANGE                      15:8
#define G2SB_CTX5_G2VDDAINI_0_VDBINI_WOFFSET                    0x0
#define G2SB_CTX5_G2VDDAINI_0_VDBINI_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VDDAINI_0_VDBINI_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VDDAINI_0_VDBINI_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VDDAINI_0_VDBINI_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2HDDA_0  //{sb,sbm,index=13}
#define G2SB_CTX5_G2HDDA_0                      _MK_ADDR_CONST(0x2013)
#define G2SB_CTX5_G2HDDA_0_SECURE                       0x0
#define G2SB_CTX5_G2HDDA_0_WORD_COUNT                   0x1
#define G2SB_CTX5_G2HDDA_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2HDDA_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2HDDA_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2HDDA_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2HDDA_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2HDDA_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
//Horizontal Scaling DDA
//Reset value: xxxx-xxxxh
//Horizontal DDA Step (Increment) Value (HDSTEP[18:0])
// (upper 13 bits should be set to '0')
//This parameter specifies the increment value of the DDA used
//for horizontal scaling and it is in the form of 6-bit integer and
//12-bit fraction.  This value is detemined by the equation:
// (Actual_source_width-1-HDINI) / (Actual_destination_width-1)
// Truncate the rest bits to keep the 12bits fraction.
// Refer to bug 353260 for more detail.
//The 6-bit integer allows maximum contraction ratio of 1/64, and
// 12-bit fraction assures the maximum limit of accumulated error less
// than half pixel-spacing for up to approximately 2000 destination pixels.
//For example, image expansion from 720 pixels to 800 pixels
//       HDSTEP[17:0]  =  19'b000_0000_1110_0110_0111   and
//image contraction from 720 pixels to 250 pixels
// HDSTEP[17:0]  =  19'b000_0010_1110_0001_0101.
#define G2SB_CTX5_G2HDDA_0_HDSTEP_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2HDDA_0_HDSTEP_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX5_G2HDDA_0_HDSTEP_SHIFT)
#define G2SB_CTX5_G2HDDA_0_HDSTEP_RANGE                 31:0
#define G2SB_CTX5_G2HDDA_0_HDSTEP_WOFFSET                       0x0
#define G2SB_CTX5_G2HDDA_0_HDSTEP_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2HDDA_0_HDSTEP_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2HDDA_0_HDSTEP_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2HDDA_0_HDSTEP_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2HDDAINILS_0  //{sb,sbm,index=14}
#define G2SB_CTX5_G2HDDAINILS_0                 _MK_ADDR_CONST(0x2014)
#define G2SB_CTX5_G2HDDAINILS_0_SECURE                  0x0
#define G2SB_CTX5_G2HDDAINILS_0_WORD_COUNT                      0x1
#define G2SB_CTX5_G2HDDAINILS_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2HDDAINILS_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2HDDAINILS_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2HDDAINILS_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2HDDAINILS_0_READ_MASK                       _MK_MASK_CONST(0xff)
#define G2SB_CTX5_G2HDDAINILS_0_WRITE_MASK                      _MK_MASK_CONST(0xff)
//Horizontal Scaling DDA Initial Value
//Horizontal DDA Initial Value (HDINI[7:0])
//This parameter specifies the fraction part of initial value
// of the DDA used for horizontal scaling.
//Given a group of six consecutive source pixels that
// the two pixels at the center representing positions 0.0
//and 1.0, a destination pixel will be created at any
// position in [0.0, 1.0), that is specified by the fraction part
//of the horizontal DDA. The 8-bit initial fraction
// value specifies the position of the first output (destination)
//pixel located between the first and the second input (source)
// pixels, respectively at position 0.0 and 1.0.
//For horizontal scaling this value may normally be set to 0.
#define G2SB_CTX5_G2HDDAINILS_0_HDINI_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2HDDAINILS_0_HDINI_FIELD                     (_MK_MASK_CONST(0xff) << G2SB_CTX5_G2HDDAINILS_0_HDINI_SHIFT)
#define G2SB_CTX5_G2HDDAINILS_0_HDINI_RANGE                     7:0
#define G2SB_CTX5_G2HDDAINILS_0_HDINI_WOFFSET                   0x0
#define G2SB_CTX5_G2HDDAINILS_0_HDINI_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2HDDAINILS_0_HDINI_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2HDDAINILS_0_HDINI_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2HDDAINILS_0_HDINI_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2CSCFIRST_0  //{sb,sbm,index=15}
// The next 3 registers contain 8 parameters used by the YCbCr (YUV)
// to RGB color space conversion logic.  This logic can also be
// used for RGB gain/gamma correction in RGB to RGB modes, and for
// luma gain in YUV to YUV modes.  For SC20 two new parameters
// (G2U, G2V) have been added for RGB to YUV conversion.  These are
// in address 0x38.  The equtions have the form:
//    YUV->RGB
// R = (CYX * (yin + YOS)) + ((CUR * uin) + (CVR * vin))
// G = (CYX * (yin + YOS)) + ((CUG * uin) + (CVG * vin))
// B = (CYX * (yin + YOS)) + ((CUB * uin) + (CVB * vin))
//    RGB -> RGB
// R = (CVR * rin) + (CUR * bin)
// G = (CYX * (gin + YOS)) + ((CUG * bin) + (CVG * rin))
// B = (CUB * bin) + (CVB * rin)
//    YUV -> YUV (not what rtl does: see note below)
// Y = (CYX * yin + YOS) + ((CUB * uin) + (CVB * vin))
// U = (CUG * uin) + (CVG * vin)
// V = (CVR * vin) + (CUR * uin)
//    RGB -> YUV (new for SC20)
// Y = (CVB * rin) + (CUB * bin) + (CYX * gin) + YOS
// U = (CVG * rin) + (CUG * bin) + (G2U * gin)
// V = (CVR * rin) + (CUR * bin) + (G2V * gin)
//
// NOTE: YUV->YUV above is definitely wrong
// the cmodel *appears* to match the RTL with the following pseudo-code:
//
//if (yuv2rgb)
//    (r,g,b) = matrix*(y+sbreg_yos,u,v)
//    matrix:
//        sbreg_cyx, sbreg_cur, sbreg_cvr,
//        sbreg_cyx, sbreg_cug, sbreg_cvg,
//        sbreg_cyx, sbreg_cub, sbreg_cvb,
//else if (rgb2rgb)
//    (r,g,b) = matrix*(r,g+sbreg_yos,b)
//    matrix:
//        sbreg_cvr, 0,         sbreg_cur,
//        sbreg_cvg, sbreg_cyx, sbreg_cug,
//        sbreg_cvb, 0,         sbreg_cub,
//else if (yuv2yuv)
//    (y,u,v) = matrix*(y,u,v)
//    matrix:
//        sbreg_cub, 0,         sbreg_cvb,
//        sbreg_cug, sbreg_cyx, sbreg_cvg,
//        sbreg_cur, 0,         sbreg_cvr,
//else if (rgb2yuv)
//    (y,u,v) = matrix*(r,g,b) +(sbreg_yos,0,0)
//    matrix:
//        sbreg_cvb, sbreg_cyx, sbreg_cub,
//        sbreg_cvg, sbreg_g2u, sbreg_cug,
//        sbreg_cvr, sbreg_g2v, sbreg_cur,
#define G2SB_CTX5_G2CSCFIRST_0                  _MK_ADDR_CONST(0x2015)
#define G2SB_CTX5_G2CSCFIRST_0_SECURE                   0x0
#define G2SB_CTX5_G2CSCFIRST_0_WORD_COUNT                       0x1
#define G2SB_CTX5_G2CSCFIRST_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCFIRST_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCFIRST_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCFIRST_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCFIRST_0_READ_MASK                        _MK_MASK_CONST(0xff3ff3ff)
#define G2SB_CTX5_G2CSCFIRST_0_WRITE_MASK                       _MK_MASK_CONST(0xff3ff3ff)
// multiplier for U/B for Y or B generation.
// consists of a sign bit and 9-bit magnitude (s2.7).
// For YUV->RGB, the recommended value is 2.0172 (decimal) or 0x102.
// If source data is in RGB format, this parameter
// may be used as gain adjustment for B component.
// For SC20, this register changes precision when doing RGB to YUV
// conversion (SIFMT=1xxx, DIFMT=0xxx).  CUB becomes s1.8 and the
// recommended value is +0.098 or 0x019
//11-10  Reserved
#define G2SB_CTX5_G2CSCFIRST_0_CUB_SHIFT                        _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2CSCFIRST_0_CUB_FIELD                        (_MK_MASK_CONST(0x3ff) << G2SB_CTX5_G2CSCFIRST_0_CUB_SHIFT)
#define G2SB_CTX5_G2CSCFIRST_0_CUB_RANGE                        9:0
#define G2SB_CTX5_G2CSCFIRST_0_CUB_WOFFSET                      0x0
#define G2SB_CTX5_G2CSCFIRST_0_CUB_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCFIRST_0_CUB_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCFIRST_0_CUB_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCFIRST_0_CUB_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// multiplier for V/R for V or R generation.
//This parameter consists of a sign bit and 9-bit magnitude (s2.7)
// For YUV->RGB the recommended value is 1.5960 (decimal) or 0x0CC
//If source data is in RGB format, this parameter
// may be used as gain adjustment for R component.
// For RGB->YUV the recommended value is +0.439 (decimal) or 0x038
//23-22  Reserved
#define G2SB_CTX5_G2CSCFIRST_0_CVR_SHIFT                        _MK_SHIFT_CONST(12)
#define G2SB_CTX5_G2CSCFIRST_0_CVR_FIELD                        (_MK_MASK_CONST(0x3ff) << G2SB_CTX5_G2CSCFIRST_0_CVR_SHIFT)
#define G2SB_CTX5_G2CSCFIRST_0_CVR_RANGE                        21:12
#define G2SB_CTX5_G2CSCFIRST_0_CVR_WOFFSET                      0x0
#define G2SB_CTX5_G2CSCFIRST_0_CVR_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCFIRST_0_CVR_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCFIRST_0_CVR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCFIRST_0_CVR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

//Y-Offset (YOFFSET[7:0]) for YUV generation
//This parameter consists of 8-bit 2's complement in the range [-128,127].
// For YUV->RGB the recommended value is -16 (decimal) or 0xF0
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is +16 (decimal) or 0x10
#define G2SB_CTX5_G2CSCFIRST_0_YOS_SHIFT                        _MK_SHIFT_CONST(24)
#define G2SB_CTX5_G2CSCFIRST_0_YOS_FIELD                        (_MK_MASK_CONST(0xff) << G2SB_CTX5_G2CSCFIRST_0_YOS_SHIFT)
#define G2SB_CTX5_G2CSCFIRST_0_YOS_RANGE                        31:24
#define G2SB_CTX5_G2CSCFIRST_0_YOS_WOFFSET                      0x0
#define G2SB_CTX5_G2CSCFIRST_0_YOS_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCFIRST_0_YOS_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCFIRST_0_YOS_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCFIRST_0_YOS_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2CSCSECOND_0  //{sb,sbm,index=16}
#define G2SB_CTX5_G2CSCSECOND_0                 _MK_ADDR_CONST(0x2016)
#define G2SB_CTX5_G2CSCSECOND_0_SECURE                  0x0
#define G2SB_CTX5_G2CSCSECOND_0_WORD_COUNT                      0x1
#define G2SB_CTX5_G2CSCSECOND_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCSECOND_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCSECOND_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCSECOND_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCSECOND_0_READ_MASK                       _MK_MASK_CONST(0xff3ff1ff)
#define G2SB_CTX5_G2CSCSECOND_0_WRITE_MASK                      _MK_MASK_CONST(0xff3ff1ff)
// multiplier for U/B for U or G generation.
// consists of a sign bit and 8-bit magnitude (s1.7)
// For YUV->RGB the recommended value is -0.3918 (decimal) or 0x132
// For  RGB->RGB, this parameter should be set to 0
// For  YUV->YUV, this parameter should be set to 1 (0x080)
// For RGB->YUV the recommended value is +0.439 (decimal) or 0x038
//11-9  Reserved
#define G2SB_CTX5_G2CSCSECOND_0_CUG_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2CSCSECOND_0_CUG_FIELD                       (_MK_MASK_CONST(0x1ff) << G2SB_CTX5_G2CSCSECOND_0_CUG_SHIFT)
#define G2SB_CTX5_G2CSCSECOND_0_CUG_RANGE                       8:0
#define G2SB_CTX5_G2CSCSECOND_0_CUG_WOFFSET                     0x0
#define G2SB_CTX5_G2CSCSECOND_0_CUG_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCSECOND_0_CUG_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCSECOND_0_CUG_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCSECOND_0_CUG_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// multiplier for U/B for V or R generation.
//This parameter consists of a sign bit and 9-bit magnitude (s2.7)
//  For YUV->RGB normally this parameter is programmed to 0.0.
// This parameter takes non-zero value if hue is rotated.
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is -0.071 (decimal) or 0x209
//23-22 Reserved
#define G2SB_CTX5_G2CSCSECOND_0_CUR_SHIFT                       _MK_SHIFT_CONST(12)
#define G2SB_CTX5_G2CSCSECOND_0_CUR_FIELD                       (_MK_MASK_CONST(0x3ff) << G2SB_CTX5_G2CSCSECOND_0_CUR_SHIFT)
#define G2SB_CTX5_G2CSCSECOND_0_CUR_RANGE                       21:12
#define G2SB_CTX5_G2CSCSECOND_0_CUR_WOFFSET                     0x0
#define G2SB_CTX5_G2CSCSECOND_0_CUR_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCSECOND_0_CUR_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCSECOND_0_CUR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCSECOND_0_CUR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// multiplier for Y/G (G gain)
//This positive-only parameter consists of 8-bit magnitude (1.7)
// For YUV->YUV the recommended value is 1.1644 (decimal) or 0x95
// For YUV->YUV or RGB->RGB this may be used as gain adjustment
// for Y or G component.
// For RGB->YUV the recommended value is +0.504 (decimal) or 0x041
#define G2SB_CTX5_G2CSCSECOND_0_CYX_SHIFT                       _MK_SHIFT_CONST(24)
#define G2SB_CTX5_G2CSCSECOND_0_CYX_FIELD                       (_MK_MASK_CONST(0xff) << G2SB_CTX5_G2CSCSECOND_0_CYX_SHIFT)
#define G2SB_CTX5_G2CSCSECOND_0_CYX_RANGE                       31:24
#define G2SB_CTX5_G2CSCSECOND_0_CYX_WOFFSET                     0x0
#define G2SB_CTX5_G2CSCSECOND_0_CYX_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCSECOND_0_CYX_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCSECOND_0_CYX_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCSECOND_0_CYX_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2CSCTHIRD_0  //{sb,sbm,index=17}
#define G2SB_CTX5_G2CSCTHIRD_0                  _MK_ADDR_CONST(0x2017)
#define G2SB_CTX5_G2CSCTHIRD_0_SECURE                   0x0
#define G2SB_CTX5_G2CSCTHIRD_0_WORD_COUNT                       0x1
#define G2SB_CTX5_G2CSCTHIRD_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCTHIRD_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCTHIRD_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCTHIRD_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCTHIRD_0_READ_MASK                        _MK_MASK_CONST(0x3ff01ff)
#define G2SB_CTX5_G2CSCTHIRD_0_WRITE_MASK                       _MK_MASK_CONST(0x3ff01ff)
// multiplier for V/R for U or G generation.
//This parameter consists of a sign bit and 8-bit magnitude (s1.7)
// For YUV->RGB the recommended value is -0.8130 (decimal) or 0x168
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is -0.148 (decimal) or 0x113
#define G2SB_CTX5_G2CSCTHIRD_0_CVG_SHIFT                        _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2CSCTHIRD_0_CVG_FIELD                        (_MK_MASK_CONST(0x1ff) << G2SB_CTX5_G2CSCTHIRD_0_CVG_SHIFT)
#define G2SB_CTX5_G2CSCTHIRD_0_CVG_RANGE                        8:0
#define G2SB_CTX5_G2CSCTHIRD_0_CVG_WOFFSET                      0x0
#define G2SB_CTX5_G2CSCTHIRD_0_CVG_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCTHIRD_0_CVG_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCTHIRD_0_CVG_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCTHIRD_0_CVG_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// multiplier for V/R for Y or B generation.
//This parameter consists of a sign bit and 9-bit magnitude (s2.7)
//For YUV->RGB, normally this parameter is programmed to 0.0.
// This coefficient takes non-zero value if hue is rotated.
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is +0.257 (decimal) or 0x021
#define G2SB_CTX5_G2CSCTHIRD_0_CVB_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_CTX5_G2CSCTHIRD_0_CVB_FIELD                        (_MK_MASK_CONST(0x3ff) << G2SB_CTX5_G2CSCTHIRD_0_CVB_SHIFT)
#define G2SB_CTX5_G2CSCTHIRD_0_CVB_RANGE                        25:16
#define G2SB_CTX5_G2CSCTHIRD_0_CVB_WOFFSET                      0x0
#define G2SB_CTX5_G2CSCTHIRD_0_CVB_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCTHIRD_0_CVB_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCTHIRD_0_CVB_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCTHIRD_0_CVB_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// StretchBLT, Color/Chroma Key Lower Limit Register

// Register G2SB_CTX5_G2CMKEYL_0  //{sb,sbm,index=18}
// When key generation is enabled, the value of this register is the
// lower color/chroma limit and G2CMKEYU is the upper color/chroma
// limit for component pixel data.
// Three component signal values (YCrCb/YUV or RGB) of
// every output pixel are compared to a set of three
// ranges that are specified by three pairs of lower and
// upper color/chroma key values.  If the Key Polarity is
// 0, the Key is set to 1 only when all three component values
// of an input pixel are respectively within the set
// of ranges (inclusive of the limit values), else the Key is set to 0.
// If the Key Polarity is 1, the Key is set to 1
// when any of the three component values of an input pixel
// are outside the set of ranges, else the Key is set to 0.
#define G2SB_CTX5_G2CMKEYL_0                    _MK_ADDR_CONST(0x2018)
#define G2SB_CTX5_G2CMKEYL_0_SECURE                     0x0
#define G2SB_CTX5_G2CMKEYL_0_WORD_COUNT                         0x1
#define G2SB_CTX5_G2CMKEYL_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMKEYL_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMKEYL_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMKEYL_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMKEYL_0_READ_MASK                  _MK_MASK_CONST(0xffffff)
#define G2SB_CTX5_G2CMKEYL_0_WRITE_MASK                         _MK_MASK_CONST(0xffffff)
// B or Y Color/Chroma Key Lower Limit (CKBL[7:0])
#define G2SB_CTX5_G2CMKEYL_0_CKBL_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2CMKEYL_0_CKBL_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX5_G2CMKEYL_0_CKBL_SHIFT)
#define G2SB_CTX5_G2CMKEYL_0_CKBL_RANGE                 7:0
#define G2SB_CTX5_G2CMKEYL_0_CKBL_WOFFSET                       0x0
#define G2SB_CTX5_G2CMKEYL_0_CKBL_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMKEYL_0_CKBL_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMKEYL_0_CKBL_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMKEYL_0_CKBL_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//G or Cb Color Chroma Key Lower Limit (CKGL[7:0])
// Cb signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity
// from the minimum signal level to the maximum signal level.
#define G2SB_CTX5_G2CMKEYL_0_CKGL_SHIFT                 _MK_SHIFT_CONST(8)
#define G2SB_CTX5_G2CMKEYL_0_CKGL_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX5_G2CMKEYL_0_CKGL_SHIFT)
#define G2SB_CTX5_G2CMKEYL_0_CKGL_RANGE                 15:8
#define G2SB_CTX5_G2CMKEYL_0_CKGL_WOFFSET                       0x0
#define G2SB_CTX5_G2CMKEYL_0_CKGL_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMKEYL_0_CKGL_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMKEYL_0_CKGL_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMKEYL_0_CKGL_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//R or Cr Color Chroma Key Lower Limit (CKRL[7:0])
// Cr signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity from
// the minimum signal level to the maximum signal level.
//31-24 Reserved
#define G2SB_CTX5_G2CMKEYL_0_CKRL_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_CTX5_G2CMKEYL_0_CKRL_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX5_G2CMKEYL_0_CKRL_SHIFT)
#define G2SB_CTX5_G2CMKEYL_0_CKRL_RANGE                 23:16
#define G2SB_CTX5_G2CMKEYL_0_CKRL_WOFFSET                       0x0
#define G2SB_CTX5_G2CMKEYL_0_CKRL_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMKEYL_0_CKRL_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMKEYL_0_CKRL_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMKEYL_0_CKRL_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//StretchBLT, Color/Chroma Key Upper Limit Register

// Register G2SB_CTX5_G2CMKEYU_0  //{sb,sbm,index=19}
#define G2SB_CTX5_G2CMKEYU_0                    _MK_ADDR_CONST(0x2019)
#define G2SB_CTX5_G2CMKEYU_0_SECURE                     0x0
#define G2SB_CTX5_G2CMKEYU_0_WORD_COUNT                         0x1
#define G2SB_CTX5_G2CMKEYU_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMKEYU_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMKEYU_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMKEYU_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMKEYU_0_READ_MASK                  _MK_MASK_CONST(0xffffff)
#define G2SB_CTX5_G2CMKEYU_0_WRITE_MASK                         _MK_MASK_CONST(0xffffff)
//This is B or Y color/chroma key upper limit value.
#define G2SB_CTX5_G2CMKEYU_0_CKBU_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2CMKEYU_0_CKBU_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX5_G2CMKEYU_0_CKBU_SHIFT)
#define G2SB_CTX5_G2CMKEYU_0_CKBU_RANGE                 7:0
#define G2SB_CTX5_G2CMKEYU_0_CKBU_WOFFSET                       0x0
#define G2SB_CTX5_G2CMKEYU_0_CKBU_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMKEYU_0_CKBU_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMKEYU_0_CKBU_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMKEYU_0_CKBU_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// G or Cb Color/Chroma Key Upper Limit (CKGU[7:0])
// Cb signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity
// the minimum signal level to the maximum signal level.
#define G2SB_CTX5_G2CMKEYU_0_CKGU_SHIFT                 _MK_SHIFT_CONST(8)
#define G2SB_CTX5_G2CMKEYU_0_CKGU_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX5_G2CMKEYU_0_CKGU_SHIFT)
#define G2SB_CTX5_G2CMKEYU_0_CKGU_RANGE                 15:8
#define G2SB_CTX5_G2CMKEYU_0_CKGU_WOFFSET                       0x0
#define G2SB_CTX5_G2CMKEYU_0_CKGU_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMKEYU_0_CKGU_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMKEYU_0_CKGU_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMKEYU_0_CKGU_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// R or Cr Color Chroma Key Upper Limit (CKRU[7:0])
// Cr signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity from
// the minimum signal level to the maximum signal level.
//31-24  Reserved
#define G2SB_CTX5_G2CMKEYU_0_CKRU_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_CTX5_G2CMKEYU_0_CKRU_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX5_G2CMKEYU_0_CKRU_SHIFT)
#define G2SB_CTX5_G2CMKEYU_0_CKRU_RANGE                 23:16
#define G2SB_CTX5_G2CMKEYU_0_CKRU_WOFFSET                       0x0
#define G2SB_CTX5_G2CMKEYU_0_CKRU_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMKEYU_0_CKRU_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMKEYU_0_CKRU_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CMKEYU_0_CKRU_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// StretchBLT, Source Image Data U base address A-buffer

// Register G2SB_CTX5_G2UBA_A_0  //{sb,sbm,index=1a}
#define G2SB_CTX5_G2UBA_A_0                     _MK_ADDR_CONST(0x201a)
#define G2SB_CTX5_G2UBA_A_0_SECURE                      0x0
#define G2SB_CTX5_G2UBA_A_0_WORD_COUNT                  0x1
#define G2SB_CTX5_G2UBA_A_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2UBA_A_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2UBA_A_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2UBA_A_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2UBA_A_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2UBA_A_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Start Address of  Source U-image Area, 4:2:0 Format.
// This parameter specifies the start address of source image stored in
// the image buffer memory.
// The [3:0] bits have to be 0, since memory client will assemble YUV into one
// 422 format.
#define G2SB_CTX5_G2UBA_A_0_SU1SA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2UBA_A_0_SU1SA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX5_G2UBA_A_0_SU1SA_SHIFT)
#define G2SB_CTX5_G2UBA_A_0_SU1SA_RANGE                 31:0
#define G2SB_CTX5_G2UBA_A_0_SU1SA_WOFFSET                       0x0
#define G2SB_CTX5_G2UBA_A_0_SU1SA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2UBA_A_0_SU1SA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2UBA_A_0_SU1SA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2UBA_A_0_SU1SA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2VBA_A_0  //{sb,sbm,index=1b}
#define G2SB_CTX5_G2VBA_A_0                     _MK_ADDR_CONST(0x201b)
#define G2SB_CTX5_G2VBA_A_0_SECURE                      0x0
#define G2SB_CTX5_G2VBA_A_0_WORD_COUNT                  0x1
#define G2SB_CTX5_G2VBA_A_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VBA_A_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VBA_A_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VBA_A_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VBA_A_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2VBA_A_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Start Address of  Source V-image Area, 4:2:0 Format.
// This parameter specifies the start address of  source image stored in
// the image buffer memory.
// The [3:0] bits have to be 0, since memory client will assemble YUV into one
// 422 format.
#define G2SB_CTX5_G2VBA_A_0_SV1SA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2VBA_A_0_SV1SA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX5_G2VBA_A_0_SV1SA_SHIFT)
#define G2SB_CTX5_G2VBA_A_0_SV1SA_RANGE                 31:0
#define G2SB_CTX5_G2VBA_A_0_SV1SA_WOFFSET                       0x0
#define G2SB_CTX5_G2VBA_A_0_SV1SA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VBA_A_0_SV1SA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VBA_A_0_SV1SA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VBA_A_0_SV1SA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2SBFORMAT_0  //{sb,sbm,index=1c}
#define G2SB_CTX5_G2SBFORMAT_0                  _MK_ADDR_CONST(0x201c)
#define G2SB_CTX5_G2SBFORMAT_0_SECURE                   0x0
#define G2SB_CTX5_G2SBFORMAT_0_WORD_COUNT                       0x1
#define G2SB_CTX5_G2SBFORMAT_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SBFORMAT_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SBFORMAT_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SBFORMAT_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SBFORMAT_0_READ_MASK                        _MK_MASK_CONST(0xffffdf1f)
#define G2SB_CTX5_G2SBFORMAT_0_WRITE_MASK                       _MK_MASK_CONST(0xffffdf1f)
// This parameter defines the data format of source input.
// There are two groups of data formats, RGB format and YCbCr (YUV) format.
// CbCr (UV) components may be represented in either offset binary or 2's complement.
//00000 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00001 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00010 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00011 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00100 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00101 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00110 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00111 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//01000 B5G6R5 5-6-5 {R[4:0], G[5:0], B[4:0]}
//01001 RESERVED
//01010 RESERVED
//01011 RESERVED
//01100 B5G6R5 5-6-5 Byte-swapped {G[2:0], B[4:0], R[4:0], G[5:3]}
//01101 RESERVED
//01110 R8G8B8A8
//01111 B8G8R8A8
//1xxxx RESERVED
//
// StretchBlit Inputs
// ==================
// RGB    inputs = {B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8}
// YUV420 input  = {YUV420 is converted into 4:2:2 UYVY via memory client}
// YUV422 inputs = {U8Y8V8Y8_OB, Y8U8Y8V8_OB, V8Y8U8Y8_OB, U8Y8V8Y8_OB, U8Y8V8Y8_TC, Y8U8Y8V8_TC, Y8V8Y8U8_TC, V8Y8U8Y8_TC}
//
// StretchBlit Outputs
// ===================
// RGB    outputs = {B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8}
// YUV422 outputs = {U8Y8V8Y8_OB, Y8U8Y8V8_OB, V8Y8U8Y8_OB, U8Y8V8Y8_OB, U8Y8V8Y8_TC, Y8U8Y8V8_TC, Y8V8Y8U8_TC, V8Y8U8Y8_TC}
//
// StretchBlit Input/Output Rules
// ==============================
//
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|    src format                                                | internal sb format |      dst format                                           |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|  B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8                        |      R8G8B8A8      |  B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8                     |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|  U8Y8V8Y8_*, Y8U8Y8V8_*, V8Y8U8Y8_*, U8Y8V8Y8_*, YUV420      |      YUV 4:4:4     |  U8Y8V8Y8_*, Y8U8Y8V8_*, V8Y8U8Y8_*, U8Y8V8Y8_*           |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|  U8Y8V8Y8_*, Y8U8Y8V8_*, V8Y8U8Y8_*, U8Y8V8Y8_*, YUV420      |      YUV 4:4:4     |  B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8                     |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//
//  StretchBlit color space converter supports YUV->RGB, YUV->YUV (gain) and RGB->RGB (gain).  There is no support for RGB->YUV.
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_FIELD                      (_MK_MASK_CONST(0x1f) << G2SB_CTX5_G2SBFORMAT_0_SIFMT_SHIFT)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_RANGE                      4:0
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_WOFFSET                    0x0
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_U8Y8V8Y8_OB                        _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_Y8U8Y8V8_OB                        _MK_ENUM_CONST(1)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_Y8V8Y8U8_OB                        _MK_ENUM_CONST(2)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_V8Y8U8Y8_OB                        _MK_ENUM_CONST(3)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_U8Y8V8Y8_TC                        _MK_ENUM_CONST(4)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_Y8U8Y8V8_TC                        _MK_ENUM_CONST(5)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_Y8V8Y8U8_TC                        _MK_ENUM_CONST(6)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_V8Y8U8Y8_TC                        _MK_ENUM_CONST(7)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_B5G6R5                     _MK_ENUM_CONST(8)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_RESERVED9                  _MK_ENUM_CONST(9)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_RESERVED10                 _MK_ENUM_CONST(10)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_RESERVED11                 _MK_ENUM_CONST(11)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_B5G6R5BS                   _MK_ENUM_CONST(12)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_RESERVED13                 _MK_ENUM_CONST(13)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_R8G8B8A8                   _MK_ENUM_CONST(14)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_B8G8R8A8                   _MK_ENUM_CONST(15)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_RESERVED16                 _MK_ENUM_CONST(16)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_RESERVED17                 _MK_ENUM_CONST(17)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_RESERVED18                 _MK_ENUM_CONST(18)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_RESERVED19                 _MK_ENUM_CONST(19)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_RESERVED20                 _MK_ENUM_CONST(20)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_RESERVED21                 _MK_ENUM_CONST(21)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_RESERVED22                 _MK_ENUM_CONST(22)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_RESERVED23                 _MK_ENUM_CONST(23)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_RESERVED24                 _MK_ENUM_CONST(24)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_RESERVED25                 _MK_ENUM_CONST(25)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_RESERVED26                 _MK_ENUM_CONST(26)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_RESERVED27                 _MK_ENUM_CONST(27)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_RESERVED28                 _MK_ENUM_CONST(28)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_RESERVED29                 _MK_ENUM_CONST(29)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_RESERVED30                 _MK_ENUM_CONST(30)
#define G2SB_CTX5_G2SBFORMAT_0_SIFMT_RESERVED31                 _MK_ENUM_CONST(31)

//Destination Image Data FormatThis parameter defines the data format of distination output.
// There are two groups of data formats, RGB and YCbCr (YUV) format.
// CbCr (UV) components may be represented in either offset binary or 2's complement.
//00000 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00001 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00010 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00011 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00100 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00101 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00110 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00111 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//01000 bpp16 5-6-5 {R[4:0], G[5:0], B[4:0]}
//01001 RESERVED
//01010 RESERVED
//01011 RESERVED
//01100 bpp16 5-6-5 Byte-swapped {G[2:0], B[4:0], R[4:0], G[5:3]}
//01101 RESERVED
//01110 R8G8B8A8
//01111 B8G8R8A8
//1xxxx RESERVED
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_FIELD                      (_MK_MASK_CONST(0x1f) << G2SB_CTX5_G2SBFORMAT_0_DIFMT_SHIFT)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_RANGE                      12:8
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_WOFFSET                    0x0
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_U8Y8V8Y8_OB                        _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_Y8U8Y8V8_OB                        _MK_ENUM_CONST(1)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_Y8V8Y8U8_OB                        _MK_ENUM_CONST(2)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_V8Y8U8Y8_OB                        _MK_ENUM_CONST(3)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_U8Y8V8Y8_TC                        _MK_ENUM_CONST(4)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_Y8U8Y8V8_TC                        _MK_ENUM_CONST(5)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_Y8V8Y8U8_TC                        _MK_ENUM_CONST(6)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_V8Y8U8Y8_TC                        _MK_ENUM_CONST(7)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_B5G6R5                     _MK_ENUM_CONST(8)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_RESERVED9                  _MK_ENUM_CONST(9)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_RESERVED10                 _MK_ENUM_CONST(10)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_RESERVED11                 _MK_ENUM_CONST(11)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_B5G6R5BS                   _MK_ENUM_CONST(12)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_RESERVED13                 _MK_ENUM_CONST(13)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_R8G8B8A8                   _MK_ENUM_CONST(14)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_B8G8R8A8                   _MK_ENUM_CONST(15)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_RESERVED16                 _MK_ENUM_CONST(16)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_RESERVED17                 _MK_ENUM_CONST(17)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_RESERVED18                 _MK_ENUM_CONST(18)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_RESERVED19                 _MK_ENUM_CONST(19)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_RESERVED20                 _MK_ENUM_CONST(20)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_RESERVED21                 _MK_ENUM_CONST(21)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_RESERVED22                 _MK_ENUM_CONST(22)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_RESERVED23                 _MK_ENUM_CONST(23)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_RESERVED24                 _MK_ENUM_CONST(24)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_RESERVED25                 _MK_ENUM_CONST(25)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_RESERVED26                 _MK_ENUM_CONST(26)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_RESERVED27                 _MK_ENUM_CONST(27)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_RESERVED28                 _MK_ENUM_CONST(28)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_RESERVED29                 _MK_ENUM_CONST(29)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_RESERVED30                 _MK_ENUM_CONST(30)
#define G2SB_CTX5_G2SBFORMAT_0_DIFMT_RESERVED31                 _MK_ENUM_CONST(31)

// ENABLE - SB needs to send a RAISE_BUFFER control bit to EPP
// DISABLE - do nothing.
#define G2SB_CTX5_G2SBFORMAT_0_RAISEBUFFEREN_SHIFT                      _MK_SHIFT_CONST(14)
#define G2SB_CTX5_G2SBFORMAT_0_RAISEBUFFEREN_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2SBFORMAT_0_RAISEBUFFEREN_SHIFT)
#define G2SB_CTX5_G2SBFORMAT_0_RAISEBUFFEREN_RANGE                      14:14
#define G2SB_CTX5_G2SBFORMAT_0_RAISEBUFFEREN_WOFFSET                    0x0
#define G2SB_CTX5_G2SBFORMAT_0_RAISEBUFFEREN_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SBFORMAT_0_RAISEBUFFEREN_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SBFORMAT_0_RAISEBUFFEREN_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SBFORMAT_0_RAISEBUFFEREN_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SBFORMAT_0_RAISEBUFFEREN_DISABLE                    _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2SBFORMAT_0_RAISEBUFFEREN_ENABLE                     _MK_ENUM_CONST(1)

// ENABLE - SB needs to send a RAISE_FRAME control bit to EPP
// DISABLE - do nothing.
#define G2SB_CTX5_G2SBFORMAT_0_RAISEFRAMEEN_SHIFT                       _MK_SHIFT_CONST(15)
#define G2SB_CTX5_G2SBFORMAT_0_RAISEFRAMEEN_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2SBFORMAT_0_RAISEFRAMEEN_SHIFT)
#define G2SB_CTX5_G2SBFORMAT_0_RAISEFRAMEEN_RANGE                       15:15
#define G2SB_CTX5_G2SBFORMAT_0_RAISEFRAMEEN_WOFFSET                     0x0
#define G2SB_CTX5_G2SBFORMAT_0_RAISEFRAMEEN_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SBFORMAT_0_RAISEFRAMEEN_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SBFORMAT_0_RAISEFRAMEEN_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SBFORMAT_0_RAISEFRAMEEN_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SBFORMAT_0_RAISEFRAMEEN_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2SBFORMAT_0_RAISEFRAMEEN_ENABLE                      _MK_ENUM_CONST(1)

// Raise buffer vector value.
#define G2SB_CTX5_G2SBFORMAT_0_RAISEBUFFERVALUE_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX5_G2SBFORMAT_0_RAISEBUFFERVALUE_FIELD                   (_MK_MASK_CONST(0xff) << G2SB_CTX5_G2SBFORMAT_0_RAISEBUFFERVALUE_SHIFT)
#define G2SB_CTX5_G2SBFORMAT_0_RAISEBUFFERVALUE_RANGE                   23:16
#define G2SB_CTX5_G2SBFORMAT_0_RAISEBUFFERVALUE_WOFFSET                 0x0
#define G2SB_CTX5_G2SBFORMAT_0_RAISEBUFFERVALUE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SBFORMAT_0_RAISEBUFFERVALUE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SBFORMAT_0_RAISEBUFFERVALUE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SBFORMAT_0_RAISEBUFFERVALUE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Raise Fram vector value.
#define G2SB_CTX5_G2SBFORMAT_0_RAISEFRAMEVALUE_SHIFT                    _MK_SHIFT_CONST(24)
#define G2SB_CTX5_G2SBFORMAT_0_RAISEFRAMEVALUE_FIELD                    (_MK_MASK_CONST(0xff) << G2SB_CTX5_G2SBFORMAT_0_RAISEFRAMEVALUE_SHIFT)
#define G2SB_CTX5_G2SBFORMAT_0_RAISEFRAMEVALUE_RANGE                    31:24
#define G2SB_CTX5_G2SBFORMAT_0_RAISEFRAMEVALUE_WOFFSET                  0x0
#define G2SB_CTX5_G2SBFORMAT_0_RAISEFRAMEVALUE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SBFORMAT_0_RAISEFRAMEVALUE_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SBFORMAT_0_RAISEFRAMEVALUE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SBFORMAT_0_RAISEFRAMEVALUE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2CONTROLSB_0  //{sb,sbm,index=1d}
#define G2SB_CTX5_G2CONTROLSB_0                 _MK_ADDR_CONST(0x201d)
#define G2SB_CTX5_G2CONTROLSB_0_SECURE                  0x0
#define G2SB_CTX5_G2CONTROLSB_0_WORD_COUNT                      0x1
#define G2SB_CTX5_G2CONTROLSB_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_RESET_MASK                      _MK_MASK_CONST(0xdfffa4f8)
#define G2SB_CTX5_G2CONTROLSB_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_READ_MASK                       _MK_MASK_CONST(0xdfffa7f8)
#define G2SB_CTX5_G2CONTROLSB_0_WRITE_MASK                      _MK_MASK_CONST(0xdfffa7f8)
//yuv422 plannar rotated
#define G2SB_CTX5_G2CONTROLSB_0_YUV422ROTATION_SHIFT                    _MK_SHIFT_CONST(3)
#define G2SB_CTX5_G2CONTROLSB_0_YUV422ROTATION_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLSB_0_YUV422ROTATION_SHIFT)
#define G2SB_CTX5_G2CONTROLSB_0_YUV422ROTATION_RANGE                    3:3
#define G2SB_CTX5_G2CONTROLSB_0_YUV422ROTATION_WOFFSET                  0x0
#define G2SB_CTX5_G2CONTROLSB_0_YUV422ROTATION_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_YUV422ROTATION_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLSB_0_YUV422ROTATION_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_YUV422ROTATION_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//source data is yuv422 planar valid when imode==PLANAR
#define G2SB_CTX5_G2CONTROLSB_0_YUV422PLANAR_SHIFT                      _MK_SHIFT_CONST(4)
#define G2SB_CTX5_G2CONTROLSB_0_YUV422PLANAR_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLSB_0_YUV422PLANAR_SHIFT)
#define G2SB_CTX5_G2CONTROLSB_0_YUV422PLANAR_RANGE                      4:4
#define G2SB_CTX5_G2CONTROLSB_0_YUV422PLANAR_WOFFSET                    0x0
#define G2SB_CTX5_G2CONTROLSB_0_YUV422PLANAR_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_YUV422PLANAR_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLSB_0_YUV422PLANAR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_YUV422PLANAR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Source (input) Data Mode  (IMODE) This parameter defines the data mode of source input.
// 0: Multiplexed Mode (data format is specified by SIFMT[2:0])
// One block of source data in the Image Buffer memory contains
// multiplexed component signals.
// 1: Planar mode, 4:2:0 YUV (SIFMT[2] specifies data format of U/V components)
// Three blocks of source data in the Image Buffer memory contain separate
// Y, U, and V component signals.
//
//  For circular buffer input to gr2d, the input format can not be planar.  It must be multiplex.
//    i.e. no YUV420 planar circular buffer input to gr2d.
#define G2SB_CTX5_G2CONTROLSB_0_IMODE_SHIFT                     _MK_SHIFT_CONST(5)
#define G2SB_CTX5_G2CONTROLSB_0_IMODE_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLSB_0_IMODE_SHIFT)
#define G2SB_CTX5_G2CONTROLSB_0_IMODE_RANGE                     5:5
#define G2SB_CTX5_G2CONTROLSB_0_IMODE_WOFFSET                   0x0
#define G2SB_CTX5_G2CONTROLSB_0_IMODE_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_IMODE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLSB_0_IMODE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_IMODE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_IMODE_MULTIPLEX                 _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLSB_0_IMODE_PLANAR                    _MK_ENUM_CONST(1)

//enable alpha vertical filter
#define G2SB_CTX5_G2CONTROLSB_0_ENAVF_SHIFT                     _MK_SHIFT_CONST(6)
#define G2SB_CTX5_G2CONTROLSB_0_ENAVF_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLSB_0_ENAVF_SHIFT)
#define G2SB_CTX5_G2CONTROLSB_0_ENAVF_RANGE                     6:6
#define G2SB_CTX5_G2CONTROLSB_0_ENAVF_WOFFSET                   0x0
#define G2SB_CTX5_G2CONTROLSB_0_ENAVF_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_ENAVF_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLSB_0_ENAVF_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_ENAVF_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_ENAVF_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLSB_0_ENAVF_ENABLE                    _MK_ENUM_CONST(1)

// enable horizontal alpha filtering
// if disabled, use the alpha value of third tap for output pixel
//U,V line stride in 4:2:0  Format,
#define G2SB_CTX5_G2CONTROLSB_0_ENAHF_SHIFT                     _MK_SHIFT_CONST(7)
#define G2SB_CTX5_G2CONTROLSB_0_ENAHF_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLSB_0_ENAHF_SHIFT)
#define G2SB_CTX5_G2CONTROLSB_0_ENAHF_RANGE                     7:7
#define G2SB_CTX5_G2CONTROLSB_0_ENAHF_WOFFSET                   0x0
#define G2SB_CTX5_G2CONTROLSB_0_ENAHF_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_ENAHF_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLSB_0_ENAHF_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_ENAHF_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_ENAHF_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLSB_0_ENAHF_ENABLE                    _MK_ENUM_CONST(1)

//   00= 1/2 of Luma Buffer Stride; in this case
//       Luma Buffer Stride should be multiple
//       of 2 bytes.
//   01= Equal to Luma Buffer Stride
//   10= 1/4 of Luma Buffer Stride; in this case
//       Luma Buffer Stride should be multiple
//       of 4 bytes.
//   11= use uvstride.
// Note: Use care when using a tiled surface, since 1/2 or 1/4
//   of luma stride may yield an invalid pitch (stride).
#define G2SB_CTX5_G2CONTROLSB_0_UVST_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_CTX5_G2CONTROLSB_0_UVST_FIELD                      (_MK_MASK_CONST(0x3) << G2SB_CTX5_G2CONTROLSB_0_UVST_SHIFT)
#define G2SB_CTX5_G2CONTROLSB_0_UVST_RANGE                      9:8
#define G2SB_CTX5_G2CONTROLSB_0_UVST_WOFFSET                    0x0
#define G2SB_CTX5_G2CONTROLSB_0_UVST_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_UVST_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_UVST_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_UVST_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_UVST_UVS2X                      _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLSB_0_UVST_UVS1X                      _MK_ENUM_CONST(1)
#define G2SB_CTX5_G2CONTROLSB_0_UVST_UVS4X                      _MK_ENUM_CONST(2)
#define G2SB_CTX5_G2CONTROLSB_0_UVST_UVS_G2UVSTRIDE                     _MK_ENUM_CONST(3)

// Source (input) Data Line Pairing  (SL)
// This parameter specifies one of two cases of Y vs. U/V line-pairing
// in the source data in 4:2:0 format.
// In the 4:2:0 format, there is one pair of U and V image-lines for
// every two Y image-lines.
//0 The first two Y image-lines share common pair of U and V image-lines.
//1 The first two Y image-lines are paired with two different
// pairs of U and V image-lines.
#define G2SB_CTX5_G2CONTROLSB_0_SL_SHIFT                        _MK_SHIFT_CONST(10)
#define G2SB_CTX5_G2CONTROLSB_0_SL_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLSB_0_SL_SHIFT)
#define G2SB_CTX5_G2CONTROLSB_0_SL_RANGE                        10:10
#define G2SB_CTX5_G2CONTROLSB_0_SL_WOFFSET                      0x0
#define G2SB_CTX5_G2CONTROLSB_0_SL_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_SL_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLSB_0_SL_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_SL_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_SL_COMMON_PAIR                  _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLSB_0_SL_DIFFERENT_PAIR                       _MK_ENUM_CONST(1)

// StretchBLT Source Provider Selection (SISEL)
// This bit indicates where the source images come from,  either the
// image buffer memory or system memory of the host CPU.  If source
//images come from host CPU, they come via CPU Read-FIFO.
//0 Image buffer memory.
//1 System memory of host CPU.
//14 Reserved
#define G2SB_CTX5_G2CONTROLSB_0_SISEL_SHIFT                     _MK_SHIFT_CONST(13)
#define G2SB_CTX5_G2CONTROLSB_0_SISEL_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLSB_0_SISEL_SHIFT)
#define G2SB_CTX5_G2CONTROLSB_0_SISEL_RANGE                     13:13
#define G2SB_CTX5_G2CONTROLSB_0_SISEL_WOFFSET                   0x0
#define G2SB_CTX5_G2CONTROLSB_0_SISEL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_SISEL_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLSB_0_SISEL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_SISEL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_SISEL_IMAGE_BUFFER                      _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLSB_0_SISEL_HOST                      _MK_ENUM_CONST(1)

// StretchBLT Source Selection  (SBLTSRC)
// CPU and VIP module can initiate StretchBLT operation. This bit indicates
// which one initiates current StretchBLT command. Depending on the initiator,
// appropriate source for the command execution request is selected. Whichever
// the initiator is, all the command parameters are supplied from the CPU (driver)
// through the G2 command-FIFO and shadow registers.
//0 CPU is the command initiator.
//1 VIP module is the command initiator.
#define G2SB_CTX5_G2CONTROLSB_0_SBLTSRC_SHIFT                   _MK_SHIFT_CONST(15)
#define G2SB_CTX5_G2CONTROLSB_0_SBLTSRC_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLSB_0_SBLTSRC_SHIFT)
#define G2SB_CTX5_G2CONTROLSB_0_SBLTSRC_RANGE                   15:15
#define G2SB_CTX5_G2CONTROLSB_0_SBLTSRC_WOFFSET                 0x0
#define G2SB_CTX5_G2CONTROLSB_0_SBLTSRC_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_SBLTSRC_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLSB_0_SBLTSRC_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_SBLTSRC_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_SBLTSRC_CPU                     _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLSB_0_SBLTSRC_VIP                     _MK_ENUM_CONST(1)

// StretchBLT Vertical Filter Mode (VFTYPE[1:0])
// This bit is effective when the Vertical Filter is enabled. (bit 18)
// The two-tap vertical interpolation filter can be operated in various modes.
// For the image expansion, it should be programmed as a pure 2-tap
// interpolator. For the image contraction, it can work as partly averager
// and partly interpolator with varying degree depending on the contraction ratio.
// For StretchBLT, this parameter is used as an index (selection) to
// an internal lookup table that stores the group of filter-coefficients for
// the different modes of vertical filtering.
//00 Pure interpolation filter.
//01 25% averager, 75% interpolator.
//10 50% averager, 50% interpolator.
//11 100% averager.
#define G2SB_CTX5_G2CONTROLSB_0_VFTYPE_SHIFT                    _MK_SHIFT_CONST(16)
#define G2SB_CTX5_G2CONTROLSB_0_VFTYPE_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX5_G2CONTROLSB_0_VFTYPE_SHIFT)
#define G2SB_CTX5_G2CONTROLSB_0_VFTYPE_RANGE                    17:16
#define G2SB_CTX5_G2CONTROLSB_0_VFTYPE_WOFFSET                  0x0
#define G2SB_CTX5_G2CONTROLSB_0_VFTYPE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_VFTYPE_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX5_G2CONTROLSB_0_VFTYPE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_VFTYPE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_VFTYPE_INTERP                   _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLSB_0_VFTYPE_AVG25_INTERP75                   _MK_ENUM_CONST(1)
#define G2SB_CTX5_G2CONTROLSB_0_VFTYPE_AVG50_INTERP50                   _MK_ENUM_CONST(2)
#define G2SB_CTX5_G2CONTROLSB_0_VFTYPE_AVG                      _MK_ENUM_CONST(3)

// StretchBLT Vertical Filter Enable (VFEN)
// Vertical filter shall be disabled if source images come from host CPU
// via CPU Read-FIFO. (SISEL)
// Vertical filter may be disabled to save some memory bandwidth but
// this will likely result in degradation of image quality.
// This option may also be used in the case where source image is progressive
// scanning and there is no vertical scaling.
//0 Vertical filter is disabled.
//1 Vertical filter is enabled.
#define G2SB_CTX5_G2CONTROLSB_0_VFEN_SHIFT                      _MK_SHIFT_CONST(18)
#define G2SB_CTX5_G2CONTROLSB_0_VFEN_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLSB_0_VFEN_SHIFT)
#define G2SB_CTX5_G2CONTROLSB_0_VFEN_RANGE                      18:18
#define G2SB_CTX5_G2CONTROLSB_0_VFEN_WOFFSET                    0x0
#define G2SB_CTX5_G2CONTROLSB_0_VFEN_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_VFEN_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLSB_0_VFEN_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_VFEN_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_VFEN_DISABLE                    _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLSB_0_VFEN_ENABLE                     _MK_ENUM_CONST(1)

// enabled color space converter by default
#define G2SB_CTX5_G2CONTROLSB_0_DISCSC_SHIFT                    _MK_SHIFT_CONST(19)
#define G2SB_CTX5_G2CONTROLSB_0_DISCSC_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLSB_0_DISCSC_SHIFT)
#define G2SB_CTX5_G2CONTROLSB_0_DISCSC_RANGE                    19:19
#define G2SB_CTX5_G2CONTROLSB_0_DISCSC_WOFFSET                  0x0
#define G2SB_CTX5_G2CONTROLSB_0_DISCSC_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_DISCSC_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLSB_0_DISCSC_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_DISCSC_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_DISCSC_ENABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLSB_0_DISCSC_DISABLE                  _MK_ENUM_CONST(1)

// StretchBLT Horizontal Filter Mode (HFTYPE[2:0])
// The six-tap horizontal interpolation filter can be operated in
// various operation modes. For the image expansion, it should be programmed
// as a pure 6-tap interpolator.  For the image contraction, it can work as
// partly lowpass filter and partly interpolater with varying degree depending
// the contraction ratio.
// For StretchBLT, this parameter is used as an index (selection)
// to an internal lookup table that stores the group of filter-coefficients
//for the different modes of horizontal filtering.
// 000: Pure interpolation filter.
// 001: 010 011 100 101 110: mix of interpolation and low pass filters
// 111: DISABLE.
#define G2SB_CTX5_G2CONTROLSB_0_HFTYPE_SHIFT                    _MK_SHIFT_CONST(20)
#define G2SB_CTX5_G2CONTROLSB_0_HFTYPE_FIELD                    (_MK_MASK_CONST(0x7) << G2SB_CTX5_G2CONTROLSB_0_HFTYPE_SHIFT)
#define G2SB_CTX5_G2CONTROLSB_0_HFTYPE_RANGE                    22:20
#define G2SB_CTX5_G2CONTROLSB_0_HFTYPE_WOFFSET                  0x0
#define G2SB_CTX5_G2CONTROLSB_0_HFTYPE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_HFTYPE_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define G2SB_CTX5_G2CONTROLSB_0_HFTYPE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_HFTYPE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_HFTYPE_INTERP                   _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLSB_0_HFTYPE_LPF1                     _MK_ENUM_CONST(1)
#define G2SB_CTX5_G2CONTROLSB_0_HFTYPE_LPF2                     _MK_ENUM_CONST(2)
#define G2SB_CTX5_G2CONTROLSB_0_HFTYPE_LPF3                     _MK_ENUM_CONST(3)
#define G2SB_CTX5_G2CONTROLSB_0_HFTYPE_LPF4                     _MK_ENUM_CONST(4)
#define G2SB_CTX5_G2CONTROLSB_0_HFTYPE_LPF5                     _MK_ENUM_CONST(5)
#define G2SB_CTX5_G2CONTROLSB_0_HFTYPE_LPF6                     _MK_ENUM_CONST(6)
#define G2SB_CTX5_G2CONTROLSB_0_HFTYPE_DISABLE                  _MK_ENUM_CONST(7)

//In the VC-1 specification, when the value of RANGEREDFRM variable (1-bit)
//  for a picture is equal to 1, the picture shall be scaled up according
// to the following equation:
//Y = clip( (( Y-128)*2) + 128);
//Cb = clip( ((Cb-128)*2) + 128);
//Cr = clip( ((Cr-128)*2) + 128);
//The clip operator limits the output to [0, 255].
//The input is also limited to [0, 255].
//In the VC-1 nomenclature, the output (Y, Cb, Cr) tuple corresponds to
// the 'decoded' picture. The input (Y, Cb, Cr) tuple corresponds to
// the 'reconstructed' picture.
// The above equations create the decoded picture while keeping
// the reconstructed picture intact.
//Only YUV _OB formats are supported with range reducation enabled,
// not the YUV _TC or RGB formats.
//----------------------------------------------------
//At PortalPlayer this functionality was implemented in the DVO module.
// The YUV data coming from the video frame buffers (reconstructed picture)
//  in the SDRAM was scaled up using the above equations and given to the display.
// the value of 1-bit wide RANGEREDFRM variable was configured in the DVO per frame
// and the frame was scaled whenever RANGEREDFRM == 1.
#define G2SB_CTX5_G2CONTROLSB_0_RANGEREDFRM_SHIFT                       _MK_SHIFT_CONST(23)
#define G2SB_CTX5_G2CONTROLSB_0_RANGEREDFRM_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLSB_0_RANGEREDFRM_SHIFT)
#define G2SB_CTX5_G2CONTROLSB_0_RANGEREDFRM_RANGE                       23:23
#define G2SB_CTX5_G2CONTROLSB_0_RANGEREDFRM_WOFFSET                     0x0
#define G2SB_CTX5_G2CONTROLSB_0_RANGEREDFRM_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_RANGEREDFRM_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLSB_0_RANGEREDFRM_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_RANGEREDFRM_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_RANGEREDFRM_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLSB_0_RANGEREDFRM_ENABLE                      _MK_ENUM_CONST(1)

// StretchBLT Source Type (SITYPE)
// This bit identifies two types of source images. If source image is 2-to-1
// interlaced and StretchBLT processes either one of the two interlaced
// field-images, physical (positional) displacement between the two
// interlaced fields must be taken into account.  One field-image that is
// placed higher in position than the other field-image is called top-field
// and the other is called bottom-field. StretchBLT processing has to
// lower the top-field (or raise the bottom-field) to match the corresponding
// two target images in the overlay window (that is progressively scanned)
// right at the same position.   If source image is full frame-image
// obtained from two interlaced field-images, its type is ?top-field?.
// If source images are progressively scanned, the type identification is not
// significant and they may be designated either one of the two types
//0 Source image is ?top-field?.
//1 Source image is ?bottom-field?.
#define G2SB_CTX5_G2CONTROLSB_0_SITYPE_SHIFT                    _MK_SHIFT_CONST(24)
#define G2SB_CTX5_G2CONTROLSB_0_SITYPE_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLSB_0_SITYPE_SHIFT)
#define G2SB_CTX5_G2CONTROLSB_0_SITYPE_RANGE                    24:24
#define G2SB_CTX5_G2CONTROLSB_0_SITYPE_WOFFSET                  0x0
#define G2SB_CTX5_G2CONTROLSB_0_SITYPE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_SITYPE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLSB_0_SITYPE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_SITYPE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_SITYPE_TOP_FIELD                        _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLSB_0_SITYPE_BOTTOM_FIELD                     _MK_ENUM_CONST(1)

// StretchBLT Source Buffer Selection (SBSEL)
// StretchBLT processing involves frame-rate conversion from a
// series of source images to another series of destination images
// (field-rate of the source video to frame-rate of the PC display).
// In order to avoid image tearing, it is preferred to use two buffer
// sections in the source video area. This bit selects one of the two
// buffering blocks from which this StretchBLT command receives the source image.
// The two buffering memory blocks are called source-A and source-B.
//0 Source image comes from ?source-A? buffer.
//1 Source image comes from ?source-B? buffer.
#define G2SB_CTX5_G2CONTROLSB_0_SBSEL_SHIFT                     _MK_SHIFT_CONST(25)
#define G2SB_CTX5_G2CONTROLSB_0_SBSEL_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLSB_0_SBSEL_SHIFT)
#define G2SB_CTX5_G2CONTROLSB_0_SBSEL_RANGE                     25:25
#define G2SB_CTX5_G2CONTROLSB_0_SBSEL_WOFFSET                   0x0
#define G2SB_CTX5_G2CONTROLSB_0_SBSEL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_SBSEL_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLSB_0_SBSEL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_SBSEL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_SBSEL_SRC_A                     _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLSB_0_SBSEL_SRC_B                     _MK_ENUM_CONST(1)

// StretchBLT Destination Buffer Selection (DBSEL)
// StretchBLT processing involves frame-rate conversion from a series of
// source images to another series of destination images (field-rate of
// the source video to frame-rate of the PC display). In order to avoid
// image tearing, it is preferred to use two buffer sections in the destination
// video area.  This bit selects one of the two buffering blocks to which this
// StretchBLT command delivers the destination image.
// The two buffering memory blocks are called A and B.
//0 Destination image goes to ?A? buffer.
//1 Destination image goes to ?B? buffer.
#define G2SB_CTX5_G2CONTROLSB_0_DBSEL_SHIFT                     _MK_SHIFT_CONST(26)
#define G2SB_CTX5_G2CONTROLSB_0_DBSEL_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLSB_0_DBSEL_SHIFT)
#define G2SB_CTX5_G2CONTROLSB_0_DBSEL_RANGE                     26:26
#define G2SB_CTX5_G2CONTROLSB_0_DBSEL_WOFFSET                   0x0
#define G2SB_CTX5_G2CONTROLSB_0_DBSEL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_DBSEL_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLSB_0_DBSEL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_DBSEL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_DBSEL_DST_A                     _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLSB_0_DBSEL_DST_B                     _MK_ENUM_CONST(1)

// Key Signal Generator Enable (KEYEN) Key signal generator generates either
// chroma key signal (from YCbCr signal) or color key signal (from RGB signal)
//0 Key signal generator is disabled.
//1 Key signal generator is enabled.
#define G2SB_CTX5_G2CONTROLSB_0_KEYEN_SHIFT                     _MK_SHIFT_CONST(27)
#define G2SB_CTX5_G2CONTROLSB_0_KEYEN_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLSB_0_KEYEN_SHIFT)
#define G2SB_CTX5_G2CONTROLSB_0_KEYEN_RANGE                     27:27
#define G2SB_CTX5_G2CONTROLSB_0_KEYEN_WOFFSET                   0x0
#define G2SB_CTX5_G2CONTROLSB_0_KEYEN_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_KEYEN_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLSB_0_KEYEN_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_KEYEN_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_KEYEN_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLSB_0_KEYEN_ENABLE                    _MK_ENUM_CONST(1)

// Key Signal Polarity (KPOL)
// Color/Chroma key signal is generated by comparing source input pixel
// color to a range of a color specified by lower and upper limit values.
// The key signal is interpreted in two ways, depending on which one of
// video and graphics images is foreground (and the other is background).
// This is effective only if Key signal generator is enabled.
// (see G2CMKEYL, G2CMKEYU)
// 0 Key signal is set to 1 when source pixel is within the lower and upper
// limit color range.
// 1 Key signal is set to 1 when source pixel is outside the lower and upper
// limit color range.
#define G2SB_CTX5_G2CONTROLSB_0_KPOL_SHIFT                      _MK_SHIFT_CONST(28)
#define G2SB_CTX5_G2CONTROLSB_0_KPOL_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLSB_0_KPOL_SHIFT)
#define G2SB_CTX5_G2CONTROLSB_0_KPOL_RANGE                      28:28
#define G2SB_CTX5_G2CONTROLSB_0_KPOL_WOFFSET                    0x0
#define G2SB_CTX5_G2CONTROLSB_0_KPOL_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_KPOL_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLSB_0_KPOL_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_KPOL_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_KPOL_WITHIN_BOUNDS                      _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLSB_0_KPOL_OUTSIDE_BOUNDS                     _MK_ENUM_CONST(1)

// Enable Dithering (ENDITH)
// For 16 bit RGB output modes, the LSB of the color components can be
// modified by adding a variable residual value that will reduce the banding
// artifacts that can appear on the display.
// 0 Normal operation
// 1 Enable Dithering
#define G2SB_CTX5_G2CONTROLSB_0_ENDITH_SHIFT                    _MK_SHIFT_CONST(30)
#define G2SB_CTX5_G2CONTROLSB_0_ENDITH_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLSB_0_ENDITH_SHIFT)
#define G2SB_CTX5_G2CONTROLSB_0_ENDITH_RANGE                    30:30
#define G2SB_CTX5_G2CONTROLSB_0_ENDITH_WOFFSET                  0x0
#define G2SB_CTX5_G2CONTROLSB_0_ENDITH_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_ENDITH_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLSB_0_ENDITH_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_ENDITH_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_ENDITH_DISABLE                  _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLSB_0_ENDITH_ENABLE                   _MK_ENUM_CONST(1)

//output destination writes (dw) go either to image memory or epp
//0 Output data is sent to memory
//1 YUV or RGB data is passed directly to EPP module and no destination writes
//  will take place.
#define G2SB_CTX5_G2CONTROLSB_0_DISDW_SHIFT                     _MK_SHIFT_CONST(31)
#define G2SB_CTX5_G2CONTROLSB_0_DISDW_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLSB_0_DISDW_SHIFT)
#define G2SB_CTX5_G2CONTROLSB_0_DISDW_RANGE                     31:31
#define G2SB_CTX5_G2CONTROLSB_0_DISDW_WOFFSET                   0x0
#define G2SB_CTX5_G2CONTROLSB_0_DISDW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_DISDW_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLSB_0_DISDW_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_DISDW_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSB_0_DISDW_GOTO_IMAGE_BUFFER                 _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLSB_0_DISDW_GOTO_EPP                  _MK_ENUM_CONST(1)


// Register G2SB_CTX5_G2CONTROLSECOND_0  //{host,2d,index=1e}
#define G2SB_CTX5_G2CONTROLSECOND_0                     _MK_ADDR_CONST(0x201e)
#define G2SB_CTX5_G2CONTROLSECOND_0_SECURE                      0x0
#define G2SB_CTX5_G2CONTROLSECOND_0_WORD_COUNT                  0x1
#define G2SB_CTX5_G2CONTROLSECOND_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_RESET_MASK                  _MK_MASK_CONST(0x3f61c3fe)
#define G2SB_CTX5_G2CONTROLSECOND_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_READ_MASK                   _MK_MASK_CONST(0x3f71c3fe)
#define G2SB_CTX5_G2CONTROLSECOND_0_WRITE_MASK                  _MK_MASK_CONST(0x3f71c3fe)
// Host port bit swap 1=enable   0= disable
//   1= enable
#define G2SB_CTX5_G2CONTROLSECOND_0_BITSWAP_SHIFT                       _MK_SHIFT_CONST(1)
#define G2SB_CTX5_G2CONTROLSECOND_0_BITSWAP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLSECOND_0_BITSWAP_SHIFT)
#define G2SB_CTX5_G2CONTROLSECOND_0_BITSWAP_RANGE                       1:1
#define G2SB_CTX5_G2CONTROLSECOND_0_BITSWAP_WOFFSET                     0x0
#define G2SB_CTX5_G2CONTROLSECOND_0_BITSWAP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_BITSWAP_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLSECOND_0_BITSWAP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_BITSWAP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_BITSWAP_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLSECOND_0_BITSWAP_ENABLE                      _MK_ENUM_CONST(1)

// Host port byte swap 1=enable   0= disable
//   1= enable
#define G2SB_CTX5_G2CONTROLSECOND_0_BEBSWAP_SHIFT                       _MK_SHIFT_CONST(2)
#define G2SB_CTX5_G2CONTROLSECOND_0_BEBSWAP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLSECOND_0_BEBSWAP_SHIFT)
#define G2SB_CTX5_G2CONTROLSECOND_0_BEBSWAP_RANGE                       2:2
#define G2SB_CTX5_G2CONTROLSECOND_0_BEBSWAP_WOFFSET                     0x0
#define G2SB_CTX5_G2CONTROLSECOND_0_BEBSWAP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_BEBSWAP_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLSECOND_0_BEBSWAP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_BEBSWAP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_BEBSWAP_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLSECOND_0_BEBSWAP_ENABLE                      _MK_ENUM_CONST(1)

// Host port word swap 1=enable   0= disable
#define G2SB_CTX5_G2CONTROLSECOND_0_BEWSWAP_SHIFT                       _MK_SHIFT_CONST(3)
#define G2SB_CTX5_G2CONTROLSECOND_0_BEWSWAP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLSECOND_0_BEWSWAP_SHIFT)
#define G2SB_CTX5_G2CONTROLSECOND_0_BEWSWAP_RANGE                       3:3
#define G2SB_CTX5_G2CONTROLSECOND_0_BEWSWAP_WOFFSET                     0x0
#define G2SB_CTX5_G2CONTROLSECOND_0_BEWSWAP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_BEWSWAP_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLSECOND_0_BEWSWAP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_BEWSWAP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_BEWSWAP_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLSECOND_0_BEWSWAP_ENABLE                      _MK_ENUM_CONST(1)

// Alpha blending method
// FIX:
//   ALPHA blending:  Fixed alpha,  ALPHA is the value, B5G6R5 * B5G6R5
//   VCAA:            B5G6R5->B5G6R5
// PL1BPP:
//   ALPHA blending:  Alpha 1bit/pixel from memory plane, B5G6R5 * B5G6R5
//      NOTE: when ALPTYPE is PL1BPP, DSTX[2:0] must be zero, see bug 344489
// PL2BPP:
//   ALPHA blending:  Alpha 2bits/pixel from memory plane, B5G6R5 * B5G6R5
//      NOTE: when ALPTYPE is PL2BPP, DSTX[1:0] must be zero, see bug 344489
// PL4BPP:
//   ALPHA blending:  Alpha 4bits/pixel from memory plane, B5G6R5 * B5G6R5
//      NOTE: when ALPTYPE is PL4BPP, DSTX[0:0] must be zero, see bug 344489
// PL8BPP:
//   ALPHA blending:  Alpha 8bits/pixel from memory plane, B5G6R5 * B5G6R5
// PL44BPP:
//   ALPHA blending:  Alpha 8bits/pixel from memory plane src*4bits+dst*4bits, B5G6R5 * B5G6R5
// PLS1BPP:
//   ALPHA blending:  Alpha 1bit from source B5G5R5A1, alpha(MSB). Dest: B5G6R5.
//   VCAA:            reserved
// PLS4BPPAL:
//   ALPHA blending:  Alpha 4bits from source A4B4G4R4, alpha(LSB). Dest: B5G6R5.
// PLS4BPP:
//   ALPHA blending:  Alpha 4bits from source B4G4R4A4, alpha(MSB). Dest: B5G6R5.
//   VCAA:            R8G8B8A8->B5G6R5 without reading VCAA plane
//                     (surface blit with bpp down convert - implemented in hw by vcaa engine; not really a vcaa resolve)
// PLS8BPP:
//   ALPHA blending:  Alpha 8bits from source/destination(decided by ALPSRCORDST),
//                    R8G8B8A8, alpha(MSB). DST: R8G8B8A8
//   VCAA:            R8G8B8A8->R8G8B8A8, alpha has same blending method as RGB
// PLS8BX:
//   ALPHA blending:  Alpha 8bits from source B8G8R8A8, alpha(MSB). Dest: B5G6R5. (**Restrictions)
//   VCAA:            R8G8B8A8->B5G6R5
// PLS1BPPAL:
//   ALPHA blending:  Alpha 1 bit from source A1B5G5R5, alpha(LSB). Dest: B5G6R5
//   VCAA:            A1B5G5R5->A1B5G5R5
// **Restriction
// PLS8BX alpha blending has the following restrictions
// 1. Source/destination addresses have to be in 128bit boundary.
// 2. Destination width has to be multiple of 4 pixels.
// 3. Source/Destination strides have to be multiple of 128bits.
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPTYPE_SHIFT                       _MK_SHIFT_CONST(4)
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPTYPE_FIELD                       (_MK_MASK_CONST(0x1f) << G2SB_CTX5_G2CONTROLSECOND_0_ALPTYPE_SHIFT)
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPTYPE_RANGE                       8:4
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPTYPE_WOFFSET                     0x0
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPTYPE_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPTYPE_DEFAULT_MASK                        _MK_MASK_CONST(0x1f)
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPTYPE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPTYPE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPTYPE_FIX                 _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPTYPE_PL1BPP                      _MK_ENUM_CONST(1)
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPTYPE_PL2BPP                      _MK_ENUM_CONST(2)
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPTYPE_PL4BPP                      _MK_ENUM_CONST(3)
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPTYPE_PL8BPP                      _MK_ENUM_CONST(4)
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPTYPE_PL44BPP                     _MK_ENUM_CONST(5)
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPTYPE_PLS1BPP                     _MK_ENUM_CONST(6)
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPTYPE_PLS4BPPAL                   _MK_ENUM_CONST(7)
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPTYPE_PLS4BPP                     _MK_ENUM_CONST(8)
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPTYPE_PLS8BPP                     _MK_ENUM_CONST(9)
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPTYPE_PLS8BX                      _MK_ENUM_CONST(10)
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPTYPE_PLS1BPPAL                   _MK_ENUM_CONST(11)

// 32bits blending mode, output alpha selection 0:source alpha, 1:destination alpha
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPSRCORDST_SHIFT                   _MK_SHIFT_CONST(9)
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPSRCORDST_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLSECOND_0_ALPSRCORDST_SHIFT)
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPSRCORDST_RANGE                   9:9
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPSRCORDST_WOFFSET                 0x0
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPSRCORDST_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPSRCORDST_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPSRCORDST_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPSRCORDST_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPSRCORDST_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLSECOND_0_ALPSRCORDST_ENABLE                  _MK_ENUM_CONST(1)

// Pixel replication for Palm OS.
#define G2SB_CTX5_G2CONTROLSECOND_0_PXLREP_SHIFT                        _MK_SHIFT_CONST(14)
#define G2SB_CTX5_G2CONTROLSECOND_0_PXLREP_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLSECOND_0_PXLREP_SHIFT)
#define G2SB_CTX5_G2CONTROLSECOND_0_PXLREP_RANGE                        14:14
#define G2SB_CTX5_G2CONTROLSECOND_0_PXLREP_WOFFSET                      0x0
#define G2SB_CTX5_G2CONTROLSECOND_0_PXLREP_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_PXLREP_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLSECOND_0_PXLREP_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_PXLREP_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_PXLREP_DISABLE                      _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLSECOND_0_PXLREP_ENABLE                       _MK_ENUM_CONST(1)

// Used by Palm OS to highlight a selected icon by swapping
//  Background and Foreground colors in a rectangle area
#define G2SB_CTX5_G2CONTROLSECOND_0_SWAPBLT_SHIFT                       _MK_SHIFT_CONST(15)
#define G2SB_CTX5_G2CONTROLSECOND_0_SWAPBLT_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLSECOND_0_SWAPBLT_SHIFT)
#define G2SB_CTX5_G2CONTROLSECOND_0_SWAPBLT_RANGE                       15:15
#define G2SB_CTX5_G2CONTROLSECOND_0_SWAPBLT_WOFFSET                     0x0
#define G2SB_CTX5_G2CONTROLSECOND_0_SWAPBLT_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_SWAPBLT_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLSECOND_0_SWAPBLT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_SWAPBLT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//VCAA safe mode, if turned on, all up/bottom color data will be read in. This is a debug/cya incase the top/bottom color
//  fetch is broken.
#define G2SB_CTX5_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_CTX5_G2CONTROLSECOND_0_VCAA_SAFE_MODE_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SHIFT)
#define G2SB_CTX5_G2CONTROLSECOND_0_VCAA_SAFE_MODE_RANGE                        16:16
#define G2SB_CTX5_G2CONTROLSECOND_0_VCAA_SAFE_MODE_WOFFSET                      0x0
#define G2SB_CTX5_G2CONTROLSECOND_0_VCAA_SAFE_MODE_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_VCAA_SAFE_MODE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_VCAA_SAFE_MODE_DISABLE                      _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLSECOND_0_VCAA_SAFE_MODE_ENABLE                       _MK_ENUM_CONST(1)

#define G2SB_CTX5_G2CONTROLSECOND_0_G2NOSTOP_SHIFT                      _MK_SHIFT_CONST(20)
#define G2SB_CTX5_G2CONTROLSECOND_0_G2NOSTOP_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLSECOND_0_G2NOSTOP_SHIFT)
#define G2SB_CTX5_G2CONTROLSECOND_0_G2NOSTOP_RANGE                      20:20
#define G2SB_CTX5_G2CONTROLSECOND_0_G2NOSTOP_WOFFSET                    0x0
#define G2SB_CTX5_G2CONTROLSECOND_0_G2NOSTOP_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_G2NOSTOP_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_G2NOSTOP_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_G2NOSTOP_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Clipping rectangle control,
// if clip enable, bit 57 XYTDW should be cleared.
// 0x=clipping disabled,
// 10=draw only inside clipping rectangle,
// 11=draw only outside clipping rectangle
#define G2SB_CTX5_G2CONTROLSECOND_0_CLIPC_SHIFT                 _MK_SHIFT_CONST(21)
#define G2SB_CTX5_G2CONTROLSECOND_0_CLIPC_FIELD                 (_MK_MASK_CONST(0x3) << G2SB_CTX5_G2CONTROLSECOND_0_CLIPC_SHIFT)
#define G2SB_CTX5_G2CONTROLSECOND_0_CLIPC_RANGE                 22:21
#define G2SB_CTX5_G2CONTROLSECOND_0_CLIPC_WOFFSET                       0x0
#define G2SB_CTX5_G2CONTROLSECOND_0_CLIPC_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_CLIPC_DEFAULT_MASK                  _MK_MASK_CONST(0x3)
#define G2SB_CTX5_G2CONTROLSECOND_0_CLIPC_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_CLIPC_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Fast Rotate mode sel
//------------------------------------------------------------------
// G2 Fast Rotate
//
// Transforms a surface via FR_TYPE transformation.
// Works in either 2-buffer (copy)  or 1-buffer mode (in place) mode.
// The engine breaks down a larger surface into a grid of smaller FR_BLOCKs.
// Works on the granularity of an FR_BLOCK.  An FR_BLOCK is:
//   16x16 pixel block (DSTCD = bpp8)
//    8x8  pixel block (DSTCD = bpp16)
//    4x4  pixel block (DSTCD = bpp32)
// Max surface size is 4096x4096
//
// Key information
//  - source and destination base address must be 128-bit word aligned
//  - engine works on FR_BLOCK granularity:
//      transformed surface width  in multiples of 16-bytes**
//      transformed surface height in multiples of 16/8/4 lines for bpp8/bpp16/bpp32 FR_BLOCK
//      if surface dimension is not a multiple, sw can program FR engine to transform larger surface
//         (round up to next FR_BLOCK in width and height-->transform-->calculate relative memory pointer address)
//  - during a rotational transformation (TRANS_LR, TRANS_RL, ROT_90, ROT_270):
//      the stride of the output surface != the stride of the input surface when working on non-square input
//      input:                        output:
//      *^----------------------           *$----------------------
//      $ 0  1  2  3  4  5  6  7           ^ 24 16 8  0  ^  ^  ^  ^
//      | 8  9 10 11 12 13 14 15           | 25 17 9  1  ^  ^  ^  ^
//      |16 17 18 19 20 21 22 23           | 26 18 10 2  ^  ^  ^  ^
//      |24 25 26 27 28 29 30 31           | 27 19 11 3  ^  ^  ^  ^
//      | -  -  -  -  *  *  *  *           | 28 20 12 4  *  *  *  *
//      | -  -  -  -  *  *  *  *           | 29 21 13 5  *  *  *  *
//      | -  -  -  -  *  *  *  *           | 30 22 14 6  *  *  *  *
//      | -  -  -  -  *  *  *  *           | 31 23 15 7  *  *  *  *
//
//  - Tiling alignment restrictions subsume FR restrictions because the
//    FR surface base address is the same as the start address.
//
//  Register Programming
//  ====================
//   FR_MODE - inplace or copy
//   FR_TYPE - type of transformation
//   DSTCD - bpp8, bpp16, bpp32
//   SRCBA - source base address
//   SRCWIDTH - (width in pixels-1)
//   SRCHEIGHT - (height in lines-1)
//   SRCS - source stride
//   DSTBA - dest base address
//   DSTS - dest stride
//   FR_READWAIT - always set to enable
//
// FR inefficency in the following setup :
// 1. FR_MODE==SQUARE
// 2. if(FR_TYPE==YFLIP && SRCHEIGHT==m*n && n==odd number) where m=8bpp?16:16bpp?8:4
//    Or if(FR_TYPE==XFLIP && SRCWIDTH==m*n && n==odd number) where m=8bpp?16:16bpp?8:4
// 3. Then, the middle 8 lines/pixels, E.G. YFLIP/16bpp/n==3, line8 to line15 will be processed twice. 00 = disable fast rotate - this turns off the 2nd level clock to fr_rotate engine.  Please remember to do so!
// 01 = src/dst copy mode - two separate buffers
// 10 = square in place - one buffer
// 11 = blank
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_MODE_SHIFT                       _MK_SHIFT_CONST(24)
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_MODE_FIELD                       (_MK_MASK_CONST(0x3) << G2SB_CTX5_G2CONTROLSECOND_0_FR_MODE_SHIFT)
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_MODE_RANGE                       25:24
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_MODE_WOFFSET                     0x0
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_MODE_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_MODE_DEFAULT_MASK                        _MK_MASK_CONST(0x3)
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_MODE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_MODE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_MODE_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_MODE_SRC_DST_COPY                        _MK_ENUM_CONST(1)
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_MODE_SQUARE                      _MK_ENUM_CONST(2)
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_MODE_BLANK                       _MK_ENUM_CONST(3)

//  Fast Rotate type     000 = FLIP_X
// 001 = FLIP_Y
// 010 = TRANS_LR (mirrors about diagonal. Diagonal runs from upper left to lower right)
// 011 = TRANS_RL (mirrors about diagonal. Diagonal runs from upper right to lower left)
// 100 = ROT_90 (counter clock wise by 90 degrees)
// 101 = ROT_180
// 110 = ROT_270 (clock wise by 90 degrees)
// 111 = IDENTITY
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_TYPE_SHIFT                       _MK_SHIFT_CONST(26)
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_TYPE_FIELD                       (_MK_MASK_CONST(0x7) << G2SB_CTX5_G2CONTROLSECOND_0_FR_TYPE_SHIFT)
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_TYPE_RANGE                       28:26
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_TYPE_WOFFSET                     0x0
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_TYPE_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_TYPE_DEFAULT_MASK                        _MK_MASK_CONST(0x7)
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_TYPE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_TYPE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_TYPE_FLIP_X                      _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_TYPE_FLIP_Y                      _MK_ENUM_CONST(1)
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_TYPE_TRANS_LR                    _MK_ENUM_CONST(2)
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_TYPE_TRANS_RL                    _MK_ENUM_CONST(3)
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_TYPE_ROT_90                      _MK_ENUM_CONST(4)
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_TYPE_ROT_180                     _MK_ENUM_CONST(5)
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_TYPE_ROT_270                     _MK_ENUM_CONST(6)
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_TYPE_IDENTITY                    _MK_ENUM_CONST(7)

//  Fast Rotate wait for read 0 = disable
// 1 = enable
// Enabling this bit forces FR to wait for the reads to be stored
// in the data return fifo before started to send writes out to
// the same block.
//
// Always set to ENABLE.  This is debug only.
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_READWAIT_SHIFT                   _MK_SHIFT_CONST(29)
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_READWAIT_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLSECOND_0_FR_READWAIT_SHIFT)
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_READWAIT_RANGE                   29:29
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_READWAIT_WOFFSET                 0x0
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_READWAIT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_READWAIT_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_READWAIT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_READWAIT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_READWAIT_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLSECOND_0_FR_READWAIT_ENABLE                  _MK_ENUM_CONST(1)

//----------------------------------------------------------------------
//
// G2 Blit Formats:
// (1) G2 Blit size is based on height in lines, width in pixels,
//     stride in bytes, and pixel size (color depth). Unless alpha
//     blending is enabled, G2 doesn't care about pixel components.
//
//     Source color depths supported by G2 Blit:
//     =========================================
//       color depth same as destination: G2CONTROLMAIN.SRCCD = 1
//       monochrome:                      G2CONTROLMAIN.SRCCD = 0
//       (source monochrome color determined by G2SRCBGC, G2SRCFGC)
//
//     Pattern color depths supported by G2 Blit:
//     =========================================
//       color depth same as destination: G2PATOS.PATCD = 1
//       monochrome:                      G2PATOS.PATCD = 0
//       (pattern monochrome color determined by G2PATBGC, G2PATFGC)
//
//     Destination color depths supported by G2 Blit:
//     ==============================================
//       1 byte per pixel:    G2CONTROLMAIN.DSTCD = BPP8
//       2 bytes per pixel:   G2CONTROLMAIN.DSTCD = BPP16
//       4 bytes per pixel:   G2CONTROLMAIN.DSTCD = BPP32
//
// (2) Alpha blending operates on 3 or 4 component pixels of a specified
//     color depth. One of the components may be alpha (A), depending on the
//     alpha blend format, which is only allowed in certain component
//     positions defined below. The only format rule of the remaining
//     components is that they must be in the same source and destination
//     position because the alpha blend engine does not support component
//     swapping. For example, valid 32BPP formats are: RGBA_8888->RGBA_8888,
//     BGRA_8888->BGRA_8888, GRBA_8888->GRBA_8888, etc.
//
//     Source formats supported by G2 alpha blend:
//     ===========================================
//       color depth BPP8:  no supported formats
//       color depth BPP16:
//          ALPTYPE_PLS1BPP: xxxA_5551 (ex: BGRA_5551 = A[15] R[14:10] G[9:5] B[4:0])
//          ALPTYPE_PLS4BPP: xxxA_4444 (ex: BGRA_4444 = A[15:12] R[11:8] G[7:4] B[3:0])
//          (other)        : xxx_565   (ex: BGR_565   = R[15:11] G[10:5] B[4:0])
//       color depth BPP32:
//          (all)          : xxxA_8888 (ex: BRGA_8888 = A[31:24] R[23:16] G[15:8] B[7:0])
//
//
//     Destination formats supported by G2 alpha blend:
//     ================================================
//       color depth BPP8:  no supported formats
//       color depth BPP16: xxx_565   (ex: BGR_565   = R[15:11] G[10:5] B[4:0])
//       color depth BPP32: xxxA_8888 (ex: BRGA_8888 = A[31:24] R[23:16] G[15:8] B[7:0])
//
//     The following table
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     | src cd  |   src format                  | dst cd  | dst format     | examples:                                  |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP8   |  no support                   |  BPP8   | no support     |                                            |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP16  | xyzA_5551, xyzA_4444, xyz_565 |  BPP16  | xyz_565        | BGRA_5551->BGR_565, RGB_565->RGB565        |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP32  | xyzA_8888                     |  BPP32  | xyzA_8888      | RGBA_8888->RGBA_8888, BGRA_8888->BGRA_8888 |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP32  | xyzA_8888                     |  BPP16  | xyz_565        | RGBA_8888->RGB_565, BGRA_8888->BGR_565     |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//
//----------------------------------------------------------
// VCAA Resolve engine
//
// (1) Format support
//
// +-----------------+--------------------+----------------------+
// | srcColor format | srcCoverage format | legal dest format(s) |
// +-----------------+--------------------+----------------------+
// |     A1B5G5R5    |        VCAA        |       A1B5G5R5       |
// +-----------------+--------------------+----------------------+
// |     R8G8B8A8    |        VCAA        |   R8G8B8A8, B5G6R5   |
// +-----------------+--------------------+----------------------+
// |      B5G6R5     |        VCAA        |         B5G6R5       |
// +-----------------+--------------------+----------------------+
//
// To program resolve type:
//   ALPTYPE == FIX:       B5G6R5   -> B5G6R5
//   ALPTYPE == PLS1BPPAL: A1B5G5R5 -> A1B5G5R5
//   ALPTYPE == PLS8BPP:   R8G8B8A8 -> R8G8B8A8
//   ALPTYPE == PLS8BX:    R8G8B8A8 -> B5G6R5
//
// (2) Color surface programming
//
//     color surface base address:  SRCBA
//       sub-surface start x:       SRCX      (pixel index)
//       sub-surface start y:       SRCY      (line index)
//     color surface stride:        SRCS      (bytes)
//
//     The engine supports sub-surface resolve.  One can imagine a full color buffer of 1024x768, but
//
//     [pseudo_code]
//       color_surface_start_address_fetch = pcurctx->regs.rG2SRCBA.uSRCBA() +
//        (pcurctx->regs.rG2SRCPS.uSRCX() * VCAAState.color_surface_depth) +
//        (pcurctx->regs.rG2SRCPS.uSRCY() * VCAAState.color_surface_stride);
//
// (3) VCAA surface programming
//
//     vcaa surface base address:   PATBA
//     vcaa surface stride:         PATST     (bytes)
//
//     [pseudo_code]
//       vcaa_surface_start_address_fetch = pcurctx->regs.rG2PATBA.uPATBA();
//
//       SW *MUST* directly program this register to the proper sub-surface location in the vcaa surface
//        which corresponds to the SRCX and SRCY programming. The calculation is
//            PATBA = vcaa_base_address + SRCX * (1) + SRCY * PATST;
//
// (4) Resolve surface programming
//
//     resolve window width:        DSTWIDTH  (pixels)
//     resolve window height:       DSTHEIGHT (lines)
//     resolve output stride:       DSTS      (bytes)
//
//  These values program the width and height of the resolved surface.  In the base case,
//   DSTWIDTH  = color surface width
//   DSTHEIGHT = color sufrace height
//   DSTS      = resolve surface format bpp * DSTWIDTH
//
//  The vcaa engine technically supports DSTX and DSTY (like its cousin SRCX and SRCY).  This was not
//  requested by the original RFE by SW during the initial design.
//
//  [pseudo_code]
//     resolve_surface_start_address_put = pcurctx->regs.rG2DSTBA.uDSTBA() +
//       (pcurctx->regs.rG2DSTPS.uDSTX() * resolve_surface_color_depth) +
//       (pcurctx->regs.rG2DSTPS.uDSTY() * resolve_surface_color_stride);
//
//
// (5) Resolving a pixel
//
//   The coverage surface is a 8 bits per pixel surface (C4X4).  The surface is initialized to all 1s by 3d.
//
//   For a given pixel, we need to look up 4 bits of coverage data.
//   If the data is 0xf, the pixel does not need to be resolved.
//   Otherwise, we need to reblend the pixel with certain weightings of its neighbors (i.e. we're on the edge of some geometry)
//
//   If any coverage bits is 0, we need to resolve the color.  To do so, we calculate the following eqn:
//   color_new = (
//                 20*color_old +
//                 27*(
//                     ((cover_down  == 0) ? color_down  : color_old) +
//                     ((cover_right == 0) ? color_right : color_old) +
//                     ((cover_left  == 0) ? color_left  : color_old) +
//                     ((cover_up    == 0) ? color_up    : color_old)
//                     )
//               ) / 128;
//
//   If coverage bit == 0, then we use the neighbor color value in the resolve
//   If coverage bit == 1, then we use the center   color value in the resolve
//
//   The resolve is done on a per channel (r/g/b/a) basis:
//     format convert input channel to 8-bit
//     perform resolve equation above
//     format convert to output format
//
//   For the resolution of the alpha channel:
//     In B5G6R5:   no alpha information.  do nothing.
//     In A1B5G5R5: no resolve.  keep the source color alpha bit.
//     In R8G8B8A8: normal 8-bit channel resolve
//
// (6) Resolving a pixel on the edge
//
//    When on an edge, the vcaa engine treats the coverage bit as a 1.  Use the center color value.
//    This holds true even on the edge of the sub-surface resolve window when located in the middle of the larger surface
//
// (7) Maximum dimensions
//
//    The maximum resolve sub-surface is 4096 pixels wide.
//
// (8) Surface restrictions
//    The VCAA engine has the following restrictions w.r.t input surfaces
//      - input base address is 128-bit memory word aligned
//      - input stride is multiple of 128-bits (16 bytes)
//    The VCAA engine has the following restrictions w.r.t output surfaces
//      - output base address is 128-bit memory word aligned
//      - output stride is multiple of 128-bits (16 bytes)
// (9) Coverage surface layout
//    The surface is C4X4.  doc/<previous projects>/3d/qrast_sides.vsd/qrast_arch.doc/qrast_vcaa.doc has a wealth of info.
//
//    Surface layout (C4X4)
//    =====================
//
//       (lsb2msb)  C0_C1_C2_C3_X_X_X_X     (X is a don't care.  Qrast inits to 1)
//       (msb2lsb)  X_X_X_X_C3_C2_C1_C0
//
//
//     +          o          o
//          C0
//             C1   Cov(0,1)
//        C2
//          C3
//     o          o          o
//
//       Cov(1,0)   Cov(1,1)
//
//     o          o          o
//
//
//     +/o = pixel centers
//
//     In the example above,
//        Cov(0,0) = X_X_X_X_C3_C2_C1_C0
//        C3       = V_C3(Cov(0,0));
//        ..         ..
//        C0       = V_C0(Cov(0,0));
//     #define V_C3(bits) (bits & 0x8)
//     #define V_C2(bits) (bits & 0x4)
//     #define V_C1(bits) (bits & 0x2)
//     #define V_C0(bits) (bits & 0x1)
//
//    Resolving a pixel
//    =================
//     In an ideal world, the coverage would be simply laid out such that when resolving Pixel(x,y), we would
//    need only to fetch Cov(x,y) to get all 4 bits of information.
//     In actuality, the coverage surface was rearranged to help qrast in performance.  To resolve Pixel(x,y)
//    gr2d has to fetch 4 C4X4 bytes [Cov(x,y), Cov(x-1,y), Cov(x,y-1), Cov(x-1,y-1)].  From each C4X4 byte, it
//    extracts one bit which is used in the resolve equations shown in (5).
//
//
//    Need the logical vcaa bits (DRLU) for blend which is spread across four C4X4 coverage bytes
//
//          U
//    L
//        o
//            R
//      D
//
//    where
//
//     o = Pixel(x,y)
//     D = V_C1(Cov(x-1,y))
//     R = V_C0(Cov(x,y))
//     L = V_C3(Cov(x-1,y-1))
//     U = V_C2(Cov(x,y-1))
//
//
// (10) Other documentation
//       cmod/g2/fsim/g2vcaa.cpp - cmodel implementation with comments
//       doc/<previous projects>/3d/qrast_sides.vsd/qrast_arch.doc/qrast_vcaa.doc
//

// Register G2SB_CTX5_G2CONTROLMAIN_0  //{host,2d,sb,index=1f}
#define G2SB_CTX5_G2CONTROLMAIN_0                       _MK_ADDR_CONST(0x201f)
#define G2SB_CTX5_G2CONTROLMAIN_0_SECURE                        0x0
#define G2SB_CTX5_G2CONTROLMAIN_0_WORD_COUNT                    0x1
#define G2SB_CTX5_G2CONTROLMAIN_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_RESET_MASK                    _MK_MASK_CONST(0x7eccffff)
#define G2SB_CTX5_G2CONTROLMAIN_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_READ_MASK                     _MK_MASK_CONST(0x7fffffff)
#define G2SB_CTX5_G2CONTROLMAIN_0_WRITE_MASK                    _MK_MASK_CONST(0x7fffffff)
// Command Type:  00=BitBlt
// 01=Line Draw
// 10=VCAA
// 11=reserved
//  When the raise command is in executing
//  (there are no other outstanding commands with same channel being executed)
#define G2SB_CTX5_G2CONTROLMAIN_0_CMDT_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2CONTROLMAIN_0_CMDT_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX5_G2CONTROLMAIN_0_CMDT_SHIFT)
#define G2SB_CTX5_G2CONTROLMAIN_0_CMDT_RANGE                    1:0
#define G2SB_CTX5_G2CONTROLMAIN_0_CMDT_WOFFSET                  0x0
#define G2SB_CTX5_G2CONTROLMAIN_0_CMDT_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_CMDT_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX5_G2CONTROLMAIN_0_CMDT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_CMDT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_CMDT_BITBLT                   _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLMAIN_0_CMDT_LINEDRAW                 _MK_ENUM_CONST(1)
#define G2SB_CTX5_G2CONTROLMAIN_0_CMDT_VCAA                     _MK_ENUM_CONST(2)
#define G2SB_CTX5_G2CONTROLMAIN_0_CMDT_RESERVED1                        _MK_ENUM_CONST(3)

//fast fill rectangle in 128bit/clock
//Some limitaions with this mode:
//srcsld==1 rop==0xcc, no clipping, no transparency
//xdir==0, ydir==0, flip==0, xytdw==0
//Results are undefined if the above limitations are not satified.
#define G2SB_CTX5_G2CONTROLMAIN_0_TURBOFILL_SHIFT                       _MK_SHIFT_CONST(2)
#define G2SB_CTX5_G2CONTROLMAIN_0_TURBOFILL_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLMAIN_0_TURBOFILL_SHIFT)
#define G2SB_CTX5_G2CONTROLMAIN_0_TURBOFILL_RANGE                       2:2
#define G2SB_CTX5_G2CONTROLMAIN_0_TURBOFILL_WOFFSET                     0x0
#define G2SB_CTX5_G2CONTROLMAIN_0_TURBOFILL_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_TURBOFILL_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLMAIN_0_TURBOFILL_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_TURBOFILL_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//Command finish timing bit 0: 2D command finishs when last data has been pushed to memory write client.
// 1: 2D command waits memory write client to be idle to finish.
#define G2SB_CTX5_G2CONTROLMAIN_0_TEST0BIT_SHIFT                        _MK_SHIFT_CONST(3)
#define G2SB_CTX5_G2CONTROLMAIN_0_TEST0BIT_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLMAIN_0_TEST0BIT_SHIFT)
#define G2SB_CTX5_G2CONTROLMAIN_0_TEST0BIT_RANGE                        3:3
#define G2SB_CTX5_G2CONTROLMAIN_0_TEST0BIT_WOFFSET                      0x0
#define G2SB_CTX5_G2CONTROLMAIN_0_TEST0BIT_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_TEST0BIT_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLMAIN_0_TEST0BIT_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_TEST0BIT_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_TEST0BIT_DISABLE                      _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLMAIN_0_TEST0BIT_ENABLE                       _MK_ENUM_CONST(1)

// BitBlt Source Copy Fade enable, 1=enable (share with mltln), only support
//  16bpp mode
#define G2SB_CTX5_G2CONTROLMAIN_0_FADEN_SHIFT                   _MK_SHIFT_CONST(4)
#define G2SB_CTX5_G2CONTROLMAIN_0_FADEN_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLMAIN_0_FADEN_SHIFT)
#define G2SB_CTX5_G2CONTROLMAIN_0_FADEN_RANGE                   4:4
#define G2SB_CTX5_G2CONTROLMAIN_0_FADEN_WOFFSET                 0x0
#define G2SB_CTX5_G2CONTROLMAIN_0_FADEN_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_FADEN_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLMAIN_0_FADEN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_FADEN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_FADEN_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLMAIN_0_FADEN_ENABLE                  _MK_ENUM_CONST(1)

// BitBlt Alpha Blending, 1=enable. 0=disable,
//when both Faden and alpen are 1, output=Source*alpha_v + fadoff,
// alpha_v is decided by alptype
#define G2SB_CTX5_G2CONTROLMAIN_0_ALPEN_SHIFT                   _MK_SHIFT_CONST(5)
#define G2SB_CTX5_G2CONTROLMAIN_0_ALPEN_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLMAIN_0_ALPEN_SHIFT)
#define G2SB_CTX5_G2CONTROLMAIN_0_ALPEN_RANGE                   5:5
#define G2SB_CTX5_G2CONTROLMAIN_0_ALPEN_WOFFSET                 0x0
#define G2SB_CTX5_G2CONTROLMAIN_0_ALPEN_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_ALPEN_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLMAIN_0_ALPEN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_ALPEN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// BitBlt Solid Source Color Fill: 1=enable. FGC will be used as
// the color value.
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCSLD_SHIFT                  _MK_SHIFT_CONST(6)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCSLD_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLMAIN_0_SRCSLD_SHIFT)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCSLD_RANGE                  6:6
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCSLD_WOFFSET                        0x0
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCSLD_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCSLD_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCSLD_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCSLD_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCSLD_DISABLE                        _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCSLD_ENABLE                 _MK_ENUM_CONST(1)

// BitBlt Solid Pattern Fill: 1=enable. BGC will be used as
// the color value.
#define G2SB_CTX5_G2CONTROLMAIN_0_PATSLD_SHIFT                  _MK_SHIFT_CONST(7)
#define G2SB_CTX5_G2CONTROLMAIN_0_PATSLD_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLMAIN_0_PATSLD_SHIFT)
#define G2SB_CTX5_G2CONTROLMAIN_0_PATSLD_RANGE                  7:7
#define G2SB_CTX5_G2CONTROLMAIN_0_PATSLD_WOFFSET                        0x0
#define G2SB_CTX5_G2CONTROLMAIN_0_PATSLD_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_PATSLD_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLMAIN_0_PATSLD_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_PATSLD_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_PATSLD_DISABLE                        _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLMAIN_0_PATSLD_ENABLE                 _MK_ENUM_CONST(1)

// When mono pattern is set, we use mono tile pattern fill.
//
//  current pattern client can support a 16x16 bit tile which can be used
//  to generate a larger surface (i.e. tile this surface in the x and y direction)
//  The tile is stored in memory.  Currently, PATXO and PATYO tell you where
//  to start in the 16x16 tile when expanding the monochrome data.
//
//  See patxo and patyo comments below for programming (hw bid 247332)
//   When xdir==1
//     Patxo = pattern width - (patxo+destination width)&0xF   -- For xoffsets
//  y offsets PATYO remains the same when xdir/ydir change.
//
//
//  How the tile replication pattern looks based on xdir/ydir (without programming patxo above):
//
//  xdir=0 ydir=0              xdir=1 ydir=0
//
//   +---+--+                  +--+---+
//   |^|^|^||                  ||^|^|^|
//   |~~~|~~|                  |~~|~~~|
//   +---+--|                  |--+---+
//   |^|^|^||                  ||^|^|^|
//   +------+                  +------+
//
//
//   +---+--+                  +--+---+
//   |^|^|^||                  ||^|^|^|
//   |~~~|~~|                  |~~|~~~|
//   +---+--|                  |--+---+
//   |^|^|^||                  ||^|^|^|
//   +------+                  +------+
//    //
//  xdir=0 ydir=1              xdir=1 ydir=1
//
//   Mono tile is
//      +---+
//      |^|^|
//      |~~~|
//      +---+
//
//
#define G2SB_CTX5_G2CONTROLMAIN_0_PATFL_SHIFT                   _MK_SHIFT_CONST(8)
#define G2SB_CTX5_G2CONTROLMAIN_0_PATFL_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLMAIN_0_PATFL_SHIFT)
#define G2SB_CTX5_G2CONTROLMAIN_0_PATFL_RANGE                   8:8
#define G2SB_CTX5_G2CONTROLMAIN_0_PATFL_WOFFSET                 0x0
#define G2SB_CTX5_G2CONTROLMAIN_0_PATFL_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_PATFL_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLMAIN_0_PATFL_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_PATFL_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_PATFL_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLMAIN_0_PATFL_ENABLE                  _MK_ENUM_CONST(1)

//  0=incrementing, 1=decrementing.
//  xdir should not be set when source surface has different color depth as destination surface.
//  e.g. ALPTYPE=PLS8BX (32bpp blending with 16bpp), xdir has to be 0
//  SRCCD==0 (mono src) OR PATCD==0 (mono pat), xdir has to be 0
#define G2SB_CTX5_G2CONTROLMAIN_0_XDIR_SHIFT                    _MK_SHIFT_CONST(9)
#define G2SB_CTX5_G2CONTROLMAIN_0_XDIR_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLMAIN_0_XDIR_SHIFT)
#define G2SB_CTX5_G2CONTROLMAIN_0_XDIR_RANGE                    9:9
#define G2SB_CTX5_G2CONTROLMAIN_0_XDIR_WOFFSET                  0x0
#define G2SB_CTX5_G2CONTROLMAIN_0_XDIR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_XDIR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLMAIN_0_XDIR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_XDIR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//  0=incrementing, 1=decrementing.
//  ydir should not be set when source surface has different color depth as destination surface.
//  SRCCD==0 (mono src) OR PATCD==0 (mono pat), ydir has to be 0
#define G2SB_CTX5_G2CONTROLMAIN_0_YDIR_SHIFT                    _MK_SHIFT_CONST(10)
#define G2SB_CTX5_G2CONTROLMAIN_0_YDIR_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLMAIN_0_YDIR_SHIFT)
#define G2SB_CTX5_G2CONTROLMAIN_0_YDIR_RANGE                    10:10
#define G2SB_CTX5_G2CONTROLMAIN_0_YDIR_WOFFSET                  0x0
#define G2SB_CTX5_G2CONTROLMAIN_0_YDIR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_YDIR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLMAIN_0_YDIR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_YDIR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// xy transpose,
// Line stride DSTS has to be 16bytes aligned if enabled.
// If XYTDW==1, ROP can not include destination.
#define G2SB_CTX5_G2CONTROLMAIN_0_XYTDW_SHIFT                   _MK_SHIFT_CONST(11)
#define G2SB_CTX5_G2CONTROLMAIN_0_XYTDW_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLMAIN_0_XYTDW_SHIFT)
#define G2SB_CTX5_G2CONTROLMAIN_0_XYTDW_RANGE                   11:11
#define G2SB_CTX5_G2CONTROLMAIN_0_XYTDW_WOFFSET                 0x0
#define G2SB_CTX5_G2CONTROLMAIN_0_XYTDW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_XYTDW_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLMAIN_0_XYTDW_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_XYTDW_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Source Data is in Pack Mode.
//  SRCLNGAP in G2SRCPACK is the line gap for source packed mode.
//  If(SRCPACK && ~SRCSEL), source data is packed and from screen, SRCMONOW/SRCMONOH
//  should be programmed properly to fetch data from
//  frame buffer.
//  Note, PACK is not offically supported when the surface is tiled.
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCPACK_SHIFT                 _MK_SHIFT_CONST(12)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCPACK_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLMAIN_0_SRCPACK_SHIFT)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCPACK_RANGE                 12:12
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCPACK_WOFFSET                       0x0
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCPACK_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCPACK_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCPACK_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCPACK_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCPACK_DISABLE                       _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCPACK_ENABLE                        _MK_ENUM_CONST(1)

// Pattern Data is in Pack Mode.
//  PATLNGAP in G2PATPACK is the line gap for pattern packed mode
//  If(PATPACK && ~PATSEl), pattern data is packed and from screen, PATMONOW/PATMONOH
//  should be programmed properly to fetch pattern data from
//  frame buffer.
//  Note, PACK is not offically supported when the surface is tiled.
#define G2SB_CTX5_G2CONTROLMAIN_0_PATPACK_SHIFT                 _MK_SHIFT_CONST(13)
#define G2SB_CTX5_G2CONTROLMAIN_0_PATPACK_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLMAIN_0_PATPACK_SHIFT)
#define G2SB_CTX5_G2CONTROLMAIN_0_PATPACK_RANGE                 13:13
#define G2SB_CTX5_G2CONTROLMAIN_0_PATPACK_WOFFSET                       0x0
#define G2SB_CTX5_G2CONTROLMAIN_0_PATPACK_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_PATPACK_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLMAIN_0_PATPACK_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_PATPACK_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_PATPACK_DISABLE                       _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLMAIN_0_PATPACK_ENABLE                        _MK_ENUM_CONST(1)

// flip y direction to make image upside down or the other way.
// If YFLIP==1, ROP can not include destination.
#define G2SB_CTX5_G2CONTROLMAIN_0_YFLIP_SHIFT                   _MK_SHIFT_CONST(14)
#define G2SB_CTX5_G2CONTROLMAIN_0_YFLIP_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLMAIN_0_YFLIP_SHIFT)
#define G2SB_CTX5_G2CONTROLMAIN_0_YFLIP_RANGE                   14:14
#define G2SB_CTX5_G2CONTROLMAIN_0_YFLIP_WOFFSET                 0x0
#define G2SB_CTX5_G2CONTROLMAIN_0_YFLIP_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_YFLIP_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLMAIN_0_YFLIP_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_YFLIP_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_YFLIP_DSIABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLMAIN_0_YFLIP_ENABLE                  _MK_ENUM_CONST(1)

// Source Data Select:
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCSEL_SHIFT                  _MK_SHIFT_CONST(15)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCSEL_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLMAIN_0_SRCSEL_SHIFT)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCSEL_RANGE                  15:15
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCSEL_WOFFSET                        0x0
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCSEL_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCSEL_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCSEL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCSEL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCSEL_SCREEN                 _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCSEL_MEMORY                 _MK_ENUM_CONST(1)

// Destination color depth:
//   00=8-bpp, 01=16-bpp, 10=32-bpp. 11=reserved
#define G2SB_CTX5_G2CONTROLMAIN_0_DSTCD_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX5_G2CONTROLMAIN_0_DSTCD_FIELD                   (_MK_MASK_CONST(0x3) << G2SB_CTX5_G2CONTROLMAIN_0_DSTCD_SHIFT)
#define G2SB_CTX5_G2CONTROLMAIN_0_DSTCD_RANGE                   17:16
#define G2SB_CTX5_G2CONTROLMAIN_0_DSTCD_WOFFSET                 0x0
#define G2SB_CTX5_G2CONTROLMAIN_0_DSTCD_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_DSTCD_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_DSTCD_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_DSTCD_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_DSTCD_BPP8                    _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLMAIN_0_DSTCD_BPP16                   _MK_ENUM_CONST(1)
#define G2SB_CTX5_G2CONTROLMAIN_0_DSTCD_BPP32                   _MK_ENUM_CONST(2)
#define G2SB_CTX5_G2CONTROLMAIN_0_DSTCD_RESERVED3                       _MK_ENUM_CONST(3)

// Destination read transparency enable:
//   0x=destination read transparency disabled
//   10=color destination read transparency
//   11=inverse color destination read transparency.
// 20 rw INIC
// Initiate Command
// (1=initiate command immediately, 0=wait for launch write)
#define G2SB_CTX5_G2CONTROLMAIN_0_DSTT_SHIFT                    _MK_SHIFT_CONST(18)
#define G2SB_CTX5_G2CONTROLMAIN_0_DSTT_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX5_G2CONTROLMAIN_0_DSTT_SHIFT)
#define G2SB_CTX5_G2CONTROLMAIN_0_DSTT_RANGE                    19:18
#define G2SB_CTX5_G2CONTROLMAIN_0_DSTT_WOFFSET                  0x0
#define G2SB_CTX5_G2CONTROLMAIN_0_DSTT_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_DSTT_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX5_G2CONTROLMAIN_0_DSTT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_DSTT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//0 Source mono
//1 Source has same color depth as destination
//  SRCCD==0 xdir/ydir has to be 0
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCCD_SHIFT                   _MK_SHIFT_CONST(20)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCCD_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLMAIN_0_SRCCD_SHIFT)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCCD_RANGE                   20:20
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCCD_WOFFSET                 0x0
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCCD_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCCD_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCCD_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCCD_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Start from Msb or lsb in byte when mono expansion
// If HLMONO is 1, bit 0 (the lsb) is the first bit
// If HLMONO is 0, bit 7 (the msb) is the first bit
#define G2SB_CTX5_G2CONTROLMAIN_0_HLMONO_SHIFT                  _MK_SHIFT_CONST(21)
#define G2SB_CTX5_G2CONTROLMAIN_0_HLMONO_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLMAIN_0_HLMONO_SHIFT)
#define G2SB_CTX5_G2CONTROLMAIN_0_HLMONO_RANGE                  21:21
#define G2SB_CTX5_G2CONTROLMAIN_0_HLMONO_WOFFSET                        0x0
#define G2SB_CTX5_G2CONTROLMAIN_0_HLMONO_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_HLMONO_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_HLMONO_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_HLMONO_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Source transparency enable: 0x=source transparency disabled,
// 10=mono source background transparency
//    or color source transparency,
// 11=mono source foreground transparency
//    or inverse color source transparency.
// NOTE: When source transparency is enabled and SRCCD==0(mono)
//       SRCBGC!=SRCFGC should be satisfied.
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCT_SHIFT                    _MK_SHIFT_CONST(22)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCT_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX5_G2CONTROLMAIN_0_SRCT_SHIFT)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCT_RANGE                    23:22
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCT_WOFFSET                  0x0
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCT_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCT_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Source base address select:
//  0=srcba, 1=dstba. This is not used for Line Draw and
// if source data comes from host memory.
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCBAS_SHIFT                  _MK_SHIFT_CONST(24)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCBAS_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLMAIN_0_SRCBAS_SHIFT)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCBAS_RANGE                  24:24
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCBAS_WOFFSET                        0x0
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCBAS_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCBAS_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCBAS_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCBAS_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//Display Switching Window Control (GCSW[1:0])
//This parameter controls multi-buffering for Display.
//x0 At end of current command, don't send signal to Display to switch buffer.
//01 two buffers, dstba and dstba_b are used
//11 three buffers, dstba, dstba_b dstba_c are used
#define G2SB_CTX5_G2CONTROLMAIN_0_GCSW_SHIFT                    _MK_SHIFT_CONST(25)
#define G2SB_CTX5_G2CONTROLMAIN_0_GCSW_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX5_G2CONTROLMAIN_0_GCSW_SHIFT)
#define G2SB_CTX5_G2CONTROLMAIN_0_GCSW_RANGE                    26:25
#define G2SB_CTX5_G2CONTROLMAIN_0_GCSW_WOFFSET                  0x0
#define G2SB_CTX5_G2CONTROLMAIN_0_GCSW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_GCSW_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX5_G2CONTROLMAIN_0_GCSW_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_GCSW_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//source direct addressing
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCDIR_SHIFT                  _MK_SHIFT_CONST(27)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCDIR_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLMAIN_0_SRCDIR_SHIFT)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCDIR_RANGE                  27:27
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCDIR_WOFFSET                        0x0
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCDIR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCDIR_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCDIR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_SRCDIR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//destination direct addressing
#define G2SB_CTX5_G2CONTROLMAIN_0_DSTDIR_SHIFT                  _MK_SHIFT_CONST(28)
#define G2SB_CTX5_G2CONTROLMAIN_0_DSTDIR_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLMAIN_0_DSTDIR_SHIFT)
#define G2SB_CTX5_G2CONTROLMAIN_0_DSTDIR_RANGE                  28:28
#define G2SB_CTX5_G2CONTROLMAIN_0_DSTDIR_WOFFSET                        0x0
#define G2SB_CTX5_G2CONTROLMAIN_0_DSTDIR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_DSTDIR_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLMAIN_0_DSTDIR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_DSTDIR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// This feature is not offically supported.
//seperate destination read/write surface address
//0: read/write use DSTBA
//1: read uses SRCBA_B, write uses DSTBA
#define G2SB_CTX5_G2CONTROLMAIN_0_DST_RD_WR_SEP_SHIFT                   _MK_SHIFT_CONST(29)
#define G2SB_CTX5_G2CONTROLMAIN_0_DST_RD_WR_SEP_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLMAIN_0_DST_RD_WR_SEP_SHIFT)
#define G2SB_CTX5_G2CONTROLMAIN_0_DST_RD_WR_SEP_RANGE                   29:29
#define G2SB_CTX5_G2CONTROLMAIN_0_DST_RD_WR_SEP_WOFFSET                 0x0
#define G2SB_CTX5_G2CONTROLMAIN_0_DST_RD_WR_SEP_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_DST_RD_WR_SEP_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLMAIN_0_DST_RD_WR_SEP_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_DST_RD_WR_SEP_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// pattern Data Select: SRCSEL and PATSEL can't be both enabled.
#define G2SB_CTX5_G2CONTROLMAIN_0_PATSEL_SHIFT                  _MK_SHIFT_CONST(30)
#define G2SB_CTX5_G2CONTROLMAIN_0_PATSEL_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CONTROLMAIN_0_PATSEL_SHIFT)
#define G2SB_CTX5_G2CONTROLMAIN_0_PATSEL_RANGE                  30:30
#define G2SB_CTX5_G2CONTROLMAIN_0_PATSEL_WOFFSET                        0x0
#define G2SB_CTX5_G2CONTROLMAIN_0_PATSEL_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_PATSEL_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CONTROLMAIN_0_PATSEL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_PATSEL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CONTROLMAIN_0_PATSEL_SCREEN                 _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CONTROLMAIN_0_PATSEL_MEMORY                 _MK_ENUM_CONST(1)


// Register G2SB_CTX5_G2ROPFADE_0  //{host,2d,index=20}
#define G2SB_CTX5_G2ROPFADE_0                   _MK_ADDR_CONST(0x2020)
#define G2SB_CTX5_G2ROPFADE_0_SECURE                    0x0
#define G2SB_CTX5_G2ROPFADE_0_WORD_COUNT                        0x1
#define G2SB_CTX5_G2ROPFADE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2ROPFADE_0_RESET_MASK                        _MK_MASK_CONST(0xff)
#define G2SB_CTX5_G2ROPFADE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2ROPFADE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2ROPFADE_0_READ_MASK                         _MK_MASK_CONST(0xffff00ff)
#define G2SB_CTX5_G2ROPFADE_0_WRITE_MASK                        _MK_MASK_CONST(0xffff00ff)
//If YFLIP==1 or XYTDW==1, ROP can not include destination.
//Since destination may have been corrupted before reading out.
#define G2SB_CTX5_G2ROPFADE_0_ROP_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2ROPFADE_0_ROP_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX5_G2ROPFADE_0_ROP_SHIFT)
#define G2SB_CTX5_G2ROPFADE_0_ROP_RANGE                 7:0
#define G2SB_CTX5_G2ROPFADE_0_ROP_WOFFSET                       0x0
#define G2SB_CTX5_G2ROPFADE_0_ROP_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2ROPFADE_0_ROP_DEFAULT_MASK                  _MK_MASK_CONST(0xff)
#define G2SB_CTX5_G2ROPFADE_0_ROP_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2ROPFADE_0_ROP_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//
#define G2SB_CTX5_G2ROPFADE_0_FADCOE_SHIFT                      _MK_SHIFT_CONST(16)
#define G2SB_CTX5_G2ROPFADE_0_FADCOE_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX5_G2ROPFADE_0_FADCOE_SHIFT)
#define G2SB_CTX5_G2ROPFADE_0_FADCOE_RANGE                      23:16
#define G2SB_CTX5_G2ROPFADE_0_FADCOE_WOFFSET                    0x0
#define G2SB_CTX5_G2ROPFADE_0_FADCOE_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2ROPFADE_0_FADCOE_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2ROPFADE_0_FADCOE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2ROPFADE_0_FADCOE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

//
#define G2SB_CTX5_G2ROPFADE_0_FADOFF_SHIFT                      _MK_SHIFT_CONST(24)
#define G2SB_CTX5_G2ROPFADE_0_FADOFF_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX5_G2ROPFADE_0_FADOFF_SHIFT)
#define G2SB_CTX5_G2ROPFADE_0_FADOFF_RANGE                      31:24
#define G2SB_CTX5_G2ROPFADE_0_FADOFF_WOFFSET                    0x0
#define G2SB_CTX5_G2ROPFADE_0_FADOFF_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2ROPFADE_0_FADOFF_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2ROPFADE_0_FADOFF_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2ROPFADE_0_FADOFF_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2ALPHABLEND_0  //{2d,index=21}
#define G2SB_CTX5_G2ALPHABLEND_0                        _MK_ADDR_CONST(0x2021)
#define G2SB_CTX5_G2ALPHABLEND_0_SECURE                         0x0
#define G2SB_CTX5_G2ALPHABLEND_0_WORD_COUNT                     0x1
#define G2SB_CTX5_G2ALPHABLEND_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2ALPHABLEND_0_RESET_MASK                     _MK_MASK_CONST(0x100)
#define G2SB_CTX5_G2ALPHABLEND_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2ALPHABLEND_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2ALPHABLEND_0_READ_MASK                      _MK_MASK_CONST(0xffff01ff)
#define G2SB_CTX5_G2ALPHABLEND_0_WRITE_MASK                     _MK_MASK_CONST(0xffff01ff)
#define G2SB_CTX5_G2ALPHABLEND_0_ALPHA_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2ALPHABLEND_0_ALPHA_FIELD                    (_MK_MASK_CONST(0xff) << G2SB_CTX5_G2ALPHABLEND_0_ALPHA_SHIFT)
#define G2SB_CTX5_G2ALPHABLEND_0_ALPHA_RANGE                    7:0
#define G2SB_CTX5_G2ALPHABLEND_0_ALPHA_WOFFSET                  0x0
#define G2SB_CTX5_G2ALPHABLEND_0_ALPHA_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2ALPHABLEND_0_ALPHA_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2ALPHABLEND_0_ALPHA_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2ALPHABLEND_0_ALPHA_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

#define G2SB_CTX5_G2ALPHABLEND_0_ALPHAINV_SHIFT                 _MK_SHIFT_CONST(8)
#define G2SB_CTX5_G2ALPHABLEND_0_ALPHAINV_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2ALPHABLEND_0_ALPHAINV_SHIFT)
#define G2SB_CTX5_G2ALPHABLEND_0_ALPHAINV_RANGE                 8:8
#define G2SB_CTX5_G2ALPHABLEND_0_ALPHAINV_WOFFSET                       0x0
#define G2SB_CTX5_G2ALPHABLEND_0_ALPHAINV_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2ALPHABLEND_0_ALPHAINV_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2ALPHABLEND_0_ALPHAINV_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2ALPHABLEND_0_ALPHAINV_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

#define G2SB_CTX5_G2ALPHABLEND_0_ALPHA0V_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX5_G2ALPHABLEND_0_ALPHA0V_FIELD                  (_MK_MASK_CONST(0xff) << G2SB_CTX5_G2ALPHABLEND_0_ALPHA0V_SHIFT)
#define G2SB_CTX5_G2ALPHABLEND_0_ALPHA0V_RANGE                  23:16
#define G2SB_CTX5_G2ALPHABLEND_0_ALPHA0V_WOFFSET                        0x0
#define G2SB_CTX5_G2ALPHABLEND_0_ALPHA0V_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2ALPHABLEND_0_ALPHA0V_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2ALPHABLEND_0_ALPHA0V_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2ALPHABLEND_0_ALPHA0V_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX5_G2ALPHABLEND_0_ALPHA1V_SHIFT                  _MK_SHIFT_CONST(24)
#define G2SB_CTX5_G2ALPHABLEND_0_ALPHA1V_FIELD                  (_MK_MASK_CONST(0xff) << G2SB_CTX5_G2ALPHABLEND_0_ALPHA1V_SHIFT)
#define G2SB_CTX5_G2ALPHABLEND_0_ALPHA1V_RANGE                  31:24
#define G2SB_CTX5_G2ALPHABLEND_0_ALPHA1V_WOFFSET                        0x0
#define G2SB_CTX5_G2ALPHABLEND_0_ALPHA1V_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2ALPHABLEND_0_ALPHA1V_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2ALPHABLEND_0_ALPHA1V_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2ALPHABLEND_0_ALPHA1V_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// ClipRect Methods
// top-left bounds are inclusive

// Register G2SB_CTX5_G2CLIPLEFTTOP_0  //{2d,index=22}
#define G2SB_CTX5_G2CLIPLEFTTOP_0                       _MK_ADDR_CONST(0x2022)
#define G2SB_CTX5_G2CLIPLEFTTOP_0_SECURE                        0x0
#define G2SB_CTX5_G2CLIPLEFTTOP_0_WORD_COUNT                    0x1
#define G2SB_CTX5_G2CLIPLEFTTOP_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLIPLEFTTOP_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLIPLEFTTOP_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLIPLEFTTOP_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLIPLEFTTOP_0_READ_MASK                     _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX5_G2CLIPLEFTTOP_0_WRITE_MASK                    _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX5_G2CLIPLEFTTOP_0_CLIPL_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2CLIPLEFTTOP_0_CLIPL_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX5_G2CLIPLEFTTOP_0_CLIPL_SHIFT)
#define G2SB_CTX5_G2CLIPLEFTTOP_0_CLIPL_RANGE                   14:0
#define G2SB_CTX5_G2CLIPLEFTTOP_0_CLIPL_WOFFSET                 0x0
#define G2SB_CTX5_G2CLIPLEFTTOP_0_CLIPL_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLIPLEFTTOP_0_CLIPL_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLIPLEFTTOP_0_CLIPL_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLIPLEFTTOP_0_CLIPL_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

#define G2SB_CTX5_G2CLIPLEFTTOP_0_CLIPT_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX5_G2CLIPLEFTTOP_0_CLIPT_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX5_G2CLIPLEFTTOP_0_CLIPT_SHIFT)
#define G2SB_CTX5_G2CLIPLEFTTOP_0_CLIPT_RANGE                   30:16
#define G2SB_CTX5_G2CLIPLEFTTOP_0_CLIPT_WOFFSET                 0x0
#define G2SB_CTX5_G2CLIPLEFTTOP_0_CLIPT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLIPLEFTTOP_0_CLIPT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLIPLEFTTOP_0_CLIPT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLIPLEFTTOP_0_CLIPT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// bottom-right bounds are exclusive

// Register G2SB_CTX5_G2CLIPRIGHTBOT_0  //{2d,index=23}
#define G2SB_CTX5_G2CLIPRIGHTBOT_0                      _MK_ADDR_CONST(0x2023)
#define G2SB_CTX5_G2CLIPRIGHTBOT_0_SECURE                       0x0
#define G2SB_CTX5_G2CLIPRIGHTBOT_0_WORD_COUNT                   0x1
#define G2SB_CTX5_G2CLIPRIGHTBOT_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLIPRIGHTBOT_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLIPRIGHTBOT_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLIPRIGHTBOT_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLIPRIGHTBOT_0_READ_MASK                    _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX5_G2CLIPRIGHTBOT_0_WRITE_MASK                   _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX5_G2CLIPRIGHTBOT_0_CLIPR_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2CLIPRIGHTBOT_0_CLIPR_FIELD                  (_MK_MASK_CONST(0x7fff) << G2SB_CTX5_G2CLIPRIGHTBOT_0_CLIPR_SHIFT)
#define G2SB_CTX5_G2CLIPRIGHTBOT_0_CLIPR_RANGE                  14:0
#define G2SB_CTX5_G2CLIPRIGHTBOT_0_CLIPR_WOFFSET                        0x0
#define G2SB_CTX5_G2CLIPRIGHTBOT_0_CLIPR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLIPRIGHTBOT_0_CLIPR_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLIPRIGHTBOT_0_CLIPR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLIPRIGHTBOT_0_CLIPR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX5_G2CLIPRIGHTBOT_0_CLIPB_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX5_G2CLIPRIGHTBOT_0_CLIPB_FIELD                  (_MK_MASK_CONST(0x7fff) << G2SB_CTX5_G2CLIPRIGHTBOT_0_CLIPB_SHIFT)
#define G2SB_CTX5_G2CLIPRIGHTBOT_0_CLIPB_RANGE                  30:16
#define G2SB_CTX5_G2CLIPRIGHTBOT_0_CLIPB_WOFFSET                        0x0
#define G2SB_CTX5_G2CLIPRIGHTBOT_0_CLIPB_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLIPRIGHTBOT_0_CLIPB_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLIPRIGHTBOT_0_CLIPB_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CLIPRIGHTBOT_0_CLIPB_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//pattern methods
// G2PATPACK should be used to specify the line gap
// use G2PATPACK_SIZE to program height and width
//  PACK is generally only useful with narrow monochrome surfaces
//  Note, PACK is not offically supported when the surface is tiled.

// Register G2SB_CTX5_G2PATPACK_0  //{2d,index=24} Pattern packed mode
#define G2SB_CTX5_G2PATPACK_0                   _MK_ADDR_CONST(0x2024)
#define G2SB_CTX5_G2PATPACK_0_SECURE                    0x0
#define G2SB_CTX5_G2PATPACK_0_WORD_COUNT                        0x1
#define G2SB_CTX5_G2PATPACK_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATPACK_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATPACK_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATPACK_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATPACK_0_READ_MASK                         _MK_MASK_CONST(0xf)
#define G2SB_CTX5_G2PATPACK_0_WRITE_MASK                        _MK_MASK_CONST(0xf)
// Packed mode, pattern data line gap. byte
#define G2SB_CTX5_G2PATPACK_0_PATLNGAP_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2PATPACK_0_PATLNGAP_FIELD                    (_MK_MASK_CONST(0xf) << G2SB_CTX5_G2PATPACK_0_PATLNGAP_SHIFT)
#define G2SB_CTX5_G2PATPACK_0_PATLNGAP_RANGE                    3:0
#define G2SB_CTX5_G2PATPACK_0_PATLNGAP_WOFFSET                  0x0
#define G2SB_CTX5_G2PATPACK_0_PATLNGAP_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATPACK_0_PATLNGAP_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATPACK_0_PATLNGAP_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATPACK_0_PATLNGAP_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// G2PATPACK_SIZE -- extension of G2PATPACK, this register only holds the size of the packed data
//  Note, PACK is not offically supported when the surface is tiled.

// Register G2SB_CTX5_G2PATPACK_SIZE_0  //{2d,index=25} Pattern packed mode
// Packed mode, pattern data line gap. byte
#define G2SB_CTX5_G2PATPACK_SIZE_0                      _MK_ADDR_CONST(0x2025)
#define G2SB_CTX5_G2PATPACK_SIZE_0_SECURE                       0x0
#define G2SB_CTX5_G2PATPACK_SIZE_0_WORD_COUNT                   0x1
#define G2SB_CTX5_G2PATPACK_SIZE_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATPACK_SIZE_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATPACK_SIZE_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATPACK_SIZE_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATPACK_SIZE_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2PATPACK_SIZE_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
// Mono data width in packed mode, byte
#define G2SB_CTX5_G2PATPACK_SIZE_0_PATMONOW_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2PATPACK_SIZE_0_PATMONOW_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_CTX5_G2PATPACK_SIZE_0_PATMONOW_SHIFT)
#define G2SB_CTX5_G2PATPACK_SIZE_0_PATMONOW_RANGE                       15:0
#define G2SB_CTX5_G2PATPACK_SIZE_0_PATMONOW_WOFFSET                     0x0
#define G2SB_CTX5_G2PATPACK_SIZE_0_PATMONOW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATPACK_SIZE_0_PATMONOW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATPACK_SIZE_0_PATMONOW_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATPACK_SIZE_0_PATMONOW_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//  Pattern mono data height in packed mode, byte
#define G2SB_CTX5_G2PATPACK_SIZE_0_PATMONOH_SHIFT                       _MK_SHIFT_CONST(16)
#define G2SB_CTX5_G2PATPACK_SIZE_0_PATMONOH_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_CTX5_G2PATPACK_SIZE_0_PATMONOH_SHIFT)
#define G2SB_CTX5_G2PATPACK_SIZE_0_PATMONOH_RANGE                       31:16
#define G2SB_CTX5_G2PATPACK_SIZE_0_PATMONOH_WOFFSET                     0x0
#define G2SB_CTX5_G2PATPACK_SIZE_0_PATMONOH_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATPACK_SIZE_0_PATMONOH_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATPACK_SIZE_0_PATMONOH_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATPACK_SIZE_0_PATMONOH_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2PATBA_0  //{2d,index=26}
#define G2SB_CTX5_G2PATBA_0                     _MK_ADDR_CONST(0x2026)
#define G2SB_CTX5_G2PATBA_0_SECURE                      0x0
#define G2SB_CTX5_G2PATBA_0_WORD_COUNT                  0x1
#define G2SB_CTX5_G2PATBA_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATBA_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATBA_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATBA_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATBA_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2PATBA_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// If(PATFL==1){
//   It has to be 16bytes aligned.
// }else{
//   Point to the first byte of the first pixel of pattern plane.
// }
#define G2SB_CTX5_G2PATBA_0_PATBA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2PATBA_0_PATBA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX5_G2PATBA_0_PATBA_SHIFT)
#define G2SB_CTX5_G2PATBA_0_PATBA_RANGE                 31:0
#define G2SB_CTX5_G2PATBA_0_PATBA_WOFFSET                       0x0
#define G2SB_CTX5_G2PATBA_0_PATBA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATBA_0_PATBA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATBA_0_PATBA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATBA_0_PATBA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2PATOS_0  //{2d,index=27}
#define G2SB_CTX5_G2PATOS_0                     _MK_ADDR_CONST(0x2027)
#define G2SB_CTX5_G2PATOS_0_SECURE                      0x0
#define G2SB_CTX5_G2PATOS_0_WORD_COUNT                  0x1
#define G2SB_CTX5_G2PATOS_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATOS_0_RESET_MASK                  _MK_MASK_CONST(0x600000)
#define G2SB_CTX5_G2PATOS_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATOS_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATOS_0_READ_MASK                   _MK_MASK_CONST(0xff61ffff)
#define G2SB_CTX5_G2PATOS_0_WRITE_MASK                  _MK_MASK_CONST(0xff61ffff)
//stride
#define G2SB_CTX5_G2PATOS_0_PATST_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2PATOS_0_PATST_FIELD                 (_MK_MASK_CONST(0xffff) << G2SB_CTX5_G2PATOS_0_PATST_SHIFT)
#define G2SB_CTX5_G2PATOS_0_PATST_RANGE                 15:0
#define G2SB_CTX5_G2PATOS_0_PATST_WOFFSET                       0x0
#define G2SB_CTX5_G2PATOS_0_PATST_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATOS_0_PATST_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATOS_0_PATST_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATOS_0_PATST_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//0 mono
//1 same as dstcd
//  PATCD==0 xdir/ydir has to be 0
#define G2SB_CTX5_G2PATOS_0_PATCD_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_CTX5_G2PATOS_0_PATCD_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2PATOS_0_PATCD_SHIFT)
#define G2SB_CTX5_G2PATOS_0_PATCD_RANGE                 16:16
#define G2SB_CTX5_G2PATOS_0_PATCD_WOFFSET                       0x0
#define G2SB_CTX5_G2PATOS_0_PATCD_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATOS_0_PATCD_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATOS_0_PATCD_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATOS_0_PATCD_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Mono pattern transparency enable:
// 0x=pattern transparency disabled,
// 10=mono pattern background transparency
//   or color pattern transparency,
// 11=mono pattern foreground transparency
//   or inverse color pattern transparency.
// NOTE: When pattern transparency is enabled and PATCD==0(mono)
//       PATBGC!=PATFGC should be satisfied.
#define G2SB_CTX5_G2PATOS_0_PATT_SHIFT                  _MK_SHIFT_CONST(21)
#define G2SB_CTX5_G2PATOS_0_PATT_FIELD                  (_MK_MASK_CONST(0x3) << G2SB_CTX5_G2PATOS_0_PATT_SHIFT)
#define G2SB_CTX5_G2PATOS_0_PATT_RANGE                  22:21
#define G2SB_CTX5_G2PATOS_0_PATT_WOFFSET                        0x0
#define G2SB_CTX5_G2PATOS_0_PATT_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATOS_0_PATT_DEFAULT_MASK                   _MK_MASK_CONST(0x3)
#define G2SB_CTX5_G2PATOS_0_PATT_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATOS_0_PATT_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//x offset for mono tile pattern fill.  see PATFL
#define G2SB_CTX5_G2PATOS_0_PATXO_SHIFT                 _MK_SHIFT_CONST(24)
#define G2SB_CTX5_G2PATOS_0_PATXO_FIELD                 (_MK_MASK_CONST(0xf) << G2SB_CTX5_G2PATOS_0_PATXO_SHIFT)
#define G2SB_CTX5_G2PATOS_0_PATXO_RANGE                 27:24
#define G2SB_CTX5_G2PATOS_0_PATXO_WOFFSET                       0x0
#define G2SB_CTX5_G2PATOS_0_PATXO_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATOS_0_PATXO_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATOS_0_PATXO_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATOS_0_PATXO_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//y offset for mono tile pattern fill.  see PATFL
#define G2SB_CTX5_G2PATOS_0_PATYO_SHIFT                 _MK_SHIFT_CONST(28)
#define G2SB_CTX5_G2PATOS_0_PATYO_FIELD                 (_MK_MASK_CONST(0xf) << G2SB_CTX5_G2PATOS_0_PATYO_SHIFT)
#define G2SB_CTX5_G2PATOS_0_PATYO_RANGE                 31:28
#define G2SB_CTX5_G2PATOS_0_PATYO_WOFFSET                       0x0
#define G2SB_CTX5_G2PATOS_0_PATYO_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATOS_0_PATYO_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATOS_0_PATYO_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATOS_0_PATYO_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2PATBGC_0  //{2d,index=28}
#define G2SB_CTX5_G2PATBGC_0                    _MK_ADDR_CONST(0x2028)
#define G2SB_CTX5_G2PATBGC_0_SECURE                     0x0
#define G2SB_CTX5_G2PATBGC_0_WORD_COUNT                         0x1
#define G2SB_CTX5_G2PATBGC_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATBGC_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATBGC_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATBGC_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATBGC_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2PATBGC_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2PATBGC_0_PATBGC_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2PATBGC_0_PATBGC_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX5_G2PATBGC_0_PATBGC_SHIFT)
#define G2SB_CTX5_G2PATBGC_0_PATBGC_RANGE                       31:0
#define G2SB_CTX5_G2PATBGC_0_PATBGC_WOFFSET                     0x0
#define G2SB_CTX5_G2PATBGC_0_PATBGC_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATBGC_0_PATBGC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATBGC_0_PATBGC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATBGC_0_PATBGC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2PATFGC_0  //{2d,index=29}
#define G2SB_CTX5_G2PATFGC_0                    _MK_ADDR_CONST(0x2029)
#define G2SB_CTX5_G2PATFGC_0_SECURE                     0x0
#define G2SB_CTX5_G2PATFGC_0_WORD_COUNT                         0x1
#define G2SB_CTX5_G2PATFGC_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATFGC_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATFGC_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATFGC_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATFGC_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2PATFGC_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2PATFGC_0_PATFGC_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2PATFGC_0_PATFGC_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX5_G2PATFGC_0_PATFGC_SHIFT)
#define G2SB_CTX5_G2PATFGC_0_PATFGC_RANGE                       31:0
#define G2SB_CTX5_G2PATFGC_0_PATFGC_WOFFSET                     0x0
#define G2SB_CTX5_G2PATFGC_0_PATFGC_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATFGC_0_PATFGC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATFGC_0_PATFGC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATFGC_0_PATFGC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2PATKEY_0  //{2d,index=2a}
#define G2SB_CTX5_G2PATKEY_0                    _MK_ADDR_CONST(0x202a)
#define G2SB_CTX5_G2PATKEY_0_SECURE                     0x0
#define G2SB_CTX5_G2PATKEY_0_WORD_COUNT                         0x1
#define G2SB_CTX5_G2PATKEY_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATKEY_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATKEY_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATKEY_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATKEY_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2PATKEY_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2PATKEY_0_PATKEY_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2PATKEY_0_PATKEY_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX5_G2PATKEY_0_PATKEY_SHIFT)
#define G2SB_CTX5_G2PATKEY_0_PATKEY_RANGE                       31:0
#define G2SB_CTX5_G2PATKEY_0_PATKEY_WOFFSET                     0x0
#define G2SB_CTX5_G2PATKEY_0_PATKEY_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATKEY_0_PATKEY_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATKEY_0_PATKEY_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATKEY_0_PATKEY_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2DSTBA_0  //{host,2d,sb,index=2b}
#define G2SB_CTX5_G2DSTBA_0                     _MK_ADDR_CONST(0x202b)
#define G2SB_CTX5_G2DSTBA_0_SECURE                      0x0
#define G2SB_CTX5_G2DSTBA_0_WORD_COUNT                  0x1
#define G2SB_CTX5_G2DSTBA_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2DSTBA_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Destination base address (byte address)
#define G2SB_CTX5_G2DSTBA_0_DSTBA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2DSTBA_0_DSTBA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX5_G2DSTBA_0_DSTBA_SHIFT)
#define G2SB_CTX5_G2DSTBA_0_DSTBA_RANGE                 31:0
#define G2SB_CTX5_G2DSTBA_0_DSTBA_WOFFSET                       0x0
#define G2SB_CTX5_G2DSTBA_0_DSTBA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_0_DSTBA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_0_DSTBA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_0_DSTBA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2DSTBA_B_0  //{host,2d,sb,index=2c}
#define G2SB_CTX5_G2DSTBA_B_0                   _MK_ADDR_CONST(0x202c)
#define G2SB_CTX5_G2DSTBA_B_0_SECURE                    0x0
#define G2SB_CTX5_G2DSTBA_B_0_WORD_COUNT                        0x1
#define G2SB_CTX5_G2DSTBA_B_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_B_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_B_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_B_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_B_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2DSTBA_B_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// Destination base address (byte address)
// only usable in hardware trigger mode by enable gcsw
#define G2SB_CTX5_G2DSTBA_B_0_DSTBA_B_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2DSTBA_B_0_DSTBA_B_FIELD                     (_MK_MASK_CONST(0xffffffff) << G2SB_CTX5_G2DSTBA_B_0_DSTBA_B_SHIFT)
#define G2SB_CTX5_G2DSTBA_B_0_DSTBA_B_RANGE                     31:0
#define G2SB_CTX5_G2DSTBA_B_0_DSTBA_B_WOFFSET                   0x0
#define G2SB_CTX5_G2DSTBA_B_0_DSTBA_B_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_B_0_DSTBA_B_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_B_0_DSTBA_B_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_B_0_DSTBA_B_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2DSTBA_C_0  //{2d,sb,index=2d}
#define G2SB_CTX5_G2DSTBA_C_0                   _MK_ADDR_CONST(0x202d)
#define G2SB_CTX5_G2DSTBA_C_0_SECURE                    0x0
#define G2SB_CTX5_G2DSTBA_C_0_WORD_COUNT                        0x1
#define G2SB_CTX5_G2DSTBA_C_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_C_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_C_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_C_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_C_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2DSTBA_C_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// Destination base address (byte address)
#define G2SB_CTX5_G2DSTBA_C_0_DSTBA_C_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2DSTBA_C_0_DSTBA_C_FIELD                     (_MK_MASK_CONST(0xffffffff) << G2SB_CTX5_G2DSTBA_C_0_DSTBA_C_SHIFT)
#define G2SB_CTX5_G2DSTBA_C_0_DSTBA_C_RANGE                     31:0
#define G2SB_CTX5_G2DSTBA_C_0_DSTBA_C_WOFFSET                   0x0
#define G2SB_CTX5_G2DSTBA_C_0_DSTBA_C_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_C_0_DSTBA_C_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_C_0_DSTBA_C_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_C_0_DSTBA_C_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2DSTST_0  //{host,2d,sb,sbm,index=2e}
#define G2SB_CTX5_G2DSTST_0                     _MK_ADDR_CONST(0x202e)
#define G2SB_CTX5_G2DSTST_0_SECURE                      0x0
#define G2SB_CTX5_G2DSTST_0_WORD_COUNT                  0x1
#define G2SB_CTX5_G2DSTST_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTST_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTST_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTST_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTST_0_READ_MASK                   _MK_MASK_CONST(0xffff)
#define G2SB_CTX5_G2DSTST_0_WRITE_MASK                  _MK_MASK_CONST(0xffff)
// Destination Stride coordinate(bytes) with respect to DSTBA.
#define G2SB_CTX5_G2DSTST_0_DSTS_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2DSTST_0_DSTS_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX5_G2DSTST_0_DSTS_SHIFT)
#define G2SB_CTX5_G2DSTST_0_DSTS_RANGE                  15:0
#define G2SB_CTX5_G2DSTST_0_DSTS_WOFFSET                        0x0
#define G2SB_CTX5_G2DSTST_0_DSTS_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTST_0_DSTS_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTST_0_DSTS_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTST_0_DSTS_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Surface methods
// G2SRCPACK should only be used to specify the line gap
// use G2SRCPACK_SIZE to program height and width

// Register G2SB_CTX5_G2SRCPACK_0  //{2d,index=2f} source data packed mode
#define G2SB_CTX5_G2SRCPACK_0                   _MK_ADDR_CONST(0x202f)
#define G2SB_CTX5_G2SRCPACK_0_SECURE                    0x0
#define G2SB_CTX5_G2SRCPACK_0_WORD_COUNT                        0x1
#define G2SB_CTX5_G2SRCPACK_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCPACK_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCPACK_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCPACK_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCPACK_0_READ_MASK                         _MK_MASK_CONST(0xf)
#define G2SB_CTX5_G2SRCPACK_0_WRITE_MASK                        _MK_MASK_CONST(0xf)
// Packed mode - source mono data line gap
#define G2SB_CTX5_G2SRCPACK_0_SRCLNGAP_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2SRCPACK_0_SRCLNGAP_FIELD                    (_MK_MASK_CONST(0xf) << G2SB_CTX5_G2SRCPACK_0_SRCLNGAP_SHIFT)
#define G2SB_CTX5_G2SRCPACK_0_SRCLNGAP_RANGE                    3:0
#define G2SB_CTX5_G2SRCPACK_0_SRCLNGAP_WOFFSET                  0x0
#define G2SB_CTX5_G2SRCPACK_0_SRCLNGAP_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCPACK_0_SRCLNGAP_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCPACK_0_SRCLNGAP_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCPACK_0_SRCLNGAP_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// G2SRCPACKS_SIZE -- extension of G2SRCPACK, this register only holds the size of the packed data

// Register G2SB_CTX5_G2SRCPACK_SIZE_0  //{2d,index=30} source data packed mode
// In packed mode, SRCMONOW holds the horizontal size (bytes).
// If MONOH > 1, it is required width/stride be 16 byte aligned.
// Packed mode - source mono data line gap
#define G2SB_CTX5_G2SRCPACK_SIZE_0                      _MK_ADDR_CONST(0x2030)
#define G2SB_CTX5_G2SRCPACK_SIZE_0_SECURE                       0x0
#define G2SB_CTX5_G2SRCPACK_SIZE_0_WORD_COUNT                   0x1
#define G2SB_CTX5_G2SRCPACK_SIZE_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCPACK_SIZE_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCPACK_SIZE_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCPACK_SIZE_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCPACK_SIZE_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2SRCPACK_SIZE_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
// Packed mode - source mono data width in bytes
#define G2SB_CTX5_G2SRCPACK_SIZE_0_SRCMONOW_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2SRCPACK_SIZE_0_SRCMONOW_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_CTX5_G2SRCPACK_SIZE_0_SRCMONOW_SHIFT)
#define G2SB_CTX5_G2SRCPACK_SIZE_0_SRCMONOW_RANGE                       15:0
#define G2SB_CTX5_G2SRCPACK_SIZE_0_SRCMONOW_WOFFSET                     0x0
#define G2SB_CTX5_G2SRCPACK_SIZE_0_SRCMONOW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCPACK_SIZE_0_SRCMONOW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCPACK_SIZE_0_SRCMONOW_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCPACK_SIZE_0_SRCMONOW_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Packed mode - source mono data height in bytes
#define G2SB_CTX5_G2SRCPACK_SIZE_0_SRCMONOH_SHIFT                       _MK_SHIFT_CONST(16)
#define G2SB_CTX5_G2SRCPACK_SIZE_0_SRCMONOH_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_CTX5_G2SRCPACK_SIZE_0_SRCMONOH_SHIFT)
#define G2SB_CTX5_G2SRCPACK_SIZE_0_SRCMONOH_RANGE                       31:16
#define G2SB_CTX5_G2SRCPACK_SIZE_0_SRCMONOH_WOFFSET                     0x0
#define G2SB_CTX5_G2SRCPACK_SIZE_0_SRCMONOH_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCPACK_SIZE_0_SRCMONOH_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCPACK_SIZE_0_SRCMONOH_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCPACK_SIZE_0_SRCMONOH_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2SRCBA_0  //{host,2d,sb,index=31}
//src base address
#define G2SB_CTX5_G2SRCBA_0                     _MK_ADDR_CONST(0x2031)
#define G2SB_CTX5_G2SRCBA_0_SECURE                      0x0
#define G2SB_CTX5_G2SRCBA_0_WORD_COUNT                  0x1
#define G2SB_CTX5_G2SRCBA_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCBA_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCBA_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCBA_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCBA_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2SRCBA_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Source base address (byte address)
#define G2SB_CTX5_G2SRCBA_0_SRCBA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2SRCBA_0_SRCBA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX5_G2SRCBA_0_SRCBA_SHIFT)
#define G2SB_CTX5_G2SRCBA_0_SRCBA_RANGE                 31:0
#define G2SB_CTX5_G2SRCBA_0_SRCBA_WOFFSET                       0x0
#define G2SB_CTX5_G2SRCBA_0_SRCBA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCBA_0_SRCBA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCBA_0_SRCBA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCBA_0_SRCBA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2SRCBA_B_0  //{2d,sb,index=32}
//SB only
#define G2SB_CTX5_G2SRCBA_B_0                   _MK_ADDR_CONST(0x2032)
#define G2SB_CTX5_G2SRCBA_B_0_SECURE                    0x0
#define G2SB_CTX5_G2SRCBA_B_0_WORD_COUNT                        0x1
#define G2SB_CTX5_G2SRCBA_B_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCBA_B_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCBA_B_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCBA_B_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCBA_B_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2SRCBA_B_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
//This parameter specifies the start address of source image
// stored in the image buffer memory. In 4:2:0
//format mode, this image block accommodates for Y-image.
//This address specifies byte-position, however, bits [2:0]
// are restricted with respect to the data formats to fit
//multiple pixels in one memory word (8 bytes),. For example,
// {0, 4} for any YcrCb formats, {0, 2, 4, 6} for
//RGB 16-bit format.  Since one Y pixel takes 8-bit, all
// 8 byte-positions are valid in 4:2:0 mode. (Unlike
//multiplexed pixels format, there is no restrictions on this value.)
#define G2SB_CTX5_G2SRCBA_B_0_SRCBA_B_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2SRCBA_B_0_SRCBA_B_FIELD                     (_MK_MASK_CONST(0xffffffff) << G2SB_CTX5_G2SRCBA_B_0_SRCBA_B_SHIFT)
#define G2SB_CTX5_G2SRCBA_B_0_SRCBA_B_RANGE                     31:0
#define G2SB_CTX5_G2SRCBA_B_0_SRCBA_B_WOFFSET                   0x0
#define G2SB_CTX5_G2SRCBA_B_0_SRCBA_B_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCBA_B_0_SRCBA_B_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCBA_B_0_SRCBA_B_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCBA_B_0_SRCBA_B_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2SRCST_0  //{host,2d,sb,sbm,index=33}
#define G2SB_CTX5_G2SRCST_0                     _MK_ADDR_CONST(0x2033)
#define G2SB_CTX5_G2SRCST_0_SECURE                      0x0
#define G2SB_CTX5_G2SRCST_0_WORD_COUNT                  0x1
#define G2SB_CTX5_G2SRCST_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCST_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCST_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCST_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCST_0_READ_MASK                   _MK_MASK_CONST(0xffff)
#define G2SB_CTX5_G2SRCST_0_WRITE_MASK                  _MK_MASK_CONST(0xffff)
// Source Stride coordinate(bytes) with respect to SRCBA.
//In order to fit multiple pixels in one memory word (8 bytes),
//  bits [2:0] are restricted with respect to the
//data formats. For example, {0, 4} for any YcrCb formats,
//  {0, 2, 4, 6} for RGB 16-bit format.
#define G2SB_CTX5_G2SRCST_0_SRCS_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2SRCST_0_SRCS_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX5_G2SRCST_0_SRCS_SHIFT)
#define G2SB_CTX5_G2SRCST_0_SRCS_RANGE                  15:0
#define G2SB_CTX5_G2SRCST_0_SRCS_WOFFSET                        0x0
#define G2SB_CTX5_G2SRCST_0_SRCS_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCST_0_SRCS_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCST_0_SRCS_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCST_0_SRCS_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//srcColors

// Register G2SB_CTX5_G2SRCBGC_0  //{2d,index=34}
#define G2SB_CTX5_G2SRCBGC_0                    _MK_ADDR_CONST(0x2034)
#define G2SB_CTX5_G2SRCBGC_0_SECURE                     0x0
#define G2SB_CTX5_G2SRCBGC_0_WORD_COUNT                         0x1
#define G2SB_CTX5_G2SRCBGC_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCBGC_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCBGC_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCBGC_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCBGC_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2SRCBGC_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2SRCBGC_0_SRCBGC_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2SRCBGC_0_SRCBGC_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX5_G2SRCBGC_0_SRCBGC_SHIFT)
#define G2SB_CTX5_G2SRCBGC_0_SRCBGC_RANGE                       31:0
#define G2SB_CTX5_G2SRCBGC_0_SRCBGC_WOFFSET                     0x0
#define G2SB_CTX5_G2SRCBGC_0_SRCBGC_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCBGC_0_SRCBGC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCBGC_0_SRCBGC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCBGC_0_SRCBGC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2SRCFGC_0  //{host,2d,index=35}
#define G2SB_CTX5_G2SRCFGC_0                    _MK_ADDR_CONST(0x2035)
#define G2SB_CTX5_G2SRCFGC_0_SECURE                     0x0
#define G2SB_CTX5_G2SRCFGC_0_WORD_COUNT                         0x1
#define G2SB_CTX5_G2SRCFGC_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCFGC_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCFGC_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCFGC_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCFGC_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2SRCFGC_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2SRCFGC_0_SRCFGC_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2SRCFGC_0_SRCFGC_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX5_G2SRCFGC_0_SRCFGC_SHIFT)
#define G2SB_CTX5_G2SRCFGC_0_SRCFGC_RANGE                       31:0
#define G2SB_CTX5_G2SRCFGC_0_SRCFGC_WOFFSET                     0x0
#define G2SB_CTX5_G2SRCFGC_0_SRCFGC_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCFGC_0_SRCFGC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCFGC_0_SRCFGC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCFGC_0_SRCFGC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2SRCKEY_0  //{2d,index=36}
#define G2SB_CTX5_G2SRCKEY_0                    _MK_ADDR_CONST(0x2036)
#define G2SB_CTX5_G2SRCKEY_0_SECURE                     0x0
#define G2SB_CTX5_G2SRCKEY_0_WORD_COUNT                         0x1
#define G2SB_CTX5_G2SRCKEY_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCKEY_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCKEY_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCKEY_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCKEY_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2SRCKEY_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2SRCKEY_0_SRCKEY_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2SRCKEY_0_SRCKEY_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX5_G2SRCKEY_0_SRCKEY_SHIFT)
#define G2SB_CTX5_G2SRCKEY_0_SRCKEY_RANGE                       31:0
#define G2SB_CTX5_G2SRCKEY_0_SRCKEY_WOFFSET                     0x0
#define G2SB_CTX5_G2SRCKEY_0_SRCKEY_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCKEY_0_SRCKEY_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCKEY_0_SRCKEY_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCKEY_0_SRCKEY_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// for sc15, SRCWIDTH bit 14 must be set to 0. (limit of 16383 pixels)

// Register G2SB_CTX5_G2SRCSIZE_0  //{host,2d,sb,sbm,index=37}
#define G2SB_CTX5_G2SRCSIZE_0                   _MK_ADDR_CONST(0x2037)
#define G2SB_CTX5_G2SRCSIZE_0_SECURE                    0x0
#define G2SB_CTX5_G2SRCSIZE_0_WORD_COUNT                        0x1
#define G2SB_CTX5_G2SRCSIZE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCSIZE_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCSIZE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCSIZE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCSIZE_0_READ_MASK                         _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX5_G2SRCSIZE_0_WRITE_MASK                        _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX5_G2SRCSIZE_0_SRCWIDTH_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2SRCSIZE_0_SRCWIDTH_FIELD                    (_MK_MASK_CONST(0x7fff) << G2SB_CTX5_G2SRCSIZE_0_SRCWIDTH_SHIFT)
#define G2SB_CTX5_G2SRCSIZE_0_SRCWIDTH_RANGE                    14:0
#define G2SB_CTX5_G2SRCSIZE_0_SRCWIDTH_WOFFSET                  0x0
#define G2SB_CTX5_G2SRCSIZE_0_SRCWIDTH_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCSIZE_0_SRCWIDTH_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCSIZE_0_SRCWIDTH_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCSIZE_0_SRCWIDTH_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// In SB mode, number of lines - 1
// In 2D mode, actual lines
#define G2SB_CTX5_G2SRCSIZE_0_SRCHEIGHT_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX5_G2SRCSIZE_0_SRCHEIGHT_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX5_G2SRCSIZE_0_SRCHEIGHT_SHIFT)
#define G2SB_CTX5_G2SRCSIZE_0_SRCHEIGHT_RANGE                   30:16
#define G2SB_CTX5_G2SRCSIZE_0_SRCHEIGHT_WOFFSET                 0x0
#define G2SB_CTX5_G2SRCSIZE_0_SRCHEIGHT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCSIZE_0_SRCHEIGHT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCSIZE_0_SRCHEIGHT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCSIZE_0_SRCHEIGHT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2DSTSIZE_0  //{host,2d,sb,sbm,index=38}
#define G2SB_CTX5_G2DSTSIZE_0                   _MK_ADDR_CONST(0x2038)
#define G2SB_CTX5_G2DSTSIZE_0_SECURE                    0x0
#define G2SB_CTX5_G2DSTSIZE_0_WORD_COUNT                        0x1
#define G2SB_CTX5_G2DSTSIZE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTSIZE_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTSIZE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTSIZE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTSIZE_0_READ_MASK                         _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX5_G2DSTSIZE_0_WRITE_MASK                        _MK_MASK_CONST(0x7fff7fff)
// In 2D mode, the largest number can be programmed is 0x7fef
#define G2SB_CTX5_G2DSTSIZE_0_DSTWIDTH_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2DSTSIZE_0_DSTWIDTH_FIELD                    (_MK_MASK_CONST(0x7fff) << G2SB_CTX5_G2DSTSIZE_0_DSTWIDTH_SHIFT)
#define G2SB_CTX5_G2DSTSIZE_0_DSTWIDTH_RANGE                    14:0
#define G2SB_CTX5_G2DSTSIZE_0_DSTWIDTH_WOFFSET                  0x0
#define G2SB_CTX5_G2DSTSIZE_0_DSTWIDTH_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTSIZE_0_DSTWIDTH_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTSIZE_0_DSTWIDTH_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTSIZE_0_DSTWIDTH_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// In SB mode, number of lines - 1
// In 2D mode, actual lines
#define G2SB_CTX5_G2DSTSIZE_0_DSTHEIGHT_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX5_G2DSTSIZE_0_DSTHEIGHT_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX5_G2DSTSIZE_0_DSTHEIGHT_SHIFT)
#define G2SB_CTX5_G2DSTSIZE_0_DSTHEIGHT_RANGE                   30:16
#define G2SB_CTX5_G2DSTSIZE_0_DSTHEIGHT_WOFFSET                 0x0
#define G2SB_CTX5_G2DSTSIZE_0_DSTHEIGHT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTSIZE_0_DSTHEIGHT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTSIZE_0_DSTHEIGHT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTSIZE_0_DSTHEIGHT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// ImageBlit Methods

// Register G2SB_CTX5_G2SRCPS_0  //{host,2d,index=39}
#define G2SB_CTX5_G2SRCPS_0                     _MK_ADDR_CONST(0x2039)
#define G2SB_CTX5_G2SRCPS_0_SECURE                      0x0
#define G2SB_CTX5_G2SRCPS_0_WORD_COUNT                  0x1
#define G2SB_CTX5_G2SRCPS_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCPS_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCPS_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCPS_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCPS_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2SRCPS_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
//SRCX[2:0] are ignored in SRCCD==0 (mono expansion),
//The first bit of the first byte (bit7 if HLMONO==0, or bit0 if HLMONO==1) always
//expand to DSTX,DSTY
#define G2SB_CTX5_G2SRCPS_0_SRCX_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2SRCPS_0_SRCX_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX5_G2SRCPS_0_SRCX_SHIFT)
#define G2SB_CTX5_G2SRCPS_0_SRCX_RANGE                  15:0
#define G2SB_CTX5_G2SRCPS_0_SRCX_WOFFSET                        0x0
#define G2SB_CTX5_G2SRCPS_0_SRCX_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCPS_0_SRCX_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCPS_0_SRCX_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCPS_0_SRCX_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX5_G2SRCPS_0_SRCY_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX5_G2SRCPS_0_SRCY_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX5_G2SRCPS_0_SRCY_SHIFT)
#define G2SB_CTX5_G2SRCPS_0_SRCY_RANGE                  31:16
#define G2SB_CTX5_G2SRCPS_0_SRCY_WOFFSET                        0x0
#define G2SB_CTX5_G2SRCPS_0_SRCY_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCPS_0_SRCY_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCPS_0_SRCY_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCPS_0_SRCY_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2DSTPS_0  //{host,2d,index=3a}
#define G2SB_CTX5_G2DSTPS_0                     _MK_ADDR_CONST(0x203a)
#define G2SB_CTX5_G2DSTPS_0_SECURE                      0x0
#define G2SB_CTX5_G2DSTPS_0_WORD_COUNT                  0x1
#define G2SB_CTX5_G2DSTPS_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTPS_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTPS_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTPS_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTPS_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2DSTPS_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// NOTE: when ALPTYPE is PL1BPP, DSTX[2:0] must be zero, see bug 344489
// NOTE: when ALPTYPE is PL2BPP, DSTX[1:0] must be zero, see bug 344489
// NOTE: when ALPTYPE is PL4BPP, DSTX[0:0] must be zero, see bug 344489
#define G2SB_CTX5_G2DSTPS_0_DSTX_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2DSTPS_0_DSTX_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX5_G2DSTPS_0_DSTX_SHIFT)
#define G2SB_CTX5_G2DSTPS_0_DSTX_RANGE                  15:0
#define G2SB_CTX5_G2DSTPS_0_DSTX_WOFFSET                        0x0
#define G2SB_CTX5_G2DSTPS_0_DSTX_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTPS_0_DSTX_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTPS_0_DSTX_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTPS_0_DSTX_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX5_G2DSTPS_0_DSTY_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX5_G2DSTPS_0_DSTY_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX5_G2DSTPS_0_DSTY_SHIFT)
#define G2SB_CTX5_G2DSTPS_0_DSTY_RANGE                  31:16
#define G2SB_CTX5_G2DSTPS_0_DSTY_WOFFSET                        0x0
#define G2SB_CTX5_G2DSTPS_0_DSTY_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTPS_0_DSTY_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTPS_0_DSTY_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTPS_0_DSTY_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// circular buffer

// Register G2SB_CTX5_G2CBDES_0  // {host,2d,sb,index=3b}
#define G2SB_CTX5_G2CBDES_0                     _MK_ADDR_CONST(0x203b)
#define G2SB_CTX5_G2CBDES_0_SECURE                      0x0
#define G2SB_CTX5_G2CBDES_0_WORD_COUNT                  0x1
#define G2SB_CTX5_G2CBDES_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBDES_0_RESET_MASK                  _MK_MASK_CONST(0x80000000)
#define G2SB_CTX5_G2CBDES_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBDES_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBDES_0_READ_MASK                   _MK_MASK_CONST(0xffff00ff)
#define G2SB_CTX5_G2CBDES_0_WRITE_MASK                  _MK_MASK_CONST(0xffff00ff)
// This specifies the number of buffers in
//circular buffer feature
#define G2SB_CTX5_G2CBDES_0_CBCOUNT_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2CBDES_0_CBCOUNT_FIELD                       (_MK_MASK_CONST(0xff) << G2SB_CTX5_G2CBDES_0_CBCOUNT_SHIFT)
#define G2SB_CTX5_G2CBDES_0_CBCOUNT_RANGE                       7:0
#define G2SB_CTX5_G2CBDES_0_CBCOUNT_WOFFSET                     0x0
#define G2SB_CTX5_G2CBDES_0_CBCOUNT_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBDES_0_CBCOUNT_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBDES_0_CBCOUNT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBDES_0_CBCOUNT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//vertical line number in one buffer
#define G2SB_CTX5_G2CBDES_0_CBLINE_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_CTX5_G2CBDES_0_CBLINE_FIELD                        (_MK_MASK_CONST(0x7fff) << G2SB_CTX5_G2CBDES_0_CBLINE_SHIFT)
#define G2SB_CTX5_G2CBDES_0_CBLINE_RANGE                        30:16
#define G2SB_CTX5_G2CBDES_0_CBLINE_WOFFSET                      0x0
#define G2SB_CTX5_G2CBDES_0_CBLINE_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBDES_0_CBLINE_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBDES_0_CBLINE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBDES_0_CBLINE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

//top clipping at the first buffer, (buffer start)
// refer to TOP_CBLINE in G2CBDES2 0= disable
#define G2SB_CTX5_G2CBDES_0_TOPCLIP_SHIFT                       _MK_SHIFT_CONST(31)
#define G2SB_CTX5_G2CBDES_0_TOPCLIP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2CBDES_0_TOPCLIP_SHIFT)
#define G2SB_CTX5_G2CBDES_0_TOPCLIP_RANGE                       31:31
#define G2SB_CTX5_G2CBDES_0_TOPCLIP_WOFFSET                     0x0
#define G2SB_CTX5_G2CBDES_0_TOPCLIP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBDES_0_TOPCLIP_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2CBDES_0_TOPCLIP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBDES_0_TOPCLIP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBDES_0_TOPCLIP_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CBDES_0_TOPCLIP_ENABLE                      _MK_ENUM_CONST(1)


// Register G2SB_CTX5_G2CBSTRIDE_0  // {host,2d,sb,index=3c}
#define G2SB_CTX5_G2CBSTRIDE_0                  _MK_ADDR_CONST(0x203c)
#define G2SB_CTX5_G2CBSTRIDE_0_SECURE                   0x0
#define G2SB_CTX5_G2CBSTRIDE_0_WORD_COUNT                       0x1
#define G2SB_CTX5_G2CBSTRIDE_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBSTRIDE_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBSTRIDE_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBSTRIDE_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBSTRIDE_0_READ_MASK                        _MK_MASK_CONST(0xc0ffffff)
#define G2SB_CTX5_G2CBSTRIDE_0_WRITE_MASK                       _MK_MASK_CONST(0xc0ffffff)
// Video Buffer Luma(or RGB) Buffer Stride
//  This is luma buffer stride (in bytes)
#define G2SB_CTX5_G2CBSTRIDE_0_CBSTRIDE_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2CBSTRIDE_0_CBSTRIDE_FIELD                   (_MK_MASK_CONST(0xffffff) << G2SB_CTX5_G2CBSTRIDE_0_CBSTRIDE_SHIFT)
#define G2SB_CTX5_G2CBSTRIDE_0_CBSTRIDE_RANGE                   23:0
#define G2SB_CTX5_G2CBSTRIDE_0_CBSTRIDE_WOFFSET                 0x0
#define G2SB_CTX5_G2CBSTRIDE_0_CBSTRIDE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBSTRIDE_0_CBSTRIDE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBSTRIDE_0_CBSTRIDE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBSTRIDE_0_CBSTRIDE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Chroma Buffer Stride default is half of luma
//   00= 1/2 of Luma Buffer Stride; in this
//       case, Luma Buffer Stride should be
//       multiple of 2 bytes.
//   01= Equal to Luma Buffer Stride
//   10= 1/4 of Luma Buffer Stride; in this
//       case, Luma Buffer Stride should be
//       multiple of 4 bytes.
//   1x= Reserved
#define G2SB_CTX5_G2CBSTRIDE_0_CBUVSTRIDE_SHIFT                 _MK_SHIFT_CONST(30)
#define G2SB_CTX5_G2CBSTRIDE_0_CBUVSTRIDE_FIELD                 (_MK_MASK_CONST(0x3) << G2SB_CTX5_G2CBSTRIDE_0_CBUVSTRIDE_SHIFT)
#define G2SB_CTX5_G2CBSTRIDE_0_CBUVSTRIDE_RANGE                 31:30
#define G2SB_CTX5_G2CBSTRIDE_0_CBUVSTRIDE_WOFFSET                       0x0
#define G2SB_CTX5_G2CBSTRIDE_0_CBUVSTRIDE_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBSTRIDE_0_CBUVSTRIDE_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBSTRIDE_0_CBUVSTRIDE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBSTRIDE_0_CBUVSTRIDE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBSTRIDE_0_CBUVSTRIDE_CBS2X                 _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2CBSTRIDE_0_CBUVSTRIDE_CBS1X                 _MK_ENUM_CONST(1)
#define G2SB_CTX5_G2CBSTRIDE_0_CBUVSTRIDE_CBS4X                 _MK_ENUM_CONST(2)

//Line Methods

// Register G2SB_CTX5_G2LINESETTING_0  //{2d,index=3d}
#define G2SB_CTX5_G2LINESETTING_0                       _MK_ADDR_CONST(0x203d)
#define G2SB_CTX5_G2LINESETTING_0_SECURE                        0x0
#define G2SB_CTX5_G2LINESETTING_0_WORD_COUNT                    0x1
#define G2SB_CTX5_G2LINESETTING_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINESETTING_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINESETTING_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINESETTING_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINESETTING_0_READ_MASK                     _MK_MASK_CONST(0xff1fffff)
#define G2SB_CTX5_G2LINESETTING_0_WRITE_MASK                    _MK_MASK_CONST(0xff1fffff)
#define G2SB_CTX5_G2LINESETTING_0_GAMMA_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2LINESETTING_0_GAMMA_FIELD                   (_MK_MASK_CONST(0x1fffff) << G2SB_CTX5_G2LINESETTING_0_GAMMA_SHIFT)
#define G2SB_CTX5_G2LINESETTING_0_GAMMA_RANGE                   20:0
#define G2SB_CTX5_G2LINESETTING_0_GAMMA_WOFFSET                 0x0
#define G2SB_CTX5_G2LINESETTING_0_GAMMA_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINESETTING_0_GAMMA_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINESETTING_0_GAMMA_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINESETTING_0_GAMMA_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

//0:xmajor 1: y major
#define G2SB_CTX5_G2LINESETTING_0_MAJOR_SHIFT                   _MK_SHIFT_CONST(24)
#define G2SB_CTX5_G2LINESETTING_0_MAJOR_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2LINESETTING_0_MAJOR_SHIFT)
#define G2SB_CTX5_G2LINESETTING_0_MAJOR_RANGE                   24:24
#define G2SB_CTX5_G2LINESETTING_0_MAJOR_WOFFSET                 0x0
#define G2SB_CTX5_G2LINESETTING_0_MAJOR_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINESETTING_0_MAJOR_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINESETTING_0_MAJOR_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINESETTING_0_MAJOR_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINESETTING_0_MAJOR_XMAJOR                  _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2LINESETTING_0_MAJOR_YMAJOR                  _MK_ENUM_CONST(1)

#define G2SB_CTX5_G2LINESETTING_0_LINEXDIR_SHIFT                        _MK_SHIFT_CONST(25)
#define G2SB_CTX5_G2LINESETTING_0_LINEXDIR_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2LINESETTING_0_LINEXDIR_SHIFT)
#define G2SB_CTX5_G2LINESETTING_0_LINEXDIR_RANGE                        25:25
#define G2SB_CTX5_G2LINESETTING_0_LINEXDIR_WOFFSET                      0x0
#define G2SB_CTX5_G2LINESETTING_0_LINEXDIR_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINESETTING_0_LINEXDIR_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINESETTING_0_LINEXDIR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINESETTING_0_LINEXDIR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

#define G2SB_CTX5_G2LINESETTING_0_LINEYDIR_SHIFT                        _MK_SHIFT_CONST(26)
#define G2SB_CTX5_G2LINESETTING_0_LINEYDIR_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2LINESETTING_0_LINEYDIR_SHIFT)
#define G2SB_CTX5_G2LINESETTING_0_LINEYDIR_RANGE                        26:26
#define G2SB_CTX5_G2LINESETTING_0_LINEYDIR_WOFFSET                      0x0
#define G2SB_CTX5_G2LINESETTING_0_LINEYDIR_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINESETTING_0_LINEYDIR_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINESETTING_0_LINEYDIR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINESETTING_0_LINEYDIR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

//draw last pixel or not
#define G2SB_CTX5_G2LINESETTING_0_DROPLASTP_SHIFT                       _MK_SHIFT_CONST(27)
#define G2SB_CTX5_G2LINESETTING_0_DROPLASTP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2LINESETTING_0_DROPLASTP_SHIFT)
#define G2SB_CTX5_G2LINESETTING_0_DROPLASTP_RANGE                       27:27
#define G2SB_CTX5_G2LINESETTING_0_DROPLASTP_WOFFSET                     0x0
#define G2SB_CTX5_G2LINESETTING_0_DROPLASTP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINESETTING_0_DROPLASTP_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINESETTING_0_DROPLASTP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINESETTING_0_DROPLASTP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//use OCTANTS in G2LINEDELTAN register instead of MAJOR LINEXDIR LINEYDIR
#define G2SB_CTX5_G2LINESETTING_0_LINEUSEOCTANT_SHIFT                   _MK_SHIFT_CONST(28)
#define G2SB_CTX5_G2LINESETTING_0_LINEUSEOCTANT_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2LINESETTING_0_LINEUSEOCTANT_SHIFT)
#define G2SB_CTX5_G2LINESETTING_0_LINEUSEOCTANT_RANGE                   28:28
#define G2SB_CTX5_G2LINESETTING_0_LINEUSEOCTANT_WOFFSET                 0x0
#define G2SB_CTX5_G2LINESETTING_0_LINEUSEOCTANT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINESETTING_0_LINEUSEOCTANT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINESETTING_0_LINEUSEOCTANT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINESETTING_0_LINEUSEOCTANT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

//000 octant 0
//001 octant 1
//010 octant 2
//011 octant 3
//100 octant 4
//101 octant 5
//110 octant 6
//111 octant 7
#define G2SB_CTX5_G2LINESETTING_0_OCTANTS_SHIFT                 _MK_SHIFT_CONST(29)
#define G2SB_CTX5_G2LINESETTING_0_OCTANTS_FIELD                 (_MK_MASK_CONST(0x7) << G2SB_CTX5_G2LINESETTING_0_OCTANTS_SHIFT)
#define G2SB_CTX5_G2LINESETTING_0_OCTANTS_RANGE                 31:29
#define G2SB_CTX5_G2LINESETTING_0_OCTANTS_WOFFSET                       0x0
#define G2SB_CTX5_G2LINESETTING_0_OCTANTS_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINESETTING_0_OCTANTS_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINESETTING_0_OCTANTS_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINESETTING_0_OCTANTS_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//
//
//
//   |    |    |
//    | 5 | 6 |
//     |  |  |
//    4 | | | 7
//       |||
//   ----------->
//       |||
//    3 | | | 0
//     |  |  |
//    | 2 | 1 |
//   |    |    |
//        V
//

// Register G2SB_CTX5_G2LINEDELTAN_0  //{2d,index=3e}
#define G2SB_CTX5_G2LINEDELTAN_0                        _MK_ADDR_CONST(0x203e)
#define G2SB_CTX5_G2LINEDELTAN_0_SECURE                         0x0
#define G2SB_CTX5_G2LINEDELTAN_0_WORD_COUNT                     0x1
#define G2SB_CTX5_G2LINEDELTAN_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINEDELTAN_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINEDELTAN_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINEDELTAN_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINEDELTAN_0_READ_MASK                      _MK_MASK_CONST(0x1fffff)
#define G2SB_CTX5_G2LINEDELTAN_0_WRITE_MASK                     _MK_MASK_CONST(0x1fffff)
#define G2SB_CTX5_G2LINEDELTAN_0_DELTAN_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2LINEDELTAN_0_DELTAN_FIELD                   (_MK_MASK_CONST(0x1fffff) << G2SB_CTX5_G2LINEDELTAN_0_DELTAN_SHIFT)
#define G2SB_CTX5_G2LINEDELTAN_0_DELTAN_RANGE                   20:0
#define G2SB_CTX5_G2LINEDELTAN_0_DELTAN_WOFFSET                 0x0
#define G2SB_CTX5_G2LINEDELTAN_0_DELTAN_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINEDELTAN_0_DELTAN_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINEDELTAN_0_DELTAN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINEDELTAN_0_DELTAN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2LINEDELTAM_0  //{2d,index=3f}
#define G2SB_CTX5_G2LINEDELTAM_0                        _MK_ADDR_CONST(0x203f)
#define G2SB_CTX5_G2LINEDELTAM_0_SECURE                         0x0
#define G2SB_CTX5_G2LINEDELTAM_0_WORD_COUNT                     0x1
#define G2SB_CTX5_G2LINEDELTAM_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINEDELTAM_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINEDELTAM_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINEDELTAM_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINEDELTAM_0_READ_MASK                      _MK_MASK_CONST(0x1fffff)
#define G2SB_CTX5_G2LINEDELTAM_0_WRITE_MASK                     _MK_MASK_CONST(0x1fffff)
#define G2SB_CTX5_G2LINEDELTAM_0_DELTAM_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2LINEDELTAM_0_DELTAM_FIELD                   (_MK_MASK_CONST(0x1fffff) << G2SB_CTX5_G2LINEDELTAM_0_DELTAM_SHIFT)
#define G2SB_CTX5_G2LINEDELTAM_0_DELTAM_RANGE                   20:0
#define G2SB_CTX5_G2LINEDELTAM_0_DELTAM_WOFFSET                 0x0
#define G2SB_CTX5_G2LINEDELTAM_0_DELTAM_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINEDELTAM_0_DELTAM_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINEDELTAM_0_DELTAM_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINEDELTAM_0_DELTAM_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2LINEPOS_0  //{2d,index=40}
#define G2SB_CTX5_G2LINEPOS_0                   _MK_ADDR_CONST(0x2040)
#define G2SB_CTX5_G2LINEPOS_0_SECURE                    0x0
#define G2SB_CTX5_G2LINEPOS_0_WORD_COUNT                        0x1
#define G2SB_CTX5_G2LINEPOS_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINEPOS_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINEPOS_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINEPOS_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINEPOS_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2LINEPOS_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2LINEPOS_0_LINEXPOS_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2LINEPOS_0_LINEXPOS_FIELD                    (_MK_MASK_CONST(0xffff) << G2SB_CTX5_G2LINEPOS_0_LINEXPOS_SHIFT)
#define G2SB_CTX5_G2LINEPOS_0_LINEXPOS_RANGE                    15:0
#define G2SB_CTX5_G2LINEPOS_0_LINEXPOS_WOFFSET                  0x0
#define G2SB_CTX5_G2LINEPOS_0_LINEXPOS_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINEPOS_0_LINEXPOS_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINEPOS_0_LINEXPOS_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINEPOS_0_LINEXPOS_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

#define G2SB_CTX5_G2LINEPOS_0_LINEYPOS_SHIFT                    _MK_SHIFT_CONST(16)
#define G2SB_CTX5_G2LINEPOS_0_LINEYPOS_FIELD                    (_MK_MASK_CONST(0xffff) << G2SB_CTX5_G2LINEPOS_0_LINEYPOS_SHIFT)
#define G2SB_CTX5_G2LINEPOS_0_LINEYPOS_RANGE                    31:16
#define G2SB_CTX5_G2LINEPOS_0_LINEYPOS_WOFFSET                  0x0
#define G2SB_CTX5_G2LINEPOS_0_LINEYPOS_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINEPOS_0_LINEYPOS_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINEPOS_0_LINEYPOS_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINEPOS_0_LINEYPOS_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2LINELEN_0  //{2d,index=41}
#define G2SB_CTX5_G2LINELEN_0                   _MK_ADDR_CONST(0x2041)
#define G2SB_CTX5_G2LINELEN_0_SECURE                    0x0
#define G2SB_CTX5_G2LINELEN_0_WORD_COUNT                        0x1
#define G2SB_CTX5_G2LINELEN_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINELEN_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINELEN_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINELEN_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINELEN_0_READ_MASK                         _MK_MASK_CONST(0x7fff)
#define G2SB_CTX5_G2LINELEN_0_WRITE_MASK                        _MK_MASK_CONST(0x7fff)
#define G2SB_CTX5_G2LINELEN_0_LINELEN_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2LINELEN_0_LINELEN_FIELD                     (_MK_MASK_CONST(0x7fff) << G2SB_CTX5_G2LINELEN_0_LINELEN_SHIFT)
#define G2SB_CTX5_G2LINELEN_0_LINELEN_RANGE                     14:0
#define G2SB_CTX5_G2LINELEN_0_LINELEN_WOFFSET                   0x0
#define G2SB_CTX5_G2LINELEN_0_LINELEN_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINELEN_0_LINELEN_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINELEN_0_LINELEN_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2LINELEN_0_LINELEN_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2CSCFOURTH_0  //{sb,sbm,index=42}
#define G2SB_CTX5_G2CSCFOURTH_0                 _MK_ADDR_CONST(0x2042)
#define G2SB_CTX5_G2CSCFOURTH_0_SECURE                  0x0
#define G2SB_CTX5_G2CSCFOURTH_0_WORD_COUNT                      0x1
#define G2SB_CTX5_G2CSCFOURTH_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCFOURTH_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCFOURTH_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCFOURTH_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCFOURTH_0_READ_MASK                       _MK_MASK_CONST(0x1ff01ff)
#define G2SB_CTX5_G2CSCFOURTH_0_WRITE_MASK                      _MK_MASK_CONST(0x1ff01ff)
// multiplier for G for U generation.
//This parameter consists of a sign bit and 8-bit magnitude (s1.7)
// For RGB->YUV the recommended value is -0.291 (decimal) or 0x125
// For any other combination this parameter is ignored
#define G2SB_CTX5_G2CSCFOURTH_0_G2U_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2CSCFOURTH_0_G2U_FIELD                       (_MK_MASK_CONST(0x1ff) << G2SB_CTX5_G2CSCFOURTH_0_G2U_SHIFT)
#define G2SB_CTX5_G2CSCFOURTH_0_G2U_RANGE                       8:0
#define G2SB_CTX5_G2CSCFOURTH_0_G2U_WOFFSET                     0x0
#define G2SB_CTX5_G2CSCFOURTH_0_G2U_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCFOURTH_0_G2U_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCFOURTH_0_G2U_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCFOURTH_0_G2U_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// multiplier for G for V generation.
//This parameter consists of a sign bit and 8-bit magnitude (s1.7)
// For RGB->YUV the recommended value is -0.368 (decimal) or 0x12F
// For any other combination this parameter is ignored
#define G2SB_CTX5_G2CSCFOURTH_0_G2V_SHIFT                       _MK_SHIFT_CONST(16)
#define G2SB_CTX5_G2CSCFOURTH_0_G2V_FIELD                       (_MK_MASK_CONST(0x1ff) << G2SB_CTX5_G2CSCFOURTH_0_G2V_SHIFT)
#define G2SB_CTX5_G2CSCFOURTH_0_G2V_RANGE                       24:16
#define G2SB_CTX5_G2CSCFOURTH_0_G2V_WOFFSET                     0x0
#define G2SB_CTX5_G2CSCFOURTH_0_G2V_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCFOURTH_0_G2V_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCFOURTH_0_G2V_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CSCFOURTH_0_G2V_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2SRCST_B_0  //{2d,index=43}
#define G2SB_CTX5_G2SRCST_B_0                   _MK_ADDR_CONST(0x2043)
#define G2SB_CTX5_G2SRCST_B_0_SECURE                    0x0
#define G2SB_CTX5_G2SRCST_B_0_WORD_COUNT                        0x1
#define G2SB_CTX5_G2SRCST_B_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCST_B_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCST_B_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCST_B_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCST_B_0_READ_MASK                         _MK_MASK_CONST(0xffff)
#define G2SB_CTX5_G2SRCST_B_0_WRITE_MASK                        _MK_MASK_CONST(0xffff)
// Source Stride B
#define G2SB_CTX5_G2SRCST_B_0_SRCS_B_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2SRCST_B_0_SRCS_B_FIELD                      (_MK_MASK_CONST(0xffff) << G2SB_CTX5_G2SRCST_B_0_SRCS_B_SHIFT)
#define G2SB_CTX5_G2SRCST_B_0_SRCS_B_RANGE                      15:0
#define G2SB_CTX5_G2SRCST_B_0_SRCS_B_WOFFSET                    0x0
#define G2SB_CTX5_G2SRCST_B_0_SRCS_B_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCST_B_0_SRCS_B_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCST_B_0_SRCS_B_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCST_B_0_SRCS_B_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2UVSTRIDE_0  //{2d,sb,index=44}
#define G2SB_CTX5_G2UVSTRIDE_0                  _MK_ADDR_CONST(0x2044)
#define G2SB_CTX5_G2UVSTRIDE_0_SECURE                   0x0
#define G2SB_CTX5_G2UVSTRIDE_0_WORD_COUNT                       0x1
#define G2SB_CTX5_G2UVSTRIDE_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2UVSTRIDE_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2UVSTRIDE_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2UVSTRIDE_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2UVSTRIDE_0_READ_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX5_G2UVSTRIDE_0_WRITE_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX5_G2UVSTRIDE_0_UVSTRIDE_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2UVSTRIDE_0_UVSTRIDE_FIELD                   (_MK_MASK_CONST(0xffff) << G2SB_CTX5_G2UVSTRIDE_0_UVSTRIDE_SHIFT)
#define G2SB_CTX5_G2UVSTRIDE_0_UVSTRIDE_RANGE                   15:0
#define G2SB_CTX5_G2UVSTRIDE_0_UVSTRIDE_WOFFSET                 0x0
#define G2SB_CTX5_G2UVSTRIDE_0_UVSTRIDE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2UVSTRIDE_0_UVSTRIDE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2UVSTRIDE_0_UVSTRIDE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2UVSTRIDE_0_UVSTRIDE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// circular buffer controller 2

// Register G2SB_CTX5_G2CBDES2_0  // {host,2d,sb,index=45}
#define G2SB_CTX5_G2CBDES2_0                    _MK_ADDR_CONST(0x2045)
#define G2SB_CTX5_G2CBDES2_0_SECURE                     0x0
#define G2SB_CTX5_G2CBDES2_0_WORD_COUNT                         0x1
#define G2SB_CTX5_G2CBDES2_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBDES2_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBDES2_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBDES2_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBDES2_0_READ_MASK                  _MK_MASK_CONST(0x7fff)
#define G2SB_CTX5_G2CBDES2_0_WRITE_MASK                         _MK_MASK_CONST(0x7fff)
// Circular buffer top clipping enabled, the first buffer line num
#define G2SB_CTX5_G2CBDES2_0_TOP_CBLINE_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2CBDES2_0_TOP_CBLINE_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX5_G2CBDES2_0_TOP_CBLINE_SHIFT)
#define G2SB_CTX5_G2CBDES2_0_TOP_CBLINE_RANGE                   14:0
#define G2SB_CTX5_G2CBDES2_0_TOP_CBLINE_WOFFSET                 0x0
#define G2SB_CTX5_G2CBDES2_0_TOP_CBLINE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBDES2_0_TOP_CBLINE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBDES2_0_TOP_CBLINE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2CBDES2_0_TOP_CBLINE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2TILEMODE_0  //{host,2d,sb,index=46}
#define G2SB_CTX5_G2TILEMODE_0                  _MK_ADDR_CONST(0x2046)
#define G2SB_CTX5_G2TILEMODE_0_SECURE                   0x0
#define G2SB_CTX5_G2TILEMODE_0_WORD_COUNT                       0x1
#define G2SB_CTX5_G2TILEMODE_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TILEMODE_0_RESET_MASK                       _MK_MASK_CONST(0x111111)
#define G2SB_CTX5_G2TILEMODE_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TILEMODE_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TILEMODE_0_READ_MASK                        _MK_MASK_CONST(0x111111)
#define G2SB_CTX5_G2TILEMODE_0_WRITE_MASK                       _MK_MASK_CONST(0x111111)
//Y or RGB surface
#define G2SB_CTX5_G2TILEMODE_0_SRC_Y_TILE_MODE_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2TILEMODE_0_SRC_Y_TILE_MODE_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2TILEMODE_0_SRC_Y_TILE_MODE_SHIFT)
#define G2SB_CTX5_G2TILEMODE_0_SRC_Y_TILE_MODE_RANGE                    0:0
#define G2SB_CTX5_G2TILEMODE_0_SRC_Y_TILE_MODE_WOFFSET                  0x0
#define G2SB_CTX5_G2TILEMODE_0_SRC_Y_TILE_MODE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TILEMODE_0_SRC_Y_TILE_MODE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2TILEMODE_0_SRC_Y_TILE_MODE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TILEMODE_0_SRC_Y_TILE_MODE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TILEMODE_0_SRC_Y_TILE_MODE_LINEAR                   _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2TILEMODE_0_SRC_Y_TILE_MODE_TILED                    _MK_ENUM_CONST(1)

//UV surface, ignored in RGB mode
#define G2SB_CTX5_G2TILEMODE_0_SRC_UV_TILE_MODE_SHIFT                   _MK_SHIFT_CONST(4)
#define G2SB_CTX5_G2TILEMODE_0_SRC_UV_TILE_MODE_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2TILEMODE_0_SRC_UV_TILE_MODE_SHIFT)
#define G2SB_CTX5_G2TILEMODE_0_SRC_UV_TILE_MODE_RANGE                   4:4
#define G2SB_CTX5_G2TILEMODE_0_SRC_UV_TILE_MODE_WOFFSET                 0x0
#define G2SB_CTX5_G2TILEMODE_0_SRC_UV_TILE_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TILEMODE_0_SRC_UV_TILE_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2TILEMODE_0_SRC_UV_TILE_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TILEMODE_0_SRC_UV_TILE_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TILEMODE_0_SRC_UV_TILE_MODE_LINEAR                  _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2TILEMODE_0_SRC_UV_TILE_MODE_TILED                   _MK_ENUM_CONST(1)

//Y or RGB surface
#define G2SB_CTX5_G2TILEMODE_0_PAT_Y_TILE_MODE_SHIFT                    _MK_SHIFT_CONST(8)
#define G2SB_CTX5_G2TILEMODE_0_PAT_Y_TILE_MODE_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2TILEMODE_0_PAT_Y_TILE_MODE_SHIFT)
#define G2SB_CTX5_G2TILEMODE_0_PAT_Y_TILE_MODE_RANGE                    8:8
#define G2SB_CTX5_G2TILEMODE_0_PAT_Y_TILE_MODE_WOFFSET                  0x0
#define G2SB_CTX5_G2TILEMODE_0_PAT_Y_TILE_MODE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TILEMODE_0_PAT_Y_TILE_MODE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2TILEMODE_0_PAT_Y_TILE_MODE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TILEMODE_0_PAT_Y_TILE_MODE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TILEMODE_0_PAT_Y_TILE_MODE_LINEAR                   _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2TILEMODE_0_PAT_Y_TILE_MODE_TILED                    _MK_ENUM_CONST(1)

//UNUSED
#define G2SB_CTX5_G2TILEMODE_0_PAT_UV_TILE_MODE_SHIFT                   _MK_SHIFT_CONST(12)
#define G2SB_CTX5_G2TILEMODE_0_PAT_UV_TILE_MODE_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2TILEMODE_0_PAT_UV_TILE_MODE_SHIFT)
#define G2SB_CTX5_G2TILEMODE_0_PAT_UV_TILE_MODE_RANGE                   12:12
#define G2SB_CTX5_G2TILEMODE_0_PAT_UV_TILE_MODE_WOFFSET                 0x0
#define G2SB_CTX5_G2TILEMODE_0_PAT_UV_TILE_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TILEMODE_0_PAT_UV_TILE_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2TILEMODE_0_PAT_UV_TILE_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TILEMODE_0_PAT_UV_TILE_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TILEMODE_0_PAT_UV_TILE_MODE_LINEAR                  _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2TILEMODE_0_PAT_UV_TILE_MODE_TILED                   _MK_ENUM_CONST(1)

//Same as destination write unless DST_RD_WR_SEP (not supported)
#define G2SB_CTX5_G2TILEMODE_0_DST_RD_TILE_MODE_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX5_G2TILEMODE_0_DST_RD_TILE_MODE_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2TILEMODE_0_DST_RD_TILE_MODE_SHIFT)
#define G2SB_CTX5_G2TILEMODE_0_DST_RD_TILE_MODE_RANGE                   16:16
#define G2SB_CTX5_G2TILEMODE_0_DST_RD_TILE_MODE_WOFFSET                 0x0
#define G2SB_CTX5_G2TILEMODE_0_DST_RD_TILE_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TILEMODE_0_DST_RD_TILE_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2TILEMODE_0_DST_RD_TILE_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TILEMODE_0_DST_RD_TILE_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TILEMODE_0_DST_RD_TILE_MODE_LINEAR                  _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2TILEMODE_0_DST_RD_TILE_MODE_TILED                   _MK_ENUM_CONST(1)

//destination surface
#define G2SB_CTX5_G2TILEMODE_0_DST_WR_TILE_MODE_SHIFT                   _MK_SHIFT_CONST(20)
#define G2SB_CTX5_G2TILEMODE_0_DST_WR_TILE_MODE_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX5_G2TILEMODE_0_DST_WR_TILE_MODE_SHIFT)
#define G2SB_CTX5_G2TILEMODE_0_DST_WR_TILE_MODE_RANGE                   20:20
#define G2SB_CTX5_G2TILEMODE_0_DST_WR_TILE_MODE_WOFFSET                 0x0
#define G2SB_CTX5_G2TILEMODE_0_DST_WR_TILE_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TILEMODE_0_DST_WR_TILE_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX5_G2TILEMODE_0_DST_WR_TILE_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TILEMODE_0_DST_WR_TILE_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2TILEMODE_0_DST_WR_TILE_MODE_LINEAR                  _MK_ENUM_CONST(0)
#define G2SB_CTX5_G2TILEMODE_0_DST_WR_TILE_MODE_TILED                   _MK_ENUM_CONST(1)


// Register G2SB_CTX5_G2PATBASE_0  //{2d,index=47}
#define G2SB_CTX5_G2PATBASE_0                   _MK_ADDR_CONST(0x2047)
#define G2SB_CTX5_G2PATBASE_0_SECURE                    0x0
#define G2SB_CTX5_G2PATBASE_0_WORD_COUNT                        0x1
#define G2SB_CTX5_G2PATBASE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATBASE_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATBASE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATBASE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATBASE_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2PATBASE_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
//pattern base address in tile mode,
// PATBA is the linear address where pixel start
#define G2SB_CTX5_G2PATBASE_0_PAT_BASE_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2PATBASE_0_PAT_BASE_FIELD                    (_MK_MASK_CONST(0xffffffff) << G2SB_CTX5_G2PATBASE_0_PAT_BASE_SHIFT)
#define G2SB_CTX5_G2PATBASE_0_PAT_BASE_RANGE                    31:0
#define G2SB_CTX5_G2PATBASE_0_PAT_BASE_WOFFSET                  0x0
#define G2SB_CTX5_G2PATBASE_0_PAT_BASE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATBASE_0_PAT_BASE_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATBASE_0_PAT_BASE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2PATBASE_0_PAT_BASE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// SB_SURFBASE registers
//    These registers need only be programmed when using SB.  They point to the base
//        of the various source and destination surfaces.  Technically they are only needed when
//        tiling is enabled, but there is no harm in always programming them.
//    Their counterpart registers (<reg>_SB_SURFBASE with SB_SURFBASE stripped off) indicate the
//        location of the first pixel  to be sourced or written within the surface.
//
//    This register exists to mimic the X, Y (SRCX, SRCY) functionality found in the BitBlt engine.
//
//    For example, to get at pixel X, Y:
//        SRCBA = SRCBA_SB_SURFBASE + Y*stride + X*Bpp

// Register G2SB_CTX5_G2SRCBA_SB_SURFBASE_0
#define G2SB_CTX5_G2SRCBA_SB_SURFBASE_0                 _MK_ADDR_CONST(0x2048)
#define G2SB_CTX5_G2SRCBA_SB_SURFBASE_0_SECURE                  0x0
#define G2SB_CTX5_G2SRCBA_SB_SURFBASE_0_WORD_COUNT                      0x1
#define G2SB_CTX5_G2SRCBA_SB_SURFBASE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCBA_SB_SURFBASE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCBA_SB_SURFBASE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCBA_SB_SURFBASE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCBA_SB_SURFBASE_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2SRCBA_SB_SURFBASE_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2SRCBA:
//    -base of interleaved sources (RGB, YUV)
//    -base of Y plane
// Only used by the StretchBlit Engine
#define G2SB_CTX5_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_FIELD                  (_MK_MASK_CONST(0xffffffff) << G2SB_CTX5_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SHIFT)
#define G2SB_CTX5_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_RANGE                  31:0
#define G2SB_CTX5_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_WOFFSET                        0x0
#define G2SB_CTX5_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2DSTBA_SB_SURFBASE_0
#define G2SB_CTX5_G2DSTBA_SB_SURFBASE_0                 _MK_ADDR_CONST(0x2049)
#define G2SB_CTX5_G2DSTBA_SB_SURFBASE_0_SECURE                  0x0
#define G2SB_CTX5_G2DSTBA_SB_SURFBASE_0_WORD_COUNT                      0x1
#define G2SB_CTX5_G2DSTBA_SB_SURFBASE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_SB_SURFBASE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_SB_SURFBASE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_SB_SURFBASE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_SB_SURFBASE_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2DSTBA_SB_SURFBASE_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2DSTBA
// Only used by the StretchBlit Engine
#define G2SB_CTX5_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2DSTBA_SB_SURFBASE_0_DST_ADDR_FIELD                  (_MK_MASK_CONST(0xffffffff) << G2SB_CTX5_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SHIFT)
#define G2SB_CTX5_G2DSTBA_SB_SURFBASE_0_DST_ADDR_RANGE                  31:0
#define G2SB_CTX5_G2DSTBA_SB_SURFBASE_0_DST_ADDR_WOFFSET                        0x0
#define G2SB_CTX5_G2DSTBA_SB_SURFBASE_0_DST_ADDR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_SB_SURFBASE_0_DST_ADDR_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2DSTBA_B_SB_SURFBASE_0
#define G2SB_CTX5_G2DSTBA_B_SB_SURFBASE_0                       _MK_ADDR_CONST(0x204a)
#define G2SB_CTX5_G2DSTBA_B_SB_SURFBASE_0_SECURE                        0x0
#define G2SB_CTX5_G2DSTBA_B_SB_SURFBASE_0_WORD_COUNT                    0x1
#define G2SB_CTX5_G2DSTBA_B_SB_SURFBASE_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_B_SB_SURFBASE_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_B_SB_SURFBASE_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_B_SB_SURFBASE_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_B_SB_SURFBASE_0_READ_MASK                     _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2DSTBA_B_SB_SURFBASE_0_WRITE_MASK                    _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2DSTBA_B
// Only used by the StretchBlit Engine, and G2CONTROLSB.DBSEL() is enabled
#define G2SB_CTX5_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_FIELD                      (_MK_MASK_CONST(0xffffffff) << G2SB_CTX5_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SHIFT)
#define G2SB_CTX5_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_RANGE                      31:0
#define G2SB_CTX5_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_WOFFSET                    0x0
#define G2SB_CTX5_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2VBA_A_SB_SURFBASE_0
#define G2SB_CTX5_G2VBA_A_SB_SURFBASE_0                 _MK_ADDR_CONST(0x204b)
#define G2SB_CTX5_G2VBA_A_SB_SURFBASE_0_SECURE                  0x0
#define G2SB_CTX5_G2VBA_A_SB_SURFBASE_0_WORD_COUNT                      0x1
#define G2SB_CTX5_G2VBA_A_SB_SURFBASE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VBA_A_SB_SURFBASE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VBA_A_SB_SURFBASE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VBA_A_SB_SURFBASE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VBA_A_SB_SURFBASE_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2VBA_A_SB_SURFBASE_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2VBA
//     used for YUV 4:2:0 planar, base of V plane
// Only used by the StretchBlit Engine
#define G2SB_CTX5_G2VBA_A_SB_SURFBASE_0_V_ADDR_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2VBA_A_SB_SURFBASE_0_V_ADDR_FIELD                    (_MK_MASK_CONST(0xffffffff) << G2SB_CTX5_G2VBA_A_SB_SURFBASE_0_V_ADDR_SHIFT)
#define G2SB_CTX5_G2VBA_A_SB_SURFBASE_0_V_ADDR_RANGE                    31:0
#define G2SB_CTX5_G2VBA_A_SB_SURFBASE_0_V_ADDR_WOFFSET                  0x0
#define G2SB_CTX5_G2VBA_A_SB_SURFBASE_0_V_ADDR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VBA_A_SB_SURFBASE_0_V_ADDR_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VBA_A_SB_SURFBASE_0_V_ADDR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2VBA_A_SB_SURFBASE_0_V_ADDR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_CTX5_G2UBA_A_SB_SURFBASE_0
#define G2SB_CTX5_G2UBA_A_SB_SURFBASE_0                 _MK_ADDR_CONST(0x204c)
#define G2SB_CTX5_G2UBA_A_SB_SURFBASE_0_SECURE                  0x0
#define G2SB_CTX5_G2UBA_A_SB_SURFBASE_0_WORD_COUNT                      0x1
#define G2SB_CTX5_G2UBA_A_SB_SURFBASE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2UBA_A_SB_SURFBASE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2UBA_A_SB_SURFBASE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2UBA_A_SB_SURFBASE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2UBA_A_SB_SURFBASE_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX5_G2UBA_A_SB_SURFBASE_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2VBA
//     used for YUV 4:2:0 planar, base of U plane
// Only used by the StretchBlit Engine
#define G2SB_CTX5_G2UBA_A_SB_SURFBASE_0_U_ADDR_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX5_G2UBA_A_SB_SURFBASE_0_U_ADDR_FIELD                    (_MK_MASK_CONST(0xffffffff) << G2SB_CTX5_G2UBA_A_SB_SURFBASE_0_U_ADDR_SHIFT)
#define G2SB_CTX5_G2UBA_A_SB_SURFBASE_0_U_ADDR_RANGE                    31:0
#define G2SB_CTX5_G2UBA_A_SB_SURFBASE_0_U_ADDR_WOFFSET                  0x0
#define G2SB_CTX5_G2UBA_A_SB_SURFBASE_0_U_ADDR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2UBA_A_SB_SURFBASE_0_U_ADDR_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2UBA_A_SB_SURFBASE_0_U_ADDR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX5_G2UBA_A_SB_SURFBASE_0_U_ADDR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//
// --------------------------------------------------------------------------
//
// Copyright (c) 2004, NVIDIA Corp.
// All Rights Reserved.
//
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
//
// --------------------------------------------------------------------------
// --------------------------------------------------------------------------
//
// Copyright (c) 2004-2005, NVIDIA Corp.
// All Rights Reserved.
//
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
//
// --------------------------------------------------------------------------
//
// Memory Controller Tiling definitions
//
//
//  To enable tiling for a buffer in your module you'll want to include
//  this spec file and then make use of either the ADD_TILE_MODE_REG_SPEC
//  or ADD_TILE_MODE_REG_FIELD_SPEC macro.
//
//  For the ADD_TILE_MODE_REG_SPEC macro, the regp arg is added to the
//  register name as a prefix to match the names of the other registers
//  for this buffer. The fldp is the field name prefix to make the name
//  unique so it works with arreggen generated reg blocks (e.g.):
//
//      // specify how addressing should occur for IB0 buffer
//      ADD_TILE_MODE_REG_SPEC(IB0, IB0);
//
//  There's also a REG_RW_SPEC version, if you need to specify a special
//  flag (e.g. rws for shadow, or rwt for trigger).
//
//  For the ADD_TILE_MODE_REG_FIELD_SPEC macro, the fldp is the field
//  name prefix and bitpos arg describes the starting bit position for
//  this field within another register.
//
//  Like the register version, there's a REG_RW_FIELD_SPEC version if
//  you need to set explicit bits other than "rw".
//
//  Note: this requires having at least NV_MC_TILE_MODEWIDTH bits of
//  space available after bitpos (e.g.) in the register:
//
//      ADD_TILE_MODE_REG_FIELD_SPEC(REF, 16)   // This parameter specifies how addressing
//                                              // for the REF buffer should occur
//
// --------------------------------------------------------------------------
//
// Copyright (c) 2004, NVIDIA Corp.
// All Rights Reserved.
//
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
//
// --------------------------------------------------------------------------
//

// Register G2SB_CTX6_INCR_SYNCPT_0
#define G2SB_CTX6_INCR_SYNCPT_0                 _MK_ADDR_CONST(0x6000)
#define G2SB_CTX6_INCR_SYNCPT_0_SECURE                  0x0
#define G2SB_CTX6_INCR_SYNCPT_0_WORD_COUNT                      0x1
#define G2SB_CTX6_INCR_SYNCPT_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_INCR_SYNCPT_0_RESET_MASK                      _MK_MASK_CONST(0xffff)
#define G2SB_CTX6_INCR_SYNCPT_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_INCR_SYNCPT_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_INCR_SYNCPT_0_READ_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX6_INCR_SYNCPT_0_WRITE_MASK                      _MK_MASK_CONST(0xffff)
// Condition mapped from raise/wait
#define G2SB_CTX6_INCR_SYNCPT_0_COND_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_CTX6_INCR_SYNCPT_0_COND_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX6_INCR_SYNCPT_0_COND_SHIFT)
#define G2SB_CTX6_INCR_SYNCPT_0_COND_RANGE                      15:8
#define G2SB_CTX6_INCR_SYNCPT_0_COND_WOFFSET                    0x0
#define G2SB_CTX6_INCR_SYNCPT_0_COND_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_INCR_SYNCPT_0_COND_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define G2SB_CTX6_INCR_SYNCPT_0_COND_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_INCR_SYNCPT_0_COND_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_INCR_SYNCPT_0_COND_IMMEDIATE                  _MK_ENUM_CONST(0)
#define G2SB_CTX6_INCR_SYNCPT_0_COND_OP_DONE                    _MK_ENUM_CONST(1)
#define G2SB_CTX6_INCR_SYNCPT_0_COND_RD_DONE                    _MK_ENUM_CONST(2)
#define G2SB_CTX6_INCR_SYNCPT_0_COND_REG_WR_SAFE                        _MK_ENUM_CONST(3)
#define G2SB_CTX6_INCR_SYNCPT_0_COND_COND_4                     _MK_ENUM_CONST(4)
#define G2SB_CTX6_INCR_SYNCPT_0_COND_COND_5                     _MK_ENUM_CONST(5)
#define G2SB_CTX6_INCR_SYNCPT_0_COND_COND_6                     _MK_ENUM_CONST(6)
#define G2SB_CTX6_INCR_SYNCPT_0_COND_COND_7                     _MK_ENUM_CONST(7)
#define G2SB_CTX6_INCR_SYNCPT_0_COND_COND_8                     _MK_ENUM_CONST(8)
#define G2SB_CTX6_INCR_SYNCPT_0_COND_COND_9                     _MK_ENUM_CONST(9)
#define G2SB_CTX6_INCR_SYNCPT_0_COND_COND_10                    _MK_ENUM_CONST(10)
#define G2SB_CTX6_INCR_SYNCPT_0_COND_COND_11                    _MK_ENUM_CONST(11)
#define G2SB_CTX6_INCR_SYNCPT_0_COND_COND_12                    _MK_ENUM_CONST(12)
#define G2SB_CTX6_INCR_SYNCPT_0_COND_COND_13                    _MK_ENUM_CONST(13)
#define G2SB_CTX6_INCR_SYNCPT_0_COND_COND_14                    _MK_ENUM_CONST(14)
#define G2SB_CTX6_INCR_SYNCPT_0_COND_COND_15                    _MK_ENUM_CONST(15)

// syncpt index value
#define G2SB_CTX6_INCR_SYNCPT_0_INDX_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX6_INCR_SYNCPT_0_INDX_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX6_INCR_SYNCPT_0_INDX_SHIFT)
#define G2SB_CTX6_INCR_SYNCPT_0_INDX_RANGE                      7:0
#define G2SB_CTX6_INCR_SYNCPT_0_INDX_WOFFSET                    0x0
#define G2SB_CTX6_INCR_SYNCPT_0_INDX_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_INCR_SYNCPT_0_INDX_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define G2SB_CTX6_INCR_SYNCPT_0_INDX_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_INCR_SYNCPT_0_INDX_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_INCR_SYNCPT_CNTRL_0
#define G2SB_CTX6_INCR_SYNCPT_CNTRL_0                   _MK_ADDR_CONST(0x6001)
#define G2SB_CTX6_INCR_SYNCPT_CNTRL_0_SECURE                    0x0
#define G2SB_CTX6_INCR_SYNCPT_CNTRL_0_WORD_COUNT                        0x1
#define G2SB_CTX6_INCR_SYNCPT_CNTRL_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_INCR_SYNCPT_CNTRL_0_RESET_MASK                        _MK_MASK_CONST(0x101)
#define G2SB_CTX6_INCR_SYNCPT_CNTRL_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_INCR_SYNCPT_CNTRL_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_INCR_SYNCPT_CNTRL_0_READ_MASK                         _MK_MASK_CONST(0x101)
#define G2SB_CTX6_INCR_SYNCPT_CNTRL_0_WRITE_MASK                        _MK_MASK_CONST(0x101)
// If NO_STALL is 1, then when fifos are full,
// INCR_SYNCPT methods will be dropped and the
// INCR_SYNCPT_ERROR[COND] bit will be set.
// If NO_STALL is 0, then when fifos are full,
// the client host interface will be stalled.
#define G2SB_CTX6_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SHIFT                        _MK_SHIFT_CONST(8)
#define G2SB_CTX6_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX6_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SHIFT)
#define G2SB_CTX6_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_RANGE                        8:8
#define G2SB_CTX6_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_WOFFSET                      0x0
#define G2SB_CTX6_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX6_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// If SOFT_RESET is set, then all internal state
// of the client syncpt block will be reset.
// To do soft reset, first set SOFT_RESET of
// all host1x clients affected, then clear all
// SOFT_RESETs.
#define G2SB_CTX6_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX6_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX6_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SHIFT)
#define G2SB_CTX6_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_RANGE                      0:0
#define G2SB_CTX6_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_WOFFSET                    0x0
#define G2SB_CTX6_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_CTX6_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_INCR_SYNCPT_ERROR_0
#define G2SB_CTX6_INCR_SYNCPT_ERROR_0                   _MK_ADDR_CONST(0x6002)
#define G2SB_CTX6_INCR_SYNCPT_ERROR_0_SECURE                    0x0
#define G2SB_CTX6_INCR_SYNCPT_ERROR_0_WORD_COUNT                        0x1
#define G2SB_CTX6_INCR_SYNCPT_ERROR_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_INCR_SYNCPT_ERROR_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_INCR_SYNCPT_ERROR_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_INCR_SYNCPT_ERROR_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_INCR_SYNCPT_ERROR_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_INCR_SYNCPT_ERROR_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// COND_STATUS[COND] is set if the fifo for COND overflows.
// This bit is sticky and will remain set until cleared.
// Cleared by writing 1.
#define G2SB_CTX6_INCR_SYNCPT_ERROR_0_COND_STATUS_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX6_INCR_SYNCPT_ERROR_0_COND_STATUS_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX6_INCR_SYNCPT_ERROR_0_COND_STATUS_SHIFT)
#define G2SB_CTX6_INCR_SYNCPT_ERROR_0_COND_STATUS_RANGE                 31:0
#define G2SB_CTX6_INCR_SYNCPT_ERROR_0_COND_STATUS_WOFFSET                       0x0
#define G2SB_CTX6_INCR_SYNCPT_ERROR_0_COND_STATUS_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_INCR_SYNCPT_ERROR_0_COND_STATUS_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_INCR_SYNCPT_ERROR_0_COND_STATUS_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_INCR_SYNCPT_ERROR_0_COND_STATUS_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// reserve locations for future expansion

// Reserved address 24579 [0x6003]

// Reserved address 24580 [0x6004]

// Reserved address 24581 [0x6005]

// Reserved address 24582 [0x6006]

// Reserved address 24583 [0x6007]
// just in case names were redefined using macros
// 2D syncpt behavior
//     - Each 2D context has its own syncpt client.
//     - OP_DONE increments when 2D's memory write client is idle, meaning all
//           preceding operations are complete.
//     - RD_DONE behaves like OP_DONE
//     - REG_WR_SAFE behaves like IMMEDIATE meaning a syncpt increment returns
//         immediately and does not indicate that a register write will NOT block.
//         The implications are that 2D's host FIFO can fill and block access to 2D,
//         which will indeterminately block a direct CPU access.

// Register G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0  //{index=8}
// This register can be accessed by both register read/write and command fifo
// in order not to break exsting code , keep suffix REGONLY.
//
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0                      _MK_ADDR_CONST(0x6008)
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_SECURE                       0x0
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_WORD_COUNT                   0x1
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_READ_MASK                    _MK_MASK_CONST(0x1f03ff)
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_WRITE_MASK                   _MK_MASK_CONST(0x1f0000)
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_FIELD                     (_MK_MASK_CONST(0x3ff) << G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SHIFT)
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_RANGE                     9:0
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_WOFFSET                   0x0
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_FIELD                   (_MK_MASK_CONST(0xf) << G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SHIFT)
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_RANGE                   19:16
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_WOFFSET                 0x0
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SHIFT                      _MK_SHIFT_CONST(20)
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SHIFT)
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_RANGE                      20:20
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_WOFFSET                    0x0
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Control methods, since they are not programmed often, put them is the beginning

// Register G2SB_CTX6_G2TRIGGER_0  //{host,2d,sb,index=9}
#define G2SB_CTX6_G2TRIGGER_0                   _MK_ADDR_CONST(0x6009)
#define G2SB_CTX6_G2TRIGGER_0_SECURE                    0x0
#define G2SB_CTX6_G2TRIGGER_0_WORD_COUNT                        0x1
#define G2SB_CTX6_G2TRIGGER_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TRIGGER_0_RESET_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX6_G2TRIGGER_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TRIGGER_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TRIGGER_0_READ_MASK                         _MK_MASK_CONST(0xffff)
#define G2SB_CTX6_G2TRIGGER_0_WRITE_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX6_G2TRIGGER_0_TRIGGER_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2TRIGGER_0_TRIGGER_FIELD                     (_MK_MASK_CONST(0xffff) << G2SB_CTX6_G2TRIGGER_0_TRIGGER_SHIFT)
#define G2SB_CTX6_G2TRIGGER_0_TRIGGER_RANGE                     15:0
#define G2SB_CTX6_G2TRIGGER_0_TRIGGER_WOFFSET                   0x0
#define G2SB_CTX6_G2TRIGGER_0_TRIGGER_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TRIGGER_0_TRIGGER_DEFAULT_MASK                      _MK_MASK_CONST(0xffff)
#define G2SB_CTX6_G2TRIGGER_0_TRIGGER_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TRIGGER_0_TRIGGER_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2TRIGGER1_0  //{host,2d,sb,index=a}
#define G2SB_CTX6_G2TRIGGER1_0                  _MK_ADDR_CONST(0x600a)
#define G2SB_CTX6_G2TRIGGER1_0_SECURE                   0x0
#define G2SB_CTX6_G2TRIGGER1_0_WORD_COUNT                       0x1
#define G2SB_CTX6_G2TRIGGER1_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TRIGGER1_0_RESET_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX6_G2TRIGGER1_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TRIGGER1_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TRIGGER1_0_READ_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX6_G2TRIGGER1_0_WRITE_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX6_G2TRIGGER1_0_TRIGGER1_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2TRIGGER1_0_TRIGGER1_FIELD                   (_MK_MASK_CONST(0xffff) << G2SB_CTX6_G2TRIGGER1_0_TRIGGER1_SHIFT)
#define G2SB_CTX6_G2TRIGGER1_0_TRIGGER1_RANGE                   15:0
#define G2SB_CTX6_G2TRIGGER1_0_TRIGGER1_WOFFSET                 0x0
#define G2SB_CTX6_G2TRIGGER1_0_TRIGGER1_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TRIGGER1_0_TRIGGER1_DEFAULT_MASK                    _MK_MASK_CONST(0xffff)
#define G2SB_CTX6_G2TRIGGER1_0_TRIGGER1_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TRIGGER1_0_TRIGGER1_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2TRIGGER2_0  //{2d,index=b}
#define G2SB_CTX6_G2TRIGGER2_0                  _MK_ADDR_CONST(0x600b)
#define G2SB_CTX6_G2TRIGGER2_0_SECURE                   0x0
#define G2SB_CTX6_G2TRIGGER2_0_WORD_COUNT                       0x1
#define G2SB_CTX6_G2TRIGGER2_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TRIGGER2_0_RESET_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX6_G2TRIGGER2_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TRIGGER2_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TRIGGER2_0_READ_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX6_G2TRIGGER2_0_WRITE_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX6_G2TRIGGER2_0_TRIGGER2_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2TRIGGER2_0_TRIGGER2_FIELD                   (_MK_MASK_CONST(0xffff) << G2SB_CTX6_G2TRIGGER2_0_TRIGGER2_SHIFT)
#define G2SB_CTX6_G2TRIGGER2_0_TRIGGER2_RANGE                   15:0
#define G2SB_CTX6_G2TRIGGER2_0_TRIGGER2_WOFFSET                 0x0
#define G2SB_CTX6_G2TRIGGER2_0_TRIGGER2_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TRIGGER2_0_TRIGGER2_DEFAULT_MASK                    _MK_MASK_CONST(0xffff)
#define G2SB_CTX6_G2TRIGGER2_0_TRIGGER2_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TRIGGER2_0_TRIGGER2_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2CMDSEL_0  //{host,2d,sb,index=c}
#define G2SB_CTX6_G2CMDSEL_0                    _MK_ADDR_CONST(0x600c)
#define G2SB_CTX6_G2CMDSEL_0_SECURE                     0x0
#define G2SB_CTX6_G2CMDSEL_0_WORD_COUNT                         0x1
#define G2SB_CTX6_G2CMDSEL_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_RESET_MASK                         _MK_MASK_CONST(0x1100d7f1)
#define G2SB_CTX6_G2CMDSEL_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_READ_MASK                  _MK_MASK_CONST(0x1fffd7f1)
#define G2SB_CTX6_G2CMDSEL_0_WRITE_MASK                         _MK_MASK_CONST(0x1fffd7f0)
#define G2SB_CTX6_G2CMDSEL_0_SBOR2D_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2CMDSEL_0_SBOR2D_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CMDSEL_0_SBOR2D_SHIFT)
#define G2SB_CTX6_G2CMDSEL_0_SBOR2D_RANGE                       0:0
#define G2SB_CTX6_G2CMDSEL_0_SBOR2D_WOFFSET                     0x0
#define G2SB_CTX6_G2CMDSEL_0_SBOR2D_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_SBOR2D_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CMDSEL_0_SBOR2D_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_SBOR2D_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_SBOR2D_G2                  _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CMDSEL_0_SBOR2D_SB                  _MK_ENUM_CONST(1)

//circular buffer feature enable    0= disable
#define G2SB_CTX6_G2CMDSEL_0_CBENABLE_SHIFT                     _MK_SHIFT_CONST(4)
#define G2SB_CTX6_G2CMDSEL_0_CBENABLE_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CMDSEL_0_CBENABLE_SHIFT)
#define G2SB_CTX6_G2CMDSEL_0_CBENABLE_RANGE                     4:4
#define G2SB_CTX6_G2CMDSEL_0_CBENABLE_WOFFSET                   0x0
#define G2SB_CTX6_G2CMDSEL_0_CBENABLE_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_CBENABLE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CMDSEL_0_CBENABLE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_CBENABLE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_CBENABLE_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CMDSEL_0_CBENABLE_ENABLE                    _MK_ENUM_CONST(1)

//VI trigger enable, can be circular buffer or full frame
#define G2SB_CTX6_G2CMDSEL_0_VITRIGGER_SHIFT                    _MK_SHIFT_CONST(5)
#define G2SB_CTX6_G2CMDSEL_0_VITRIGGER_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CMDSEL_0_VITRIGGER_SHIFT)
#define G2SB_CTX6_G2CMDSEL_0_VITRIGGER_RANGE                    5:5
#define G2SB_CTX6_G2CMDSEL_0_VITRIGGER_WOFFSET                  0x0
#define G2SB_CTX6_G2CMDSEL_0_VITRIGGER_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_VITRIGGER_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CMDSEL_0_VITRIGGER_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_VITRIGGER_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//host trigger the command, host also need program cicular buffer related data
#define G2SB_CTX6_G2CMDSEL_0_HOSTTRIGGER_SHIFT                  _MK_SHIFT_CONST(6)
#define G2SB_CTX6_G2CMDSEL_0_HOSTTRIGGER_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CMDSEL_0_HOSTTRIGGER_SHIFT)
#define G2SB_CTX6_G2CMDSEL_0_HOSTTRIGGER_RANGE                  6:6
#define G2SB_CTX6_G2CMDSEL_0_HOSTTRIGGER_WOFFSET                        0x0
#define G2SB_CTX6_G2CMDSEL_0_HOSTTRIGGER_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_HOSTTRIGGER_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CMDSEL_0_HOSTTRIGGER_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_HOSTTRIGGER_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX6_G2CMDSEL_0_CBSBDISABLE_SHIFT                  _MK_SHIFT_CONST(7)
#define G2SB_CTX6_G2CMDSEL_0_CBSBDISABLE_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CMDSEL_0_CBSBDISABLE_SHIFT)
#define G2SB_CTX6_G2CMDSEL_0_CBSBDISABLE_RANGE                  7:7
#define G2SB_CTX6_G2CMDSEL_0_CBSBDISABLE_WOFFSET                        0x0
#define G2SB_CTX6_G2CMDSEL_0_CBSBDISABLE_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_CBSBDISABLE_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CMDSEL_0_CBSBDISABLE_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_CBSBDISABLE_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// 00: to memory
// 01: to EPP
#define G2SB_CTX6_G2CMDSEL_0_G2OUTPUT_SHIFT                     _MK_SHIFT_CONST(8)
#define G2SB_CTX6_G2CMDSEL_0_G2OUTPUT_FIELD                     (_MK_MASK_CONST(0x3) << G2SB_CTX6_G2CMDSEL_0_G2OUTPUT_SHIFT)
#define G2SB_CTX6_G2CMDSEL_0_G2OUTPUT_RANGE                     9:8
#define G2SB_CTX6_G2CMDSEL_0_G2OUTPUT_WOFFSET                   0x0
#define G2SB_CTX6_G2CMDSEL_0_G2OUTPUT_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_G2OUTPUT_DEFAULT_MASK                      _MK_MASK_CONST(0x3)
#define G2SB_CTX6_G2CMDSEL_0_G2OUTPUT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_G2OUTPUT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_G2OUTPUT_MEMORY                    _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CMDSEL_0_G2OUTPUT_EPP                       _MK_ENUM_CONST(1)
#define G2SB_CTX6_G2CMDSEL_0_G2OUTPUT_RESERVED2                 _MK_ENUM_CONST(2)
#define G2SB_CTX6_G2CMDSEL_0_G2OUTPUT_RESERVED3                 _MK_ENUM_CONST(3)

// Reserved for HW Test, SW should not use this bit.
#define G2SB_CTX6_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SHIFT                       _MK_SHIFT_CONST(10)
#define G2SB_CTX6_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SHIFT)
#define G2SB_CTX6_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_RANGE                       10:10
#define G2SB_CTX6_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_WOFFSET                     0x0
#define G2SB_CTX6_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_ENABLE                      _MK_ENUM_CONST(1)

#define G2SB_CTX6_G2CMDSEL_0_LINK_WAIT_BUF_END_SHIFT                    _MK_SHIFT_CONST(12)
#define G2SB_CTX6_G2CMDSEL_0_LINK_WAIT_BUF_END_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CMDSEL_0_LINK_WAIT_BUF_END_SHIFT)
#define G2SB_CTX6_G2CMDSEL_0_LINK_WAIT_BUF_END_RANGE                    12:12
#define G2SB_CTX6_G2CMDSEL_0_LINK_WAIT_BUF_END_WOFFSET                  0x0
#define G2SB_CTX6_G2CMDSEL_0_LINK_WAIT_BUF_END_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_LINK_WAIT_BUF_END_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CMDSEL_0_LINK_WAIT_BUF_END_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_LINK_WAIT_BUF_END_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//host writes this bit to tell which buffer is ready
#define G2SB_CTX6_G2CMDSEL_0_FRAME_START_SHIFT                  _MK_SHIFT_CONST(14)
#define G2SB_CTX6_G2CMDSEL_0_FRAME_START_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CMDSEL_0_FRAME_START_SHIFT)
#define G2SB_CTX6_G2CMDSEL_0_FRAME_START_RANGE                  14:14
#define G2SB_CTX6_G2CMDSEL_0_FRAME_START_WOFFSET                        0x0
#define G2SB_CTX6_G2CMDSEL_0_FRAME_START_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_FRAME_START_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CMDSEL_0_FRAME_START_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_FRAME_START_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX6_G2CMDSEL_0_FRAME_END_SHIFT                    _MK_SHIFT_CONST(15)
#define G2SB_CTX6_G2CMDSEL_0_FRAME_END_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CMDSEL_0_FRAME_END_SHIFT)
#define G2SB_CTX6_G2CMDSEL_0_FRAME_END_RANGE                    15:15
#define G2SB_CTX6_G2CMDSEL_0_FRAME_END_WOFFSET                  0x0
#define G2SB_CTX6_G2CMDSEL_0_FRAME_END_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_FRAME_END_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CMDSEL_0_FRAME_END_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_FRAME_END_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

#define G2SB_CTX6_G2CMDSEL_0_BUFFER_INDEX_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_CTX6_G2CMDSEL_0_BUFFER_INDEX_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX6_G2CMDSEL_0_BUFFER_INDEX_SHIFT)
#define G2SB_CTX6_G2CMDSEL_0_BUFFER_INDEX_RANGE                 23:16
#define G2SB_CTX6_G2CMDSEL_0_BUFFER_INDEX_WOFFSET                       0x0
#define G2SB_CTX6_G2CMDSEL_0_BUFFER_INDEX_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_BUFFER_INDEX_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_BUFFER_INDEX_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_BUFFER_INDEX_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//Test purpose
#define G2SB_CTX6_G2CMDSEL_0_LINKEN_SHIFT                       _MK_SHIFT_CONST(24)
#define G2SB_CTX6_G2CMDSEL_0_LINKEN_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CMDSEL_0_LINKEN_SHIFT)
#define G2SB_CTX6_G2CMDSEL_0_LINKEN_RANGE                       24:24
#define G2SB_CTX6_G2CMDSEL_0_LINKEN_WOFFSET                     0x0
#define G2SB_CTX6_G2CMDSEL_0_LINKEN_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_LINKEN_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CMDSEL_0_LINKEN_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_LINKEN_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

#define G2SB_CTX6_G2CMDSEL_0_LINKVAL_SHIFT                      _MK_SHIFT_CONST(25)
#define G2SB_CTX6_G2CMDSEL_0_LINKVAL_FIELD                      (_MK_MASK_CONST(0x7) << G2SB_CTX6_G2CMDSEL_0_LINKVAL_SHIFT)
#define G2SB_CTX6_G2CMDSEL_0_LINKVAL_RANGE                      27:25
#define G2SB_CTX6_G2CMDSEL_0_LINKVAL_WOFFSET                    0x0
#define G2SB_CTX6_G2CMDSEL_0_LINKVAL_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_LINKVAL_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_LINKVAL_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_LINKVAL_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// indicates priority of the context, note vi-triggered contexts take priority over HIGH
#define G2SB_CTX6_G2CMDSEL_0_PRIORITY_SHIFT                     _MK_SHIFT_CONST(28)
#define G2SB_CTX6_G2CMDSEL_0_PRIORITY_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CMDSEL_0_PRIORITY_SHIFT)
#define G2SB_CTX6_G2CMDSEL_0_PRIORITY_RANGE                     28:28
#define G2SB_CTX6_G2CMDSEL_0_PRIORITY_WOFFSET                   0x0
#define G2SB_CTX6_G2CMDSEL_0_PRIORITY_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_PRIORITY_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CMDSEL_0_PRIORITY_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_PRIORITY_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMDSEL_0_PRIORITY_LOW                       _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CMDSEL_0_PRIORITY_HIGH                      _MK_ENUM_CONST(1)


// Register G2SB_CTX6_G2RAISE_0  //{host,2d,sb,index=d}
#define G2SB_CTX6_G2RAISE_0                     _MK_ADDR_CONST(0x600d)
#define G2SB_CTX6_G2RAISE_0_SECURE                      0x0
#define G2SB_CTX6_G2RAISE_0_WORD_COUNT                  0x1
#define G2SB_CTX6_G2RAISE_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2RAISE_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2RAISE_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2RAISE_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2RAISE_0_READ_MASK                   _MK_MASK_CONST(0xf001f)
#define G2SB_CTX6_G2RAISE_0_WRITE_MASK                  _MK_MASK_CONST(0xf001f)
//Push back to read fifo when all commands in the channel are done.
#define G2SB_CTX6_G2RAISE_0_RAISE_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2RAISE_0_RAISE_FIELD                 (_MK_MASK_CONST(0x1f) << G2SB_CTX6_G2RAISE_0_RAISE_SHIFT)
#define G2SB_CTX6_G2RAISE_0_RAISE_RANGE                 4:0
#define G2SB_CTX6_G2RAISE_0_RAISE_WOFFSET                       0x0
#define G2SB_CTX6_G2RAISE_0_RAISE_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2RAISE_0_RAISE_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2RAISE_0_RAISE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2RAISE_0_RAISE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

#define G2SB_CTX6_G2RAISE_0_RAISECHANNEL_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX6_G2RAISE_0_RAISECHANNEL_FIELD                  (_MK_MASK_CONST(0xf) << G2SB_CTX6_G2RAISE_0_RAISECHANNEL_SHIFT)
#define G2SB_CTX6_G2RAISE_0_RAISECHANNEL_RANGE                  19:16
#define G2SB_CTX6_G2RAISE_0_RAISECHANNEL_WOFFSET                        0x0
#define G2SB_CTX6_G2RAISE_0_RAISECHANNEL_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2RAISE_0_RAISECHANNEL_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2RAISE_0_RAISECHANNEL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2RAISE_0_RAISECHANNEL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Reserved address 24590 [0x600e]
//reg G2REFCOUNT incr1  //{host,2d,sb,index=e}
//#if (NV_HOST1X_HAS_FEATURE_REFCOUNT32B == 1)
//     31:0   rw REFCOUNT
//#else
//     15:0   rw REFCOUNT
//#endif
//    ;

// Register G2SB_CTX6_G2HOSTSET_0  //{host,2d,index=f}
#define G2SB_CTX6_G2HOSTSET_0                   _MK_ADDR_CONST(0x600f)
#define G2SB_CTX6_G2HOSTSET_0_SECURE                    0x0
#define G2SB_CTX6_G2HOSTSET_0_WORD_COUNT                        0x1
#define G2SB_CTX6_G2HOSTSET_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2HOSTSET_0_RESET_MASK                        _MK_MASK_CONST(0xff)
#define G2SB_CTX6_G2HOSTSET_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2HOSTSET_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2HOSTSET_0_READ_MASK                         _MK_MASK_CONST(0xff)
#define G2SB_CTX6_G2HOSTSET_0_WRITE_MASK                        _MK_MASK_CONST(0xff)
//  specifies distance (in byte) from last pixel of a line to the first
//  pixel of next line.
//  In mono mode, the value is the nearest byte number.
//  E.G. if gap is 3 bits, HSTLNGAP should be 1 (byte),
// if gap is 9 bits, HSTLNGAP should be 2 (byte)
#define G2SB_CTX6_G2HOSTSET_0_HSTLNGAP_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2HOSTSET_0_HSTLNGAP_FIELD                    (_MK_MASK_CONST(0xf) << G2SB_CTX6_G2HOSTSET_0_HSTLNGAP_SHIFT)
#define G2SB_CTX6_G2HOSTSET_0_HSTLNGAP_RANGE                    3:0
#define G2SB_CTX6_G2HOSTSET_0_HSTLNGAP_WOFFSET                  0x0
#define G2SB_CTX6_G2HOSTSET_0_HSTLNGAP_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2HOSTSET_0_HSTLNGAP_DEFAULT_MASK                     _MK_MASK_CONST(0xf)
#define G2SB_CTX6_G2HOSTSET_0_HSTLNGAP_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2HOSTSET_0_HSTLNGAP_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// specifies the
//  first pixel location (in byte) in the first source data entry.
// In mono mode pixel should always start in byte boundary
#define G2SB_CTX6_G2HOSTSET_0_HSTFPXL_SHIFT                     _MK_SHIFT_CONST(4)
#define G2SB_CTX6_G2HOSTSET_0_HSTFPXL_FIELD                     (_MK_MASK_CONST(0xf) << G2SB_CTX6_G2HOSTSET_0_HSTFPXL_SHIFT)
#define G2SB_CTX6_G2HOSTSET_0_HSTFPXL_RANGE                     7:4
#define G2SB_CTX6_G2HOSTSET_0_HSTFPXL_WOFFSET                   0x0
#define G2SB_CTX6_G2HOSTSET_0_HSTFPXL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2HOSTSET_0_HSTFPXL_DEFAULT_MASK                      _MK_MASK_CONST(0xf)
#define G2SB_CTX6_G2HOSTSET_0_HSTFPXL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2HOSTSET_0_HSTFPXL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2HOSTFIFO_0  //{host,2d,sb,index=10}
#define G2SB_CTX6_G2HOSTFIFO_0                  _MK_ADDR_CONST(0x6010)
#define G2SB_CTX6_G2HOSTFIFO_0_SECURE                   0x0
#define G2SB_CTX6_G2HOSTFIFO_0_WORD_COUNT                       0x1
#define G2SB_CTX6_G2HOSTFIFO_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2HOSTFIFO_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2HOSTFIFO_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2HOSTFIFO_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2HOSTFIFO_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2HOSTFIFO_0_WRITE_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2HOSTFIFO_0_HOSTFIFODATA_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2HOSTFIFO_0_HOSTFIFODATA_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX6_G2HOSTFIFO_0_HOSTFIFODATA_SHIFT)
#define G2SB_CTX6_G2HOSTFIFO_0_HOSTFIFODATA_RANGE                       31:0
#define G2SB_CTX6_G2HOSTFIFO_0_HOSTFIFODATA_WOFFSET                     0x0
#define G2SB_CTX6_G2HOSTFIFO_0_HOSTFIFODATA_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2HOSTFIFO_0_HOSTFIFODATA_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2HOSTFIFO_0_HOSTFIFODATA_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2HOSTFIFO_0_HOSTFIFODATA_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2VDDA_0  //{sb,sbm,index=11}
#define G2SB_CTX6_G2VDDA_0                      _MK_ADDR_CONST(0x6011)
#define G2SB_CTX6_G2VDDA_0_SECURE                       0x0
#define G2SB_CTX6_G2VDDA_0_WORD_COUNT                   0x1
#define G2SB_CTX6_G2VDDA_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VDDA_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VDDA_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VDDA_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VDDA_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2VDDA_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
//Vertical Scaling DDA
//Reset value: xxxx-xxxxh
//Vertical DDA Step (Increment) Value (VDSTEP[18:0])
// (upper 13 bits should be set to '0')
//This parameter specifies the increment value of the DDA used
//for vertical scaling and it is in the form of 6-bit integer and
//12-bit fraction.  This value is detemined by the equation:
// (Actual_source_height-1-VDTINI) / (Actual_destination_height-1)
// Truncate the rest bits to keep the 12bits fraction. Since we have to meet
// (Actual_source_height-1)*1.0 >= (Actual_destination_height - 1)*VDSTEP + VDTINI
// Refer to bug 353260 for more detail.
//The 6-bit integer allows maximum contraction ratio of 1/64, and
// 12-bit fraction assures the maximum limit of accumulated error less
// than half line-spacing for up to approximately 2000 target lines.
//For example, image expansion from 240 lines to 400 lines
//  VDSTEP[17:0]  =  19'b00_0000_1001_1001_1010   and
//image contraction from 240 lines to 150 lines
//   VDSTEP[17:0]  =  19'b00_0001_1001_1001_1010.
#define G2SB_CTX6_G2VDDA_0_VDSTEP_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2VDDA_0_VDSTEP_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX6_G2VDDA_0_VDSTEP_SHIFT)
#define G2SB_CTX6_G2VDDA_0_VDSTEP_RANGE                 31:0
#define G2SB_CTX6_G2VDDA_0_VDSTEP_WOFFSET                       0x0
#define G2SB_CTX6_G2VDDA_0_VDSTEP_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VDDA_0_VDSTEP_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VDDA_0_VDSTEP_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VDDA_0_VDSTEP_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2VDDAINI_0  //{sb,sbm,index=12}
#define G2SB_CTX6_G2VDDAINI_0                   _MK_ADDR_CONST(0x6012)
#define G2SB_CTX6_G2VDDAINI_0_SECURE                    0x0
#define G2SB_CTX6_G2VDDAINI_0_WORD_COUNT                        0x1
#define G2SB_CTX6_G2VDDAINI_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VDDAINI_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VDDAINI_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VDDAINI_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VDDAINI_0_READ_MASK                         _MK_MASK_CONST(0xffff)
#define G2SB_CTX6_G2VDDAINI_0_WRITE_MASK                        _MK_MASK_CONST(0xffff)
//Vertical Scaling DDA Initial Values
//Vertical DDA Initial Value for Top-Field (VDTINI[7:0])
//This parameter specifies the fraction part of initial
// value of the DDA used for vertical scaling.
//Given a pair of consecutive source image lines representing
// positions 0.0 and 1.0, a destination line-image will be created
// at any position in [0.0, 1.0), that is specified by the fraction
// part of the vertical DDA. The 8-bit initial fraction value
// specifies the position of the first output (destination) line-image
// located between the first and the second input (source) line-images,
// respectively at position 0.0 and 1.0.
//This parameter provides a way to compensate relative displacement of
// top and bottom fields of a source image. Suppose, 2-to-1 interlaced
// original video field images #1 and #2 are in the image buffer, to be
// displayed in an overlay window. Assume that the #1 field image is the
// top-field. Using VDTINI = 8'hC0 for the top-field image and
// VDBINI = 8'h40 for the bottom-field image, for example, the two images
// from #1 and #2 fields get mapped to identically positioned destination
// images in the overlay window.
#define G2SB_CTX6_G2VDDAINI_0_VDTINI_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2VDDAINI_0_VDTINI_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX6_G2VDDAINI_0_VDTINI_SHIFT)
#define G2SB_CTX6_G2VDDAINI_0_VDTINI_RANGE                      7:0
#define G2SB_CTX6_G2VDDAINI_0_VDTINI_WOFFSET                    0x0
#define G2SB_CTX6_G2VDDAINI_0_VDTINI_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VDDAINI_0_VDTINI_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VDDAINI_0_VDTINI_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VDDAINI_0_VDTINI_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

//Vertical DDA Initial Value for Bottom-Field (VDBINI[7:0])
// (see description above)
#define G2SB_CTX6_G2VDDAINI_0_VDBINI_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_CTX6_G2VDDAINI_0_VDBINI_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX6_G2VDDAINI_0_VDBINI_SHIFT)
#define G2SB_CTX6_G2VDDAINI_0_VDBINI_RANGE                      15:8
#define G2SB_CTX6_G2VDDAINI_0_VDBINI_WOFFSET                    0x0
#define G2SB_CTX6_G2VDDAINI_0_VDBINI_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VDDAINI_0_VDBINI_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VDDAINI_0_VDBINI_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VDDAINI_0_VDBINI_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2HDDA_0  //{sb,sbm,index=13}
#define G2SB_CTX6_G2HDDA_0                      _MK_ADDR_CONST(0x6013)
#define G2SB_CTX6_G2HDDA_0_SECURE                       0x0
#define G2SB_CTX6_G2HDDA_0_WORD_COUNT                   0x1
#define G2SB_CTX6_G2HDDA_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2HDDA_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2HDDA_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2HDDA_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2HDDA_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2HDDA_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
//Horizontal Scaling DDA
//Reset value: xxxx-xxxxh
//Horizontal DDA Step (Increment) Value (HDSTEP[18:0])
// (upper 13 bits should be set to '0')
//This parameter specifies the increment value of the DDA used
//for horizontal scaling and it is in the form of 6-bit integer and
//12-bit fraction.  This value is detemined by the equation:
// (Actual_source_width-1-HDINI) / (Actual_destination_width-1)
// Truncate the rest bits to keep the 12bits fraction.
// Refer to bug 353260 for more detail.
//The 6-bit integer allows maximum contraction ratio of 1/64, and
// 12-bit fraction assures the maximum limit of accumulated error less
// than half pixel-spacing for up to approximately 2000 destination pixels.
//For example, image expansion from 720 pixels to 800 pixels
//       HDSTEP[17:0]  =  19'b000_0000_1110_0110_0111   and
//image contraction from 720 pixels to 250 pixels
// HDSTEP[17:0]  =  19'b000_0010_1110_0001_0101.
#define G2SB_CTX6_G2HDDA_0_HDSTEP_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2HDDA_0_HDSTEP_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX6_G2HDDA_0_HDSTEP_SHIFT)
#define G2SB_CTX6_G2HDDA_0_HDSTEP_RANGE                 31:0
#define G2SB_CTX6_G2HDDA_0_HDSTEP_WOFFSET                       0x0
#define G2SB_CTX6_G2HDDA_0_HDSTEP_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2HDDA_0_HDSTEP_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2HDDA_0_HDSTEP_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2HDDA_0_HDSTEP_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2HDDAINILS_0  //{sb,sbm,index=14}
#define G2SB_CTX6_G2HDDAINILS_0                 _MK_ADDR_CONST(0x6014)
#define G2SB_CTX6_G2HDDAINILS_0_SECURE                  0x0
#define G2SB_CTX6_G2HDDAINILS_0_WORD_COUNT                      0x1
#define G2SB_CTX6_G2HDDAINILS_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2HDDAINILS_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2HDDAINILS_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2HDDAINILS_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2HDDAINILS_0_READ_MASK                       _MK_MASK_CONST(0xff)
#define G2SB_CTX6_G2HDDAINILS_0_WRITE_MASK                      _MK_MASK_CONST(0xff)
//Horizontal Scaling DDA Initial Value
//Horizontal DDA Initial Value (HDINI[7:0])
//This parameter specifies the fraction part of initial value
// of the DDA used for horizontal scaling.
//Given a group of six consecutive source pixels that
// the two pixels at the center representing positions 0.0
//and 1.0, a destination pixel will be created at any
// position in [0.0, 1.0), that is specified by the fraction part
//of the horizontal DDA. The 8-bit initial fraction
// value specifies the position of the first output (destination)
//pixel located between the first and the second input (source)
// pixels, respectively at position 0.0 and 1.0.
//For horizontal scaling this value may normally be set to 0.
#define G2SB_CTX6_G2HDDAINILS_0_HDINI_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2HDDAINILS_0_HDINI_FIELD                     (_MK_MASK_CONST(0xff) << G2SB_CTX6_G2HDDAINILS_0_HDINI_SHIFT)
#define G2SB_CTX6_G2HDDAINILS_0_HDINI_RANGE                     7:0
#define G2SB_CTX6_G2HDDAINILS_0_HDINI_WOFFSET                   0x0
#define G2SB_CTX6_G2HDDAINILS_0_HDINI_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2HDDAINILS_0_HDINI_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2HDDAINILS_0_HDINI_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2HDDAINILS_0_HDINI_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2CSCFIRST_0  //{sb,sbm,index=15}
// The next 3 registers contain 8 parameters used by the YCbCr (YUV)
// to RGB color space conversion logic.  This logic can also be
// used for RGB gain/gamma correction in RGB to RGB modes, and for
// luma gain in YUV to YUV modes.  For SC20 two new parameters
// (G2U, G2V) have been added for RGB to YUV conversion.  These are
// in address 0x38.  The equtions have the form:
//    YUV->RGB
// R = (CYX * (yin + YOS)) + ((CUR * uin) + (CVR * vin))
// G = (CYX * (yin + YOS)) + ((CUG * uin) + (CVG * vin))
// B = (CYX * (yin + YOS)) + ((CUB * uin) + (CVB * vin))
//    RGB -> RGB
// R = (CVR * rin) + (CUR * bin)
// G = (CYX * (gin + YOS)) + ((CUG * bin) + (CVG * rin))
// B = (CUB * bin) + (CVB * rin)
//    YUV -> YUV (not what rtl does: see note below)
// Y = (CYX * yin + YOS) + ((CUB * uin) + (CVB * vin))
// U = (CUG * uin) + (CVG * vin)
// V = (CVR * vin) + (CUR * uin)
//    RGB -> YUV (new for SC20)
// Y = (CVB * rin) + (CUB * bin) + (CYX * gin) + YOS
// U = (CVG * rin) + (CUG * bin) + (G2U * gin)
// V = (CVR * rin) + (CUR * bin) + (G2V * gin)
//
// NOTE: YUV->YUV above is definitely wrong
// the cmodel *appears* to match the RTL with the following pseudo-code:
//
//if (yuv2rgb)
//    (r,g,b) = matrix*(y+sbreg_yos,u,v)
//    matrix:
//        sbreg_cyx, sbreg_cur, sbreg_cvr,
//        sbreg_cyx, sbreg_cug, sbreg_cvg,
//        sbreg_cyx, sbreg_cub, sbreg_cvb,
//else if (rgb2rgb)
//    (r,g,b) = matrix*(r,g+sbreg_yos,b)
//    matrix:
//        sbreg_cvr, 0,         sbreg_cur,
//        sbreg_cvg, sbreg_cyx, sbreg_cug,
//        sbreg_cvb, 0,         sbreg_cub,
//else if (yuv2yuv)
//    (y,u,v) = matrix*(y,u,v)
//    matrix:
//        sbreg_cub, 0,         sbreg_cvb,
//        sbreg_cug, sbreg_cyx, sbreg_cvg,
//        sbreg_cur, 0,         sbreg_cvr,
//else if (rgb2yuv)
//    (y,u,v) = matrix*(r,g,b) +(sbreg_yos,0,0)
//    matrix:
//        sbreg_cvb, sbreg_cyx, sbreg_cub,
//        sbreg_cvg, sbreg_g2u, sbreg_cug,
//        sbreg_cvr, sbreg_g2v, sbreg_cur,
#define G2SB_CTX6_G2CSCFIRST_0                  _MK_ADDR_CONST(0x6015)
#define G2SB_CTX6_G2CSCFIRST_0_SECURE                   0x0
#define G2SB_CTX6_G2CSCFIRST_0_WORD_COUNT                       0x1
#define G2SB_CTX6_G2CSCFIRST_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCFIRST_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCFIRST_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCFIRST_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCFIRST_0_READ_MASK                        _MK_MASK_CONST(0xff3ff3ff)
#define G2SB_CTX6_G2CSCFIRST_0_WRITE_MASK                       _MK_MASK_CONST(0xff3ff3ff)
// multiplier for U/B for Y or B generation.
// consists of a sign bit and 9-bit magnitude (s2.7).
// For YUV->RGB, the recommended value is 2.0172 (decimal) or 0x102.
// If source data is in RGB format, this parameter
// may be used as gain adjustment for B component.
// For SC20, this register changes precision when doing RGB to YUV
// conversion (SIFMT=1xxx, DIFMT=0xxx).  CUB becomes s1.8 and the
// recommended value is +0.098 or 0x019
//11-10  Reserved
#define G2SB_CTX6_G2CSCFIRST_0_CUB_SHIFT                        _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2CSCFIRST_0_CUB_FIELD                        (_MK_MASK_CONST(0x3ff) << G2SB_CTX6_G2CSCFIRST_0_CUB_SHIFT)
#define G2SB_CTX6_G2CSCFIRST_0_CUB_RANGE                        9:0
#define G2SB_CTX6_G2CSCFIRST_0_CUB_WOFFSET                      0x0
#define G2SB_CTX6_G2CSCFIRST_0_CUB_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCFIRST_0_CUB_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCFIRST_0_CUB_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCFIRST_0_CUB_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// multiplier for V/R for V or R generation.
//This parameter consists of a sign bit and 9-bit magnitude (s2.7)
// For YUV->RGB the recommended value is 1.5960 (decimal) or 0x0CC
//If source data is in RGB format, this parameter
// may be used as gain adjustment for R component.
// For RGB->YUV the recommended value is +0.439 (decimal) or 0x038
//23-22  Reserved
#define G2SB_CTX6_G2CSCFIRST_0_CVR_SHIFT                        _MK_SHIFT_CONST(12)
#define G2SB_CTX6_G2CSCFIRST_0_CVR_FIELD                        (_MK_MASK_CONST(0x3ff) << G2SB_CTX6_G2CSCFIRST_0_CVR_SHIFT)
#define G2SB_CTX6_G2CSCFIRST_0_CVR_RANGE                        21:12
#define G2SB_CTX6_G2CSCFIRST_0_CVR_WOFFSET                      0x0
#define G2SB_CTX6_G2CSCFIRST_0_CVR_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCFIRST_0_CVR_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCFIRST_0_CVR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCFIRST_0_CVR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

//Y-Offset (YOFFSET[7:0]) for YUV generation
//This parameter consists of 8-bit 2's complement in the range [-128,127].
// For YUV->RGB the recommended value is -16 (decimal) or 0xF0
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is +16 (decimal) or 0x10
#define G2SB_CTX6_G2CSCFIRST_0_YOS_SHIFT                        _MK_SHIFT_CONST(24)
#define G2SB_CTX6_G2CSCFIRST_0_YOS_FIELD                        (_MK_MASK_CONST(0xff) << G2SB_CTX6_G2CSCFIRST_0_YOS_SHIFT)
#define G2SB_CTX6_G2CSCFIRST_0_YOS_RANGE                        31:24
#define G2SB_CTX6_G2CSCFIRST_0_YOS_WOFFSET                      0x0
#define G2SB_CTX6_G2CSCFIRST_0_YOS_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCFIRST_0_YOS_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCFIRST_0_YOS_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCFIRST_0_YOS_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2CSCSECOND_0  //{sb,sbm,index=16}
#define G2SB_CTX6_G2CSCSECOND_0                 _MK_ADDR_CONST(0x6016)
#define G2SB_CTX6_G2CSCSECOND_0_SECURE                  0x0
#define G2SB_CTX6_G2CSCSECOND_0_WORD_COUNT                      0x1
#define G2SB_CTX6_G2CSCSECOND_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCSECOND_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCSECOND_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCSECOND_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCSECOND_0_READ_MASK                       _MK_MASK_CONST(0xff3ff1ff)
#define G2SB_CTX6_G2CSCSECOND_0_WRITE_MASK                      _MK_MASK_CONST(0xff3ff1ff)
// multiplier for U/B for U or G generation.
// consists of a sign bit and 8-bit magnitude (s1.7)
// For YUV->RGB the recommended value is -0.3918 (decimal) or 0x132
// For  RGB->RGB, this parameter should be set to 0
// For  YUV->YUV, this parameter should be set to 1 (0x080)
// For RGB->YUV the recommended value is +0.439 (decimal) or 0x038
//11-9  Reserved
#define G2SB_CTX6_G2CSCSECOND_0_CUG_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2CSCSECOND_0_CUG_FIELD                       (_MK_MASK_CONST(0x1ff) << G2SB_CTX6_G2CSCSECOND_0_CUG_SHIFT)
#define G2SB_CTX6_G2CSCSECOND_0_CUG_RANGE                       8:0
#define G2SB_CTX6_G2CSCSECOND_0_CUG_WOFFSET                     0x0
#define G2SB_CTX6_G2CSCSECOND_0_CUG_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCSECOND_0_CUG_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCSECOND_0_CUG_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCSECOND_0_CUG_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// multiplier for U/B for V or R generation.
//This parameter consists of a sign bit and 9-bit magnitude (s2.7)
//  For YUV->RGB normally this parameter is programmed to 0.0.
// This parameter takes non-zero value if hue is rotated.
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is -0.071 (decimal) or 0x209
//23-22 Reserved
#define G2SB_CTX6_G2CSCSECOND_0_CUR_SHIFT                       _MK_SHIFT_CONST(12)
#define G2SB_CTX6_G2CSCSECOND_0_CUR_FIELD                       (_MK_MASK_CONST(0x3ff) << G2SB_CTX6_G2CSCSECOND_0_CUR_SHIFT)
#define G2SB_CTX6_G2CSCSECOND_0_CUR_RANGE                       21:12
#define G2SB_CTX6_G2CSCSECOND_0_CUR_WOFFSET                     0x0
#define G2SB_CTX6_G2CSCSECOND_0_CUR_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCSECOND_0_CUR_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCSECOND_0_CUR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCSECOND_0_CUR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// multiplier for Y/G (G gain)
//This positive-only parameter consists of 8-bit magnitude (1.7)
// For YUV->YUV the recommended value is 1.1644 (decimal) or 0x95
// For YUV->YUV or RGB->RGB this may be used as gain adjustment
// for Y or G component.
// For RGB->YUV the recommended value is +0.504 (decimal) or 0x041
#define G2SB_CTX6_G2CSCSECOND_0_CYX_SHIFT                       _MK_SHIFT_CONST(24)
#define G2SB_CTX6_G2CSCSECOND_0_CYX_FIELD                       (_MK_MASK_CONST(0xff) << G2SB_CTX6_G2CSCSECOND_0_CYX_SHIFT)
#define G2SB_CTX6_G2CSCSECOND_0_CYX_RANGE                       31:24
#define G2SB_CTX6_G2CSCSECOND_0_CYX_WOFFSET                     0x0
#define G2SB_CTX6_G2CSCSECOND_0_CYX_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCSECOND_0_CYX_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCSECOND_0_CYX_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCSECOND_0_CYX_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2CSCTHIRD_0  //{sb,sbm,index=17}
#define G2SB_CTX6_G2CSCTHIRD_0                  _MK_ADDR_CONST(0x6017)
#define G2SB_CTX6_G2CSCTHIRD_0_SECURE                   0x0
#define G2SB_CTX6_G2CSCTHIRD_0_WORD_COUNT                       0x1
#define G2SB_CTX6_G2CSCTHIRD_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCTHIRD_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCTHIRD_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCTHIRD_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCTHIRD_0_READ_MASK                        _MK_MASK_CONST(0x3ff01ff)
#define G2SB_CTX6_G2CSCTHIRD_0_WRITE_MASK                       _MK_MASK_CONST(0x3ff01ff)
// multiplier for V/R for U or G generation.
//This parameter consists of a sign bit and 8-bit magnitude (s1.7)
// For YUV->RGB the recommended value is -0.8130 (decimal) or 0x168
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is -0.148 (decimal) or 0x113
#define G2SB_CTX6_G2CSCTHIRD_0_CVG_SHIFT                        _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2CSCTHIRD_0_CVG_FIELD                        (_MK_MASK_CONST(0x1ff) << G2SB_CTX6_G2CSCTHIRD_0_CVG_SHIFT)
#define G2SB_CTX6_G2CSCTHIRD_0_CVG_RANGE                        8:0
#define G2SB_CTX6_G2CSCTHIRD_0_CVG_WOFFSET                      0x0
#define G2SB_CTX6_G2CSCTHIRD_0_CVG_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCTHIRD_0_CVG_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCTHIRD_0_CVG_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCTHIRD_0_CVG_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// multiplier for V/R for Y or B generation.
//This parameter consists of a sign bit and 9-bit magnitude (s2.7)
//For YUV->RGB, normally this parameter is programmed to 0.0.
// This coefficient takes non-zero value if hue is rotated.
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is +0.257 (decimal) or 0x021
#define G2SB_CTX6_G2CSCTHIRD_0_CVB_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_CTX6_G2CSCTHIRD_0_CVB_FIELD                        (_MK_MASK_CONST(0x3ff) << G2SB_CTX6_G2CSCTHIRD_0_CVB_SHIFT)
#define G2SB_CTX6_G2CSCTHIRD_0_CVB_RANGE                        25:16
#define G2SB_CTX6_G2CSCTHIRD_0_CVB_WOFFSET                      0x0
#define G2SB_CTX6_G2CSCTHIRD_0_CVB_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCTHIRD_0_CVB_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCTHIRD_0_CVB_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCTHIRD_0_CVB_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// StretchBLT, Color/Chroma Key Lower Limit Register

// Register G2SB_CTX6_G2CMKEYL_0  //{sb,sbm,index=18}
// When key generation is enabled, the value of this register is the
// lower color/chroma limit and G2CMKEYU is the upper color/chroma
// limit for component pixel data.
// Three component signal values (YCrCb/YUV or RGB) of
// every output pixel are compared to a set of three
// ranges that are specified by three pairs of lower and
// upper color/chroma key values.  If the Key Polarity is
// 0, the Key is set to 1 only when all three component values
// of an input pixel are respectively within the set
// of ranges (inclusive of the limit values), else the Key is set to 0.
// If the Key Polarity is 1, the Key is set to 1
// when any of the three component values of an input pixel
// are outside the set of ranges, else the Key is set to 0.
#define G2SB_CTX6_G2CMKEYL_0                    _MK_ADDR_CONST(0x6018)
#define G2SB_CTX6_G2CMKEYL_0_SECURE                     0x0
#define G2SB_CTX6_G2CMKEYL_0_WORD_COUNT                         0x1
#define G2SB_CTX6_G2CMKEYL_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMKEYL_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMKEYL_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMKEYL_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMKEYL_0_READ_MASK                  _MK_MASK_CONST(0xffffff)
#define G2SB_CTX6_G2CMKEYL_0_WRITE_MASK                         _MK_MASK_CONST(0xffffff)
// B or Y Color/Chroma Key Lower Limit (CKBL[7:0])
#define G2SB_CTX6_G2CMKEYL_0_CKBL_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2CMKEYL_0_CKBL_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX6_G2CMKEYL_0_CKBL_SHIFT)
#define G2SB_CTX6_G2CMKEYL_0_CKBL_RANGE                 7:0
#define G2SB_CTX6_G2CMKEYL_0_CKBL_WOFFSET                       0x0
#define G2SB_CTX6_G2CMKEYL_0_CKBL_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMKEYL_0_CKBL_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMKEYL_0_CKBL_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMKEYL_0_CKBL_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//G or Cb Color Chroma Key Lower Limit (CKGL[7:0])
// Cb signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity
// from the minimum signal level to the maximum signal level.
#define G2SB_CTX6_G2CMKEYL_0_CKGL_SHIFT                 _MK_SHIFT_CONST(8)
#define G2SB_CTX6_G2CMKEYL_0_CKGL_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX6_G2CMKEYL_0_CKGL_SHIFT)
#define G2SB_CTX6_G2CMKEYL_0_CKGL_RANGE                 15:8
#define G2SB_CTX6_G2CMKEYL_0_CKGL_WOFFSET                       0x0
#define G2SB_CTX6_G2CMKEYL_0_CKGL_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMKEYL_0_CKGL_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMKEYL_0_CKGL_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMKEYL_0_CKGL_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//R or Cr Color Chroma Key Lower Limit (CKRL[7:0])
// Cr signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity from
// the minimum signal level to the maximum signal level.
//31-24 Reserved
#define G2SB_CTX6_G2CMKEYL_0_CKRL_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_CTX6_G2CMKEYL_0_CKRL_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX6_G2CMKEYL_0_CKRL_SHIFT)
#define G2SB_CTX6_G2CMKEYL_0_CKRL_RANGE                 23:16
#define G2SB_CTX6_G2CMKEYL_0_CKRL_WOFFSET                       0x0
#define G2SB_CTX6_G2CMKEYL_0_CKRL_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMKEYL_0_CKRL_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMKEYL_0_CKRL_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMKEYL_0_CKRL_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//StretchBLT, Color/Chroma Key Upper Limit Register

// Register G2SB_CTX6_G2CMKEYU_0  //{sb,sbm,index=19}
#define G2SB_CTX6_G2CMKEYU_0                    _MK_ADDR_CONST(0x6019)
#define G2SB_CTX6_G2CMKEYU_0_SECURE                     0x0
#define G2SB_CTX6_G2CMKEYU_0_WORD_COUNT                         0x1
#define G2SB_CTX6_G2CMKEYU_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMKEYU_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMKEYU_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMKEYU_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMKEYU_0_READ_MASK                  _MK_MASK_CONST(0xffffff)
#define G2SB_CTX6_G2CMKEYU_0_WRITE_MASK                         _MK_MASK_CONST(0xffffff)
//This is B or Y color/chroma key upper limit value.
#define G2SB_CTX6_G2CMKEYU_0_CKBU_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2CMKEYU_0_CKBU_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX6_G2CMKEYU_0_CKBU_SHIFT)
#define G2SB_CTX6_G2CMKEYU_0_CKBU_RANGE                 7:0
#define G2SB_CTX6_G2CMKEYU_0_CKBU_WOFFSET                       0x0
#define G2SB_CTX6_G2CMKEYU_0_CKBU_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMKEYU_0_CKBU_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMKEYU_0_CKBU_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMKEYU_0_CKBU_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// G or Cb Color/Chroma Key Upper Limit (CKGU[7:0])
// Cb signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity
// the minimum signal level to the maximum signal level.
#define G2SB_CTX6_G2CMKEYU_0_CKGU_SHIFT                 _MK_SHIFT_CONST(8)
#define G2SB_CTX6_G2CMKEYU_0_CKGU_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX6_G2CMKEYU_0_CKGU_SHIFT)
#define G2SB_CTX6_G2CMKEYU_0_CKGU_RANGE                 15:8
#define G2SB_CTX6_G2CMKEYU_0_CKGU_WOFFSET                       0x0
#define G2SB_CTX6_G2CMKEYU_0_CKGU_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMKEYU_0_CKGU_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMKEYU_0_CKGU_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMKEYU_0_CKGU_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// R or Cr Color Chroma Key Upper Limit (CKRU[7:0])
// Cr signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity from
// the minimum signal level to the maximum signal level.
//31-24  Reserved
#define G2SB_CTX6_G2CMKEYU_0_CKRU_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_CTX6_G2CMKEYU_0_CKRU_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX6_G2CMKEYU_0_CKRU_SHIFT)
#define G2SB_CTX6_G2CMKEYU_0_CKRU_RANGE                 23:16
#define G2SB_CTX6_G2CMKEYU_0_CKRU_WOFFSET                       0x0
#define G2SB_CTX6_G2CMKEYU_0_CKRU_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMKEYU_0_CKRU_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMKEYU_0_CKRU_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CMKEYU_0_CKRU_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// StretchBLT, Source Image Data U base address A-buffer

// Register G2SB_CTX6_G2UBA_A_0  //{sb,sbm,index=1a}
#define G2SB_CTX6_G2UBA_A_0                     _MK_ADDR_CONST(0x601a)
#define G2SB_CTX6_G2UBA_A_0_SECURE                      0x0
#define G2SB_CTX6_G2UBA_A_0_WORD_COUNT                  0x1
#define G2SB_CTX6_G2UBA_A_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2UBA_A_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2UBA_A_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2UBA_A_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2UBA_A_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2UBA_A_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Start Address of  Source U-image Area, 4:2:0 Format.
// This parameter specifies the start address of source image stored in
// the image buffer memory.
// The [3:0] bits have to be 0, since memory client will assemble YUV into one
// 422 format.
#define G2SB_CTX6_G2UBA_A_0_SU1SA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2UBA_A_0_SU1SA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX6_G2UBA_A_0_SU1SA_SHIFT)
#define G2SB_CTX6_G2UBA_A_0_SU1SA_RANGE                 31:0
#define G2SB_CTX6_G2UBA_A_0_SU1SA_WOFFSET                       0x0
#define G2SB_CTX6_G2UBA_A_0_SU1SA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2UBA_A_0_SU1SA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2UBA_A_0_SU1SA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2UBA_A_0_SU1SA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2VBA_A_0  //{sb,sbm,index=1b}
#define G2SB_CTX6_G2VBA_A_0                     _MK_ADDR_CONST(0x601b)
#define G2SB_CTX6_G2VBA_A_0_SECURE                      0x0
#define G2SB_CTX6_G2VBA_A_0_WORD_COUNT                  0x1
#define G2SB_CTX6_G2VBA_A_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VBA_A_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VBA_A_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VBA_A_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VBA_A_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2VBA_A_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Start Address of  Source V-image Area, 4:2:0 Format.
// This parameter specifies the start address of  source image stored in
// the image buffer memory.
// The [3:0] bits have to be 0, since memory client will assemble YUV into one
// 422 format.
#define G2SB_CTX6_G2VBA_A_0_SV1SA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2VBA_A_0_SV1SA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX6_G2VBA_A_0_SV1SA_SHIFT)
#define G2SB_CTX6_G2VBA_A_0_SV1SA_RANGE                 31:0
#define G2SB_CTX6_G2VBA_A_0_SV1SA_WOFFSET                       0x0
#define G2SB_CTX6_G2VBA_A_0_SV1SA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VBA_A_0_SV1SA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VBA_A_0_SV1SA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VBA_A_0_SV1SA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2SBFORMAT_0  //{sb,sbm,index=1c}
#define G2SB_CTX6_G2SBFORMAT_0                  _MK_ADDR_CONST(0x601c)
#define G2SB_CTX6_G2SBFORMAT_0_SECURE                   0x0
#define G2SB_CTX6_G2SBFORMAT_0_WORD_COUNT                       0x1
#define G2SB_CTX6_G2SBFORMAT_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SBFORMAT_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SBFORMAT_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SBFORMAT_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SBFORMAT_0_READ_MASK                        _MK_MASK_CONST(0xffffdf1f)
#define G2SB_CTX6_G2SBFORMAT_0_WRITE_MASK                       _MK_MASK_CONST(0xffffdf1f)
// This parameter defines the data format of source input.
// There are two groups of data formats, RGB format and YCbCr (YUV) format.
// CbCr (UV) components may be represented in either offset binary or 2's complement.
//00000 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00001 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00010 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00011 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00100 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00101 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00110 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00111 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//01000 B5G6R5 5-6-5 {R[4:0], G[5:0], B[4:0]}
//01001 RESERVED
//01010 RESERVED
//01011 RESERVED
//01100 B5G6R5 5-6-5 Byte-swapped {G[2:0], B[4:0], R[4:0], G[5:3]}
//01101 RESERVED
//01110 R8G8B8A8
//01111 B8G8R8A8
//1xxxx RESERVED
//
// StretchBlit Inputs
// ==================
// RGB    inputs = {B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8}
// YUV420 input  = {YUV420 is converted into 4:2:2 UYVY via memory client}
// YUV422 inputs = {U8Y8V8Y8_OB, Y8U8Y8V8_OB, V8Y8U8Y8_OB, U8Y8V8Y8_OB, U8Y8V8Y8_TC, Y8U8Y8V8_TC, Y8V8Y8U8_TC, V8Y8U8Y8_TC}
//
// StretchBlit Outputs
// ===================
// RGB    outputs = {B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8}
// YUV422 outputs = {U8Y8V8Y8_OB, Y8U8Y8V8_OB, V8Y8U8Y8_OB, U8Y8V8Y8_OB, U8Y8V8Y8_TC, Y8U8Y8V8_TC, Y8V8Y8U8_TC, V8Y8U8Y8_TC}
//
// StretchBlit Input/Output Rules
// ==============================
//
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|    src format                                                | internal sb format |      dst format                                           |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|  B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8                        |      R8G8B8A8      |  B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8                     |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|  U8Y8V8Y8_*, Y8U8Y8V8_*, V8Y8U8Y8_*, U8Y8V8Y8_*, YUV420      |      YUV 4:4:4     |  U8Y8V8Y8_*, Y8U8Y8V8_*, V8Y8U8Y8_*, U8Y8V8Y8_*           |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|  U8Y8V8Y8_*, Y8U8Y8V8_*, V8Y8U8Y8_*, U8Y8V8Y8_*, YUV420      |      YUV 4:4:4     |  B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8                     |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//
//  StretchBlit color space converter supports YUV->RGB, YUV->YUV (gain) and RGB->RGB (gain).  There is no support for RGB->YUV.
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_FIELD                      (_MK_MASK_CONST(0x1f) << G2SB_CTX6_G2SBFORMAT_0_SIFMT_SHIFT)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_RANGE                      4:0
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_WOFFSET                    0x0
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_U8Y8V8Y8_OB                        _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_Y8U8Y8V8_OB                        _MK_ENUM_CONST(1)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_Y8V8Y8U8_OB                        _MK_ENUM_CONST(2)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_V8Y8U8Y8_OB                        _MK_ENUM_CONST(3)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_U8Y8V8Y8_TC                        _MK_ENUM_CONST(4)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_Y8U8Y8V8_TC                        _MK_ENUM_CONST(5)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_Y8V8Y8U8_TC                        _MK_ENUM_CONST(6)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_V8Y8U8Y8_TC                        _MK_ENUM_CONST(7)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_B5G6R5                     _MK_ENUM_CONST(8)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_RESERVED9                  _MK_ENUM_CONST(9)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_RESERVED10                 _MK_ENUM_CONST(10)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_RESERVED11                 _MK_ENUM_CONST(11)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_B5G6R5BS                   _MK_ENUM_CONST(12)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_RESERVED13                 _MK_ENUM_CONST(13)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_R8G8B8A8                   _MK_ENUM_CONST(14)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_B8G8R8A8                   _MK_ENUM_CONST(15)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_RESERVED16                 _MK_ENUM_CONST(16)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_RESERVED17                 _MK_ENUM_CONST(17)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_RESERVED18                 _MK_ENUM_CONST(18)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_RESERVED19                 _MK_ENUM_CONST(19)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_RESERVED20                 _MK_ENUM_CONST(20)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_RESERVED21                 _MK_ENUM_CONST(21)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_RESERVED22                 _MK_ENUM_CONST(22)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_RESERVED23                 _MK_ENUM_CONST(23)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_RESERVED24                 _MK_ENUM_CONST(24)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_RESERVED25                 _MK_ENUM_CONST(25)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_RESERVED26                 _MK_ENUM_CONST(26)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_RESERVED27                 _MK_ENUM_CONST(27)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_RESERVED28                 _MK_ENUM_CONST(28)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_RESERVED29                 _MK_ENUM_CONST(29)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_RESERVED30                 _MK_ENUM_CONST(30)
#define G2SB_CTX6_G2SBFORMAT_0_SIFMT_RESERVED31                 _MK_ENUM_CONST(31)

//Destination Image Data FormatThis parameter defines the data format of distination output.
// There are two groups of data formats, RGB and YCbCr (YUV) format.
// CbCr (UV) components may be represented in either offset binary or 2's complement.
//00000 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00001 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00010 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00011 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00100 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00101 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00110 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00111 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//01000 bpp16 5-6-5 {R[4:0], G[5:0], B[4:0]}
//01001 RESERVED
//01010 RESERVED
//01011 RESERVED
//01100 bpp16 5-6-5 Byte-swapped {G[2:0], B[4:0], R[4:0], G[5:3]}
//01101 RESERVED
//01110 R8G8B8A8
//01111 B8G8R8A8
//1xxxx RESERVED
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_FIELD                      (_MK_MASK_CONST(0x1f) << G2SB_CTX6_G2SBFORMAT_0_DIFMT_SHIFT)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_RANGE                      12:8
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_WOFFSET                    0x0
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_U8Y8V8Y8_OB                        _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_Y8U8Y8V8_OB                        _MK_ENUM_CONST(1)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_Y8V8Y8U8_OB                        _MK_ENUM_CONST(2)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_V8Y8U8Y8_OB                        _MK_ENUM_CONST(3)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_U8Y8V8Y8_TC                        _MK_ENUM_CONST(4)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_Y8U8Y8V8_TC                        _MK_ENUM_CONST(5)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_Y8V8Y8U8_TC                        _MK_ENUM_CONST(6)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_V8Y8U8Y8_TC                        _MK_ENUM_CONST(7)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_B5G6R5                     _MK_ENUM_CONST(8)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_RESERVED9                  _MK_ENUM_CONST(9)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_RESERVED10                 _MK_ENUM_CONST(10)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_RESERVED11                 _MK_ENUM_CONST(11)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_B5G6R5BS                   _MK_ENUM_CONST(12)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_RESERVED13                 _MK_ENUM_CONST(13)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_R8G8B8A8                   _MK_ENUM_CONST(14)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_B8G8R8A8                   _MK_ENUM_CONST(15)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_RESERVED16                 _MK_ENUM_CONST(16)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_RESERVED17                 _MK_ENUM_CONST(17)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_RESERVED18                 _MK_ENUM_CONST(18)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_RESERVED19                 _MK_ENUM_CONST(19)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_RESERVED20                 _MK_ENUM_CONST(20)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_RESERVED21                 _MK_ENUM_CONST(21)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_RESERVED22                 _MK_ENUM_CONST(22)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_RESERVED23                 _MK_ENUM_CONST(23)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_RESERVED24                 _MK_ENUM_CONST(24)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_RESERVED25                 _MK_ENUM_CONST(25)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_RESERVED26                 _MK_ENUM_CONST(26)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_RESERVED27                 _MK_ENUM_CONST(27)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_RESERVED28                 _MK_ENUM_CONST(28)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_RESERVED29                 _MK_ENUM_CONST(29)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_RESERVED30                 _MK_ENUM_CONST(30)
#define G2SB_CTX6_G2SBFORMAT_0_DIFMT_RESERVED31                 _MK_ENUM_CONST(31)

// ENABLE - SB needs to send a RAISE_BUFFER control bit to EPP
// DISABLE - do nothing.
#define G2SB_CTX6_G2SBFORMAT_0_RAISEBUFFEREN_SHIFT                      _MK_SHIFT_CONST(14)
#define G2SB_CTX6_G2SBFORMAT_0_RAISEBUFFEREN_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2SBFORMAT_0_RAISEBUFFEREN_SHIFT)
#define G2SB_CTX6_G2SBFORMAT_0_RAISEBUFFEREN_RANGE                      14:14
#define G2SB_CTX6_G2SBFORMAT_0_RAISEBUFFEREN_WOFFSET                    0x0
#define G2SB_CTX6_G2SBFORMAT_0_RAISEBUFFEREN_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SBFORMAT_0_RAISEBUFFEREN_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SBFORMAT_0_RAISEBUFFEREN_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SBFORMAT_0_RAISEBUFFEREN_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SBFORMAT_0_RAISEBUFFEREN_DISABLE                    _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2SBFORMAT_0_RAISEBUFFEREN_ENABLE                     _MK_ENUM_CONST(1)

// ENABLE - SB needs to send a RAISE_FRAME control bit to EPP
// DISABLE - do nothing.
#define G2SB_CTX6_G2SBFORMAT_0_RAISEFRAMEEN_SHIFT                       _MK_SHIFT_CONST(15)
#define G2SB_CTX6_G2SBFORMAT_0_RAISEFRAMEEN_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2SBFORMAT_0_RAISEFRAMEEN_SHIFT)
#define G2SB_CTX6_G2SBFORMAT_0_RAISEFRAMEEN_RANGE                       15:15
#define G2SB_CTX6_G2SBFORMAT_0_RAISEFRAMEEN_WOFFSET                     0x0
#define G2SB_CTX6_G2SBFORMAT_0_RAISEFRAMEEN_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SBFORMAT_0_RAISEFRAMEEN_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SBFORMAT_0_RAISEFRAMEEN_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SBFORMAT_0_RAISEFRAMEEN_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SBFORMAT_0_RAISEFRAMEEN_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2SBFORMAT_0_RAISEFRAMEEN_ENABLE                      _MK_ENUM_CONST(1)

// Raise buffer vector value.
#define G2SB_CTX6_G2SBFORMAT_0_RAISEBUFFERVALUE_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX6_G2SBFORMAT_0_RAISEBUFFERVALUE_FIELD                   (_MK_MASK_CONST(0xff) << G2SB_CTX6_G2SBFORMAT_0_RAISEBUFFERVALUE_SHIFT)
#define G2SB_CTX6_G2SBFORMAT_0_RAISEBUFFERVALUE_RANGE                   23:16
#define G2SB_CTX6_G2SBFORMAT_0_RAISEBUFFERVALUE_WOFFSET                 0x0
#define G2SB_CTX6_G2SBFORMAT_0_RAISEBUFFERVALUE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SBFORMAT_0_RAISEBUFFERVALUE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SBFORMAT_0_RAISEBUFFERVALUE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SBFORMAT_0_RAISEBUFFERVALUE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Raise Fram vector value.
#define G2SB_CTX6_G2SBFORMAT_0_RAISEFRAMEVALUE_SHIFT                    _MK_SHIFT_CONST(24)
#define G2SB_CTX6_G2SBFORMAT_0_RAISEFRAMEVALUE_FIELD                    (_MK_MASK_CONST(0xff) << G2SB_CTX6_G2SBFORMAT_0_RAISEFRAMEVALUE_SHIFT)
#define G2SB_CTX6_G2SBFORMAT_0_RAISEFRAMEVALUE_RANGE                    31:24
#define G2SB_CTX6_G2SBFORMAT_0_RAISEFRAMEVALUE_WOFFSET                  0x0
#define G2SB_CTX6_G2SBFORMAT_0_RAISEFRAMEVALUE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SBFORMAT_0_RAISEFRAMEVALUE_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SBFORMAT_0_RAISEFRAMEVALUE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SBFORMAT_0_RAISEFRAMEVALUE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2CONTROLSB_0  //{sb,sbm,index=1d}
#define G2SB_CTX6_G2CONTROLSB_0                 _MK_ADDR_CONST(0x601d)
#define G2SB_CTX6_G2CONTROLSB_0_SECURE                  0x0
#define G2SB_CTX6_G2CONTROLSB_0_WORD_COUNT                      0x1
#define G2SB_CTX6_G2CONTROLSB_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_RESET_MASK                      _MK_MASK_CONST(0xdfffa4f8)
#define G2SB_CTX6_G2CONTROLSB_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_READ_MASK                       _MK_MASK_CONST(0xdfffa7f8)
#define G2SB_CTX6_G2CONTROLSB_0_WRITE_MASK                      _MK_MASK_CONST(0xdfffa7f8)
//yuv422 plannar rotated
#define G2SB_CTX6_G2CONTROLSB_0_YUV422ROTATION_SHIFT                    _MK_SHIFT_CONST(3)
#define G2SB_CTX6_G2CONTROLSB_0_YUV422ROTATION_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLSB_0_YUV422ROTATION_SHIFT)
#define G2SB_CTX6_G2CONTROLSB_0_YUV422ROTATION_RANGE                    3:3
#define G2SB_CTX6_G2CONTROLSB_0_YUV422ROTATION_WOFFSET                  0x0
#define G2SB_CTX6_G2CONTROLSB_0_YUV422ROTATION_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_YUV422ROTATION_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLSB_0_YUV422ROTATION_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_YUV422ROTATION_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//source data is yuv422 planar valid when imode==PLANAR
#define G2SB_CTX6_G2CONTROLSB_0_YUV422PLANAR_SHIFT                      _MK_SHIFT_CONST(4)
#define G2SB_CTX6_G2CONTROLSB_0_YUV422PLANAR_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLSB_0_YUV422PLANAR_SHIFT)
#define G2SB_CTX6_G2CONTROLSB_0_YUV422PLANAR_RANGE                      4:4
#define G2SB_CTX6_G2CONTROLSB_0_YUV422PLANAR_WOFFSET                    0x0
#define G2SB_CTX6_G2CONTROLSB_0_YUV422PLANAR_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_YUV422PLANAR_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLSB_0_YUV422PLANAR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_YUV422PLANAR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Source (input) Data Mode  (IMODE) This parameter defines the data mode of source input.
// 0: Multiplexed Mode (data format is specified by SIFMT[2:0])
// One block of source data in the Image Buffer memory contains
// multiplexed component signals.
// 1: Planar mode, 4:2:0 YUV (SIFMT[2] specifies data format of U/V components)
// Three blocks of source data in the Image Buffer memory contain separate
// Y, U, and V component signals.
//
//  For circular buffer input to gr2d, the input format can not be planar.  It must be multiplex.
//    i.e. no YUV420 planar circular buffer input to gr2d.
#define G2SB_CTX6_G2CONTROLSB_0_IMODE_SHIFT                     _MK_SHIFT_CONST(5)
#define G2SB_CTX6_G2CONTROLSB_0_IMODE_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLSB_0_IMODE_SHIFT)
#define G2SB_CTX6_G2CONTROLSB_0_IMODE_RANGE                     5:5
#define G2SB_CTX6_G2CONTROLSB_0_IMODE_WOFFSET                   0x0
#define G2SB_CTX6_G2CONTROLSB_0_IMODE_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_IMODE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLSB_0_IMODE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_IMODE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_IMODE_MULTIPLEX                 _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLSB_0_IMODE_PLANAR                    _MK_ENUM_CONST(1)

//enable alpha vertical filter
#define G2SB_CTX6_G2CONTROLSB_0_ENAVF_SHIFT                     _MK_SHIFT_CONST(6)
#define G2SB_CTX6_G2CONTROLSB_0_ENAVF_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLSB_0_ENAVF_SHIFT)
#define G2SB_CTX6_G2CONTROLSB_0_ENAVF_RANGE                     6:6
#define G2SB_CTX6_G2CONTROLSB_0_ENAVF_WOFFSET                   0x0
#define G2SB_CTX6_G2CONTROLSB_0_ENAVF_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_ENAVF_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLSB_0_ENAVF_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_ENAVF_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_ENAVF_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLSB_0_ENAVF_ENABLE                    _MK_ENUM_CONST(1)

// enable horizontal alpha filtering
// if disabled, use the alpha value of third tap for output pixel
//U,V line stride in 4:2:0  Format,
#define G2SB_CTX6_G2CONTROLSB_0_ENAHF_SHIFT                     _MK_SHIFT_CONST(7)
#define G2SB_CTX6_G2CONTROLSB_0_ENAHF_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLSB_0_ENAHF_SHIFT)
#define G2SB_CTX6_G2CONTROLSB_0_ENAHF_RANGE                     7:7
#define G2SB_CTX6_G2CONTROLSB_0_ENAHF_WOFFSET                   0x0
#define G2SB_CTX6_G2CONTROLSB_0_ENAHF_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_ENAHF_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLSB_0_ENAHF_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_ENAHF_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_ENAHF_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLSB_0_ENAHF_ENABLE                    _MK_ENUM_CONST(1)

//   00= 1/2 of Luma Buffer Stride; in this case
//       Luma Buffer Stride should be multiple
//       of 2 bytes.
//   01= Equal to Luma Buffer Stride
//   10= 1/4 of Luma Buffer Stride; in this case
//       Luma Buffer Stride should be multiple
//       of 4 bytes.
//   11= use uvstride.
// Note: Use care when using a tiled surface, since 1/2 or 1/4
//   of luma stride may yield an invalid pitch (stride).
#define G2SB_CTX6_G2CONTROLSB_0_UVST_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_CTX6_G2CONTROLSB_0_UVST_FIELD                      (_MK_MASK_CONST(0x3) << G2SB_CTX6_G2CONTROLSB_0_UVST_SHIFT)
#define G2SB_CTX6_G2CONTROLSB_0_UVST_RANGE                      9:8
#define G2SB_CTX6_G2CONTROLSB_0_UVST_WOFFSET                    0x0
#define G2SB_CTX6_G2CONTROLSB_0_UVST_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_UVST_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_UVST_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_UVST_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_UVST_UVS2X                      _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLSB_0_UVST_UVS1X                      _MK_ENUM_CONST(1)
#define G2SB_CTX6_G2CONTROLSB_0_UVST_UVS4X                      _MK_ENUM_CONST(2)
#define G2SB_CTX6_G2CONTROLSB_0_UVST_UVS_G2UVSTRIDE                     _MK_ENUM_CONST(3)

// Source (input) Data Line Pairing  (SL)
// This parameter specifies one of two cases of Y vs. U/V line-pairing
// in the source data in 4:2:0 format.
// In the 4:2:0 format, there is one pair of U and V image-lines for
// every two Y image-lines.
//0 The first two Y image-lines share common pair of U and V image-lines.
//1 The first two Y image-lines are paired with two different
// pairs of U and V image-lines.
#define G2SB_CTX6_G2CONTROLSB_0_SL_SHIFT                        _MK_SHIFT_CONST(10)
#define G2SB_CTX6_G2CONTROLSB_0_SL_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLSB_0_SL_SHIFT)
#define G2SB_CTX6_G2CONTROLSB_0_SL_RANGE                        10:10
#define G2SB_CTX6_G2CONTROLSB_0_SL_WOFFSET                      0x0
#define G2SB_CTX6_G2CONTROLSB_0_SL_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_SL_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLSB_0_SL_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_SL_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_SL_COMMON_PAIR                  _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLSB_0_SL_DIFFERENT_PAIR                       _MK_ENUM_CONST(1)

// StretchBLT Source Provider Selection (SISEL)
// This bit indicates where the source images come from,  either the
// image buffer memory or system memory of the host CPU.  If source
//images come from host CPU, they come via CPU Read-FIFO.
//0 Image buffer memory.
//1 System memory of host CPU.
//14 Reserved
#define G2SB_CTX6_G2CONTROLSB_0_SISEL_SHIFT                     _MK_SHIFT_CONST(13)
#define G2SB_CTX6_G2CONTROLSB_0_SISEL_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLSB_0_SISEL_SHIFT)
#define G2SB_CTX6_G2CONTROLSB_0_SISEL_RANGE                     13:13
#define G2SB_CTX6_G2CONTROLSB_0_SISEL_WOFFSET                   0x0
#define G2SB_CTX6_G2CONTROLSB_0_SISEL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_SISEL_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLSB_0_SISEL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_SISEL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_SISEL_IMAGE_BUFFER                      _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLSB_0_SISEL_HOST                      _MK_ENUM_CONST(1)

// StretchBLT Source Selection  (SBLTSRC)
// CPU and VIP module can initiate StretchBLT operation. This bit indicates
// which one initiates current StretchBLT command. Depending on the initiator,
// appropriate source for the command execution request is selected. Whichever
// the initiator is, all the command parameters are supplied from the CPU (driver)
// through the G2 command-FIFO and shadow registers.
//0 CPU is the command initiator.
//1 VIP module is the command initiator.
#define G2SB_CTX6_G2CONTROLSB_0_SBLTSRC_SHIFT                   _MK_SHIFT_CONST(15)
#define G2SB_CTX6_G2CONTROLSB_0_SBLTSRC_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLSB_0_SBLTSRC_SHIFT)
#define G2SB_CTX6_G2CONTROLSB_0_SBLTSRC_RANGE                   15:15
#define G2SB_CTX6_G2CONTROLSB_0_SBLTSRC_WOFFSET                 0x0
#define G2SB_CTX6_G2CONTROLSB_0_SBLTSRC_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_SBLTSRC_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLSB_0_SBLTSRC_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_SBLTSRC_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_SBLTSRC_CPU                     _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLSB_0_SBLTSRC_VIP                     _MK_ENUM_CONST(1)

// StretchBLT Vertical Filter Mode (VFTYPE[1:0])
// This bit is effective when the Vertical Filter is enabled. (bit 18)
// The two-tap vertical interpolation filter can be operated in various modes.
// For the image expansion, it should be programmed as a pure 2-tap
// interpolator. For the image contraction, it can work as partly averager
// and partly interpolator with varying degree depending on the contraction ratio.
// For StretchBLT, this parameter is used as an index (selection) to
// an internal lookup table that stores the group of filter-coefficients for
// the different modes of vertical filtering.
//00 Pure interpolation filter.
//01 25% averager, 75% interpolator.
//10 50% averager, 50% interpolator.
//11 100% averager.
#define G2SB_CTX6_G2CONTROLSB_0_VFTYPE_SHIFT                    _MK_SHIFT_CONST(16)
#define G2SB_CTX6_G2CONTROLSB_0_VFTYPE_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX6_G2CONTROLSB_0_VFTYPE_SHIFT)
#define G2SB_CTX6_G2CONTROLSB_0_VFTYPE_RANGE                    17:16
#define G2SB_CTX6_G2CONTROLSB_0_VFTYPE_WOFFSET                  0x0
#define G2SB_CTX6_G2CONTROLSB_0_VFTYPE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_VFTYPE_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX6_G2CONTROLSB_0_VFTYPE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_VFTYPE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_VFTYPE_INTERP                   _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLSB_0_VFTYPE_AVG25_INTERP75                   _MK_ENUM_CONST(1)
#define G2SB_CTX6_G2CONTROLSB_0_VFTYPE_AVG50_INTERP50                   _MK_ENUM_CONST(2)
#define G2SB_CTX6_G2CONTROLSB_0_VFTYPE_AVG                      _MK_ENUM_CONST(3)

// StretchBLT Vertical Filter Enable (VFEN)
// Vertical filter shall be disabled if source images come from host CPU
// via CPU Read-FIFO. (SISEL)
// Vertical filter may be disabled to save some memory bandwidth but
// this will likely result in degradation of image quality.
// This option may also be used in the case where source image is progressive
// scanning and there is no vertical scaling.
//0 Vertical filter is disabled.
//1 Vertical filter is enabled.
#define G2SB_CTX6_G2CONTROLSB_0_VFEN_SHIFT                      _MK_SHIFT_CONST(18)
#define G2SB_CTX6_G2CONTROLSB_0_VFEN_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLSB_0_VFEN_SHIFT)
#define G2SB_CTX6_G2CONTROLSB_0_VFEN_RANGE                      18:18
#define G2SB_CTX6_G2CONTROLSB_0_VFEN_WOFFSET                    0x0
#define G2SB_CTX6_G2CONTROLSB_0_VFEN_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_VFEN_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLSB_0_VFEN_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_VFEN_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_VFEN_DISABLE                    _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLSB_0_VFEN_ENABLE                     _MK_ENUM_CONST(1)

// enabled color space converter by default
#define G2SB_CTX6_G2CONTROLSB_0_DISCSC_SHIFT                    _MK_SHIFT_CONST(19)
#define G2SB_CTX6_G2CONTROLSB_0_DISCSC_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLSB_0_DISCSC_SHIFT)
#define G2SB_CTX6_G2CONTROLSB_0_DISCSC_RANGE                    19:19
#define G2SB_CTX6_G2CONTROLSB_0_DISCSC_WOFFSET                  0x0
#define G2SB_CTX6_G2CONTROLSB_0_DISCSC_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_DISCSC_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLSB_0_DISCSC_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_DISCSC_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_DISCSC_ENABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLSB_0_DISCSC_DISABLE                  _MK_ENUM_CONST(1)

// StretchBLT Horizontal Filter Mode (HFTYPE[2:0])
// The six-tap horizontal interpolation filter can be operated in
// various operation modes. For the image expansion, it should be programmed
// as a pure 6-tap interpolator.  For the image contraction, it can work as
// partly lowpass filter and partly interpolater with varying degree depending
// the contraction ratio.
// For StretchBLT, this parameter is used as an index (selection)
// to an internal lookup table that stores the group of filter-coefficients
//for the different modes of horizontal filtering.
// 000: Pure interpolation filter.
// 001: 010 011 100 101 110: mix of interpolation and low pass filters
// 111: DISABLE.
#define G2SB_CTX6_G2CONTROLSB_0_HFTYPE_SHIFT                    _MK_SHIFT_CONST(20)
#define G2SB_CTX6_G2CONTROLSB_0_HFTYPE_FIELD                    (_MK_MASK_CONST(0x7) << G2SB_CTX6_G2CONTROLSB_0_HFTYPE_SHIFT)
#define G2SB_CTX6_G2CONTROLSB_0_HFTYPE_RANGE                    22:20
#define G2SB_CTX6_G2CONTROLSB_0_HFTYPE_WOFFSET                  0x0
#define G2SB_CTX6_G2CONTROLSB_0_HFTYPE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_HFTYPE_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define G2SB_CTX6_G2CONTROLSB_0_HFTYPE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_HFTYPE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_HFTYPE_INTERP                   _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLSB_0_HFTYPE_LPF1                     _MK_ENUM_CONST(1)
#define G2SB_CTX6_G2CONTROLSB_0_HFTYPE_LPF2                     _MK_ENUM_CONST(2)
#define G2SB_CTX6_G2CONTROLSB_0_HFTYPE_LPF3                     _MK_ENUM_CONST(3)
#define G2SB_CTX6_G2CONTROLSB_0_HFTYPE_LPF4                     _MK_ENUM_CONST(4)
#define G2SB_CTX6_G2CONTROLSB_0_HFTYPE_LPF5                     _MK_ENUM_CONST(5)
#define G2SB_CTX6_G2CONTROLSB_0_HFTYPE_LPF6                     _MK_ENUM_CONST(6)
#define G2SB_CTX6_G2CONTROLSB_0_HFTYPE_DISABLE                  _MK_ENUM_CONST(7)

//In the VC-1 specification, when the value of RANGEREDFRM variable (1-bit)
//  for a picture is equal to 1, the picture shall be scaled up according
// to the following equation:
//Y = clip( (( Y-128)*2) + 128);
//Cb = clip( ((Cb-128)*2) + 128);
//Cr = clip( ((Cr-128)*2) + 128);
//The clip operator limits the output to [0, 255].
//The input is also limited to [0, 255].
//In the VC-1 nomenclature, the output (Y, Cb, Cr) tuple corresponds to
// the 'decoded' picture. The input (Y, Cb, Cr) tuple corresponds to
// the 'reconstructed' picture.
// The above equations create the decoded picture while keeping
// the reconstructed picture intact.
//Only YUV _OB formats are supported with range reducation enabled,
// not the YUV _TC or RGB formats.
//----------------------------------------------------
//At PortalPlayer this functionality was implemented in the DVO module.
// The YUV data coming from the video frame buffers (reconstructed picture)
//  in the SDRAM was scaled up using the above equations and given to the display.
// the value of 1-bit wide RANGEREDFRM variable was configured in the DVO per frame
// and the frame was scaled whenever RANGEREDFRM == 1.
#define G2SB_CTX6_G2CONTROLSB_0_RANGEREDFRM_SHIFT                       _MK_SHIFT_CONST(23)
#define G2SB_CTX6_G2CONTROLSB_0_RANGEREDFRM_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLSB_0_RANGEREDFRM_SHIFT)
#define G2SB_CTX6_G2CONTROLSB_0_RANGEREDFRM_RANGE                       23:23
#define G2SB_CTX6_G2CONTROLSB_0_RANGEREDFRM_WOFFSET                     0x0
#define G2SB_CTX6_G2CONTROLSB_0_RANGEREDFRM_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_RANGEREDFRM_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLSB_0_RANGEREDFRM_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_RANGEREDFRM_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_RANGEREDFRM_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLSB_0_RANGEREDFRM_ENABLE                      _MK_ENUM_CONST(1)

// StretchBLT Source Type (SITYPE)
// This bit identifies two types of source images. If source image is 2-to-1
// interlaced and StretchBLT processes either one of the two interlaced
// field-images, physical (positional) displacement between the two
// interlaced fields must be taken into account.  One field-image that is
// placed higher in position than the other field-image is called top-field
// and the other is called bottom-field. StretchBLT processing has to
// lower the top-field (or raise the bottom-field) to match the corresponding
// two target images in the overlay window (that is progressively scanned)
// right at the same position.   If source image is full frame-image
// obtained from two interlaced field-images, its type is ?top-field?.
// If source images are progressively scanned, the type identification is not
// significant and they may be designated either one of the two types
//0 Source image is ?top-field?.
//1 Source image is ?bottom-field?.
#define G2SB_CTX6_G2CONTROLSB_0_SITYPE_SHIFT                    _MK_SHIFT_CONST(24)
#define G2SB_CTX6_G2CONTROLSB_0_SITYPE_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLSB_0_SITYPE_SHIFT)
#define G2SB_CTX6_G2CONTROLSB_0_SITYPE_RANGE                    24:24
#define G2SB_CTX6_G2CONTROLSB_0_SITYPE_WOFFSET                  0x0
#define G2SB_CTX6_G2CONTROLSB_0_SITYPE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_SITYPE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLSB_0_SITYPE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_SITYPE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_SITYPE_TOP_FIELD                        _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLSB_0_SITYPE_BOTTOM_FIELD                     _MK_ENUM_CONST(1)

// StretchBLT Source Buffer Selection (SBSEL)
// StretchBLT processing involves frame-rate conversion from a
// series of source images to another series of destination images
// (field-rate of the source video to frame-rate of the PC display).
// In order to avoid image tearing, it is preferred to use two buffer
// sections in the source video area. This bit selects one of the two
// buffering blocks from which this StretchBLT command receives the source image.
// The two buffering memory blocks are called source-A and source-B.
//0 Source image comes from ?source-A? buffer.
//1 Source image comes from ?source-B? buffer.
#define G2SB_CTX6_G2CONTROLSB_0_SBSEL_SHIFT                     _MK_SHIFT_CONST(25)
#define G2SB_CTX6_G2CONTROLSB_0_SBSEL_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLSB_0_SBSEL_SHIFT)
#define G2SB_CTX6_G2CONTROLSB_0_SBSEL_RANGE                     25:25
#define G2SB_CTX6_G2CONTROLSB_0_SBSEL_WOFFSET                   0x0
#define G2SB_CTX6_G2CONTROLSB_0_SBSEL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_SBSEL_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLSB_0_SBSEL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_SBSEL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_SBSEL_SRC_A                     _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLSB_0_SBSEL_SRC_B                     _MK_ENUM_CONST(1)

// StretchBLT Destination Buffer Selection (DBSEL)
// StretchBLT processing involves frame-rate conversion from a series of
// source images to another series of destination images (field-rate of
// the source video to frame-rate of the PC display). In order to avoid
// image tearing, it is preferred to use two buffer sections in the destination
// video area.  This bit selects one of the two buffering blocks to which this
// StretchBLT command delivers the destination image.
// The two buffering memory blocks are called A and B.
//0 Destination image goes to ?A? buffer.
//1 Destination image goes to ?B? buffer.
#define G2SB_CTX6_G2CONTROLSB_0_DBSEL_SHIFT                     _MK_SHIFT_CONST(26)
#define G2SB_CTX6_G2CONTROLSB_0_DBSEL_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLSB_0_DBSEL_SHIFT)
#define G2SB_CTX6_G2CONTROLSB_0_DBSEL_RANGE                     26:26
#define G2SB_CTX6_G2CONTROLSB_0_DBSEL_WOFFSET                   0x0
#define G2SB_CTX6_G2CONTROLSB_0_DBSEL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_DBSEL_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLSB_0_DBSEL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_DBSEL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_DBSEL_DST_A                     _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLSB_0_DBSEL_DST_B                     _MK_ENUM_CONST(1)

// Key Signal Generator Enable (KEYEN) Key signal generator generates either
// chroma key signal (from YCbCr signal) or color key signal (from RGB signal)
//0 Key signal generator is disabled.
//1 Key signal generator is enabled.
#define G2SB_CTX6_G2CONTROLSB_0_KEYEN_SHIFT                     _MK_SHIFT_CONST(27)
#define G2SB_CTX6_G2CONTROLSB_0_KEYEN_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLSB_0_KEYEN_SHIFT)
#define G2SB_CTX6_G2CONTROLSB_0_KEYEN_RANGE                     27:27
#define G2SB_CTX6_G2CONTROLSB_0_KEYEN_WOFFSET                   0x0
#define G2SB_CTX6_G2CONTROLSB_0_KEYEN_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_KEYEN_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLSB_0_KEYEN_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_KEYEN_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_KEYEN_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLSB_0_KEYEN_ENABLE                    _MK_ENUM_CONST(1)

// Key Signal Polarity (KPOL)
// Color/Chroma key signal is generated by comparing source input pixel
// color to a range of a color specified by lower and upper limit values.
// The key signal is interpreted in two ways, depending on which one of
// video and graphics images is foreground (and the other is background).
// This is effective only if Key signal generator is enabled.
// (see G2CMKEYL, G2CMKEYU)
// 0 Key signal is set to 1 when source pixel is within the lower and upper
// limit color range.
// 1 Key signal is set to 1 when source pixel is outside the lower and upper
// limit color range.
#define G2SB_CTX6_G2CONTROLSB_0_KPOL_SHIFT                      _MK_SHIFT_CONST(28)
#define G2SB_CTX6_G2CONTROLSB_0_KPOL_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLSB_0_KPOL_SHIFT)
#define G2SB_CTX6_G2CONTROLSB_0_KPOL_RANGE                      28:28
#define G2SB_CTX6_G2CONTROLSB_0_KPOL_WOFFSET                    0x0
#define G2SB_CTX6_G2CONTROLSB_0_KPOL_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_KPOL_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLSB_0_KPOL_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_KPOL_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_KPOL_WITHIN_BOUNDS                      _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLSB_0_KPOL_OUTSIDE_BOUNDS                     _MK_ENUM_CONST(1)

// Enable Dithering (ENDITH)
// For 16 bit RGB output modes, the LSB of the color components can be
// modified by adding a variable residual value that will reduce the banding
// artifacts that can appear on the display.
// 0 Normal operation
// 1 Enable Dithering
#define G2SB_CTX6_G2CONTROLSB_0_ENDITH_SHIFT                    _MK_SHIFT_CONST(30)
#define G2SB_CTX6_G2CONTROLSB_0_ENDITH_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLSB_0_ENDITH_SHIFT)
#define G2SB_CTX6_G2CONTROLSB_0_ENDITH_RANGE                    30:30
#define G2SB_CTX6_G2CONTROLSB_0_ENDITH_WOFFSET                  0x0
#define G2SB_CTX6_G2CONTROLSB_0_ENDITH_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_ENDITH_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLSB_0_ENDITH_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_ENDITH_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_ENDITH_DISABLE                  _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLSB_0_ENDITH_ENABLE                   _MK_ENUM_CONST(1)

//output destination writes (dw) go either to image memory or epp
//0 Output data is sent to memory
//1 YUV or RGB data is passed directly to EPP module and no destination writes
//  will take place.
#define G2SB_CTX6_G2CONTROLSB_0_DISDW_SHIFT                     _MK_SHIFT_CONST(31)
#define G2SB_CTX6_G2CONTROLSB_0_DISDW_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLSB_0_DISDW_SHIFT)
#define G2SB_CTX6_G2CONTROLSB_0_DISDW_RANGE                     31:31
#define G2SB_CTX6_G2CONTROLSB_0_DISDW_WOFFSET                   0x0
#define G2SB_CTX6_G2CONTROLSB_0_DISDW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_DISDW_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLSB_0_DISDW_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_DISDW_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSB_0_DISDW_GOTO_IMAGE_BUFFER                 _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLSB_0_DISDW_GOTO_EPP                  _MK_ENUM_CONST(1)


// Register G2SB_CTX6_G2CONTROLSECOND_0  //{host,2d,index=1e}
#define G2SB_CTX6_G2CONTROLSECOND_0                     _MK_ADDR_CONST(0x601e)
#define G2SB_CTX6_G2CONTROLSECOND_0_SECURE                      0x0
#define G2SB_CTX6_G2CONTROLSECOND_0_WORD_COUNT                  0x1
#define G2SB_CTX6_G2CONTROLSECOND_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_RESET_MASK                  _MK_MASK_CONST(0x3f61c3fe)
#define G2SB_CTX6_G2CONTROLSECOND_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_READ_MASK                   _MK_MASK_CONST(0x3f71c3fe)
#define G2SB_CTX6_G2CONTROLSECOND_0_WRITE_MASK                  _MK_MASK_CONST(0x3f71c3fe)
// Host port bit swap 1=enable   0= disable
//   1= enable
#define G2SB_CTX6_G2CONTROLSECOND_0_BITSWAP_SHIFT                       _MK_SHIFT_CONST(1)
#define G2SB_CTX6_G2CONTROLSECOND_0_BITSWAP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLSECOND_0_BITSWAP_SHIFT)
#define G2SB_CTX6_G2CONTROLSECOND_0_BITSWAP_RANGE                       1:1
#define G2SB_CTX6_G2CONTROLSECOND_0_BITSWAP_WOFFSET                     0x0
#define G2SB_CTX6_G2CONTROLSECOND_0_BITSWAP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_BITSWAP_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLSECOND_0_BITSWAP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_BITSWAP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_BITSWAP_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLSECOND_0_BITSWAP_ENABLE                      _MK_ENUM_CONST(1)

// Host port byte swap 1=enable   0= disable
//   1= enable
#define G2SB_CTX6_G2CONTROLSECOND_0_BEBSWAP_SHIFT                       _MK_SHIFT_CONST(2)
#define G2SB_CTX6_G2CONTROLSECOND_0_BEBSWAP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLSECOND_0_BEBSWAP_SHIFT)
#define G2SB_CTX6_G2CONTROLSECOND_0_BEBSWAP_RANGE                       2:2
#define G2SB_CTX6_G2CONTROLSECOND_0_BEBSWAP_WOFFSET                     0x0
#define G2SB_CTX6_G2CONTROLSECOND_0_BEBSWAP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_BEBSWAP_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLSECOND_0_BEBSWAP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_BEBSWAP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_BEBSWAP_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLSECOND_0_BEBSWAP_ENABLE                      _MK_ENUM_CONST(1)

// Host port word swap 1=enable   0= disable
#define G2SB_CTX6_G2CONTROLSECOND_0_BEWSWAP_SHIFT                       _MK_SHIFT_CONST(3)
#define G2SB_CTX6_G2CONTROLSECOND_0_BEWSWAP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLSECOND_0_BEWSWAP_SHIFT)
#define G2SB_CTX6_G2CONTROLSECOND_0_BEWSWAP_RANGE                       3:3
#define G2SB_CTX6_G2CONTROLSECOND_0_BEWSWAP_WOFFSET                     0x0
#define G2SB_CTX6_G2CONTROLSECOND_0_BEWSWAP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_BEWSWAP_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLSECOND_0_BEWSWAP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_BEWSWAP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_BEWSWAP_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLSECOND_0_BEWSWAP_ENABLE                      _MK_ENUM_CONST(1)

// Alpha blending method
// FIX:
//   ALPHA blending:  Fixed alpha,  ALPHA is the value, B5G6R5 * B5G6R5
//   VCAA:            B5G6R5->B5G6R5
// PL1BPP:
//   ALPHA blending:  Alpha 1bit/pixel from memory plane, B5G6R5 * B5G6R5
//      NOTE: when ALPTYPE is PL1BPP, DSTX[2:0] must be zero, see bug 344489
// PL2BPP:
//   ALPHA blending:  Alpha 2bits/pixel from memory plane, B5G6R5 * B5G6R5
//      NOTE: when ALPTYPE is PL2BPP, DSTX[1:0] must be zero, see bug 344489
// PL4BPP:
//   ALPHA blending:  Alpha 4bits/pixel from memory plane, B5G6R5 * B5G6R5
//      NOTE: when ALPTYPE is PL4BPP, DSTX[0:0] must be zero, see bug 344489
// PL8BPP:
//   ALPHA blending:  Alpha 8bits/pixel from memory plane, B5G6R5 * B5G6R5
// PL44BPP:
//   ALPHA blending:  Alpha 8bits/pixel from memory plane src*4bits+dst*4bits, B5G6R5 * B5G6R5
// PLS1BPP:
//   ALPHA blending:  Alpha 1bit from source B5G5R5A1, alpha(MSB). Dest: B5G6R5.
//   VCAA:            reserved
// PLS4BPPAL:
//   ALPHA blending:  Alpha 4bits from source A4B4G4R4, alpha(LSB). Dest: B5G6R5.
// PLS4BPP:
//   ALPHA blending:  Alpha 4bits from source B4G4R4A4, alpha(MSB). Dest: B5G6R5.
//   VCAA:            R8G8B8A8->B5G6R5 without reading VCAA plane
//                     (surface blit with bpp down convert - implemented in hw by vcaa engine; not really a vcaa resolve)
// PLS8BPP:
//   ALPHA blending:  Alpha 8bits from source/destination(decided by ALPSRCORDST),
//                    R8G8B8A8, alpha(MSB). DST: R8G8B8A8
//   VCAA:            R8G8B8A8->R8G8B8A8, alpha has same blending method as RGB
// PLS8BX:
//   ALPHA blending:  Alpha 8bits from source B8G8R8A8, alpha(MSB). Dest: B5G6R5. (**Restrictions)
//   VCAA:            R8G8B8A8->B5G6R5
// PLS1BPPAL:
//   ALPHA blending:  Alpha 1 bit from source A1B5G5R5, alpha(LSB). Dest: B5G6R5
//   VCAA:            A1B5G5R5->A1B5G5R5
// **Restriction
// PLS8BX alpha blending has the following restrictions
// 1. Source/destination addresses have to be in 128bit boundary.
// 2. Destination width has to be multiple of 4 pixels.
// 3. Source/Destination strides have to be multiple of 128bits.
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPTYPE_SHIFT                       _MK_SHIFT_CONST(4)
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPTYPE_FIELD                       (_MK_MASK_CONST(0x1f) << G2SB_CTX6_G2CONTROLSECOND_0_ALPTYPE_SHIFT)
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPTYPE_RANGE                       8:4
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPTYPE_WOFFSET                     0x0
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPTYPE_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPTYPE_DEFAULT_MASK                        _MK_MASK_CONST(0x1f)
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPTYPE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPTYPE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPTYPE_FIX                 _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPTYPE_PL1BPP                      _MK_ENUM_CONST(1)
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPTYPE_PL2BPP                      _MK_ENUM_CONST(2)
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPTYPE_PL4BPP                      _MK_ENUM_CONST(3)
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPTYPE_PL8BPP                      _MK_ENUM_CONST(4)
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPTYPE_PL44BPP                     _MK_ENUM_CONST(5)
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPTYPE_PLS1BPP                     _MK_ENUM_CONST(6)
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPTYPE_PLS4BPPAL                   _MK_ENUM_CONST(7)
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPTYPE_PLS4BPP                     _MK_ENUM_CONST(8)
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPTYPE_PLS8BPP                     _MK_ENUM_CONST(9)
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPTYPE_PLS8BX                      _MK_ENUM_CONST(10)
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPTYPE_PLS1BPPAL                   _MK_ENUM_CONST(11)

// 32bits blending mode, output alpha selection 0:source alpha, 1:destination alpha
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPSRCORDST_SHIFT                   _MK_SHIFT_CONST(9)
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPSRCORDST_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLSECOND_0_ALPSRCORDST_SHIFT)
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPSRCORDST_RANGE                   9:9
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPSRCORDST_WOFFSET                 0x0
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPSRCORDST_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPSRCORDST_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPSRCORDST_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPSRCORDST_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPSRCORDST_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLSECOND_0_ALPSRCORDST_ENABLE                  _MK_ENUM_CONST(1)

// Pixel replication for Palm OS.
#define G2SB_CTX6_G2CONTROLSECOND_0_PXLREP_SHIFT                        _MK_SHIFT_CONST(14)
#define G2SB_CTX6_G2CONTROLSECOND_0_PXLREP_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLSECOND_0_PXLREP_SHIFT)
#define G2SB_CTX6_G2CONTROLSECOND_0_PXLREP_RANGE                        14:14
#define G2SB_CTX6_G2CONTROLSECOND_0_PXLREP_WOFFSET                      0x0
#define G2SB_CTX6_G2CONTROLSECOND_0_PXLREP_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_PXLREP_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLSECOND_0_PXLREP_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_PXLREP_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_PXLREP_DISABLE                      _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLSECOND_0_PXLREP_ENABLE                       _MK_ENUM_CONST(1)

// Used by Palm OS to highlight a selected icon by swapping
//  Background and Foreground colors in a rectangle area
#define G2SB_CTX6_G2CONTROLSECOND_0_SWAPBLT_SHIFT                       _MK_SHIFT_CONST(15)
#define G2SB_CTX6_G2CONTROLSECOND_0_SWAPBLT_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLSECOND_0_SWAPBLT_SHIFT)
#define G2SB_CTX6_G2CONTROLSECOND_0_SWAPBLT_RANGE                       15:15
#define G2SB_CTX6_G2CONTROLSECOND_0_SWAPBLT_WOFFSET                     0x0
#define G2SB_CTX6_G2CONTROLSECOND_0_SWAPBLT_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_SWAPBLT_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLSECOND_0_SWAPBLT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_SWAPBLT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//VCAA safe mode, if turned on, all up/bottom color data will be read in. This is a debug/cya incase the top/bottom color
//  fetch is broken.
#define G2SB_CTX6_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_CTX6_G2CONTROLSECOND_0_VCAA_SAFE_MODE_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SHIFT)
#define G2SB_CTX6_G2CONTROLSECOND_0_VCAA_SAFE_MODE_RANGE                        16:16
#define G2SB_CTX6_G2CONTROLSECOND_0_VCAA_SAFE_MODE_WOFFSET                      0x0
#define G2SB_CTX6_G2CONTROLSECOND_0_VCAA_SAFE_MODE_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_VCAA_SAFE_MODE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_VCAA_SAFE_MODE_DISABLE                      _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLSECOND_0_VCAA_SAFE_MODE_ENABLE                       _MK_ENUM_CONST(1)

#define G2SB_CTX6_G2CONTROLSECOND_0_G2NOSTOP_SHIFT                      _MK_SHIFT_CONST(20)
#define G2SB_CTX6_G2CONTROLSECOND_0_G2NOSTOP_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLSECOND_0_G2NOSTOP_SHIFT)
#define G2SB_CTX6_G2CONTROLSECOND_0_G2NOSTOP_RANGE                      20:20
#define G2SB_CTX6_G2CONTROLSECOND_0_G2NOSTOP_WOFFSET                    0x0
#define G2SB_CTX6_G2CONTROLSECOND_0_G2NOSTOP_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_G2NOSTOP_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_G2NOSTOP_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_G2NOSTOP_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Clipping rectangle control,
// if clip enable, bit 57 XYTDW should be cleared.
// 0x=clipping disabled,
// 10=draw only inside clipping rectangle,
// 11=draw only outside clipping rectangle
#define G2SB_CTX6_G2CONTROLSECOND_0_CLIPC_SHIFT                 _MK_SHIFT_CONST(21)
#define G2SB_CTX6_G2CONTROLSECOND_0_CLIPC_FIELD                 (_MK_MASK_CONST(0x3) << G2SB_CTX6_G2CONTROLSECOND_0_CLIPC_SHIFT)
#define G2SB_CTX6_G2CONTROLSECOND_0_CLIPC_RANGE                 22:21
#define G2SB_CTX6_G2CONTROLSECOND_0_CLIPC_WOFFSET                       0x0
#define G2SB_CTX6_G2CONTROLSECOND_0_CLIPC_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_CLIPC_DEFAULT_MASK                  _MK_MASK_CONST(0x3)
#define G2SB_CTX6_G2CONTROLSECOND_0_CLIPC_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_CLIPC_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Fast Rotate mode sel
//------------------------------------------------------------------
// G2 Fast Rotate
//
// Transforms a surface via FR_TYPE transformation.
// Works in either 2-buffer (copy)  or 1-buffer mode (in place) mode.
// The engine breaks down a larger surface into a grid of smaller FR_BLOCKs.
// Works on the granularity of an FR_BLOCK.  An FR_BLOCK is:
//   16x16 pixel block (DSTCD = bpp8)
//    8x8  pixel block (DSTCD = bpp16)
//    4x4  pixel block (DSTCD = bpp32)
// Max surface size is 4096x4096
//
// Key information
//  - source and destination base address must be 128-bit word aligned
//  - engine works on FR_BLOCK granularity:
//      transformed surface width  in multiples of 16-bytes**
//      transformed surface height in multiples of 16/8/4 lines for bpp8/bpp16/bpp32 FR_BLOCK
//      if surface dimension is not a multiple, sw can program FR engine to transform larger surface
//         (round up to next FR_BLOCK in width and height-->transform-->calculate relative memory pointer address)
//  - during a rotational transformation (TRANS_LR, TRANS_RL, ROT_90, ROT_270):
//      the stride of the output surface != the stride of the input surface when working on non-square input
//      input:                        output:
//      *^----------------------           *$----------------------
//      $ 0  1  2  3  4  5  6  7           ^ 24 16 8  0  ^  ^  ^  ^
//      | 8  9 10 11 12 13 14 15           | 25 17 9  1  ^  ^  ^  ^
//      |16 17 18 19 20 21 22 23           | 26 18 10 2  ^  ^  ^  ^
//      |24 25 26 27 28 29 30 31           | 27 19 11 3  ^  ^  ^  ^
//      | -  -  -  -  *  *  *  *           | 28 20 12 4  *  *  *  *
//      | -  -  -  -  *  *  *  *           | 29 21 13 5  *  *  *  *
//      | -  -  -  -  *  *  *  *           | 30 22 14 6  *  *  *  *
//      | -  -  -  -  *  *  *  *           | 31 23 15 7  *  *  *  *
//
//  - Tiling alignment restrictions subsume FR restrictions because the
//    FR surface base address is the same as the start address.
//
//  Register Programming
//  ====================
//   FR_MODE - inplace or copy
//   FR_TYPE - type of transformation
//   DSTCD - bpp8, bpp16, bpp32
//   SRCBA - source base address
//   SRCWIDTH - (width in pixels-1)
//   SRCHEIGHT - (height in lines-1)
//   SRCS - source stride
//   DSTBA - dest base address
//   DSTS - dest stride
//   FR_READWAIT - always set to enable
//
// FR inefficency in the following setup :
// 1. FR_MODE==SQUARE
// 2. if(FR_TYPE==YFLIP && SRCHEIGHT==m*n && n==odd number) where m=8bpp?16:16bpp?8:4
//    Or if(FR_TYPE==XFLIP && SRCWIDTH==m*n && n==odd number) where m=8bpp?16:16bpp?8:4
// 3. Then, the middle 8 lines/pixels, E.G. YFLIP/16bpp/n==3, line8 to line15 will be processed twice. 00 = disable fast rotate - this turns off the 2nd level clock to fr_rotate engine.  Please remember to do so!
// 01 = src/dst copy mode - two separate buffers
// 10 = square in place - one buffer
// 11 = blank
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_MODE_SHIFT                       _MK_SHIFT_CONST(24)
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_MODE_FIELD                       (_MK_MASK_CONST(0x3) << G2SB_CTX6_G2CONTROLSECOND_0_FR_MODE_SHIFT)
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_MODE_RANGE                       25:24
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_MODE_WOFFSET                     0x0
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_MODE_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_MODE_DEFAULT_MASK                        _MK_MASK_CONST(0x3)
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_MODE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_MODE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_MODE_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_MODE_SRC_DST_COPY                        _MK_ENUM_CONST(1)
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_MODE_SQUARE                      _MK_ENUM_CONST(2)
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_MODE_BLANK                       _MK_ENUM_CONST(3)

//  Fast Rotate type     000 = FLIP_X
// 001 = FLIP_Y
// 010 = TRANS_LR (mirrors about diagonal. Diagonal runs from upper left to lower right)
// 011 = TRANS_RL (mirrors about diagonal. Diagonal runs from upper right to lower left)
// 100 = ROT_90 (counter clock wise by 90 degrees)
// 101 = ROT_180
// 110 = ROT_270 (clock wise by 90 degrees)
// 111 = IDENTITY
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_TYPE_SHIFT                       _MK_SHIFT_CONST(26)
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_TYPE_FIELD                       (_MK_MASK_CONST(0x7) << G2SB_CTX6_G2CONTROLSECOND_0_FR_TYPE_SHIFT)
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_TYPE_RANGE                       28:26
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_TYPE_WOFFSET                     0x0
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_TYPE_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_TYPE_DEFAULT_MASK                        _MK_MASK_CONST(0x7)
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_TYPE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_TYPE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_TYPE_FLIP_X                      _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_TYPE_FLIP_Y                      _MK_ENUM_CONST(1)
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_TYPE_TRANS_LR                    _MK_ENUM_CONST(2)
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_TYPE_TRANS_RL                    _MK_ENUM_CONST(3)
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_TYPE_ROT_90                      _MK_ENUM_CONST(4)
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_TYPE_ROT_180                     _MK_ENUM_CONST(5)
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_TYPE_ROT_270                     _MK_ENUM_CONST(6)
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_TYPE_IDENTITY                    _MK_ENUM_CONST(7)

//  Fast Rotate wait for read 0 = disable
// 1 = enable
// Enabling this bit forces FR to wait for the reads to be stored
// in the data return fifo before started to send writes out to
// the same block.
//
// Always set to ENABLE.  This is debug only.
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_READWAIT_SHIFT                   _MK_SHIFT_CONST(29)
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_READWAIT_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLSECOND_0_FR_READWAIT_SHIFT)
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_READWAIT_RANGE                   29:29
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_READWAIT_WOFFSET                 0x0
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_READWAIT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_READWAIT_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_READWAIT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_READWAIT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_READWAIT_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLSECOND_0_FR_READWAIT_ENABLE                  _MK_ENUM_CONST(1)

//----------------------------------------------------------------------
//
// G2 Blit Formats:
// (1) G2 Blit size is based on height in lines, width in pixels,
//     stride in bytes, and pixel size (color depth). Unless alpha
//     blending is enabled, G2 doesn't care about pixel components.
//
//     Source color depths supported by G2 Blit:
//     =========================================
//       color depth same as destination: G2CONTROLMAIN.SRCCD = 1
//       monochrome:                      G2CONTROLMAIN.SRCCD = 0
//       (source monochrome color determined by G2SRCBGC, G2SRCFGC)
//
//     Pattern color depths supported by G2 Blit:
//     =========================================
//       color depth same as destination: G2PATOS.PATCD = 1
//       monochrome:                      G2PATOS.PATCD = 0
//       (pattern monochrome color determined by G2PATBGC, G2PATFGC)
//
//     Destination color depths supported by G2 Blit:
//     ==============================================
//       1 byte per pixel:    G2CONTROLMAIN.DSTCD = BPP8
//       2 bytes per pixel:   G2CONTROLMAIN.DSTCD = BPP16
//       4 bytes per pixel:   G2CONTROLMAIN.DSTCD = BPP32
//
// (2) Alpha blending operates on 3 or 4 component pixels of a specified
//     color depth. One of the components may be alpha (A), depending on the
//     alpha blend format, which is only allowed in certain component
//     positions defined below. The only format rule of the remaining
//     components is that they must be in the same source and destination
//     position because the alpha blend engine does not support component
//     swapping. For example, valid 32BPP formats are: RGBA_8888->RGBA_8888,
//     BGRA_8888->BGRA_8888, GRBA_8888->GRBA_8888, etc.
//
//     Source formats supported by G2 alpha blend:
//     ===========================================
//       color depth BPP8:  no supported formats
//       color depth BPP16:
//          ALPTYPE_PLS1BPP: xxxA_5551 (ex: BGRA_5551 = A[15] R[14:10] G[9:5] B[4:0])
//          ALPTYPE_PLS4BPP: xxxA_4444 (ex: BGRA_4444 = A[15:12] R[11:8] G[7:4] B[3:0])
//          (other)        : xxx_565   (ex: BGR_565   = R[15:11] G[10:5] B[4:0])
//       color depth BPP32:
//          (all)          : xxxA_8888 (ex: BRGA_8888 = A[31:24] R[23:16] G[15:8] B[7:0])
//
//
//     Destination formats supported by G2 alpha blend:
//     ================================================
//       color depth BPP8:  no supported formats
//       color depth BPP16: xxx_565   (ex: BGR_565   = R[15:11] G[10:5] B[4:0])
//       color depth BPP32: xxxA_8888 (ex: BRGA_8888 = A[31:24] R[23:16] G[15:8] B[7:0])
//
//     The following table
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     | src cd  |   src format                  | dst cd  | dst format     | examples:                                  |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP8   |  no support                   |  BPP8   | no support     |                                            |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP16  | xyzA_5551, xyzA_4444, xyz_565 |  BPP16  | xyz_565        | BGRA_5551->BGR_565, RGB_565->RGB565        |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP32  | xyzA_8888                     |  BPP32  | xyzA_8888      | RGBA_8888->RGBA_8888, BGRA_8888->BGRA_8888 |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP32  | xyzA_8888                     |  BPP16  | xyz_565        | RGBA_8888->RGB_565, BGRA_8888->BGR_565     |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//
//----------------------------------------------------------
// VCAA Resolve engine
//
// (1) Format support
//
// +-----------------+--------------------+----------------------+
// | srcColor format | srcCoverage format | legal dest format(s) |
// +-----------------+--------------------+----------------------+
// |     A1B5G5R5    |        VCAA        |       A1B5G5R5       |
// +-----------------+--------------------+----------------------+
// |     R8G8B8A8    |        VCAA        |   R8G8B8A8, B5G6R5   |
// +-----------------+--------------------+----------------------+
// |      B5G6R5     |        VCAA        |         B5G6R5       |
// +-----------------+--------------------+----------------------+
//
// To program resolve type:
//   ALPTYPE == FIX:       B5G6R5   -> B5G6R5
//   ALPTYPE == PLS1BPPAL: A1B5G5R5 -> A1B5G5R5
//   ALPTYPE == PLS8BPP:   R8G8B8A8 -> R8G8B8A8
//   ALPTYPE == PLS8BX:    R8G8B8A8 -> B5G6R5
//
// (2) Color surface programming
//
//     color surface base address:  SRCBA
//       sub-surface start x:       SRCX      (pixel index)
//       sub-surface start y:       SRCY      (line index)
//     color surface stride:        SRCS      (bytes)
//
//     The engine supports sub-surface resolve.  One can imagine a full color buffer of 1024x768, but
//
//     [pseudo_code]
//       color_surface_start_address_fetch = pcurctx->regs.rG2SRCBA.uSRCBA() +
//        (pcurctx->regs.rG2SRCPS.uSRCX() * VCAAState.color_surface_depth) +
//        (pcurctx->regs.rG2SRCPS.uSRCY() * VCAAState.color_surface_stride);
//
// (3) VCAA surface programming
//
//     vcaa surface base address:   PATBA
//     vcaa surface stride:         PATST     (bytes)
//
//     [pseudo_code]
//       vcaa_surface_start_address_fetch = pcurctx->regs.rG2PATBA.uPATBA();
//
//       SW *MUST* directly program this register to the proper sub-surface location in the vcaa surface
//        which corresponds to the SRCX and SRCY programming. The calculation is
//            PATBA = vcaa_base_address + SRCX * (1) + SRCY * PATST;
//
// (4) Resolve surface programming
//
//     resolve window width:        DSTWIDTH  (pixels)
//     resolve window height:       DSTHEIGHT (lines)
//     resolve output stride:       DSTS      (bytes)
//
//  These values program the width and height of the resolved surface.  In the base case,
//   DSTWIDTH  = color surface width
//   DSTHEIGHT = color sufrace height
//   DSTS      = resolve surface format bpp * DSTWIDTH
//
//  The vcaa engine technically supports DSTX and DSTY (like its cousin SRCX and SRCY).  This was not
//  requested by the original RFE by SW during the initial design.
//
//  [pseudo_code]
//     resolve_surface_start_address_put = pcurctx->regs.rG2DSTBA.uDSTBA() +
//       (pcurctx->regs.rG2DSTPS.uDSTX() * resolve_surface_color_depth) +
//       (pcurctx->regs.rG2DSTPS.uDSTY() * resolve_surface_color_stride);
//
//
// (5) Resolving a pixel
//
//   The coverage surface is a 8 bits per pixel surface (C4X4).  The surface is initialized to all 1s by 3d.
//
//   For a given pixel, we need to look up 4 bits of coverage data.
//   If the data is 0xf, the pixel does not need to be resolved.
//   Otherwise, we need to reblend the pixel with certain weightings of its neighbors (i.e. we're on the edge of some geometry)
//
//   If any coverage bits is 0, we need to resolve the color.  To do so, we calculate the following eqn:
//   color_new = (
//                 20*color_old +
//                 27*(
//                     ((cover_down  == 0) ? color_down  : color_old) +
//                     ((cover_right == 0) ? color_right : color_old) +
//                     ((cover_left  == 0) ? color_left  : color_old) +
//                     ((cover_up    == 0) ? color_up    : color_old)
//                     )
//               ) / 128;
//
//   If coverage bit == 0, then we use the neighbor color value in the resolve
//   If coverage bit == 1, then we use the center   color value in the resolve
//
//   The resolve is done on a per channel (r/g/b/a) basis:
//     format convert input channel to 8-bit
//     perform resolve equation above
//     format convert to output format
//
//   For the resolution of the alpha channel:
//     In B5G6R5:   no alpha information.  do nothing.
//     In A1B5G5R5: no resolve.  keep the source color alpha bit.
//     In R8G8B8A8: normal 8-bit channel resolve
//
// (6) Resolving a pixel on the edge
//
//    When on an edge, the vcaa engine treats the coverage bit as a 1.  Use the center color value.
//    This holds true even on the edge of the sub-surface resolve window when located in the middle of the larger surface
//
// (7) Maximum dimensions
//
//    The maximum resolve sub-surface is 4096 pixels wide.
//
// (8) Surface restrictions
//    The VCAA engine has the following restrictions w.r.t input surfaces
//      - input base address is 128-bit memory word aligned
//      - input stride is multiple of 128-bits (16 bytes)
//    The VCAA engine has the following restrictions w.r.t output surfaces
//      - output base address is 128-bit memory word aligned
//      - output stride is multiple of 128-bits (16 bytes)
// (9) Coverage surface layout
//    The surface is C4X4.  doc/<previous projects>/3d/qrast_sides.vsd/qrast_arch.doc/qrast_vcaa.doc has a wealth of info.
//
//    Surface layout (C4X4)
//    =====================
//
//       (lsb2msb)  C0_C1_C2_C3_X_X_X_X     (X is a don't care.  Qrast inits to 1)
//       (msb2lsb)  X_X_X_X_C3_C2_C1_C0
//
//
//     +          o          o
//          C0
//             C1   Cov(0,1)
//        C2
//          C3
//     o          o          o
//
//       Cov(1,0)   Cov(1,1)
//
//     o          o          o
//
//
//     +/o = pixel centers
//
//     In the example above,
//        Cov(0,0) = X_X_X_X_C3_C2_C1_C0
//        C3       = V_C3(Cov(0,0));
//        ..         ..
//        C0       = V_C0(Cov(0,0));
//     #define V_C3(bits) (bits & 0x8)
//     #define V_C2(bits) (bits & 0x4)
//     #define V_C1(bits) (bits & 0x2)
//     #define V_C0(bits) (bits & 0x1)
//
//    Resolving a pixel
//    =================
//     In an ideal world, the coverage would be simply laid out such that when resolving Pixel(x,y), we would
//    need only to fetch Cov(x,y) to get all 4 bits of information.
//     In actuality, the coverage surface was rearranged to help qrast in performance.  To resolve Pixel(x,y)
//    gr2d has to fetch 4 C4X4 bytes [Cov(x,y), Cov(x-1,y), Cov(x,y-1), Cov(x-1,y-1)].  From each C4X4 byte, it
//    extracts one bit which is used in the resolve equations shown in (5).
//
//
//    Need the logical vcaa bits (DRLU) for blend which is spread across four C4X4 coverage bytes
//
//          U
//    L
//        o
//            R
//      D
//
//    where
//
//     o = Pixel(x,y)
//     D = V_C1(Cov(x-1,y))
//     R = V_C0(Cov(x,y))
//     L = V_C3(Cov(x-1,y-1))
//     U = V_C2(Cov(x,y-1))
//
//
// (10) Other documentation
//       cmod/g2/fsim/g2vcaa.cpp - cmodel implementation with comments
//       doc/<previous projects>/3d/qrast_sides.vsd/qrast_arch.doc/qrast_vcaa.doc
//

// Register G2SB_CTX6_G2CONTROLMAIN_0  //{host,2d,sb,index=1f}
#define G2SB_CTX6_G2CONTROLMAIN_0                       _MK_ADDR_CONST(0x601f)
#define G2SB_CTX6_G2CONTROLMAIN_0_SECURE                        0x0
#define G2SB_CTX6_G2CONTROLMAIN_0_WORD_COUNT                    0x1
#define G2SB_CTX6_G2CONTROLMAIN_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_RESET_MASK                    _MK_MASK_CONST(0x7eccffff)
#define G2SB_CTX6_G2CONTROLMAIN_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_READ_MASK                     _MK_MASK_CONST(0x7fffffff)
#define G2SB_CTX6_G2CONTROLMAIN_0_WRITE_MASK                    _MK_MASK_CONST(0x7fffffff)
// Command Type:  00=BitBlt
// 01=Line Draw
// 10=VCAA
// 11=reserved
//  When the raise command is in executing
//  (there are no other outstanding commands with same channel being executed)
#define G2SB_CTX6_G2CONTROLMAIN_0_CMDT_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2CONTROLMAIN_0_CMDT_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX6_G2CONTROLMAIN_0_CMDT_SHIFT)
#define G2SB_CTX6_G2CONTROLMAIN_0_CMDT_RANGE                    1:0
#define G2SB_CTX6_G2CONTROLMAIN_0_CMDT_WOFFSET                  0x0
#define G2SB_CTX6_G2CONTROLMAIN_0_CMDT_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_CMDT_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX6_G2CONTROLMAIN_0_CMDT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_CMDT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_CMDT_BITBLT                   _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLMAIN_0_CMDT_LINEDRAW                 _MK_ENUM_CONST(1)
#define G2SB_CTX6_G2CONTROLMAIN_0_CMDT_VCAA                     _MK_ENUM_CONST(2)
#define G2SB_CTX6_G2CONTROLMAIN_0_CMDT_RESERVED1                        _MK_ENUM_CONST(3)

//fast fill rectangle in 128bit/clock
//Some limitaions with this mode:
//srcsld==1 rop==0xcc, no clipping, no transparency
//xdir==0, ydir==0, flip==0, xytdw==0
//Results are undefined if the above limitations are not satified.
#define G2SB_CTX6_G2CONTROLMAIN_0_TURBOFILL_SHIFT                       _MK_SHIFT_CONST(2)
#define G2SB_CTX6_G2CONTROLMAIN_0_TURBOFILL_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLMAIN_0_TURBOFILL_SHIFT)
#define G2SB_CTX6_G2CONTROLMAIN_0_TURBOFILL_RANGE                       2:2
#define G2SB_CTX6_G2CONTROLMAIN_0_TURBOFILL_WOFFSET                     0x0
#define G2SB_CTX6_G2CONTROLMAIN_0_TURBOFILL_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_TURBOFILL_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLMAIN_0_TURBOFILL_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_TURBOFILL_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//Command finish timing bit 0: 2D command finishs when last data has been pushed to memory write client.
// 1: 2D command waits memory write client to be idle to finish.
#define G2SB_CTX6_G2CONTROLMAIN_0_TEST0BIT_SHIFT                        _MK_SHIFT_CONST(3)
#define G2SB_CTX6_G2CONTROLMAIN_0_TEST0BIT_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLMAIN_0_TEST0BIT_SHIFT)
#define G2SB_CTX6_G2CONTROLMAIN_0_TEST0BIT_RANGE                        3:3
#define G2SB_CTX6_G2CONTROLMAIN_0_TEST0BIT_WOFFSET                      0x0
#define G2SB_CTX6_G2CONTROLMAIN_0_TEST0BIT_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_TEST0BIT_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLMAIN_0_TEST0BIT_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_TEST0BIT_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_TEST0BIT_DISABLE                      _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLMAIN_0_TEST0BIT_ENABLE                       _MK_ENUM_CONST(1)

// BitBlt Source Copy Fade enable, 1=enable (share with mltln), only support
//  16bpp mode
#define G2SB_CTX6_G2CONTROLMAIN_0_FADEN_SHIFT                   _MK_SHIFT_CONST(4)
#define G2SB_CTX6_G2CONTROLMAIN_0_FADEN_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLMAIN_0_FADEN_SHIFT)
#define G2SB_CTX6_G2CONTROLMAIN_0_FADEN_RANGE                   4:4
#define G2SB_CTX6_G2CONTROLMAIN_0_FADEN_WOFFSET                 0x0
#define G2SB_CTX6_G2CONTROLMAIN_0_FADEN_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_FADEN_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLMAIN_0_FADEN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_FADEN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_FADEN_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLMAIN_0_FADEN_ENABLE                  _MK_ENUM_CONST(1)

// BitBlt Alpha Blending, 1=enable. 0=disable,
//when both Faden and alpen are 1, output=Source*alpha_v + fadoff,
// alpha_v is decided by alptype
#define G2SB_CTX6_G2CONTROLMAIN_0_ALPEN_SHIFT                   _MK_SHIFT_CONST(5)
#define G2SB_CTX6_G2CONTROLMAIN_0_ALPEN_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLMAIN_0_ALPEN_SHIFT)
#define G2SB_CTX6_G2CONTROLMAIN_0_ALPEN_RANGE                   5:5
#define G2SB_CTX6_G2CONTROLMAIN_0_ALPEN_WOFFSET                 0x0
#define G2SB_CTX6_G2CONTROLMAIN_0_ALPEN_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_ALPEN_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLMAIN_0_ALPEN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_ALPEN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// BitBlt Solid Source Color Fill: 1=enable. FGC will be used as
// the color value.
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCSLD_SHIFT                  _MK_SHIFT_CONST(6)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCSLD_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLMAIN_0_SRCSLD_SHIFT)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCSLD_RANGE                  6:6
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCSLD_WOFFSET                        0x0
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCSLD_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCSLD_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCSLD_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCSLD_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCSLD_DISABLE                        _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCSLD_ENABLE                 _MK_ENUM_CONST(1)

// BitBlt Solid Pattern Fill: 1=enable. BGC will be used as
// the color value.
#define G2SB_CTX6_G2CONTROLMAIN_0_PATSLD_SHIFT                  _MK_SHIFT_CONST(7)
#define G2SB_CTX6_G2CONTROLMAIN_0_PATSLD_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLMAIN_0_PATSLD_SHIFT)
#define G2SB_CTX6_G2CONTROLMAIN_0_PATSLD_RANGE                  7:7
#define G2SB_CTX6_G2CONTROLMAIN_0_PATSLD_WOFFSET                        0x0
#define G2SB_CTX6_G2CONTROLMAIN_0_PATSLD_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_PATSLD_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLMAIN_0_PATSLD_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_PATSLD_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_PATSLD_DISABLE                        _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLMAIN_0_PATSLD_ENABLE                 _MK_ENUM_CONST(1)

// When mono pattern is set, we use mono tile pattern fill.
//
//  current pattern client can support a 16x16 bit tile which can be used
//  to generate a larger surface (i.e. tile this surface in the x and y direction)
//  The tile is stored in memory.  Currently, PATXO and PATYO tell you where
//  to start in the 16x16 tile when expanding the monochrome data.
//
//  See patxo and patyo comments below for programming (hw bid 247332)
//   When xdir==1
//     Patxo = pattern width - (patxo+destination width)&0xF   -- For xoffsets
//  y offsets PATYO remains the same when xdir/ydir change.
//
//
//  How the tile replication pattern looks based on xdir/ydir (without programming patxo above):
//
//  xdir=0 ydir=0              xdir=1 ydir=0
//
//   +---+--+                  +--+---+
//   |^|^|^||                  ||^|^|^|
//   |~~~|~~|                  |~~|~~~|
//   +---+--|                  |--+---+
//   |^|^|^||                  ||^|^|^|
//   +------+                  +------+
//
//
//   +---+--+                  +--+---+
//   |^|^|^||                  ||^|^|^|
//   |~~~|~~|                  |~~|~~~|
//   +---+--|                  |--+---+
//   |^|^|^||                  ||^|^|^|
//   +------+                  +------+
//    //
//  xdir=0 ydir=1              xdir=1 ydir=1
//
//   Mono tile is
//      +---+
//      |^|^|
//      |~~~|
//      +---+
//
//
#define G2SB_CTX6_G2CONTROLMAIN_0_PATFL_SHIFT                   _MK_SHIFT_CONST(8)
#define G2SB_CTX6_G2CONTROLMAIN_0_PATFL_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLMAIN_0_PATFL_SHIFT)
#define G2SB_CTX6_G2CONTROLMAIN_0_PATFL_RANGE                   8:8
#define G2SB_CTX6_G2CONTROLMAIN_0_PATFL_WOFFSET                 0x0
#define G2SB_CTX6_G2CONTROLMAIN_0_PATFL_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_PATFL_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLMAIN_0_PATFL_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_PATFL_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_PATFL_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLMAIN_0_PATFL_ENABLE                  _MK_ENUM_CONST(1)

//  0=incrementing, 1=decrementing.
//  xdir should not be set when source surface has different color depth as destination surface.
//  e.g. ALPTYPE=PLS8BX (32bpp blending with 16bpp), xdir has to be 0
//  SRCCD==0 (mono src) OR PATCD==0 (mono pat), xdir has to be 0
#define G2SB_CTX6_G2CONTROLMAIN_0_XDIR_SHIFT                    _MK_SHIFT_CONST(9)
#define G2SB_CTX6_G2CONTROLMAIN_0_XDIR_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLMAIN_0_XDIR_SHIFT)
#define G2SB_CTX6_G2CONTROLMAIN_0_XDIR_RANGE                    9:9
#define G2SB_CTX6_G2CONTROLMAIN_0_XDIR_WOFFSET                  0x0
#define G2SB_CTX6_G2CONTROLMAIN_0_XDIR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_XDIR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLMAIN_0_XDIR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_XDIR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//  0=incrementing, 1=decrementing.
//  ydir should not be set when source surface has different color depth as destination surface.
//  SRCCD==0 (mono src) OR PATCD==0 (mono pat), ydir has to be 0
#define G2SB_CTX6_G2CONTROLMAIN_0_YDIR_SHIFT                    _MK_SHIFT_CONST(10)
#define G2SB_CTX6_G2CONTROLMAIN_0_YDIR_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLMAIN_0_YDIR_SHIFT)
#define G2SB_CTX6_G2CONTROLMAIN_0_YDIR_RANGE                    10:10
#define G2SB_CTX6_G2CONTROLMAIN_0_YDIR_WOFFSET                  0x0
#define G2SB_CTX6_G2CONTROLMAIN_0_YDIR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_YDIR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLMAIN_0_YDIR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_YDIR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// xy transpose,
// Line stride DSTS has to be 16bytes aligned if enabled.
// If XYTDW==1, ROP can not include destination.
#define G2SB_CTX6_G2CONTROLMAIN_0_XYTDW_SHIFT                   _MK_SHIFT_CONST(11)
#define G2SB_CTX6_G2CONTROLMAIN_0_XYTDW_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLMAIN_0_XYTDW_SHIFT)
#define G2SB_CTX6_G2CONTROLMAIN_0_XYTDW_RANGE                   11:11
#define G2SB_CTX6_G2CONTROLMAIN_0_XYTDW_WOFFSET                 0x0
#define G2SB_CTX6_G2CONTROLMAIN_0_XYTDW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_XYTDW_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLMAIN_0_XYTDW_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_XYTDW_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Source Data is in Pack Mode.
//  SRCLNGAP in G2SRCPACK is the line gap for source packed mode.
//  If(SRCPACK && ~SRCSEL), source data is packed and from screen, SRCMONOW/SRCMONOH
//  should be programmed properly to fetch data from
//  frame buffer.
//  Note, PACK is not offically supported when the surface is tiled.
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCPACK_SHIFT                 _MK_SHIFT_CONST(12)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCPACK_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLMAIN_0_SRCPACK_SHIFT)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCPACK_RANGE                 12:12
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCPACK_WOFFSET                       0x0
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCPACK_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCPACK_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCPACK_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCPACK_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCPACK_DISABLE                       _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCPACK_ENABLE                        _MK_ENUM_CONST(1)

// Pattern Data is in Pack Mode.
//  PATLNGAP in G2PATPACK is the line gap for pattern packed mode
//  If(PATPACK && ~PATSEl), pattern data is packed and from screen, PATMONOW/PATMONOH
//  should be programmed properly to fetch pattern data from
//  frame buffer.
//  Note, PACK is not offically supported when the surface is tiled.
#define G2SB_CTX6_G2CONTROLMAIN_0_PATPACK_SHIFT                 _MK_SHIFT_CONST(13)
#define G2SB_CTX6_G2CONTROLMAIN_0_PATPACK_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLMAIN_0_PATPACK_SHIFT)
#define G2SB_CTX6_G2CONTROLMAIN_0_PATPACK_RANGE                 13:13
#define G2SB_CTX6_G2CONTROLMAIN_0_PATPACK_WOFFSET                       0x0
#define G2SB_CTX6_G2CONTROLMAIN_0_PATPACK_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_PATPACK_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLMAIN_0_PATPACK_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_PATPACK_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_PATPACK_DISABLE                       _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLMAIN_0_PATPACK_ENABLE                        _MK_ENUM_CONST(1)

// flip y direction to make image upside down or the other way.
// If YFLIP==1, ROP can not include destination.
#define G2SB_CTX6_G2CONTROLMAIN_0_YFLIP_SHIFT                   _MK_SHIFT_CONST(14)
#define G2SB_CTX6_G2CONTROLMAIN_0_YFLIP_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLMAIN_0_YFLIP_SHIFT)
#define G2SB_CTX6_G2CONTROLMAIN_0_YFLIP_RANGE                   14:14
#define G2SB_CTX6_G2CONTROLMAIN_0_YFLIP_WOFFSET                 0x0
#define G2SB_CTX6_G2CONTROLMAIN_0_YFLIP_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_YFLIP_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLMAIN_0_YFLIP_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_YFLIP_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_YFLIP_DSIABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLMAIN_0_YFLIP_ENABLE                  _MK_ENUM_CONST(1)

// Source Data Select:
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCSEL_SHIFT                  _MK_SHIFT_CONST(15)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCSEL_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLMAIN_0_SRCSEL_SHIFT)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCSEL_RANGE                  15:15
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCSEL_WOFFSET                        0x0
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCSEL_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCSEL_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCSEL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCSEL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCSEL_SCREEN                 _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCSEL_MEMORY                 _MK_ENUM_CONST(1)

// Destination color depth:
//   00=8-bpp, 01=16-bpp, 10=32-bpp. 11=reserved
#define G2SB_CTX6_G2CONTROLMAIN_0_DSTCD_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX6_G2CONTROLMAIN_0_DSTCD_FIELD                   (_MK_MASK_CONST(0x3) << G2SB_CTX6_G2CONTROLMAIN_0_DSTCD_SHIFT)
#define G2SB_CTX6_G2CONTROLMAIN_0_DSTCD_RANGE                   17:16
#define G2SB_CTX6_G2CONTROLMAIN_0_DSTCD_WOFFSET                 0x0
#define G2SB_CTX6_G2CONTROLMAIN_0_DSTCD_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_DSTCD_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_DSTCD_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_DSTCD_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_DSTCD_BPP8                    _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLMAIN_0_DSTCD_BPP16                   _MK_ENUM_CONST(1)
#define G2SB_CTX6_G2CONTROLMAIN_0_DSTCD_BPP32                   _MK_ENUM_CONST(2)
#define G2SB_CTX6_G2CONTROLMAIN_0_DSTCD_RESERVED3                       _MK_ENUM_CONST(3)

// Destination read transparency enable:
//   0x=destination read transparency disabled
//   10=color destination read transparency
//   11=inverse color destination read transparency.
// 20 rw INIC
// Initiate Command
// (1=initiate command immediately, 0=wait for launch write)
#define G2SB_CTX6_G2CONTROLMAIN_0_DSTT_SHIFT                    _MK_SHIFT_CONST(18)
#define G2SB_CTX6_G2CONTROLMAIN_0_DSTT_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX6_G2CONTROLMAIN_0_DSTT_SHIFT)
#define G2SB_CTX6_G2CONTROLMAIN_0_DSTT_RANGE                    19:18
#define G2SB_CTX6_G2CONTROLMAIN_0_DSTT_WOFFSET                  0x0
#define G2SB_CTX6_G2CONTROLMAIN_0_DSTT_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_DSTT_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX6_G2CONTROLMAIN_0_DSTT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_DSTT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//0 Source mono
//1 Source has same color depth as destination
//  SRCCD==0 xdir/ydir has to be 0
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCCD_SHIFT                   _MK_SHIFT_CONST(20)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCCD_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLMAIN_0_SRCCD_SHIFT)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCCD_RANGE                   20:20
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCCD_WOFFSET                 0x0
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCCD_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCCD_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCCD_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCCD_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Start from Msb or lsb in byte when mono expansion
// If HLMONO is 1, bit 0 (the lsb) is the first bit
// If HLMONO is 0, bit 7 (the msb) is the first bit
#define G2SB_CTX6_G2CONTROLMAIN_0_HLMONO_SHIFT                  _MK_SHIFT_CONST(21)
#define G2SB_CTX6_G2CONTROLMAIN_0_HLMONO_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLMAIN_0_HLMONO_SHIFT)
#define G2SB_CTX6_G2CONTROLMAIN_0_HLMONO_RANGE                  21:21
#define G2SB_CTX6_G2CONTROLMAIN_0_HLMONO_WOFFSET                        0x0
#define G2SB_CTX6_G2CONTROLMAIN_0_HLMONO_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_HLMONO_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_HLMONO_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_HLMONO_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Source transparency enable: 0x=source transparency disabled,
// 10=mono source background transparency
//    or color source transparency,
// 11=mono source foreground transparency
//    or inverse color source transparency.
// NOTE: When source transparency is enabled and SRCCD==0(mono)
//       SRCBGC!=SRCFGC should be satisfied.
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCT_SHIFT                    _MK_SHIFT_CONST(22)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCT_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX6_G2CONTROLMAIN_0_SRCT_SHIFT)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCT_RANGE                    23:22
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCT_WOFFSET                  0x0
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCT_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCT_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Source base address select:
//  0=srcba, 1=dstba. This is not used for Line Draw and
// if source data comes from host memory.
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCBAS_SHIFT                  _MK_SHIFT_CONST(24)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCBAS_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLMAIN_0_SRCBAS_SHIFT)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCBAS_RANGE                  24:24
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCBAS_WOFFSET                        0x0
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCBAS_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCBAS_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCBAS_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCBAS_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//Display Switching Window Control (GCSW[1:0])
//This parameter controls multi-buffering for Display.
//x0 At end of current command, don't send signal to Display to switch buffer.
//01 two buffers, dstba and dstba_b are used
//11 three buffers, dstba, dstba_b dstba_c are used
#define G2SB_CTX6_G2CONTROLMAIN_0_GCSW_SHIFT                    _MK_SHIFT_CONST(25)
#define G2SB_CTX6_G2CONTROLMAIN_0_GCSW_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX6_G2CONTROLMAIN_0_GCSW_SHIFT)
#define G2SB_CTX6_G2CONTROLMAIN_0_GCSW_RANGE                    26:25
#define G2SB_CTX6_G2CONTROLMAIN_0_GCSW_WOFFSET                  0x0
#define G2SB_CTX6_G2CONTROLMAIN_0_GCSW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_GCSW_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX6_G2CONTROLMAIN_0_GCSW_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_GCSW_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//source direct addressing
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCDIR_SHIFT                  _MK_SHIFT_CONST(27)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCDIR_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLMAIN_0_SRCDIR_SHIFT)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCDIR_RANGE                  27:27
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCDIR_WOFFSET                        0x0
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCDIR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCDIR_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCDIR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_SRCDIR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//destination direct addressing
#define G2SB_CTX6_G2CONTROLMAIN_0_DSTDIR_SHIFT                  _MK_SHIFT_CONST(28)
#define G2SB_CTX6_G2CONTROLMAIN_0_DSTDIR_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLMAIN_0_DSTDIR_SHIFT)
#define G2SB_CTX6_G2CONTROLMAIN_0_DSTDIR_RANGE                  28:28
#define G2SB_CTX6_G2CONTROLMAIN_0_DSTDIR_WOFFSET                        0x0
#define G2SB_CTX6_G2CONTROLMAIN_0_DSTDIR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_DSTDIR_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLMAIN_0_DSTDIR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_DSTDIR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// This feature is not offically supported.
//seperate destination read/write surface address
//0: read/write use DSTBA
//1: read uses SRCBA_B, write uses DSTBA
#define G2SB_CTX6_G2CONTROLMAIN_0_DST_RD_WR_SEP_SHIFT                   _MK_SHIFT_CONST(29)
#define G2SB_CTX6_G2CONTROLMAIN_0_DST_RD_WR_SEP_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLMAIN_0_DST_RD_WR_SEP_SHIFT)
#define G2SB_CTX6_G2CONTROLMAIN_0_DST_RD_WR_SEP_RANGE                   29:29
#define G2SB_CTX6_G2CONTROLMAIN_0_DST_RD_WR_SEP_WOFFSET                 0x0
#define G2SB_CTX6_G2CONTROLMAIN_0_DST_RD_WR_SEP_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_DST_RD_WR_SEP_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLMAIN_0_DST_RD_WR_SEP_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_DST_RD_WR_SEP_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// pattern Data Select: SRCSEL and PATSEL can't be both enabled.
#define G2SB_CTX6_G2CONTROLMAIN_0_PATSEL_SHIFT                  _MK_SHIFT_CONST(30)
#define G2SB_CTX6_G2CONTROLMAIN_0_PATSEL_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CONTROLMAIN_0_PATSEL_SHIFT)
#define G2SB_CTX6_G2CONTROLMAIN_0_PATSEL_RANGE                  30:30
#define G2SB_CTX6_G2CONTROLMAIN_0_PATSEL_WOFFSET                        0x0
#define G2SB_CTX6_G2CONTROLMAIN_0_PATSEL_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_PATSEL_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CONTROLMAIN_0_PATSEL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_PATSEL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CONTROLMAIN_0_PATSEL_SCREEN                 _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CONTROLMAIN_0_PATSEL_MEMORY                 _MK_ENUM_CONST(1)


// Register G2SB_CTX6_G2ROPFADE_0  //{host,2d,index=20}
#define G2SB_CTX6_G2ROPFADE_0                   _MK_ADDR_CONST(0x6020)
#define G2SB_CTX6_G2ROPFADE_0_SECURE                    0x0
#define G2SB_CTX6_G2ROPFADE_0_WORD_COUNT                        0x1
#define G2SB_CTX6_G2ROPFADE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2ROPFADE_0_RESET_MASK                        _MK_MASK_CONST(0xff)
#define G2SB_CTX6_G2ROPFADE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2ROPFADE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2ROPFADE_0_READ_MASK                         _MK_MASK_CONST(0xffff00ff)
#define G2SB_CTX6_G2ROPFADE_0_WRITE_MASK                        _MK_MASK_CONST(0xffff00ff)
//If YFLIP==1 or XYTDW==1, ROP can not include destination.
//Since destination may have been corrupted before reading out.
#define G2SB_CTX6_G2ROPFADE_0_ROP_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2ROPFADE_0_ROP_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX6_G2ROPFADE_0_ROP_SHIFT)
#define G2SB_CTX6_G2ROPFADE_0_ROP_RANGE                 7:0
#define G2SB_CTX6_G2ROPFADE_0_ROP_WOFFSET                       0x0
#define G2SB_CTX6_G2ROPFADE_0_ROP_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2ROPFADE_0_ROP_DEFAULT_MASK                  _MK_MASK_CONST(0xff)
#define G2SB_CTX6_G2ROPFADE_0_ROP_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2ROPFADE_0_ROP_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//
#define G2SB_CTX6_G2ROPFADE_0_FADCOE_SHIFT                      _MK_SHIFT_CONST(16)
#define G2SB_CTX6_G2ROPFADE_0_FADCOE_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX6_G2ROPFADE_0_FADCOE_SHIFT)
#define G2SB_CTX6_G2ROPFADE_0_FADCOE_RANGE                      23:16
#define G2SB_CTX6_G2ROPFADE_0_FADCOE_WOFFSET                    0x0
#define G2SB_CTX6_G2ROPFADE_0_FADCOE_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2ROPFADE_0_FADCOE_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2ROPFADE_0_FADCOE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2ROPFADE_0_FADCOE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

//
#define G2SB_CTX6_G2ROPFADE_0_FADOFF_SHIFT                      _MK_SHIFT_CONST(24)
#define G2SB_CTX6_G2ROPFADE_0_FADOFF_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX6_G2ROPFADE_0_FADOFF_SHIFT)
#define G2SB_CTX6_G2ROPFADE_0_FADOFF_RANGE                      31:24
#define G2SB_CTX6_G2ROPFADE_0_FADOFF_WOFFSET                    0x0
#define G2SB_CTX6_G2ROPFADE_0_FADOFF_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2ROPFADE_0_FADOFF_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2ROPFADE_0_FADOFF_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2ROPFADE_0_FADOFF_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2ALPHABLEND_0  //{2d,index=21}
#define G2SB_CTX6_G2ALPHABLEND_0                        _MK_ADDR_CONST(0x6021)
#define G2SB_CTX6_G2ALPHABLEND_0_SECURE                         0x0
#define G2SB_CTX6_G2ALPHABLEND_0_WORD_COUNT                     0x1
#define G2SB_CTX6_G2ALPHABLEND_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2ALPHABLEND_0_RESET_MASK                     _MK_MASK_CONST(0x100)
#define G2SB_CTX6_G2ALPHABLEND_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2ALPHABLEND_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2ALPHABLEND_0_READ_MASK                      _MK_MASK_CONST(0xffff01ff)
#define G2SB_CTX6_G2ALPHABLEND_0_WRITE_MASK                     _MK_MASK_CONST(0xffff01ff)
#define G2SB_CTX6_G2ALPHABLEND_0_ALPHA_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2ALPHABLEND_0_ALPHA_FIELD                    (_MK_MASK_CONST(0xff) << G2SB_CTX6_G2ALPHABLEND_0_ALPHA_SHIFT)
#define G2SB_CTX6_G2ALPHABLEND_0_ALPHA_RANGE                    7:0
#define G2SB_CTX6_G2ALPHABLEND_0_ALPHA_WOFFSET                  0x0
#define G2SB_CTX6_G2ALPHABLEND_0_ALPHA_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2ALPHABLEND_0_ALPHA_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2ALPHABLEND_0_ALPHA_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2ALPHABLEND_0_ALPHA_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

#define G2SB_CTX6_G2ALPHABLEND_0_ALPHAINV_SHIFT                 _MK_SHIFT_CONST(8)
#define G2SB_CTX6_G2ALPHABLEND_0_ALPHAINV_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2ALPHABLEND_0_ALPHAINV_SHIFT)
#define G2SB_CTX6_G2ALPHABLEND_0_ALPHAINV_RANGE                 8:8
#define G2SB_CTX6_G2ALPHABLEND_0_ALPHAINV_WOFFSET                       0x0
#define G2SB_CTX6_G2ALPHABLEND_0_ALPHAINV_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2ALPHABLEND_0_ALPHAINV_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2ALPHABLEND_0_ALPHAINV_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2ALPHABLEND_0_ALPHAINV_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

#define G2SB_CTX6_G2ALPHABLEND_0_ALPHA0V_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX6_G2ALPHABLEND_0_ALPHA0V_FIELD                  (_MK_MASK_CONST(0xff) << G2SB_CTX6_G2ALPHABLEND_0_ALPHA0V_SHIFT)
#define G2SB_CTX6_G2ALPHABLEND_0_ALPHA0V_RANGE                  23:16
#define G2SB_CTX6_G2ALPHABLEND_0_ALPHA0V_WOFFSET                        0x0
#define G2SB_CTX6_G2ALPHABLEND_0_ALPHA0V_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2ALPHABLEND_0_ALPHA0V_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2ALPHABLEND_0_ALPHA0V_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2ALPHABLEND_0_ALPHA0V_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX6_G2ALPHABLEND_0_ALPHA1V_SHIFT                  _MK_SHIFT_CONST(24)
#define G2SB_CTX6_G2ALPHABLEND_0_ALPHA1V_FIELD                  (_MK_MASK_CONST(0xff) << G2SB_CTX6_G2ALPHABLEND_0_ALPHA1V_SHIFT)
#define G2SB_CTX6_G2ALPHABLEND_0_ALPHA1V_RANGE                  31:24
#define G2SB_CTX6_G2ALPHABLEND_0_ALPHA1V_WOFFSET                        0x0
#define G2SB_CTX6_G2ALPHABLEND_0_ALPHA1V_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2ALPHABLEND_0_ALPHA1V_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2ALPHABLEND_0_ALPHA1V_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2ALPHABLEND_0_ALPHA1V_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// ClipRect Methods
// top-left bounds are inclusive

// Register G2SB_CTX6_G2CLIPLEFTTOP_0  //{2d,index=22}
#define G2SB_CTX6_G2CLIPLEFTTOP_0                       _MK_ADDR_CONST(0x6022)
#define G2SB_CTX6_G2CLIPLEFTTOP_0_SECURE                        0x0
#define G2SB_CTX6_G2CLIPLEFTTOP_0_WORD_COUNT                    0x1
#define G2SB_CTX6_G2CLIPLEFTTOP_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLIPLEFTTOP_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLIPLEFTTOP_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLIPLEFTTOP_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLIPLEFTTOP_0_READ_MASK                     _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX6_G2CLIPLEFTTOP_0_WRITE_MASK                    _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX6_G2CLIPLEFTTOP_0_CLIPL_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2CLIPLEFTTOP_0_CLIPL_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX6_G2CLIPLEFTTOP_0_CLIPL_SHIFT)
#define G2SB_CTX6_G2CLIPLEFTTOP_0_CLIPL_RANGE                   14:0
#define G2SB_CTX6_G2CLIPLEFTTOP_0_CLIPL_WOFFSET                 0x0
#define G2SB_CTX6_G2CLIPLEFTTOP_0_CLIPL_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLIPLEFTTOP_0_CLIPL_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLIPLEFTTOP_0_CLIPL_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLIPLEFTTOP_0_CLIPL_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

#define G2SB_CTX6_G2CLIPLEFTTOP_0_CLIPT_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX6_G2CLIPLEFTTOP_0_CLIPT_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX6_G2CLIPLEFTTOP_0_CLIPT_SHIFT)
#define G2SB_CTX6_G2CLIPLEFTTOP_0_CLIPT_RANGE                   30:16
#define G2SB_CTX6_G2CLIPLEFTTOP_0_CLIPT_WOFFSET                 0x0
#define G2SB_CTX6_G2CLIPLEFTTOP_0_CLIPT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLIPLEFTTOP_0_CLIPT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLIPLEFTTOP_0_CLIPT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLIPLEFTTOP_0_CLIPT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// bottom-right bounds are exclusive

// Register G2SB_CTX6_G2CLIPRIGHTBOT_0  //{2d,index=23}
#define G2SB_CTX6_G2CLIPRIGHTBOT_0                      _MK_ADDR_CONST(0x6023)
#define G2SB_CTX6_G2CLIPRIGHTBOT_0_SECURE                       0x0
#define G2SB_CTX6_G2CLIPRIGHTBOT_0_WORD_COUNT                   0x1
#define G2SB_CTX6_G2CLIPRIGHTBOT_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLIPRIGHTBOT_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLIPRIGHTBOT_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLIPRIGHTBOT_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLIPRIGHTBOT_0_READ_MASK                    _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX6_G2CLIPRIGHTBOT_0_WRITE_MASK                   _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX6_G2CLIPRIGHTBOT_0_CLIPR_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2CLIPRIGHTBOT_0_CLIPR_FIELD                  (_MK_MASK_CONST(0x7fff) << G2SB_CTX6_G2CLIPRIGHTBOT_0_CLIPR_SHIFT)
#define G2SB_CTX6_G2CLIPRIGHTBOT_0_CLIPR_RANGE                  14:0
#define G2SB_CTX6_G2CLIPRIGHTBOT_0_CLIPR_WOFFSET                        0x0
#define G2SB_CTX6_G2CLIPRIGHTBOT_0_CLIPR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLIPRIGHTBOT_0_CLIPR_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLIPRIGHTBOT_0_CLIPR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLIPRIGHTBOT_0_CLIPR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX6_G2CLIPRIGHTBOT_0_CLIPB_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX6_G2CLIPRIGHTBOT_0_CLIPB_FIELD                  (_MK_MASK_CONST(0x7fff) << G2SB_CTX6_G2CLIPRIGHTBOT_0_CLIPB_SHIFT)
#define G2SB_CTX6_G2CLIPRIGHTBOT_0_CLIPB_RANGE                  30:16
#define G2SB_CTX6_G2CLIPRIGHTBOT_0_CLIPB_WOFFSET                        0x0
#define G2SB_CTX6_G2CLIPRIGHTBOT_0_CLIPB_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLIPRIGHTBOT_0_CLIPB_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLIPRIGHTBOT_0_CLIPB_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CLIPRIGHTBOT_0_CLIPB_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//pattern methods
// G2PATPACK should be used to specify the line gap
// use G2PATPACK_SIZE to program height and width
//  PACK is generally only useful with narrow monochrome surfaces
//  Note, PACK is not offically supported when the surface is tiled.

// Register G2SB_CTX6_G2PATPACK_0  //{2d,index=24} Pattern packed mode
#define G2SB_CTX6_G2PATPACK_0                   _MK_ADDR_CONST(0x6024)
#define G2SB_CTX6_G2PATPACK_0_SECURE                    0x0
#define G2SB_CTX6_G2PATPACK_0_WORD_COUNT                        0x1
#define G2SB_CTX6_G2PATPACK_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATPACK_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATPACK_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATPACK_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATPACK_0_READ_MASK                         _MK_MASK_CONST(0xf)
#define G2SB_CTX6_G2PATPACK_0_WRITE_MASK                        _MK_MASK_CONST(0xf)
// Packed mode, pattern data line gap. byte
#define G2SB_CTX6_G2PATPACK_0_PATLNGAP_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2PATPACK_0_PATLNGAP_FIELD                    (_MK_MASK_CONST(0xf) << G2SB_CTX6_G2PATPACK_0_PATLNGAP_SHIFT)
#define G2SB_CTX6_G2PATPACK_0_PATLNGAP_RANGE                    3:0
#define G2SB_CTX6_G2PATPACK_0_PATLNGAP_WOFFSET                  0x0
#define G2SB_CTX6_G2PATPACK_0_PATLNGAP_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATPACK_0_PATLNGAP_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATPACK_0_PATLNGAP_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATPACK_0_PATLNGAP_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// G2PATPACK_SIZE -- extension of G2PATPACK, this register only holds the size of the packed data
//  Note, PACK is not offically supported when the surface is tiled.

// Register G2SB_CTX6_G2PATPACK_SIZE_0  //{2d,index=25} Pattern packed mode
// Packed mode, pattern data line gap. byte
#define G2SB_CTX6_G2PATPACK_SIZE_0                      _MK_ADDR_CONST(0x6025)
#define G2SB_CTX6_G2PATPACK_SIZE_0_SECURE                       0x0
#define G2SB_CTX6_G2PATPACK_SIZE_0_WORD_COUNT                   0x1
#define G2SB_CTX6_G2PATPACK_SIZE_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATPACK_SIZE_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATPACK_SIZE_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATPACK_SIZE_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATPACK_SIZE_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2PATPACK_SIZE_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
// Mono data width in packed mode, byte
#define G2SB_CTX6_G2PATPACK_SIZE_0_PATMONOW_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2PATPACK_SIZE_0_PATMONOW_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_CTX6_G2PATPACK_SIZE_0_PATMONOW_SHIFT)
#define G2SB_CTX6_G2PATPACK_SIZE_0_PATMONOW_RANGE                       15:0
#define G2SB_CTX6_G2PATPACK_SIZE_0_PATMONOW_WOFFSET                     0x0
#define G2SB_CTX6_G2PATPACK_SIZE_0_PATMONOW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATPACK_SIZE_0_PATMONOW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATPACK_SIZE_0_PATMONOW_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATPACK_SIZE_0_PATMONOW_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//  Pattern mono data height in packed mode, byte
#define G2SB_CTX6_G2PATPACK_SIZE_0_PATMONOH_SHIFT                       _MK_SHIFT_CONST(16)
#define G2SB_CTX6_G2PATPACK_SIZE_0_PATMONOH_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_CTX6_G2PATPACK_SIZE_0_PATMONOH_SHIFT)
#define G2SB_CTX6_G2PATPACK_SIZE_0_PATMONOH_RANGE                       31:16
#define G2SB_CTX6_G2PATPACK_SIZE_0_PATMONOH_WOFFSET                     0x0
#define G2SB_CTX6_G2PATPACK_SIZE_0_PATMONOH_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATPACK_SIZE_0_PATMONOH_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATPACK_SIZE_0_PATMONOH_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATPACK_SIZE_0_PATMONOH_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2PATBA_0  //{2d,index=26}
#define G2SB_CTX6_G2PATBA_0                     _MK_ADDR_CONST(0x6026)
#define G2SB_CTX6_G2PATBA_0_SECURE                      0x0
#define G2SB_CTX6_G2PATBA_0_WORD_COUNT                  0x1
#define G2SB_CTX6_G2PATBA_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATBA_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATBA_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATBA_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATBA_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2PATBA_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// If(PATFL==1){
//   It has to be 16bytes aligned.
// }else{
//   Point to the first byte of the first pixel of pattern plane.
// }
#define G2SB_CTX6_G2PATBA_0_PATBA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2PATBA_0_PATBA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX6_G2PATBA_0_PATBA_SHIFT)
#define G2SB_CTX6_G2PATBA_0_PATBA_RANGE                 31:0
#define G2SB_CTX6_G2PATBA_0_PATBA_WOFFSET                       0x0
#define G2SB_CTX6_G2PATBA_0_PATBA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATBA_0_PATBA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATBA_0_PATBA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATBA_0_PATBA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2PATOS_0  //{2d,index=27}
#define G2SB_CTX6_G2PATOS_0                     _MK_ADDR_CONST(0x6027)
#define G2SB_CTX6_G2PATOS_0_SECURE                      0x0
#define G2SB_CTX6_G2PATOS_0_WORD_COUNT                  0x1
#define G2SB_CTX6_G2PATOS_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATOS_0_RESET_MASK                  _MK_MASK_CONST(0x600000)
#define G2SB_CTX6_G2PATOS_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATOS_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATOS_0_READ_MASK                   _MK_MASK_CONST(0xff61ffff)
#define G2SB_CTX6_G2PATOS_0_WRITE_MASK                  _MK_MASK_CONST(0xff61ffff)
//stride
#define G2SB_CTX6_G2PATOS_0_PATST_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2PATOS_0_PATST_FIELD                 (_MK_MASK_CONST(0xffff) << G2SB_CTX6_G2PATOS_0_PATST_SHIFT)
#define G2SB_CTX6_G2PATOS_0_PATST_RANGE                 15:0
#define G2SB_CTX6_G2PATOS_0_PATST_WOFFSET                       0x0
#define G2SB_CTX6_G2PATOS_0_PATST_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATOS_0_PATST_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATOS_0_PATST_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATOS_0_PATST_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//0 mono
//1 same as dstcd
//  PATCD==0 xdir/ydir has to be 0
#define G2SB_CTX6_G2PATOS_0_PATCD_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_CTX6_G2PATOS_0_PATCD_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2PATOS_0_PATCD_SHIFT)
#define G2SB_CTX6_G2PATOS_0_PATCD_RANGE                 16:16
#define G2SB_CTX6_G2PATOS_0_PATCD_WOFFSET                       0x0
#define G2SB_CTX6_G2PATOS_0_PATCD_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATOS_0_PATCD_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATOS_0_PATCD_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATOS_0_PATCD_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Mono pattern transparency enable:
// 0x=pattern transparency disabled,
// 10=mono pattern background transparency
//   or color pattern transparency,
// 11=mono pattern foreground transparency
//   or inverse color pattern transparency.
// NOTE: When pattern transparency is enabled and PATCD==0(mono)
//       PATBGC!=PATFGC should be satisfied.
#define G2SB_CTX6_G2PATOS_0_PATT_SHIFT                  _MK_SHIFT_CONST(21)
#define G2SB_CTX6_G2PATOS_0_PATT_FIELD                  (_MK_MASK_CONST(0x3) << G2SB_CTX6_G2PATOS_0_PATT_SHIFT)
#define G2SB_CTX6_G2PATOS_0_PATT_RANGE                  22:21
#define G2SB_CTX6_G2PATOS_0_PATT_WOFFSET                        0x0
#define G2SB_CTX6_G2PATOS_0_PATT_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATOS_0_PATT_DEFAULT_MASK                   _MK_MASK_CONST(0x3)
#define G2SB_CTX6_G2PATOS_0_PATT_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATOS_0_PATT_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//x offset for mono tile pattern fill.  see PATFL
#define G2SB_CTX6_G2PATOS_0_PATXO_SHIFT                 _MK_SHIFT_CONST(24)
#define G2SB_CTX6_G2PATOS_0_PATXO_FIELD                 (_MK_MASK_CONST(0xf) << G2SB_CTX6_G2PATOS_0_PATXO_SHIFT)
#define G2SB_CTX6_G2PATOS_0_PATXO_RANGE                 27:24
#define G2SB_CTX6_G2PATOS_0_PATXO_WOFFSET                       0x0
#define G2SB_CTX6_G2PATOS_0_PATXO_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATOS_0_PATXO_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATOS_0_PATXO_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATOS_0_PATXO_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//y offset for mono tile pattern fill.  see PATFL
#define G2SB_CTX6_G2PATOS_0_PATYO_SHIFT                 _MK_SHIFT_CONST(28)
#define G2SB_CTX6_G2PATOS_0_PATYO_FIELD                 (_MK_MASK_CONST(0xf) << G2SB_CTX6_G2PATOS_0_PATYO_SHIFT)
#define G2SB_CTX6_G2PATOS_0_PATYO_RANGE                 31:28
#define G2SB_CTX6_G2PATOS_0_PATYO_WOFFSET                       0x0
#define G2SB_CTX6_G2PATOS_0_PATYO_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATOS_0_PATYO_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATOS_0_PATYO_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATOS_0_PATYO_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2PATBGC_0  //{2d,index=28}
#define G2SB_CTX6_G2PATBGC_0                    _MK_ADDR_CONST(0x6028)
#define G2SB_CTX6_G2PATBGC_0_SECURE                     0x0
#define G2SB_CTX6_G2PATBGC_0_WORD_COUNT                         0x1
#define G2SB_CTX6_G2PATBGC_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATBGC_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATBGC_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATBGC_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATBGC_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2PATBGC_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2PATBGC_0_PATBGC_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2PATBGC_0_PATBGC_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX6_G2PATBGC_0_PATBGC_SHIFT)
#define G2SB_CTX6_G2PATBGC_0_PATBGC_RANGE                       31:0
#define G2SB_CTX6_G2PATBGC_0_PATBGC_WOFFSET                     0x0
#define G2SB_CTX6_G2PATBGC_0_PATBGC_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATBGC_0_PATBGC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATBGC_0_PATBGC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATBGC_0_PATBGC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2PATFGC_0  //{2d,index=29}
#define G2SB_CTX6_G2PATFGC_0                    _MK_ADDR_CONST(0x6029)
#define G2SB_CTX6_G2PATFGC_0_SECURE                     0x0
#define G2SB_CTX6_G2PATFGC_0_WORD_COUNT                         0x1
#define G2SB_CTX6_G2PATFGC_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATFGC_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATFGC_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATFGC_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATFGC_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2PATFGC_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2PATFGC_0_PATFGC_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2PATFGC_0_PATFGC_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX6_G2PATFGC_0_PATFGC_SHIFT)
#define G2SB_CTX6_G2PATFGC_0_PATFGC_RANGE                       31:0
#define G2SB_CTX6_G2PATFGC_0_PATFGC_WOFFSET                     0x0
#define G2SB_CTX6_G2PATFGC_0_PATFGC_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATFGC_0_PATFGC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATFGC_0_PATFGC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATFGC_0_PATFGC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2PATKEY_0  //{2d,index=2a}
#define G2SB_CTX6_G2PATKEY_0                    _MK_ADDR_CONST(0x602a)
#define G2SB_CTX6_G2PATKEY_0_SECURE                     0x0
#define G2SB_CTX6_G2PATKEY_0_WORD_COUNT                         0x1
#define G2SB_CTX6_G2PATKEY_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATKEY_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATKEY_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATKEY_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATKEY_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2PATKEY_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2PATKEY_0_PATKEY_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2PATKEY_0_PATKEY_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX6_G2PATKEY_0_PATKEY_SHIFT)
#define G2SB_CTX6_G2PATKEY_0_PATKEY_RANGE                       31:0
#define G2SB_CTX6_G2PATKEY_0_PATKEY_WOFFSET                     0x0
#define G2SB_CTX6_G2PATKEY_0_PATKEY_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATKEY_0_PATKEY_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATKEY_0_PATKEY_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATKEY_0_PATKEY_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2DSTBA_0  //{host,2d,sb,index=2b}
#define G2SB_CTX6_G2DSTBA_0                     _MK_ADDR_CONST(0x602b)
#define G2SB_CTX6_G2DSTBA_0_SECURE                      0x0
#define G2SB_CTX6_G2DSTBA_0_WORD_COUNT                  0x1
#define G2SB_CTX6_G2DSTBA_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2DSTBA_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Destination base address (byte address)
#define G2SB_CTX6_G2DSTBA_0_DSTBA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2DSTBA_0_DSTBA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX6_G2DSTBA_0_DSTBA_SHIFT)
#define G2SB_CTX6_G2DSTBA_0_DSTBA_RANGE                 31:0
#define G2SB_CTX6_G2DSTBA_0_DSTBA_WOFFSET                       0x0
#define G2SB_CTX6_G2DSTBA_0_DSTBA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_0_DSTBA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_0_DSTBA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_0_DSTBA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2DSTBA_B_0  //{host,2d,sb,index=2c}
#define G2SB_CTX6_G2DSTBA_B_0                   _MK_ADDR_CONST(0x602c)
#define G2SB_CTX6_G2DSTBA_B_0_SECURE                    0x0
#define G2SB_CTX6_G2DSTBA_B_0_WORD_COUNT                        0x1
#define G2SB_CTX6_G2DSTBA_B_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_B_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_B_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_B_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_B_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2DSTBA_B_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// Destination base address (byte address)
// only usable in hardware trigger mode by enable gcsw
#define G2SB_CTX6_G2DSTBA_B_0_DSTBA_B_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2DSTBA_B_0_DSTBA_B_FIELD                     (_MK_MASK_CONST(0xffffffff) << G2SB_CTX6_G2DSTBA_B_0_DSTBA_B_SHIFT)
#define G2SB_CTX6_G2DSTBA_B_0_DSTBA_B_RANGE                     31:0
#define G2SB_CTX6_G2DSTBA_B_0_DSTBA_B_WOFFSET                   0x0
#define G2SB_CTX6_G2DSTBA_B_0_DSTBA_B_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_B_0_DSTBA_B_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_B_0_DSTBA_B_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_B_0_DSTBA_B_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2DSTBA_C_0  //{2d,sb,index=2d}
#define G2SB_CTX6_G2DSTBA_C_0                   _MK_ADDR_CONST(0x602d)
#define G2SB_CTX6_G2DSTBA_C_0_SECURE                    0x0
#define G2SB_CTX6_G2DSTBA_C_0_WORD_COUNT                        0x1
#define G2SB_CTX6_G2DSTBA_C_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_C_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_C_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_C_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_C_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2DSTBA_C_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// Destination base address (byte address)
#define G2SB_CTX6_G2DSTBA_C_0_DSTBA_C_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2DSTBA_C_0_DSTBA_C_FIELD                     (_MK_MASK_CONST(0xffffffff) << G2SB_CTX6_G2DSTBA_C_0_DSTBA_C_SHIFT)
#define G2SB_CTX6_G2DSTBA_C_0_DSTBA_C_RANGE                     31:0
#define G2SB_CTX6_G2DSTBA_C_0_DSTBA_C_WOFFSET                   0x0
#define G2SB_CTX6_G2DSTBA_C_0_DSTBA_C_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_C_0_DSTBA_C_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_C_0_DSTBA_C_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_C_0_DSTBA_C_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2DSTST_0  //{host,2d,sb,sbm,index=2e}
#define G2SB_CTX6_G2DSTST_0                     _MK_ADDR_CONST(0x602e)
#define G2SB_CTX6_G2DSTST_0_SECURE                      0x0
#define G2SB_CTX6_G2DSTST_0_WORD_COUNT                  0x1
#define G2SB_CTX6_G2DSTST_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTST_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTST_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTST_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTST_0_READ_MASK                   _MK_MASK_CONST(0xffff)
#define G2SB_CTX6_G2DSTST_0_WRITE_MASK                  _MK_MASK_CONST(0xffff)
// Destination Stride coordinate(bytes) with respect to DSTBA.
#define G2SB_CTX6_G2DSTST_0_DSTS_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2DSTST_0_DSTS_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX6_G2DSTST_0_DSTS_SHIFT)
#define G2SB_CTX6_G2DSTST_0_DSTS_RANGE                  15:0
#define G2SB_CTX6_G2DSTST_0_DSTS_WOFFSET                        0x0
#define G2SB_CTX6_G2DSTST_0_DSTS_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTST_0_DSTS_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTST_0_DSTS_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTST_0_DSTS_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Surface methods
// G2SRCPACK should only be used to specify the line gap
// use G2SRCPACK_SIZE to program height and width

// Register G2SB_CTX6_G2SRCPACK_0  //{2d,index=2f} source data packed mode
#define G2SB_CTX6_G2SRCPACK_0                   _MK_ADDR_CONST(0x602f)
#define G2SB_CTX6_G2SRCPACK_0_SECURE                    0x0
#define G2SB_CTX6_G2SRCPACK_0_WORD_COUNT                        0x1
#define G2SB_CTX6_G2SRCPACK_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCPACK_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCPACK_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCPACK_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCPACK_0_READ_MASK                         _MK_MASK_CONST(0xf)
#define G2SB_CTX6_G2SRCPACK_0_WRITE_MASK                        _MK_MASK_CONST(0xf)
// Packed mode - source mono data line gap
#define G2SB_CTX6_G2SRCPACK_0_SRCLNGAP_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2SRCPACK_0_SRCLNGAP_FIELD                    (_MK_MASK_CONST(0xf) << G2SB_CTX6_G2SRCPACK_0_SRCLNGAP_SHIFT)
#define G2SB_CTX6_G2SRCPACK_0_SRCLNGAP_RANGE                    3:0
#define G2SB_CTX6_G2SRCPACK_0_SRCLNGAP_WOFFSET                  0x0
#define G2SB_CTX6_G2SRCPACK_0_SRCLNGAP_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCPACK_0_SRCLNGAP_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCPACK_0_SRCLNGAP_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCPACK_0_SRCLNGAP_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// G2SRCPACKS_SIZE -- extension of G2SRCPACK, this register only holds the size of the packed data

// Register G2SB_CTX6_G2SRCPACK_SIZE_0  //{2d,index=30} source data packed mode
// In packed mode, SRCMONOW holds the horizontal size (bytes).
// If MONOH > 1, it is required width/stride be 16 byte aligned.
// Packed mode - source mono data line gap
#define G2SB_CTX6_G2SRCPACK_SIZE_0                      _MK_ADDR_CONST(0x6030)
#define G2SB_CTX6_G2SRCPACK_SIZE_0_SECURE                       0x0
#define G2SB_CTX6_G2SRCPACK_SIZE_0_WORD_COUNT                   0x1
#define G2SB_CTX6_G2SRCPACK_SIZE_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCPACK_SIZE_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCPACK_SIZE_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCPACK_SIZE_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCPACK_SIZE_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2SRCPACK_SIZE_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
// Packed mode - source mono data width in bytes
#define G2SB_CTX6_G2SRCPACK_SIZE_0_SRCMONOW_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2SRCPACK_SIZE_0_SRCMONOW_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_CTX6_G2SRCPACK_SIZE_0_SRCMONOW_SHIFT)
#define G2SB_CTX6_G2SRCPACK_SIZE_0_SRCMONOW_RANGE                       15:0
#define G2SB_CTX6_G2SRCPACK_SIZE_0_SRCMONOW_WOFFSET                     0x0
#define G2SB_CTX6_G2SRCPACK_SIZE_0_SRCMONOW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCPACK_SIZE_0_SRCMONOW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCPACK_SIZE_0_SRCMONOW_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCPACK_SIZE_0_SRCMONOW_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Packed mode - source mono data height in bytes
#define G2SB_CTX6_G2SRCPACK_SIZE_0_SRCMONOH_SHIFT                       _MK_SHIFT_CONST(16)
#define G2SB_CTX6_G2SRCPACK_SIZE_0_SRCMONOH_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_CTX6_G2SRCPACK_SIZE_0_SRCMONOH_SHIFT)
#define G2SB_CTX6_G2SRCPACK_SIZE_0_SRCMONOH_RANGE                       31:16
#define G2SB_CTX6_G2SRCPACK_SIZE_0_SRCMONOH_WOFFSET                     0x0
#define G2SB_CTX6_G2SRCPACK_SIZE_0_SRCMONOH_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCPACK_SIZE_0_SRCMONOH_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCPACK_SIZE_0_SRCMONOH_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCPACK_SIZE_0_SRCMONOH_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2SRCBA_0  //{host,2d,sb,index=31}
//src base address
#define G2SB_CTX6_G2SRCBA_0                     _MK_ADDR_CONST(0x6031)
#define G2SB_CTX6_G2SRCBA_0_SECURE                      0x0
#define G2SB_CTX6_G2SRCBA_0_WORD_COUNT                  0x1
#define G2SB_CTX6_G2SRCBA_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCBA_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCBA_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCBA_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCBA_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2SRCBA_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Source base address (byte address)
#define G2SB_CTX6_G2SRCBA_0_SRCBA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2SRCBA_0_SRCBA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX6_G2SRCBA_0_SRCBA_SHIFT)
#define G2SB_CTX6_G2SRCBA_0_SRCBA_RANGE                 31:0
#define G2SB_CTX6_G2SRCBA_0_SRCBA_WOFFSET                       0x0
#define G2SB_CTX6_G2SRCBA_0_SRCBA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCBA_0_SRCBA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCBA_0_SRCBA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCBA_0_SRCBA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2SRCBA_B_0  //{2d,sb,index=32}
//SB only
#define G2SB_CTX6_G2SRCBA_B_0                   _MK_ADDR_CONST(0x6032)
#define G2SB_CTX6_G2SRCBA_B_0_SECURE                    0x0
#define G2SB_CTX6_G2SRCBA_B_0_WORD_COUNT                        0x1
#define G2SB_CTX6_G2SRCBA_B_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCBA_B_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCBA_B_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCBA_B_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCBA_B_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2SRCBA_B_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
//This parameter specifies the start address of source image
// stored in the image buffer memory. In 4:2:0
//format mode, this image block accommodates for Y-image.
//This address specifies byte-position, however, bits [2:0]
// are restricted with respect to the data formats to fit
//multiple pixels in one memory word (8 bytes),. For example,
// {0, 4} for any YcrCb formats, {0, 2, 4, 6} for
//RGB 16-bit format.  Since one Y pixel takes 8-bit, all
// 8 byte-positions are valid in 4:2:0 mode. (Unlike
//multiplexed pixels format, there is no restrictions on this value.)
#define G2SB_CTX6_G2SRCBA_B_0_SRCBA_B_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2SRCBA_B_0_SRCBA_B_FIELD                     (_MK_MASK_CONST(0xffffffff) << G2SB_CTX6_G2SRCBA_B_0_SRCBA_B_SHIFT)
#define G2SB_CTX6_G2SRCBA_B_0_SRCBA_B_RANGE                     31:0
#define G2SB_CTX6_G2SRCBA_B_0_SRCBA_B_WOFFSET                   0x0
#define G2SB_CTX6_G2SRCBA_B_0_SRCBA_B_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCBA_B_0_SRCBA_B_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCBA_B_0_SRCBA_B_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCBA_B_0_SRCBA_B_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2SRCST_0  //{host,2d,sb,sbm,index=33}
#define G2SB_CTX6_G2SRCST_0                     _MK_ADDR_CONST(0x6033)
#define G2SB_CTX6_G2SRCST_0_SECURE                      0x0
#define G2SB_CTX6_G2SRCST_0_WORD_COUNT                  0x1
#define G2SB_CTX6_G2SRCST_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCST_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCST_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCST_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCST_0_READ_MASK                   _MK_MASK_CONST(0xffff)
#define G2SB_CTX6_G2SRCST_0_WRITE_MASK                  _MK_MASK_CONST(0xffff)
// Source Stride coordinate(bytes) with respect to SRCBA.
//In order to fit multiple pixels in one memory word (8 bytes),
//  bits [2:0] are restricted with respect to the
//data formats. For example, {0, 4} for any YcrCb formats,
//  {0, 2, 4, 6} for RGB 16-bit format.
#define G2SB_CTX6_G2SRCST_0_SRCS_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2SRCST_0_SRCS_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX6_G2SRCST_0_SRCS_SHIFT)
#define G2SB_CTX6_G2SRCST_0_SRCS_RANGE                  15:0
#define G2SB_CTX6_G2SRCST_0_SRCS_WOFFSET                        0x0
#define G2SB_CTX6_G2SRCST_0_SRCS_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCST_0_SRCS_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCST_0_SRCS_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCST_0_SRCS_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//srcColors

// Register G2SB_CTX6_G2SRCBGC_0  //{2d,index=34}
#define G2SB_CTX6_G2SRCBGC_0                    _MK_ADDR_CONST(0x6034)
#define G2SB_CTX6_G2SRCBGC_0_SECURE                     0x0
#define G2SB_CTX6_G2SRCBGC_0_WORD_COUNT                         0x1
#define G2SB_CTX6_G2SRCBGC_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCBGC_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCBGC_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCBGC_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCBGC_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2SRCBGC_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2SRCBGC_0_SRCBGC_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2SRCBGC_0_SRCBGC_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX6_G2SRCBGC_0_SRCBGC_SHIFT)
#define G2SB_CTX6_G2SRCBGC_0_SRCBGC_RANGE                       31:0
#define G2SB_CTX6_G2SRCBGC_0_SRCBGC_WOFFSET                     0x0
#define G2SB_CTX6_G2SRCBGC_0_SRCBGC_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCBGC_0_SRCBGC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCBGC_0_SRCBGC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCBGC_0_SRCBGC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2SRCFGC_0  //{host,2d,index=35}
#define G2SB_CTX6_G2SRCFGC_0                    _MK_ADDR_CONST(0x6035)
#define G2SB_CTX6_G2SRCFGC_0_SECURE                     0x0
#define G2SB_CTX6_G2SRCFGC_0_WORD_COUNT                         0x1
#define G2SB_CTX6_G2SRCFGC_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCFGC_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCFGC_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCFGC_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCFGC_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2SRCFGC_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2SRCFGC_0_SRCFGC_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2SRCFGC_0_SRCFGC_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX6_G2SRCFGC_0_SRCFGC_SHIFT)
#define G2SB_CTX6_G2SRCFGC_0_SRCFGC_RANGE                       31:0
#define G2SB_CTX6_G2SRCFGC_0_SRCFGC_WOFFSET                     0x0
#define G2SB_CTX6_G2SRCFGC_0_SRCFGC_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCFGC_0_SRCFGC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCFGC_0_SRCFGC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCFGC_0_SRCFGC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2SRCKEY_0  //{2d,index=36}
#define G2SB_CTX6_G2SRCKEY_0                    _MK_ADDR_CONST(0x6036)
#define G2SB_CTX6_G2SRCKEY_0_SECURE                     0x0
#define G2SB_CTX6_G2SRCKEY_0_WORD_COUNT                         0x1
#define G2SB_CTX6_G2SRCKEY_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCKEY_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCKEY_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCKEY_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCKEY_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2SRCKEY_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2SRCKEY_0_SRCKEY_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2SRCKEY_0_SRCKEY_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX6_G2SRCKEY_0_SRCKEY_SHIFT)
#define G2SB_CTX6_G2SRCKEY_0_SRCKEY_RANGE                       31:0
#define G2SB_CTX6_G2SRCKEY_0_SRCKEY_WOFFSET                     0x0
#define G2SB_CTX6_G2SRCKEY_0_SRCKEY_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCKEY_0_SRCKEY_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCKEY_0_SRCKEY_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCKEY_0_SRCKEY_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// for sc15, SRCWIDTH bit 14 must be set to 0. (limit of 16383 pixels)

// Register G2SB_CTX6_G2SRCSIZE_0  //{host,2d,sb,sbm,index=37}
#define G2SB_CTX6_G2SRCSIZE_0                   _MK_ADDR_CONST(0x6037)
#define G2SB_CTX6_G2SRCSIZE_0_SECURE                    0x0
#define G2SB_CTX6_G2SRCSIZE_0_WORD_COUNT                        0x1
#define G2SB_CTX6_G2SRCSIZE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCSIZE_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCSIZE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCSIZE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCSIZE_0_READ_MASK                         _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX6_G2SRCSIZE_0_WRITE_MASK                        _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX6_G2SRCSIZE_0_SRCWIDTH_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2SRCSIZE_0_SRCWIDTH_FIELD                    (_MK_MASK_CONST(0x7fff) << G2SB_CTX6_G2SRCSIZE_0_SRCWIDTH_SHIFT)
#define G2SB_CTX6_G2SRCSIZE_0_SRCWIDTH_RANGE                    14:0
#define G2SB_CTX6_G2SRCSIZE_0_SRCWIDTH_WOFFSET                  0x0
#define G2SB_CTX6_G2SRCSIZE_0_SRCWIDTH_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCSIZE_0_SRCWIDTH_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCSIZE_0_SRCWIDTH_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCSIZE_0_SRCWIDTH_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// In SB mode, number of lines - 1
// In 2D mode, actual lines
#define G2SB_CTX6_G2SRCSIZE_0_SRCHEIGHT_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX6_G2SRCSIZE_0_SRCHEIGHT_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX6_G2SRCSIZE_0_SRCHEIGHT_SHIFT)
#define G2SB_CTX6_G2SRCSIZE_0_SRCHEIGHT_RANGE                   30:16
#define G2SB_CTX6_G2SRCSIZE_0_SRCHEIGHT_WOFFSET                 0x0
#define G2SB_CTX6_G2SRCSIZE_0_SRCHEIGHT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCSIZE_0_SRCHEIGHT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCSIZE_0_SRCHEIGHT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCSIZE_0_SRCHEIGHT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2DSTSIZE_0  //{host,2d,sb,sbm,index=38}
#define G2SB_CTX6_G2DSTSIZE_0                   _MK_ADDR_CONST(0x6038)
#define G2SB_CTX6_G2DSTSIZE_0_SECURE                    0x0
#define G2SB_CTX6_G2DSTSIZE_0_WORD_COUNT                        0x1
#define G2SB_CTX6_G2DSTSIZE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTSIZE_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTSIZE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTSIZE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTSIZE_0_READ_MASK                         _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX6_G2DSTSIZE_0_WRITE_MASK                        _MK_MASK_CONST(0x7fff7fff)
// In 2D mode, the largest number can be programmed is 0x7fef
#define G2SB_CTX6_G2DSTSIZE_0_DSTWIDTH_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2DSTSIZE_0_DSTWIDTH_FIELD                    (_MK_MASK_CONST(0x7fff) << G2SB_CTX6_G2DSTSIZE_0_DSTWIDTH_SHIFT)
#define G2SB_CTX6_G2DSTSIZE_0_DSTWIDTH_RANGE                    14:0
#define G2SB_CTX6_G2DSTSIZE_0_DSTWIDTH_WOFFSET                  0x0
#define G2SB_CTX6_G2DSTSIZE_0_DSTWIDTH_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTSIZE_0_DSTWIDTH_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTSIZE_0_DSTWIDTH_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTSIZE_0_DSTWIDTH_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// In SB mode, number of lines - 1
// In 2D mode, actual lines
#define G2SB_CTX6_G2DSTSIZE_0_DSTHEIGHT_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX6_G2DSTSIZE_0_DSTHEIGHT_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX6_G2DSTSIZE_0_DSTHEIGHT_SHIFT)
#define G2SB_CTX6_G2DSTSIZE_0_DSTHEIGHT_RANGE                   30:16
#define G2SB_CTX6_G2DSTSIZE_0_DSTHEIGHT_WOFFSET                 0x0
#define G2SB_CTX6_G2DSTSIZE_0_DSTHEIGHT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTSIZE_0_DSTHEIGHT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTSIZE_0_DSTHEIGHT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTSIZE_0_DSTHEIGHT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// ImageBlit Methods

// Register G2SB_CTX6_G2SRCPS_0  //{host,2d,index=39}
#define G2SB_CTX6_G2SRCPS_0                     _MK_ADDR_CONST(0x6039)
#define G2SB_CTX6_G2SRCPS_0_SECURE                      0x0
#define G2SB_CTX6_G2SRCPS_0_WORD_COUNT                  0x1
#define G2SB_CTX6_G2SRCPS_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCPS_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCPS_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCPS_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCPS_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2SRCPS_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
//SRCX[2:0] are ignored in SRCCD==0 (mono expansion),
//The first bit of the first byte (bit7 if HLMONO==0, or bit0 if HLMONO==1) always
//expand to DSTX,DSTY
#define G2SB_CTX6_G2SRCPS_0_SRCX_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2SRCPS_0_SRCX_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX6_G2SRCPS_0_SRCX_SHIFT)
#define G2SB_CTX6_G2SRCPS_0_SRCX_RANGE                  15:0
#define G2SB_CTX6_G2SRCPS_0_SRCX_WOFFSET                        0x0
#define G2SB_CTX6_G2SRCPS_0_SRCX_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCPS_0_SRCX_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCPS_0_SRCX_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCPS_0_SRCX_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX6_G2SRCPS_0_SRCY_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX6_G2SRCPS_0_SRCY_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX6_G2SRCPS_0_SRCY_SHIFT)
#define G2SB_CTX6_G2SRCPS_0_SRCY_RANGE                  31:16
#define G2SB_CTX6_G2SRCPS_0_SRCY_WOFFSET                        0x0
#define G2SB_CTX6_G2SRCPS_0_SRCY_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCPS_0_SRCY_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCPS_0_SRCY_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCPS_0_SRCY_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2DSTPS_0  //{host,2d,index=3a}
#define G2SB_CTX6_G2DSTPS_0                     _MK_ADDR_CONST(0x603a)
#define G2SB_CTX6_G2DSTPS_0_SECURE                      0x0
#define G2SB_CTX6_G2DSTPS_0_WORD_COUNT                  0x1
#define G2SB_CTX6_G2DSTPS_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTPS_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTPS_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTPS_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTPS_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2DSTPS_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// NOTE: when ALPTYPE is PL1BPP, DSTX[2:0] must be zero, see bug 344489
// NOTE: when ALPTYPE is PL2BPP, DSTX[1:0] must be zero, see bug 344489
// NOTE: when ALPTYPE is PL4BPP, DSTX[0:0] must be zero, see bug 344489
#define G2SB_CTX6_G2DSTPS_0_DSTX_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2DSTPS_0_DSTX_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX6_G2DSTPS_0_DSTX_SHIFT)
#define G2SB_CTX6_G2DSTPS_0_DSTX_RANGE                  15:0
#define G2SB_CTX6_G2DSTPS_0_DSTX_WOFFSET                        0x0
#define G2SB_CTX6_G2DSTPS_0_DSTX_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTPS_0_DSTX_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTPS_0_DSTX_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTPS_0_DSTX_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX6_G2DSTPS_0_DSTY_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX6_G2DSTPS_0_DSTY_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX6_G2DSTPS_0_DSTY_SHIFT)
#define G2SB_CTX6_G2DSTPS_0_DSTY_RANGE                  31:16
#define G2SB_CTX6_G2DSTPS_0_DSTY_WOFFSET                        0x0
#define G2SB_CTX6_G2DSTPS_0_DSTY_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTPS_0_DSTY_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTPS_0_DSTY_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTPS_0_DSTY_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// circular buffer

// Register G2SB_CTX6_G2CBDES_0  // {host,2d,sb,index=3b}
#define G2SB_CTX6_G2CBDES_0                     _MK_ADDR_CONST(0x603b)
#define G2SB_CTX6_G2CBDES_0_SECURE                      0x0
#define G2SB_CTX6_G2CBDES_0_WORD_COUNT                  0x1
#define G2SB_CTX6_G2CBDES_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBDES_0_RESET_MASK                  _MK_MASK_CONST(0x80000000)
#define G2SB_CTX6_G2CBDES_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBDES_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBDES_0_READ_MASK                   _MK_MASK_CONST(0xffff00ff)
#define G2SB_CTX6_G2CBDES_0_WRITE_MASK                  _MK_MASK_CONST(0xffff00ff)
// This specifies the number of buffers in
//circular buffer feature
#define G2SB_CTX6_G2CBDES_0_CBCOUNT_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2CBDES_0_CBCOUNT_FIELD                       (_MK_MASK_CONST(0xff) << G2SB_CTX6_G2CBDES_0_CBCOUNT_SHIFT)
#define G2SB_CTX6_G2CBDES_0_CBCOUNT_RANGE                       7:0
#define G2SB_CTX6_G2CBDES_0_CBCOUNT_WOFFSET                     0x0
#define G2SB_CTX6_G2CBDES_0_CBCOUNT_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBDES_0_CBCOUNT_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBDES_0_CBCOUNT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBDES_0_CBCOUNT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//vertical line number in one buffer
#define G2SB_CTX6_G2CBDES_0_CBLINE_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_CTX6_G2CBDES_0_CBLINE_FIELD                        (_MK_MASK_CONST(0x7fff) << G2SB_CTX6_G2CBDES_0_CBLINE_SHIFT)
#define G2SB_CTX6_G2CBDES_0_CBLINE_RANGE                        30:16
#define G2SB_CTX6_G2CBDES_0_CBLINE_WOFFSET                      0x0
#define G2SB_CTX6_G2CBDES_0_CBLINE_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBDES_0_CBLINE_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBDES_0_CBLINE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBDES_0_CBLINE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

//top clipping at the first buffer, (buffer start)
// refer to TOP_CBLINE in G2CBDES2 0= disable
#define G2SB_CTX6_G2CBDES_0_TOPCLIP_SHIFT                       _MK_SHIFT_CONST(31)
#define G2SB_CTX6_G2CBDES_0_TOPCLIP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2CBDES_0_TOPCLIP_SHIFT)
#define G2SB_CTX6_G2CBDES_0_TOPCLIP_RANGE                       31:31
#define G2SB_CTX6_G2CBDES_0_TOPCLIP_WOFFSET                     0x0
#define G2SB_CTX6_G2CBDES_0_TOPCLIP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBDES_0_TOPCLIP_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2CBDES_0_TOPCLIP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBDES_0_TOPCLIP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBDES_0_TOPCLIP_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CBDES_0_TOPCLIP_ENABLE                      _MK_ENUM_CONST(1)


// Register G2SB_CTX6_G2CBSTRIDE_0  // {host,2d,sb,index=3c}
#define G2SB_CTX6_G2CBSTRIDE_0                  _MK_ADDR_CONST(0x603c)
#define G2SB_CTX6_G2CBSTRIDE_0_SECURE                   0x0
#define G2SB_CTX6_G2CBSTRIDE_0_WORD_COUNT                       0x1
#define G2SB_CTX6_G2CBSTRIDE_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBSTRIDE_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBSTRIDE_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBSTRIDE_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBSTRIDE_0_READ_MASK                        _MK_MASK_CONST(0xc0ffffff)
#define G2SB_CTX6_G2CBSTRIDE_0_WRITE_MASK                       _MK_MASK_CONST(0xc0ffffff)
// Video Buffer Luma(or RGB) Buffer Stride
//  This is luma buffer stride (in bytes)
#define G2SB_CTX6_G2CBSTRIDE_0_CBSTRIDE_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2CBSTRIDE_0_CBSTRIDE_FIELD                   (_MK_MASK_CONST(0xffffff) << G2SB_CTX6_G2CBSTRIDE_0_CBSTRIDE_SHIFT)
#define G2SB_CTX6_G2CBSTRIDE_0_CBSTRIDE_RANGE                   23:0
#define G2SB_CTX6_G2CBSTRIDE_0_CBSTRIDE_WOFFSET                 0x0
#define G2SB_CTX6_G2CBSTRIDE_0_CBSTRIDE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBSTRIDE_0_CBSTRIDE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBSTRIDE_0_CBSTRIDE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBSTRIDE_0_CBSTRIDE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Chroma Buffer Stride default is half of luma
//   00= 1/2 of Luma Buffer Stride; in this
//       case, Luma Buffer Stride should be
//       multiple of 2 bytes.
//   01= Equal to Luma Buffer Stride
//   10= 1/4 of Luma Buffer Stride; in this
//       case, Luma Buffer Stride should be
//       multiple of 4 bytes.
//   1x= Reserved
#define G2SB_CTX6_G2CBSTRIDE_0_CBUVSTRIDE_SHIFT                 _MK_SHIFT_CONST(30)
#define G2SB_CTX6_G2CBSTRIDE_0_CBUVSTRIDE_FIELD                 (_MK_MASK_CONST(0x3) << G2SB_CTX6_G2CBSTRIDE_0_CBUVSTRIDE_SHIFT)
#define G2SB_CTX6_G2CBSTRIDE_0_CBUVSTRIDE_RANGE                 31:30
#define G2SB_CTX6_G2CBSTRIDE_0_CBUVSTRIDE_WOFFSET                       0x0
#define G2SB_CTX6_G2CBSTRIDE_0_CBUVSTRIDE_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBSTRIDE_0_CBUVSTRIDE_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBSTRIDE_0_CBUVSTRIDE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBSTRIDE_0_CBUVSTRIDE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBSTRIDE_0_CBUVSTRIDE_CBS2X                 _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2CBSTRIDE_0_CBUVSTRIDE_CBS1X                 _MK_ENUM_CONST(1)
#define G2SB_CTX6_G2CBSTRIDE_0_CBUVSTRIDE_CBS4X                 _MK_ENUM_CONST(2)

//Line Methods

// Register G2SB_CTX6_G2LINESETTING_0  //{2d,index=3d}
#define G2SB_CTX6_G2LINESETTING_0                       _MK_ADDR_CONST(0x603d)
#define G2SB_CTX6_G2LINESETTING_0_SECURE                        0x0
#define G2SB_CTX6_G2LINESETTING_0_WORD_COUNT                    0x1
#define G2SB_CTX6_G2LINESETTING_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINESETTING_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINESETTING_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINESETTING_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINESETTING_0_READ_MASK                     _MK_MASK_CONST(0xff1fffff)
#define G2SB_CTX6_G2LINESETTING_0_WRITE_MASK                    _MK_MASK_CONST(0xff1fffff)
#define G2SB_CTX6_G2LINESETTING_0_GAMMA_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2LINESETTING_0_GAMMA_FIELD                   (_MK_MASK_CONST(0x1fffff) << G2SB_CTX6_G2LINESETTING_0_GAMMA_SHIFT)
#define G2SB_CTX6_G2LINESETTING_0_GAMMA_RANGE                   20:0
#define G2SB_CTX6_G2LINESETTING_0_GAMMA_WOFFSET                 0x0
#define G2SB_CTX6_G2LINESETTING_0_GAMMA_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINESETTING_0_GAMMA_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINESETTING_0_GAMMA_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINESETTING_0_GAMMA_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

//0:xmajor 1: y major
#define G2SB_CTX6_G2LINESETTING_0_MAJOR_SHIFT                   _MK_SHIFT_CONST(24)
#define G2SB_CTX6_G2LINESETTING_0_MAJOR_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2LINESETTING_0_MAJOR_SHIFT)
#define G2SB_CTX6_G2LINESETTING_0_MAJOR_RANGE                   24:24
#define G2SB_CTX6_G2LINESETTING_0_MAJOR_WOFFSET                 0x0
#define G2SB_CTX6_G2LINESETTING_0_MAJOR_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINESETTING_0_MAJOR_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINESETTING_0_MAJOR_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINESETTING_0_MAJOR_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINESETTING_0_MAJOR_XMAJOR                  _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2LINESETTING_0_MAJOR_YMAJOR                  _MK_ENUM_CONST(1)

#define G2SB_CTX6_G2LINESETTING_0_LINEXDIR_SHIFT                        _MK_SHIFT_CONST(25)
#define G2SB_CTX6_G2LINESETTING_0_LINEXDIR_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2LINESETTING_0_LINEXDIR_SHIFT)
#define G2SB_CTX6_G2LINESETTING_0_LINEXDIR_RANGE                        25:25
#define G2SB_CTX6_G2LINESETTING_0_LINEXDIR_WOFFSET                      0x0
#define G2SB_CTX6_G2LINESETTING_0_LINEXDIR_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINESETTING_0_LINEXDIR_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINESETTING_0_LINEXDIR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINESETTING_0_LINEXDIR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

#define G2SB_CTX6_G2LINESETTING_0_LINEYDIR_SHIFT                        _MK_SHIFT_CONST(26)
#define G2SB_CTX6_G2LINESETTING_0_LINEYDIR_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2LINESETTING_0_LINEYDIR_SHIFT)
#define G2SB_CTX6_G2LINESETTING_0_LINEYDIR_RANGE                        26:26
#define G2SB_CTX6_G2LINESETTING_0_LINEYDIR_WOFFSET                      0x0
#define G2SB_CTX6_G2LINESETTING_0_LINEYDIR_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINESETTING_0_LINEYDIR_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINESETTING_0_LINEYDIR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINESETTING_0_LINEYDIR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

//draw last pixel or not
#define G2SB_CTX6_G2LINESETTING_0_DROPLASTP_SHIFT                       _MK_SHIFT_CONST(27)
#define G2SB_CTX6_G2LINESETTING_0_DROPLASTP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2LINESETTING_0_DROPLASTP_SHIFT)
#define G2SB_CTX6_G2LINESETTING_0_DROPLASTP_RANGE                       27:27
#define G2SB_CTX6_G2LINESETTING_0_DROPLASTP_WOFFSET                     0x0
#define G2SB_CTX6_G2LINESETTING_0_DROPLASTP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINESETTING_0_DROPLASTP_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINESETTING_0_DROPLASTP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINESETTING_0_DROPLASTP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//use OCTANTS in G2LINEDELTAN register instead of MAJOR LINEXDIR LINEYDIR
#define G2SB_CTX6_G2LINESETTING_0_LINEUSEOCTANT_SHIFT                   _MK_SHIFT_CONST(28)
#define G2SB_CTX6_G2LINESETTING_0_LINEUSEOCTANT_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2LINESETTING_0_LINEUSEOCTANT_SHIFT)
#define G2SB_CTX6_G2LINESETTING_0_LINEUSEOCTANT_RANGE                   28:28
#define G2SB_CTX6_G2LINESETTING_0_LINEUSEOCTANT_WOFFSET                 0x0
#define G2SB_CTX6_G2LINESETTING_0_LINEUSEOCTANT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINESETTING_0_LINEUSEOCTANT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINESETTING_0_LINEUSEOCTANT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINESETTING_0_LINEUSEOCTANT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

//000 octant 0
//001 octant 1
//010 octant 2
//011 octant 3
//100 octant 4
//101 octant 5
//110 octant 6
//111 octant 7
#define G2SB_CTX6_G2LINESETTING_0_OCTANTS_SHIFT                 _MK_SHIFT_CONST(29)
#define G2SB_CTX6_G2LINESETTING_0_OCTANTS_FIELD                 (_MK_MASK_CONST(0x7) << G2SB_CTX6_G2LINESETTING_0_OCTANTS_SHIFT)
#define G2SB_CTX6_G2LINESETTING_0_OCTANTS_RANGE                 31:29
#define G2SB_CTX6_G2LINESETTING_0_OCTANTS_WOFFSET                       0x0
#define G2SB_CTX6_G2LINESETTING_0_OCTANTS_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINESETTING_0_OCTANTS_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINESETTING_0_OCTANTS_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINESETTING_0_OCTANTS_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//
//
//
//   |    |    |
//    | 5 | 6 |
//     |  |  |
//    4 | | | 7
//       |||
//   ----------->
//       |||
//    3 | | | 0
//     |  |  |
//    | 2 | 1 |
//   |    |    |
//        V
//

// Register G2SB_CTX6_G2LINEDELTAN_0  //{2d,index=3e}
#define G2SB_CTX6_G2LINEDELTAN_0                        _MK_ADDR_CONST(0x603e)
#define G2SB_CTX6_G2LINEDELTAN_0_SECURE                         0x0
#define G2SB_CTX6_G2LINEDELTAN_0_WORD_COUNT                     0x1
#define G2SB_CTX6_G2LINEDELTAN_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINEDELTAN_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINEDELTAN_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINEDELTAN_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINEDELTAN_0_READ_MASK                      _MK_MASK_CONST(0x1fffff)
#define G2SB_CTX6_G2LINEDELTAN_0_WRITE_MASK                     _MK_MASK_CONST(0x1fffff)
#define G2SB_CTX6_G2LINEDELTAN_0_DELTAN_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2LINEDELTAN_0_DELTAN_FIELD                   (_MK_MASK_CONST(0x1fffff) << G2SB_CTX6_G2LINEDELTAN_0_DELTAN_SHIFT)
#define G2SB_CTX6_G2LINEDELTAN_0_DELTAN_RANGE                   20:0
#define G2SB_CTX6_G2LINEDELTAN_0_DELTAN_WOFFSET                 0x0
#define G2SB_CTX6_G2LINEDELTAN_0_DELTAN_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINEDELTAN_0_DELTAN_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINEDELTAN_0_DELTAN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINEDELTAN_0_DELTAN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2LINEDELTAM_0  //{2d,index=3f}
#define G2SB_CTX6_G2LINEDELTAM_0                        _MK_ADDR_CONST(0x603f)
#define G2SB_CTX6_G2LINEDELTAM_0_SECURE                         0x0
#define G2SB_CTX6_G2LINEDELTAM_0_WORD_COUNT                     0x1
#define G2SB_CTX6_G2LINEDELTAM_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINEDELTAM_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINEDELTAM_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINEDELTAM_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINEDELTAM_0_READ_MASK                      _MK_MASK_CONST(0x1fffff)
#define G2SB_CTX6_G2LINEDELTAM_0_WRITE_MASK                     _MK_MASK_CONST(0x1fffff)
#define G2SB_CTX6_G2LINEDELTAM_0_DELTAM_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2LINEDELTAM_0_DELTAM_FIELD                   (_MK_MASK_CONST(0x1fffff) << G2SB_CTX6_G2LINEDELTAM_0_DELTAM_SHIFT)
#define G2SB_CTX6_G2LINEDELTAM_0_DELTAM_RANGE                   20:0
#define G2SB_CTX6_G2LINEDELTAM_0_DELTAM_WOFFSET                 0x0
#define G2SB_CTX6_G2LINEDELTAM_0_DELTAM_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINEDELTAM_0_DELTAM_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINEDELTAM_0_DELTAM_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINEDELTAM_0_DELTAM_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2LINEPOS_0  //{2d,index=40}
#define G2SB_CTX6_G2LINEPOS_0                   _MK_ADDR_CONST(0x6040)
#define G2SB_CTX6_G2LINEPOS_0_SECURE                    0x0
#define G2SB_CTX6_G2LINEPOS_0_WORD_COUNT                        0x1
#define G2SB_CTX6_G2LINEPOS_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINEPOS_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINEPOS_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINEPOS_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINEPOS_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2LINEPOS_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2LINEPOS_0_LINEXPOS_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2LINEPOS_0_LINEXPOS_FIELD                    (_MK_MASK_CONST(0xffff) << G2SB_CTX6_G2LINEPOS_0_LINEXPOS_SHIFT)
#define G2SB_CTX6_G2LINEPOS_0_LINEXPOS_RANGE                    15:0
#define G2SB_CTX6_G2LINEPOS_0_LINEXPOS_WOFFSET                  0x0
#define G2SB_CTX6_G2LINEPOS_0_LINEXPOS_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINEPOS_0_LINEXPOS_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINEPOS_0_LINEXPOS_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINEPOS_0_LINEXPOS_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

#define G2SB_CTX6_G2LINEPOS_0_LINEYPOS_SHIFT                    _MK_SHIFT_CONST(16)
#define G2SB_CTX6_G2LINEPOS_0_LINEYPOS_FIELD                    (_MK_MASK_CONST(0xffff) << G2SB_CTX6_G2LINEPOS_0_LINEYPOS_SHIFT)
#define G2SB_CTX6_G2LINEPOS_0_LINEYPOS_RANGE                    31:16
#define G2SB_CTX6_G2LINEPOS_0_LINEYPOS_WOFFSET                  0x0
#define G2SB_CTX6_G2LINEPOS_0_LINEYPOS_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINEPOS_0_LINEYPOS_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINEPOS_0_LINEYPOS_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINEPOS_0_LINEYPOS_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2LINELEN_0  //{2d,index=41}
#define G2SB_CTX6_G2LINELEN_0                   _MK_ADDR_CONST(0x6041)
#define G2SB_CTX6_G2LINELEN_0_SECURE                    0x0
#define G2SB_CTX6_G2LINELEN_0_WORD_COUNT                        0x1
#define G2SB_CTX6_G2LINELEN_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINELEN_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINELEN_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINELEN_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINELEN_0_READ_MASK                         _MK_MASK_CONST(0x7fff)
#define G2SB_CTX6_G2LINELEN_0_WRITE_MASK                        _MK_MASK_CONST(0x7fff)
#define G2SB_CTX6_G2LINELEN_0_LINELEN_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2LINELEN_0_LINELEN_FIELD                     (_MK_MASK_CONST(0x7fff) << G2SB_CTX6_G2LINELEN_0_LINELEN_SHIFT)
#define G2SB_CTX6_G2LINELEN_0_LINELEN_RANGE                     14:0
#define G2SB_CTX6_G2LINELEN_0_LINELEN_WOFFSET                   0x0
#define G2SB_CTX6_G2LINELEN_0_LINELEN_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINELEN_0_LINELEN_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINELEN_0_LINELEN_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2LINELEN_0_LINELEN_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2CSCFOURTH_0  //{sb,sbm,index=42}
#define G2SB_CTX6_G2CSCFOURTH_0                 _MK_ADDR_CONST(0x6042)
#define G2SB_CTX6_G2CSCFOURTH_0_SECURE                  0x0
#define G2SB_CTX6_G2CSCFOURTH_0_WORD_COUNT                      0x1
#define G2SB_CTX6_G2CSCFOURTH_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCFOURTH_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCFOURTH_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCFOURTH_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCFOURTH_0_READ_MASK                       _MK_MASK_CONST(0x1ff01ff)
#define G2SB_CTX6_G2CSCFOURTH_0_WRITE_MASK                      _MK_MASK_CONST(0x1ff01ff)
// multiplier for G for U generation.
//This parameter consists of a sign bit and 8-bit magnitude (s1.7)
// For RGB->YUV the recommended value is -0.291 (decimal) or 0x125
// For any other combination this parameter is ignored
#define G2SB_CTX6_G2CSCFOURTH_0_G2U_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2CSCFOURTH_0_G2U_FIELD                       (_MK_MASK_CONST(0x1ff) << G2SB_CTX6_G2CSCFOURTH_0_G2U_SHIFT)
#define G2SB_CTX6_G2CSCFOURTH_0_G2U_RANGE                       8:0
#define G2SB_CTX6_G2CSCFOURTH_0_G2U_WOFFSET                     0x0
#define G2SB_CTX6_G2CSCFOURTH_0_G2U_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCFOURTH_0_G2U_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCFOURTH_0_G2U_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCFOURTH_0_G2U_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// multiplier for G for V generation.
//This parameter consists of a sign bit and 8-bit magnitude (s1.7)
// For RGB->YUV the recommended value is -0.368 (decimal) or 0x12F
// For any other combination this parameter is ignored
#define G2SB_CTX6_G2CSCFOURTH_0_G2V_SHIFT                       _MK_SHIFT_CONST(16)
#define G2SB_CTX6_G2CSCFOURTH_0_G2V_FIELD                       (_MK_MASK_CONST(0x1ff) << G2SB_CTX6_G2CSCFOURTH_0_G2V_SHIFT)
#define G2SB_CTX6_G2CSCFOURTH_0_G2V_RANGE                       24:16
#define G2SB_CTX6_G2CSCFOURTH_0_G2V_WOFFSET                     0x0
#define G2SB_CTX6_G2CSCFOURTH_0_G2V_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCFOURTH_0_G2V_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCFOURTH_0_G2V_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CSCFOURTH_0_G2V_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2SRCST_B_0  //{2d,index=43}
#define G2SB_CTX6_G2SRCST_B_0                   _MK_ADDR_CONST(0x6043)
#define G2SB_CTX6_G2SRCST_B_0_SECURE                    0x0
#define G2SB_CTX6_G2SRCST_B_0_WORD_COUNT                        0x1
#define G2SB_CTX6_G2SRCST_B_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCST_B_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCST_B_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCST_B_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCST_B_0_READ_MASK                         _MK_MASK_CONST(0xffff)
#define G2SB_CTX6_G2SRCST_B_0_WRITE_MASK                        _MK_MASK_CONST(0xffff)
// Source Stride B
#define G2SB_CTX6_G2SRCST_B_0_SRCS_B_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2SRCST_B_0_SRCS_B_FIELD                      (_MK_MASK_CONST(0xffff) << G2SB_CTX6_G2SRCST_B_0_SRCS_B_SHIFT)
#define G2SB_CTX6_G2SRCST_B_0_SRCS_B_RANGE                      15:0
#define G2SB_CTX6_G2SRCST_B_0_SRCS_B_WOFFSET                    0x0
#define G2SB_CTX6_G2SRCST_B_0_SRCS_B_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCST_B_0_SRCS_B_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCST_B_0_SRCS_B_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCST_B_0_SRCS_B_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2UVSTRIDE_0  //{2d,sb,index=44}
#define G2SB_CTX6_G2UVSTRIDE_0                  _MK_ADDR_CONST(0x6044)
#define G2SB_CTX6_G2UVSTRIDE_0_SECURE                   0x0
#define G2SB_CTX6_G2UVSTRIDE_0_WORD_COUNT                       0x1
#define G2SB_CTX6_G2UVSTRIDE_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2UVSTRIDE_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2UVSTRIDE_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2UVSTRIDE_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2UVSTRIDE_0_READ_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX6_G2UVSTRIDE_0_WRITE_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX6_G2UVSTRIDE_0_UVSTRIDE_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2UVSTRIDE_0_UVSTRIDE_FIELD                   (_MK_MASK_CONST(0xffff) << G2SB_CTX6_G2UVSTRIDE_0_UVSTRIDE_SHIFT)
#define G2SB_CTX6_G2UVSTRIDE_0_UVSTRIDE_RANGE                   15:0
#define G2SB_CTX6_G2UVSTRIDE_0_UVSTRIDE_WOFFSET                 0x0
#define G2SB_CTX6_G2UVSTRIDE_0_UVSTRIDE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2UVSTRIDE_0_UVSTRIDE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2UVSTRIDE_0_UVSTRIDE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2UVSTRIDE_0_UVSTRIDE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// circular buffer controller 2

// Register G2SB_CTX6_G2CBDES2_0  // {host,2d,sb,index=45}
#define G2SB_CTX6_G2CBDES2_0                    _MK_ADDR_CONST(0x6045)
#define G2SB_CTX6_G2CBDES2_0_SECURE                     0x0
#define G2SB_CTX6_G2CBDES2_0_WORD_COUNT                         0x1
#define G2SB_CTX6_G2CBDES2_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBDES2_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBDES2_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBDES2_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBDES2_0_READ_MASK                  _MK_MASK_CONST(0x7fff)
#define G2SB_CTX6_G2CBDES2_0_WRITE_MASK                         _MK_MASK_CONST(0x7fff)
// Circular buffer top clipping enabled, the first buffer line num
#define G2SB_CTX6_G2CBDES2_0_TOP_CBLINE_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2CBDES2_0_TOP_CBLINE_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX6_G2CBDES2_0_TOP_CBLINE_SHIFT)
#define G2SB_CTX6_G2CBDES2_0_TOP_CBLINE_RANGE                   14:0
#define G2SB_CTX6_G2CBDES2_0_TOP_CBLINE_WOFFSET                 0x0
#define G2SB_CTX6_G2CBDES2_0_TOP_CBLINE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBDES2_0_TOP_CBLINE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBDES2_0_TOP_CBLINE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2CBDES2_0_TOP_CBLINE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2TILEMODE_0  //{host,2d,sb,index=46}
#define G2SB_CTX6_G2TILEMODE_0                  _MK_ADDR_CONST(0x6046)
#define G2SB_CTX6_G2TILEMODE_0_SECURE                   0x0
#define G2SB_CTX6_G2TILEMODE_0_WORD_COUNT                       0x1
#define G2SB_CTX6_G2TILEMODE_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TILEMODE_0_RESET_MASK                       _MK_MASK_CONST(0x111111)
#define G2SB_CTX6_G2TILEMODE_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TILEMODE_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TILEMODE_0_READ_MASK                        _MK_MASK_CONST(0x111111)
#define G2SB_CTX6_G2TILEMODE_0_WRITE_MASK                       _MK_MASK_CONST(0x111111)
//Y or RGB surface
#define G2SB_CTX6_G2TILEMODE_0_SRC_Y_TILE_MODE_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2TILEMODE_0_SRC_Y_TILE_MODE_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2TILEMODE_0_SRC_Y_TILE_MODE_SHIFT)
#define G2SB_CTX6_G2TILEMODE_0_SRC_Y_TILE_MODE_RANGE                    0:0
#define G2SB_CTX6_G2TILEMODE_0_SRC_Y_TILE_MODE_WOFFSET                  0x0
#define G2SB_CTX6_G2TILEMODE_0_SRC_Y_TILE_MODE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TILEMODE_0_SRC_Y_TILE_MODE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2TILEMODE_0_SRC_Y_TILE_MODE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TILEMODE_0_SRC_Y_TILE_MODE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TILEMODE_0_SRC_Y_TILE_MODE_LINEAR                   _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2TILEMODE_0_SRC_Y_TILE_MODE_TILED                    _MK_ENUM_CONST(1)

//UV surface, ignored in RGB mode
#define G2SB_CTX6_G2TILEMODE_0_SRC_UV_TILE_MODE_SHIFT                   _MK_SHIFT_CONST(4)
#define G2SB_CTX6_G2TILEMODE_0_SRC_UV_TILE_MODE_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2TILEMODE_0_SRC_UV_TILE_MODE_SHIFT)
#define G2SB_CTX6_G2TILEMODE_0_SRC_UV_TILE_MODE_RANGE                   4:4
#define G2SB_CTX6_G2TILEMODE_0_SRC_UV_TILE_MODE_WOFFSET                 0x0
#define G2SB_CTX6_G2TILEMODE_0_SRC_UV_TILE_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TILEMODE_0_SRC_UV_TILE_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2TILEMODE_0_SRC_UV_TILE_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TILEMODE_0_SRC_UV_TILE_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TILEMODE_0_SRC_UV_TILE_MODE_LINEAR                  _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2TILEMODE_0_SRC_UV_TILE_MODE_TILED                   _MK_ENUM_CONST(1)

//Y or RGB surface
#define G2SB_CTX6_G2TILEMODE_0_PAT_Y_TILE_MODE_SHIFT                    _MK_SHIFT_CONST(8)
#define G2SB_CTX6_G2TILEMODE_0_PAT_Y_TILE_MODE_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2TILEMODE_0_PAT_Y_TILE_MODE_SHIFT)
#define G2SB_CTX6_G2TILEMODE_0_PAT_Y_TILE_MODE_RANGE                    8:8
#define G2SB_CTX6_G2TILEMODE_0_PAT_Y_TILE_MODE_WOFFSET                  0x0
#define G2SB_CTX6_G2TILEMODE_0_PAT_Y_TILE_MODE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TILEMODE_0_PAT_Y_TILE_MODE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2TILEMODE_0_PAT_Y_TILE_MODE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TILEMODE_0_PAT_Y_TILE_MODE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TILEMODE_0_PAT_Y_TILE_MODE_LINEAR                   _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2TILEMODE_0_PAT_Y_TILE_MODE_TILED                    _MK_ENUM_CONST(1)

//UNUSED
#define G2SB_CTX6_G2TILEMODE_0_PAT_UV_TILE_MODE_SHIFT                   _MK_SHIFT_CONST(12)
#define G2SB_CTX6_G2TILEMODE_0_PAT_UV_TILE_MODE_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2TILEMODE_0_PAT_UV_TILE_MODE_SHIFT)
#define G2SB_CTX6_G2TILEMODE_0_PAT_UV_TILE_MODE_RANGE                   12:12
#define G2SB_CTX6_G2TILEMODE_0_PAT_UV_TILE_MODE_WOFFSET                 0x0
#define G2SB_CTX6_G2TILEMODE_0_PAT_UV_TILE_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TILEMODE_0_PAT_UV_TILE_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2TILEMODE_0_PAT_UV_TILE_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TILEMODE_0_PAT_UV_TILE_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TILEMODE_0_PAT_UV_TILE_MODE_LINEAR                  _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2TILEMODE_0_PAT_UV_TILE_MODE_TILED                   _MK_ENUM_CONST(1)

//Same as destination write unless DST_RD_WR_SEP (not supported)
#define G2SB_CTX6_G2TILEMODE_0_DST_RD_TILE_MODE_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX6_G2TILEMODE_0_DST_RD_TILE_MODE_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2TILEMODE_0_DST_RD_TILE_MODE_SHIFT)
#define G2SB_CTX6_G2TILEMODE_0_DST_RD_TILE_MODE_RANGE                   16:16
#define G2SB_CTX6_G2TILEMODE_0_DST_RD_TILE_MODE_WOFFSET                 0x0
#define G2SB_CTX6_G2TILEMODE_0_DST_RD_TILE_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TILEMODE_0_DST_RD_TILE_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2TILEMODE_0_DST_RD_TILE_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TILEMODE_0_DST_RD_TILE_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TILEMODE_0_DST_RD_TILE_MODE_LINEAR                  _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2TILEMODE_0_DST_RD_TILE_MODE_TILED                   _MK_ENUM_CONST(1)

//destination surface
#define G2SB_CTX6_G2TILEMODE_0_DST_WR_TILE_MODE_SHIFT                   _MK_SHIFT_CONST(20)
#define G2SB_CTX6_G2TILEMODE_0_DST_WR_TILE_MODE_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX6_G2TILEMODE_0_DST_WR_TILE_MODE_SHIFT)
#define G2SB_CTX6_G2TILEMODE_0_DST_WR_TILE_MODE_RANGE                   20:20
#define G2SB_CTX6_G2TILEMODE_0_DST_WR_TILE_MODE_WOFFSET                 0x0
#define G2SB_CTX6_G2TILEMODE_0_DST_WR_TILE_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TILEMODE_0_DST_WR_TILE_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX6_G2TILEMODE_0_DST_WR_TILE_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TILEMODE_0_DST_WR_TILE_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2TILEMODE_0_DST_WR_TILE_MODE_LINEAR                  _MK_ENUM_CONST(0)
#define G2SB_CTX6_G2TILEMODE_0_DST_WR_TILE_MODE_TILED                   _MK_ENUM_CONST(1)


// Register G2SB_CTX6_G2PATBASE_0  //{2d,index=47}
#define G2SB_CTX6_G2PATBASE_0                   _MK_ADDR_CONST(0x6047)
#define G2SB_CTX6_G2PATBASE_0_SECURE                    0x0
#define G2SB_CTX6_G2PATBASE_0_WORD_COUNT                        0x1
#define G2SB_CTX6_G2PATBASE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATBASE_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATBASE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATBASE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATBASE_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2PATBASE_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
//pattern base address in tile mode,
// PATBA is the linear address where pixel start
#define G2SB_CTX6_G2PATBASE_0_PAT_BASE_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2PATBASE_0_PAT_BASE_FIELD                    (_MK_MASK_CONST(0xffffffff) << G2SB_CTX6_G2PATBASE_0_PAT_BASE_SHIFT)
#define G2SB_CTX6_G2PATBASE_0_PAT_BASE_RANGE                    31:0
#define G2SB_CTX6_G2PATBASE_0_PAT_BASE_WOFFSET                  0x0
#define G2SB_CTX6_G2PATBASE_0_PAT_BASE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATBASE_0_PAT_BASE_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATBASE_0_PAT_BASE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2PATBASE_0_PAT_BASE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// SB_SURFBASE registers
//    These registers need only be programmed when using SB.  They point to the base
//        of the various source and destination surfaces.  Technically they are only needed when
//        tiling is enabled, but there is no harm in always programming them.
//    Their counterpart registers (<reg>_SB_SURFBASE with SB_SURFBASE stripped off) indicate the
//        location of the first pixel  to be sourced or written within the surface.
//
//    This register exists to mimic the X, Y (SRCX, SRCY) functionality found in the BitBlt engine.
//
//    For example, to get at pixel X, Y:
//        SRCBA = SRCBA_SB_SURFBASE + Y*stride + X*Bpp

// Register G2SB_CTX6_G2SRCBA_SB_SURFBASE_0
#define G2SB_CTX6_G2SRCBA_SB_SURFBASE_0                 _MK_ADDR_CONST(0x6048)
#define G2SB_CTX6_G2SRCBA_SB_SURFBASE_0_SECURE                  0x0
#define G2SB_CTX6_G2SRCBA_SB_SURFBASE_0_WORD_COUNT                      0x1
#define G2SB_CTX6_G2SRCBA_SB_SURFBASE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCBA_SB_SURFBASE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCBA_SB_SURFBASE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCBA_SB_SURFBASE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCBA_SB_SURFBASE_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2SRCBA_SB_SURFBASE_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2SRCBA:
//    -base of interleaved sources (RGB, YUV)
//    -base of Y plane
// Only used by the StretchBlit Engine
#define G2SB_CTX6_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_FIELD                  (_MK_MASK_CONST(0xffffffff) << G2SB_CTX6_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SHIFT)
#define G2SB_CTX6_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_RANGE                  31:0
#define G2SB_CTX6_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_WOFFSET                        0x0
#define G2SB_CTX6_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2DSTBA_SB_SURFBASE_0
#define G2SB_CTX6_G2DSTBA_SB_SURFBASE_0                 _MK_ADDR_CONST(0x6049)
#define G2SB_CTX6_G2DSTBA_SB_SURFBASE_0_SECURE                  0x0
#define G2SB_CTX6_G2DSTBA_SB_SURFBASE_0_WORD_COUNT                      0x1
#define G2SB_CTX6_G2DSTBA_SB_SURFBASE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_SB_SURFBASE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_SB_SURFBASE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_SB_SURFBASE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_SB_SURFBASE_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2DSTBA_SB_SURFBASE_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2DSTBA
// Only used by the StretchBlit Engine
#define G2SB_CTX6_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2DSTBA_SB_SURFBASE_0_DST_ADDR_FIELD                  (_MK_MASK_CONST(0xffffffff) << G2SB_CTX6_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SHIFT)
#define G2SB_CTX6_G2DSTBA_SB_SURFBASE_0_DST_ADDR_RANGE                  31:0
#define G2SB_CTX6_G2DSTBA_SB_SURFBASE_0_DST_ADDR_WOFFSET                        0x0
#define G2SB_CTX6_G2DSTBA_SB_SURFBASE_0_DST_ADDR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_SB_SURFBASE_0_DST_ADDR_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2DSTBA_B_SB_SURFBASE_0
#define G2SB_CTX6_G2DSTBA_B_SB_SURFBASE_0                       _MK_ADDR_CONST(0x604a)
#define G2SB_CTX6_G2DSTBA_B_SB_SURFBASE_0_SECURE                        0x0
#define G2SB_CTX6_G2DSTBA_B_SB_SURFBASE_0_WORD_COUNT                    0x1
#define G2SB_CTX6_G2DSTBA_B_SB_SURFBASE_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_B_SB_SURFBASE_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_B_SB_SURFBASE_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_B_SB_SURFBASE_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_B_SB_SURFBASE_0_READ_MASK                     _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2DSTBA_B_SB_SURFBASE_0_WRITE_MASK                    _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2DSTBA_B
// Only used by the StretchBlit Engine, and G2CONTROLSB.DBSEL() is enabled
#define G2SB_CTX6_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_FIELD                      (_MK_MASK_CONST(0xffffffff) << G2SB_CTX6_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SHIFT)
#define G2SB_CTX6_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_RANGE                      31:0
#define G2SB_CTX6_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_WOFFSET                    0x0
#define G2SB_CTX6_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2VBA_A_SB_SURFBASE_0
#define G2SB_CTX6_G2VBA_A_SB_SURFBASE_0                 _MK_ADDR_CONST(0x604b)
#define G2SB_CTX6_G2VBA_A_SB_SURFBASE_0_SECURE                  0x0
#define G2SB_CTX6_G2VBA_A_SB_SURFBASE_0_WORD_COUNT                      0x1
#define G2SB_CTX6_G2VBA_A_SB_SURFBASE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VBA_A_SB_SURFBASE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VBA_A_SB_SURFBASE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VBA_A_SB_SURFBASE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VBA_A_SB_SURFBASE_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2VBA_A_SB_SURFBASE_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2VBA
//     used for YUV 4:2:0 planar, base of V plane
// Only used by the StretchBlit Engine
#define G2SB_CTX6_G2VBA_A_SB_SURFBASE_0_V_ADDR_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2VBA_A_SB_SURFBASE_0_V_ADDR_FIELD                    (_MK_MASK_CONST(0xffffffff) << G2SB_CTX6_G2VBA_A_SB_SURFBASE_0_V_ADDR_SHIFT)
#define G2SB_CTX6_G2VBA_A_SB_SURFBASE_0_V_ADDR_RANGE                    31:0
#define G2SB_CTX6_G2VBA_A_SB_SURFBASE_0_V_ADDR_WOFFSET                  0x0
#define G2SB_CTX6_G2VBA_A_SB_SURFBASE_0_V_ADDR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VBA_A_SB_SURFBASE_0_V_ADDR_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VBA_A_SB_SURFBASE_0_V_ADDR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2VBA_A_SB_SURFBASE_0_V_ADDR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_CTX6_G2UBA_A_SB_SURFBASE_0
#define G2SB_CTX6_G2UBA_A_SB_SURFBASE_0                 _MK_ADDR_CONST(0x604c)
#define G2SB_CTX6_G2UBA_A_SB_SURFBASE_0_SECURE                  0x0
#define G2SB_CTX6_G2UBA_A_SB_SURFBASE_0_WORD_COUNT                      0x1
#define G2SB_CTX6_G2UBA_A_SB_SURFBASE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2UBA_A_SB_SURFBASE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2UBA_A_SB_SURFBASE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2UBA_A_SB_SURFBASE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2UBA_A_SB_SURFBASE_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX6_G2UBA_A_SB_SURFBASE_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2VBA
//     used for YUV 4:2:0 planar, base of U plane
// Only used by the StretchBlit Engine
#define G2SB_CTX6_G2UBA_A_SB_SURFBASE_0_U_ADDR_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX6_G2UBA_A_SB_SURFBASE_0_U_ADDR_FIELD                    (_MK_MASK_CONST(0xffffffff) << G2SB_CTX6_G2UBA_A_SB_SURFBASE_0_U_ADDR_SHIFT)
#define G2SB_CTX6_G2UBA_A_SB_SURFBASE_0_U_ADDR_RANGE                    31:0
#define G2SB_CTX6_G2UBA_A_SB_SURFBASE_0_U_ADDR_WOFFSET                  0x0
#define G2SB_CTX6_G2UBA_A_SB_SURFBASE_0_U_ADDR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2UBA_A_SB_SURFBASE_0_U_ADDR_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2UBA_A_SB_SURFBASE_0_U_ADDR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX6_G2UBA_A_SB_SURFBASE_0_U_ADDR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//
// --------------------------------------------------------------------------
//
// Copyright (c) 2004, NVIDIA Corp.
// All Rights Reserved.
//
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
//
// --------------------------------------------------------------------------
// --------------------------------------------------------------------------
//
// Copyright (c) 2004-2005, NVIDIA Corp.
// All Rights Reserved.
//
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
//
// --------------------------------------------------------------------------
//
// Memory Controller Tiling definitions
//
//
//  To enable tiling for a buffer in your module you'll want to include
//  this spec file and then make use of either the ADD_TILE_MODE_REG_SPEC
//  or ADD_TILE_MODE_REG_FIELD_SPEC macro.
//
//  For the ADD_TILE_MODE_REG_SPEC macro, the regp arg is added to the
//  register name as a prefix to match the names of the other registers
//  for this buffer. The fldp is the field name prefix to make the name
//  unique so it works with arreggen generated reg blocks (e.g.):
//
//      // specify how addressing should occur for IB0 buffer
//      ADD_TILE_MODE_REG_SPEC(IB0, IB0);
//
//  There's also a REG_RW_SPEC version, if you need to specify a special
//  flag (e.g. rws for shadow, or rwt for trigger).
//
//  For the ADD_TILE_MODE_REG_FIELD_SPEC macro, the fldp is the field
//  name prefix and bitpos arg describes the starting bit position for
//  this field within another register.
//
//  Like the register version, there's a REG_RW_FIELD_SPEC version if
//  you need to set explicit bits other than "rw".
//
//  Note: this requires having at least NV_MC_TILE_MODEWIDTH bits of
//  space available after bitpos (e.g.) in the register:
//
//      ADD_TILE_MODE_REG_FIELD_SPEC(REF, 16)   // This parameter specifies how addressing
//                                              // for the REF buffer should occur
//
// --------------------------------------------------------------------------
//
// Copyright (c) 2004, NVIDIA Corp.
// All Rights Reserved.
//
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
//
// --------------------------------------------------------------------------
//

// Register G2SB_CTX7_INCR_SYNCPT_0
#define G2SB_CTX7_INCR_SYNCPT_0                 _MK_ADDR_CONST(0xa000)
#define G2SB_CTX7_INCR_SYNCPT_0_SECURE                  0x0
#define G2SB_CTX7_INCR_SYNCPT_0_WORD_COUNT                      0x1
#define G2SB_CTX7_INCR_SYNCPT_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_INCR_SYNCPT_0_RESET_MASK                      _MK_MASK_CONST(0xffff)
#define G2SB_CTX7_INCR_SYNCPT_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_INCR_SYNCPT_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_INCR_SYNCPT_0_READ_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX7_INCR_SYNCPT_0_WRITE_MASK                      _MK_MASK_CONST(0xffff)
// Condition mapped from raise/wait
#define G2SB_CTX7_INCR_SYNCPT_0_COND_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_CTX7_INCR_SYNCPT_0_COND_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX7_INCR_SYNCPT_0_COND_SHIFT)
#define G2SB_CTX7_INCR_SYNCPT_0_COND_RANGE                      15:8
#define G2SB_CTX7_INCR_SYNCPT_0_COND_WOFFSET                    0x0
#define G2SB_CTX7_INCR_SYNCPT_0_COND_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_INCR_SYNCPT_0_COND_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define G2SB_CTX7_INCR_SYNCPT_0_COND_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_INCR_SYNCPT_0_COND_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_INCR_SYNCPT_0_COND_IMMEDIATE                  _MK_ENUM_CONST(0)
#define G2SB_CTX7_INCR_SYNCPT_0_COND_OP_DONE                    _MK_ENUM_CONST(1)
#define G2SB_CTX7_INCR_SYNCPT_0_COND_RD_DONE                    _MK_ENUM_CONST(2)
#define G2SB_CTX7_INCR_SYNCPT_0_COND_REG_WR_SAFE                        _MK_ENUM_CONST(3)
#define G2SB_CTX7_INCR_SYNCPT_0_COND_COND_4                     _MK_ENUM_CONST(4)
#define G2SB_CTX7_INCR_SYNCPT_0_COND_COND_5                     _MK_ENUM_CONST(5)
#define G2SB_CTX7_INCR_SYNCPT_0_COND_COND_6                     _MK_ENUM_CONST(6)
#define G2SB_CTX7_INCR_SYNCPT_0_COND_COND_7                     _MK_ENUM_CONST(7)
#define G2SB_CTX7_INCR_SYNCPT_0_COND_COND_8                     _MK_ENUM_CONST(8)
#define G2SB_CTX7_INCR_SYNCPT_0_COND_COND_9                     _MK_ENUM_CONST(9)
#define G2SB_CTX7_INCR_SYNCPT_0_COND_COND_10                    _MK_ENUM_CONST(10)
#define G2SB_CTX7_INCR_SYNCPT_0_COND_COND_11                    _MK_ENUM_CONST(11)
#define G2SB_CTX7_INCR_SYNCPT_0_COND_COND_12                    _MK_ENUM_CONST(12)
#define G2SB_CTX7_INCR_SYNCPT_0_COND_COND_13                    _MK_ENUM_CONST(13)
#define G2SB_CTX7_INCR_SYNCPT_0_COND_COND_14                    _MK_ENUM_CONST(14)
#define G2SB_CTX7_INCR_SYNCPT_0_COND_COND_15                    _MK_ENUM_CONST(15)

// syncpt index value
#define G2SB_CTX7_INCR_SYNCPT_0_INDX_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX7_INCR_SYNCPT_0_INDX_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX7_INCR_SYNCPT_0_INDX_SHIFT)
#define G2SB_CTX7_INCR_SYNCPT_0_INDX_RANGE                      7:0
#define G2SB_CTX7_INCR_SYNCPT_0_INDX_WOFFSET                    0x0
#define G2SB_CTX7_INCR_SYNCPT_0_INDX_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_INCR_SYNCPT_0_INDX_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define G2SB_CTX7_INCR_SYNCPT_0_INDX_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_INCR_SYNCPT_0_INDX_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_INCR_SYNCPT_CNTRL_0
#define G2SB_CTX7_INCR_SYNCPT_CNTRL_0                   _MK_ADDR_CONST(0xa001)
#define G2SB_CTX7_INCR_SYNCPT_CNTRL_0_SECURE                    0x0
#define G2SB_CTX7_INCR_SYNCPT_CNTRL_0_WORD_COUNT                        0x1
#define G2SB_CTX7_INCR_SYNCPT_CNTRL_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_INCR_SYNCPT_CNTRL_0_RESET_MASK                        _MK_MASK_CONST(0x101)
#define G2SB_CTX7_INCR_SYNCPT_CNTRL_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_INCR_SYNCPT_CNTRL_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_INCR_SYNCPT_CNTRL_0_READ_MASK                         _MK_MASK_CONST(0x101)
#define G2SB_CTX7_INCR_SYNCPT_CNTRL_0_WRITE_MASK                        _MK_MASK_CONST(0x101)
// If NO_STALL is 1, then when fifos are full,
// INCR_SYNCPT methods will be dropped and the
// INCR_SYNCPT_ERROR[COND] bit will be set.
// If NO_STALL is 0, then when fifos are full,
// the client host interface will be stalled.
#define G2SB_CTX7_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SHIFT                        _MK_SHIFT_CONST(8)
#define G2SB_CTX7_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX7_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SHIFT)
#define G2SB_CTX7_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_RANGE                        8:8
#define G2SB_CTX7_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_WOFFSET                      0x0
#define G2SB_CTX7_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX7_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_NO_STALL_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// If SOFT_RESET is set, then all internal state
// of the client syncpt block will be reset.
// To do soft reset, first set SOFT_RESET of
// all host1x clients affected, then clear all
// SOFT_RESETs.
#define G2SB_CTX7_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX7_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX7_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SHIFT)
#define G2SB_CTX7_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_RANGE                      0:0
#define G2SB_CTX7_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_WOFFSET                    0x0
#define G2SB_CTX7_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_CTX7_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_INCR_SYNCPT_CNTRL_0_INCR_SYNCPT_SOFT_RESET_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_INCR_SYNCPT_ERROR_0
#define G2SB_CTX7_INCR_SYNCPT_ERROR_0                   _MK_ADDR_CONST(0xa002)
#define G2SB_CTX7_INCR_SYNCPT_ERROR_0_SECURE                    0x0
#define G2SB_CTX7_INCR_SYNCPT_ERROR_0_WORD_COUNT                        0x1
#define G2SB_CTX7_INCR_SYNCPT_ERROR_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_INCR_SYNCPT_ERROR_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_INCR_SYNCPT_ERROR_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_INCR_SYNCPT_ERROR_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_INCR_SYNCPT_ERROR_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_INCR_SYNCPT_ERROR_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// COND_STATUS[COND] is set if the fifo for COND overflows.
// This bit is sticky and will remain set until cleared.
// Cleared by writing 1.
#define G2SB_CTX7_INCR_SYNCPT_ERROR_0_COND_STATUS_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX7_INCR_SYNCPT_ERROR_0_COND_STATUS_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX7_INCR_SYNCPT_ERROR_0_COND_STATUS_SHIFT)
#define G2SB_CTX7_INCR_SYNCPT_ERROR_0_COND_STATUS_RANGE                 31:0
#define G2SB_CTX7_INCR_SYNCPT_ERROR_0_COND_STATUS_WOFFSET                       0x0
#define G2SB_CTX7_INCR_SYNCPT_ERROR_0_COND_STATUS_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_INCR_SYNCPT_ERROR_0_COND_STATUS_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_INCR_SYNCPT_ERROR_0_COND_STATUS_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_INCR_SYNCPT_ERROR_0_COND_STATUS_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// reserve locations for future expansion

// Reserved address 40963 [0xa003]

// Reserved address 40964 [0xa004]

// Reserved address 40965 [0xa005]

// Reserved address 40966 [0xa006]

// Reserved address 40967 [0xa007]
// just in case names were redefined using macros
// 2D syncpt behavior
//     - Each 2D context has its own syncpt client.
//     - OP_DONE increments when 2D's memory write client is idle, meaning all
//           preceding operations are complete.
//     - RD_DONE behaves like OP_DONE
//     - REG_WR_SAFE behaves like IMMEDIATE meaning a syncpt increment returns
//         immediately and does not indicate that a register write will NOT block.
//         The implications are that 2D's host FIFO can fill and block access to 2D,
//         which will indeterminately block a direct CPU access.

// Register G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0  //{index=8}
// This register can be accessed by both register read/write and command fifo
// in order not to break exsting code , keep suffix REGONLY.
//
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0                      _MK_ADDR_CONST(0xa008)
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_SECURE                       0x0
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_WORD_COUNT                   0x1
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_READ_MASK                    _MK_MASK_CONST(0x1f03ff)
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_WRITE_MASK                   _MK_MASK_CONST(0x1f0000)
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_FIELD                     (_MK_MASK_CONST(0x3ff) << G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SHIFT)
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_RANGE                     9:0
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_WOFFSET                   0x0
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_CURR_CLASS_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_FIELD                   (_MK_MASK_CONST(0xf) << G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SHIFT)
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_RANGE                   19:16
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_WOFFSET                 0x0
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_CURR_CHANNEL_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SHIFT                      _MK_SHIFT_CONST(20)
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SHIFT)
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_RANGE                      20:20
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_WOFFSET                    0x0
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0_CTX_VALID_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Control methods, since they are not programmed often, put them is the beginning

// Register G2SB_CTX7_G2TRIGGER_0  //{host,2d,sb,index=9}
#define G2SB_CTX7_G2TRIGGER_0                   _MK_ADDR_CONST(0xa009)
#define G2SB_CTX7_G2TRIGGER_0_SECURE                    0x0
#define G2SB_CTX7_G2TRIGGER_0_WORD_COUNT                        0x1
#define G2SB_CTX7_G2TRIGGER_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TRIGGER_0_RESET_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX7_G2TRIGGER_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TRIGGER_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TRIGGER_0_READ_MASK                         _MK_MASK_CONST(0xffff)
#define G2SB_CTX7_G2TRIGGER_0_WRITE_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX7_G2TRIGGER_0_TRIGGER_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2TRIGGER_0_TRIGGER_FIELD                     (_MK_MASK_CONST(0xffff) << G2SB_CTX7_G2TRIGGER_0_TRIGGER_SHIFT)
#define G2SB_CTX7_G2TRIGGER_0_TRIGGER_RANGE                     15:0
#define G2SB_CTX7_G2TRIGGER_0_TRIGGER_WOFFSET                   0x0
#define G2SB_CTX7_G2TRIGGER_0_TRIGGER_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TRIGGER_0_TRIGGER_DEFAULT_MASK                      _MK_MASK_CONST(0xffff)
#define G2SB_CTX7_G2TRIGGER_0_TRIGGER_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TRIGGER_0_TRIGGER_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2TRIGGER1_0  //{host,2d,sb,index=a}
#define G2SB_CTX7_G2TRIGGER1_0                  _MK_ADDR_CONST(0xa00a)
#define G2SB_CTX7_G2TRIGGER1_0_SECURE                   0x0
#define G2SB_CTX7_G2TRIGGER1_0_WORD_COUNT                       0x1
#define G2SB_CTX7_G2TRIGGER1_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TRIGGER1_0_RESET_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX7_G2TRIGGER1_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TRIGGER1_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TRIGGER1_0_READ_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX7_G2TRIGGER1_0_WRITE_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX7_G2TRIGGER1_0_TRIGGER1_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2TRIGGER1_0_TRIGGER1_FIELD                   (_MK_MASK_CONST(0xffff) << G2SB_CTX7_G2TRIGGER1_0_TRIGGER1_SHIFT)
#define G2SB_CTX7_G2TRIGGER1_0_TRIGGER1_RANGE                   15:0
#define G2SB_CTX7_G2TRIGGER1_0_TRIGGER1_WOFFSET                 0x0
#define G2SB_CTX7_G2TRIGGER1_0_TRIGGER1_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TRIGGER1_0_TRIGGER1_DEFAULT_MASK                    _MK_MASK_CONST(0xffff)
#define G2SB_CTX7_G2TRIGGER1_0_TRIGGER1_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TRIGGER1_0_TRIGGER1_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2TRIGGER2_0  //{2d,index=b}
#define G2SB_CTX7_G2TRIGGER2_0                  _MK_ADDR_CONST(0xa00b)
#define G2SB_CTX7_G2TRIGGER2_0_SECURE                   0x0
#define G2SB_CTX7_G2TRIGGER2_0_WORD_COUNT                       0x1
#define G2SB_CTX7_G2TRIGGER2_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TRIGGER2_0_RESET_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX7_G2TRIGGER2_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TRIGGER2_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TRIGGER2_0_READ_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX7_G2TRIGGER2_0_WRITE_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX7_G2TRIGGER2_0_TRIGGER2_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2TRIGGER2_0_TRIGGER2_FIELD                   (_MK_MASK_CONST(0xffff) << G2SB_CTX7_G2TRIGGER2_0_TRIGGER2_SHIFT)
#define G2SB_CTX7_G2TRIGGER2_0_TRIGGER2_RANGE                   15:0
#define G2SB_CTX7_G2TRIGGER2_0_TRIGGER2_WOFFSET                 0x0
#define G2SB_CTX7_G2TRIGGER2_0_TRIGGER2_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TRIGGER2_0_TRIGGER2_DEFAULT_MASK                    _MK_MASK_CONST(0xffff)
#define G2SB_CTX7_G2TRIGGER2_0_TRIGGER2_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TRIGGER2_0_TRIGGER2_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2CMDSEL_0  //{host,2d,sb,index=c}
#define G2SB_CTX7_G2CMDSEL_0                    _MK_ADDR_CONST(0xa00c)
#define G2SB_CTX7_G2CMDSEL_0_SECURE                     0x0
#define G2SB_CTX7_G2CMDSEL_0_WORD_COUNT                         0x1
#define G2SB_CTX7_G2CMDSEL_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_RESET_MASK                         _MK_MASK_CONST(0x1100d7f1)
#define G2SB_CTX7_G2CMDSEL_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_READ_MASK                  _MK_MASK_CONST(0x1fffd7f1)
#define G2SB_CTX7_G2CMDSEL_0_WRITE_MASK                         _MK_MASK_CONST(0x1fffd7f0)
#define G2SB_CTX7_G2CMDSEL_0_SBOR2D_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2CMDSEL_0_SBOR2D_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CMDSEL_0_SBOR2D_SHIFT)
#define G2SB_CTX7_G2CMDSEL_0_SBOR2D_RANGE                       0:0
#define G2SB_CTX7_G2CMDSEL_0_SBOR2D_WOFFSET                     0x0
#define G2SB_CTX7_G2CMDSEL_0_SBOR2D_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_SBOR2D_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CMDSEL_0_SBOR2D_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_SBOR2D_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_SBOR2D_G2                  _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CMDSEL_0_SBOR2D_SB                  _MK_ENUM_CONST(1)

//circular buffer feature enable    0= disable
#define G2SB_CTX7_G2CMDSEL_0_CBENABLE_SHIFT                     _MK_SHIFT_CONST(4)
#define G2SB_CTX7_G2CMDSEL_0_CBENABLE_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CMDSEL_0_CBENABLE_SHIFT)
#define G2SB_CTX7_G2CMDSEL_0_CBENABLE_RANGE                     4:4
#define G2SB_CTX7_G2CMDSEL_0_CBENABLE_WOFFSET                   0x0
#define G2SB_CTX7_G2CMDSEL_0_CBENABLE_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_CBENABLE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CMDSEL_0_CBENABLE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_CBENABLE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_CBENABLE_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CMDSEL_0_CBENABLE_ENABLE                    _MK_ENUM_CONST(1)

//VI trigger enable, can be circular buffer or full frame
#define G2SB_CTX7_G2CMDSEL_0_VITRIGGER_SHIFT                    _MK_SHIFT_CONST(5)
#define G2SB_CTX7_G2CMDSEL_0_VITRIGGER_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CMDSEL_0_VITRIGGER_SHIFT)
#define G2SB_CTX7_G2CMDSEL_0_VITRIGGER_RANGE                    5:5
#define G2SB_CTX7_G2CMDSEL_0_VITRIGGER_WOFFSET                  0x0
#define G2SB_CTX7_G2CMDSEL_0_VITRIGGER_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_VITRIGGER_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CMDSEL_0_VITRIGGER_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_VITRIGGER_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//host trigger the command, host also need program cicular buffer related data
#define G2SB_CTX7_G2CMDSEL_0_HOSTTRIGGER_SHIFT                  _MK_SHIFT_CONST(6)
#define G2SB_CTX7_G2CMDSEL_0_HOSTTRIGGER_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CMDSEL_0_HOSTTRIGGER_SHIFT)
#define G2SB_CTX7_G2CMDSEL_0_HOSTTRIGGER_RANGE                  6:6
#define G2SB_CTX7_G2CMDSEL_0_HOSTTRIGGER_WOFFSET                        0x0
#define G2SB_CTX7_G2CMDSEL_0_HOSTTRIGGER_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_HOSTTRIGGER_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CMDSEL_0_HOSTTRIGGER_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_HOSTTRIGGER_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX7_G2CMDSEL_0_CBSBDISABLE_SHIFT                  _MK_SHIFT_CONST(7)
#define G2SB_CTX7_G2CMDSEL_0_CBSBDISABLE_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CMDSEL_0_CBSBDISABLE_SHIFT)
#define G2SB_CTX7_G2CMDSEL_0_CBSBDISABLE_RANGE                  7:7
#define G2SB_CTX7_G2CMDSEL_0_CBSBDISABLE_WOFFSET                        0x0
#define G2SB_CTX7_G2CMDSEL_0_CBSBDISABLE_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_CBSBDISABLE_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CMDSEL_0_CBSBDISABLE_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_CBSBDISABLE_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// 00: to memory
// 01: to EPP
#define G2SB_CTX7_G2CMDSEL_0_G2OUTPUT_SHIFT                     _MK_SHIFT_CONST(8)
#define G2SB_CTX7_G2CMDSEL_0_G2OUTPUT_FIELD                     (_MK_MASK_CONST(0x3) << G2SB_CTX7_G2CMDSEL_0_G2OUTPUT_SHIFT)
#define G2SB_CTX7_G2CMDSEL_0_G2OUTPUT_RANGE                     9:8
#define G2SB_CTX7_G2CMDSEL_0_G2OUTPUT_WOFFSET                   0x0
#define G2SB_CTX7_G2CMDSEL_0_G2OUTPUT_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_G2OUTPUT_DEFAULT_MASK                      _MK_MASK_CONST(0x3)
#define G2SB_CTX7_G2CMDSEL_0_G2OUTPUT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_G2OUTPUT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_G2OUTPUT_MEMORY                    _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CMDSEL_0_G2OUTPUT_EPP                       _MK_ENUM_CONST(1)
#define G2SB_CTX7_G2CMDSEL_0_G2OUTPUT_RESERVED2                 _MK_ENUM_CONST(2)
#define G2SB_CTX7_G2CMDSEL_0_G2OUTPUT_RESERVED3                 _MK_ENUM_CONST(3)

// Reserved for HW Test, SW should not use this bit.
#define G2SB_CTX7_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SHIFT                       _MK_SHIFT_CONST(10)
#define G2SB_CTX7_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SHIFT)
#define G2SB_CTX7_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_RANGE                       10:10
#define G2SB_CTX7_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_WOFFSET                     0x0
#define G2SB_CTX7_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CMDSEL_0_CLIP_SOURCE_TOP_BOTTOM_ENABLE                      _MK_ENUM_CONST(1)

#define G2SB_CTX7_G2CMDSEL_0_LINK_WAIT_BUF_END_SHIFT                    _MK_SHIFT_CONST(12)
#define G2SB_CTX7_G2CMDSEL_0_LINK_WAIT_BUF_END_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CMDSEL_0_LINK_WAIT_BUF_END_SHIFT)
#define G2SB_CTX7_G2CMDSEL_0_LINK_WAIT_BUF_END_RANGE                    12:12
#define G2SB_CTX7_G2CMDSEL_0_LINK_WAIT_BUF_END_WOFFSET                  0x0
#define G2SB_CTX7_G2CMDSEL_0_LINK_WAIT_BUF_END_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_LINK_WAIT_BUF_END_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CMDSEL_0_LINK_WAIT_BUF_END_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_LINK_WAIT_BUF_END_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//host writes this bit to tell which buffer is ready
#define G2SB_CTX7_G2CMDSEL_0_FRAME_START_SHIFT                  _MK_SHIFT_CONST(14)
#define G2SB_CTX7_G2CMDSEL_0_FRAME_START_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CMDSEL_0_FRAME_START_SHIFT)
#define G2SB_CTX7_G2CMDSEL_0_FRAME_START_RANGE                  14:14
#define G2SB_CTX7_G2CMDSEL_0_FRAME_START_WOFFSET                        0x0
#define G2SB_CTX7_G2CMDSEL_0_FRAME_START_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_FRAME_START_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CMDSEL_0_FRAME_START_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_FRAME_START_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX7_G2CMDSEL_0_FRAME_END_SHIFT                    _MK_SHIFT_CONST(15)
#define G2SB_CTX7_G2CMDSEL_0_FRAME_END_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CMDSEL_0_FRAME_END_SHIFT)
#define G2SB_CTX7_G2CMDSEL_0_FRAME_END_RANGE                    15:15
#define G2SB_CTX7_G2CMDSEL_0_FRAME_END_WOFFSET                  0x0
#define G2SB_CTX7_G2CMDSEL_0_FRAME_END_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_FRAME_END_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CMDSEL_0_FRAME_END_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_FRAME_END_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

#define G2SB_CTX7_G2CMDSEL_0_BUFFER_INDEX_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_CTX7_G2CMDSEL_0_BUFFER_INDEX_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX7_G2CMDSEL_0_BUFFER_INDEX_SHIFT)
#define G2SB_CTX7_G2CMDSEL_0_BUFFER_INDEX_RANGE                 23:16
#define G2SB_CTX7_G2CMDSEL_0_BUFFER_INDEX_WOFFSET                       0x0
#define G2SB_CTX7_G2CMDSEL_0_BUFFER_INDEX_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_BUFFER_INDEX_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_BUFFER_INDEX_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_BUFFER_INDEX_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//Test purpose
#define G2SB_CTX7_G2CMDSEL_0_LINKEN_SHIFT                       _MK_SHIFT_CONST(24)
#define G2SB_CTX7_G2CMDSEL_0_LINKEN_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CMDSEL_0_LINKEN_SHIFT)
#define G2SB_CTX7_G2CMDSEL_0_LINKEN_RANGE                       24:24
#define G2SB_CTX7_G2CMDSEL_0_LINKEN_WOFFSET                     0x0
#define G2SB_CTX7_G2CMDSEL_0_LINKEN_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_LINKEN_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CMDSEL_0_LINKEN_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_LINKEN_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

#define G2SB_CTX7_G2CMDSEL_0_LINKVAL_SHIFT                      _MK_SHIFT_CONST(25)
#define G2SB_CTX7_G2CMDSEL_0_LINKVAL_FIELD                      (_MK_MASK_CONST(0x7) << G2SB_CTX7_G2CMDSEL_0_LINKVAL_SHIFT)
#define G2SB_CTX7_G2CMDSEL_0_LINKVAL_RANGE                      27:25
#define G2SB_CTX7_G2CMDSEL_0_LINKVAL_WOFFSET                    0x0
#define G2SB_CTX7_G2CMDSEL_0_LINKVAL_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_LINKVAL_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_LINKVAL_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_LINKVAL_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// indicates priority of the context, note vi-triggered contexts take priority over HIGH
#define G2SB_CTX7_G2CMDSEL_0_PRIORITY_SHIFT                     _MK_SHIFT_CONST(28)
#define G2SB_CTX7_G2CMDSEL_0_PRIORITY_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CMDSEL_0_PRIORITY_SHIFT)
#define G2SB_CTX7_G2CMDSEL_0_PRIORITY_RANGE                     28:28
#define G2SB_CTX7_G2CMDSEL_0_PRIORITY_WOFFSET                   0x0
#define G2SB_CTX7_G2CMDSEL_0_PRIORITY_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_PRIORITY_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CMDSEL_0_PRIORITY_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_PRIORITY_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMDSEL_0_PRIORITY_LOW                       _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CMDSEL_0_PRIORITY_HIGH                      _MK_ENUM_CONST(1)


// Register G2SB_CTX7_G2RAISE_0  //{host,2d,sb,index=d}
#define G2SB_CTX7_G2RAISE_0                     _MK_ADDR_CONST(0xa00d)
#define G2SB_CTX7_G2RAISE_0_SECURE                      0x0
#define G2SB_CTX7_G2RAISE_0_WORD_COUNT                  0x1
#define G2SB_CTX7_G2RAISE_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2RAISE_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2RAISE_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2RAISE_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2RAISE_0_READ_MASK                   _MK_MASK_CONST(0xf001f)
#define G2SB_CTX7_G2RAISE_0_WRITE_MASK                  _MK_MASK_CONST(0xf001f)
//Push back to read fifo when all commands in the channel are done.
#define G2SB_CTX7_G2RAISE_0_RAISE_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2RAISE_0_RAISE_FIELD                 (_MK_MASK_CONST(0x1f) << G2SB_CTX7_G2RAISE_0_RAISE_SHIFT)
#define G2SB_CTX7_G2RAISE_0_RAISE_RANGE                 4:0
#define G2SB_CTX7_G2RAISE_0_RAISE_WOFFSET                       0x0
#define G2SB_CTX7_G2RAISE_0_RAISE_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2RAISE_0_RAISE_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2RAISE_0_RAISE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2RAISE_0_RAISE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

#define G2SB_CTX7_G2RAISE_0_RAISECHANNEL_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX7_G2RAISE_0_RAISECHANNEL_FIELD                  (_MK_MASK_CONST(0xf) << G2SB_CTX7_G2RAISE_0_RAISECHANNEL_SHIFT)
#define G2SB_CTX7_G2RAISE_0_RAISECHANNEL_RANGE                  19:16
#define G2SB_CTX7_G2RAISE_0_RAISECHANNEL_WOFFSET                        0x0
#define G2SB_CTX7_G2RAISE_0_RAISECHANNEL_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2RAISE_0_RAISECHANNEL_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2RAISE_0_RAISECHANNEL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2RAISE_0_RAISECHANNEL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Reserved address 40974 [0xa00e]
//reg G2REFCOUNT incr1  //{host,2d,sb,index=e}
//#if (NV_HOST1X_HAS_FEATURE_REFCOUNT32B == 1)
//     31:0   rw REFCOUNT
//#else
//     15:0   rw REFCOUNT
//#endif
//    ;

// Register G2SB_CTX7_G2HOSTSET_0  //{host,2d,index=f}
#define G2SB_CTX7_G2HOSTSET_0                   _MK_ADDR_CONST(0xa00f)
#define G2SB_CTX7_G2HOSTSET_0_SECURE                    0x0
#define G2SB_CTX7_G2HOSTSET_0_WORD_COUNT                        0x1
#define G2SB_CTX7_G2HOSTSET_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2HOSTSET_0_RESET_MASK                        _MK_MASK_CONST(0xff)
#define G2SB_CTX7_G2HOSTSET_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2HOSTSET_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2HOSTSET_0_READ_MASK                         _MK_MASK_CONST(0xff)
#define G2SB_CTX7_G2HOSTSET_0_WRITE_MASK                        _MK_MASK_CONST(0xff)
//  specifies distance (in byte) from last pixel of a line to the first
//  pixel of next line.
//  In mono mode, the value is the nearest byte number.
//  E.G. if gap is 3 bits, HSTLNGAP should be 1 (byte),
// if gap is 9 bits, HSTLNGAP should be 2 (byte)
#define G2SB_CTX7_G2HOSTSET_0_HSTLNGAP_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2HOSTSET_0_HSTLNGAP_FIELD                    (_MK_MASK_CONST(0xf) << G2SB_CTX7_G2HOSTSET_0_HSTLNGAP_SHIFT)
#define G2SB_CTX7_G2HOSTSET_0_HSTLNGAP_RANGE                    3:0
#define G2SB_CTX7_G2HOSTSET_0_HSTLNGAP_WOFFSET                  0x0
#define G2SB_CTX7_G2HOSTSET_0_HSTLNGAP_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2HOSTSET_0_HSTLNGAP_DEFAULT_MASK                     _MK_MASK_CONST(0xf)
#define G2SB_CTX7_G2HOSTSET_0_HSTLNGAP_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2HOSTSET_0_HSTLNGAP_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// specifies the
//  first pixel location (in byte) in the first source data entry.
// In mono mode pixel should always start in byte boundary
#define G2SB_CTX7_G2HOSTSET_0_HSTFPXL_SHIFT                     _MK_SHIFT_CONST(4)
#define G2SB_CTX7_G2HOSTSET_0_HSTFPXL_FIELD                     (_MK_MASK_CONST(0xf) << G2SB_CTX7_G2HOSTSET_0_HSTFPXL_SHIFT)
#define G2SB_CTX7_G2HOSTSET_0_HSTFPXL_RANGE                     7:4
#define G2SB_CTX7_G2HOSTSET_0_HSTFPXL_WOFFSET                   0x0
#define G2SB_CTX7_G2HOSTSET_0_HSTFPXL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2HOSTSET_0_HSTFPXL_DEFAULT_MASK                      _MK_MASK_CONST(0xf)
#define G2SB_CTX7_G2HOSTSET_0_HSTFPXL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2HOSTSET_0_HSTFPXL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2HOSTFIFO_0  //{host,2d,sb,index=10}
#define G2SB_CTX7_G2HOSTFIFO_0                  _MK_ADDR_CONST(0xa010)
#define G2SB_CTX7_G2HOSTFIFO_0_SECURE                   0x0
#define G2SB_CTX7_G2HOSTFIFO_0_WORD_COUNT                       0x1
#define G2SB_CTX7_G2HOSTFIFO_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2HOSTFIFO_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2HOSTFIFO_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2HOSTFIFO_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2HOSTFIFO_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2HOSTFIFO_0_WRITE_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2HOSTFIFO_0_HOSTFIFODATA_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2HOSTFIFO_0_HOSTFIFODATA_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX7_G2HOSTFIFO_0_HOSTFIFODATA_SHIFT)
#define G2SB_CTX7_G2HOSTFIFO_0_HOSTFIFODATA_RANGE                       31:0
#define G2SB_CTX7_G2HOSTFIFO_0_HOSTFIFODATA_WOFFSET                     0x0
#define G2SB_CTX7_G2HOSTFIFO_0_HOSTFIFODATA_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2HOSTFIFO_0_HOSTFIFODATA_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2HOSTFIFO_0_HOSTFIFODATA_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2HOSTFIFO_0_HOSTFIFODATA_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2VDDA_0  //{sb,sbm,index=11}
#define G2SB_CTX7_G2VDDA_0                      _MK_ADDR_CONST(0xa011)
#define G2SB_CTX7_G2VDDA_0_SECURE                       0x0
#define G2SB_CTX7_G2VDDA_0_WORD_COUNT                   0x1
#define G2SB_CTX7_G2VDDA_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VDDA_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VDDA_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VDDA_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VDDA_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2VDDA_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
//Vertical Scaling DDA
//Reset value: xxxx-xxxxh
//Vertical DDA Step (Increment) Value (VDSTEP[18:0])
// (upper 13 bits should be set to '0')
//This parameter specifies the increment value of the DDA used
//for vertical scaling and it is in the form of 6-bit integer and
//12-bit fraction.  This value is detemined by the equation:
// (Actual_source_height-1-VDTINI) / (Actual_destination_height-1)
// Truncate the rest bits to keep the 12bits fraction. Since we have to meet
// (Actual_source_height-1)*1.0 >= (Actual_destination_height - 1)*VDSTEP + VDTINI
// Refer to bug 353260 for more detail.
//The 6-bit integer allows maximum contraction ratio of 1/64, and
// 12-bit fraction assures the maximum limit of accumulated error less
// than half line-spacing for up to approximately 2000 target lines.
//For example, image expansion from 240 lines to 400 lines
//  VDSTEP[17:0]  =  19'b00_0000_1001_1001_1010   and
//image contraction from 240 lines to 150 lines
//   VDSTEP[17:0]  =  19'b00_0001_1001_1001_1010.
#define G2SB_CTX7_G2VDDA_0_VDSTEP_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2VDDA_0_VDSTEP_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX7_G2VDDA_0_VDSTEP_SHIFT)
#define G2SB_CTX7_G2VDDA_0_VDSTEP_RANGE                 31:0
#define G2SB_CTX7_G2VDDA_0_VDSTEP_WOFFSET                       0x0
#define G2SB_CTX7_G2VDDA_0_VDSTEP_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VDDA_0_VDSTEP_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VDDA_0_VDSTEP_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VDDA_0_VDSTEP_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2VDDAINI_0  //{sb,sbm,index=12}
#define G2SB_CTX7_G2VDDAINI_0                   _MK_ADDR_CONST(0xa012)
#define G2SB_CTX7_G2VDDAINI_0_SECURE                    0x0
#define G2SB_CTX7_G2VDDAINI_0_WORD_COUNT                        0x1
#define G2SB_CTX7_G2VDDAINI_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VDDAINI_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VDDAINI_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VDDAINI_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VDDAINI_0_READ_MASK                         _MK_MASK_CONST(0xffff)
#define G2SB_CTX7_G2VDDAINI_0_WRITE_MASK                        _MK_MASK_CONST(0xffff)
//Vertical Scaling DDA Initial Values
//Vertical DDA Initial Value for Top-Field (VDTINI[7:0])
//This parameter specifies the fraction part of initial
// value of the DDA used for vertical scaling.
//Given a pair of consecutive source image lines representing
// positions 0.0 and 1.0, a destination line-image will be created
// at any position in [0.0, 1.0), that is specified by the fraction
// part of the vertical DDA. The 8-bit initial fraction value
// specifies the position of the first output (destination) line-image
// located between the first and the second input (source) line-images,
// respectively at position 0.0 and 1.0.
//This parameter provides a way to compensate relative displacement of
// top and bottom fields of a source image. Suppose, 2-to-1 interlaced
// original video field images #1 and #2 are in the image buffer, to be
// displayed in an overlay window. Assume that the #1 field image is the
// top-field. Using VDTINI = 8'hC0 for the top-field image and
// VDBINI = 8'h40 for the bottom-field image, for example, the two images
// from #1 and #2 fields get mapped to identically positioned destination
// images in the overlay window.
#define G2SB_CTX7_G2VDDAINI_0_VDTINI_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2VDDAINI_0_VDTINI_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX7_G2VDDAINI_0_VDTINI_SHIFT)
#define G2SB_CTX7_G2VDDAINI_0_VDTINI_RANGE                      7:0
#define G2SB_CTX7_G2VDDAINI_0_VDTINI_WOFFSET                    0x0
#define G2SB_CTX7_G2VDDAINI_0_VDTINI_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VDDAINI_0_VDTINI_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VDDAINI_0_VDTINI_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VDDAINI_0_VDTINI_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

//Vertical DDA Initial Value for Bottom-Field (VDBINI[7:0])
// (see description above)
#define G2SB_CTX7_G2VDDAINI_0_VDBINI_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_CTX7_G2VDDAINI_0_VDBINI_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX7_G2VDDAINI_0_VDBINI_SHIFT)
#define G2SB_CTX7_G2VDDAINI_0_VDBINI_RANGE                      15:8
#define G2SB_CTX7_G2VDDAINI_0_VDBINI_WOFFSET                    0x0
#define G2SB_CTX7_G2VDDAINI_0_VDBINI_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VDDAINI_0_VDBINI_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VDDAINI_0_VDBINI_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VDDAINI_0_VDBINI_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2HDDA_0  //{sb,sbm,index=13}
#define G2SB_CTX7_G2HDDA_0                      _MK_ADDR_CONST(0xa013)
#define G2SB_CTX7_G2HDDA_0_SECURE                       0x0
#define G2SB_CTX7_G2HDDA_0_WORD_COUNT                   0x1
#define G2SB_CTX7_G2HDDA_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2HDDA_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2HDDA_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2HDDA_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2HDDA_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2HDDA_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
//Horizontal Scaling DDA
//Reset value: xxxx-xxxxh
//Horizontal DDA Step (Increment) Value (HDSTEP[18:0])
// (upper 13 bits should be set to '0')
//This parameter specifies the increment value of the DDA used
//for horizontal scaling and it is in the form of 6-bit integer and
//12-bit fraction.  This value is detemined by the equation:
// (Actual_source_width-1-HDINI) / (Actual_destination_width-1)
// Truncate the rest bits to keep the 12bits fraction.
// Refer to bug 353260 for more detail.
//The 6-bit integer allows maximum contraction ratio of 1/64, and
// 12-bit fraction assures the maximum limit of accumulated error less
// than half pixel-spacing for up to approximately 2000 destination pixels.
//For example, image expansion from 720 pixels to 800 pixels
//       HDSTEP[17:0]  =  19'b000_0000_1110_0110_0111   and
//image contraction from 720 pixels to 250 pixels
// HDSTEP[17:0]  =  19'b000_0010_1110_0001_0101.
#define G2SB_CTX7_G2HDDA_0_HDSTEP_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2HDDA_0_HDSTEP_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX7_G2HDDA_0_HDSTEP_SHIFT)
#define G2SB_CTX7_G2HDDA_0_HDSTEP_RANGE                 31:0
#define G2SB_CTX7_G2HDDA_0_HDSTEP_WOFFSET                       0x0
#define G2SB_CTX7_G2HDDA_0_HDSTEP_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2HDDA_0_HDSTEP_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2HDDA_0_HDSTEP_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2HDDA_0_HDSTEP_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2HDDAINILS_0  //{sb,sbm,index=14}
#define G2SB_CTX7_G2HDDAINILS_0                 _MK_ADDR_CONST(0xa014)
#define G2SB_CTX7_G2HDDAINILS_0_SECURE                  0x0
#define G2SB_CTX7_G2HDDAINILS_0_WORD_COUNT                      0x1
#define G2SB_CTX7_G2HDDAINILS_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2HDDAINILS_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2HDDAINILS_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2HDDAINILS_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2HDDAINILS_0_READ_MASK                       _MK_MASK_CONST(0xff)
#define G2SB_CTX7_G2HDDAINILS_0_WRITE_MASK                      _MK_MASK_CONST(0xff)
//Horizontal Scaling DDA Initial Value
//Horizontal DDA Initial Value (HDINI[7:0])
//This parameter specifies the fraction part of initial value
// of the DDA used for horizontal scaling.
//Given a group of six consecutive source pixels that
// the two pixels at the center representing positions 0.0
//and 1.0, a destination pixel will be created at any
// position in [0.0, 1.0), that is specified by the fraction part
//of the horizontal DDA. The 8-bit initial fraction
// value specifies the position of the first output (destination)
//pixel located between the first and the second input (source)
// pixels, respectively at position 0.0 and 1.0.
//For horizontal scaling this value may normally be set to 0.
#define G2SB_CTX7_G2HDDAINILS_0_HDINI_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2HDDAINILS_0_HDINI_FIELD                     (_MK_MASK_CONST(0xff) << G2SB_CTX7_G2HDDAINILS_0_HDINI_SHIFT)
#define G2SB_CTX7_G2HDDAINILS_0_HDINI_RANGE                     7:0
#define G2SB_CTX7_G2HDDAINILS_0_HDINI_WOFFSET                   0x0
#define G2SB_CTX7_G2HDDAINILS_0_HDINI_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2HDDAINILS_0_HDINI_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2HDDAINILS_0_HDINI_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2HDDAINILS_0_HDINI_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2CSCFIRST_0  //{sb,sbm,index=15}
// The next 3 registers contain 8 parameters used by the YCbCr (YUV)
// to RGB color space conversion logic.  This logic can also be
// used for RGB gain/gamma correction in RGB to RGB modes, and for
// luma gain in YUV to YUV modes.  For SC20 two new parameters
// (G2U, G2V) have been added for RGB to YUV conversion.  These are
// in address 0x38.  The equtions have the form:
//    YUV->RGB
// R = (CYX * (yin + YOS)) + ((CUR * uin) + (CVR * vin))
// G = (CYX * (yin + YOS)) + ((CUG * uin) + (CVG * vin))
// B = (CYX * (yin + YOS)) + ((CUB * uin) + (CVB * vin))
//    RGB -> RGB
// R = (CVR * rin) + (CUR * bin)
// G = (CYX * (gin + YOS)) + ((CUG * bin) + (CVG * rin))
// B = (CUB * bin) + (CVB * rin)
//    YUV -> YUV (not what rtl does: see note below)
// Y = (CYX * yin + YOS) + ((CUB * uin) + (CVB * vin))
// U = (CUG * uin) + (CVG * vin)
// V = (CVR * vin) + (CUR * uin)
//    RGB -> YUV (new for SC20)
// Y = (CVB * rin) + (CUB * bin) + (CYX * gin) + YOS
// U = (CVG * rin) + (CUG * bin) + (G2U * gin)
// V = (CVR * rin) + (CUR * bin) + (G2V * gin)
//
// NOTE: YUV->YUV above is definitely wrong
// the cmodel *appears* to match the RTL with the following pseudo-code:
//
//if (yuv2rgb)
//    (r,g,b) = matrix*(y+sbreg_yos,u,v)
//    matrix:
//        sbreg_cyx, sbreg_cur, sbreg_cvr,
//        sbreg_cyx, sbreg_cug, sbreg_cvg,
//        sbreg_cyx, sbreg_cub, sbreg_cvb,
//else if (rgb2rgb)
//    (r,g,b) = matrix*(r,g+sbreg_yos,b)
//    matrix:
//        sbreg_cvr, 0,         sbreg_cur,
//        sbreg_cvg, sbreg_cyx, sbreg_cug,
//        sbreg_cvb, 0,         sbreg_cub,
//else if (yuv2yuv)
//    (y,u,v) = matrix*(y,u,v)
//    matrix:
//        sbreg_cub, 0,         sbreg_cvb,
//        sbreg_cug, sbreg_cyx, sbreg_cvg,
//        sbreg_cur, 0,         sbreg_cvr,
//else if (rgb2yuv)
//    (y,u,v) = matrix*(r,g,b) +(sbreg_yos,0,0)
//    matrix:
//        sbreg_cvb, sbreg_cyx, sbreg_cub,
//        sbreg_cvg, sbreg_g2u, sbreg_cug,
//        sbreg_cvr, sbreg_g2v, sbreg_cur,
#define G2SB_CTX7_G2CSCFIRST_0                  _MK_ADDR_CONST(0xa015)
#define G2SB_CTX7_G2CSCFIRST_0_SECURE                   0x0
#define G2SB_CTX7_G2CSCFIRST_0_WORD_COUNT                       0x1
#define G2SB_CTX7_G2CSCFIRST_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCFIRST_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCFIRST_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCFIRST_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCFIRST_0_READ_MASK                        _MK_MASK_CONST(0xff3ff3ff)
#define G2SB_CTX7_G2CSCFIRST_0_WRITE_MASK                       _MK_MASK_CONST(0xff3ff3ff)
// multiplier for U/B for Y or B generation.
// consists of a sign bit and 9-bit magnitude (s2.7).
// For YUV->RGB, the recommended value is 2.0172 (decimal) or 0x102.
// If source data is in RGB format, this parameter
// may be used as gain adjustment for B component.
// For SC20, this register changes precision when doing RGB to YUV
// conversion (SIFMT=1xxx, DIFMT=0xxx).  CUB becomes s1.8 and the
// recommended value is +0.098 or 0x019
//11-10  Reserved
#define G2SB_CTX7_G2CSCFIRST_0_CUB_SHIFT                        _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2CSCFIRST_0_CUB_FIELD                        (_MK_MASK_CONST(0x3ff) << G2SB_CTX7_G2CSCFIRST_0_CUB_SHIFT)
#define G2SB_CTX7_G2CSCFIRST_0_CUB_RANGE                        9:0
#define G2SB_CTX7_G2CSCFIRST_0_CUB_WOFFSET                      0x0
#define G2SB_CTX7_G2CSCFIRST_0_CUB_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCFIRST_0_CUB_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCFIRST_0_CUB_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCFIRST_0_CUB_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// multiplier for V/R for V or R generation.
//This parameter consists of a sign bit and 9-bit magnitude (s2.7)
// For YUV->RGB the recommended value is 1.5960 (decimal) or 0x0CC
//If source data is in RGB format, this parameter
// may be used as gain adjustment for R component.
// For RGB->YUV the recommended value is +0.439 (decimal) or 0x038
//23-22  Reserved
#define G2SB_CTX7_G2CSCFIRST_0_CVR_SHIFT                        _MK_SHIFT_CONST(12)
#define G2SB_CTX7_G2CSCFIRST_0_CVR_FIELD                        (_MK_MASK_CONST(0x3ff) << G2SB_CTX7_G2CSCFIRST_0_CVR_SHIFT)
#define G2SB_CTX7_G2CSCFIRST_0_CVR_RANGE                        21:12
#define G2SB_CTX7_G2CSCFIRST_0_CVR_WOFFSET                      0x0
#define G2SB_CTX7_G2CSCFIRST_0_CVR_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCFIRST_0_CVR_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCFIRST_0_CVR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCFIRST_0_CVR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

//Y-Offset (YOFFSET[7:0]) for YUV generation
//This parameter consists of 8-bit 2's complement in the range [-128,127].
// For YUV->RGB the recommended value is -16 (decimal) or 0xF0
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is +16 (decimal) or 0x10
#define G2SB_CTX7_G2CSCFIRST_0_YOS_SHIFT                        _MK_SHIFT_CONST(24)
#define G2SB_CTX7_G2CSCFIRST_0_YOS_FIELD                        (_MK_MASK_CONST(0xff) << G2SB_CTX7_G2CSCFIRST_0_YOS_SHIFT)
#define G2SB_CTX7_G2CSCFIRST_0_YOS_RANGE                        31:24
#define G2SB_CTX7_G2CSCFIRST_0_YOS_WOFFSET                      0x0
#define G2SB_CTX7_G2CSCFIRST_0_YOS_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCFIRST_0_YOS_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCFIRST_0_YOS_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCFIRST_0_YOS_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2CSCSECOND_0  //{sb,sbm,index=16}
#define G2SB_CTX7_G2CSCSECOND_0                 _MK_ADDR_CONST(0xa016)
#define G2SB_CTX7_G2CSCSECOND_0_SECURE                  0x0
#define G2SB_CTX7_G2CSCSECOND_0_WORD_COUNT                      0x1
#define G2SB_CTX7_G2CSCSECOND_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCSECOND_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCSECOND_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCSECOND_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCSECOND_0_READ_MASK                       _MK_MASK_CONST(0xff3ff1ff)
#define G2SB_CTX7_G2CSCSECOND_0_WRITE_MASK                      _MK_MASK_CONST(0xff3ff1ff)
// multiplier for U/B for U or G generation.
// consists of a sign bit and 8-bit magnitude (s1.7)
// For YUV->RGB the recommended value is -0.3918 (decimal) or 0x132
// For  RGB->RGB, this parameter should be set to 0
// For  YUV->YUV, this parameter should be set to 1 (0x080)
// For RGB->YUV the recommended value is +0.439 (decimal) or 0x038
//11-9  Reserved
#define G2SB_CTX7_G2CSCSECOND_0_CUG_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2CSCSECOND_0_CUG_FIELD                       (_MK_MASK_CONST(0x1ff) << G2SB_CTX7_G2CSCSECOND_0_CUG_SHIFT)
#define G2SB_CTX7_G2CSCSECOND_0_CUG_RANGE                       8:0
#define G2SB_CTX7_G2CSCSECOND_0_CUG_WOFFSET                     0x0
#define G2SB_CTX7_G2CSCSECOND_0_CUG_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCSECOND_0_CUG_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCSECOND_0_CUG_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCSECOND_0_CUG_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// multiplier for U/B for V or R generation.
//This parameter consists of a sign bit and 9-bit magnitude (s2.7)
//  For YUV->RGB normally this parameter is programmed to 0.0.
// This parameter takes non-zero value if hue is rotated.
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is -0.071 (decimal) or 0x209
//23-22 Reserved
#define G2SB_CTX7_G2CSCSECOND_0_CUR_SHIFT                       _MK_SHIFT_CONST(12)
#define G2SB_CTX7_G2CSCSECOND_0_CUR_FIELD                       (_MK_MASK_CONST(0x3ff) << G2SB_CTX7_G2CSCSECOND_0_CUR_SHIFT)
#define G2SB_CTX7_G2CSCSECOND_0_CUR_RANGE                       21:12
#define G2SB_CTX7_G2CSCSECOND_0_CUR_WOFFSET                     0x0
#define G2SB_CTX7_G2CSCSECOND_0_CUR_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCSECOND_0_CUR_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCSECOND_0_CUR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCSECOND_0_CUR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// multiplier for Y/G (G gain)
//This positive-only parameter consists of 8-bit magnitude (1.7)
// For YUV->YUV the recommended value is 1.1644 (decimal) or 0x95
// For YUV->YUV or RGB->RGB this may be used as gain adjustment
// for Y or G component.
// For RGB->YUV the recommended value is +0.504 (decimal) or 0x041
#define G2SB_CTX7_G2CSCSECOND_0_CYX_SHIFT                       _MK_SHIFT_CONST(24)
#define G2SB_CTX7_G2CSCSECOND_0_CYX_FIELD                       (_MK_MASK_CONST(0xff) << G2SB_CTX7_G2CSCSECOND_0_CYX_SHIFT)
#define G2SB_CTX7_G2CSCSECOND_0_CYX_RANGE                       31:24
#define G2SB_CTX7_G2CSCSECOND_0_CYX_WOFFSET                     0x0
#define G2SB_CTX7_G2CSCSECOND_0_CYX_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCSECOND_0_CYX_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCSECOND_0_CYX_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCSECOND_0_CYX_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2CSCTHIRD_0  //{sb,sbm,index=17}
#define G2SB_CTX7_G2CSCTHIRD_0                  _MK_ADDR_CONST(0xa017)
#define G2SB_CTX7_G2CSCTHIRD_0_SECURE                   0x0
#define G2SB_CTX7_G2CSCTHIRD_0_WORD_COUNT                       0x1
#define G2SB_CTX7_G2CSCTHIRD_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCTHIRD_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCTHIRD_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCTHIRD_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCTHIRD_0_READ_MASK                        _MK_MASK_CONST(0x3ff01ff)
#define G2SB_CTX7_G2CSCTHIRD_0_WRITE_MASK                       _MK_MASK_CONST(0x3ff01ff)
// multiplier for V/R for U or G generation.
//This parameter consists of a sign bit and 8-bit magnitude (s1.7)
// For YUV->RGB the recommended value is -0.8130 (decimal) or 0x168
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is -0.148 (decimal) or 0x113
#define G2SB_CTX7_G2CSCTHIRD_0_CVG_SHIFT                        _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2CSCTHIRD_0_CVG_FIELD                        (_MK_MASK_CONST(0x1ff) << G2SB_CTX7_G2CSCTHIRD_0_CVG_SHIFT)
#define G2SB_CTX7_G2CSCTHIRD_0_CVG_RANGE                        8:0
#define G2SB_CTX7_G2CSCTHIRD_0_CVG_WOFFSET                      0x0
#define G2SB_CTX7_G2CSCTHIRD_0_CVG_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCTHIRD_0_CVG_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCTHIRD_0_CVG_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCTHIRD_0_CVG_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// multiplier for V/R for Y or B generation.
//This parameter consists of a sign bit and 9-bit magnitude (s2.7)
//For YUV->RGB, normally this parameter is programmed to 0.0.
// This coefficient takes non-zero value if hue is rotated.
// For YUV->YUV &  RGB->RGB, this parameter should be set to 0
// For RGB->YUV the recommended value is +0.257 (decimal) or 0x021
#define G2SB_CTX7_G2CSCTHIRD_0_CVB_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_CTX7_G2CSCTHIRD_0_CVB_FIELD                        (_MK_MASK_CONST(0x3ff) << G2SB_CTX7_G2CSCTHIRD_0_CVB_SHIFT)
#define G2SB_CTX7_G2CSCTHIRD_0_CVB_RANGE                        25:16
#define G2SB_CTX7_G2CSCTHIRD_0_CVB_WOFFSET                      0x0
#define G2SB_CTX7_G2CSCTHIRD_0_CVB_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCTHIRD_0_CVB_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCTHIRD_0_CVB_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCTHIRD_0_CVB_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// StretchBLT, Color/Chroma Key Lower Limit Register

// Register G2SB_CTX7_G2CMKEYL_0  //{sb,sbm,index=18}
// When key generation is enabled, the value of this register is the
// lower color/chroma limit and G2CMKEYU is the upper color/chroma
// limit for component pixel data.
// Three component signal values (YCrCb/YUV or RGB) of
// every output pixel are compared to a set of three
// ranges that are specified by three pairs of lower and
// upper color/chroma key values.  If the Key Polarity is
// 0, the Key is set to 1 only when all three component values
// of an input pixel are respectively within the set
// of ranges (inclusive of the limit values), else the Key is set to 0.
// If the Key Polarity is 1, the Key is set to 1
// when any of the three component values of an input pixel
// are outside the set of ranges, else the Key is set to 0.
#define G2SB_CTX7_G2CMKEYL_0                    _MK_ADDR_CONST(0xa018)
#define G2SB_CTX7_G2CMKEYL_0_SECURE                     0x0
#define G2SB_CTX7_G2CMKEYL_0_WORD_COUNT                         0x1
#define G2SB_CTX7_G2CMKEYL_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMKEYL_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMKEYL_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMKEYL_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMKEYL_0_READ_MASK                  _MK_MASK_CONST(0xffffff)
#define G2SB_CTX7_G2CMKEYL_0_WRITE_MASK                         _MK_MASK_CONST(0xffffff)
// B or Y Color/Chroma Key Lower Limit (CKBL[7:0])
#define G2SB_CTX7_G2CMKEYL_0_CKBL_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2CMKEYL_0_CKBL_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX7_G2CMKEYL_0_CKBL_SHIFT)
#define G2SB_CTX7_G2CMKEYL_0_CKBL_RANGE                 7:0
#define G2SB_CTX7_G2CMKEYL_0_CKBL_WOFFSET                       0x0
#define G2SB_CTX7_G2CMKEYL_0_CKBL_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMKEYL_0_CKBL_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMKEYL_0_CKBL_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMKEYL_0_CKBL_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//G or Cb Color Chroma Key Lower Limit (CKGL[7:0])
// Cb signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity
// from the minimum signal level to the maximum signal level.
#define G2SB_CTX7_G2CMKEYL_0_CKGL_SHIFT                 _MK_SHIFT_CONST(8)
#define G2SB_CTX7_G2CMKEYL_0_CKGL_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX7_G2CMKEYL_0_CKGL_SHIFT)
#define G2SB_CTX7_G2CMKEYL_0_CKGL_RANGE                 15:8
#define G2SB_CTX7_G2CMKEYL_0_CKGL_WOFFSET                       0x0
#define G2SB_CTX7_G2CMKEYL_0_CKGL_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMKEYL_0_CKGL_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMKEYL_0_CKGL_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMKEYL_0_CKGL_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//R or Cr Color Chroma Key Lower Limit (CKRL[7:0])
// Cr signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity from
// the minimum signal level to the maximum signal level.
//31-24 Reserved
#define G2SB_CTX7_G2CMKEYL_0_CKRL_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_CTX7_G2CMKEYL_0_CKRL_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX7_G2CMKEYL_0_CKRL_SHIFT)
#define G2SB_CTX7_G2CMKEYL_0_CKRL_RANGE                 23:16
#define G2SB_CTX7_G2CMKEYL_0_CKRL_WOFFSET                       0x0
#define G2SB_CTX7_G2CMKEYL_0_CKRL_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMKEYL_0_CKRL_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMKEYL_0_CKRL_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMKEYL_0_CKRL_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//StretchBLT, Color/Chroma Key Upper Limit Register

// Register G2SB_CTX7_G2CMKEYU_0  //{sb,sbm,index=19}
#define G2SB_CTX7_G2CMKEYU_0                    _MK_ADDR_CONST(0xa019)
#define G2SB_CTX7_G2CMKEYU_0_SECURE                     0x0
#define G2SB_CTX7_G2CMKEYU_0_WORD_COUNT                         0x1
#define G2SB_CTX7_G2CMKEYU_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMKEYU_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMKEYU_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMKEYU_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMKEYU_0_READ_MASK                  _MK_MASK_CONST(0xffffff)
#define G2SB_CTX7_G2CMKEYU_0_WRITE_MASK                         _MK_MASK_CONST(0xffffff)
//This is B or Y color/chroma key upper limit value.
#define G2SB_CTX7_G2CMKEYU_0_CKBU_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2CMKEYU_0_CKBU_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX7_G2CMKEYU_0_CKBU_SHIFT)
#define G2SB_CTX7_G2CMKEYU_0_CKBU_RANGE                 7:0
#define G2SB_CTX7_G2CMKEYU_0_CKBU_WOFFSET                       0x0
#define G2SB_CTX7_G2CMKEYU_0_CKBU_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMKEYU_0_CKBU_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMKEYU_0_CKBU_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMKEYU_0_CKBU_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// G or Cb Color/Chroma Key Upper Limit (CKGU[7:0])
// Cb signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity
// the minimum signal level to the maximum signal level.
#define G2SB_CTX7_G2CMKEYU_0_CKGU_SHIFT                 _MK_SHIFT_CONST(8)
#define G2SB_CTX7_G2CMKEYU_0_CKGU_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX7_G2CMKEYU_0_CKGU_SHIFT)
#define G2SB_CTX7_G2CMKEYU_0_CKGU_RANGE                 15:8
#define G2SB_CTX7_G2CMKEYU_0_CKGU_WOFFSET                       0x0
#define G2SB_CTX7_G2CMKEYU_0_CKGU_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMKEYU_0_CKGU_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMKEYU_0_CKGU_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMKEYU_0_CKGU_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// R or Cr Color Chroma Key Upper Limit (CKRU[7:0])
// Cr signal must be treated in offset binary format
// so that the binary interpretation retains monotonicity from
// the minimum signal level to the maximum signal level.
//31-24  Reserved
#define G2SB_CTX7_G2CMKEYU_0_CKRU_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_CTX7_G2CMKEYU_0_CKRU_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX7_G2CMKEYU_0_CKRU_SHIFT)
#define G2SB_CTX7_G2CMKEYU_0_CKRU_RANGE                 23:16
#define G2SB_CTX7_G2CMKEYU_0_CKRU_WOFFSET                       0x0
#define G2SB_CTX7_G2CMKEYU_0_CKRU_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMKEYU_0_CKRU_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMKEYU_0_CKRU_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CMKEYU_0_CKRU_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// StretchBLT, Source Image Data U base address A-buffer

// Register G2SB_CTX7_G2UBA_A_0  //{sb,sbm,index=1a}
#define G2SB_CTX7_G2UBA_A_0                     _MK_ADDR_CONST(0xa01a)
#define G2SB_CTX7_G2UBA_A_0_SECURE                      0x0
#define G2SB_CTX7_G2UBA_A_0_WORD_COUNT                  0x1
#define G2SB_CTX7_G2UBA_A_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2UBA_A_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2UBA_A_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2UBA_A_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2UBA_A_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2UBA_A_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Start Address of  Source U-image Area, 4:2:0 Format.
// This parameter specifies the start address of source image stored in
// the image buffer memory.
// The [3:0] bits have to be 0, since memory client will assemble YUV into one
// 422 format.
#define G2SB_CTX7_G2UBA_A_0_SU1SA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2UBA_A_0_SU1SA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX7_G2UBA_A_0_SU1SA_SHIFT)
#define G2SB_CTX7_G2UBA_A_0_SU1SA_RANGE                 31:0
#define G2SB_CTX7_G2UBA_A_0_SU1SA_WOFFSET                       0x0
#define G2SB_CTX7_G2UBA_A_0_SU1SA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2UBA_A_0_SU1SA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2UBA_A_0_SU1SA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2UBA_A_0_SU1SA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2VBA_A_0  //{sb,sbm,index=1b}
#define G2SB_CTX7_G2VBA_A_0                     _MK_ADDR_CONST(0xa01b)
#define G2SB_CTX7_G2VBA_A_0_SECURE                      0x0
#define G2SB_CTX7_G2VBA_A_0_WORD_COUNT                  0x1
#define G2SB_CTX7_G2VBA_A_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VBA_A_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VBA_A_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VBA_A_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VBA_A_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2VBA_A_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Start Address of  Source V-image Area, 4:2:0 Format.
// This parameter specifies the start address of  source image stored in
// the image buffer memory.
// The [3:0] bits have to be 0, since memory client will assemble YUV into one
// 422 format.
#define G2SB_CTX7_G2VBA_A_0_SV1SA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2VBA_A_0_SV1SA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX7_G2VBA_A_0_SV1SA_SHIFT)
#define G2SB_CTX7_G2VBA_A_0_SV1SA_RANGE                 31:0
#define G2SB_CTX7_G2VBA_A_0_SV1SA_WOFFSET                       0x0
#define G2SB_CTX7_G2VBA_A_0_SV1SA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VBA_A_0_SV1SA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VBA_A_0_SV1SA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VBA_A_0_SV1SA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2SBFORMAT_0  //{sb,sbm,index=1c}
#define G2SB_CTX7_G2SBFORMAT_0                  _MK_ADDR_CONST(0xa01c)
#define G2SB_CTX7_G2SBFORMAT_0_SECURE                   0x0
#define G2SB_CTX7_G2SBFORMAT_0_WORD_COUNT                       0x1
#define G2SB_CTX7_G2SBFORMAT_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SBFORMAT_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SBFORMAT_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SBFORMAT_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SBFORMAT_0_READ_MASK                        _MK_MASK_CONST(0xffffdf1f)
#define G2SB_CTX7_G2SBFORMAT_0_WRITE_MASK                       _MK_MASK_CONST(0xffffdf1f)
// This parameter defines the data format of source input.
// There are two groups of data formats, RGB format and YCbCr (YUV) format.
// CbCr (UV) components may be represented in either offset binary or 2's complement.
//00000 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00001 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00010 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00011 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00100 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00101 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00110 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00111 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//01000 B5G6R5 5-6-5 {R[4:0], G[5:0], B[4:0]}
//01001 RESERVED
//01010 RESERVED
//01011 RESERVED
//01100 B5G6R5 5-6-5 Byte-swapped {G[2:0], B[4:0], R[4:0], G[5:3]}
//01101 RESERVED
//01110 R8G8B8A8
//01111 B8G8R8A8
//1xxxx RESERVED
//
// StretchBlit Inputs
// ==================
// RGB    inputs = {B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8}
// YUV420 input  = {YUV420 is converted into 4:2:2 UYVY via memory client}
// YUV422 inputs = {U8Y8V8Y8_OB, Y8U8Y8V8_OB, V8Y8U8Y8_OB, U8Y8V8Y8_OB, U8Y8V8Y8_TC, Y8U8Y8V8_TC, Y8V8Y8U8_TC, V8Y8U8Y8_TC}
//
// StretchBlit Outputs
// ===================
// RGB    outputs = {B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8}
// YUV422 outputs = {U8Y8V8Y8_OB, Y8U8Y8V8_OB, V8Y8U8Y8_OB, U8Y8V8Y8_OB, U8Y8V8Y8_TC, Y8U8Y8V8_TC, Y8V8Y8U8_TC, V8Y8U8Y8_TC}
//
// StretchBlit Input/Output Rules
// ==============================
//
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|    src format                                                | internal sb format |      dst format                                           |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|  B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8                        |      R8G8B8A8      |  B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8                     |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|  U8Y8V8Y8_*, Y8U8Y8V8_*, V8Y8U8Y8_*, U8Y8V8Y8_*, YUV420      |      YUV 4:4:4     |  U8Y8V8Y8_*, Y8U8Y8V8_*, V8Y8U8Y8_*, U8Y8V8Y8_*           |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//|  U8Y8V8Y8_*, Y8U8Y8V8_*, V8Y8U8Y8_*, U8Y8V8Y8_*, YUV420      |      YUV 4:4:4     |  B5G6R5, B5G6R5BS, R8G8B8A8, B8G8R8A8                     |
//+--------------------------------------------------------------+--------------------+-----------------------------------------------------------+
//
//  StretchBlit color space converter supports YUV->RGB, YUV->YUV (gain) and RGB->RGB (gain).  There is no support for RGB->YUV.
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_FIELD                      (_MK_MASK_CONST(0x1f) << G2SB_CTX7_G2SBFORMAT_0_SIFMT_SHIFT)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_RANGE                      4:0
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_WOFFSET                    0x0
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_U8Y8V8Y8_OB                        _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_Y8U8Y8V8_OB                        _MK_ENUM_CONST(1)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_Y8V8Y8U8_OB                        _MK_ENUM_CONST(2)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_V8Y8U8Y8_OB                        _MK_ENUM_CONST(3)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_U8Y8V8Y8_TC                        _MK_ENUM_CONST(4)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_Y8U8Y8V8_TC                        _MK_ENUM_CONST(5)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_Y8V8Y8U8_TC                        _MK_ENUM_CONST(6)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_V8Y8U8Y8_TC                        _MK_ENUM_CONST(7)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_B5G6R5                     _MK_ENUM_CONST(8)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_RESERVED9                  _MK_ENUM_CONST(9)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_RESERVED10                 _MK_ENUM_CONST(10)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_RESERVED11                 _MK_ENUM_CONST(11)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_B5G6R5BS                   _MK_ENUM_CONST(12)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_RESERVED13                 _MK_ENUM_CONST(13)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_R8G8B8A8                   _MK_ENUM_CONST(14)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_B8G8R8A8                   _MK_ENUM_CONST(15)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_RESERVED16                 _MK_ENUM_CONST(16)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_RESERVED17                 _MK_ENUM_CONST(17)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_RESERVED18                 _MK_ENUM_CONST(18)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_RESERVED19                 _MK_ENUM_CONST(19)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_RESERVED20                 _MK_ENUM_CONST(20)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_RESERVED21                 _MK_ENUM_CONST(21)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_RESERVED22                 _MK_ENUM_CONST(22)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_RESERVED23                 _MK_ENUM_CONST(23)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_RESERVED24                 _MK_ENUM_CONST(24)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_RESERVED25                 _MK_ENUM_CONST(25)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_RESERVED26                 _MK_ENUM_CONST(26)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_RESERVED27                 _MK_ENUM_CONST(27)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_RESERVED28                 _MK_ENUM_CONST(28)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_RESERVED29                 _MK_ENUM_CONST(29)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_RESERVED30                 _MK_ENUM_CONST(30)
#define G2SB_CTX7_G2SBFORMAT_0_SIFMT_RESERVED31                 _MK_ENUM_CONST(31)

//Destination Image Data FormatThis parameter defines the data format of distination output.
// There are two groups of data formats, RGB and YCbCr (YUV) format.
// CbCr (UV) components may be represented in either offset binary or 2's complement.
//00000 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00001 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00010 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00011 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V in offset binary format
//00100 U8Y8V8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00101 Y8U8Y8V8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00110 Y8V8Y8U8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//00111 V8Y8U8Y8, YUV 4:2:2, 8-bit for each component, U/V is 2's complement
//01000 bpp16 5-6-5 {R[4:0], G[5:0], B[4:0]}
//01001 RESERVED
//01010 RESERVED
//01011 RESERVED
//01100 bpp16 5-6-5 Byte-swapped {G[2:0], B[4:0], R[4:0], G[5:3]}
//01101 RESERVED
//01110 R8G8B8A8
//01111 B8G8R8A8
//1xxxx RESERVED
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_FIELD                      (_MK_MASK_CONST(0x1f) << G2SB_CTX7_G2SBFORMAT_0_DIFMT_SHIFT)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_RANGE                      12:8
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_WOFFSET                    0x0
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_U8Y8V8Y8_OB                        _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_Y8U8Y8V8_OB                        _MK_ENUM_CONST(1)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_Y8V8Y8U8_OB                        _MK_ENUM_CONST(2)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_V8Y8U8Y8_OB                        _MK_ENUM_CONST(3)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_U8Y8V8Y8_TC                        _MK_ENUM_CONST(4)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_Y8U8Y8V8_TC                        _MK_ENUM_CONST(5)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_Y8V8Y8U8_TC                        _MK_ENUM_CONST(6)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_V8Y8U8Y8_TC                        _MK_ENUM_CONST(7)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_B5G6R5                     _MK_ENUM_CONST(8)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_RESERVED9                  _MK_ENUM_CONST(9)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_RESERVED10                 _MK_ENUM_CONST(10)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_RESERVED11                 _MK_ENUM_CONST(11)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_B5G6R5BS                   _MK_ENUM_CONST(12)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_RESERVED13                 _MK_ENUM_CONST(13)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_R8G8B8A8                   _MK_ENUM_CONST(14)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_B8G8R8A8                   _MK_ENUM_CONST(15)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_RESERVED16                 _MK_ENUM_CONST(16)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_RESERVED17                 _MK_ENUM_CONST(17)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_RESERVED18                 _MK_ENUM_CONST(18)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_RESERVED19                 _MK_ENUM_CONST(19)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_RESERVED20                 _MK_ENUM_CONST(20)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_RESERVED21                 _MK_ENUM_CONST(21)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_RESERVED22                 _MK_ENUM_CONST(22)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_RESERVED23                 _MK_ENUM_CONST(23)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_RESERVED24                 _MK_ENUM_CONST(24)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_RESERVED25                 _MK_ENUM_CONST(25)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_RESERVED26                 _MK_ENUM_CONST(26)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_RESERVED27                 _MK_ENUM_CONST(27)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_RESERVED28                 _MK_ENUM_CONST(28)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_RESERVED29                 _MK_ENUM_CONST(29)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_RESERVED30                 _MK_ENUM_CONST(30)
#define G2SB_CTX7_G2SBFORMAT_0_DIFMT_RESERVED31                 _MK_ENUM_CONST(31)

// ENABLE - SB needs to send a RAISE_BUFFER control bit to EPP
// DISABLE - do nothing.
#define G2SB_CTX7_G2SBFORMAT_0_RAISEBUFFEREN_SHIFT                      _MK_SHIFT_CONST(14)
#define G2SB_CTX7_G2SBFORMAT_0_RAISEBUFFEREN_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2SBFORMAT_0_RAISEBUFFEREN_SHIFT)
#define G2SB_CTX7_G2SBFORMAT_0_RAISEBUFFEREN_RANGE                      14:14
#define G2SB_CTX7_G2SBFORMAT_0_RAISEBUFFEREN_WOFFSET                    0x0
#define G2SB_CTX7_G2SBFORMAT_0_RAISEBUFFEREN_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SBFORMAT_0_RAISEBUFFEREN_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SBFORMAT_0_RAISEBUFFEREN_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SBFORMAT_0_RAISEBUFFEREN_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SBFORMAT_0_RAISEBUFFEREN_DISABLE                    _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2SBFORMAT_0_RAISEBUFFEREN_ENABLE                     _MK_ENUM_CONST(1)

// ENABLE - SB needs to send a RAISE_FRAME control bit to EPP
// DISABLE - do nothing.
#define G2SB_CTX7_G2SBFORMAT_0_RAISEFRAMEEN_SHIFT                       _MK_SHIFT_CONST(15)
#define G2SB_CTX7_G2SBFORMAT_0_RAISEFRAMEEN_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2SBFORMAT_0_RAISEFRAMEEN_SHIFT)
#define G2SB_CTX7_G2SBFORMAT_0_RAISEFRAMEEN_RANGE                       15:15
#define G2SB_CTX7_G2SBFORMAT_0_RAISEFRAMEEN_WOFFSET                     0x0
#define G2SB_CTX7_G2SBFORMAT_0_RAISEFRAMEEN_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SBFORMAT_0_RAISEFRAMEEN_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SBFORMAT_0_RAISEFRAMEEN_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SBFORMAT_0_RAISEFRAMEEN_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SBFORMAT_0_RAISEFRAMEEN_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2SBFORMAT_0_RAISEFRAMEEN_ENABLE                      _MK_ENUM_CONST(1)

// Raise buffer vector value.
#define G2SB_CTX7_G2SBFORMAT_0_RAISEBUFFERVALUE_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX7_G2SBFORMAT_0_RAISEBUFFERVALUE_FIELD                   (_MK_MASK_CONST(0xff) << G2SB_CTX7_G2SBFORMAT_0_RAISEBUFFERVALUE_SHIFT)
#define G2SB_CTX7_G2SBFORMAT_0_RAISEBUFFERVALUE_RANGE                   23:16
#define G2SB_CTX7_G2SBFORMAT_0_RAISEBUFFERVALUE_WOFFSET                 0x0
#define G2SB_CTX7_G2SBFORMAT_0_RAISEBUFFERVALUE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SBFORMAT_0_RAISEBUFFERVALUE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SBFORMAT_0_RAISEBUFFERVALUE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SBFORMAT_0_RAISEBUFFERVALUE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Raise Fram vector value.
#define G2SB_CTX7_G2SBFORMAT_0_RAISEFRAMEVALUE_SHIFT                    _MK_SHIFT_CONST(24)
#define G2SB_CTX7_G2SBFORMAT_0_RAISEFRAMEVALUE_FIELD                    (_MK_MASK_CONST(0xff) << G2SB_CTX7_G2SBFORMAT_0_RAISEFRAMEVALUE_SHIFT)
#define G2SB_CTX7_G2SBFORMAT_0_RAISEFRAMEVALUE_RANGE                    31:24
#define G2SB_CTX7_G2SBFORMAT_0_RAISEFRAMEVALUE_WOFFSET                  0x0
#define G2SB_CTX7_G2SBFORMAT_0_RAISEFRAMEVALUE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SBFORMAT_0_RAISEFRAMEVALUE_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SBFORMAT_0_RAISEFRAMEVALUE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SBFORMAT_0_RAISEFRAMEVALUE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2CONTROLSB_0  //{sb,sbm,index=1d}
#define G2SB_CTX7_G2CONTROLSB_0                 _MK_ADDR_CONST(0xa01d)
#define G2SB_CTX7_G2CONTROLSB_0_SECURE                  0x0
#define G2SB_CTX7_G2CONTROLSB_0_WORD_COUNT                      0x1
#define G2SB_CTX7_G2CONTROLSB_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_RESET_MASK                      _MK_MASK_CONST(0xdfffa4f8)
#define G2SB_CTX7_G2CONTROLSB_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_READ_MASK                       _MK_MASK_CONST(0xdfffa7f8)
#define G2SB_CTX7_G2CONTROLSB_0_WRITE_MASK                      _MK_MASK_CONST(0xdfffa7f8)
//yuv422 plannar rotated
#define G2SB_CTX7_G2CONTROLSB_0_YUV422ROTATION_SHIFT                    _MK_SHIFT_CONST(3)
#define G2SB_CTX7_G2CONTROLSB_0_YUV422ROTATION_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLSB_0_YUV422ROTATION_SHIFT)
#define G2SB_CTX7_G2CONTROLSB_0_YUV422ROTATION_RANGE                    3:3
#define G2SB_CTX7_G2CONTROLSB_0_YUV422ROTATION_WOFFSET                  0x0
#define G2SB_CTX7_G2CONTROLSB_0_YUV422ROTATION_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_YUV422ROTATION_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLSB_0_YUV422ROTATION_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_YUV422ROTATION_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//source data is yuv422 planar valid when imode==PLANAR
#define G2SB_CTX7_G2CONTROLSB_0_YUV422PLANAR_SHIFT                      _MK_SHIFT_CONST(4)
#define G2SB_CTX7_G2CONTROLSB_0_YUV422PLANAR_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLSB_0_YUV422PLANAR_SHIFT)
#define G2SB_CTX7_G2CONTROLSB_0_YUV422PLANAR_RANGE                      4:4
#define G2SB_CTX7_G2CONTROLSB_0_YUV422PLANAR_WOFFSET                    0x0
#define G2SB_CTX7_G2CONTROLSB_0_YUV422PLANAR_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_YUV422PLANAR_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLSB_0_YUV422PLANAR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_YUV422PLANAR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Source (input) Data Mode  (IMODE) This parameter defines the data mode of source input.
// 0: Multiplexed Mode (data format is specified by SIFMT[2:0])
// One block of source data in the Image Buffer memory contains
// multiplexed component signals.
// 1: Planar mode, 4:2:0 YUV (SIFMT[2] specifies data format of U/V components)
// Three blocks of source data in the Image Buffer memory contain separate
// Y, U, and V component signals.
//
//  For circular buffer input to gr2d, the input format can not be planar.  It must be multiplex.
//    i.e. no YUV420 planar circular buffer input to gr2d.
#define G2SB_CTX7_G2CONTROLSB_0_IMODE_SHIFT                     _MK_SHIFT_CONST(5)
#define G2SB_CTX7_G2CONTROLSB_0_IMODE_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLSB_0_IMODE_SHIFT)
#define G2SB_CTX7_G2CONTROLSB_0_IMODE_RANGE                     5:5
#define G2SB_CTX7_G2CONTROLSB_0_IMODE_WOFFSET                   0x0
#define G2SB_CTX7_G2CONTROLSB_0_IMODE_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_IMODE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLSB_0_IMODE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_IMODE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_IMODE_MULTIPLEX                 _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLSB_0_IMODE_PLANAR                    _MK_ENUM_CONST(1)

//enable alpha vertical filter
#define G2SB_CTX7_G2CONTROLSB_0_ENAVF_SHIFT                     _MK_SHIFT_CONST(6)
#define G2SB_CTX7_G2CONTROLSB_0_ENAVF_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLSB_0_ENAVF_SHIFT)
#define G2SB_CTX7_G2CONTROLSB_0_ENAVF_RANGE                     6:6
#define G2SB_CTX7_G2CONTROLSB_0_ENAVF_WOFFSET                   0x0
#define G2SB_CTX7_G2CONTROLSB_0_ENAVF_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_ENAVF_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLSB_0_ENAVF_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_ENAVF_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_ENAVF_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLSB_0_ENAVF_ENABLE                    _MK_ENUM_CONST(1)

// enable horizontal alpha filtering
// if disabled, use the alpha value of third tap for output pixel
//U,V line stride in 4:2:0  Format,
#define G2SB_CTX7_G2CONTROLSB_0_ENAHF_SHIFT                     _MK_SHIFT_CONST(7)
#define G2SB_CTX7_G2CONTROLSB_0_ENAHF_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLSB_0_ENAHF_SHIFT)
#define G2SB_CTX7_G2CONTROLSB_0_ENAHF_RANGE                     7:7
#define G2SB_CTX7_G2CONTROLSB_0_ENAHF_WOFFSET                   0x0
#define G2SB_CTX7_G2CONTROLSB_0_ENAHF_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_ENAHF_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLSB_0_ENAHF_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_ENAHF_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_ENAHF_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLSB_0_ENAHF_ENABLE                    _MK_ENUM_CONST(1)

//   00= 1/2 of Luma Buffer Stride; in this case
//       Luma Buffer Stride should be multiple
//       of 2 bytes.
//   01= Equal to Luma Buffer Stride
//   10= 1/4 of Luma Buffer Stride; in this case
//       Luma Buffer Stride should be multiple
//       of 4 bytes.
//   11= use uvstride.
// Note: Use care when using a tiled surface, since 1/2 or 1/4
//   of luma stride may yield an invalid pitch (stride).
#define G2SB_CTX7_G2CONTROLSB_0_UVST_SHIFT                      _MK_SHIFT_CONST(8)
#define G2SB_CTX7_G2CONTROLSB_0_UVST_FIELD                      (_MK_MASK_CONST(0x3) << G2SB_CTX7_G2CONTROLSB_0_UVST_SHIFT)
#define G2SB_CTX7_G2CONTROLSB_0_UVST_RANGE                      9:8
#define G2SB_CTX7_G2CONTROLSB_0_UVST_WOFFSET                    0x0
#define G2SB_CTX7_G2CONTROLSB_0_UVST_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_UVST_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_UVST_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_UVST_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_UVST_UVS2X                      _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLSB_0_UVST_UVS1X                      _MK_ENUM_CONST(1)
#define G2SB_CTX7_G2CONTROLSB_0_UVST_UVS4X                      _MK_ENUM_CONST(2)
#define G2SB_CTX7_G2CONTROLSB_0_UVST_UVS_G2UVSTRIDE                     _MK_ENUM_CONST(3)

// Source (input) Data Line Pairing  (SL)
// This parameter specifies one of two cases of Y vs. U/V line-pairing
// in the source data in 4:2:0 format.
// In the 4:2:0 format, there is one pair of U and V image-lines for
// every two Y image-lines.
//0 The first two Y image-lines share common pair of U and V image-lines.
//1 The first two Y image-lines are paired with two different
// pairs of U and V image-lines.
#define G2SB_CTX7_G2CONTROLSB_0_SL_SHIFT                        _MK_SHIFT_CONST(10)
#define G2SB_CTX7_G2CONTROLSB_0_SL_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLSB_0_SL_SHIFT)
#define G2SB_CTX7_G2CONTROLSB_0_SL_RANGE                        10:10
#define G2SB_CTX7_G2CONTROLSB_0_SL_WOFFSET                      0x0
#define G2SB_CTX7_G2CONTROLSB_0_SL_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_SL_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLSB_0_SL_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_SL_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_SL_COMMON_PAIR                  _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLSB_0_SL_DIFFERENT_PAIR                       _MK_ENUM_CONST(1)

// StretchBLT Source Provider Selection (SISEL)
// This bit indicates where the source images come from,  either the
// image buffer memory or system memory of the host CPU.  If source
//images come from host CPU, they come via CPU Read-FIFO.
//0 Image buffer memory.
//1 System memory of host CPU.
//14 Reserved
#define G2SB_CTX7_G2CONTROLSB_0_SISEL_SHIFT                     _MK_SHIFT_CONST(13)
#define G2SB_CTX7_G2CONTROLSB_0_SISEL_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLSB_0_SISEL_SHIFT)
#define G2SB_CTX7_G2CONTROLSB_0_SISEL_RANGE                     13:13
#define G2SB_CTX7_G2CONTROLSB_0_SISEL_WOFFSET                   0x0
#define G2SB_CTX7_G2CONTROLSB_0_SISEL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_SISEL_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLSB_0_SISEL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_SISEL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_SISEL_IMAGE_BUFFER                      _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLSB_0_SISEL_HOST                      _MK_ENUM_CONST(1)

// StretchBLT Source Selection  (SBLTSRC)
// CPU and VIP module can initiate StretchBLT operation. This bit indicates
// which one initiates current StretchBLT command. Depending on the initiator,
// appropriate source for the command execution request is selected. Whichever
// the initiator is, all the command parameters are supplied from the CPU (driver)
// through the G2 command-FIFO and shadow registers.
//0 CPU is the command initiator.
//1 VIP module is the command initiator.
#define G2SB_CTX7_G2CONTROLSB_0_SBLTSRC_SHIFT                   _MK_SHIFT_CONST(15)
#define G2SB_CTX7_G2CONTROLSB_0_SBLTSRC_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLSB_0_SBLTSRC_SHIFT)
#define G2SB_CTX7_G2CONTROLSB_0_SBLTSRC_RANGE                   15:15
#define G2SB_CTX7_G2CONTROLSB_0_SBLTSRC_WOFFSET                 0x0
#define G2SB_CTX7_G2CONTROLSB_0_SBLTSRC_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_SBLTSRC_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLSB_0_SBLTSRC_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_SBLTSRC_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_SBLTSRC_CPU                     _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLSB_0_SBLTSRC_VIP                     _MK_ENUM_CONST(1)

// StretchBLT Vertical Filter Mode (VFTYPE[1:0])
// This bit is effective when the Vertical Filter is enabled. (bit 18)
// The two-tap vertical interpolation filter can be operated in various modes.
// For the image expansion, it should be programmed as a pure 2-tap
// interpolator. For the image contraction, it can work as partly averager
// and partly interpolator with varying degree depending on the contraction ratio.
// For StretchBLT, this parameter is used as an index (selection) to
// an internal lookup table that stores the group of filter-coefficients for
// the different modes of vertical filtering.
//00 Pure interpolation filter.
//01 25% averager, 75% interpolator.
//10 50% averager, 50% interpolator.
//11 100% averager.
#define G2SB_CTX7_G2CONTROLSB_0_VFTYPE_SHIFT                    _MK_SHIFT_CONST(16)
#define G2SB_CTX7_G2CONTROLSB_0_VFTYPE_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX7_G2CONTROLSB_0_VFTYPE_SHIFT)
#define G2SB_CTX7_G2CONTROLSB_0_VFTYPE_RANGE                    17:16
#define G2SB_CTX7_G2CONTROLSB_0_VFTYPE_WOFFSET                  0x0
#define G2SB_CTX7_G2CONTROLSB_0_VFTYPE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_VFTYPE_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX7_G2CONTROLSB_0_VFTYPE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_VFTYPE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_VFTYPE_INTERP                   _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLSB_0_VFTYPE_AVG25_INTERP75                   _MK_ENUM_CONST(1)
#define G2SB_CTX7_G2CONTROLSB_0_VFTYPE_AVG50_INTERP50                   _MK_ENUM_CONST(2)
#define G2SB_CTX7_G2CONTROLSB_0_VFTYPE_AVG                      _MK_ENUM_CONST(3)

// StretchBLT Vertical Filter Enable (VFEN)
// Vertical filter shall be disabled if source images come from host CPU
// via CPU Read-FIFO. (SISEL)
// Vertical filter may be disabled to save some memory bandwidth but
// this will likely result in degradation of image quality.
// This option may also be used in the case where source image is progressive
// scanning and there is no vertical scaling.
//0 Vertical filter is disabled.
//1 Vertical filter is enabled.
#define G2SB_CTX7_G2CONTROLSB_0_VFEN_SHIFT                      _MK_SHIFT_CONST(18)
#define G2SB_CTX7_G2CONTROLSB_0_VFEN_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLSB_0_VFEN_SHIFT)
#define G2SB_CTX7_G2CONTROLSB_0_VFEN_RANGE                      18:18
#define G2SB_CTX7_G2CONTROLSB_0_VFEN_WOFFSET                    0x0
#define G2SB_CTX7_G2CONTROLSB_0_VFEN_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_VFEN_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLSB_0_VFEN_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_VFEN_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_VFEN_DISABLE                    _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLSB_0_VFEN_ENABLE                     _MK_ENUM_CONST(1)

// enabled color space converter by default
#define G2SB_CTX7_G2CONTROLSB_0_DISCSC_SHIFT                    _MK_SHIFT_CONST(19)
#define G2SB_CTX7_G2CONTROLSB_0_DISCSC_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLSB_0_DISCSC_SHIFT)
#define G2SB_CTX7_G2CONTROLSB_0_DISCSC_RANGE                    19:19
#define G2SB_CTX7_G2CONTROLSB_0_DISCSC_WOFFSET                  0x0
#define G2SB_CTX7_G2CONTROLSB_0_DISCSC_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_DISCSC_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLSB_0_DISCSC_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_DISCSC_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_DISCSC_ENABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLSB_0_DISCSC_DISABLE                  _MK_ENUM_CONST(1)

// StretchBLT Horizontal Filter Mode (HFTYPE[2:0])
// The six-tap horizontal interpolation filter can be operated in
// various operation modes. For the image expansion, it should be programmed
// as a pure 6-tap interpolator.  For the image contraction, it can work as
// partly lowpass filter and partly interpolater with varying degree depending
// the contraction ratio.
// For StretchBLT, this parameter is used as an index (selection)
// to an internal lookup table that stores the group of filter-coefficients
//for the different modes of horizontal filtering.
// 000: Pure interpolation filter.
// 001: 010 011 100 101 110: mix of interpolation and low pass filters
// 111: DISABLE.
#define G2SB_CTX7_G2CONTROLSB_0_HFTYPE_SHIFT                    _MK_SHIFT_CONST(20)
#define G2SB_CTX7_G2CONTROLSB_0_HFTYPE_FIELD                    (_MK_MASK_CONST(0x7) << G2SB_CTX7_G2CONTROLSB_0_HFTYPE_SHIFT)
#define G2SB_CTX7_G2CONTROLSB_0_HFTYPE_RANGE                    22:20
#define G2SB_CTX7_G2CONTROLSB_0_HFTYPE_WOFFSET                  0x0
#define G2SB_CTX7_G2CONTROLSB_0_HFTYPE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_HFTYPE_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define G2SB_CTX7_G2CONTROLSB_0_HFTYPE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_HFTYPE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_HFTYPE_INTERP                   _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLSB_0_HFTYPE_LPF1                     _MK_ENUM_CONST(1)
#define G2SB_CTX7_G2CONTROLSB_0_HFTYPE_LPF2                     _MK_ENUM_CONST(2)
#define G2SB_CTX7_G2CONTROLSB_0_HFTYPE_LPF3                     _MK_ENUM_CONST(3)
#define G2SB_CTX7_G2CONTROLSB_0_HFTYPE_LPF4                     _MK_ENUM_CONST(4)
#define G2SB_CTX7_G2CONTROLSB_0_HFTYPE_LPF5                     _MK_ENUM_CONST(5)
#define G2SB_CTX7_G2CONTROLSB_0_HFTYPE_LPF6                     _MK_ENUM_CONST(6)
#define G2SB_CTX7_G2CONTROLSB_0_HFTYPE_DISABLE                  _MK_ENUM_CONST(7)

//In the VC-1 specification, when the value of RANGEREDFRM variable (1-bit)
//  for a picture is equal to 1, the picture shall be scaled up according
// to the following equation:
//Y = clip( (( Y-128)*2) + 128);
//Cb = clip( ((Cb-128)*2) + 128);
//Cr = clip( ((Cr-128)*2) + 128);
//The clip operator limits the output to [0, 255].
//The input is also limited to [0, 255].
//In the VC-1 nomenclature, the output (Y, Cb, Cr) tuple corresponds to
// the 'decoded' picture. The input (Y, Cb, Cr) tuple corresponds to
// the 'reconstructed' picture.
// The above equations create the decoded picture while keeping
// the reconstructed picture intact.
//Only YUV _OB formats are supported with range reducation enabled,
// not the YUV _TC or RGB formats.
//----------------------------------------------------
//At PortalPlayer this functionality was implemented in the DVO module.
// The YUV data coming from the video frame buffers (reconstructed picture)
//  in the SDRAM was scaled up using the above equations and given to the display.
// the value of 1-bit wide RANGEREDFRM variable was configured in the DVO per frame
// and the frame was scaled whenever RANGEREDFRM == 1.
#define G2SB_CTX7_G2CONTROLSB_0_RANGEREDFRM_SHIFT                       _MK_SHIFT_CONST(23)
#define G2SB_CTX7_G2CONTROLSB_0_RANGEREDFRM_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLSB_0_RANGEREDFRM_SHIFT)
#define G2SB_CTX7_G2CONTROLSB_0_RANGEREDFRM_RANGE                       23:23
#define G2SB_CTX7_G2CONTROLSB_0_RANGEREDFRM_WOFFSET                     0x0
#define G2SB_CTX7_G2CONTROLSB_0_RANGEREDFRM_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_RANGEREDFRM_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLSB_0_RANGEREDFRM_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_RANGEREDFRM_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_RANGEREDFRM_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLSB_0_RANGEREDFRM_ENABLE                      _MK_ENUM_CONST(1)

// StretchBLT Source Type (SITYPE)
// This bit identifies two types of source images. If source image is 2-to-1
// interlaced and StretchBLT processes either one of the two interlaced
// field-images, physical (positional) displacement between the two
// interlaced fields must be taken into account.  One field-image that is
// placed higher in position than the other field-image is called top-field
// and the other is called bottom-field. StretchBLT processing has to
// lower the top-field (or raise the bottom-field) to match the corresponding
// two target images in the overlay window (that is progressively scanned)
// right at the same position.   If source image is full frame-image
// obtained from two interlaced field-images, its type is ?top-field?.
// If source images are progressively scanned, the type identification is not
// significant and they may be designated either one of the two types
//0 Source image is ?top-field?.
//1 Source image is ?bottom-field?.
#define G2SB_CTX7_G2CONTROLSB_0_SITYPE_SHIFT                    _MK_SHIFT_CONST(24)
#define G2SB_CTX7_G2CONTROLSB_0_SITYPE_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLSB_0_SITYPE_SHIFT)
#define G2SB_CTX7_G2CONTROLSB_0_SITYPE_RANGE                    24:24
#define G2SB_CTX7_G2CONTROLSB_0_SITYPE_WOFFSET                  0x0
#define G2SB_CTX7_G2CONTROLSB_0_SITYPE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_SITYPE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLSB_0_SITYPE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_SITYPE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_SITYPE_TOP_FIELD                        _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLSB_0_SITYPE_BOTTOM_FIELD                     _MK_ENUM_CONST(1)

// StretchBLT Source Buffer Selection (SBSEL)
// StretchBLT processing involves frame-rate conversion from a
// series of source images to another series of destination images
// (field-rate of the source video to frame-rate of the PC display).
// In order to avoid image tearing, it is preferred to use two buffer
// sections in the source video area. This bit selects one of the two
// buffering blocks from which this StretchBLT command receives the source image.
// The two buffering memory blocks are called source-A and source-B.
//0 Source image comes from ?source-A? buffer.
//1 Source image comes from ?source-B? buffer.
#define G2SB_CTX7_G2CONTROLSB_0_SBSEL_SHIFT                     _MK_SHIFT_CONST(25)
#define G2SB_CTX7_G2CONTROLSB_0_SBSEL_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLSB_0_SBSEL_SHIFT)
#define G2SB_CTX7_G2CONTROLSB_0_SBSEL_RANGE                     25:25
#define G2SB_CTX7_G2CONTROLSB_0_SBSEL_WOFFSET                   0x0
#define G2SB_CTX7_G2CONTROLSB_0_SBSEL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_SBSEL_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLSB_0_SBSEL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_SBSEL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_SBSEL_SRC_A                     _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLSB_0_SBSEL_SRC_B                     _MK_ENUM_CONST(1)

// StretchBLT Destination Buffer Selection (DBSEL)
// StretchBLT processing involves frame-rate conversion from a series of
// source images to another series of destination images (field-rate of
// the source video to frame-rate of the PC display). In order to avoid
// image tearing, it is preferred to use two buffer sections in the destination
// video area.  This bit selects one of the two buffering blocks to which this
// StretchBLT command delivers the destination image.
// The two buffering memory blocks are called A and B.
//0 Destination image goes to ?A? buffer.
//1 Destination image goes to ?B? buffer.
#define G2SB_CTX7_G2CONTROLSB_0_DBSEL_SHIFT                     _MK_SHIFT_CONST(26)
#define G2SB_CTX7_G2CONTROLSB_0_DBSEL_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLSB_0_DBSEL_SHIFT)
#define G2SB_CTX7_G2CONTROLSB_0_DBSEL_RANGE                     26:26
#define G2SB_CTX7_G2CONTROLSB_0_DBSEL_WOFFSET                   0x0
#define G2SB_CTX7_G2CONTROLSB_0_DBSEL_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_DBSEL_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLSB_0_DBSEL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_DBSEL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_DBSEL_DST_A                     _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLSB_0_DBSEL_DST_B                     _MK_ENUM_CONST(1)

// Key Signal Generator Enable (KEYEN) Key signal generator generates either
// chroma key signal (from YCbCr signal) or color key signal (from RGB signal)
//0 Key signal generator is disabled.
//1 Key signal generator is enabled.
#define G2SB_CTX7_G2CONTROLSB_0_KEYEN_SHIFT                     _MK_SHIFT_CONST(27)
#define G2SB_CTX7_G2CONTROLSB_0_KEYEN_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLSB_0_KEYEN_SHIFT)
#define G2SB_CTX7_G2CONTROLSB_0_KEYEN_RANGE                     27:27
#define G2SB_CTX7_G2CONTROLSB_0_KEYEN_WOFFSET                   0x0
#define G2SB_CTX7_G2CONTROLSB_0_KEYEN_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_KEYEN_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLSB_0_KEYEN_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_KEYEN_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_KEYEN_DISABLE                   _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLSB_0_KEYEN_ENABLE                    _MK_ENUM_CONST(1)

// Key Signal Polarity (KPOL)
// Color/Chroma key signal is generated by comparing source input pixel
// color to a range of a color specified by lower and upper limit values.
// The key signal is interpreted in two ways, depending on which one of
// video and graphics images is foreground (and the other is background).
// This is effective only if Key signal generator is enabled.
// (see G2CMKEYL, G2CMKEYU)
// 0 Key signal is set to 1 when source pixel is within the lower and upper
// limit color range.
// 1 Key signal is set to 1 when source pixel is outside the lower and upper
// limit color range.
#define G2SB_CTX7_G2CONTROLSB_0_KPOL_SHIFT                      _MK_SHIFT_CONST(28)
#define G2SB_CTX7_G2CONTROLSB_0_KPOL_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLSB_0_KPOL_SHIFT)
#define G2SB_CTX7_G2CONTROLSB_0_KPOL_RANGE                      28:28
#define G2SB_CTX7_G2CONTROLSB_0_KPOL_WOFFSET                    0x0
#define G2SB_CTX7_G2CONTROLSB_0_KPOL_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_KPOL_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLSB_0_KPOL_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_KPOL_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_KPOL_WITHIN_BOUNDS                      _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLSB_0_KPOL_OUTSIDE_BOUNDS                     _MK_ENUM_CONST(1)

// Enable Dithering (ENDITH)
// For 16 bit RGB output modes, the LSB of the color components can be
// modified by adding a variable residual value that will reduce the banding
// artifacts that can appear on the display.
// 0 Normal operation
// 1 Enable Dithering
#define G2SB_CTX7_G2CONTROLSB_0_ENDITH_SHIFT                    _MK_SHIFT_CONST(30)
#define G2SB_CTX7_G2CONTROLSB_0_ENDITH_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLSB_0_ENDITH_SHIFT)
#define G2SB_CTX7_G2CONTROLSB_0_ENDITH_RANGE                    30:30
#define G2SB_CTX7_G2CONTROLSB_0_ENDITH_WOFFSET                  0x0
#define G2SB_CTX7_G2CONTROLSB_0_ENDITH_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_ENDITH_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLSB_0_ENDITH_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_ENDITH_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_ENDITH_DISABLE                  _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLSB_0_ENDITH_ENABLE                   _MK_ENUM_CONST(1)

//output destination writes (dw) go either to image memory or epp
//0 Output data is sent to memory
//1 YUV or RGB data is passed directly to EPP module and no destination writes
//  will take place.
#define G2SB_CTX7_G2CONTROLSB_0_DISDW_SHIFT                     _MK_SHIFT_CONST(31)
#define G2SB_CTX7_G2CONTROLSB_0_DISDW_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLSB_0_DISDW_SHIFT)
#define G2SB_CTX7_G2CONTROLSB_0_DISDW_RANGE                     31:31
#define G2SB_CTX7_G2CONTROLSB_0_DISDW_WOFFSET                   0x0
#define G2SB_CTX7_G2CONTROLSB_0_DISDW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_DISDW_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLSB_0_DISDW_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_DISDW_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSB_0_DISDW_GOTO_IMAGE_BUFFER                 _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLSB_0_DISDW_GOTO_EPP                  _MK_ENUM_CONST(1)


// Register G2SB_CTX7_G2CONTROLSECOND_0  //{host,2d,index=1e}
#define G2SB_CTX7_G2CONTROLSECOND_0                     _MK_ADDR_CONST(0xa01e)
#define G2SB_CTX7_G2CONTROLSECOND_0_SECURE                      0x0
#define G2SB_CTX7_G2CONTROLSECOND_0_WORD_COUNT                  0x1
#define G2SB_CTX7_G2CONTROLSECOND_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_RESET_MASK                  _MK_MASK_CONST(0x3f61c3fe)
#define G2SB_CTX7_G2CONTROLSECOND_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_READ_MASK                   _MK_MASK_CONST(0x3f71c3fe)
#define G2SB_CTX7_G2CONTROLSECOND_0_WRITE_MASK                  _MK_MASK_CONST(0x3f71c3fe)
// Host port bit swap 1=enable   0= disable
//   1= enable
#define G2SB_CTX7_G2CONTROLSECOND_0_BITSWAP_SHIFT                       _MK_SHIFT_CONST(1)
#define G2SB_CTX7_G2CONTROLSECOND_0_BITSWAP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLSECOND_0_BITSWAP_SHIFT)
#define G2SB_CTX7_G2CONTROLSECOND_0_BITSWAP_RANGE                       1:1
#define G2SB_CTX7_G2CONTROLSECOND_0_BITSWAP_WOFFSET                     0x0
#define G2SB_CTX7_G2CONTROLSECOND_0_BITSWAP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_BITSWAP_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLSECOND_0_BITSWAP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_BITSWAP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_BITSWAP_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLSECOND_0_BITSWAP_ENABLE                      _MK_ENUM_CONST(1)

// Host port byte swap 1=enable   0= disable
//   1= enable
#define G2SB_CTX7_G2CONTROLSECOND_0_BEBSWAP_SHIFT                       _MK_SHIFT_CONST(2)
#define G2SB_CTX7_G2CONTROLSECOND_0_BEBSWAP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLSECOND_0_BEBSWAP_SHIFT)
#define G2SB_CTX7_G2CONTROLSECOND_0_BEBSWAP_RANGE                       2:2
#define G2SB_CTX7_G2CONTROLSECOND_0_BEBSWAP_WOFFSET                     0x0
#define G2SB_CTX7_G2CONTROLSECOND_0_BEBSWAP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_BEBSWAP_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLSECOND_0_BEBSWAP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_BEBSWAP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_BEBSWAP_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLSECOND_0_BEBSWAP_ENABLE                      _MK_ENUM_CONST(1)

// Host port word swap 1=enable   0= disable
#define G2SB_CTX7_G2CONTROLSECOND_0_BEWSWAP_SHIFT                       _MK_SHIFT_CONST(3)
#define G2SB_CTX7_G2CONTROLSECOND_0_BEWSWAP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLSECOND_0_BEWSWAP_SHIFT)
#define G2SB_CTX7_G2CONTROLSECOND_0_BEWSWAP_RANGE                       3:3
#define G2SB_CTX7_G2CONTROLSECOND_0_BEWSWAP_WOFFSET                     0x0
#define G2SB_CTX7_G2CONTROLSECOND_0_BEWSWAP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_BEWSWAP_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLSECOND_0_BEWSWAP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_BEWSWAP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_BEWSWAP_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLSECOND_0_BEWSWAP_ENABLE                      _MK_ENUM_CONST(1)

// Alpha blending method
// FIX:
//   ALPHA blending:  Fixed alpha,  ALPHA is the value, B5G6R5 * B5G6R5
//   VCAA:            B5G6R5->B5G6R5
// PL1BPP:
//   ALPHA blending:  Alpha 1bit/pixel from memory plane, B5G6R5 * B5G6R5
//      NOTE: when ALPTYPE is PL1BPP, DSTX[2:0] must be zero, see bug 344489
// PL2BPP:
//   ALPHA blending:  Alpha 2bits/pixel from memory plane, B5G6R5 * B5G6R5
//      NOTE: when ALPTYPE is PL2BPP, DSTX[1:0] must be zero, see bug 344489
// PL4BPP:
//   ALPHA blending:  Alpha 4bits/pixel from memory plane, B5G6R5 * B5G6R5
//      NOTE: when ALPTYPE is PL4BPP, DSTX[0:0] must be zero, see bug 344489
// PL8BPP:
//   ALPHA blending:  Alpha 8bits/pixel from memory plane, B5G6R5 * B5G6R5
// PL44BPP:
//   ALPHA blending:  Alpha 8bits/pixel from memory plane src*4bits+dst*4bits, B5G6R5 * B5G6R5
// PLS1BPP:
//   ALPHA blending:  Alpha 1bit from source B5G5R5A1, alpha(MSB). Dest: B5G6R5.
//   VCAA:            reserved
// PLS4BPPAL:
//   ALPHA blending:  Alpha 4bits from source A4B4G4R4, alpha(LSB). Dest: B5G6R5.
// PLS4BPP:
//   ALPHA blending:  Alpha 4bits from source B4G4R4A4, alpha(MSB). Dest: B5G6R5.
//   VCAA:            R8G8B8A8->B5G6R5 without reading VCAA plane
//                     (surface blit with bpp down convert - implemented in hw by vcaa engine; not really a vcaa resolve)
// PLS8BPP:
//   ALPHA blending:  Alpha 8bits from source/destination(decided by ALPSRCORDST),
//                    R8G8B8A8, alpha(MSB). DST: R8G8B8A8
//   VCAA:            R8G8B8A8->R8G8B8A8, alpha has same blending method as RGB
// PLS8BX:
//   ALPHA blending:  Alpha 8bits from source B8G8R8A8, alpha(MSB). Dest: B5G6R5. (**Restrictions)
//   VCAA:            R8G8B8A8->B5G6R5
// PLS1BPPAL:
//   ALPHA blending:  Alpha 1 bit from source A1B5G5R5, alpha(LSB). Dest: B5G6R5
//   VCAA:            A1B5G5R5->A1B5G5R5
// **Restriction
// PLS8BX alpha blending has the following restrictions
// 1. Source/destination addresses have to be in 128bit boundary.
// 2. Destination width has to be multiple of 4 pixels.
// 3. Source/Destination strides have to be multiple of 128bits.
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPTYPE_SHIFT                       _MK_SHIFT_CONST(4)
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPTYPE_FIELD                       (_MK_MASK_CONST(0x1f) << G2SB_CTX7_G2CONTROLSECOND_0_ALPTYPE_SHIFT)
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPTYPE_RANGE                       8:4
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPTYPE_WOFFSET                     0x0
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPTYPE_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPTYPE_DEFAULT_MASK                        _MK_MASK_CONST(0x1f)
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPTYPE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPTYPE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPTYPE_FIX                 _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPTYPE_PL1BPP                      _MK_ENUM_CONST(1)
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPTYPE_PL2BPP                      _MK_ENUM_CONST(2)
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPTYPE_PL4BPP                      _MK_ENUM_CONST(3)
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPTYPE_PL8BPP                      _MK_ENUM_CONST(4)
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPTYPE_PL44BPP                     _MK_ENUM_CONST(5)
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPTYPE_PLS1BPP                     _MK_ENUM_CONST(6)
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPTYPE_PLS4BPPAL                   _MK_ENUM_CONST(7)
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPTYPE_PLS4BPP                     _MK_ENUM_CONST(8)
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPTYPE_PLS8BPP                     _MK_ENUM_CONST(9)
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPTYPE_PLS8BX                      _MK_ENUM_CONST(10)
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPTYPE_PLS1BPPAL                   _MK_ENUM_CONST(11)

// 32bits blending mode, output alpha selection 0:source alpha, 1:destination alpha
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPSRCORDST_SHIFT                   _MK_SHIFT_CONST(9)
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPSRCORDST_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLSECOND_0_ALPSRCORDST_SHIFT)
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPSRCORDST_RANGE                   9:9
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPSRCORDST_WOFFSET                 0x0
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPSRCORDST_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPSRCORDST_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPSRCORDST_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPSRCORDST_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPSRCORDST_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLSECOND_0_ALPSRCORDST_ENABLE                  _MK_ENUM_CONST(1)

// Pixel replication for Palm OS.
#define G2SB_CTX7_G2CONTROLSECOND_0_PXLREP_SHIFT                        _MK_SHIFT_CONST(14)
#define G2SB_CTX7_G2CONTROLSECOND_0_PXLREP_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLSECOND_0_PXLREP_SHIFT)
#define G2SB_CTX7_G2CONTROLSECOND_0_PXLREP_RANGE                        14:14
#define G2SB_CTX7_G2CONTROLSECOND_0_PXLREP_WOFFSET                      0x0
#define G2SB_CTX7_G2CONTROLSECOND_0_PXLREP_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_PXLREP_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLSECOND_0_PXLREP_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_PXLREP_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_PXLREP_DISABLE                      _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLSECOND_0_PXLREP_ENABLE                       _MK_ENUM_CONST(1)

// Used by Palm OS to highlight a selected icon by swapping
//  Background and Foreground colors in a rectangle area
#define G2SB_CTX7_G2CONTROLSECOND_0_SWAPBLT_SHIFT                       _MK_SHIFT_CONST(15)
#define G2SB_CTX7_G2CONTROLSECOND_0_SWAPBLT_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLSECOND_0_SWAPBLT_SHIFT)
#define G2SB_CTX7_G2CONTROLSECOND_0_SWAPBLT_RANGE                       15:15
#define G2SB_CTX7_G2CONTROLSECOND_0_SWAPBLT_WOFFSET                     0x0
#define G2SB_CTX7_G2CONTROLSECOND_0_SWAPBLT_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_SWAPBLT_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLSECOND_0_SWAPBLT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_SWAPBLT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//VCAA safe mode, if turned on, all up/bottom color data will be read in. This is a debug/cya incase the top/bottom color
//  fetch is broken.
#define G2SB_CTX7_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_CTX7_G2CONTROLSECOND_0_VCAA_SAFE_MODE_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SHIFT)
#define G2SB_CTX7_G2CONTROLSECOND_0_VCAA_SAFE_MODE_RANGE                        16:16
#define G2SB_CTX7_G2CONTROLSECOND_0_VCAA_SAFE_MODE_WOFFSET                      0x0
#define G2SB_CTX7_G2CONTROLSECOND_0_VCAA_SAFE_MODE_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_VCAA_SAFE_MODE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_VCAA_SAFE_MODE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_VCAA_SAFE_MODE_DISABLE                      _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLSECOND_0_VCAA_SAFE_MODE_ENABLE                       _MK_ENUM_CONST(1)

#define G2SB_CTX7_G2CONTROLSECOND_0_G2NOSTOP_SHIFT                      _MK_SHIFT_CONST(20)
#define G2SB_CTX7_G2CONTROLSECOND_0_G2NOSTOP_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLSECOND_0_G2NOSTOP_SHIFT)
#define G2SB_CTX7_G2CONTROLSECOND_0_G2NOSTOP_RANGE                      20:20
#define G2SB_CTX7_G2CONTROLSECOND_0_G2NOSTOP_WOFFSET                    0x0
#define G2SB_CTX7_G2CONTROLSECOND_0_G2NOSTOP_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_G2NOSTOP_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_G2NOSTOP_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_G2NOSTOP_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Clipping rectangle control,
// if clip enable, bit 57 XYTDW should be cleared.
// 0x=clipping disabled,
// 10=draw only inside clipping rectangle,
// 11=draw only outside clipping rectangle
#define G2SB_CTX7_G2CONTROLSECOND_0_CLIPC_SHIFT                 _MK_SHIFT_CONST(21)
#define G2SB_CTX7_G2CONTROLSECOND_0_CLIPC_FIELD                 (_MK_MASK_CONST(0x3) << G2SB_CTX7_G2CONTROLSECOND_0_CLIPC_SHIFT)
#define G2SB_CTX7_G2CONTROLSECOND_0_CLIPC_RANGE                 22:21
#define G2SB_CTX7_G2CONTROLSECOND_0_CLIPC_WOFFSET                       0x0
#define G2SB_CTX7_G2CONTROLSECOND_0_CLIPC_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_CLIPC_DEFAULT_MASK                  _MK_MASK_CONST(0x3)
#define G2SB_CTX7_G2CONTROLSECOND_0_CLIPC_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_CLIPC_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Fast Rotate mode sel
//------------------------------------------------------------------
// G2 Fast Rotate
//
// Transforms a surface via FR_TYPE transformation.
// Works in either 2-buffer (copy)  or 1-buffer mode (in place) mode.
// The engine breaks down a larger surface into a grid of smaller FR_BLOCKs.
// Works on the granularity of an FR_BLOCK.  An FR_BLOCK is:
//   16x16 pixel block (DSTCD = bpp8)
//    8x8  pixel block (DSTCD = bpp16)
//    4x4  pixel block (DSTCD = bpp32)
// Max surface size is 4096x4096
//
// Key information
//  - source and destination base address must be 128-bit word aligned
//  - engine works on FR_BLOCK granularity:
//      transformed surface width  in multiples of 16-bytes**
//      transformed surface height in multiples of 16/8/4 lines for bpp8/bpp16/bpp32 FR_BLOCK
//      if surface dimension is not a multiple, sw can program FR engine to transform larger surface
//         (round up to next FR_BLOCK in width and height-->transform-->calculate relative memory pointer address)
//  - during a rotational transformation (TRANS_LR, TRANS_RL, ROT_90, ROT_270):
//      the stride of the output surface != the stride of the input surface when working on non-square input
//      input:                        output:
//      *^----------------------           *$----------------------
//      $ 0  1  2  3  4  5  6  7           ^ 24 16 8  0  ^  ^  ^  ^
//      | 8  9 10 11 12 13 14 15           | 25 17 9  1  ^  ^  ^  ^
//      |16 17 18 19 20 21 22 23           | 26 18 10 2  ^  ^  ^  ^
//      |24 25 26 27 28 29 30 31           | 27 19 11 3  ^  ^  ^  ^
//      | -  -  -  -  *  *  *  *           | 28 20 12 4  *  *  *  *
//      | -  -  -  -  *  *  *  *           | 29 21 13 5  *  *  *  *
//      | -  -  -  -  *  *  *  *           | 30 22 14 6  *  *  *  *
//      | -  -  -  -  *  *  *  *           | 31 23 15 7  *  *  *  *
//
//  - Tiling alignment restrictions subsume FR restrictions because the
//    FR surface base address is the same as the start address.
//
//  Register Programming
//  ====================
//   FR_MODE - inplace or copy
//   FR_TYPE - type of transformation
//   DSTCD - bpp8, bpp16, bpp32
//   SRCBA - source base address
//   SRCWIDTH - (width in pixels-1)
//   SRCHEIGHT - (height in lines-1)
//   SRCS - source stride
//   DSTBA - dest base address
//   DSTS - dest stride
//   FR_READWAIT - always set to enable
//
// FR inefficency in the following setup :
// 1. FR_MODE==SQUARE
// 2. if(FR_TYPE==YFLIP && SRCHEIGHT==m*n && n==odd number) where m=8bpp?16:16bpp?8:4
//    Or if(FR_TYPE==XFLIP && SRCWIDTH==m*n && n==odd number) where m=8bpp?16:16bpp?8:4
// 3. Then, the middle 8 lines/pixels, E.G. YFLIP/16bpp/n==3, line8 to line15 will be processed twice. 00 = disable fast rotate - this turns off the 2nd level clock to fr_rotate engine.  Please remember to do so!
// 01 = src/dst copy mode - two separate buffers
// 10 = square in place - one buffer
// 11 = blank
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_MODE_SHIFT                       _MK_SHIFT_CONST(24)
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_MODE_FIELD                       (_MK_MASK_CONST(0x3) << G2SB_CTX7_G2CONTROLSECOND_0_FR_MODE_SHIFT)
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_MODE_RANGE                       25:24
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_MODE_WOFFSET                     0x0
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_MODE_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_MODE_DEFAULT_MASK                        _MK_MASK_CONST(0x3)
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_MODE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_MODE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_MODE_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_MODE_SRC_DST_COPY                        _MK_ENUM_CONST(1)
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_MODE_SQUARE                      _MK_ENUM_CONST(2)
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_MODE_BLANK                       _MK_ENUM_CONST(3)

//  Fast Rotate type     000 = FLIP_X
// 001 = FLIP_Y
// 010 = TRANS_LR (mirrors about diagonal. Diagonal runs from upper left to lower right)
// 011 = TRANS_RL (mirrors about diagonal. Diagonal runs from upper right to lower left)
// 100 = ROT_90 (counter clock wise by 90 degrees)
// 101 = ROT_180
// 110 = ROT_270 (clock wise by 90 degrees)
// 111 = IDENTITY
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_TYPE_SHIFT                       _MK_SHIFT_CONST(26)
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_TYPE_FIELD                       (_MK_MASK_CONST(0x7) << G2SB_CTX7_G2CONTROLSECOND_0_FR_TYPE_SHIFT)
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_TYPE_RANGE                       28:26
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_TYPE_WOFFSET                     0x0
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_TYPE_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_TYPE_DEFAULT_MASK                        _MK_MASK_CONST(0x7)
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_TYPE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_TYPE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_TYPE_FLIP_X                      _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_TYPE_FLIP_Y                      _MK_ENUM_CONST(1)
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_TYPE_TRANS_LR                    _MK_ENUM_CONST(2)
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_TYPE_TRANS_RL                    _MK_ENUM_CONST(3)
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_TYPE_ROT_90                      _MK_ENUM_CONST(4)
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_TYPE_ROT_180                     _MK_ENUM_CONST(5)
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_TYPE_ROT_270                     _MK_ENUM_CONST(6)
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_TYPE_IDENTITY                    _MK_ENUM_CONST(7)

//  Fast Rotate wait for read 0 = disable
// 1 = enable
// Enabling this bit forces FR to wait for the reads to be stored
// in the data return fifo before started to send writes out to
// the same block.
//
// Always set to ENABLE.  This is debug only.
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_READWAIT_SHIFT                   _MK_SHIFT_CONST(29)
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_READWAIT_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLSECOND_0_FR_READWAIT_SHIFT)
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_READWAIT_RANGE                   29:29
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_READWAIT_WOFFSET                 0x0
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_READWAIT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_READWAIT_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_READWAIT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_READWAIT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_READWAIT_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLSECOND_0_FR_READWAIT_ENABLE                  _MK_ENUM_CONST(1)

//----------------------------------------------------------------------
//
// G2 Blit Formats:
// (1) G2 Blit size is based on height in lines, width in pixels,
//     stride in bytes, and pixel size (color depth). Unless alpha
//     blending is enabled, G2 doesn't care about pixel components.
//
//     Source color depths supported by G2 Blit:
//     =========================================
//       color depth same as destination: G2CONTROLMAIN.SRCCD = 1
//       monochrome:                      G2CONTROLMAIN.SRCCD = 0
//       (source monochrome color determined by G2SRCBGC, G2SRCFGC)
//
//     Pattern color depths supported by G2 Blit:
//     =========================================
//       color depth same as destination: G2PATOS.PATCD = 1
//       monochrome:                      G2PATOS.PATCD = 0
//       (pattern monochrome color determined by G2PATBGC, G2PATFGC)
//
//     Destination color depths supported by G2 Blit:
//     ==============================================
//       1 byte per pixel:    G2CONTROLMAIN.DSTCD = BPP8
//       2 bytes per pixel:   G2CONTROLMAIN.DSTCD = BPP16
//       4 bytes per pixel:   G2CONTROLMAIN.DSTCD = BPP32
//
// (2) Alpha blending operates on 3 or 4 component pixels of a specified
//     color depth. One of the components may be alpha (A), depending on the
//     alpha blend format, which is only allowed in certain component
//     positions defined below. The only format rule of the remaining
//     components is that they must be in the same source and destination
//     position because the alpha blend engine does not support component
//     swapping. For example, valid 32BPP formats are: RGBA_8888->RGBA_8888,
//     BGRA_8888->BGRA_8888, GRBA_8888->GRBA_8888, etc.
//
//     Source formats supported by G2 alpha blend:
//     ===========================================
//       color depth BPP8:  no supported formats
//       color depth BPP16:
//          ALPTYPE_PLS1BPP: xxxA_5551 (ex: BGRA_5551 = A[15] R[14:10] G[9:5] B[4:0])
//          ALPTYPE_PLS4BPP: xxxA_4444 (ex: BGRA_4444 = A[15:12] R[11:8] G[7:4] B[3:0])
//          (other)        : xxx_565   (ex: BGR_565   = R[15:11] G[10:5] B[4:0])
//       color depth BPP32:
//          (all)          : xxxA_8888 (ex: BRGA_8888 = A[31:24] R[23:16] G[15:8] B[7:0])
//
//
//     Destination formats supported by G2 alpha blend:
//     ================================================
//       color depth BPP8:  no supported formats
//       color depth BPP16: xxx_565   (ex: BGR_565   = R[15:11] G[10:5] B[4:0])
//       color depth BPP32: xxxA_8888 (ex: BRGA_8888 = A[31:24] R[23:16] G[15:8] B[7:0])
//
//     The following table
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     | src cd  |   src format                  | dst cd  | dst format     | examples:                                  |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP8   |  no support                   |  BPP8   | no support     |                                            |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP16  | xyzA_5551, xyzA_4444, xyz_565 |  BPP16  | xyz_565        | BGRA_5551->BGR_565, RGB_565->RGB565        |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP32  | xyzA_8888                     |  BPP32  | xyzA_8888      | RGBA_8888->RGBA_8888, BGRA_8888->BGRA_8888 |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//     |  BPP32  | xyzA_8888                     |  BPP16  | xyz_565        | RGBA_8888->RGB_565, BGRA_8888->BGR_565     |
//     +---------+-------------------------------+---------+----------------+--------------------------------------------+
//
//----------------------------------------------------------
// VCAA Resolve engine
//
// (1) Format support
//
// +-----------------+--------------------+----------------------+
// | srcColor format | srcCoverage format | legal dest format(s) |
// +-----------------+--------------------+----------------------+
// |     A1B5G5R5    |        VCAA        |       A1B5G5R5       |
// +-----------------+--------------------+----------------------+
// |     R8G8B8A8    |        VCAA        |   R8G8B8A8, B5G6R5   |
// +-----------------+--------------------+----------------------+
// |      B5G6R5     |        VCAA        |         B5G6R5       |
// +-----------------+--------------------+----------------------+
//
// To program resolve type:
//   ALPTYPE == FIX:       B5G6R5   -> B5G6R5
//   ALPTYPE == PLS1BPPAL: A1B5G5R5 -> A1B5G5R5
//   ALPTYPE == PLS8BPP:   R8G8B8A8 -> R8G8B8A8
//   ALPTYPE == PLS8BX:    R8G8B8A8 -> B5G6R5
//
// (2) Color surface programming
//
//     color surface base address:  SRCBA
//       sub-surface start x:       SRCX      (pixel index)
//       sub-surface start y:       SRCY      (line index)
//     color surface stride:        SRCS      (bytes)
//
//     The engine supports sub-surface resolve.  One can imagine a full color buffer of 1024x768, but
//
//     [pseudo_code]
//       color_surface_start_address_fetch = pcurctx->regs.rG2SRCBA.uSRCBA() +
//        (pcurctx->regs.rG2SRCPS.uSRCX() * VCAAState.color_surface_depth) +
//        (pcurctx->regs.rG2SRCPS.uSRCY() * VCAAState.color_surface_stride);
//
// (3) VCAA surface programming
//
//     vcaa surface base address:   PATBA
//     vcaa surface stride:         PATST     (bytes)
//
//     [pseudo_code]
//       vcaa_surface_start_address_fetch = pcurctx->regs.rG2PATBA.uPATBA();
//
//       SW *MUST* directly program this register to the proper sub-surface location in the vcaa surface
//        which corresponds to the SRCX and SRCY programming. The calculation is
//            PATBA = vcaa_base_address + SRCX * (1) + SRCY * PATST;
//
// (4) Resolve surface programming
//
//     resolve window width:        DSTWIDTH  (pixels)
//     resolve window height:       DSTHEIGHT (lines)
//     resolve output stride:       DSTS      (bytes)
//
//  These values program the width and height of the resolved surface.  In the base case,
//   DSTWIDTH  = color surface width
//   DSTHEIGHT = color sufrace height
//   DSTS      = resolve surface format bpp * DSTWIDTH
//
//  The vcaa engine technically supports DSTX and DSTY (like its cousin SRCX and SRCY).  This was not
//  requested by the original RFE by SW during the initial design.
//
//  [pseudo_code]
//     resolve_surface_start_address_put = pcurctx->regs.rG2DSTBA.uDSTBA() +
//       (pcurctx->regs.rG2DSTPS.uDSTX() * resolve_surface_color_depth) +
//       (pcurctx->regs.rG2DSTPS.uDSTY() * resolve_surface_color_stride);
//
//
// (5) Resolving a pixel
//
//   The coverage surface is a 8 bits per pixel surface (C4X4).  The surface is initialized to all 1s by 3d.
//
//   For a given pixel, we need to look up 4 bits of coverage data.
//   If the data is 0xf, the pixel does not need to be resolved.
//   Otherwise, we need to reblend the pixel with certain weightings of its neighbors (i.e. we're on the edge of some geometry)
//
//   If any coverage bits is 0, we need to resolve the color.  To do so, we calculate the following eqn:
//   color_new = (
//                 20*color_old +
//                 27*(
//                     ((cover_down  == 0) ? color_down  : color_old) +
//                     ((cover_right == 0) ? color_right : color_old) +
//                     ((cover_left  == 0) ? color_left  : color_old) +
//                     ((cover_up    == 0) ? color_up    : color_old)
//                     )
//               ) / 128;
//
//   If coverage bit == 0, then we use the neighbor color value in the resolve
//   If coverage bit == 1, then we use the center   color value in the resolve
//
//   The resolve is done on a per channel (r/g/b/a) basis:
//     format convert input channel to 8-bit
//     perform resolve equation above
//     format convert to output format
//
//   For the resolution of the alpha channel:
//     In B5G6R5:   no alpha information.  do nothing.
//     In A1B5G5R5: no resolve.  keep the source color alpha bit.
//     In R8G8B8A8: normal 8-bit channel resolve
//
// (6) Resolving a pixel on the edge
//
//    When on an edge, the vcaa engine treats the coverage bit as a 1.  Use the center color value.
//    This holds true even on the edge of the sub-surface resolve window when located in the middle of the larger surface
//
// (7) Maximum dimensions
//
//    The maximum resolve sub-surface is 4096 pixels wide.
//
// (8) Surface restrictions
//    The VCAA engine has the following restrictions w.r.t input surfaces
//      - input base address is 128-bit memory word aligned
//      - input stride is multiple of 128-bits (16 bytes)
//    The VCAA engine has the following restrictions w.r.t output surfaces
//      - output base address is 128-bit memory word aligned
//      - output stride is multiple of 128-bits (16 bytes)
// (9) Coverage surface layout
//    The surface is C4X4.  doc/<previous projects>/3d/qrast_sides.vsd/qrast_arch.doc/qrast_vcaa.doc has a wealth of info.
//
//    Surface layout (C4X4)
//    =====================
//
//       (lsb2msb)  C0_C1_C2_C3_X_X_X_X     (X is a don't care.  Qrast inits to 1)
//       (msb2lsb)  X_X_X_X_C3_C2_C1_C0
//
//
//     +          o          o
//          C0
//             C1   Cov(0,1)
//        C2
//          C3
//     o          o          o
//
//       Cov(1,0)   Cov(1,1)
//
//     o          o          o
//
//
//     +/o = pixel centers
//
//     In the example above,
//        Cov(0,0) = X_X_X_X_C3_C2_C1_C0
//        C3       = V_C3(Cov(0,0));
//        ..         ..
//        C0       = V_C0(Cov(0,0));
//     #define V_C3(bits) (bits & 0x8)
//     #define V_C2(bits) (bits & 0x4)
//     #define V_C1(bits) (bits & 0x2)
//     #define V_C0(bits) (bits & 0x1)
//
//    Resolving a pixel
//    =================
//     In an ideal world, the coverage would be simply laid out such that when resolving Pixel(x,y), we would
//    need only to fetch Cov(x,y) to get all 4 bits of information.
//     In actuality, the coverage surface was rearranged to help qrast in performance.  To resolve Pixel(x,y)
//    gr2d has to fetch 4 C4X4 bytes [Cov(x,y), Cov(x-1,y), Cov(x,y-1), Cov(x-1,y-1)].  From each C4X4 byte, it
//    extracts one bit which is used in the resolve equations shown in (5).
//
//
//    Need the logical vcaa bits (DRLU) for blend which is spread across four C4X4 coverage bytes
//
//          U
//    L
//        o
//            R
//      D
//
//    where
//
//     o = Pixel(x,y)
//     D = V_C1(Cov(x-1,y))
//     R = V_C0(Cov(x,y))
//     L = V_C3(Cov(x-1,y-1))
//     U = V_C2(Cov(x,y-1))
//
//
// (10) Other documentation
//       cmod/g2/fsim/g2vcaa.cpp - cmodel implementation with comments
//       doc/<previous projects>/3d/qrast_sides.vsd/qrast_arch.doc/qrast_vcaa.doc
//

// Register G2SB_CTX7_G2CONTROLMAIN_0  //{host,2d,sb,index=1f}
#define G2SB_CTX7_G2CONTROLMAIN_0                       _MK_ADDR_CONST(0xa01f)
#define G2SB_CTX7_G2CONTROLMAIN_0_SECURE                        0x0
#define G2SB_CTX7_G2CONTROLMAIN_0_WORD_COUNT                    0x1
#define G2SB_CTX7_G2CONTROLMAIN_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_RESET_MASK                    _MK_MASK_CONST(0x7eccffff)
#define G2SB_CTX7_G2CONTROLMAIN_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_READ_MASK                     _MK_MASK_CONST(0x7fffffff)
#define G2SB_CTX7_G2CONTROLMAIN_0_WRITE_MASK                    _MK_MASK_CONST(0x7fffffff)
// Command Type:  00=BitBlt
// 01=Line Draw
// 10=VCAA
// 11=reserved
//  When the raise command is in executing
//  (there are no other outstanding commands with same channel being executed)
#define G2SB_CTX7_G2CONTROLMAIN_0_CMDT_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2CONTROLMAIN_0_CMDT_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX7_G2CONTROLMAIN_0_CMDT_SHIFT)
#define G2SB_CTX7_G2CONTROLMAIN_0_CMDT_RANGE                    1:0
#define G2SB_CTX7_G2CONTROLMAIN_0_CMDT_WOFFSET                  0x0
#define G2SB_CTX7_G2CONTROLMAIN_0_CMDT_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_CMDT_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX7_G2CONTROLMAIN_0_CMDT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_CMDT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_CMDT_BITBLT                   _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLMAIN_0_CMDT_LINEDRAW                 _MK_ENUM_CONST(1)
#define G2SB_CTX7_G2CONTROLMAIN_0_CMDT_VCAA                     _MK_ENUM_CONST(2)
#define G2SB_CTX7_G2CONTROLMAIN_0_CMDT_RESERVED1                        _MK_ENUM_CONST(3)

//fast fill rectangle in 128bit/clock
//Some limitaions with this mode:
//srcsld==1 rop==0xcc, no clipping, no transparency
//xdir==0, ydir==0, flip==0, xytdw==0
//Results are undefined if the above limitations are not satified.
#define G2SB_CTX7_G2CONTROLMAIN_0_TURBOFILL_SHIFT                       _MK_SHIFT_CONST(2)
#define G2SB_CTX7_G2CONTROLMAIN_0_TURBOFILL_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLMAIN_0_TURBOFILL_SHIFT)
#define G2SB_CTX7_G2CONTROLMAIN_0_TURBOFILL_RANGE                       2:2
#define G2SB_CTX7_G2CONTROLMAIN_0_TURBOFILL_WOFFSET                     0x0
#define G2SB_CTX7_G2CONTROLMAIN_0_TURBOFILL_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_TURBOFILL_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLMAIN_0_TURBOFILL_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_TURBOFILL_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//Command finish timing bit 0: 2D command finishs when last data has been pushed to memory write client.
// 1: 2D command waits memory write client to be idle to finish.
#define G2SB_CTX7_G2CONTROLMAIN_0_TEST0BIT_SHIFT                        _MK_SHIFT_CONST(3)
#define G2SB_CTX7_G2CONTROLMAIN_0_TEST0BIT_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLMAIN_0_TEST0BIT_SHIFT)
#define G2SB_CTX7_G2CONTROLMAIN_0_TEST0BIT_RANGE                        3:3
#define G2SB_CTX7_G2CONTROLMAIN_0_TEST0BIT_WOFFSET                      0x0
#define G2SB_CTX7_G2CONTROLMAIN_0_TEST0BIT_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_TEST0BIT_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLMAIN_0_TEST0BIT_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_TEST0BIT_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_TEST0BIT_DISABLE                      _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLMAIN_0_TEST0BIT_ENABLE                       _MK_ENUM_CONST(1)

// BitBlt Source Copy Fade enable, 1=enable (share with mltln), only support
//  16bpp mode
#define G2SB_CTX7_G2CONTROLMAIN_0_FADEN_SHIFT                   _MK_SHIFT_CONST(4)
#define G2SB_CTX7_G2CONTROLMAIN_0_FADEN_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLMAIN_0_FADEN_SHIFT)
#define G2SB_CTX7_G2CONTROLMAIN_0_FADEN_RANGE                   4:4
#define G2SB_CTX7_G2CONTROLMAIN_0_FADEN_WOFFSET                 0x0
#define G2SB_CTX7_G2CONTROLMAIN_0_FADEN_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_FADEN_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLMAIN_0_FADEN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_FADEN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_FADEN_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLMAIN_0_FADEN_ENABLE                  _MK_ENUM_CONST(1)

// BitBlt Alpha Blending, 1=enable. 0=disable,
//when both Faden and alpen are 1, output=Source*alpha_v + fadoff,
// alpha_v is decided by alptype
#define G2SB_CTX7_G2CONTROLMAIN_0_ALPEN_SHIFT                   _MK_SHIFT_CONST(5)
#define G2SB_CTX7_G2CONTROLMAIN_0_ALPEN_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLMAIN_0_ALPEN_SHIFT)
#define G2SB_CTX7_G2CONTROLMAIN_0_ALPEN_RANGE                   5:5
#define G2SB_CTX7_G2CONTROLMAIN_0_ALPEN_WOFFSET                 0x0
#define G2SB_CTX7_G2CONTROLMAIN_0_ALPEN_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_ALPEN_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLMAIN_0_ALPEN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_ALPEN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// BitBlt Solid Source Color Fill: 1=enable. FGC will be used as
// the color value.
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCSLD_SHIFT                  _MK_SHIFT_CONST(6)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCSLD_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLMAIN_0_SRCSLD_SHIFT)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCSLD_RANGE                  6:6
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCSLD_WOFFSET                        0x0
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCSLD_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCSLD_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCSLD_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCSLD_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCSLD_DISABLE                        _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCSLD_ENABLE                 _MK_ENUM_CONST(1)

// BitBlt Solid Pattern Fill: 1=enable. BGC will be used as
// the color value.
#define G2SB_CTX7_G2CONTROLMAIN_0_PATSLD_SHIFT                  _MK_SHIFT_CONST(7)
#define G2SB_CTX7_G2CONTROLMAIN_0_PATSLD_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLMAIN_0_PATSLD_SHIFT)
#define G2SB_CTX7_G2CONTROLMAIN_0_PATSLD_RANGE                  7:7
#define G2SB_CTX7_G2CONTROLMAIN_0_PATSLD_WOFFSET                        0x0
#define G2SB_CTX7_G2CONTROLMAIN_0_PATSLD_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_PATSLD_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLMAIN_0_PATSLD_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_PATSLD_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_PATSLD_DISABLE                        _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLMAIN_0_PATSLD_ENABLE                 _MK_ENUM_CONST(1)

// When mono pattern is set, we use mono tile pattern fill.
//
//  current pattern client can support a 16x16 bit tile which can be used
//  to generate a larger surface (i.e. tile this surface in the x and y direction)
//  The tile is stored in memory.  Currently, PATXO and PATYO tell you where
//  to start in the 16x16 tile when expanding the monochrome data.
//
//  See patxo and patyo comments below for programming (hw bid 247332)
//   When xdir==1
//     Patxo = pattern width - (patxo+destination width)&0xF   -- For xoffsets
//  y offsets PATYO remains the same when xdir/ydir change.
//
//
//  How the tile replication pattern looks based on xdir/ydir (without programming patxo above):
//
//  xdir=0 ydir=0              xdir=1 ydir=0
//
//   +---+--+                  +--+---+
//   |^|^|^||                  ||^|^|^|
//   |~~~|~~|                  |~~|~~~|
//   +---+--|                  |--+---+
//   |^|^|^||                  ||^|^|^|
//   +------+                  +------+
//
//
//   +---+--+                  +--+---+
//   |^|^|^||                  ||^|^|^|
//   |~~~|~~|                  |~~|~~~|
//   +---+--|                  |--+---+
//   |^|^|^||                  ||^|^|^|
//   +------+                  +------+
//    //
//  xdir=0 ydir=1              xdir=1 ydir=1
//
//   Mono tile is
//      +---+
//      |^|^|
//      |~~~|
//      +---+
//
//
#define G2SB_CTX7_G2CONTROLMAIN_0_PATFL_SHIFT                   _MK_SHIFT_CONST(8)
#define G2SB_CTX7_G2CONTROLMAIN_0_PATFL_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLMAIN_0_PATFL_SHIFT)
#define G2SB_CTX7_G2CONTROLMAIN_0_PATFL_RANGE                   8:8
#define G2SB_CTX7_G2CONTROLMAIN_0_PATFL_WOFFSET                 0x0
#define G2SB_CTX7_G2CONTROLMAIN_0_PATFL_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_PATFL_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLMAIN_0_PATFL_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_PATFL_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_PATFL_DISABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLMAIN_0_PATFL_ENABLE                  _MK_ENUM_CONST(1)

//  0=incrementing, 1=decrementing.
//  xdir should not be set when source surface has different color depth as destination surface.
//  e.g. ALPTYPE=PLS8BX (32bpp blending with 16bpp), xdir has to be 0
//  SRCCD==0 (mono src) OR PATCD==0 (mono pat), xdir has to be 0
#define G2SB_CTX7_G2CONTROLMAIN_0_XDIR_SHIFT                    _MK_SHIFT_CONST(9)
#define G2SB_CTX7_G2CONTROLMAIN_0_XDIR_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLMAIN_0_XDIR_SHIFT)
#define G2SB_CTX7_G2CONTROLMAIN_0_XDIR_RANGE                    9:9
#define G2SB_CTX7_G2CONTROLMAIN_0_XDIR_WOFFSET                  0x0
#define G2SB_CTX7_G2CONTROLMAIN_0_XDIR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_XDIR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLMAIN_0_XDIR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_XDIR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//  0=incrementing, 1=decrementing.
//  ydir should not be set when source surface has different color depth as destination surface.
//  SRCCD==0 (mono src) OR PATCD==0 (mono pat), ydir has to be 0
#define G2SB_CTX7_G2CONTROLMAIN_0_YDIR_SHIFT                    _MK_SHIFT_CONST(10)
#define G2SB_CTX7_G2CONTROLMAIN_0_YDIR_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLMAIN_0_YDIR_SHIFT)
#define G2SB_CTX7_G2CONTROLMAIN_0_YDIR_RANGE                    10:10
#define G2SB_CTX7_G2CONTROLMAIN_0_YDIR_WOFFSET                  0x0
#define G2SB_CTX7_G2CONTROLMAIN_0_YDIR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_YDIR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLMAIN_0_YDIR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_YDIR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// xy transpose,
// Line stride DSTS has to be 16bytes aligned if enabled.
// If XYTDW==1, ROP can not include destination.
#define G2SB_CTX7_G2CONTROLMAIN_0_XYTDW_SHIFT                   _MK_SHIFT_CONST(11)
#define G2SB_CTX7_G2CONTROLMAIN_0_XYTDW_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLMAIN_0_XYTDW_SHIFT)
#define G2SB_CTX7_G2CONTROLMAIN_0_XYTDW_RANGE                   11:11
#define G2SB_CTX7_G2CONTROLMAIN_0_XYTDW_WOFFSET                 0x0
#define G2SB_CTX7_G2CONTROLMAIN_0_XYTDW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_XYTDW_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLMAIN_0_XYTDW_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_XYTDW_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Source Data is in Pack Mode.
//  SRCLNGAP in G2SRCPACK is the line gap for source packed mode.
//  If(SRCPACK && ~SRCSEL), source data is packed and from screen, SRCMONOW/SRCMONOH
//  should be programmed properly to fetch data from
//  frame buffer.
//  Note, PACK is not offically supported when the surface is tiled.
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCPACK_SHIFT                 _MK_SHIFT_CONST(12)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCPACK_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLMAIN_0_SRCPACK_SHIFT)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCPACK_RANGE                 12:12
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCPACK_WOFFSET                       0x0
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCPACK_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCPACK_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCPACK_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCPACK_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCPACK_DISABLE                       _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCPACK_ENABLE                        _MK_ENUM_CONST(1)

// Pattern Data is in Pack Mode.
//  PATLNGAP in G2PATPACK is the line gap for pattern packed mode
//  If(PATPACK && ~PATSEl), pattern data is packed and from screen, PATMONOW/PATMONOH
//  should be programmed properly to fetch pattern data from
//  frame buffer.
//  Note, PACK is not offically supported when the surface is tiled.
#define G2SB_CTX7_G2CONTROLMAIN_0_PATPACK_SHIFT                 _MK_SHIFT_CONST(13)
#define G2SB_CTX7_G2CONTROLMAIN_0_PATPACK_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLMAIN_0_PATPACK_SHIFT)
#define G2SB_CTX7_G2CONTROLMAIN_0_PATPACK_RANGE                 13:13
#define G2SB_CTX7_G2CONTROLMAIN_0_PATPACK_WOFFSET                       0x0
#define G2SB_CTX7_G2CONTROLMAIN_0_PATPACK_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_PATPACK_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLMAIN_0_PATPACK_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_PATPACK_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_PATPACK_DISABLE                       _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLMAIN_0_PATPACK_ENABLE                        _MK_ENUM_CONST(1)

// flip y direction to make image upside down or the other way.
// If YFLIP==1, ROP can not include destination.
#define G2SB_CTX7_G2CONTROLMAIN_0_YFLIP_SHIFT                   _MK_SHIFT_CONST(14)
#define G2SB_CTX7_G2CONTROLMAIN_0_YFLIP_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLMAIN_0_YFLIP_SHIFT)
#define G2SB_CTX7_G2CONTROLMAIN_0_YFLIP_RANGE                   14:14
#define G2SB_CTX7_G2CONTROLMAIN_0_YFLIP_WOFFSET                 0x0
#define G2SB_CTX7_G2CONTROLMAIN_0_YFLIP_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_YFLIP_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLMAIN_0_YFLIP_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_YFLIP_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_YFLIP_DSIABLE                 _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLMAIN_0_YFLIP_ENABLE                  _MK_ENUM_CONST(1)

// Source Data Select:
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCSEL_SHIFT                  _MK_SHIFT_CONST(15)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCSEL_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLMAIN_0_SRCSEL_SHIFT)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCSEL_RANGE                  15:15
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCSEL_WOFFSET                        0x0
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCSEL_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCSEL_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCSEL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCSEL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCSEL_SCREEN                 _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCSEL_MEMORY                 _MK_ENUM_CONST(1)

// Destination color depth:
//   00=8-bpp, 01=16-bpp, 10=32-bpp. 11=reserved
#define G2SB_CTX7_G2CONTROLMAIN_0_DSTCD_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX7_G2CONTROLMAIN_0_DSTCD_FIELD                   (_MK_MASK_CONST(0x3) << G2SB_CTX7_G2CONTROLMAIN_0_DSTCD_SHIFT)
#define G2SB_CTX7_G2CONTROLMAIN_0_DSTCD_RANGE                   17:16
#define G2SB_CTX7_G2CONTROLMAIN_0_DSTCD_WOFFSET                 0x0
#define G2SB_CTX7_G2CONTROLMAIN_0_DSTCD_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_DSTCD_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_DSTCD_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_DSTCD_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_DSTCD_BPP8                    _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLMAIN_0_DSTCD_BPP16                   _MK_ENUM_CONST(1)
#define G2SB_CTX7_G2CONTROLMAIN_0_DSTCD_BPP32                   _MK_ENUM_CONST(2)
#define G2SB_CTX7_G2CONTROLMAIN_0_DSTCD_RESERVED3                       _MK_ENUM_CONST(3)

// Destination read transparency enable:
//   0x=destination read transparency disabled
//   10=color destination read transparency
//   11=inverse color destination read transparency.
// 20 rw INIC
// Initiate Command
// (1=initiate command immediately, 0=wait for launch write)
#define G2SB_CTX7_G2CONTROLMAIN_0_DSTT_SHIFT                    _MK_SHIFT_CONST(18)
#define G2SB_CTX7_G2CONTROLMAIN_0_DSTT_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX7_G2CONTROLMAIN_0_DSTT_SHIFT)
#define G2SB_CTX7_G2CONTROLMAIN_0_DSTT_RANGE                    19:18
#define G2SB_CTX7_G2CONTROLMAIN_0_DSTT_WOFFSET                  0x0
#define G2SB_CTX7_G2CONTROLMAIN_0_DSTT_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_DSTT_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX7_G2CONTROLMAIN_0_DSTT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_DSTT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//0 Source mono
//1 Source has same color depth as destination
//  SRCCD==0 xdir/ydir has to be 0
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCCD_SHIFT                   _MK_SHIFT_CONST(20)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCCD_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLMAIN_0_SRCCD_SHIFT)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCCD_RANGE                   20:20
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCCD_WOFFSET                 0x0
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCCD_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCCD_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCCD_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCCD_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Start from Msb or lsb in byte when mono expansion
// If HLMONO is 1, bit 0 (the lsb) is the first bit
// If HLMONO is 0, bit 7 (the msb) is the first bit
#define G2SB_CTX7_G2CONTROLMAIN_0_HLMONO_SHIFT                  _MK_SHIFT_CONST(21)
#define G2SB_CTX7_G2CONTROLMAIN_0_HLMONO_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLMAIN_0_HLMONO_SHIFT)
#define G2SB_CTX7_G2CONTROLMAIN_0_HLMONO_RANGE                  21:21
#define G2SB_CTX7_G2CONTROLMAIN_0_HLMONO_WOFFSET                        0x0
#define G2SB_CTX7_G2CONTROLMAIN_0_HLMONO_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_HLMONO_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_HLMONO_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_HLMONO_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Source transparency enable: 0x=source transparency disabled,
// 10=mono source background transparency
//    or color source transparency,
// 11=mono source foreground transparency
//    or inverse color source transparency.
// NOTE: When source transparency is enabled and SRCCD==0(mono)
//       SRCBGC!=SRCFGC should be satisfied.
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCT_SHIFT                    _MK_SHIFT_CONST(22)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCT_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX7_G2CONTROLMAIN_0_SRCT_SHIFT)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCT_RANGE                    23:22
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCT_WOFFSET                  0x0
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCT_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCT_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Source base address select:
//  0=srcba, 1=dstba. This is not used for Line Draw and
// if source data comes from host memory.
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCBAS_SHIFT                  _MK_SHIFT_CONST(24)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCBAS_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLMAIN_0_SRCBAS_SHIFT)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCBAS_RANGE                  24:24
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCBAS_WOFFSET                        0x0
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCBAS_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCBAS_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCBAS_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCBAS_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//Display Switching Window Control (GCSW[1:0])
//This parameter controls multi-buffering for Display.
//x0 At end of current command, don't send signal to Display to switch buffer.
//01 two buffers, dstba and dstba_b are used
//11 three buffers, dstba, dstba_b dstba_c are used
#define G2SB_CTX7_G2CONTROLMAIN_0_GCSW_SHIFT                    _MK_SHIFT_CONST(25)
#define G2SB_CTX7_G2CONTROLMAIN_0_GCSW_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_CTX7_G2CONTROLMAIN_0_GCSW_SHIFT)
#define G2SB_CTX7_G2CONTROLMAIN_0_GCSW_RANGE                    26:25
#define G2SB_CTX7_G2CONTROLMAIN_0_GCSW_WOFFSET                  0x0
#define G2SB_CTX7_G2CONTROLMAIN_0_GCSW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_GCSW_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_CTX7_G2CONTROLMAIN_0_GCSW_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_GCSW_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//source direct addressing
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCDIR_SHIFT                  _MK_SHIFT_CONST(27)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCDIR_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLMAIN_0_SRCDIR_SHIFT)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCDIR_RANGE                  27:27
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCDIR_WOFFSET                        0x0
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCDIR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCDIR_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCDIR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_SRCDIR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//destination direct addressing
#define G2SB_CTX7_G2CONTROLMAIN_0_DSTDIR_SHIFT                  _MK_SHIFT_CONST(28)
#define G2SB_CTX7_G2CONTROLMAIN_0_DSTDIR_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLMAIN_0_DSTDIR_SHIFT)
#define G2SB_CTX7_G2CONTROLMAIN_0_DSTDIR_RANGE                  28:28
#define G2SB_CTX7_G2CONTROLMAIN_0_DSTDIR_WOFFSET                        0x0
#define G2SB_CTX7_G2CONTROLMAIN_0_DSTDIR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_DSTDIR_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLMAIN_0_DSTDIR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_DSTDIR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// This feature is not offically supported.
//seperate destination read/write surface address
//0: read/write use DSTBA
//1: read uses SRCBA_B, write uses DSTBA
#define G2SB_CTX7_G2CONTROLMAIN_0_DST_RD_WR_SEP_SHIFT                   _MK_SHIFT_CONST(29)
#define G2SB_CTX7_G2CONTROLMAIN_0_DST_RD_WR_SEP_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLMAIN_0_DST_RD_WR_SEP_SHIFT)
#define G2SB_CTX7_G2CONTROLMAIN_0_DST_RD_WR_SEP_RANGE                   29:29
#define G2SB_CTX7_G2CONTROLMAIN_0_DST_RD_WR_SEP_WOFFSET                 0x0
#define G2SB_CTX7_G2CONTROLMAIN_0_DST_RD_WR_SEP_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_DST_RD_WR_SEP_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLMAIN_0_DST_RD_WR_SEP_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_DST_RD_WR_SEP_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// pattern Data Select: SRCSEL and PATSEL can't be both enabled.
#define G2SB_CTX7_G2CONTROLMAIN_0_PATSEL_SHIFT                  _MK_SHIFT_CONST(30)
#define G2SB_CTX7_G2CONTROLMAIN_0_PATSEL_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CONTROLMAIN_0_PATSEL_SHIFT)
#define G2SB_CTX7_G2CONTROLMAIN_0_PATSEL_RANGE                  30:30
#define G2SB_CTX7_G2CONTROLMAIN_0_PATSEL_WOFFSET                        0x0
#define G2SB_CTX7_G2CONTROLMAIN_0_PATSEL_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_PATSEL_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CONTROLMAIN_0_PATSEL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_PATSEL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CONTROLMAIN_0_PATSEL_SCREEN                 _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CONTROLMAIN_0_PATSEL_MEMORY                 _MK_ENUM_CONST(1)


// Register G2SB_CTX7_G2ROPFADE_0  //{host,2d,index=20}
#define G2SB_CTX7_G2ROPFADE_0                   _MK_ADDR_CONST(0xa020)
#define G2SB_CTX7_G2ROPFADE_0_SECURE                    0x0
#define G2SB_CTX7_G2ROPFADE_0_WORD_COUNT                        0x1
#define G2SB_CTX7_G2ROPFADE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2ROPFADE_0_RESET_MASK                        _MK_MASK_CONST(0xff)
#define G2SB_CTX7_G2ROPFADE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2ROPFADE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2ROPFADE_0_READ_MASK                         _MK_MASK_CONST(0xffff00ff)
#define G2SB_CTX7_G2ROPFADE_0_WRITE_MASK                        _MK_MASK_CONST(0xffff00ff)
//If YFLIP==1 or XYTDW==1, ROP can not include destination.
//Since destination may have been corrupted before reading out.
#define G2SB_CTX7_G2ROPFADE_0_ROP_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2ROPFADE_0_ROP_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_CTX7_G2ROPFADE_0_ROP_SHIFT)
#define G2SB_CTX7_G2ROPFADE_0_ROP_RANGE                 7:0
#define G2SB_CTX7_G2ROPFADE_0_ROP_WOFFSET                       0x0
#define G2SB_CTX7_G2ROPFADE_0_ROP_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2ROPFADE_0_ROP_DEFAULT_MASK                  _MK_MASK_CONST(0xff)
#define G2SB_CTX7_G2ROPFADE_0_ROP_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2ROPFADE_0_ROP_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//
#define G2SB_CTX7_G2ROPFADE_0_FADCOE_SHIFT                      _MK_SHIFT_CONST(16)
#define G2SB_CTX7_G2ROPFADE_0_FADCOE_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX7_G2ROPFADE_0_FADCOE_SHIFT)
#define G2SB_CTX7_G2ROPFADE_0_FADCOE_RANGE                      23:16
#define G2SB_CTX7_G2ROPFADE_0_FADCOE_WOFFSET                    0x0
#define G2SB_CTX7_G2ROPFADE_0_FADCOE_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2ROPFADE_0_FADCOE_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2ROPFADE_0_FADCOE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2ROPFADE_0_FADCOE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

//
#define G2SB_CTX7_G2ROPFADE_0_FADOFF_SHIFT                      _MK_SHIFT_CONST(24)
#define G2SB_CTX7_G2ROPFADE_0_FADOFF_FIELD                      (_MK_MASK_CONST(0xff) << G2SB_CTX7_G2ROPFADE_0_FADOFF_SHIFT)
#define G2SB_CTX7_G2ROPFADE_0_FADOFF_RANGE                      31:24
#define G2SB_CTX7_G2ROPFADE_0_FADOFF_WOFFSET                    0x0
#define G2SB_CTX7_G2ROPFADE_0_FADOFF_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2ROPFADE_0_FADOFF_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2ROPFADE_0_FADOFF_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2ROPFADE_0_FADOFF_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2ALPHABLEND_0  //{2d,index=21}
#define G2SB_CTX7_G2ALPHABLEND_0                        _MK_ADDR_CONST(0xa021)
#define G2SB_CTX7_G2ALPHABLEND_0_SECURE                         0x0
#define G2SB_CTX7_G2ALPHABLEND_0_WORD_COUNT                     0x1
#define G2SB_CTX7_G2ALPHABLEND_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2ALPHABLEND_0_RESET_MASK                     _MK_MASK_CONST(0x100)
#define G2SB_CTX7_G2ALPHABLEND_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2ALPHABLEND_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2ALPHABLEND_0_READ_MASK                      _MK_MASK_CONST(0xffff01ff)
#define G2SB_CTX7_G2ALPHABLEND_0_WRITE_MASK                     _MK_MASK_CONST(0xffff01ff)
#define G2SB_CTX7_G2ALPHABLEND_0_ALPHA_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2ALPHABLEND_0_ALPHA_FIELD                    (_MK_MASK_CONST(0xff) << G2SB_CTX7_G2ALPHABLEND_0_ALPHA_SHIFT)
#define G2SB_CTX7_G2ALPHABLEND_0_ALPHA_RANGE                    7:0
#define G2SB_CTX7_G2ALPHABLEND_0_ALPHA_WOFFSET                  0x0
#define G2SB_CTX7_G2ALPHABLEND_0_ALPHA_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2ALPHABLEND_0_ALPHA_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2ALPHABLEND_0_ALPHA_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2ALPHABLEND_0_ALPHA_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

#define G2SB_CTX7_G2ALPHABLEND_0_ALPHAINV_SHIFT                 _MK_SHIFT_CONST(8)
#define G2SB_CTX7_G2ALPHABLEND_0_ALPHAINV_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2ALPHABLEND_0_ALPHAINV_SHIFT)
#define G2SB_CTX7_G2ALPHABLEND_0_ALPHAINV_RANGE                 8:8
#define G2SB_CTX7_G2ALPHABLEND_0_ALPHAINV_WOFFSET                       0x0
#define G2SB_CTX7_G2ALPHABLEND_0_ALPHAINV_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2ALPHABLEND_0_ALPHAINV_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2ALPHABLEND_0_ALPHAINV_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2ALPHABLEND_0_ALPHAINV_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

#define G2SB_CTX7_G2ALPHABLEND_0_ALPHA0V_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX7_G2ALPHABLEND_0_ALPHA0V_FIELD                  (_MK_MASK_CONST(0xff) << G2SB_CTX7_G2ALPHABLEND_0_ALPHA0V_SHIFT)
#define G2SB_CTX7_G2ALPHABLEND_0_ALPHA0V_RANGE                  23:16
#define G2SB_CTX7_G2ALPHABLEND_0_ALPHA0V_WOFFSET                        0x0
#define G2SB_CTX7_G2ALPHABLEND_0_ALPHA0V_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2ALPHABLEND_0_ALPHA0V_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2ALPHABLEND_0_ALPHA0V_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2ALPHABLEND_0_ALPHA0V_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX7_G2ALPHABLEND_0_ALPHA1V_SHIFT                  _MK_SHIFT_CONST(24)
#define G2SB_CTX7_G2ALPHABLEND_0_ALPHA1V_FIELD                  (_MK_MASK_CONST(0xff) << G2SB_CTX7_G2ALPHABLEND_0_ALPHA1V_SHIFT)
#define G2SB_CTX7_G2ALPHABLEND_0_ALPHA1V_RANGE                  31:24
#define G2SB_CTX7_G2ALPHABLEND_0_ALPHA1V_WOFFSET                        0x0
#define G2SB_CTX7_G2ALPHABLEND_0_ALPHA1V_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2ALPHABLEND_0_ALPHA1V_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2ALPHABLEND_0_ALPHA1V_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2ALPHABLEND_0_ALPHA1V_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// ClipRect Methods
// top-left bounds are inclusive

// Register G2SB_CTX7_G2CLIPLEFTTOP_0  //{2d,index=22}
#define G2SB_CTX7_G2CLIPLEFTTOP_0                       _MK_ADDR_CONST(0xa022)
#define G2SB_CTX7_G2CLIPLEFTTOP_0_SECURE                        0x0
#define G2SB_CTX7_G2CLIPLEFTTOP_0_WORD_COUNT                    0x1
#define G2SB_CTX7_G2CLIPLEFTTOP_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLIPLEFTTOP_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLIPLEFTTOP_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLIPLEFTTOP_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLIPLEFTTOP_0_READ_MASK                     _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX7_G2CLIPLEFTTOP_0_WRITE_MASK                    _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX7_G2CLIPLEFTTOP_0_CLIPL_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2CLIPLEFTTOP_0_CLIPL_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX7_G2CLIPLEFTTOP_0_CLIPL_SHIFT)
#define G2SB_CTX7_G2CLIPLEFTTOP_0_CLIPL_RANGE                   14:0
#define G2SB_CTX7_G2CLIPLEFTTOP_0_CLIPL_WOFFSET                 0x0
#define G2SB_CTX7_G2CLIPLEFTTOP_0_CLIPL_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLIPLEFTTOP_0_CLIPL_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLIPLEFTTOP_0_CLIPL_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLIPLEFTTOP_0_CLIPL_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

#define G2SB_CTX7_G2CLIPLEFTTOP_0_CLIPT_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX7_G2CLIPLEFTTOP_0_CLIPT_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX7_G2CLIPLEFTTOP_0_CLIPT_SHIFT)
#define G2SB_CTX7_G2CLIPLEFTTOP_0_CLIPT_RANGE                   30:16
#define G2SB_CTX7_G2CLIPLEFTTOP_0_CLIPT_WOFFSET                 0x0
#define G2SB_CTX7_G2CLIPLEFTTOP_0_CLIPT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLIPLEFTTOP_0_CLIPT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLIPLEFTTOP_0_CLIPT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLIPLEFTTOP_0_CLIPT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// bottom-right bounds are exclusive

// Register G2SB_CTX7_G2CLIPRIGHTBOT_0  //{2d,index=23}
#define G2SB_CTX7_G2CLIPRIGHTBOT_0                      _MK_ADDR_CONST(0xa023)
#define G2SB_CTX7_G2CLIPRIGHTBOT_0_SECURE                       0x0
#define G2SB_CTX7_G2CLIPRIGHTBOT_0_WORD_COUNT                   0x1
#define G2SB_CTX7_G2CLIPRIGHTBOT_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLIPRIGHTBOT_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLIPRIGHTBOT_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLIPRIGHTBOT_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLIPRIGHTBOT_0_READ_MASK                    _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX7_G2CLIPRIGHTBOT_0_WRITE_MASK                   _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX7_G2CLIPRIGHTBOT_0_CLIPR_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2CLIPRIGHTBOT_0_CLIPR_FIELD                  (_MK_MASK_CONST(0x7fff) << G2SB_CTX7_G2CLIPRIGHTBOT_0_CLIPR_SHIFT)
#define G2SB_CTX7_G2CLIPRIGHTBOT_0_CLIPR_RANGE                  14:0
#define G2SB_CTX7_G2CLIPRIGHTBOT_0_CLIPR_WOFFSET                        0x0
#define G2SB_CTX7_G2CLIPRIGHTBOT_0_CLIPR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLIPRIGHTBOT_0_CLIPR_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLIPRIGHTBOT_0_CLIPR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLIPRIGHTBOT_0_CLIPR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX7_G2CLIPRIGHTBOT_0_CLIPB_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX7_G2CLIPRIGHTBOT_0_CLIPB_FIELD                  (_MK_MASK_CONST(0x7fff) << G2SB_CTX7_G2CLIPRIGHTBOT_0_CLIPB_SHIFT)
#define G2SB_CTX7_G2CLIPRIGHTBOT_0_CLIPB_RANGE                  30:16
#define G2SB_CTX7_G2CLIPRIGHTBOT_0_CLIPB_WOFFSET                        0x0
#define G2SB_CTX7_G2CLIPRIGHTBOT_0_CLIPB_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLIPRIGHTBOT_0_CLIPB_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLIPRIGHTBOT_0_CLIPB_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CLIPRIGHTBOT_0_CLIPB_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//pattern methods
// G2PATPACK should be used to specify the line gap
// use G2PATPACK_SIZE to program height and width
//  PACK is generally only useful with narrow monochrome surfaces
//  Note, PACK is not offically supported when the surface is tiled.

// Register G2SB_CTX7_G2PATPACK_0  //{2d,index=24} Pattern packed mode
#define G2SB_CTX7_G2PATPACK_0                   _MK_ADDR_CONST(0xa024)
#define G2SB_CTX7_G2PATPACK_0_SECURE                    0x0
#define G2SB_CTX7_G2PATPACK_0_WORD_COUNT                        0x1
#define G2SB_CTX7_G2PATPACK_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATPACK_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATPACK_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATPACK_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATPACK_0_READ_MASK                         _MK_MASK_CONST(0xf)
#define G2SB_CTX7_G2PATPACK_0_WRITE_MASK                        _MK_MASK_CONST(0xf)
// Packed mode, pattern data line gap. byte
#define G2SB_CTX7_G2PATPACK_0_PATLNGAP_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2PATPACK_0_PATLNGAP_FIELD                    (_MK_MASK_CONST(0xf) << G2SB_CTX7_G2PATPACK_0_PATLNGAP_SHIFT)
#define G2SB_CTX7_G2PATPACK_0_PATLNGAP_RANGE                    3:0
#define G2SB_CTX7_G2PATPACK_0_PATLNGAP_WOFFSET                  0x0
#define G2SB_CTX7_G2PATPACK_0_PATLNGAP_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATPACK_0_PATLNGAP_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATPACK_0_PATLNGAP_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATPACK_0_PATLNGAP_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// G2PATPACK_SIZE -- extension of G2PATPACK, this register only holds the size of the packed data
//  Note, PACK is not offically supported when the surface is tiled.

// Register G2SB_CTX7_G2PATPACK_SIZE_0  //{2d,index=25} Pattern packed mode
// Packed mode, pattern data line gap. byte
#define G2SB_CTX7_G2PATPACK_SIZE_0                      _MK_ADDR_CONST(0xa025)
#define G2SB_CTX7_G2PATPACK_SIZE_0_SECURE                       0x0
#define G2SB_CTX7_G2PATPACK_SIZE_0_WORD_COUNT                   0x1
#define G2SB_CTX7_G2PATPACK_SIZE_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATPACK_SIZE_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATPACK_SIZE_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATPACK_SIZE_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATPACK_SIZE_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2PATPACK_SIZE_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
// Mono data width in packed mode, byte
#define G2SB_CTX7_G2PATPACK_SIZE_0_PATMONOW_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2PATPACK_SIZE_0_PATMONOW_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_CTX7_G2PATPACK_SIZE_0_PATMONOW_SHIFT)
#define G2SB_CTX7_G2PATPACK_SIZE_0_PATMONOW_RANGE                       15:0
#define G2SB_CTX7_G2PATPACK_SIZE_0_PATMONOW_WOFFSET                     0x0
#define G2SB_CTX7_G2PATPACK_SIZE_0_PATMONOW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATPACK_SIZE_0_PATMONOW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATPACK_SIZE_0_PATMONOW_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATPACK_SIZE_0_PATMONOW_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//  Pattern mono data height in packed mode, byte
#define G2SB_CTX7_G2PATPACK_SIZE_0_PATMONOH_SHIFT                       _MK_SHIFT_CONST(16)
#define G2SB_CTX7_G2PATPACK_SIZE_0_PATMONOH_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_CTX7_G2PATPACK_SIZE_0_PATMONOH_SHIFT)
#define G2SB_CTX7_G2PATPACK_SIZE_0_PATMONOH_RANGE                       31:16
#define G2SB_CTX7_G2PATPACK_SIZE_0_PATMONOH_WOFFSET                     0x0
#define G2SB_CTX7_G2PATPACK_SIZE_0_PATMONOH_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATPACK_SIZE_0_PATMONOH_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATPACK_SIZE_0_PATMONOH_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATPACK_SIZE_0_PATMONOH_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2PATBA_0  //{2d,index=26}
#define G2SB_CTX7_G2PATBA_0                     _MK_ADDR_CONST(0xa026)
#define G2SB_CTX7_G2PATBA_0_SECURE                      0x0
#define G2SB_CTX7_G2PATBA_0_WORD_COUNT                  0x1
#define G2SB_CTX7_G2PATBA_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATBA_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATBA_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATBA_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATBA_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2PATBA_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// If(PATFL==1){
//   It has to be 16bytes aligned.
// }else{
//   Point to the first byte of the first pixel of pattern plane.
// }
#define G2SB_CTX7_G2PATBA_0_PATBA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2PATBA_0_PATBA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX7_G2PATBA_0_PATBA_SHIFT)
#define G2SB_CTX7_G2PATBA_0_PATBA_RANGE                 31:0
#define G2SB_CTX7_G2PATBA_0_PATBA_WOFFSET                       0x0
#define G2SB_CTX7_G2PATBA_0_PATBA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATBA_0_PATBA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATBA_0_PATBA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATBA_0_PATBA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2PATOS_0  //{2d,index=27}
#define G2SB_CTX7_G2PATOS_0                     _MK_ADDR_CONST(0xa027)
#define G2SB_CTX7_G2PATOS_0_SECURE                      0x0
#define G2SB_CTX7_G2PATOS_0_WORD_COUNT                  0x1
#define G2SB_CTX7_G2PATOS_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATOS_0_RESET_MASK                  _MK_MASK_CONST(0x600000)
#define G2SB_CTX7_G2PATOS_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATOS_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATOS_0_READ_MASK                   _MK_MASK_CONST(0xff61ffff)
#define G2SB_CTX7_G2PATOS_0_WRITE_MASK                  _MK_MASK_CONST(0xff61ffff)
//stride
#define G2SB_CTX7_G2PATOS_0_PATST_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2PATOS_0_PATST_FIELD                 (_MK_MASK_CONST(0xffff) << G2SB_CTX7_G2PATOS_0_PATST_SHIFT)
#define G2SB_CTX7_G2PATOS_0_PATST_RANGE                 15:0
#define G2SB_CTX7_G2PATOS_0_PATST_WOFFSET                       0x0
#define G2SB_CTX7_G2PATOS_0_PATST_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATOS_0_PATST_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATOS_0_PATST_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATOS_0_PATST_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//0 mono
//1 same as dstcd
//  PATCD==0 xdir/ydir has to be 0
#define G2SB_CTX7_G2PATOS_0_PATCD_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_CTX7_G2PATOS_0_PATCD_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2PATOS_0_PATCD_SHIFT)
#define G2SB_CTX7_G2PATOS_0_PATCD_RANGE                 16:16
#define G2SB_CTX7_G2PATOS_0_PATCD_WOFFSET                       0x0
#define G2SB_CTX7_G2PATOS_0_PATCD_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATOS_0_PATCD_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATOS_0_PATCD_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATOS_0_PATCD_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Mono pattern transparency enable:
// 0x=pattern transparency disabled,
// 10=mono pattern background transparency
//   or color pattern transparency,
// 11=mono pattern foreground transparency
//   or inverse color pattern transparency.
// NOTE: When pattern transparency is enabled and PATCD==0(mono)
//       PATBGC!=PATFGC should be satisfied.
#define G2SB_CTX7_G2PATOS_0_PATT_SHIFT                  _MK_SHIFT_CONST(21)
#define G2SB_CTX7_G2PATOS_0_PATT_FIELD                  (_MK_MASK_CONST(0x3) << G2SB_CTX7_G2PATOS_0_PATT_SHIFT)
#define G2SB_CTX7_G2PATOS_0_PATT_RANGE                  22:21
#define G2SB_CTX7_G2PATOS_0_PATT_WOFFSET                        0x0
#define G2SB_CTX7_G2PATOS_0_PATT_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATOS_0_PATT_DEFAULT_MASK                   _MK_MASK_CONST(0x3)
#define G2SB_CTX7_G2PATOS_0_PATT_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATOS_0_PATT_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//x offset for mono tile pattern fill.  see PATFL
#define G2SB_CTX7_G2PATOS_0_PATXO_SHIFT                 _MK_SHIFT_CONST(24)
#define G2SB_CTX7_G2PATOS_0_PATXO_FIELD                 (_MK_MASK_CONST(0xf) << G2SB_CTX7_G2PATOS_0_PATXO_SHIFT)
#define G2SB_CTX7_G2PATOS_0_PATXO_RANGE                 27:24
#define G2SB_CTX7_G2PATOS_0_PATXO_WOFFSET                       0x0
#define G2SB_CTX7_G2PATOS_0_PATXO_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATOS_0_PATXO_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATOS_0_PATXO_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATOS_0_PATXO_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//y offset for mono tile pattern fill.  see PATFL
#define G2SB_CTX7_G2PATOS_0_PATYO_SHIFT                 _MK_SHIFT_CONST(28)
#define G2SB_CTX7_G2PATOS_0_PATYO_FIELD                 (_MK_MASK_CONST(0xf) << G2SB_CTX7_G2PATOS_0_PATYO_SHIFT)
#define G2SB_CTX7_G2PATOS_0_PATYO_RANGE                 31:28
#define G2SB_CTX7_G2PATOS_0_PATYO_WOFFSET                       0x0
#define G2SB_CTX7_G2PATOS_0_PATYO_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATOS_0_PATYO_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATOS_0_PATYO_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATOS_0_PATYO_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2PATBGC_0  //{2d,index=28}
#define G2SB_CTX7_G2PATBGC_0                    _MK_ADDR_CONST(0xa028)
#define G2SB_CTX7_G2PATBGC_0_SECURE                     0x0
#define G2SB_CTX7_G2PATBGC_0_WORD_COUNT                         0x1
#define G2SB_CTX7_G2PATBGC_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATBGC_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATBGC_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATBGC_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATBGC_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2PATBGC_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2PATBGC_0_PATBGC_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2PATBGC_0_PATBGC_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX7_G2PATBGC_0_PATBGC_SHIFT)
#define G2SB_CTX7_G2PATBGC_0_PATBGC_RANGE                       31:0
#define G2SB_CTX7_G2PATBGC_0_PATBGC_WOFFSET                     0x0
#define G2SB_CTX7_G2PATBGC_0_PATBGC_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATBGC_0_PATBGC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATBGC_0_PATBGC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATBGC_0_PATBGC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2PATFGC_0  //{2d,index=29}
#define G2SB_CTX7_G2PATFGC_0                    _MK_ADDR_CONST(0xa029)
#define G2SB_CTX7_G2PATFGC_0_SECURE                     0x0
#define G2SB_CTX7_G2PATFGC_0_WORD_COUNT                         0x1
#define G2SB_CTX7_G2PATFGC_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATFGC_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATFGC_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATFGC_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATFGC_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2PATFGC_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2PATFGC_0_PATFGC_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2PATFGC_0_PATFGC_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX7_G2PATFGC_0_PATFGC_SHIFT)
#define G2SB_CTX7_G2PATFGC_0_PATFGC_RANGE                       31:0
#define G2SB_CTX7_G2PATFGC_0_PATFGC_WOFFSET                     0x0
#define G2SB_CTX7_G2PATFGC_0_PATFGC_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATFGC_0_PATFGC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATFGC_0_PATFGC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATFGC_0_PATFGC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2PATKEY_0  //{2d,index=2a}
#define G2SB_CTX7_G2PATKEY_0                    _MK_ADDR_CONST(0xa02a)
#define G2SB_CTX7_G2PATKEY_0_SECURE                     0x0
#define G2SB_CTX7_G2PATKEY_0_WORD_COUNT                         0x1
#define G2SB_CTX7_G2PATKEY_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATKEY_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATKEY_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATKEY_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATKEY_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2PATKEY_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2PATKEY_0_PATKEY_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2PATKEY_0_PATKEY_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX7_G2PATKEY_0_PATKEY_SHIFT)
#define G2SB_CTX7_G2PATKEY_0_PATKEY_RANGE                       31:0
#define G2SB_CTX7_G2PATKEY_0_PATKEY_WOFFSET                     0x0
#define G2SB_CTX7_G2PATKEY_0_PATKEY_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATKEY_0_PATKEY_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATKEY_0_PATKEY_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATKEY_0_PATKEY_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2DSTBA_0  //{host,2d,sb,index=2b}
#define G2SB_CTX7_G2DSTBA_0                     _MK_ADDR_CONST(0xa02b)
#define G2SB_CTX7_G2DSTBA_0_SECURE                      0x0
#define G2SB_CTX7_G2DSTBA_0_WORD_COUNT                  0x1
#define G2SB_CTX7_G2DSTBA_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2DSTBA_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Destination base address (byte address)
#define G2SB_CTX7_G2DSTBA_0_DSTBA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2DSTBA_0_DSTBA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX7_G2DSTBA_0_DSTBA_SHIFT)
#define G2SB_CTX7_G2DSTBA_0_DSTBA_RANGE                 31:0
#define G2SB_CTX7_G2DSTBA_0_DSTBA_WOFFSET                       0x0
#define G2SB_CTX7_G2DSTBA_0_DSTBA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_0_DSTBA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_0_DSTBA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_0_DSTBA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2DSTBA_B_0  //{host,2d,sb,index=2c}
#define G2SB_CTX7_G2DSTBA_B_0                   _MK_ADDR_CONST(0xa02c)
#define G2SB_CTX7_G2DSTBA_B_0_SECURE                    0x0
#define G2SB_CTX7_G2DSTBA_B_0_WORD_COUNT                        0x1
#define G2SB_CTX7_G2DSTBA_B_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_B_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_B_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_B_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_B_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2DSTBA_B_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// Destination base address (byte address)
// only usable in hardware trigger mode by enable gcsw
#define G2SB_CTX7_G2DSTBA_B_0_DSTBA_B_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2DSTBA_B_0_DSTBA_B_FIELD                     (_MK_MASK_CONST(0xffffffff) << G2SB_CTX7_G2DSTBA_B_0_DSTBA_B_SHIFT)
#define G2SB_CTX7_G2DSTBA_B_0_DSTBA_B_RANGE                     31:0
#define G2SB_CTX7_G2DSTBA_B_0_DSTBA_B_WOFFSET                   0x0
#define G2SB_CTX7_G2DSTBA_B_0_DSTBA_B_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_B_0_DSTBA_B_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_B_0_DSTBA_B_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_B_0_DSTBA_B_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2DSTBA_C_0  //{2d,sb,index=2d}
#define G2SB_CTX7_G2DSTBA_C_0                   _MK_ADDR_CONST(0xa02d)
#define G2SB_CTX7_G2DSTBA_C_0_SECURE                    0x0
#define G2SB_CTX7_G2DSTBA_C_0_WORD_COUNT                        0x1
#define G2SB_CTX7_G2DSTBA_C_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_C_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_C_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_C_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_C_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2DSTBA_C_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// Destination base address (byte address)
#define G2SB_CTX7_G2DSTBA_C_0_DSTBA_C_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2DSTBA_C_0_DSTBA_C_FIELD                     (_MK_MASK_CONST(0xffffffff) << G2SB_CTX7_G2DSTBA_C_0_DSTBA_C_SHIFT)
#define G2SB_CTX7_G2DSTBA_C_0_DSTBA_C_RANGE                     31:0
#define G2SB_CTX7_G2DSTBA_C_0_DSTBA_C_WOFFSET                   0x0
#define G2SB_CTX7_G2DSTBA_C_0_DSTBA_C_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_C_0_DSTBA_C_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_C_0_DSTBA_C_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_C_0_DSTBA_C_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2DSTST_0  //{host,2d,sb,sbm,index=2e}
#define G2SB_CTX7_G2DSTST_0                     _MK_ADDR_CONST(0xa02e)
#define G2SB_CTX7_G2DSTST_0_SECURE                      0x0
#define G2SB_CTX7_G2DSTST_0_WORD_COUNT                  0x1
#define G2SB_CTX7_G2DSTST_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTST_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTST_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTST_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTST_0_READ_MASK                   _MK_MASK_CONST(0xffff)
#define G2SB_CTX7_G2DSTST_0_WRITE_MASK                  _MK_MASK_CONST(0xffff)
// Destination Stride coordinate(bytes) with respect to DSTBA.
#define G2SB_CTX7_G2DSTST_0_DSTS_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2DSTST_0_DSTS_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX7_G2DSTST_0_DSTS_SHIFT)
#define G2SB_CTX7_G2DSTST_0_DSTS_RANGE                  15:0
#define G2SB_CTX7_G2DSTST_0_DSTS_WOFFSET                        0x0
#define G2SB_CTX7_G2DSTST_0_DSTS_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTST_0_DSTS_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTST_0_DSTS_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTST_0_DSTS_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Surface methods
// G2SRCPACK should only be used to specify the line gap
// use G2SRCPACK_SIZE to program height and width

// Register G2SB_CTX7_G2SRCPACK_0  //{2d,index=2f} source data packed mode
#define G2SB_CTX7_G2SRCPACK_0                   _MK_ADDR_CONST(0xa02f)
#define G2SB_CTX7_G2SRCPACK_0_SECURE                    0x0
#define G2SB_CTX7_G2SRCPACK_0_WORD_COUNT                        0x1
#define G2SB_CTX7_G2SRCPACK_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCPACK_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCPACK_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCPACK_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCPACK_0_READ_MASK                         _MK_MASK_CONST(0xf)
#define G2SB_CTX7_G2SRCPACK_0_WRITE_MASK                        _MK_MASK_CONST(0xf)
// Packed mode - source mono data line gap
#define G2SB_CTX7_G2SRCPACK_0_SRCLNGAP_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2SRCPACK_0_SRCLNGAP_FIELD                    (_MK_MASK_CONST(0xf) << G2SB_CTX7_G2SRCPACK_0_SRCLNGAP_SHIFT)
#define G2SB_CTX7_G2SRCPACK_0_SRCLNGAP_RANGE                    3:0
#define G2SB_CTX7_G2SRCPACK_0_SRCLNGAP_WOFFSET                  0x0
#define G2SB_CTX7_G2SRCPACK_0_SRCLNGAP_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCPACK_0_SRCLNGAP_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCPACK_0_SRCLNGAP_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCPACK_0_SRCLNGAP_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// G2SRCPACKS_SIZE -- extension of G2SRCPACK, this register only holds the size of the packed data

// Register G2SB_CTX7_G2SRCPACK_SIZE_0  //{2d,index=30} source data packed mode
// In packed mode, SRCMONOW holds the horizontal size (bytes).
// If MONOH > 1, it is required width/stride be 16 byte aligned.
// Packed mode - source mono data line gap
#define G2SB_CTX7_G2SRCPACK_SIZE_0                      _MK_ADDR_CONST(0xa030)
#define G2SB_CTX7_G2SRCPACK_SIZE_0_SECURE                       0x0
#define G2SB_CTX7_G2SRCPACK_SIZE_0_WORD_COUNT                   0x1
#define G2SB_CTX7_G2SRCPACK_SIZE_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCPACK_SIZE_0_RESET_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCPACK_SIZE_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCPACK_SIZE_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCPACK_SIZE_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2SRCPACK_SIZE_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
// Packed mode - source mono data width in bytes
#define G2SB_CTX7_G2SRCPACK_SIZE_0_SRCMONOW_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2SRCPACK_SIZE_0_SRCMONOW_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_CTX7_G2SRCPACK_SIZE_0_SRCMONOW_SHIFT)
#define G2SB_CTX7_G2SRCPACK_SIZE_0_SRCMONOW_RANGE                       15:0
#define G2SB_CTX7_G2SRCPACK_SIZE_0_SRCMONOW_WOFFSET                     0x0
#define G2SB_CTX7_G2SRCPACK_SIZE_0_SRCMONOW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCPACK_SIZE_0_SRCMONOW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCPACK_SIZE_0_SRCMONOW_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCPACK_SIZE_0_SRCMONOW_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Packed mode - source mono data height in bytes
#define G2SB_CTX7_G2SRCPACK_SIZE_0_SRCMONOH_SHIFT                       _MK_SHIFT_CONST(16)
#define G2SB_CTX7_G2SRCPACK_SIZE_0_SRCMONOH_FIELD                       (_MK_MASK_CONST(0xffff) << G2SB_CTX7_G2SRCPACK_SIZE_0_SRCMONOH_SHIFT)
#define G2SB_CTX7_G2SRCPACK_SIZE_0_SRCMONOH_RANGE                       31:16
#define G2SB_CTX7_G2SRCPACK_SIZE_0_SRCMONOH_WOFFSET                     0x0
#define G2SB_CTX7_G2SRCPACK_SIZE_0_SRCMONOH_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCPACK_SIZE_0_SRCMONOH_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCPACK_SIZE_0_SRCMONOH_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCPACK_SIZE_0_SRCMONOH_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2SRCBA_0  //{host,2d,sb,index=31}
//src base address
#define G2SB_CTX7_G2SRCBA_0                     _MK_ADDR_CONST(0xa031)
#define G2SB_CTX7_G2SRCBA_0_SECURE                      0x0
#define G2SB_CTX7_G2SRCBA_0_WORD_COUNT                  0x1
#define G2SB_CTX7_G2SRCBA_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCBA_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCBA_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCBA_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCBA_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2SRCBA_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Source base address (byte address)
#define G2SB_CTX7_G2SRCBA_0_SRCBA_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2SRCBA_0_SRCBA_FIELD                 (_MK_MASK_CONST(0xffffffff) << G2SB_CTX7_G2SRCBA_0_SRCBA_SHIFT)
#define G2SB_CTX7_G2SRCBA_0_SRCBA_RANGE                 31:0
#define G2SB_CTX7_G2SRCBA_0_SRCBA_WOFFSET                       0x0
#define G2SB_CTX7_G2SRCBA_0_SRCBA_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCBA_0_SRCBA_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCBA_0_SRCBA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCBA_0_SRCBA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2SRCBA_B_0  //{2d,sb,index=32}
//SB only
#define G2SB_CTX7_G2SRCBA_B_0                   _MK_ADDR_CONST(0xa032)
#define G2SB_CTX7_G2SRCBA_B_0_SECURE                    0x0
#define G2SB_CTX7_G2SRCBA_B_0_WORD_COUNT                        0x1
#define G2SB_CTX7_G2SRCBA_B_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCBA_B_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCBA_B_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCBA_B_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCBA_B_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2SRCBA_B_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
//This parameter specifies the start address of source image
// stored in the image buffer memory. In 4:2:0
//format mode, this image block accommodates for Y-image.
//This address specifies byte-position, however, bits [2:0]
// are restricted with respect to the data formats to fit
//multiple pixels in one memory word (8 bytes),. For example,
// {0, 4} for any YcrCb formats, {0, 2, 4, 6} for
//RGB 16-bit format.  Since one Y pixel takes 8-bit, all
// 8 byte-positions are valid in 4:2:0 mode. (Unlike
//multiplexed pixels format, there is no restrictions on this value.)
#define G2SB_CTX7_G2SRCBA_B_0_SRCBA_B_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2SRCBA_B_0_SRCBA_B_FIELD                     (_MK_MASK_CONST(0xffffffff) << G2SB_CTX7_G2SRCBA_B_0_SRCBA_B_SHIFT)
#define G2SB_CTX7_G2SRCBA_B_0_SRCBA_B_RANGE                     31:0
#define G2SB_CTX7_G2SRCBA_B_0_SRCBA_B_WOFFSET                   0x0
#define G2SB_CTX7_G2SRCBA_B_0_SRCBA_B_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCBA_B_0_SRCBA_B_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCBA_B_0_SRCBA_B_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCBA_B_0_SRCBA_B_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2SRCST_0  //{host,2d,sb,sbm,index=33}
#define G2SB_CTX7_G2SRCST_0                     _MK_ADDR_CONST(0xa033)
#define G2SB_CTX7_G2SRCST_0_SECURE                      0x0
#define G2SB_CTX7_G2SRCST_0_WORD_COUNT                  0x1
#define G2SB_CTX7_G2SRCST_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCST_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCST_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCST_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCST_0_READ_MASK                   _MK_MASK_CONST(0xffff)
#define G2SB_CTX7_G2SRCST_0_WRITE_MASK                  _MK_MASK_CONST(0xffff)
// Source Stride coordinate(bytes) with respect to SRCBA.
//In order to fit multiple pixels in one memory word (8 bytes),
//  bits [2:0] are restricted with respect to the
//data formats. For example, {0, 4} for any YcrCb formats,
//  {0, 2, 4, 6} for RGB 16-bit format.
#define G2SB_CTX7_G2SRCST_0_SRCS_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2SRCST_0_SRCS_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX7_G2SRCST_0_SRCS_SHIFT)
#define G2SB_CTX7_G2SRCST_0_SRCS_RANGE                  15:0
#define G2SB_CTX7_G2SRCST_0_SRCS_WOFFSET                        0x0
#define G2SB_CTX7_G2SRCST_0_SRCS_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCST_0_SRCS_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCST_0_SRCS_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCST_0_SRCS_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//srcColors

// Register G2SB_CTX7_G2SRCBGC_0  //{2d,index=34}
#define G2SB_CTX7_G2SRCBGC_0                    _MK_ADDR_CONST(0xa034)
#define G2SB_CTX7_G2SRCBGC_0_SECURE                     0x0
#define G2SB_CTX7_G2SRCBGC_0_WORD_COUNT                         0x1
#define G2SB_CTX7_G2SRCBGC_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCBGC_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCBGC_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCBGC_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCBGC_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2SRCBGC_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2SRCBGC_0_SRCBGC_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2SRCBGC_0_SRCBGC_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX7_G2SRCBGC_0_SRCBGC_SHIFT)
#define G2SB_CTX7_G2SRCBGC_0_SRCBGC_RANGE                       31:0
#define G2SB_CTX7_G2SRCBGC_0_SRCBGC_WOFFSET                     0x0
#define G2SB_CTX7_G2SRCBGC_0_SRCBGC_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCBGC_0_SRCBGC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCBGC_0_SRCBGC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCBGC_0_SRCBGC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2SRCFGC_0  //{host,2d,index=35}
#define G2SB_CTX7_G2SRCFGC_0                    _MK_ADDR_CONST(0xa035)
#define G2SB_CTX7_G2SRCFGC_0_SECURE                     0x0
#define G2SB_CTX7_G2SRCFGC_0_WORD_COUNT                         0x1
#define G2SB_CTX7_G2SRCFGC_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCFGC_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCFGC_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCFGC_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCFGC_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2SRCFGC_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2SRCFGC_0_SRCFGC_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2SRCFGC_0_SRCFGC_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX7_G2SRCFGC_0_SRCFGC_SHIFT)
#define G2SB_CTX7_G2SRCFGC_0_SRCFGC_RANGE                       31:0
#define G2SB_CTX7_G2SRCFGC_0_SRCFGC_WOFFSET                     0x0
#define G2SB_CTX7_G2SRCFGC_0_SRCFGC_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCFGC_0_SRCFGC_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCFGC_0_SRCFGC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCFGC_0_SRCFGC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2SRCKEY_0  //{2d,index=36}
#define G2SB_CTX7_G2SRCKEY_0                    _MK_ADDR_CONST(0xa036)
#define G2SB_CTX7_G2SRCKEY_0_SECURE                     0x0
#define G2SB_CTX7_G2SRCKEY_0_WORD_COUNT                         0x1
#define G2SB_CTX7_G2SRCKEY_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCKEY_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCKEY_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCKEY_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCKEY_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2SRCKEY_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2SRCKEY_0_SRCKEY_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2SRCKEY_0_SRCKEY_FIELD                       (_MK_MASK_CONST(0xffffffff) << G2SB_CTX7_G2SRCKEY_0_SRCKEY_SHIFT)
#define G2SB_CTX7_G2SRCKEY_0_SRCKEY_RANGE                       31:0
#define G2SB_CTX7_G2SRCKEY_0_SRCKEY_WOFFSET                     0x0
#define G2SB_CTX7_G2SRCKEY_0_SRCKEY_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCKEY_0_SRCKEY_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCKEY_0_SRCKEY_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCKEY_0_SRCKEY_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// for sc15, SRCWIDTH bit 14 must be set to 0. (limit of 16383 pixels)

// Register G2SB_CTX7_G2SRCSIZE_0  //{host,2d,sb,sbm,index=37}
#define G2SB_CTX7_G2SRCSIZE_0                   _MK_ADDR_CONST(0xa037)
#define G2SB_CTX7_G2SRCSIZE_0_SECURE                    0x0
#define G2SB_CTX7_G2SRCSIZE_0_WORD_COUNT                        0x1
#define G2SB_CTX7_G2SRCSIZE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCSIZE_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCSIZE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCSIZE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCSIZE_0_READ_MASK                         _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX7_G2SRCSIZE_0_WRITE_MASK                        _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX7_G2SRCSIZE_0_SRCWIDTH_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2SRCSIZE_0_SRCWIDTH_FIELD                    (_MK_MASK_CONST(0x7fff) << G2SB_CTX7_G2SRCSIZE_0_SRCWIDTH_SHIFT)
#define G2SB_CTX7_G2SRCSIZE_0_SRCWIDTH_RANGE                    14:0
#define G2SB_CTX7_G2SRCSIZE_0_SRCWIDTH_WOFFSET                  0x0
#define G2SB_CTX7_G2SRCSIZE_0_SRCWIDTH_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCSIZE_0_SRCWIDTH_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCSIZE_0_SRCWIDTH_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCSIZE_0_SRCWIDTH_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// In SB mode, number of lines - 1
// In 2D mode, actual lines
#define G2SB_CTX7_G2SRCSIZE_0_SRCHEIGHT_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX7_G2SRCSIZE_0_SRCHEIGHT_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX7_G2SRCSIZE_0_SRCHEIGHT_SHIFT)
#define G2SB_CTX7_G2SRCSIZE_0_SRCHEIGHT_RANGE                   30:16
#define G2SB_CTX7_G2SRCSIZE_0_SRCHEIGHT_WOFFSET                 0x0
#define G2SB_CTX7_G2SRCSIZE_0_SRCHEIGHT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCSIZE_0_SRCHEIGHT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCSIZE_0_SRCHEIGHT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCSIZE_0_SRCHEIGHT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2DSTSIZE_0  //{host,2d,sb,sbm,index=38}
#define G2SB_CTX7_G2DSTSIZE_0                   _MK_ADDR_CONST(0xa038)
#define G2SB_CTX7_G2DSTSIZE_0_SECURE                    0x0
#define G2SB_CTX7_G2DSTSIZE_0_WORD_COUNT                        0x1
#define G2SB_CTX7_G2DSTSIZE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTSIZE_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTSIZE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTSIZE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTSIZE_0_READ_MASK                         _MK_MASK_CONST(0x7fff7fff)
#define G2SB_CTX7_G2DSTSIZE_0_WRITE_MASK                        _MK_MASK_CONST(0x7fff7fff)
// In 2D mode, the largest number can be programmed is 0x7fef
#define G2SB_CTX7_G2DSTSIZE_0_DSTWIDTH_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2DSTSIZE_0_DSTWIDTH_FIELD                    (_MK_MASK_CONST(0x7fff) << G2SB_CTX7_G2DSTSIZE_0_DSTWIDTH_SHIFT)
#define G2SB_CTX7_G2DSTSIZE_0_DSTWIDTH_RANGE                    14:0
#define G2SB_CTX7_G2DSTSIZE_0_DSTWIDTH_WOFFSET                  0x0
#define G2SB_CTX7_G2DSTSIZE_0_DSTWIDTH_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTSIZE_0_DSTWIDTH_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTSIZE_0_DSTWIDTH_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTSIZE_0_DSTWIDTH_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// In SB mode, number of lines - 1
// In 2D mode, actual lines
#define G2SB_CTX7_G2DSTSIZE_0_DSTHEIGHT_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX7_G2DSTSIZE_0_DSTHEIGHT_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX7_G2DSTSIZE_0_DSTHEIGHT_SHIFT)
#define G2SB_CTX7_G2DSTSIZE_0_DSTHEIGHT_RANGE                   30:16
#define G2SB_CTX7_G2DSTSIZE_0_DSTHEIGHT_WOFFSET                 0x0
#define G2SB_CTX7_G2DSTSIZE_0_DSTHEIGHT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTSIZE_0_DSTHEIGHT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTSIZE_0_DSTHEIGHT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTSIZE_0_DSTHEIGHT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// ImageBlit Methods

// Register G2SB_CTX7_G2SRCPS_0  //{host,2d,index=39}
#define G2SB_CTX7_G2SRCPS_0                     _MK_ADDR_CONST(0xa039)
#define G2SB_CTX7_G2SRCPS_0_SECURE                      0x0
#define G2SB_CTX7_G2SRCPS_0_WORD_COUNT                  0x1
#define G2SB_CTX7_G2SRCPS_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCPS_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCPS_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCPS_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCPS_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2SRCPS_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
//SRCX[2:0] are ignored in SRCCD==0 (mono expansion),
//The first bit of the first byte (bit7 if HLMONO==0, or bit0 if HLMONO==1) always
//expand to DSTX,DSTY
#define G2SB_CTX7_G2SRCPS_0_SRCX_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2SRCPS_0_SRCX_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX7_G2SRCPS_0_SRCX_SHIFT)
#define G2SB_CTX7_G2SRCPS_0_SRCX_RANGE                  15:0
#define G2SB_CTX7_G2SRCPS_0_SRCX_WOFFSET                        0x0
#define G2SB_CTX7_G2SRCPS_0_SRCX_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCPS_0_SRCX_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCPS_0_SRCX_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCPS_0_SRCX_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX7_G2SRCPS_0_SRCY_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX7_G2SRCPS_0_SRCY_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX7_G2SRCPS_0_SRCY_SHIFT)
#define G2SB_CTX7_G2SRCPS_0_SRCY_RANGE                  31:16
#define G2SB_CTX7_G2SRCPS_0_SRCY_WOFFSET                        0x0
#define G2SB_CTX7_G2SRCPS_0_SRCY_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCPS_0_SRCY_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCPS_0_SRCY_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCPS_0_SRCY_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2DSTPS_0  //{host,2d,index=3a}
#define G2SB_CTX7_G2DSTPS_0                     _MK_ADDR_CONST(0xa03a)
#define G2SB_CTX7_G2DSTPS_0_SECURE                      0x0
#define G2SB_CTX7_G2DSTPS_0_WORD_COUNT                  0x1
#define G2SB_CTX7_G2DSTPS_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTPS_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTPS_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTPS_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTPS_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2DSTPS_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// NOTE: when ALPTYPE is PL1BPP, DSTX[2:0] must be zero, see bug 344489
// NOTE: when ALPTYPE is PL2BPP, DSTX[1:0] must be zero, see bug 344489
// NOTE: when ALPTYPE is PL4BPP, DSTX[0:0] must be zero, see bug 344489
#define G2SB_CTX7_G2DSTPS_0_DSTX_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2DSTPS_0_DSTX_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX7_G2DSTPS_0_DSTX_SHIFT)
#define G2SB_CTX7_G2DSTPS_0_DSTX_RANGE                  15:0
#define G2SB_CTX7_G2DSTPS_0_DSTX_WOFFSET                        0x0
#define G2SB_CTX7_G2DSTPS_0_DSTX_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTPS_0_DSTX_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTPS_0_DSTX_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTPS_0_DSTX_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_CTX7_G2DSTPS_0_DSTY_SHIFT                  _MK_SHIFT_CONST(16)
#define G2SB_CTX7_G2DSTPS_0_DSTY_FIELD                  (_MK_MASK_CONST(0xffff) << G2SB_CTX7_G2DSTPS_0_DSTY_SHIFT)
#define G2SB_CTX7_G2DSTPS_0_DSTY_RANGE                  31:16
#define G2SB_CTX7_G2DSTPS_0_DSTY_WOFFSET                        0x0
#define G2SB_CTX7_G2DSTPS_0_DSTY_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTPS_0_DSTY_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTPS_0_DSTY_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTPS_0_DSTY_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// circular buffer

// Register G2SB_CTX7_G2CBDES_0  // {host,2d,sb,index=3b}
#define G2SB_CTX7_G2CBDES_0                     _MK_ADDR_CONST(0xa03b)
#define G2SB_CTX7_G2CBDES_0_SECURE                      0x0
#define G2SB_CTX7_G2CBDES_0_WORD_COUNT                  0x1
#define G2SB_CTX7_G2CBDES_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBDES_0_RESET_MASK                  _MK_MASK_CONST(0x80000000)
#define G2SB_CTX7_G2CBDES_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBDES_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBDES_0_READ_MASK                   _MK_MASK_CONST(0xffff00ff)
#define G2SB_CTX7_G2CBDES_0_WRITE_MASK                  _MK_MASK_CONST(0xffff00ff)
// This specifies the number of buffers in
//circular buffer feature
#define G2SB_CTX7_G2CBDES_0_CBCOUNT_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2CBDES_0_CBCOUNT_FIELD                       (_MK_MASK_CONST(0xff) << G2SB_CTX7_G2CBDES_0_CBCOUNT_SHIFT)
#define G2SB_CTX7_G2CBDES_0_CBCOUNT_RANGE                       7:0
#define G2SB_CTX7_G2CBDES_0_CBCOUNT_WOFFSET                     0x0
#define G2SB_CTX7_G2CBDES_0_CBCOUNT_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBDES_0_CBCOUNT_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBDES_0_CBCOUNT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBDES_0_CBCOUNT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//vertical line number in one buffer
#define G2SB_CTX7_G2CBDES_0_CBLINE_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_CTX7_G2CBDES_0_CBLINE_FIELD                        (_MK_MASK_CONST(0x7fff) << G2SB_CTX7_G2CBDES_0_CBLINE_SHIFT)
#define G2SB_CTX7_G2CBDES_0_CBLINE_RANGE                        30:16
#define G2SB_CTX7_G2CBDES_0_CBLINE_WOFFSET                      0x0
#define G2SB_CTX7_G2CBDES_0_CBLINE_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBDES_0_CBLINE_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBDES_0_CBLINE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBDES_0_CBLINE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

//top clipping at the first buffer, (buffer start)
// refer to TOP_CBLINE in G2CBDES2 0= disable
#define G2SB_CTX7_G2CBDES_0_TOPCLIP_SHIFT                       _MK_SHIFT_CONST(31)
#define G2SB_CTX7_G2CBDES_0_TOPCLIP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2CBDES_0_TOPCLIP_SHIFT)
#define G2SB_CTX7_G2CBDES_0_TOPCLIP_RANGE                       31:31
#define G2SB_CTX7_G2CBDES_0_TOPCLIP_WOFFSET                     0x0
#define G2SB_CTX7_G2CBDES_0_TOPCLIP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBDES_0_TOPCLIP_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2CBDES_0_TOPCLIP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBDES_0_TOPCLIP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBDES_0_TOPCLIP_DISABLE                     _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CBDES_0_TOPCLIP_ENABLE                      _MK_ENUM_CONST(1)


// Register G2SB_CTX7_G2CBSTRIDE_0  // {host,2d,sb,index=3c}
#define G2SB_CTX7_G2CBSTRIDE_0                  _MK_ADDR_CONST(0xa03c)
#define G2SB_CTX7_G2CBSTRIDE_0_SECURE                   0x0
#define G2SB_CTX7_G2CBSTRIDE_0_WORD_COUNT                       0x1
#define G2SB_CTX7_G2CBSTRIDE_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBSTRIDE_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBSTRIDE_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBSTRIDE_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBSTRIDE_0_READ_MASK                        _MK_MASK_CONST(0xc0ffffff)
#define G2SB_CTX7_G2CBSTRIDE_0_WRITE_MASK                       _MK_MASK_CONST(0xc0ffffff)
// Video Buffer Luma(or RGB) Buffer Stride
//  This is luma buffer stride (in bytes)
#define G2SB_CTX7_G2CBSTRIDE_0_CBSTRIDE_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2CBSTRIDE_0_CBSTRIDE_FIELD                   (_MK_MASK_CONST(0xffffff) << G2SB_CTX7_G2CBSTRIDE_0_CBSTRIDE_SHIFT)
#define G2SB_CTX7_G2CBSTRIDE_0_CBSTRIDE_RANGE                   23:0
#define G2SB_CTX7_G2CBSTRIDE_0_CBSTRIDE_WOFFSET                 0x0
#define G2SB_CTX7_G2CBSTRIDE_0_CBSTRIDE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBSTRIDE_0_CBSTRIDE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBSTRIDE_0_CBSTRIDE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBSTRIDE_0_CBSTRIDE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Chroma Buffer Stride default is half of luma
//   00= 1/2 of Luma Buffer Stride; in this
//       case, Luma Buffer Stride should be
//       multiple of 2 bytes.
//   01= Equal to Luma Buffer Stride
//   10= 1/4 of Luma Buffer Stride; in this
//       case, Luma Buffer Stride should be
//       multiple of 4 bytes.
//   1x= Reserved
#define G2SB_CTX7_G2CBSTRIDE_0_CBUVSTRIDE_SHIFT                 _MK_SHIFT_CONST(30)
#define G2SB_CTX7_G2CBSTRIDE_0_CBUVSTRIDE_FIELD                 (_MK_MASK_CONST(0x3) << G2SB_CTX7_G2CBSTRIDE_0_CBUVSTRIDE_SHIFT)
#define G2SB_CTX7_G2CBSTRIDE_0_CBUVSTRIDE_RANGE                 31:30
#define G2SB_CTX7_G2CBSTRIDE_0_CBUVSTRIDE_WOFFSET                       0x0
#define G2SB_CTX7_G2CBSTRIDE_0_CBUVSTRIDE_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBSTRIDE_0_CBUVSTRIDE_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBSTRIDE_0_CBUVSTRIDE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBSTRIDE_0_CBUVSTRIDE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBSTRIDE_0_CBUVSTRIDE_CBS2X                 _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2CBSTRIDE_0_CBUVSTRIDE_CBS1X                 _MK_ENUM_CONST(1)
#define G2SB_CTX7_G2CBSTRIDE_0_CBUVSTRIDE_CBS4X                 _MK_ENUM_CONST(2)

//Line Methods

// Register G2SB_CTX7_G2LINESETTING_0  //{2d,index=3d}
#define G2SB_CTX7_G2LINESETTING_0                       _MK_ADDR_CONST(0xa03d)
#define G2SB_CTX7_G2LINESETTING_0_SECURE                        0x0
#define G2SB_CTX7_G2LINESETTING_0_WORD_COUNT                    0x1
#define G2SB_CTX7_G2LINESETTING_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINESETTING_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINESETTING_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINESETTING_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINESETTING_0_READ_MASK                     _MK_MASK_CONST(0xff1fffff)
#define G2SB_CTX7_G2LINESETTING_0_WRITE_MASK                    _MK_MASK_CONST(0xff1fffff)
#define G2SB_CTX7_G2LINESETTING_0_GAMMA_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2LINESETTING_0_GAMMA_FIELD                   (_MK_MASK_CONST(0x1fffff) << G2SB_CTX7_G2LINESETTING_0_GAMMA_SHIFT)
#define G2SB_CTX7_G2LINESETTING_0_GAMMA_RANGE                   20:0
#define G2SB_CTX7_G2LINESETTING_0_GAMMA_WOFFSET                 0x0
#define G2SB_CTX7_G2LINESETTING_0_GAMMA_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINESETTING_0_GAMMA_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINESETTING_0_GAMMA_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINESETTING_0_GAMMA_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

//0:xmajor 1: y major
#define G2SB_CTX7_G2LINESETTING_0_MAJOR_SHIFT                   _MK_SHIFT_CONST(24)
#define G2SB_CTX7_G2LINESETTING_0_MAJOR_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2LINESETTING_0_MAJOR_SHIFT)
#define G2SB_CTX7_G2LINESETTING_0_MAJOR_RANGE                   24:24
#define G2SB_CTX7_G2LINESETTING_0_MAJOR_WOFFSET                 0x0
#define G2SB_CTX7_G2LINESETTING_0_MAJOR_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINESETTING_0_MAJOR_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINESETTING_0_MAJOR_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINESETTING_0_MAJOR_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINESETTING_0_MAJOR_XMAJOR                  _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2LINESETTING_0_MAJOR_YMAJOR                  _MK_ENUM_CONST(1)

#define G2SB_CTX7_G2LINESETTING_0_LINEXDIR_SHIFT                        _MK_SHIFT_CONST(25)
#define G2SB_CTX7_G2LINESETTING_0_LINEXDIR_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2LINESETTING_0_LINEXDIR_SHIFT)
#define G2SB_CTX7_G2LINESETTING_0_LINEXDIR_RANGE                        25:25
#define G2SB_CTX7_G2LINESETTING_0_LINEXDIR_WOFFSET                      0x0
#define G2SB_CTX7_G2LINESETTING_0_LINEXDIR_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINESETTING_0_LINEXDIR_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINESETTING_0_LINEXDIR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINESETTING_0_LINEXDIR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

#define G2SB_CTX7_G2LINESETTING_0_LINEYDIR_SHIFT                        _MK_SHIFT_CONST(26)
#define G2SB_CTX7_G2LINESETTING_0_LINEYDIR_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2LINESETTING_0_LINEYDIR_SHIFT)
#define G2SB_CTX7_G2LINESETTING_0_LINEYDIR_RANGE                        26:26
#define G2SB_CTX7_G2LINESETTING_0_LINEYDIR_WOFFSET                      0x0
#define G2SB_CTX7_G2LINESETTING_0_LINEYDIR_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINESETTING_0_LINEYDIR_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINESETTING_0_LINEYDIR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINESETTING_0_LINEYDIR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

//draw last pixel or not
#define G2SB_CTX7_G2LINESETTING_0_DROPLASTP_SHIFT                       _MK_SHIFT_CONST(27)
#define G2SB_CTX7_G2LINESETTING_0_DROPLASTP_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2LINESETTING_0_DROPLASTP_SHIFT)
#define G2SB_CTX7_G2LINESETTING_0_DROPLASTP_RANGE                       27:27
#define G2SB_CTX7_G2LINESETTING_0_DROPLASTP_WOFFSET                     0x0
#define G2SB_CTX7_G2LINESETTING_0_DROPLASTP_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINESETTING_0_DROPLASTP_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINESETTING_0_DROPLASTP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINESETTING_0_DROPLASTP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//use OCTANTS in G2LINEDELTAN register instead of MAJOR LINEXDIR LINEYDIR
#define G2SB_CTX7_G2LINESETTING_0_LINEUSEOCTANT_SHIFT                   _MK_SHIFT_CONST(28)
#define G2SB_CTX7_G2LINESETTING_0_LINEUSEOCTANT_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2LINESETTING_0_LINEUSEOCTANT_SHIFT)
#define G2SB_CTX7_G2LINESETTING_0_LINEUSEOCTANT_RANGE                   28:28
#define G2SB_CTX7_G2LINESETTING_0_LINEUSEOCTANT_WOFFSET                 0x0
#define G2SB_CTX7_G2LINESETTING_0_LINEUSEOCTANT_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINESETTING_0_LINEUSEOCTANT_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINESETTING_0_LINEUSEOCTANT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINESETTING_0_LINEUSEOCTANT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

//000 octant 0
//001 octant 1
//010 octant 2
//011 octant 3
//100 octant 4
//101 octant 5
//110 octant 6
//111 octant 7
#define G2SB_CTX7_G2LINESETTING_0_OCTANTS_SHIFT                 _MK_SHIFT_CONST(29)
#define G2SB_CTX7_G2LINESETTING_0_OCTANTS_FIELD                 (_MK_MASK_CONST(0x7) << G2SB_CTX7_G2LINESETTING_0_OCTANTS_SHIFT)
#define G2SB_CTX7_G2LINESETTING_0_OCTANTS_RANGE                 31:29
#define G2SB_CTX7_G2LINESETTING_0_OCTANTS_WOFFSET                       0x0
#define G2SB_CTX7_G2LINESETTING_0_OCTANTS_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINESETTING_0_OCTANTS_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINESETTING_0_OCTANTS_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINESETTING_0_OCTANTS_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//
//
//
//   |    |    |
//    | 5 | 6 |
//     |  |  |
//    4 | | | 7
//       |||
//   ----------->
//       |||
//    3 | | | 0
//     |  |  |
//    | 2 | 1 |
//   |    |    |
//        V
//

// Register G2SB_CTX7_G2LINEDELTAN_0  //{2d,index=3e}
#define G2SB_CTX7_G2LINEDELTAN_0                        _MK_ADDR_CONST(0xa03e)
#define G2SB_CTX7_G2LINEDELTAN_0_SECURE                         0x0
#define G2SB_CTX7_G2LINEDELTAN_0_WORD_COUNT                     0x1
#define G2SB_CTX7_G2LINEDELTAN_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINEDELTAN_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINEDELTAN_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINEDELTAN_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINEDELTAN_0_READ_MASK                      _MK_MASK_CONST(0x1fffff)
#define G2SB_CTX7_G2LINEDELTAN_0_WRITE_MASK                     _MK_MASK_CONST(0x1fffff)
#define G2SB_CTX7_G2LINEDELTAN_0_DELTAN_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2LINEDELTAN_0_DELTAN_FIELD                   (_MK_MASK_CONST(0x1fffff) << G2SB_CTX7_G2LINEDELTAN_0_DELTAN_SHIFT)
#define G2SB_CTX7_G2LINEDELTAN_0_DELTAN_RANGE                   20:0
#define G2SB_CTX7_G2LINEDELTAN_0_DELTAN_WOFFSET                 0x0
#define G2SB_CTX7_G2LINEDELTAN_0_DELTAN_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINEDELTAN_0_DELTAN_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINEDELTAN_0_DELTAN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINEDELTAN_0_DELTAN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2LINEDELTAM_0  //{2d,index=3f}
#define G2SB_CTX7_G2LINEDELTAM_0                        _MK_ADDR_CONST(0xa03f)
#define G2SB_CTX7_G2LINEDELTAM_0_SECURE                         0x0
#define G2SB_CTX7_G2LINEDELTAM_0_WORD_COUNT                     0x1
#define G2SB_CTX7_G2LINEDELTAM_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINEDELTAM_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINEDELTAM_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINEDELTAM_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINEDELTAM_0_READ_MASK                      _MK_MASK_CONST(0x1fffff)
#define G2SB_CTX7_G2LINEDELTAM_0_WRITE_MASK                     _MK_MASK_CONST(0x1fffff)
#define G2SB_CTX7_G2LINEDELTAM_0_DELTAM_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2LINEDELTAM_0_DELTAM_FIELD                   (_MK_MASK_CONST(0x1fffff) << G2SB_CTX7_G2LINEDELTAM_0_DELTAM_SHIFT)
#define G2SB_CTX7_G2LINEDELTAM_0_DELTAM_RANGE                   20:0
#define G2SB_CTX7_G2LINEDELTAM_0_DELTAM_WOFFSET                 0x0
#define G2SB_CTX7_G2LINEDELTAM_0_DELTAM_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINEDELTAM_0_DELTAM_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINEDELTAM_0_DELTAM_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINEDELTAM_0_DELTAM_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2LINEPOS_0  //{2d,index=40}
#define G2SB_CTX7_G2LINEPOS_0                   _MK_ADDR_CONST(0xa040)
#define G2SB_CTX7_G2LINEPOS_0_SECURE                    0x0
#define G2SB_CTX7_G2LINEPOS_0_WORD_COUNT                        0x1
#define G2SB_CTX7_G2LINEPOS_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINEPOS_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINEPOS_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINEPOS_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINEPOS_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2LINEPOS_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2LINEPOS_0_LINEXPOS_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2LINEPOS_0_LINEXPOS_FIELD                    (_MK_MASK_CONST(0xffff) << G2SB_CTX7_G2LINEPOS_0_LINEXPOS_SHIFT)
#define G2SB_CTX7_G2LINEPOS_0_LINEXPOS_RANGE                    15:0
#define G2SB_CTX7_G2LINEPOS_0_LINEXPOS_WOFFSET                  0x0
#define G2SB_CTX7_G2LINEPOS_0_LINEXPOS_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINEPOS_0_LINEXPOS_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINEPOS_0_LINEXPOS_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINEPOS_0_LINEXPOS_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

#define G2SB_CTX7_G2LINEPOS_0_LINEYPOS_SHIFT                    _MK_SHIFT_CONST(16)
#define G2SB_CTX7_G2LINEPOS_0_LINEYPOS_FIELD                    (_MK_MASK_CONST(0xffff) << G2SB_CTX7_G2LINEPOS_0_LINEYPOS_SHIFT)
#define G2SB_CTX7_G2LINEPOS_0_LINEYPOS_RANGE                    31:16
#define G2SB_CTX7_G2LINEPOS_0_LINEYPOS_WOFFSET                  0x0
#define G2SB_CTX7_G2LINEPOS_0_LINEYPOS_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINEPOS_0_LINEYPOS_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINEPOS_0_LINEYPOS_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINEPOS_0_LINEYPOS_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2LINELEN_0  //{2d,index=41}
#define G2SB_CTX7_G2LINELEN_0                   _MK_ADDR_CONST(0xa041)
#define G2SB_CTX7_G2LINELEN_0_SECURE                    0x0
#define G2SB_CTX7_G2LINELEN_0_WORD_COUNT                        0x1
#define G2SB_CTX7_G2LINELEN_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINELEN_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINELEN_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINELEN_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINELEN_0_READ_MASK                         _MK_MASK_CONST(0x7fff)
#define G2SB_CTX7_G2LINELEN_0_WRITE_MASK                        _MK_MASK_CONST(0x7fff)
#define G2SB_CTX7_G2LINELEN_0_LINELEN_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2LINELEN_0_LINELEN_FIELD                     (_MK_MASK_CONST(0x7fff) << G2SB_CTX7_G2LINELEN_0_LINELEN_SHIFT)
#define G2SB_CTX7_G2LINELEN_0_LINELEN_RANGE                     14:0
#define G2SB_CTX7_G2LINELEN_0_LINELEN_WOFFSET                   0x0
#define G2SB_CTX7_G2LINELEN_0_LINELEN_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINELEN_0_LINELEN_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINELEN_0_LINELEN_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2LINELEN_0_LINELEN_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2CSCFOURTH_0  //{sb,sbm,index=42}
#define G2SB_CTX7_G2CSCFOURTH_0                 _MK_ADDR_CONST(0xa042)
#define G2SB_CTX7_G2CSCFOURTH_0_SECURE                  0x0
#define G2SB_CTX7_G2CSCFOURTH_0_WORD_COUNT                      0x1
#define G2SB_CTX7_G2CSCFOURTH_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCFOURTH_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCFOURTH_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCFOURTH_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCFOURTH_0_READ_MASK                       _MK_MASK_CONST(0x1ff01ff)
#define G2SB_CTX7_G2CSCFOURTH_0_WRITE_MASK                      _MK_MASK_CONST(0x1ff01ff)
// multiplier for G for U generation.
//This parameter consists of a sign bit and 8-bit magnitude (s1.7)
// For RGB->YUV the recommended value is -0.291 (decimal) or 0x125
// For any other combination this parameter is ignored
#define G2SB_CTX7_G2CSCFOURTH_0_G2U_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2CSCFOURTH_0_G2U_FIELD                       (_MK_MASK_CONST(0x1ff) << G2SB_CTX7_G2CSCFOURTH_0_G2U_SHIFT)
#define G2SB_CTX7_G2CSCFOURTH_0_G2U_RANGE                       8:0
#define G2SB_CTX7_G2CSCFOURTH_0_G2U_WOFFSET                     0x0
#define G2SB_CTX7_G2CSCFOURTH_0_G2U_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCFOURTH_0_G2U_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCFOURTH_0_G2U_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCFOURTH_0_G2U_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// multiplier for G for V generation.
//This parameter consists of a sign bit and 8-bit magnitude (s1.7)
// For RGB->YUV the recommended value is -0.368 (decimal) or 0x12F
// For any other combination this parameter is ignored
#define G2SB_CTX7_G2CSCFOURTH_0_G2V_SHIFT                       _MK_SHIFT_CONST(16)
#define G2SB_CTX7_G2CSCFOURTH_0_G2V_FIELD                       (_MK_MASK_CONST(0x1ff) << G2SB_CTX7_G2CSCFOURTH_0_G2V_SHIFT)
#define G2SB_CTX7_G2CSCFOURTH_0_G2V_RANGE                       24:16
#define G2SB_CTX7_G2CSCFOURTH_0_G2V_WOFFSET                     0x0
#define G2SB_CTX7_G2CSCFOURTH_0_G2V_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCFOURTH_0_G2V_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCFOURTH_0_G2V_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CSCFOURTH_0_G2V_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2SRCST_B_0  //{2d,index=43}
#define G2SB_CTX7_G2SRCST_B_0                   _MK_ADDR_CONST(0xa043)
#define G2SB_CTX7_G2SRCST_B_0_SECURE                    0x0
#define G2SB_CTX7_G2SRCST_B_0_WORD_COUNT                        0x1
#define G2SB_CTX7_G2SRCST_B_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCST_B_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCST_B_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCST_B_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCST_B_0_READ_MASK                         _MK_MASK_CONST(0xffff)
#define G2SB_CTX7_G2SRCST_B_0_WRITE_MASK                        _MK_MASK_CONST(0xffff)
// Source Stride B
#define G2SB_CTX7_G2SRCST_B_0_SRCS_B_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2SRCST_B_0_SRCS_B_FIELD                      (_MK_MASK_CONST(0xffff) << G2SB_CTX7_G2SRCST_B_0_SRCS_B_SHIFT)
#define G2SB_CTX7_G2SRCST_B_0_SRCS_B_RANGE                      15:0
#define G2SB_CTX7_G2SRCST_B_0_SRCS_B_WOFFSET                    0x0
#define G2SB_CTX7_G2SRCST_B_0_SRCS_B_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCST_B_0_SRCS_B_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCST_B_0_SRCS_B_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCST_B_0_SRCS_B_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2UVSTRIDE_0  //{2d,sb,index=44}
#define G2SB_CTX7_G2UVSTRIDE_0                  _MK_ADDR_CONST(0xa044)
#define G2SB_CTX7_G2UVSTRIDE_0_SECURE                   0x0
#define G2SB_CTX7_G2UVSTRIDE_0_WORD_COUNT                       0x1
#define G2SB_CTX7_G2UVSTRIDE_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2UVSTRIDE_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2UVSTRIDE_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2UVSTRIDE_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2UVSTRIDE_0_READ_MASK                        _MK_MASK_CONST(0xffff)
#define G2SB_CTX7_G2UVSTRIDE_0_WRITE_MASK                       _MK_MASK_CONST(0xffff)
#define G2SB_CTX7_G2UVSTRIDE_0_UVSTRIDE_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2UVSTRIDE_0_UVSTRIDE_FIELD                   (_MK_MASK_CONST(0xffff) << G2SB_CTX7_G2UVSTRIDE_0_UVSTRIDE_SHIFT)
#define G2SB_CTX7_G2UVSTRIDE_0_UVSTRIDE_RANGE                   15:0
#define G2SB_CTX7_G2UVSTRIDE_0_UVSTRIDE_WOFFSET                 0x0
#define G2SB_CTX7_G2UVSTRIDE_0_UVSTRIDE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2UVSTRIDE_0_UVSTRIDE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2UVSTRIDE_0_UVSTRIDE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2UVSTRIDE_0_UVSTRIDE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// circular buffer controller 2

// Register G2SB_CTX7_G2CBDES2_0  // {host,2d,sb,index=45}
#define G2SB_CTX7_G2CBDES2_0                    _MK_ADDR_CONST(0xa045)
#define G2SB_CTX7_G2CBDES2_0_SECURE                     0x0
#define G2SB_CTX7_G2CBDES2_0_WORD_COUNT                         0x1
#define G2SB_CTX7_G2CBDES2_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBDES2_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBDES2_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBDES2_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBDES2_0_READ_MASK                  _MK_MASK_CONST(0x7fff)
#define G2SB_CTX7_G2CBDES2_0_WRITE_MASK                         _MK_MASK_CONST(0x7fff)
// Circular buffer top clipping enabled, the first buffer line num
#define G2SB_CTX7_G2CBDES2_0_TOP_CBLINE_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2CBDES2_0_TOP_CBLINE_FIELD                   (_MK_MASK_CONST(0x7fff) << G2SB_CTX7_G2CBDES2_0_TOP_CBLINE_SHIFT)
#define G2SB_CTX7_G2CBDES2_0_TOP_CBLINE_RANGE                   14:0
#define G2SB_CTX7_G2CBDES2_0_TOP_CBLINE_WOFFSET                 0x0
#define G2SB_CTX7_G2CBDES2_0_TOP_CBLINE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBDES2_0_TOP_CBLINE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBDES2_0_TOP_CBLINE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2CBDES2_0_TOP_CBLINE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2TILEMODE_0  //{host,2d,sb,index=46}
#define G2SB_CTX7_G2TILEMODE_0                  _MK_ADDR_CONST(0xa046)
#define G2SB_CTX7_G2TILEMODE_0_SECURE                   0x0
#define G2SB_CTX7_G2TILEMODE_0_WORD_COUNT                       0x1
#define G2SB_CTX7_G2TILEMODE_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TILEMODE_0_RESET_MASK                       _MK_MASK_CONST(0x111111)
#define G2SB_CTX7_G2TILEMODE_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TILEMODE_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TILEMODE_0_READ_MASK                        _MK_MASK_CONST(0x111111)
#define G2SB_CTX7_G2TILEMODE_0_WRITE_MASK                       _MK_MASK_CONST(0x111111)
//Y or RGB surface
#define G2SB_CTX7_G2TILEMODE_0_SRC_Y_TILE_MODE_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2TILEMODE_0_SRC_Y_TILE_MODE_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2TILEMODE_0_SRC_Y_TILE_MODE_SHIFT)
#define G2SB_CTX7_G2TILEMODE_0_SRC_Y_TILE_MODE_RANGE                    0:0
#define G2SB_CTX7_G2TILEMODE_0_SRC_Y_TILE_MODE_WOFFSET                  0x0
#define G2SB_CTX7_G2TILEMODE_0_SRC_Y_TILE_MODE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TILEMODE_0_SRC_Y_TILE_MODE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2TILEMODE_0_SRC_Y_TILE_MODE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TILEMODE_0_SRC_Y_TILE_MODE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TILEMODE_0_SRC_Y_TILE_MODE_LINEAR                   _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2TILEMODE_0_SRC_Y_TILE_MODE_TILED                    _MK_ENUM_CONST(1)

//UV surface, ignored in RGB mode
#define G2SB_CTX7_G2TILEMODE_0_SRC_UV_TILE_MODE_SHIFT                   _MK_SHIFT_CONST(4)
#define G2SB_CTX7_G2TILEMODE_0_SRC_UV_TILE_MODE_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2TILEMODE_0_SRC_UV_TILE_MODE_SHIFT)
#define G2SB_CTX7_G2TILEMODE_0_SRC_UV_TILE_MODE_RANGE                   4:4
#define G2SB_CTX7_G2TILEMODE_0_SRC_UV_TILE_MODE_WOFFSET                 0x0
#define G2SB_CTX7_G2TILEMODE_0_SRC_UV_TILE_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TILEMODE_0_SRC_UV_TILE_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2TILEMODE_0_SRC_UV_TILE_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TILEMODE_0_SRC_UV_TILE_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TILEMODE_0_SRC_UV_TILE_MODE_LINEAR                  _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2TILEMODE_0_SRC_UV_TILE_MODE_TILED                   _MK_ENUM_CONST(1)

//Y or RGB surface
#define G2SB_CTX7_G2TILEMODE_0_PAT_Y_TILE_MODE_SHIFT                    _MK_SHIFT_CONST(8)
#define G2SB_CTX7_G2TILEMODE_0_PAT_Y_TILE_MODE_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2TILEMODE_0_PAT_Y_TILE_MODE_SHIFT)
#define G2SB_CTX7_G2TILEMODE_0_PAT_Y_TILE_MODE_RANGE                    8:8
#define G2SB_CTX7_G2TILEMODE_0_PAT_Y_TILE_MODE_WOFFSET                  0x0
#define G2SB_CTX7_G2TILEMODE_0_PAT_Y_TILE_MODE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TILEMODE_0_PAT_Y_TILE_MODE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2TILEMODE_0_PAT_Y_TILE_MODE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TILEMODE_0_PAT_Y_TILE_MODE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TILEMODE_0_PAT_Y_TILE_MODE_LINEAR                   _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2TILEMODE_0_PAT_Y_TILE_MODE_TILED                    _MK_ENUM_CONST(1)

//UNUSED
#define G2SB_CTX7_G2TILEMODE_0_PAT_UV_TILE_MODE_SHIFT                   _MK_SHIFT_CONST(12)
#define G2SB_CTX7_G2TILEMODE_0_PAT_UV_TILE_MODE_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2TILEMODE_0_PAT_UV_TILE_MODE_SHIFT)
#define G2SB_CTX7_G2TILEMODE_0_PAT_UV_TILE_MODE_RANGE                   12:12
#define G2SB_CTX7_G2TILEMODE_0_PAT_UV_TILE_MODE_WOFFSET                 0x0
#define G2SB_CTX7_G2TILEMODE_0_PAT_UV_TILE_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TILEMODE_0_PAT_UV_TILE_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2TILEMODE_0_PAT_UV_TILE_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TILEMODE_0_PAT_UV_TILE_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TILEMODE_0_PAT_UV_TILE_MODE_LINEAR                  _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2TILEMODE_0_PAT_UV_TILE_MODE_TILED                   _MK_ENUM_CONST(1)

//Same as destination write unless DST_RD_WR_SEP (not supported)
#define G2SB_CTX7_G2TILEMODE_0_DST_RD_TILE_MODE_SHIFT                   _MK_SHIFT_CONST(16)
#define G2SB_CTX7_G2TILEMODE_0_DST_RD_TILE_MODE_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2TILEMODE_0_DST_RD_TILE_MODE_SHIFT)
#define G2SB_CTX7_G2TILEMODE_0_DST_RD_TILE_MODE_RANGE                   16:16
#define G2SB_CTX7_G2TILEMODE_0_DST_RD_TILE_MODE_WOFFSET                 0x0
#define G2SB_CTX7_G2TILEMODE_0_DST_RD_TILE_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TILEMODE_0_DST_RD_TILE_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2TILEMODE_0_DST_RD_TILE_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TILEMODE_0_DST_RD_TILE_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TILEMODE_0_DST_RD_TILE_MODE_LINEAR                  _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2TILEMODE_0_DST_RD_TILE_MODE_TILED                   _MK_ENUM_CONST(1)

//destination surface
#define G2SB_CTX7_G2TILEMODE_0_DST_WR_TILE_MODE_SHIFT                   _MK_SHIFT_CONST(20)
#define G2SB_CTX7_G2TILEMODE_0_DST_WR_TILE_MODE_FIELD                   (_MK_MASK_CONST(0x1) << G2SB_CTX7_G2TILEMODE_0_DST_WR_TILE_MODE_SHIFT)
#define G2SB_CTX7_G2TILEMODE_0_DST_WR_TILE_MODE_RANGE                   20:20
#define G2SB_CTX7_G2TILEMODE_0_DST_WR_TILE_MODE_WOFFSET                 0x0
#define G2SB_CTX7_G2TILEMODE_0_DST_WR_TILE_MODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TILEMODE_0_DST_WR_TILE_MODE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define G2SB_CTX7_G2TILEMODE_0_DST_WR_TILE_MODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TILEMODE_0_DST_WR_TILE_MODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2TILEMODE_0_DST_WR_TILE_MODE_LINEAR                  _MK_ENUM_CONST(0)
#define G2SB_CTX7_G2TILEMODE_0_DST_WR_TILE_MODE_TILED                   _MK_ENUM_CONST(1)


// Register G2SB_CTX7_G2PATBASE_0  //{2d,index=47}
#define G2SB_CTX7_G2PATBASE_0                   _MK_ADDR_CONST(0xa047)
#define G2SB_CTX7_G2PATBASE_0_SECURE                    0x0
#define G2SB_CTX7_G2PATBASE_0_WORD_COUNT                        0x1
#define G2SB_CTX7_G2PATBASE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATBASE_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATBASE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATBASE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATBASE_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2PATBASE_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
//pattern base address in tile mode,
// PATBA is the linear address where pixel start
#define G2SB_CTX7_G2PATBASE_0_PAT_BASE_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2PATBASE_0_PAT_BASE_FIELD                    (_MK_MASK_CONST(0xffffffff) << G2SB_CTX7_G2PATBASE_0_PAT_BASE_SHIFT)
#define G2SB_CTX7_G2PATBASE_0_PAT_BASE_RANGE                    31:0
#define G2SB_CTX7_G2PATBASE_0_PAT_BASE_WOFFSET                  0x0
#define G2SB_CTX7_G2PATBASE_0_PAT_BASE_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATBASE_0_PAT_BASE_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATBASE_0_PAT_BASE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2PATBASE_0_PAT_BASE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// SB_SURFBASE registers
//    These registers need only be programmed when using SB.  They point to the base
//        of the various source and destination surfaces.  Technically they are only needed when
//        tiling is enabled, but there is no harm in always programming them.
//    Their counterpart registers (<reg>_SB_SURFBASE with SB_SURFBASE stripped off) indicate the
//        location of the first pixel  to be sourced or written within the surface.
//
//    This register exists to mimic the X, Y (SRCX, SRCY) functionality found in the BitBlt engine.
//
//    For example, to get at pixel X, Y:
//        SRCBA = SRCBA_SB_SURFBASE + Y*stride + X*Bpp

// Register G2SB_CTX7_G2SRCBA_SB_SURFBASE_0
#define G2SB_CTX7_G2SRCBA_SB_SURFBASE_0                 _MK_ADDR_CONST(0xa048)
#define G2SB_CTX7_G2SRCBA_SB_SURFBASE_0_SECURE                  0x0
#define G2SB_CTX7_G2SRCBA_SB_SURFBASE_0_WORD_COUNT                      0x1
#define G2SB_CTX7_G2SRCBA_SB_SURFBASE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCBA_SB_SURFBASE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCBA_SB_SURFBASE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCBA_SB_SURFBASE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCBA_SB_SURFBASE_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2SRCBA_SB_SURFBASE_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2SRCBA:
//    -base of interleaved sources (RGB, YUV)
//    -base of Y plane
// Only used by the StretchBlit Engine
#define G2SB_CTX7_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_FIELD                  (_MK_MASK_CONST(0xffffffff) << G2SB_CTX7_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SHIFT)
#define G2SB_CTX7_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_RANGE                  31:0
#define G2SB_CTX7_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_WOFFSET                        0x0
#define G2SB_CTX7_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2SRCBA_SB_SURFBASE_0_SRC_ADDR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2DSTBA_SB_SURFBASE_0
#define G2SB_CTX7_G2DSTBA_SB_SURFBASE_0                 _MK_ADDR_CONST(0xa049)
#define G2SB_CTX7_G2DSTBA_SB_SURFBASE_0_SECURE                  0x0
#define G2SB_CTX7_G2DSTBA_SB_SURFBASE_0_WORD_COUNT                      0x1
#define G2SB_CTX7_G2DSTBA_SB_SURFBASE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_SB_SURFBASE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_SB_SURFBASE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_SB_SURFBASE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_SB_SURFBASE_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2DSTBA_SB_SURFBASE_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2DSTBA
// Only used by the StretchBlit Engine
#define G2SB_CTX7_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SHIFT                  _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2DSTBA_SB_SURFBASE_0_DST_ADDR_FIELD                  (_MK_MASK_CONST(0xffffffff) << G2SB_CTX7_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SHIFT)
#define G2SB_CTX7_G2DSTBA_SB_SURFBASE_0_DST_ADDR_RANGE                  31:0
#define G2SB_CTX7_G2DSTBA_SB_SURFBASE_0_DST_ADDR_WOFFSET                        0x0
#define G2SB_CTX7_G2DSTBA_SB_SURFBASE_0_DST_ADDR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_SB_SURFBASE_0_DST_ADDR_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_SB_SURFBASE_0_DST_ADDR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2DSTBA_B_SB_SURFBASE_0
#define G2SB_CTX7_G2DSTBA_B_SB_SURFBASE_0                       _MK_ADDR_CONST(0xa04a)
#define G2SB_CTX7_G2DSTBA_B_SB_SURFBASE_0_SECURE                        0x0
#define G2SB_CTX7_G2DSTBA_B_SB_SURFBASE_0_WORD_COUNT                    0x1
#define G2SB_CTX7_G2DSTBA_B_SB_SURFBASE_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_B_SB_SURFBASE_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_B_SB_SURFBASE_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_B_SB_SURFBASE_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_B_SB_SURFBASE_0_READ_MASK                     _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2DSTBA_B_SB_SURFBASE_0_WRITE_MASK                    _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2DSTBA_B
// Only used by the StretchBlit Engine, and G2CONTROLSB.DBSEL() is enabled
#define G2SB_CTX7_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_FIELD                      (_MK_MASK_CONST(0xffffffff) << G2SB_CTX7_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SHIFT)
#define G2SB_CTX7_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_RANGE                      31:0
#define G2SB_CTX7_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_WOFFSET                    0x0
#define G2SB_CTX7_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2DSTBA_B_SB_SURFBASE_0_DST_B_ADDR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2VBA_A_SB_SURFBASE_0
#define G2SB_CTX7_G2VBA_A_SB_SURFBASE_0                 _MK_ADDR_CONST(0xa04b)
#define G2SB_CTX7_G2VBA_A_SB_SURFBASE_0_SECURE                  0x0
#define G2SB_CTX7_G2VBA_A_SB_SURFBASE_0_WORD_COUNT                      0x1
#define G2SB_CTX7_G2VBA_A_SB_SURFBASE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VBA_A_SB_SURFBASE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VBA_A_SB_SURFBASE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VBA_A_SB_SURFBASE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VBA_A_SB_SURFBASE_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2VBA_A_SB_SURFBASE_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2VBA
//     used for YUV 4:2:0 planar, base of V plane
// Only used by the StretchBlit Engine
#define G2SB_CTX7_G2VBA_A_SB_SURFBASE_0_V_ADDR_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2VBA_A_SB_SURFBASE_0_V_ADDR_FIELD                    (_MK_MASK_CONST(0xffffffff) << G2SB_CTX7_G2VBA_A_SB_SURFBASE_0_V_ADDR_SHIFT)
#define G2SB_CTX7_G2VBA_A_SB_SURFBASE_0_V_ADDR_RANGE                    31:0
#define G2SB_CTX7_G2VBA_A_SB_SURFBASE_0_V_ADDR_WOFFSET                  0x0
#define G2SB_CTX7_G2VBA_A_SB_SURFBASE_0_V_ADDR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VBA_A_SB_SURFBASE_0_V_ADDR_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VBA_A_SB_SURFBASE_0_V_ADDR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2VBA_A_SB_SURFBASE_0_V_ADDR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_CTX7_G2UBA_A_SB_SURFBASE_0
#define G2SB_CTX7_G2UBA_A_SB_SURFBASE_0                 _MK_ADDR_CONST(0xa04c)
#define G2SB_CTX7_G2UBA_A_SB_SURFBASE_0_SECURE                  0x0
#define G2SB_CTX7_G2UBA_A_SB_SURFBASE_0_WORD_COUNT                      0x1
#define G2SB_CTX7_G2UBA_A_SB_SURFBASE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2UBA_A_SB_SURFBASE_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2UBA_A_SB_SURFBASE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2UBA_A_SB_SURFBASE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2UBA_A_SB_SURFBASE_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define G2SB_CTX7_G2UBA_A_SB_SURFBASE_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// surface address corresponding to G2VBA
//     used for YUV 4:2:0 planar, base of U plane
// Only used by the StretchBlit Engine
#define G2SB_CTX7_G2UBA_A_SB_SURFBASE_0_U_ADDR_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_CTX7_G2UBA_A_SB_SURFBASE_0_U_ADDR_FIELD                    (_MK_MASK_CONST(0xffffffff) << G2SB_CTX7_G2UBA_A_SB_SURFBASE_0_U_ADDR_SHIFT)
#define G2SB_CTX7_G2UBA_A_SB_SURFBASE_0_U_ADDR_RANGE                    31:0
#define G2SB_CTX7_G2UBA_A_SB_SURFBASE_0_U_ADDR_WOFFSET                  0x0
#define G2SB_CTX7_G2UBA_A_SB_SURFBASE_0_U_ADDR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2UBA_A_SB_SURFBASE_0_U_ADDR_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2UBA_A_SB_SURFBASE_0_U_ADDR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_CTX7_G2UBA_A_SB_SURFBASE_0_U_ADDR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//These registers can be only accessed by register read/write not command fifo interface
//When context switch fails, cpu received interrupt from G2,
// context switch steps
// 1. clears G2INTERRUPT/CTXSW_INT bit
// 2. read out G2NXTCXTSWITCH/NEXT_CLASS NEXT_CHANNEL to determine failing on which class channel
// 3. decide which context can be switch to
// 4. back up the context contents that will be overwritten
// 5. write channel into G2CLASSCHANNEL_REGONLY/CURR_CHANNEL
// 6. command fifo flow resumes.

// Register G2SB_SWITCH_G2INTERRUPT_0  //interrupt status register  index=0
#define G2SB_SWITCH_G2INTERRUPT_0                       _MK_ADDR_CONST(0xf000)
#define G2SB_SWITCH_G2INTERRUPT_0_SECURE                        0x0
#define G2SB_SWITCH_G2INTERRUPT_0_WORD_COUNT                    0x1
#define G2SB_SWITCH_G2INTERRUPT_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2INTERRUPT_0_RESET_MASK                    _MK_MASK_CONST(0x7)
#define G2SB_SWITCH_G2INTERRUPT_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2INTERRUPT_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2INTERRUPT_0_READ_MASK                     _MK_MASK_CONST(0x7)
#define G2SB_SWITCH_G2INTERRUPT_0_WRITE_MASK                    _MK_MASK_CONST(0x7)
#define G2SB_SWITCH_G2INTERRUPT_0_CTXSW_INT_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_SWITCH_G2INTERRUPT_0_CTXSW_INT_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_SWITCH_G2INTERRUPT_0_CTXSW_INT_SHIFT)
#define G2SB_SWITCH_G2INTERRUPT_0_CTXSW_INT_RANGE                       0:0
#define G2SB_SWITCH_G2INTERRUPT_0_CTXSW_INT_WOFFSET                     0x0
#define G2SB_SWITCH_G2INTERRUPT_0_CTXSW_INT_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2INTERRUPT_0_CTXSW_INT_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_G2INTERRUPT_0_CTXSW_INT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2INTERRUPT_0_CTXSW_INT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

#define G2SB_SWITCH_G2INTERRUPT_0_VI_DONE_SHIFT                 _MK_SHIFT_CONST(1)
#define G2SB_SWITCH_G2INTERRUPT_0_VI_DONE_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_SWITCH_G2INTERRUPT_0_VI_DONE_SHIFT)
#define G2SB_SWITCH_G2INTERRUPT_0_VI_DONE_RANGE                 1:1
#define G2SB_SWITCH_G2INTERRUPT_0_VI_DONE_WOFFSET                       0x0
#define G2SB_SWITCH_G2INTERRUPT_0_VI_DONE_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2INTERRUPT_0_VI_DONE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_G2INTERRUPT_0_VI_DONE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2INTERRUPT_0_VI_DONE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

#define G2SB_SWITCH_G2INTERRUPT_0_GR2D_IDLE_SHIFT                       _MK_SHIFT_CONST(2)
#define G2SB_SWITCH_G2INTERRUPT_0_GR2D_IDLE_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_SWITCH_G2INTERRUPT_0_GR2D_IDLE_SHIFT)
#define G2SB_SWITCH_G2INTERRUPT_0_GR2D_IDLE_RANGE                       2:2
#define G2SB_SWITCH_G2INTERRUPT_0_GR2D_IDLE_WOFFSET                     0x0
#define G2SB_SWITCH_G2INTERRUPT_0_GR2D_IDLE_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2INTERRUPT_0_GR2D_IDLE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_G2INTERRUPT_0_GR2D_IDLE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2INTERRUPT_0_GR2D_IDLE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_SWITCH_G2INTENABLE_0  //interrupt enable register  index=1
#define G2SB_SWITCH_G2INTENABLE_0                       _MK_ADDR_CONST(0xf001)
#define G2SB_SWITCH_G2INTENABLE_0_SECURE                        0x0
#define G2SB_SWITCH_G2INTENABLE_0_WORD_COUNT                    0x1
#define G2SB_SWITCH_G2INTENABLE_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2INTENABLE_0_RESET_MASK                    _MK_MASK_CONST(0x7)
#define G2SB_SWITCH_G2INTENABLE_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2INTENABLE_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2INTENABLE_0_READ_MASK                     _MK_MASK_CONST(0x7)
#define G2SB_SWITCH_G2INTENABLE_0_WRITE_MASK                    _MK_MASK_CONST(0x7)
#define G2SB_SWITCH_G2INTENABLE_0_CTXSW_INT_ENABLE_SHIFT                        _MK_SHIFT_CONST(0)
#define G2SB_SWITCH_G2INTENABLE_0_CTXSW_INT_ENABLE_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_SWITCH_G2INTENABLE_0_CTXSW_INT_ENABLE_SHIFT)
#define G2SB_SWITCH_G2INTENABLE_0_CTXSW_INT_ENABLE_RANGE                        0:0
#define G2SB_SWITCH_G2INTENABLE_0_CTXSW_INT_ENABLE_WOFFSET                      0x0
#define G2SB_SWITCH_G2INTENABLE_0_CTXSW_INT_ENABLE_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2INTENABLE_0_CTXSW_INT_ENABLE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_G2INTENABLE_0_CTXSW_INT_ENABLE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2INTENABLE_0_CTXSW_INT_ENABLE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

#define G2SB_SWITCH_G2INTENABLE_0_VI_DONE_ENABLE_SHIFT                  _MK_SHIFT_CONST(1)
#define G2SB_SWITCH_G2INTENABLE_0_VI_DONE_ENABLE_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_SWITCH_G2INTENABLE_0_VI_DONE_ENABLE_SHIFT)
#define G2SB_SWITCH_G2INTENABLE_0_VI_DONE_ENABLE_RANGE                  1:1
#define G2SB_SWITCH_G2INTENABLE_0_VI_DONE_ENABLE_WOFFSET                        0x0
#define G2SB_SWITCH_G2INTENABLE_0_VI_DONE_ENABLE_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2INTENABLE_0_VI_DONE_ENABLE_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_G2INTENABLE_0_VI_DONE_ENABLE_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2INTENABLE_0_VI_DONE_ENABLE_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

#define G2SB_SWITCH_G2INTENABLE_0_GR2D_IDLE_ENABLE_SHIFT                        _MK_SHIFT_CONST(2)
#define G2SB_SWITCH_G2INTENABLE_0_GR2D_IDLE_ENABLE_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_SWITCH_G2INTENABLE_0_GR2D_IDLE_ENABLE_SHIFT)
#define G2SB_SWITCH_G2INTENABLE_0_GR2D_IDLE_ENABLE_RANGE                        2:2
#define G2SB_SWITCH_G2INTENABLE_0_GR2D_IDLE_ENABLE_WOFFSET                      0x0
#define G2SB_SWITCH_G2INTENABLE_0_GR2D_IDLE_ENABLE_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2INTENABLE_0_GR2D_IDLE_ENABLE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_G2INTENABLE_0_GR2D_IDLE_ENABLE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2INTENABLE_0_GR2D_IDLE_ENABLE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)


// Register G2SB_SWITCH_G2CURRENTCONTEXT_0  // index=2
//8'h1  context0
//8'h2  context1
//8'h4  context2
//8'h8  context3
//8'h10 context4
//8'h20 context5
//8'h40 context6
//8'h80 context7
#define G2SB_SWITCH_G2CURRENTCONTEXT_0                  _MK_ADDR_CONST(0xf002)
#define G2SB_SWITCH_G2CURRENTCONTEXT_0_SECURE                   0x0
#define G2SB_SWITCH_G2CURRENTCONTEXT_0_WORD_COUNT                       0x1
#define G2SB_SWITCH_G2CURRENTCONTEXT_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2CURRENTCONTEXT_0_RESET_MASK                       _MK_MASK_CONST(0xff)
#define G2SB_SWITCH_G2CURRENTCONTEXT_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2CURRENTCONTEXT_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2CURRENTCONTEXT_0_READ_MASK                        _MK_MASK_CONST(0xff)
#define G2SB_SWITCH_G2CURRENTCONTEXT_0_WRITE_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2CURRENTCONTEXT_0_CURR_CONTEXT_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_SWITCH_G2CURRENTCONTEXT_0_CURR_CONTEXT_FIELD                       (_MK_MASK_CONST(0xff) << G2SB_SWITCH_G2CURRENTCONTEXT_0_CURR_CONTEXT_SHIFT)
#define G2SB_SWITCH_G2CURRENTCONTEXT_0_CURR_CONTEXT_RANGE                       7:0
#define G2SB_SWITCH_G2CURRENTCONTEXT_0_CURR_CONTEXT_WOFFSET                     0x0
#define G2SB_SWITCH_G2CURRENTCONTEXT_0_CURR_CONTEXT_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2CURRENTCONTEXT_0_CURR_CONTEXT_DEFAULT_MASK                        _MK_MASK_CONST(0xff)
#define G2SB_SWITCH_G2CURRENTCONTEXT_0_CURR_CONTEXT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2CURRENTCONTEXT_0_CURR_CONTEXT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_SWITCH_G2NXTCXTSWITCH_0  // index=3
//When context switch fails, software needs read out this register to find out
//failing on which class and channel,
#define G2SB_SWITCH_G2NXTCXTSWITCH_0                    _MK_ADDR_CONST(0xf003)
#define G2SB_SWITCH_G2NXTCXTSWITCH_0_SECURE                     0x0
#define G2SB_SWITCH_G2NXTCXTSWITCH_0_WORD_COUNT                         0x1
#define G2SB_SWITCH_G2NXTCXTSWITCH_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2NXTCXTSWITCH_0_RESET_MASK                         _MK_MASK_CONST(0xf03ff)
#define G2SB_SWITCH_G2NXTCXTSWITCH_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2NXTCXTSWITCH_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2NXTCXTSWITCH_0_READ_MASK                  _MK_MASK_CONST(0xf03ff)
#define G2SB_SWITCH_G2NXTCXTSWITCH_0_WRITE_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2NXTCXTSWITCH_0_NEXT_CLASS_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_SWITCH_G2NXTCXTSWITCH_0_NEXT_CLASS_FIELD                   (_MK_MASK_CONST(0x3ff) << G2SB_SWITCH_G2NXTCXTSWITCH_0_NEXT_CLASS_SHIFT)
#define G2SB_SWITCH_G2NXTCXTSWITCH_0_NEXT_CLASS_RANGE                   9:0
#define G2SB_SWITCH_G2NXTCXTSWITCH_0_NEXT_CLASS_WOFFSET                 0x0
#define G2SB_SWITCH_G2NXTCXTSWITCH_0_NEXT_CLASS_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2NXTCXTSWITCH_0_NEXT_CLASS_DEFAULT_MASK                    _MK_MASK_CONST(0x3ff)
#define G2SB_SWITCH_G2NXTCXTSWITCH_0_NEXT_CLASS_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2NXTCXTSWITCH_0_NEXT_CLASS_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

#define G2SB_SWITCH_G2NXTCXTSWITCH_0_NEXT_CHANNEL_SHIFT                 _MK_SHIFT_CONST(16)
#define G2SB_SWITCH_G2NXTCXTSWITCH_0_NEXT_CHANNEL_FIELD                 (_MK_MASK_CONST(0xf) << G2SB_SWITCH_G2NXTCXTSWITCH_0_NEXT_CHANNEL_SHIFT)
#define G2SB_SWITCH_G2NXTCXTSWITCH_0_NEXT_CHANNEL_RANGE                 19:16
#define G2SB_SWITCH_G2NXTCXTSWITCH_0_NEXT_CHANNEL_WOFFSET                       0x0
#define G2SB_SWITCH_G2NXTCXTSWITCH_0_NEXT_CHANNEL_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2NXTCXTSWITCH_0_NEXT_CHANNEL_DEFAULT_MASK                  _MK_MASK_CONST(0xf)
#define G2SB_SWITCH_G2NXTCXTSWITCH_0_NEXT_CHANNEL_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2NXTCXTSWITCH_0_NEXT_CHANNEL_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_SWITCH_G2GLOBALCONTROL_0  // index=4
//initial index of destination address, 3 selections
//00 DSTBA
//01 DSTBA_B
//10 DSTBA_C
#define G2SB_SWITCH_G2GLOBALCONTROL_0                   _MK_ADDR_CONST(0xf004)
#define G2SB_SWITCH_G2GLOBALCONTROL_0_SECURE                    0x0
#define G2SB_SWITCH_G2GLOBALCONTROL_0_WORD_COUNT                        0x1
#define G2SB_SWITCH_G2GLOBALCONTROL_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2GLOBALCONTROL_0_RESET_MASK                        _MK_MASK_CONST(0x3)
#define G2SB_SWITCH_G2GLOBALCONTROL_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2GLOBALCONTROL_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2GLOBALCONTROL_0_READ_MASK                         _MK_MASK_CONST(0x3)
#define G2SB_SWITCH_G2GLOBALCONTROL_0_WRITE_MASK                        _MK_MASK_CONST(0x3)
//31:8 rw CLOCKFREEON init = 0
#define G2SB_SWITCH_G2GLOBALCONTROL_0_DST_ADDR_IDX_INI_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_SWITCH_G2GLOBALCONTROL_0_DST_ADDR_IDX_INI_FIELD                    (_MK_MASK_CONST(0x3) << G2SB_SWITCH_G2GLOBALCONTROL_0_DST_ADDR_IDX_INI_SHIFT)
#define G2SB_SWITCH_G2GLOBALCONTROL_0_DST_ADDR_IDX_INI_RANGE                    1:0
#define G2SB_SWITCH_G2GLOBALCONTROL_0_DST_ADDR_IDX_INI_WOFFSET                  0x0
#define G2SB_SWITCH_G2GLOBALCONTROL_0_DST_ADDR_IDX_INI_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2GLOBALCONTROL_0_DST_ADDR_IDX_INI_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define G2SB_SWITCH_G2GLOBALCONTROL_0_DST_ADDR_IDX_INI_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2GLOBALCONTROL_0_DST_ADDR_IDX_INI_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Register G2SB_SWITCH_G2GLOBALCONTROLB_0  // index=5
#define G2SB_SWITCH_G2GLOBALCONTROLB_0                  _MK_ADDR_CONST(0xf005)
#define G2SB_SWITCH_G2GLOBALCONTROLB_0_SECURE                   0x0
#define G2SB_SWITCH_G2GLOBALCONTROLB_0_WORD_COUNT                       0x1
#define G2SB_SWITCH_G2GLOBALCONTROLB_0_RESET_VAL                        _MK_MASK_CONST(0xe1)
#define G2SB_SWITCH_G2GLOBALCONTROLB_0_RESET_MASK                       _MK_MASK_CONST(0xff)
#define G2SB_SWITCH_G2GLOBALCONTROLB_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2GLOBALCONTROLB_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2GLOBALCONTROLB_0_READ_MASK                        _MK_MASK_CONST(0xff)
#define G2SB_SWITCH_G2GLOBALCONTROLB_0_WRITE_MASK                       _MK_MASK_CONST(0xff)
#define G2SB_SWITCH_G2GLOBALCONTROLB_0_OCTAN_BIAS_SHIFT                 _MK_SHIFT_CONST(0)
#define G2SB_SWITCH_G2GLOBALCONTROLB_0_OCTAN_BIAS_FIELD                 (_MK_MASK_CONST(0xff) << G2SB_SWITCH_G2GLOBALCONTROLB_0_OCTAN_BIAS_SHIFT)
#define G2SB_SWITCH_G2GLOBALCONTROLB_0_OCTAN_BIAS_RANGE                 7:0
#define G2SB_SWITCH_G2GLOBALCONTROLB_0_OCTAN_BIAS_WOFFSET                       0x0
#define G2SB_SWITCH_G2GLOBALCONTROLB_0_OCTAN_BIAS_DEFAULT                       _MK_MASK_CONST(0xe1)
#define G2SB_SWITCH_G2GLOBALCONTROLB_0_OCTAN_BIAS_DEFAULT_MASK                  _MK_MASK_CONST(0xff)
#define G2SB_SWITCH_G2GLOBALCONTROLB_0_OCTAN_BIAS_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2GLOBALCONTROLB_0_OCTAN_BIAS_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register G2SB_SWITCH_G2WORKINGSTAT_0  // index=6
#define G2SB_SWITCH_G2WORKINGSTAT_0                     _MK_ADDR_CONST(0xf006)
#define G2SB_SWITCH_G2WORKINGSTAT_0_SECURE                      0x0
#define G2SB_SWITCH_G2WORKINGSTAT_0_WORD_COUNT                  0x1
#define G2SB_SWITCH_G2WORKINGSTAT_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2WORKINGSTAT_0_RESET_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2WORKINGSTAT_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2WORKINGSTAT_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2WORKINGSTAT_0_READ_MASK                   _MK_MASK_CONST(0xfff)
#define G2SB_SWITCH_G2WORKINGSTAT_0_WRITE_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2WORKINGSTAT_0_WORKING_CHANNEL_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_SWITCH_G2WORKINGSTAT_0_WORKING_CHANNEL_FIELD                       (_MK_MASK_CONST(0xf) << G2SB_SWITCH_G2WORKINGSTAT_0_WORKING_CHANNEL_SHIFT)
#define G2SB_SWITCH_G2WORKINGSTAT_0_WORKING_CHANNEL_RANGE                       3:0
#define G2SB_SWITCH_G2WORKINGSTAT_0_WORKING_CHANNEL_WOFFSET                     0x0
#define G2SB_SWITCH_G2WORKINGSTAT_0_WORKING_CHANNEL_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2WORKINGSTAT_0_WORKING_CHANNEL_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2WORKINGSTAT_0_WORKING_CHANNEL_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2WORKINGSTAT_0_WORKING_CHANNEL_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

#define G2SB_SWITCH_G2WORKINGSTAT_0_WORKING_CTX_SHIFT                   _MK_SHIFT_CONST(4)
#define G2SB_SWITCH_G2WORKINGSTAT_0_WORKING_CTX_FIELD                   (_MK_MASK_CONST(0xff) << G2SB_SWITCH_G2WORKINGSTAT_0_WORKING_CTX_SHIFT)
#define G2SB_SWITCH_G2WORKINGSTAT_0_WORKING_CTX_RANGE                   11:4
#define G2SB_SWITCH_G2WORKINGSTAT_0_WORKING_CTX_WOFFSET                 0x0
#define G2SB_SWITCH_G2WORKINGSTAT_0_WORKING_CTX_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2WORKINGSTAT_0_WORKING_CTX_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2WORKINGSTAT_0_WORKING_CTX_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2WORKINGSTAT_0_WORKING_CTX_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Register G2SB_SWITCH_G2BUFTHRESHOLD_0  // index=7
#define G2SB_SWITCH_G2BUFTHRESHOLD_0                    _MK_ADDR_CONST(0xf007)
#define G2SB_SWITCH_G2BUFTHRESHOLD_0_SECURE                     0x0
#define G2SB_SWITCH_G2BUFTHRESHOLD_0_WORD_COUNT                         0x1
#define G2SB_SWITCH_G2BUFTHRESHOLD_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2BUFTHRESHOLD_0_RESET_MASK                         _MK_MASK_CONST(0xf)
#define G2SB_SWITCH_G2BUFTHRESHOLD_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2BUFTHRESHOLD_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2BUFTHRESHOLD_0_READ_MASK                  _MK_MASK_CONST(0xf)
#define G2SB_SWITCH_G2BUFTHRESHOLD_0_WRITE_MASK                         _MK_MASK_CONST(0xf)
#define G2SB_SWITCH_G2BUFTHRESHOLD_0_BUFFER_COUNT_THRESHOLD_SHIFT                       _MK_SHIFT_CONST(0)
#define G2SB_SWITCH_G2BUFTHRESHOLD_0_BUFFER_COUNT_THRESHOLD_FIELD                       (_MK_MASK_CONST(0xf) << G2SB_SWITCH_G2BUFTHRESHOLD_0_BUFFER_COUNT_THRESHOLD_SHIFT)
#define G2SB_SWITCH_G2BUFTHRESHOLD_0_BUFFER_COUNT_THRESHOLD_RANGE                       3:0
#define G2SB_SWITCH_G2BUFTHRESHOLD_0_BUFFER_COUNT_THRESHOLD_WOFFSET                     0x0
#define G2SB_SWITCH_G2BUFTHRESHOLD_0_BUFFER_COUNT_THRESHOLD_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2BUFTHRESHOLD_0_BUFFER_COUNT_THRESHOLD_DEFAULT_MASK                        _MK_MASK_CONST(0xf)
#define G2SB_SWITCH_G2BUFTHRESHOLD_0_BUFFER_COUNT_THRESHOLD_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2BUFTHRESHOLD_0_BUFFER_COUNT_THRESHOLD_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register G2SB_SWITCH_CLKEN_OVERIDE_0  // index=8
#define G2SB_SWITCH_CLKEN_OVERIDE_0                     _MK_ADDR_CONST(0xf008)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SECURE                      0x0
#define G2SB_SWITCH_CLKEN_OVERIDE_0_WORD_COUNT                  0x1
#define G2SB_SWITCH_CLKEN_OVERIDE_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_RESET_MASK                  _MK_MASK_CONST(0x7fffff)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_READ_MASK                   _MK_MASK_CONST(0x7fffff)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_WRITE_MASK                  _MK_MASK_CONST(0x7fffff)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT0_CLKEN_OVR_SHIFT                    _MK_SHIFT_CONST(0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT0_CLKEN_OVR_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT0_CLKEN_OVR_SHIFT)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT0_CLKEN_OVR_RANGE                    0:0
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT0_CLKEN_OVR_WOFFSET                  0x0
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT0_CLKEN_OVR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT0_CLKEN_OVR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT0_CLKEN_OVR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT0_CLKEN_OVR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT0_CLKEN_OVR_INIT_ENUM                        CLK_GATED
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT0_CLKEN_OVR_CLK_GATED                        _MK_ENUM_CONST(0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT0_CLKEN_OVR_CLK_ALWAYS_ON                    _MK_ENUM_CONST(1)

#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT1_CLKEN_OVR_SHIFT                    _MK_SHIFT_CONST(1)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT1_CLKEN_OVR_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT1_CLKEN_OVR_SHIFT)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT1_CLKEN_OVR_RANGE                    1:1
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT1_CLKEN_OVR_WOFFSET                  0x0
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT1_CLKEN_OVR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT1_CLKEN_OVR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT1_CLKEN_OVR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT1_CLKEN_OVR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT1_CLKEN_OVR_INIT_ENUM                        CLK_GATED
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT1_CLKEN_OVR_CLK_GATED                        _MK_ENUM_CONST(0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT1_CLKEN_OVR_CLK_ALWAYS_ON                    _MK_ENUM_CONST(1)

#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT2_CLKEN_OVR_SHIFT                    _MK_SHIFT_CONST(2)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT2_CLKEN_OVR_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT2_CLKEN_OVR_SHIFT)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT2_CLKEN_OVR_RANGE                    2:2
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT2_CLKEN_OVR_WOFFSET                  0x0
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT2_CLKEN_OVR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT2_CLKEN_OVR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT2_CLKEN_OVR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT2_CLKEN_OVR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT2_CLKEN_OVR_INIT_ENUM                        CLK_GATED
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT2_CLKEN_OVR_CLK_GATED                        _MK_ENUM_CONST(0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT2_CLKEN_OVR_CLK_ALWAYS_ON                    _MK_ENUM_CONST(1)

#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT3_CLKEN_OVR_SHIFT                    _MK_SHIFT_CONST(3)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT3_CLKEN_OVR_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT3_CLKEN_OVR_SHIFT)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT3_CLKEN_OVR_RANGE                    3:3
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT3_CLKEN_OVR_WOFFSET                  0x0
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT3_CLKEN_OVR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT3_CLKEN_OVR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT3_CLKEN_OVR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT3_CLKEN_OVR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT3_CLKEN_OVR_INIT_ENUM                        CLK_GATED
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT3_CLKEN_OVR_CLK_GATED                        _MK_ENUM_CONST(0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT3_CLKEN_OVR_CLK_ALWAYS_ON                    _MK_ENUM_CONST(1)

#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT4_CLKEN_OVR_SHIFT                    _MK_SHIFT_CONST(4)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT4_CLKEN_OVR_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT4_CLKEN_OVR_SHIFT)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT4_CLKEN_OVR_RANGE                    4:4
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT4_CLKEN_OVR_WOFFSET                  0x0
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT4_CLKEN_OVR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT4_CLKEN_OVR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT4_CLKEN_OVR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT4_CLKEN_OVR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT4_CLKEN_OVR_INIT_ENUM                        CLK_GATED
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT4_CLKEN_OVR_CLK_GATED                        _MK_ENUM_CONST(0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT4_CLKEN_OVR_CLK_ALWAYS_ON                    _MK_ENUM_CONST(1)

#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT5_CLKEN_OVR_SHIFT                    _MK_SHIFT_CONST(5)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT5_CLKEN_OVR_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT5_CLKEN_OVR_SHIFT)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT5_CLKEN_OVR_RANGE                    5:5
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT5_CLKEN_OVR_WOFFSET                  0x0
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT5_CLKEN_OVR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT5_CLKEN_OVR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT5_CLKEN_OVR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT5_CLKEN_OVR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT5_CLKEN_OVR_INIT_ENUM                        CLK_GATED
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT5_CLKEN_OVR_CLK_GATED                        _MK_ENUM_CONST(0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT5_CLKEN_OVR_CLK_ALWAYS_ON                    _MK_ENUM_CONST(1)

#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT6_CLKEN_OVR_SHIFT                    _MK_SHIFT_CONST(6)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT6_CLKEN_OVR_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT6_CLKEN_OVR_SHIFT)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT6_CLKEN_OVR_RANGE                    6:6
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT6_CLKEN_OVR_WOFFSET                  0x0
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT6_CLKEN_OVR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT6_CLKEN_OVR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT6_CLKEN_OVR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT6_CLKEN_OVR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT6_CLKEN_OVR_INIT_ENUM                        CLK_GATED
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT6_CLKEN_OVR_CLK_GATED                        _MK_ENUM_CONST(0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT6_CLKEN_OVR_CLK_ALWAYS_ON                    _MK_ENUM_CONST(1)

#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT7_CLKEN_OVR_SHIFT                    _MK_SHIFT_CONST(7)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT7_CLKEN_OVR_FIELD                    (_MK_MASK_CONST(0x1) << G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT7_CLKEN_OVR_SHIFT)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT7_CLKEN_OVR_RANGE                    7:7
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT7_CLKEN_OVR_WOFFSET                  0x0
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT7_CLKEN_OVR_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT7_CLKEN_OVR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT7_CLKEN_OVR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT7_CLKEN_OVR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT7_CLKEN_OVR_INIT_ENUM                        CLK_GATED
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT7_CLKEN_OVR_CLK_GATED                        _MK_ENUM_CONST(0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CONTEXT7_CLKEN_OVR_CLK_ALWAYS_ON                    _MK_ENUM_CONST(1)

#define G2SB_SWITCH_CLKEN_OVERIDE_0_CON_CLKEN_OVR_SHIFT                 _MK_SHIFT_CONST(8)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CON_CLKEN_OVR_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_SWITCH_CLKEN_OVERIDE_0_CON_CLKEN_OVR_SHIFT)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CON_CLKEN_OVR_RANGE                 8:8
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CON_CLKEN_OVR_WOFFSET                       0x0
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CON_CLKEN_OVR_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CON_CLKEN_OVR_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CON_CLKEN_OVR_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CON_CLKEN_OVR_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CON_CLKEN_OVR_INIT_ENUM                     CLK_GATED
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CON_CLKEN_OVR_CLK_GATED                     _MK_ENUM_CONST(0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_CON_CLKEN_OVR_CLK_ALWAYS_ON                 _MK_ENUM_CONST(1)

//It forces ccw_g2dw2mc_clk on too
#define G2SB_SWITCH_CLKEN_OVERIDE_0_DSTW_CLKEN_OVR_SHIFT                        _MK_SHIFT_CONST(9)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_DSTW_CLKEN_OVR_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_SWITCH_CLKEN_OVERIDE_0_DSTW_CLKEN_OVR_SHIFT)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_DSTW_CLKEN_OVR_RANGE                        9:9
#define G2SB_SWITCH_CLKEN_OVERIDE_0_DSTW_CLKEN_OVR_WOFFSET                      0x0
#define G2SB_SWITCH_CLKEN_OVERIDE_0_DSTW_CLKEN_OVR_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_DSTW_CLKEN_OVR_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_DSTW_CLKEN_OVR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_DSTW_CLKEN_OVR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_DSTW_CLKEN_OVR_INIT_ENUM                    CLK_GATED
#define G2SB_SWITCH_CLKEN_OVERIDE_0_DSTW_CLKEN_OVR_CLK_GATED                    _MK_ENUM_CONST(0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_DSTW_CLKEN_OVR_CLK_ALWAYS_ON                        _MK_ENUM_CONST(1)

#define G2SB_SWITCH_CLKEN_OVERIDE_0_BBLT_CLKEN_OVR_SHIFT                        _MK_SHIFT_CONST(10)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_BBLT_CLKEN_OVR_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_SWITCH_CLKEN_OVERIDE_0_BBLT_CLKEN_OVR_SHIFT)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_BBLT_CLKEN_OVR_RANGE                        10:10
#define G2SB_SWITCH_CLKEN_OVERIDE_0_BBLT_CLKEN_OVR_WOFFSET                      0x0
#define G2SB_SWITCH_CLKEN_OVERIDE_0_BBLT_CLKEN_OVR_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_BBLT_CLKEN_OVR_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_BBLT_CLKEN_OVR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_BBLT_CLKEN_OVR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_BBLT_CLKEN_OVR_INIT_ENUM                    CLK_GATED
#define G2SB_SWITCH_CLKEN_OVERIDE_0_BBLT_CLKEN_OVR_CLK_GATED                    _MK_ENUM_CONST(0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_BBLT_CLKEN_OVR_CLK_ALWAYS_ON                        _MK_ENUM_CONST(1)

#define G2SB_SWITCH_CLKEN_OVERIDE_0_SRC_CLKEN_OVR_SHIFT                 _MK_SHIFT_CONST(11)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SRC_CLKEN_OVR_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_SWITCH_CLKEN_OVERIDE_0_SRC_CLKEN_OVR_SHIFT)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SRC_CLKEN_OVR_RANGE                 11:11
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SRC_CLKEN_OVR_WOFFSET                       0x0
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SRC_CLKEN_OVR_DEFAULT                       _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SRC_CLKEN_OVR_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SRC_CLKEN_OVR_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SRC_CLKEN_OVR_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SRC_CLKEN_OVR_INIT_ENUM                     CLK_GATED
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SRC_CLKEN_OVR_CLK_GATED                     _MK_ENUM_CONST(0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SRC_CLKEN_OVR_CLK_ALWAYS_ON                 _MK_ENUM_CONST(1)

//It forces cbr_g2sr2mc_clk on too
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SRCR_CLKEN_OVR_SHIFT                        _MK_SHIFT_CONST(12)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SRCR_CLKEN_OVR_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_SWITCH_CLKEN_OVERIDE_0_SRCR_CLKEN_OVR_SHIFT)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SRCR_CLKEN_OVR_RANGE                        12:12
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SRCR_CLKEN_OVR_WOFFSET                      0x0
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SRCR_CLKEN_OVR_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SRCR_CLKEN_OVR_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SRCR_CLKEN_OVR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SRCR_CLKEN_OVR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SRCR_CLKEN_OVR_INIT_ENUM                    CLK_GATED
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SRCR_CLKEN_OVR_CLK_GATED                    _MK_ENUM_CONST(0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SRCR_CLKEN_OVR_CLK_ALWAYS_ON                        _MK_ENUM_CONST(1)

//It forces cbr_g2pr2mc_clk on too
#define G2SB_SWITCH_CLKEN_OVERIDE_0_PATR_CLKEN_OVR_SHIFT                        _MK_SHIFT_CONST(13)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_PATR_CLKEN_OVR_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_SWITCH_CLKEN_OVERIDE_0_PATR_CLKEN_OVR_SHIFT)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_PATR_CLKEN_OVR_RANGE                        13:13
#define G2SB_SWITCH_CLKEN_OVERIDE_0_PATR_CLKEN_OVR_WOFFSET                      0x0
#define G2SB_SWITCH_CLKEN_OVERIDE_0_PATR_CLKEN_OVR_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_PATR_CLKEN_OVR_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_PATR_CLKEN_OVR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_PATR_CLKEN_OVR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_PATR_CLKEN_OVR_INIT_ENUM                    CLK_GATED
#define G2SB_SWITCH_CLKEN_OVERIDE_0_PATR_CLKEN_OVR_CLK_GATED                    _MK_ENUM_CONST(0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_PATR_CLKEN_OVR_CLK_ALWAYS_ON                        _MK_ENUM_CONST(1)

#define G2SB_SWITCH_CLKEN_OVERIDE_0_DSTR_CLKEN_OVR_SHIFT                        _MK_SHIFT_CONST(14)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_DSTR_CLKEN_OVR_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_SWITCH_CLKEN_OVERIDE_0_DSTR_CLKEN_OVR_SHIFT)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_DSTR_CLKEN_OVR_RANGE                        14:14
#define G2SB_SWITCH_CLKEN_OVERIDE_0_DSTR_CLKEN_OVR_WOFFSET                      0x0
#define G2SB_SWITCH_CLKEN_OVERIDE_0_DSTR_CLKEN_OVR_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_DSTR_CLKEN_OVR_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_DSTR_CLKEN_OVR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_DSTR_CLKEN_OVR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_DSTR_CLKEN_OVR_INIT_ENUM                    CLK_GATED
#define G2SB_SWITCH_CLKEN_OVERIDE_0_DSTR_CLKEN_OVR_CLK_GATED                    _MK_ENUM_CONST(0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_DSTR_CLKEN_OVR_CLK_ALWAYS_ON                        _MK_ENUM_CONST(1)

#define G2SB_SWITCH_CLKEN_OVERIDE_0_FR_CLKEN_OVR_SHIFT                  _MK_SHIFT_CONST(15)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_FR_CLKEN_OVR_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_SWITCH_CLKEN_OVERIDE_0_FR_CLKEN_OVR_SHIFT)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_FR_CLKEN_OVR_RANGE                  15:15
#define G2SB_SWITCH_CLKEN_OVERIDE_0_FR_CLKEN_OVR_WOFFSET                        0x0
#define G2SB_SWITCH_CLKEN_OVERIDE_0_FR_CLKEN_OVR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_FR_CLKEN_OVR_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_FR_CLKEN_OVR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_FR_CLKEN_OVR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_FR_CLKEN_OVR_INIT_ENUM                      CLK_GATED
#define G2SB_SWITCH_CLKEN_OVERIDE_0_FR_CLKEN_OVR_CLK_GATED                      _MK_ENUM_CONST(0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_FR_CLKEN_OVR_CLK_ALWAYS_ON                  _MK_ENUM_CONST(1)

#define G2SB_SWITCH_CLKEN_OVERIDE_0_LINE_CLKEN_OVR_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_LINE_CLKEN_OVR_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_SWITCH_CLKEN_OVERIDE_0_LINE_CLKEN_OVR_SHIFT)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_LINE_CLKEN_OVR_RANGE                        16:16
#define G2SB_SWITCH_CLKEN_OVERIDE_0_LINE_CLKEN_OVR_WOFFSET                      0x0
#define G2SB_SWITCH_CLKEN_OVERIDE_0_LINE_CLKEN_OVR_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_LINE_CLKEN_OVR_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_LINE_CLKEN_OVR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_LINE_CLKEN_OVR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_LINE_CLKEN_OVR_INIT_ENUM                    CLK_GATED
#define G2SB_SWITCH_CLKEN_OVERIDE_0_LINE_CLKEN_OVR_CLK_GATED                    _MK_ENUM_CONST(0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_LINE_CLKEN_OVR_CLK_ALWAYS_ON                        _MK_ENUM_CONST(1)

#define G2SB_SWITCH_CLKEN_OVERIDE_0_LINER_CLKEN_OVR_SHIFT                       _MK_SHIFT_CONST(17)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_LINER_CLKEN_OVR_FIELD                       (_MK_MASK_CONST(0x1) << G2SB_SWITCH_CLKEN_OVERIDE_0_LINER_CLKEN_OVR_SHIFT)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_LINER_CLKEN_OVR_RANGE                       17:17
#define G2SB_SWITCH_CLKEN_OVERIDE_0_LINER_CLKEN_OVR_WOFFSET                     0x0
#define G2SB_SWITCH_CLKEN_OVERIDE_0_LINER_CLKEN_OVR_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_LINER_CLKEN_OVR_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_LINER_CLKEN_OVR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_LINER_CLKEN_OVR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_LINER_CLKEN_OVR_INIT_ENUM                   CLK_GATED
#define G2SB_SWITCH_CLKEN_OVERIDE_0_LINER_CLKEN_OVR_CLK_GATED                   _MK_ENUM_CONST(0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_LINER_CLKEN_OVR_CLK_ALWAYS_ON                       _MK_ENUM_CONST(1)

#define G2SB_SWITCH_CLKEN_OVERIDE_0_VCAA_CLKEN_OVR_SHIFT                        _MK_SHIFT_CONST(18)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_VCAA_CLKEN_OVR_FIELD                        (_MK_MASK_CONST(0x1) << G2SB_SWITCH_CLKEN_OVERIDE_0_VCAA_CLKEN_OVR_SHIFT)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_VCAA_CLKEN_OVR_RANGE                        18:18
#define G2SB_SWITCH_CLKEN_OVERIDE_0_VCAA_CLKEN_OVR_WOFFSET                      0x0
#define G2SB_SWITCH_CLKEN_OVERIDE_0_VCAA_CLKEN_OVR_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_VCAA_CLKEN_OVR_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_VCAA_CLKEN_OVR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_VCAA_CLKEN_OVR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_VCAA_CLKEN_OVR_INIT_ENUM                    CLK_GATED
#define G2SB_SWITCH_CLKEN_OVERIDE_0_VCAA_CLKEN_OVR_CLK_GATED                    _MK_ENUM_CONST(0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_VCAA_CLKEN_OVR_CLK_ALWAYS_ON                        _MK_ENUM_CONST(1)

#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2SR2MC_CLKEN_OVR_SHIFT                     _MK_SHIFT_CONST(19)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2SR2MC_CLKEN_OVR_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_SWITCH_CLKEN_OVERIDE_0_G2SR2MC_CLKEN_OVR_SHIFT)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2SR2MC_CLKEN_OVR_RANGE                     19:19
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2SR2MC_CLKEN_OVR_WOFFSET                   0x0
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2SR2MC_CLKEN_OVR_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2SR2MC_CLKEN_OVR_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2SR2MC_CLKEN_OVR_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2SR2MC_CLKEN_OVR_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2SR2MC_CLKEN_OVR_INIT_ENUM                 CLK_GATED
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2SR2MC_CLKEN_OVR_CLK_GATED                 _MK_ENUM_CONST(0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2SR2MC_CLKEN_OVR_CLK_ALWAYS_ON                     _MK_ENUM_CONST(1)

#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2DR2MC_CLKEN_OVR_SHIFT                     _MK_SHIFT_CONST(20)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2DR2MC_CLKEN_OVR_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_SWITCH_CLKEN_OVERIDE_0_G2DR2MC_CLKEN_OVR_SHIFT)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2DR2MC_CLKEN_OVR_RANGE                     20:20
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2DR2MC_CLKEN_OVR_WOFFSET                   0x0
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2DR2MC_CLKEN_OVR_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2DR2MC_CLKEN_OVR_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2DR2MC_CLKEN_OVR_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2DR2MC_CLKEN_OVR_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2DR2MC_CLKEN_OVR_INIT_ENUM                 CLK_GATED
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2DR2MC_CLKEN_OVR_CLK_GATED                 _MK_ENUM_CONST(0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2DR2MC_CLKEN_OVR_CLK_ALWAYS_ON                     _MK_ENUM_CONST(1)

#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2PR2MC_CLKEN_OVR_SHIFT                     _MK_SHIFT_CONST(21)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2PR2MC_CLKEN_OVR_FIELD                     (_MK_MASK_CONST(0x1) << G2SB_SWITCH_CLKEN_OVERIDE_0_G2PR2MC_CLKEN_OVR_SHIFT)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2PR2MC_CLKEN_OVR_RANGE                     21:21
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2PR2MC_CLKEN_OVR_WOFFSET                   0x0
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2PR2MC_CLKEN_OVR_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2PR2MC_CLKEN_OVR_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2PR2MC_CLKEN_OVR_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2PR2MC_CLKEN_OVR_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2PR2MC_CLKEN_OVR_INIT_ENUM                 CLK_GATED
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2PR2MC_CLKEN_OVR_CLK_GATED                 _MK_ENUM_CONST(0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_G2PR2MC_CLKEN_OVR_CLK_ALWAYS_ON                     _MK_ENUM_CONST(1)

#define G2SB_SWITCH_CLKEN_OVERIDE_0_SB_CLKEN_OVR_SHIFT                  _MK_SHIFT_CONST(22)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SB_CLKEN_OVR_FIELD                  (_MK_MASK_CONST(0x1) << G2SB_SWITCH_CLKEN_OVERIDE_0_SB_CLKEN_OVR_SHIFT)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SB_CLKEN_OVR_RANGE                  22:22
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SB_CLKEN_OVR_WOFFSET                        0x0
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SB_CLKEN_OVR_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SB_CLKEN_OVR_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SB_CLKEN_OVR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SB_CLKEN_OVR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SB_CLKEN_OVR_INIT_ENUM                      CLK_GATED
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SB_CLKEN_OVR_CLK_GATED                      _MK_ENUM_CONST(0)
#define G2SB_SWITCH_CLKEN_OVERIDE_0_SB_CLKEN_OVR_CLK_ALWAYS_ON                  _MK_ENUM_CONST(1)

// Memory Client Interface Fifo Control Register.
// The registers below allow to optimize the synchronization timing in
// the memory client asynchronous fifos. When they can be used depend on
// the client and memory controller clock ratio.
// Additionally, the RDMC_RDFAST/RDCL_RDFAST fields can increase power
// consumption if the asynchronous fifo is implemented as a real ram.
// There is no power impact on latch-based fifos. Flipflop-based fifos
// do not use these fields.
// See recommended settings below.
//
// !! IMPORTANT !!
// The register fields can only be changed when the memory client async
// fifos are empty.
//
// The register field ending with WRCL_MCLE2X (if any) can be set to improve
// async fifo synchronization on the write side by one client clock cycle if
// the memory controller clock frequency is less or equal to twice the client
// clock frequency:
//
//      mcclk_freq <= 2 * clientclk_freq
//
// The register field ending with WRMC_CLLE2X (if any) can be set to improve
// async fifo synchronization on the write side by one memory controller clock
// cycle if the client clock frequency is less or equal to twice the memory
// controller clock frequency:
//
//      clientclk_freq <= 2 * mcclk_freq
//
// The register field ending with RDMC_RDFAST (if any) can be set to improve async
// fifo synchronization on the read side by one memory controller clock cycle.
//
// !! WARNING !!
// RDMC_RDFAST can be used along with WRCL_MCLE2X only when:
//
//       mcclk_freq <= clientclk_freq
//
// The register field ending with RDCL_RDFAST (if any) can be set to improve async
// fifo synchronization on the read side by one client clock cycle.
//
// !! WARNING !!
// RDCL_RDFAST can be used along with WRMC_CLLE2X only when:
//
//       clientclk_freq <= mcclk_freq
//
// RECOMMENDED SETTINGS
// # Client writing to fifo, memory controller reading from fifo
// - mcclk_freq <= clientclk_freq
//     You can enable both RDMC_RDFAST and WRCL_CLLE2X. If one of the fifos is
//     a real ram and power is a concern, you should avoid enabling RDMC_RDFAST.
// - clientclk_freq < mcclk_freq <= 2 * clientclk_freq
//     You can enable RDMC_RDFAST or WRCL_MCLE2X, but because the client clock
//     is slower, you should enable only WRCL_MCLE2X.
// - 2 * clientclk_freq < mcclk_freq
//     You can only enable RDMC_RDFAST. If one of the fifos is a real ram and
//     power is a concern, you should avoid enabling RDMC_RDFAST.
//
// # Memory controller writing to fifo, client reading from fifo
// - clientclk_freq <= mcclk_freq
//     You can enable both RDCL_RDFAST and WRMC_CLLE2X. If one of the fifos is
//     a real ram and power is a concern, you should avoid enabling RDCL_RDFAST.
// - mcclk_freq < clientclk_freq <= 2 * mcclk_freq
//     You can enable RDCL_RDFAST or WRMC_CLLE2X, but because the memory controller
//     clock is slower, you should enable only WRMC_CLLE2X.
// - 2 * mcclk_freq < clientclk_freq
//     You can only enable RDCL_RDFAST. If one of the fifos is a real ram and
//     power is a concern, you should avoid enabling RDCL_RDFAST.
//

// Register G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0                 _MK_ADDR_CONST(0xf009)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_SECURE                  0x0
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_WORD_COUNT                      0x1
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_RESET_MASK                      _MK_MASK_CONST(0xf)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_READ_MASK                       _MK_MASK_CONST(0xf)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_WRITE_MASK                      _MK_MASK_CONST(0xf)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_WRCL_MCLE2X_SHIFT                      _MK_SHIFT_CONST(0)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_WRCL_MCLE2X_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_WRCL_MCLE2X_SHIFT)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_WRCL_MCLE2X_RANGE                      0:0
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_WRCL_MCLE2X_WOFFSET                    0x0
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_WRCL_MCLE2X_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_WRCL_MCLE2X_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_WRCL_MCLE2X_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_WRCL_MCLE2X_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_WRCL_MCLE2X_INIT_ENUM                  DISABLE
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_WRCL_MCLE2X_DISABLE                    _MK_ENUM_CONST(0)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_WRCL_MCLE2X_ENABLE                     _MK_ENUM_CONST(1)

#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_RDMC_RDFAST_SHIFT                      _MK_SHIFT_CONST(1)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_RDMC_RDFAST_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_RDMC_RDFAST_SHIFT)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_RDMC_RDFAST_RANGE                      1:1
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_RDMC_RDFAST_WOFFSET                    0x0
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_RDMC_RDFAST_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_RDMC_RDFAST_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_RDMC_RDFAST_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_RDMC_RDFAST_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_RDMC_RDFAST_INIT_ENUM                  DISABLE
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_RDMC_RDFAST_DISABLE                    _MK_ENUM_CONST(0)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_RDMC_RDFAST_ENABLE                     _MK_ENUM_CONST(1)

#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_WRMC_CLLE2X_SHIFT                      _MK_SHIFT_CONST(2)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_WRMC_CLLE2X_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_WRMC_CLLE2X_SHIFT)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_WRMC_CLLE2X_RANGE                      2:2
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_WRMC_CLLE2X_WOFFSET                    0x0
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_WRMC_CLLE2X_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_WRMC_CLLE2X_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_WRMC_CLLE2X_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_WRMC_CLLE2X_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_WRMC_CLLE2X_INIT_ENUM                  DISABLE
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_WRMC_CLLE2X_DISABLE                    _MK_ENUM_CONST(0)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_WRMC_CLLE2X_ENABLE                     _MK_ENUM_CONST(1)

#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_RDCL_RDFAST_SHIFT                      _MK_SHIFT_CONST(3)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_RDCL_RDFAST_FIELD                      (_MK_MASK_CONST(0x1) << G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_RDCL_RDFAST_SHIFT)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_RDCL_RDFAST_RANGE                      3:3
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_RDCL_RDFAST_WOFFSET                    0x0
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_RDCL_RDFAST_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_RDCL_RDFAST_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_RDCL_RDFAST_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_RDCL_RDFAST_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_RDCL_RDFAST_INIT_ENUM                  DISABLE
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_RDCL_RDFAST_DISABLE                    _MK_ENUM_CONST(0)
#define G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0_G2_MCCIF_RDCL_RDFAST_ENABLE                     _MK_ENUM_CONST(1)

// Write Coalescing Time-Out Register
// This register exists only for write clients. Reset value defaults to
// to 50 for most clients, but may be different for certain clients.
// Write coalescing happens inside the memory client.
// Coalescing means two (NV_MC_MW/2)-bit requests are grouped together in one NV_MC_MW-bit request.
// The register value indicates how many cycles a first write request is going to wait
// for a subsequent one for possible coalescing. The coalescing can only happen
// if the request addresses are compatible. A value of zero means that coalescing is off
// and requests are sent right away to the memory controller.
// Write coalescing can have a very significant impact performance when accessing the internal memory,
// because its memory word is NV_MC_WM-bit wide. Grouping two half-word accesses is
// much more efficient, because the two accesses would actually have taken three cycles,
// due to a stall when accessing the same memory bank. It also reduces the number of
// accessing (one instead of two), freeing up internal memory bandwidth for other accesses.
// The impact on external memory accesses is not as significant as the burst access is for
// NV_MC_MW/2 bits. But a coalesced write guarantees two consecutive same page accesses
// which is good for external memory bandwidth utilization.
// The write coalescing time-out should be programmed depending on the client behavior.
// The first write is obviously delayed by an amount of client cycles equal to the time-out value.
// Note that writes tagged by the client (i.e. the client expects a write response, usually
// for coherency), and the last write of a block transfer are not delayed.
// They only have a one-cycle opportunity to get coalesced.
//

// Register G2SB_SWITCH_TIMEOUT_WCOAL_G2_0
#define G2SB_SWITCH_TIMEOUT_WCOAL_G2_0                  _MK_ADDR_CONST(0xf00a)
#define G2SB_SWITCH_TIMEOUT_WCOAL_G2_0_SECURE                   0x0
#define G2SB_SWITCH_TIMEOUT_WCOAL_G2_0_WORD_COUNT                       0x1
#define G2SB_SWITCH_TIMEOUT_WCOAL_G2_0_RESET_VAL                        _MK_MASK_CONST(0x32)
#define G2SB_SWITCH_TIMEOUT_WCOAL_G2_0_RESET_MASK                       _MK_MASK_CONST(0xff)
#define G2SB_SWITCH_TIMEOUT_WCOAL_G2_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_TIMEOUT_WCOAL_G2_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_TIMEOUT_WCOAL_G2_0_READ_MASK                        _MK_MASK_CONST(0xff)
#define G2SB_SWITCH_TIMEOUT_WCOAL_G2_0_WRITE_MASK                       _MK_MASK_CONST(0xff)
#define G2SB_SWITCH_TIMEOUT_WCOAL_G2_0_G2DW_WCOAL_TMVAL_SHIFT                   _MK_SHIFT_CONST(0)
#define G2SB_SWITCH_TIMEOUT_WCOAL_G2_0_G2DW_WCOAL_TMVAL_FIELD                   (_MK_MASK_CONST(0xff) << G2SB_SWITCH_TIMEOUT_WCOAL_G2_0_G2DW_WCOAL_TMVAL_SHIFT)
#define G2SB_SWITCH_TIMEOUT_WCOAL_G2_0_G2DW_WCOAL_TMVAL_RANGE                   7:0
#define G2SB_SWITCH_TIMEOUT_WCOAL_G2_0_G2DW_WCOAL_TMVAL_WOFFSET                 0x0
#define G2SB_SWITCH_TIMEOUT_WCOAL_G2_0_G2DW_WCOAL_TMVAL_DEFAULT                 _MK_MASK_CONST(0x32)
#define G2SB_SWITCH_TIMEOUT_WCOAL_G2_0_G2DW_WCOAL_TMVAL_DEFAULT_MASK                    _MK_MASK_CONST(0xff)
#define G2SB_SWITCH_TIMEOUT_WCOAL_G2_0_G2DW_WCOAL_TMVAL_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_TIMEOUT_WCOAL_G2_0_G2DW_WCOAL_TMVAL_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Memory Client Hysteresis Control Register
// This register exists only for clients with hysteresis.
// BUG 505006: Hysteresis configuration can only be updated when memory traffic is idle.
// HYST_EN can be used to turn on or off the hysteresis logic.
// HYST_REQ_TH is the threshold of pending requests required
//   before allowing them to pass through
//   (overriden after HYST_REQ_TM cycles).
// Hysteresis logic will stop holding request after (1<<HYST_TM) cycles
//   (this should not have to be used and is only a WAR for
//   unexpected hangs).
// Deep hysteresis is a second level of hysteresis on a longer time-frame.
//   DHYST_TH is the size of the read burst (requests are held until there
//   is space for the entire burst in the return data fifo).
//   During a burst period, if there are no new requests after
//   DHYST_TM cycles, then the burst is terminated early.

// Register G2SB_SWITCH_MCCIF_G2PR_HYST_0
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0                   _MK_ADDR_CONST(0xf00b)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_SECURE                    0x0
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_WORD_COUNT                        0x1
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_RESET_VAL                         _MK_MASK_CONST(0xcf08ff06)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_RESET_MASK                        _MK_MASK_CONST(0xffffffff)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_REQ_TM_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_REQ_TM_FIELD                     (_MK_MASK_CONST(0xff) << G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_REQ_TM_SHIFT)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_REQ_TM_RANGE                     7:0
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_REQ_TM_WOFFSET                   0x0
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_REQ_TM_DEFAULT                   _MK_MASK_CONST(0x6)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_REQ_TM_DEFAULT_MASK                      _MK_MASK_CONST(0xff)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_REQ_TM_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_REQ_TM_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_DHYST_TM_SHIFT                        _MK_SHIFT_CONST(8)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_DHYST_TM_FIELD                        (_MK_MASK_CONST(0xff) << G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_DHYST_TM_SHIFT)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_DHYST_TM_RANGE                        15:8
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_DHYST_TM_WOFFSET                      0x0
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_DHYST_TM_DEFAULT                      _MK_MASK_CONST(0xff)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_DHYST_TM_DEFAULT_MASK                 _MK_MASK_CONST(0xff)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_DHYST_TM_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_DHYST_TM_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_DHYST_TH_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_DHYST_TH_FIELD                        (_MK_MASK_CONST(0xff) << G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_DHYST_TH_SHIFT)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_DHYST_TH_RANGE                        23:16
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_DHYST_TH_WOFFSET                      0x0
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_DHYST_TH_DEFAULT                      _MK_MASK_CONST(0x8)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_DHYST_TH_DEFAULT_MASK                 _MK_MASK_CONST(0xff)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_DHYST_TH_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_DHYST_TH_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_TM_SHIFT                 _MK_SHIFT_CONST(24)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_TM_FIELD                 (_MK_MASK_CONST(0xf) << G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_TM_SHIFT)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_TM_RANGE                 27:24
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_TM_WOFFSET                       0x0
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_TM_DEFAULT                       _MK_MASK_CONST(0xf)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_TM_DEFAULT_MASK                  _MK_MASK_CONST(0xf)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_TM_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_TM_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_REQ_TH_SHIFT                     _MK_SHIFT_CONST(28)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_REQ_TH_FIELD                     (_MK_MASK_CONST(0x7) << G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_REQ_TH_SHIFT)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_REQ_TH_RANGE                     30:28
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_REQ_TH_WOFFSET                   0x0
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_REQ_TH_DEFAULT                   _MK_MASK_CONST(0x4)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_REQ_TH_DEFAULT_MASK                      _MK_MASK_CONST(0x7)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_REQ_TH_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_REQ_TH_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_EN_SHIFT                 _MK_SHIFT_CONST(31)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_EN_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_EN_SHIFT)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_EN_RANGE                 31:31
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_EN_WOFFSET                       0x0
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_EN_DEFAULT                       _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_EN_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_EN_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_EN_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_EN_INIT_ENUM                     ENABLE
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_EN_ENABLE                        _MK_ENUM_CONST(1)
#define G2SB_SWITCH_MCCIF_G2PR_HYST_0_CBR_G2PR2MC_HYST_EN_DISABLE                       _MK_ENUM_CONST(0)

// Memory Client Hysteresis Control Register
// This register exists only for clients with hysteresis.
// BUG 505006: Hysteresis configuration can only be updated when memory traffic is idle.
// HYST_EN can be used to turn on or off the hysteresis logic.
// HYST_REQ_TH is the threshold of pending requests required
//   before allowing them to pass through
//   (overriden after HYST_REQ_TM cycles).
// Hysteresis logic will stop holding request after (1<<HYST_TM) cycles
//   (this should not have to be used and is only a WAR for
//   unexpected hangs).
// Deep hysteresis is a second level of hysteresis on a longer time-frame.
//   DHYST_TH is the size of the read burst (requests are held until there
//   is space for the entire burst in the return data fifo).
//   During a burst period, if there are no new requests after
//   DHYST_TM cycles, then the burst is terminated early.

// Register G2SB_SWITCH_MCCIF_G2SR_HYST_0
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0                   _MK_ADDR_CONST(0xf00c)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_SECURE                    0x0
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_WORD_COUNT                        0x1
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_RESET_VAL                         _MK_MASK_CONST(0xcf08ff06)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_RESET_MASK                        _MK_MASK_CONST(0xffffffff)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_REQ_TM_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_REQ_TM_FIELD                     (_MK_MASK_CONST(0xff) << G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_REQ_TM_SHIFT)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_REQ_TM_RANGE                     7:0
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_REQ_TM_WOFFSET                   0x0
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_REQ_TM_DEFAULT                   _MK_MASK_CONST(0x6)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_REQ_TM_DEFAULT_MASK                      _MK_MASK_CONST(0xff)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_REQ_TM_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_REQ_TM_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_DHYST_TM_SHIFT                        _MK_SHIFT_CONST(8)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_DHYST_TM_FIELD                        (_MK_MASK_CONST(0xff) << G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_DHYST_TM_SHIFT)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_DHYST_TM_RANGE                        15:8
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_DHYST_TM_WOFFSET                      0x0
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_DHYST_TM_DEFAULT                      _MK_MASK_CONST(0xff)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_DHYST_TM_DEFAULT_MASK                 _MK_MASK_CONST(0xff)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_DHYST_TM_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_DHYST_TM_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_DHYST_TH_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_DHYST_TH_FIELD                        (_MK_MASK_CONST(0xff) << G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_DHYST_TH_SHIFT)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_DHYST_TH_RANGE                        23:16
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_DHYST_TH_WOFFSET                      0x0
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_DHYST_TH_DEFAULT                      _MK_MASK_CONST(0x8)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_DHYST_TH_DEFAULT_MASK                 _MK_MASK_CONST(0xff)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_DHYST_TH_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_DHYST_TH_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_TM_SHIFT                 _MK_SHIFT_CONST(24)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_TM_FIELD                 (_MK_MASK_CONST(0xf) << G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_TM_SHIFT)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_TM_RANGE                 27:24
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_TM_WOFFSET                       0x0
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_TM_DEFAULT                       _MK_MASK_CONST(0xf)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_TM_DEFAULT_MASK                  _MK_MASK_CONST(0xf)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_TM_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_TM_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_REQ_TH_SHIFT                     _MK_SHIFT_CONST(28)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_REQ_TH_FIELD                     (_MK_MASK_CONST(0x7) << G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_REQ_TH_SHIFT)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_REQ_TH_RANGE                     30:28
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_REQ_TH_WOFFSET                   0x0
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_REQ_TH_DEFAULT                   _MK_MASK_CONST(0x4)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_REQ_TH_DEFAULT_MASK                      _MK_MASK_CONST(0x7)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_REQ_TH_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_REQ_TH_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_EN_SHIFT                 _MK_SHIFT_CONST(31)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_EN_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_EN_SHIFT)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_EN_RANGE                 31:31
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_EN_WOFFSET                       0x0
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_EN_DEFAULT                       _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_EN_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_EN_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_EN_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_EN_INIT_ENUM                     ENABLE
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_EN_ENABLE                        _MK_ENUM_CONST(1)
#define G2SB_SWITCH_MCCIF_G2SR_HYST_0_CBR_G2SR2MC_HYST_EN_DISABLE                       _MK_ENUM_CONST(0)

// Memory Client Hysteresis Control Register
// This register exists only for clients with hysteresis.
// BUG 505006: Hysteresis configuration can only be updated when memory traffic is idle.
// HYST_EN can be used to turn on or off the hysteresis logic.
// HYST_REQ_TH is the threshold of pending requests required
//   before allowing them to pass through
//   (overriden after HYST_REQ_TM cycles).
// Hysteresis logic will stop holding request after (1<<HYST_TM) cycles
//   (this should not have to be used and is only a WAR for
//   unexpected hangs).
// Deep hysteresis is a second level of hysteresis on a longer time-frame.
//   DHYST_TH is the size of the read burst (requests are held until there
//   is space for the entire burst in the return data fifo).
//   During a burst period, if there are no new requests after
//   DHYST_TM cycles, then the burst is terminated early.

// Register G2SB_SWITCH_MCCIF_G2DR_HYST_0
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0                   _MK_ADDR_CONST(0xf00d)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_SECURE                    0x0
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_WORD_COUNT                        0x1
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_RESET_VAL                         _MK_MASK_CONST(0xcf04ff06)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_RESET_MASK                        _MK_MASK_CONST(0xffffffff)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_REQ_TM_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_REQ_TM_FIELD                     (_MK_MASK_CONST(0xff) << G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_REQ_TM_SHIFT)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_REQ_TM_RANGE                     7:0
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_REQ_TM_WOFFSET                   0x0
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_REQ_TM_DEFAULT                   _MK_MASK_CONST(0x6)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_REQ_TM_DEFAULT_MASK                      _MK_MASK_CONST(0xff)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_REQ_TM_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_REQ_TM_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_DHYST_TM_SHIFT                        _MK_SHIFT_CONST(8)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_DHYST_TM_FIELD                        (_MK_MASK_CONST(0xff) << G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_DHYST_TM_SHIFT)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_DHYST_TM_RANGE                        15:8
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_DHYST_TM_WOFFSET                      0x0
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_DHYST_TM_DEFAULT                      _MK_MASK_CONST(0xff)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_DHYST_TM_DEFAULT_MASK                 _MK_MASK_CONST(0xff)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_DHYST_TM_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_DHYST_TM_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_DHYST_TH_SHIFT                        _MK_SHIFT_CONST(16)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_DHYST_TH_FIELD                        (_MK_MASK_CONST(0xff) << G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_DHYST_TH_SHIFT)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_DHYST_TH_RANGE                        23:16
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_DHYST_TH_WOFFSET                      0x0
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_DHYST_TH_DEFAULT                      _MK_MASK_CONST(0x4)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_DHYST_TH_DEFAULT_MASK                 _MK_MASK_CONST(0xff)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_DHYST_TH_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_DHYST_TH_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_TM_SHIFT                 _MK_SHIFT_CONST(24)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_TM_FIELD                 (_MK_MASK_CONST(0xf) << G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_TM_SHIFT)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_TM_RANGE                 27:24
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_TM_WOFFSET                       0x0
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_TM_DEFAULT                       _MK_MASK_CONST(0xf)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_TM_DEFAULT_MASK                  _MK_MASK_CONST(0xf)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_TM_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_TM_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_REQ_TH_SHIFT                     _MK_SHIFT_CONST(28)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_REQ_TH_FIELD                     (_MK_MASK_CONST(0x7) << G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_REQ_TH_SHIFT)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_REQ_TH_RANGE                     30:28
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_REQ_TH_WOFFSET                   0x0
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_REQ_TH_DEFAULT                   _MK_MASK_CONST(0x4)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_REQ_TH_DEFAULT_MASK                      _MK_MASK_CONST(0x7)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_REQ_TH_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_REQ_TH_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_EN_SHIFT                 _MK_SHIFT_CONST(31)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_EN_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_EN_SHIFT)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_EN_RANGE                 31:31
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_EN_WOFFSET                       0x0
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_EN_DEFAULT                       _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_EN_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_EN_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_EN_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_EN_INIT_ENUM                     ENABLE
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_EN_ENABLE                        _MK_ENUM_CONST(1)
#define G2SB_SWITCH_MCCIF_G2DR_HYST_0_CSR_G2DR2MC_HYST_EN_DISABLE                       _MK_ENUM_CONST(0)

// Memory Client Hysteresis Control Register
// This register exists only for clients with hysteresis.
// BUG 505006: Hysteresis configuration can only be updated when memory traffic is idle.
// HYST_EN can be used to turn on or off the hysteresis logic.
// HYST_REQ_TH is the threshold of pending requests required
//   before allowing them to pass through
//   (overriden after HYST_REQ_TM cycles).

// Register G2SB_SWITCH_MCCIF_G2DW_HYST_0
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0                   _MK_ADDR_CONST(0xf00e)
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_SECURE                    0x0
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_WORD_COUNT                        0x1
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_RESET_VAL                         _MK_MASK_CONST(0xc0000030)
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_RESET_MASK                        _MK_MASK_CONST(0xf0000fff)
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_READ_MASK                         _MK_MASK_CONST(0xf0000fff)
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_WRITE_MASK                        _MK_MASK_CONST(0xf0000fff)
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_REQ_TM_SHIFT                     _MK_SHIFT_CONST(0)
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_REQ_TM_FIELD                     (_MK_MASK_CONST(0xfff) << G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_REQ_TM_SHIFT)
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_REQ_TM_RANGE                     11:0
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_REQ_TM_WOFFSET                   0x0
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_REQ_TM_DEFAULT                   _MK_MASK_CONST(0x30)
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_REQ_TM_DEFAULT_MASK                      _MK_MASK_CONST(0xfff)
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_REQ_TM_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_REQ_TM_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_REQ_TH_SHIFT                     _MK_SHIFT_CONST(28)
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_REQ_TH_FIELD                     (_MK_MASK_CONST(0x7) << G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_REQ_TH_SHIFT)
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_REQ_TH_RANGE                     30:28
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_REQ_TH_WOFFSET                   0x0
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_REQ_TH_DEFAULT                   _MK_MASK_CONST(0x4)
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_REQ_TH_DEFAULT_MASK                      _MK_MASK_CONST(0x7)
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_REQ_TH_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_REQ_TH_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_EN_SHIFT                 _MK_SHIFT_CONST(31)
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_EN_FIELD                 (_MK_MASK_CONST(0x1) << G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_EN_SHIFT)
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_EN_RANGE                 31:31
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_EN_WOFFSET                       0x0
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_EN_DEFAULT                       _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_EN_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_EN_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_EN_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_EN_INIT_ENUM                     ENABLE
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_EN_ENABLE                        _MK_ENUM_CONST(1)
#define G2SB_SWITCH_MCCIF_G2DW_HYST_0_CCW_G2DW2MC_HYST_EN_DISABLE                       _MK_ENUM_CONST(0)

//Packet used for the sb2g2_dstw bus.  The 128-bit entry has been converted into
//4 fields to the limitation in the packet system.  (Max size of packet field is
//equal to a UINT)

// Packet SB2G2_DST_WRITE_PKT
#define SB2G2_DST_WRITE_PKT_SIZE 144

// LSB is 0
#define SB2G2_DST_WRITE_PKT_DATA0_SHIFT                 _MK_SHIFT_CONST(0)
#define SB2G2_DST_WRITE_PKT_DATA0_FIELD                 (_MK_MASK_CONST(0xffffffff) << SB2G2_DST_WRITE_PKT_DATA0_SHIFT)
#define SB2G2_DST_WRITE_PKT_DATA0_RANGE                 _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(0)
#define SB2G2_DST_WRITE_PKT_DATA0_ROW                   0

//
#define SB2G2_DST_WRITE_PKT_DATA1_SHIFT                 _MK_SHIFT_CONST(32)
#define SB2G2_DST_WRITE_PKT_DATA1_FIELD                 (_MK_MASK_CONST(0xffffffff) << SB2G2_DST_WRITE_PKT_DATA1_SHIFT)
#define SB2G2_DST_WRITE_PKT_DATA1_RANGE                 _MK_SHIFT_CONST(63):_MK_SHIFT_CONST(32)
#define SB2G2_DST_WRITE_PKT_DATA1_ROW                   0

//
#define SB2G2_DST_WRITE_PKT_DATA2_SHIFT                 _MK_SHIFT_CONST(64)
#define SB2G2_DST_WRITE_PKT_DATA2_FIELD                 (_MK_MASK_CONST(0xffffffff) << SB2G2_DST_WRITE_PKT_DATA2_SHIFT)
#define SB2G2_DST_WRITE_PKT_DATA2_RANGE                 _MK_SHIFT_CONST(95):_MK_SHIFT_CONST(64)
#define SB2G2_DST_WRITE_PKT_DATA2_ROW                   0

// MSB is 127
#define SB2G2_DST_WRITE_PKT_DATA3_SHIFT                 _MK_SHIFT_CONST(96)
#define SB2G2_DST_WRITE_PKT_DATA3_FIELD                 (_MK_MASK_CONST(0xffffffff) << SB2G2_DST_WRITE_PKT_DATA3_SHIFT)
#define SB2G2_DST_WRITE_PKT_DATA3_RANGE                 _MK_SHIFT_CONST(127):_MK_SHIFT_CONST(96)
#define SB2G2_DST_WRITE_PKT_DATA3_ROW                   0

//  byte enable BE[0] corresponds to byte DSTW_DATA[7:0]
#define SB2G2_DST_WRITE_PKT_BE_SHIFT                    _MK_SHIFT_CONST(128)
#define SB2G2_DST_WRITE_PKT_BE_FIELD                    (_MK_MASK_CONST(0xffff) << SB2G2_DST_WRITE_PKT_BE_SHIFT)
#define SB2G2_DST_WRITE_PKT_BE_RANGE                    _MK_SHIFT_CONST(143):_MK_SHIFT_CONST(128)
#define SB2G2_DST_WRITE_PKT_BE_ROW                      0

//Packet used for the g22sb_[srcr, dstr] buses to send data from G2 to SB for SB command
//These buses are used for line fetches from memory.

// Packet G22SB_SRC_DST_READ_PKT
#define G22SB_SRC_DST_READ_PKT_SIZE 128

// LSB is 0
#define G22SB_SRC_DST_READ_PKT_DATA0_SHIFT                      _MK_SHIFT_CONST(0)
#define G22SB_SRC_DST_READ_PKT_DATA0_FIELD                      (_MK_MASK_CONST(0xffffffff) << G22SB_SRC_DST_READ_PKT_DATA0_SHIFT)
#define G22SB_SRC_DST_READ_PKT_DATA0_RANGE                      _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(0)
#define G22SB_SRC_DST_READ_PKT_DATA0_ROW                        0

//
#define G22SB_SRC_DST_READ_PKT_DATA1_SHIFT                      _MK_SHIFT_CONST(32)
#define G22SB_SRC_DST_READ_PKT_DATA1_FIELD                      (_MK_MASK_CONST(0xffffffff) << G22SB_SRC_DST_READ_PKT_DATA1_SHIFT)
#define G22SB_SRC_DST_READ_PKT_DATA1_RANGE                      _MK_SHIFT_CONST(63):_MK_SHIFT_CONST(32)
#define G22SB_SRC_DST_READ_PKT_DATA1_ROW                        0

//
#define G22SB_SRC_DST_READ_PKT_DATA2_SHIFT                      _MK_SHIFT_CONST(64)
#define G22SB_SRC_DST_READ_PKT_DATA2_FIELD                      (_MK_MASK_CONST(0xffffffff) << G22SB_SRC_DST_READ_PKT_DATA2_SHIFT)
#define G22SB_SRC_DST_READ_PKT_DATA2_RANGE                      _MK_SHIFT_CONST(95):_MK_SHIFT_CONST(64)
#define G22SB_SRC_DST_READ_PKT_DATA2_ROW                        0

// MSB is 127
#define G22SB_SRC_DST_READ_PKT_DATA3_SHIFT                      _MK_SHIFT_CONST(96)
#define G22SB_SRC_DST_READ_PKT_DATA3_FIELD                      (_MK_MASK_CONST(0xffffffff) << G22SB_SRC_DST_READ_PKT_DATA3_SHIFT)
#define G22SB_SRC_DST_READ_PKT_DATA3_RANGE                      _MK_SHIFT_CONST(127):_MK_SHIFT_CONST(96)
#define G22SB_SRC_DST_READ_PKT_DATA3_ROW                        0

//Packed used for the g22sb_hstr bus to send data from G2 to SB for SB command.
//This bus is used when SB is receiving its data straight from the host.

// Packet G22SB_HST_READ_PKT
#define G22SB_HST_READ_PKT_SIZE 32

//LSB is 0, MSB is 31
#define G22SB_HST_READ_PKT_DATA0_SHIFT                  _MK_SHIFT_CONST(0)
#define G22SB_HST_READ_PKT_DATA0_FIELD                  (_MK_MASK_CONST(0xffffffff) << G22SB_HST_READ_PKT_DATA0_SHIFT)
#define G22SB_HST_READ_PKT_DATA0_RANGE                  _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(0)
#define G22SB_HST_READ_PKT_DATA0_ROW                    0

//VCAA Resolve Packet

// Packet G2VCAA_RESOLVE_PKT
#define G2VCAA_RESOLVE_PKT_SIZE 42

#define G2VCAA_RESOLVE_PKT_VCAA_SHIFT                   _MK_SHIFT_CONST(0)
#define G2VCAA_RESOLVE_PKT_VCAA_FIELD                   (_MK_MASK_CONST(0xffffffff) << G2VCAA_RESOLVE_PKT_VCAA_SHIFT)
#define G2VCAA_RESOLVE_PKT_VCAA_RANGE                   _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(0)
#define G2VCAA_RESOLVE_PKT_VCAA_ROW                     0

#define G2VCAA_RESOLVE_PKT_LOADUP_SHIFT                 _MK_SHIFT_CONST(32)
#define G2VCAA_RESOLVE_PKT_LOADUP_FIELD                 (_MK_MASK_CONST(0x1) << G2VCAA_RESOLVE_PKT_LOADUP_SHIFT)
#define G2VCAA_RESOLVE_PKT_LOADUP_RANGE                 _MK_SHIFT_CONST(32):_MK_SHIFT_CONST(32)
#define G2VCAA_RESOLVE_PKT_LOADUP_ROW                   0

#define G2VCAA_RESOLVE_PKT_LOADDOWN_SHIFT                       _MK_SHIFT_CONST(33)
#define G2VCAA_RESOLVE_PKT_LOADDOWN_FIELD                       (_MK_MASK_CONST(0x1) << G2VCAA_RESOLVE_PKT_LOADDOWN_SHIFT)
#define G2VCAA_RESOLVE_PKT_LOADDOWN_RANGE                       _MK_SHIFT_CONST(33):_MK_SHIFT_CONST(33)
#define G2VCAA_RESOLVE_PKT_LOADDOWN_ROW                 0

#define G2VCAA_RESOLVE_PKT_SKIPWORD_SHIFT                       _MK_SHIFT_CONST(34)
#define G2VCAA_RESOLVE_PKT_SKIPWORD_FIELD                       (_MK_MASK_CONST(0xff) << G2VCAA_RESOLVE_PKT_SKIPWORD_SHIFT)
#define G2VCAA_RESOLVE_PKT_SKIPWORD_RANGE                       _MK_SHIFT_CONST(41):_MK_SHIFT_CONST(34)
#define G2VCAA_RESOLVE_PKT_SKIPWORD_ROW                 0


// Packet G2VCAA_R8G8B8A8
#define G2VCAA_R8G8B8A8_SIZE 32

#define G2VCAA_R8G8B8A8_R_SHIFT                 _MK_SHIFT_CONST(0)
#define G2VCAA_R8G8B8A8_R_FIELD                 (_MK_MASK_CONST(0xff) << G2VCAA_R8G8B8A8_R_SHIFT)
#define G2VCAA_R8G8B8A8_R_RANGE                 _MK_SHIFT_CONST(7):_MK_SHIFT_CONST(0)
#define G2VCAA_R8G8B8A8_R_ROW                   0

#define G2VCAA_R8G8B8A8_G_SHIFT                 _MK_SHIFT_CONST(8)
#define G2VCAA_R8G8B8A8_G_FIELD                 (_MK_MASK_CONST(0xff) << G2VCAA_R8G8B8A8_G_SHIFT)
#define G2VCAA_R8G8B8A8_G_RANGE                 _MK_SHIFT_CONST(15):_MK_SHIFT_CONST(8)
#define G2VCAA_R8G8B8A8_G_ROW                   0

#define G2VCAA_R8G8B8A8_B_SHIFT                 _MK_SHIFT_CONST(16)
#define G2VCAA_R8G8B8A8_B_FIELD                 (_MK_MASK_CONST(0xff) << G2VCAA_R8G8B8A8_B_SHIFT)
#define G2VCAA_R8G8B8A8_B_RANGE                 _MK_SHIFT_CONST(23):_MK_SHIFT_CONST(16)
#define G2VCAA_R8G8B8A8_B_ROW                   0

#define G2VCAA_R8G8B8A8_A_SHIFT                 _MK_SHIFT_CONST(24)
#define G2VCAA_R8G8B8A8_A_FIELD                 (_MK_MASK_CONST(0xff) << G2VCAA_R8G8B8A8_A_SHIFT)
#define G2VCAA_R8G8B8A8_A_RANGE                 _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(24)
#define G2VCAA_R8G8B8A8_A_ROW                   0


// Packet G2VCAA_B5G6R5
#define G2VCAA_B5G6R5_SIZE 16

#define G2VCAA_B5G6R5_B_SHIFT                   _MK_SHIFT_CONST(0)
#define G2VCAA_B5G6R5_B_FIELD                   (_MK_MASK_CONST(0x1f) << G2VCAA_B5G6R5_B_SHIFT)
#define G2VCAA_B5G6R5_B_RANGE                   _MK_SHIFT_CONST(4):_MK_SHIFT_CONST(0)
#define G2VCAA_B5G6R5_B_ROW                     0

#define G2VCAA_B5G6R5_G_SHIFT                   _MK_SHIFT_CONST(5)
#define G2VCAA_B5G6R5_G_FIELD                   (_MK_MASK_CONST(0x3f) << G2VCAA_B5G6R5_G_SHIFT)
#define G2VCAA_B5G6R5_G_RANGE                   _MK_SHIFT_CONST(10):_MK_SHIFT_CONST(5)
#define G2VCAA_B5G6R5_G_ROW                     0

#define G2VCAA_B5G6R5_R_SHIFT                   _MK_SHIFT_CONST(11)
#define G2VCAA_B5G6R5_R_FIELD                   (_MK_MASK_CONST(0x1f) << G2VCAA_B5G6R5_R_SHIFT)
#define G2VCAA_B5G6R5_R_RANGE                   _MK_SHIFT_CONST(15):_MK_SHIFT_CONST(11)
#define G2VCAA_B5G6R5_R_ROW                     0


// Packet G2VCAA_A1B5G5R5
#define G2VCAA_A1B5G5R5_SIZE 16

#define G2VCAA_A1B5G5R5_A_SHIFT                 _MK_SHIFT_CONST(0)
#define G2VCAA_A1B5G5R5_A_FIELD                 (_MK_MASK_CONST(0x1) << G2VCAA_A1B5G5R5_A_SHIFT)
#define G2VCAA_A1B5G5R5_A_RANGE                 _MK_SHIFT_CONST(0):_MK_SHIFT_CONST(0)
#define G2VCAA_A1B5G5R5_A_ROW                   0

#define G2VCAA_A1B5G5R5_B_SHIFT                 _MK_SHIFT_CONST(1)
#define G2VCAA_A1B5G5R5_B_FIELD                 (_MK_MASK_CONST(0x1f) << G2VCAA_A1B5G5R5_B_SHIFT)
#define G2VCAA_A1B5G5R5_B_RANGE                 _MK_SHIFT_CONST(5):_MK_SHIFT_CONST(1)
#define G2VCAA_A1B5G5R5_B_ROW                   0

#define G2VCAA_A1B5G5R5_G_SHIFT                 _MK_SHIFT_CONST(6)
#define G2VCAA_A1B5G5R5_G_FIELD                 (_MK_MASK_CONST(0x1f) << G2VCAA_A1B5G5R5_G_SHIFT)
#define G2VCAA_A1B5G5R5_G_RANGE                 _MK_SHIFT_CONST(10):_MK_SHIFT_CONST(6)
#define G2VCAA_A1B5G5R5_G_ROW                   0

#define G2VCAA_A1B5G5R5_R_SHIFT                 _MK_SHIFT_CONST(11)
#define G2VCAA_A1B5G5R5_R_FIELD                 (_MK_MASK_CONST(0x1f) << G2VCAA_A1B5G5R5_R_SHIFT)
#define G2VCAA_A1B5G5R5_R_RANGE                 _MK_SHIFT_CONST(15):_MK_SHIFT_CONST(11)
#define G2VCAA_A1B5G5R5_R_ROW                   0


//
// REGISTER LIST
//
#define LIST_ARG2SB_REGS(_op_) \
_op_(G2SB_INCR_SYNCPT_0) \
_op_(G2SB_INCR_SYNCPT_CNTRL_0) \
_op_(G2SB_INCR_SYNCPT_ERROR_0) \
_op_(G2SB_G2CLASSCHANNEL_REGONLY_0) \
_op_(G2SB_G2TRIGGER_0) \
_op_(G2SB_G2TRIGGER1_0) \
_op_(G2SB_G2TRIGGER2_0) \
_op_(G2SB_G2CMDSEL_0) \
_op_(G2SB_G2RAISE_0) \
_op_(G2SB_G2HOSTSET_0) \
_op_(G2SB_G2HOSTFIFO_0) \
_op_(G2SB_G2VDDA_0) \
_op_(G2SB_G2VDDAINI_0) \
_op_(G2SB_G2HDDA_0) \
_op_(G2SB_G2HDDAINILS_0) \
_op_(G2SB_G2CSCFIRST_0) \
_op_(G2SB_G2CSCSECOND_0) \
_op_(G2SB_G2CSCTHIRD_0) \
_op_(G2SB_G2CMKEYL_0) \
_op_(G2SB_G2CMKEYU_0) \
_op_(G2SB_G2UBA_A_0) \
_op_(G2SB_G2VBA_A_0) \
_op_(G2SB_G2SBFORMAT_0) \
_op_(G2SB_G2CONTROLSB_0) \
_op_(G2SB_G2CONTROLSECOND_0) \
_op_(G2SB_G2CONTROLMAIN_0) \
_op_(G2SB_G2ROPFADE_0) \
_op_(G2SB_G2ALPHABLEND_0) \
_op_(G2SB_G2CLIPLEFTTOP_0) \
_op_(G2SB_G2CLIPRIGHTBOT_0) \
_op_(G2SB_G2PATPACK_0) \
_op_(G2SB_G2PATPACK_SIZE_0) \
_op_(G2SB_G2PATBA_0) \
_op_(G2SB_G2PATOS_0) \
_op_(G2SB_G2PATBGC_0) \
_op_(G2SB_G2PATFGC_0) \
_op_(G2SB_G2PATKEY_0) \
_op_(G2SB_G2DSTBA_0) \
_op_(G2SB_G2DSTBA_B_0) \
_op_(G2SB_G2DSTBA_C_0) \
_op_(G2SB_G2DSTST_0) \
_op_(G2SB_G2SRCPACK_0) \
_op_(G2SB_G2SRCPACK_SIZE_0) \
_op_(G2SB_G2SRCBA_0) \
_op_(G2SB_G2SRCBA_B_0) \
_op_(G2SB_G2SRCST_0) \
_op_(G2SB_G2SRCBGC_0) \
_op_(G2SB_G2SRCFGC_0) \
_op_(G2SB_G2SRCKEY_0) \
_op_(G2SB_G2SRCSIZE_0) \
_op_(G2SB_G2DSTSIZE_0) \
_op_(G2SB_G2SRCPS_0) \
_op_(G2SB_G2DSTPS_0) \
_op_(G2SB_G2CBDES_0) \
_op_(G2SB_G2CBSTRIDE_0) \
_op_(G2SB_G2LINESETTING_0) \
_op_(G2SB_G2LINEDELTAN_0) \
_op_(G2SB_G2LINEDELTAM_0) \
_op_(G2SB_G2LINEPOS_0) \
_op_(G2SB_G2LINELEN_0) \
_op_(G2SB_G2CSCFOURTH_0) \
_op_(G2SB_G2SRCST_B_0) \
_op_(G2SB_G2UVSTRIDE_0) \
_op_(G2SB_G2CBDES2_0) \
_op_(G2SB_G2TILEMODE_0) \
_op_(G2SB_G2PATBASE_0) \
_op_(G2SB_G2SRCBA_SB_SURFBASE_0) \
_op_(G2SB_G2DSTBA_SB_SURFBASE_0) \
_op_(G2SB_G2DSTBA_B_SB_SURFBASE_0) \
_op_(G2SB_G2VBA_A_SB_SURFBASE_0) \
_op_(G2SB_G2UBA_A_SB_SURFBASE_0) \
_op_(G2SB_CTX1_INCR_SYNCPT_0) \
_op_(G2SB_CTX1_INCR_SYNCPT_CNTRL_0) \
_op_(G2SB_CTX1_INCR_SYNCPT_ERROR_0) \
_op_(G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0) \
_op_(G2SB_CTX1_G2TRIGGER_0) \
_op_(G2SB_CTX1_G2TRIGGER1_0) \
_op_(G2SB_CTX1_G2TRIGGER2_0) \
_op_(G2SB_CTX1_G2CMDSEL_0) \
_op_(G2SB_CTX1_G2RAISE_0) \
_op_(G2SB_CTX1_G2HOSTSET_0) \
_op_(G2SB_CTX1_G2HOSTFIFO_0) \
_op_(G2SB_CTX1_G2VDDA_0) \
_op_(G2SB_CTX1_G2VDDAINI_0) \
_op_(G2SB_CTX1_G2HDDA_0) \
_op_(G2SB_CTX1_G2HDDAINILS_0) \
_op_(G2SB_CTX1_G2CSCFIRST_0) \
_op_(G2SB_CTX1_G2CSCSECOND_0) \
_op_(G2SB_CTX1_G2CSCTHIRD_0) \
_op_(G2SB_CTX1_G2CMKEYL_0) \
_op_(G2SB_CTX1_G2CMKEYU_0) \
_op_(G2SB_CTX1_G2UBA_A_0) \
_op_(G2SB_CTX1_G2VBA_A_0) \
_op_(G2SB_CTX1_G2SBFORMAT_0) \
_op_(G2SB_CTX1_G2CONTROLSB_0) \
_op_(G2SB_CTX1_G2CONTROLSECOND_0) \
_op_(G2SB_CTX1_G2CONTROLMAIN_0) \
_op_(G2SB_CTX1_G2ROPFADE_0) \
_op_(G2SB_CTX1_G2ALPHABLEND_0) \
_op_(G2SB_CTX1_G2CLIPLEFTTOP_0) \
_op_(G2SB_CTX1_G2CLIPRIGHTBOT_0) \
_op_(G2SB_CTX1_G2PATPACK_0) \
_op_(G2SB_CTX1_G2PATPACK_SIZE_0) \
_op_(G2SB_CTX1_G2PATBA_0) \
_op_(G2SB_CTX1_G2PATOS_0) \
_op_(G2SB_CTX1_G2PATBGC_0) \
_op_(G2SB_CTX1_G2PATFGC_0) \
_op_(G2SB_CTX1_G2PATKEY_0) \
_op_(G2SB_CTX1_G2DSTBA_0) \
_op_(G2SB_CTX1_G2DSTBA_B_0) \
_op_(G2SB_CTX1_G2DSTBA_C_0) \
_op_(G2SB_CTX1_G2DSTST_0) \
_op_(G2SB_CTX1_G2SRCPACK_0) \
_op_(G2SB_CTX1_G2SRCPACK_SIZE_0) \
_op_(G2SB_CTX1_G2SRCBA_0) \
_op_(G2SB_CTX1_G2SRCBA_B_0) \
_op_(G2SB_CTX1_G2SRCST_0) \
_op_(G2SB_CTX1_G2SRCBGC_0) \
_op_(G2SB_CTX1_G2SRCFGC_0) \
_op_(G2SB_CTX1_G2SRCKEY_0) \
_op_(G2SB_CTX1_G2SRCSIZE_0) \
_op_(G2SB_CTX1_G2DSTSIZE_0) \
_op_(G2SB_CTX1_G2SRCPS_0) \
_op_(G2SB_CTX1_G2DSTPS_0) \
_op_(G2SB_CTX1_G2CBDES_0) \
_op_(G2SB_CTX1_G2CBSTRIDE_0) \
_op_(G2SB_CTX1_G2LINESETTING_0) \
_op_(G2SB_CTX1_G2LINEDELTAN_0) \
_op_(G2SB_CTX1_G2LINEDELTAM_0) \
_op_(G2SB_CTX1_G2LINEPOS_0) \
_op_(G2SB_CTX1_G2LINELEN_0) \
_op_(G2SB_CTX1_G2CSCFOURTH_0) \
_op_(G2SB_CTX1_G2SRCST_B_0) \
_op_(G2SB_CTX1_G2UVSTRIDE_0) \
_op_(G2SB_CTX1_G2CBDES2_0) \
_op_(G2SB_CTX1_G2TILEMODE_0) \
_op_(G2SB_CTX1_G2PATBASE_0) \
_op_(G2SB_CTX1_G2SRCBA_SB_SURFBASE_0) \
_op_(G2SB_CTX1_G2DSTBA_SB_SURFBASE_0) \
_op_(G2SB_CTX1_G2DSTBA_B_SB_SURFBASE_0) \
_op_(G2SB_CTX1_G2VBA_A_SB_SURFBASE_0) \
_op_(G2SB_CTX1_G2UBA_A_SB_SURFBASE_0) \
_op_(G2SB_CTX2_INCR_SYNCPT_0) \
_op_(G2SB_CTX2_INCR_SYNCPT_CNTRL_0) \
_op_(G2SB_CTX2_INCR_SYNCPT_ERROR_0) \
_op_(G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0) \
_op_(G2SB_CTX2_G2TRIGGER_0) \
_op_(G2SB_CTX2_G2TRIGGER1_0) \
_op_(G2SB_CTX2_G2TRIGGER2_0) \
_op_(G2SB_CTX2_G2CMDSEL_0) \
_op_(G2SB_CTX2_G2RAISE_0) \
_op_(G2SB_CTX2_G2HOSTSET_0) \
_op_(G2SB_CTX2_G2HOSTFIFO_0) \
_op_(G2SB_CTX2_G2VDDA_0) \
_op_(G2SB_CTX2_G2VDDAINI_0) \
_op_(G2SB_CTX2_G2HDDA_0) \
_op_(G2SB_CTX2_G2HDDAINILS_0) \
_op_(G2SB_CTX2_G2CSCFIRST_0) \
_op_(G2SB_CTX2_G2CSCSECOND_0) \
_op_(G2SB_CTX2_G2CSCTHIRD_0) \
_op_(G2SB_CTX2_G2CMKEYL_0) \
_op_(G2SB_CTX2_G2CMKEYU_0) \
_op_(G2SB_CTX2_G2UBA_A_0) \
_op_(G2SB_CTX2_G2VBA_A_0) \
_op_(G2SB_CTX2_G2SBFORMAT_0) \
_op_(G2SB_CTX2_G2CONTROLSB_0) \
_op_(G2SB_CTX2_G2CONTROLSECOND_0) \
_op_(G2SB_CTX2_G2CONTROLMAIN_0) \
_op_(G2SB_CTX2_G2ROPFADE_0) \
_op_(G2SB_CTX2_G2ALPHABLEND_0) \
_op_(G2SB_CTX2_G2CLIPLEFTTOP_0) \
_op_(G2SB_CTX2_G2CLIPRIGHTBOT_0) \
_op_(G2SB_CTX2_G2PATPACK_0) \
_op_(G2SB_CTX2_G2PATPACK_SIZE_0) \
_op_(G2SB_CTX2_G2PATBA_0) \
_op_(G2SB_CTX2_G2PATOS_0) \
_op_(G2SB_CTX2_G2PATBGC_0) \
_op_(G2SB_CTX2_G2PATFGC_0) \
_op_(G2SB_CTX2_G2PATKEY_0) \
_op_(G2SB_CTX2_G2DSTBA_0) \
_op_(G2SB_CTX2_G2DSTBA_B_0) \
_op_(G2SB_CTX2_G2DSTBA_C_0) \
_op_(G2SB_CTX2_G2DSTST_0) \
_op_(G2SB_CTX2_G2SRCPACK_0) \
_op_(G2SB_CTX2_G2SRCPACK_SIZE_0) \
_op_(G2SB_CTX2_G2SRCBA_0) \
_op_(G2SB_CTX2_G2SRCBA_B_0) \
_op_(G2SB_CTX2_G2SRCST_0) \
_op_(G2SB_CTX2_G2SRCBGC_0) \
_op_(G2SB_CTX2_G2SRCFGC_0) \
_op_(G2SB_CTX2_G2SRCKEY_0) \
_op_(G2SB_CTX2_G2SRCSIZE_0) \
_op_(G2SB_CTX2_G2DSTSIZE_0) \
_op_(G2SB_CTX2_G2SRCPS_0) \
_op_(G2SB_CTX2_G2DSTPS_0) \
_op_(G2SB_CTX2_G2CBDES_0) \
_op_(G2SB_CTX2_G2CBSTRIDE_0) \
_op_(G2SB_CTX2_G2LINESETTING_0) \
_op_(G2SB_CTX2_G2LINEDELTAN_0) \
_op_(G2SB_CTX2_G2LINEDELTAM_0) \
_op_(G2SB_CTX2_G2LINEPOS_0) \
_op_(G2SB_CTX2_G2LINELEN_0) \
_op_(G2SB_CTX2_G2CSCFOURTH_0) \
_op_(G2SB_CTX2_G2SRCST_B_0) \
_op_(G2SB_CTX2_G2UVSTRIDE_0) \
_op_(G2SB_CTX2_G2CBDES2_0) \
_op_(G2SB_CTX2_G2TILEMODE_0) \
_op_(G2SB_CTX2_G2PATBASE_0) \
_op_(G2SB_CTX2_G2SRCBA_SB_SURFBASE_0) \
_op_(G2SB_CTX2_G2DSTBA_SB_SURFBASE_0) \
_op_(G2SB_CTX2_G2DSTBA_B_SB_SURFBASE_0) \
_op_(G2SB_CTX2_G2VBA_A_SB_SURFBASE_0) \
_op_(G2SB_CTX2_G2UBA_A_SB_SURFBASE_0) \
_op_(G2SB_CTX3_INCR_SYNCPT_0) \
_op_(G2SB_CTX3_INCR_SYNCPT_CNTRL_0) \
_op_(G2SB_CTX3_INCR_SYNCPT_ERROR_0) \
_op_(G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0) \
_op_(G2SB_CTX3_G2TRIGGER_0) \
_op_(G2SB_CTX3_G2TRIGGER1_0) \
_op_(G2SB_CTX3_G2TRIGGER2_0) \
_op_(G2SB_CTX3_G2CMDSEL_0) \
_op_(G2SB_CTX3_G2RAISE_0) \
_op_(G2SB_CTX3_G2HOSTSET_0) \
_op_(G2SB_CTX3_G2HOSTFIFO_0) \
_op_(G2SB_CTX3_G2VDDA_0) \
_op_(G2SB_CTX3_G2VDDAINI_0) \
_op_(G2SB_CTX3_G2HDDA_0) \
_op_(G2SB_CTX3_G2HDDAINILS_0) \
_op_(G2SB_CTX3_G2CSCFIRST_0) \
_op_(G2SB_CTX3_G2CSCSECOND_0) \
_op_(G2SB_CTX3_G2CSCTHIRD_0) \
_op_(G2SB_CTX3_G2CMKEYL_0) \
_op_(G2SB_CTX3_G2CMKEYU_0) \
_op_(G2SB_CTX3_G2UBA_A_0) \
_op_(G2SB_CTX3_G2VBA_A_0) \
_op_(G2SB_CTX3_G2SBFORMAT_0) \
_op_(G2SB_CTX3_G2CONTROLSB_0) \
_op_(G2SB_CTX3_G2CONTROLSECOND_0) \
_op_(G2SB_CTX3_G2CONTROLMAIN_0) \
_op_(G2SB_CTX3_G2ROPFADE_0) \
_op_(G2SB_CTX3_G2ALPHABLEND_0) \
_op_(G2SB_CTX3_G2CLIPLEFTTOP_0) \
_op_(G2SB_CTX3_G2CLIPRIGHTBOT_0) \
_op_(G2SB_CTX3_G2PATPACK_0) \
_op_(G2SB_CTX3_G2PATPACK_SIZE_0) \
_op_(G2SB_CTX3_G2PATBA_0) \
_op_(G2SB_CTX3_G2PATOS_0) \
_op_(G2SB_CTX3_G2PATBGC_0) \
_op_(G2SB_CTX3_G2PATFGC_0) \
_op_(G2SB_CTX3_G2PATKEY_0) \
_op_(G2SB_CTX3_G2DSTBA_0) \
_op_(G2SB_CTX3_G2DSTBA_B_0) \
_op_(G2SB_CTX3_G2DSTBA_C_0) \
_op_(G2SB_CTX3_G2DSTST_0) \
_op_(G2SB_CTX3_G2SRCPACK_0) \
_op_(G2SB_CTX3_G2SRCPACK_SIZE_0) \
_op_(G2SB_CTX3_G2SRCBA_0) \
_op_(G2SB_CTX3_G2SRCBA_B_0) \
_op_(G2SB_CTX3_G2SRCST_0) \
_op_(G2SB_CTX3_G2SRCBGC_0) \
_op_(G2SB_CTX3_G2SRCFGC_0) \
_op_(G2SB_CTX3_G2SRCKEY_0) \
_op_(G2SB_CTX3_G2SRCSIZE_0) \
_op_(G2SB_CTX3_G2DSTSIZE_0) \
_op_(G2SB_CTX3_G2SRCPS_0) \
_op_(G2SB_CTX3_G2DSTPS_0) \
_op_(G2SB_CTX3_G2CBDES_0) \
_op_(G2SB_CTX3_G2CBSTRIDE_0) \
_op_(G2SB_CTX3_G2LINESETTING_0) \
_op_(G2SB_CTX3_G2LINEDELTAN_0) \
_op_(G2SB_CTX3_G2LINEDELTAM_0) \
_op_(G2SB_CTX3_G2LINEPOS_0) \
_op_(G2SB_CTX3_G2LINELEN_0) \
_op_(G2SB_CTX3_G2CSCFOURTH_0) \
_op_(G2SB_CTX3_G2SRCST_B_0) \
_op_(G2SB_CTX3_G2UVSTRIDE_0) \
_op_(G2SB_CTX3_G2CBDES2_0) \
_op_(G2SB_CTX3_G2TILEMODE_0) \
_op_(G2SB_CTX3_G2PATBASE_0) \
_op_(G2SB_CTX3_G2SRCBA_SB_SURFBASE_0) \
_op_(G2SB_CTX3_G2DSTBA_SB_SURFBASE_0) \
_op_(G2SB_CTX3_G2DSTBA_B_SB_SURFBASE_0) \
_op_(G2SB_CTX3_G2VBA_A_SB_SURFBASE_0) \
_op_(G2SB_CTX3_G2UBA_A_SB_SURFBASE_0) \
_op_(G2SB_CTX4_INCR_SYNCPT_0) \
_op_(G2SB_CTX4_INCR_SYNCPT_CNTRL_0) \
_op_(G2SB_CTX4_INCR_SYNCPT_ERROR_0) \
_op_(G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0) \
_op_(G2SB_CTX4_G2TRIGGER_0) \
_op_(G2SB_CTX4_G2TRIGGER1_0) \
_op_(G2SB_CTX4_G2TRIGGER2_0) \
_op_(G2SB_CTX4_G2CMDSEL_0) \
_op_(G2SB_CTX4_G2RAISE_0) \
_op_(G2SB_CTX4_G2HOSTSET_0) \
_op_(G2SB_CTX4_G2HOSTFIFO_0) \
_op_(G2SB_CTX4_G2VDDA_0) \
_op_(G2SB_CTX4_G2VDDAINI_0) \
_op_(G2SB_CTX4_G2HDDA_0) \
_op_(G2SB_CTX4_G2HDDAINILS_0) \
_op_(G2SB_CTX4_G2CSCFIRST_0) \
_op_(G2SB_CTX4_G2CSCSECOND_0) \
_op_(G2SB_CTX4_G2CSCTHIRD_0) \
_op_(G2SB_CTX4_G2CMKEYL_0) \
_op_(G2SB_CTX4_G2CMKEYU_0) \
_op_(G2SB_CTX4_G2UBA_A_0) \
_op_(G2SB_CTX4_G2VBA_A_0) \
_op_(G2SB_CTX4_G2SBFORMAT_0) \
_op_(G2SB_CTX4_G2CONTROLSB_0) \
_op_(G2SB_CTX4_G2CONTROLSECOND_0) \
_op_(G2SB_CTX4_G2CONTROLMAIN_0) \
_op_(G2SB_CTX4_G2ROPFADE_0) \
_op_(G2SB_CTX4_G2ALPHABLEND_0) \
_op_(G2SB_CTX4_G2CLIPLEFTTOP_0) \
_op_(G2SB_CTX4_G2CLIPRIGHTBOT_0) \
_op_(G2SB_CTX4_G2PATPACK_0) \
_op_(G2SB_CTX4_G2PATPACK_SIZE_0) \
_op_(G2SB_CTX4_G2PATBA_0) \
_op_(G2SB_CTX4_G2PATOS_0) \
_op_(G2SB_CTX4_G2PATBGC_0) \
_op_(G2SB_CTX4_G2PATFGC_0) \
_op_(G2SB_CTX4_G2PATKEY_0) \
_op_(G2SB_CTX4_G2DSTBA_0) \
_op_(G2SB_CTX4_G2DSTBA_B_0) \
_op_(G2SB_CTX4_G2DSTBA_C_0) \
_op_(G2SB_CTX4_G2DSTST_0) \
_op_(G2SB_CTX4_G2SRCPACK_0) \
_op_(G2SB_CTX4_G2SRCPACK_SIZE_0) \
_op_(G2SB_CTX4_G2SRCBA_0) \
_op_(G2SB_CTX4_G2SRCBA_B_0) \
_op_(G2SB_CTX4_G2SRCST_0) \
_op_(G2SB_CTX4_G2SRCBGC_0) \
_op_(G2SB_CTX4_G2SRCFGC_0) \
_op_(G2SB_CTX4_G2SRCKEY_0) \
_op_(G2SB_CTX4_G2SRCSIZE_0) \
_op_(G2SB_CTX4_G2DSTSIZE_0) \
_op_(G2SB_CTX4_G2SRCPS_0) \
_op_(G2SB_CTX4_G2DSTPS_0) \
_op_(G2SB_CTX4_G2CBDES_0) \
_op_(G2SB_CTX4_G2CBSTRIDE_0) \
_op_(G2SB_CTX4_G2LINESETTING_0) \
_op_(G2SB_CTX4_G2LINEDELTAN_0) \
_op_(G2SB_CTX4_G2LINEDELTAM_0) \
_op_(G2SB_CTX4_G2LINEPOS_0) \
_op_(G2SB_CTX4_G2LINELEN_0) \
_op_(G2SB_CTX4_G2CSCFOURTH_0) \
_op_(G2SB_CTX4_G2SRCST_B_0) \
_op_(G2SB_CTX4_G2UVSTRIDE_0) \
_op_(G2SB_CTX4_G2CBDES2_0) \
_op_(G2SB_CTX4_G2TILEMODE_0) \
_op_(G2SB_CTX4_G2PATBASE_0) \
_op_(G2SB_CTX4_G2SRCBA_SB_SURFBASE_0) \
_op_(G2SB_CTX4_G2DSTBA_SB_SURFBASE_0) \
_op_(G2SB_CTX4_G2DSTBA_B_SB_SURFBASE_0) \
_op_(G2SB_CTX4_G2VBA_A_SB_SURFBASE_0) \
_op_(G2SB_CTX4_G2UBA_A_SB_SURFBASE_0) \
_op_(G2SB_CTX5_INCR_SYNCPT_0) \
_op_(G2SB_CTX5_INCR_SYNCPT_CNTRL_0) \
_op_(G2SB_CTX5_INCR_SYNCPT_ERROR_0) \
_op_(G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0) \
_op_(G2SB_CTX5_G2TRIGGER_0) \
_op_(G2SB_CTX5_G2TRIGGER1_0) \
_op_(G2SB_CTX5_G2TRIGGER2_0) \
_op_(G2SB_CTX5_G2CMDSEL_0) \
_op_(G2SB_CTX5_G2RAISE_0) \
_op_(G2SB_CTX5_G2HOSTSET_0) \
_op_(G2SB_CTX5_G2HOSTFIFO_0) \
_op_(G2SB_CTX5_G2VDDA_0) \
_op_(G2SB_CTX5_G2VDDAINI_0) \
_op_(G2SB_CTX5_G2HDDA_0) \
_op_(G2SB_CTX5_G2HDDAINILS_0) \
_op_(G2SB_CTX5_G2CSCFIRST_0) \
_op_(G2SB_CTX5_G2CSCSECOND_0) \
_op_(G2SB_CTX5_G2CSCTHIRD_0) \
_op_(G2SB_CTX5_G2CMKEYL_0) \
_op_(G2SB_CTX5_G2CMKEYU_0) \
_op_(G2SB_CTX5_G2UBA_A_0) \
_op_(G2SB_CTX5_G2VBA_A_0) \
_op_(G2SB_CTX5_G2SBFORMAT_0) \
_op_(G2SB_CTX5_G2CONTROLSB_0) \
_op_(G2SB_CTX5_G2CONTROLSECOND_0) \
_op_(G2SB_CTX5_G2CONTROLMAIN_0) \
_op_(G2SB_CTX5_G2ROPFADE_0) \
_op_(G2SB_CTX5_G2ALPHABLEND_0) \
_op_(G2SB_CTX5_G2CLIPLEFTTOP_0) \
_op_(G2SB_CTX5_G2CLIPRIGHTBOT_0) \
_op_(G2SB_CTX5_G2PATPACK_0) \
_op_(G2SB_CTX5_G2PATPACK_SIZE_0) \
_op_(G2SB_CTX5_G2PATBA_0) \
_op_(G2SB_CTX5_G2PATOS_0) \
_op_(G2SB_CTX5_G2PATBGC_0) \
_op_(G2SB_CTX5_G2PATFGC_0) \
_op_(G2SB_CTX5_G2PATKEY_0) \
_op_(G2SB_CTX5_G2DSTBA_0) \
_op_(G2SB_CTX5_G2DSTBA_B_0) \
_op_(G2SB_CTX5_G2DSTBA_C_0) \
_op_(G2SB_CTX5_G2DSTST_0) \
_op_(G2SB_CTX5_G2SRCPACK_0) \
_op_(G2SB_CTX5_G2SRCPACK_SIZE_0) \
_op_(G2SB_CTX5_G2SRCBA_0) \
_op_(G2SB_CTX5_G2SRCBA_B_0) \
_op_(G2SB_CTX5_G2SRCST_0) \
_op_(G2SB_CTX5_G2SRCBGC_0) \
_op_(G2SB_CTX5_G2SRCFGC_0) \
_op_(G2SB_CTX5_G2SRCKEY_0) \
_op_(G2SB_CTX5_G2SRCSIZE_0) \
_op_(G2SB_CTX5_G2DSTSIZE_0) \
_op_(G2SB_CTX5_G2SRCPS_0) \
_op_(G2SB_CTX5_G2DSTPS_0) \
_op_(G2SB_CTX5_G2CBDES_0) \
_op_(G2SB_CTX5_G2CBSTRIDE_0) \
_op_(G2SB_CTX5_G2LINESETTING_0) \
_op_(G2SB_CTX5_G2LINEDELTAN_0) \
_op_(G2SB_CTX5_G2LINEDELTAM_0) \
_op_(G2SB_CTX5_G2LINEPOS_0) \
_op_(G2SB_CTX5_G2LINELEN_0) \
_op_(G2SB_CTX5_G2CSCFOURTH_0) \
_op_(G2SB_CTX5_G2SRCST_B_0) \
_op_(G2SB_CTX5_G2UVSTRIDE_0) \
_op_(G2SB_CTX5_G2CBDES2_0) \
_op_(G2SB_CTX5_G2TILEMODE_0) \
_op_(G2SB_CTX5_G2PATBASE_0) \
_op_(G2SB_CTX5_G2SRCBA_SB_SURFBASE_0) \
_op_(G2SB_CTX5_G2DSTBA_SB_SURFBASE_0) \
_op_(G2SB_CTX5_G2DSTBA_B_SB_SURFBASE_0) \
_op_(G2SB_CTX5_G2VBA_A_SB_SURFBASE_0) \
_op_(G2SB_CTX5_G2UBA_A_SB_SURFBASE_0) \
_op_(G2SB_CTX6_INCR_SYNCPT_0) \
_op_(G2SB_CTX6_INCR_SYNCPT_CNTRL_0) \
_op_(G2SB_CTX6_INCR_SYNCPT_ERROR_0) \
_op_(G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0) \
_op_(G2SB_CTX6_G2TRIGGER_0) \
_op_(G2SB_CTX6_G2TRIGGER1_0) \
_op_(G2SB_CTX6_G2TRIGGER2_0) \
_op_(G2SB_CTX6_G2CMDSEL_0) \
_op_(G2SB_CTX6_G2RAISE_0) \
_op_(G2SB_CTX6_G2HOSTSET_0) \
_op_(G2SB_CTX6_G2HOSTFIFO_0) \
_op_(G2SB_CTX6_G2VDDA_0) \
_op_(G2SB_CTX6_G2VDDAINI_0) \
_op_(G2SB_CTX6_G2HDDA_0) \
_op_(G2SB_CTX6_G2HDDAINILS_0) \
_op_(G2SB_CTX6_G2CSCFIRST_0) \
_op_(G2SB_CTX6_G2CSCSECOND_0) \
_op_(G2SB_CTX6_G2CSCTHIRD_0) \
_op_(G2SB_CTX6_G2CMKEYL_0) \
_op_(G2SB_CTX6_G2CMKEYU_0) \
_op_(G2SB_CTX6_G2UBA_A_0) \
_op_(G2SB_CTX6_G2VBA_A_0) \
_op_(G2SB_CTX6_G2SBFORMAT_0) \
_op_(G2SB_CTX6_G2CONTROLSB_0) \
_op_(G2SB_CTX6_G2CONTROLSECOND_0) \
_op_(G2SB_CTX6_G2CONTROLMAIN_0) \
_op_(G2SB_CTX6_G2ROPFADE_0) \
_op_(G2SB_CTX6_G2ALPHABLEND_0) \
_op_(G2SB_CTX6_G2CLIPLEFTTOP_0) \
_op_(G2SB_CTX6_G2CLIPRIGHTBOT_0) \
_op_(G2SB_CTX6_G2PATPACK_0) \
_op_(G2SB_CTX6_G2PATPACK_SIZE_0) \
_op_(G2SB_CTX6_G2PATBA_0) \
_op_(G2SB_CTX6_G2PATOS_0) \
_op_(G2SB_CTX6_G2PATBGC_0) \
_op_(G2SB_CTX6_G2PATFGC_0) \
_op_(G2SB_CTX6_G2PATKEY_0) \
_op_(G2SB_CTX6_G2DSTBA_0) \
_op_(G2SB_CTX6_G2DSTBA_B_0) \
_op_(G2SB_CTX6_G2DSTBA_C_0) \
_op_(G2SB_CTX6_G2DSTST_0) \
_op_(G2SB_CTX6_G2SRCPACK_0) \
_op_(G2SB_CTX6_G2SRCPACK_SIZE_0) \
_op_(G2SB_CTX6_G2SRCBA_0) \
_op_(G2SB_CTX6_G2SRCBA_B_0) \
_op_(G2SB_CTX6_G2SRCST_0) \
_op_(G2SB_CTX6_G2SRCBGC_0) \
_op_(G2SB_CTX6_G2SRCFGC_0) \
_op_(G2SB_CTX6_G2SRCKEY_0) \
_op_(G2SB_CTX6_G2SRCSIZE_0) \
_op_(G2SB_CTX6_G2DSTSIZE_0) \
_op_(G2SB_CTX6_G2SRCPS_0) \
_op_(G2SB_CTX6_G2DSTPS_0) \
_op_(G2SB_CTX6_G2CBDES_0) \
_op_(G2SB_CTX6_G2CBSTRIDE_0) \
_op_(G2SB_CTX6_G2LINESETTING_0) \
_op_(G2SB_CTX6_G2LINEDELTAN_0) \
_op_(G2SB_CTX6_G2LINEDELTAM_0) \
_op_(G2SB_CTX6_G2LINEPOS_0) \
_op_(G2SB_CTX6_G2LINELEN_0) \
_op_(G2SB_CTX6_G2CSCFOURTH_0) \
_op_(G2SB_CTX6_G2SRCST_B_0) \
_op_(G2SB_CTX6_G2UVSTRIDE_0) \
_op_(G2SB_CTX6_G2CBDES2_0) \
_op_(G2SB_CTX6_G2TILEMODE_0) \
_op_(G2SB_CTX6_G2PATBASE_0) \
_op_(G2SB_CTX6_G2SRCBA_SB_SURFBASE_0) \
_op_(G2SB_CTX6_G2DSTBA_SB_SURFBASE_0) \
_op_(G2SB_CTX6_G2DSTBA_B_SB_SURFBASE_0) \
_op_(G2SB_CTX6_G2VBA_A_SB_SURFBASE_0) \
_op_(G2SB_CTX6_G2UBA_A_SB_SURFBASE_0) \
_op_(G2SB_CTX7_INCR_SYNCPT_0) \
_op_(G2SB_CTX7_INCR_SYNCPT_CNTRL_0) \
_op_(G2SB_CTX7_INCR_SYNCPT_ERROR_0) \
_op_(G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0) \
_op_(G2SB_CTX7_G2TRIGGER_0) \
_op_(G2SB_CTX7_G2TRIGGER1_0) \
_op_(G2SB_CTX7_G2TRIGGER2_0) \
_op_(G2SB_CTX7_G2CMDSEL_0) \
_op_(G2SB_CTX7_G2RAISE_0) \
_op_(G2SB_CTX7_G2HOSTSET_0) \
_op_(G2SB_CTX7_G2HOSTFIFO_0) \
_op_(G2SB_CTX7_G2VDDA_0) \
_op_(G2SB_CTX7_G2VDDAINI_0) \
_op_(G2SB_CTX7_G2HDDA_0) \
_op_(G2SB_CTX7_G2HDDAINILS_0) \
_op_(G2SB_CTX7_G2CSCFIRST_0) \
_op_(G2SB_CTX7_G2CSCSECOND_0) \
_op_(G2SB_CTX7_G2CSCTHIRD_0) \
_op_(G2SB_CTX7_G2CMKEYL_0) \
_op_(G2SB_CTX7_G2CMKEYU_0) \
_op_(G2SB_CTX7_G2UBA_A_0) \
_op_(G2SB_CTX7_G2VBA_A_0) \
_op_(G2SB_CTX7_G2SBFORMAT_0) \
_op_(G2SB_CTX7_G2CONTROLSB_0) \
_op_(G2SB_CTX7_G2CONTROLSECOND_0) \
_op_(G2SB_CTX7_G2CONTROLMAIN_0) \
_op_(G2SB_CTX7_G2ROPFADE_0) \
_op_(G2SB_CTX7_G2ALPHABLEND_0) \
_op_(G2SB_CTX7_G2CLIPLEFTTOP_0) \
_op_(G2SB_CTX7_G2CLIPRIGHTBOT_0) \
_op_(G2SB_CTX7_G2PATPACK_0) \
_op_(G2SB_CTX7_G2PATPACK_SIZE_0) \
_op_(G2SB_CTX7_G2PATBA_0) \
_op_(G2SB_CTX7_G2PATOS_0) \
_op_(G2SB_CTX7_G2PATBGC_0) \
_op_(G2SB_CTX7_G2PATFGC_0) \
_op_(G2SB_CTX7_G2PATKEY_0) \
_op_(G2SB_CTX7_G2DSTBA_0) \
_op_(G2SB_CTX7_G2DSTBA_B_0) \
_op_(G2SB_CTX7_G2DSTBA_C_0) \
_op_(G2SB_CTX7_G2DSTST_0) \
_op_(G2SB_CTX7_G2SRCPACK_0) \
_op_(G2SB_CTX7_G2SRCPACK_SIZE_0) \
_op_(G2SB_CTX7_G2SRCBA_0) \
_op_(G2SB_CTX7_G2SRCBA_B_0) \
_op_(G2SB_CTX7_G2SRCST_0) \
_op_(G2SB_CTX7_G2SRCBGC_0) \
_op_(G2SB_CTX7_G2SRCFGC_0) \
_op_(G2SB_CTX7_G2SRCKEY_0) \
_op_(G2SB_CTX7_G2SRCSIZE_0) \
_op_(G2SB_CTX7_G2DSTSIZE_0) \
_op_(G2SB_CTX7_G2SRCPS_0) \
_op_(G2SB_CTX7_G2DSTPS_0) \
_op_(G2SB_CTX7_G2CBDES_0) \
_op_(G2SB_CTX7_G2CBSTRIDE_0) \
_op_(G2SB_CTX7_G2LINESETTING_0) \
_op_(G2SB_CTX7_G2LINEDELTAN_0) \
_op_(G2SB_CTX7_G2LINEDELTAM_0) \
_op_(G2SB_CTX7_G2LINEPOS_0) \
_op_(G2SB_CTX7_G2LINELEN_0) \
_op_(G2SB_CTX7_G2CSCFOURTH_0) \
_op_(G2SB_CTX7_G2SRCST_B_0) \
_op_(G2SB_CTX7_G2UVSTRIDE_0) \
_op_(G2SB_CTX7_G2CBDES2_0) \
_op_(G2SB_CTX7_G2TILEMODE_0) \
_op_(G2SB_CTX7_G2PATBASE_0) \
_op_(G2SB_CTX7_G2SRCBA_SB_SURFBASE_0) \
_op_(G2SB_CTX7_G2DSTBA_SB_SURFBASE_0) \
_op_(G2SB_CTX7_G2DSTBA_B_SB_SURFBASE_0) \
_op_(G2SB_CTX7_G2VBA_A_SB_SURFBASE_0) \
_op_(G2SB_CTX7_G2UBA_A_SB_SURFBASE_0) \
_op_(G2SB_SWITCH_G2INTERRUPT_0) \
_op_(G2SB_SWITCH_G2INTENABLE_0) \
_op_(G2SB_SWITCH_G2CURRENTCONTEXT_0) \
_op_(G2SB_SWITCH_G2NXTCXTSWITCH_0) \
_op_(G2SB_SWITCH_G2GLOBALCONTROL_0) \
_op_(G2SB_SWITCH_G2GLOBALCONTROLB_0) \
_op_(G2SB_SWITCH_G2WORKINGSTAT_0) \
_op_(G2SB_SWITCH_G2BUFTHRESHOLD_0) \
_op_(G2SB_SWITCH_CLKEN_OVERIDE_0) \
_op_(G2SB_SWITCH_G2_MCCIF_FIFOCTRL_0) \
_op_(G2SB_SWITCH_TIMEOUT_WCOAL_G2_0) \
_op_(G2SB_SWITCH_MCCIF_G2PR_HYST_0) \
_op_(G2SB_SWITCH_MCCIF_G2SR_HYST_0) \
_op_(G2SB_SWITCH_MCCIF_G2DR_HYST_0) \
_op_(G2SB_SWITCH_MCCIF_G2DW_HYST_0)


//
// ADDRESS SPACES
//

#define BASE_ADDRESS_G2SB       0x00000000
#define BASE_ADDRESS_G2SB_CTX1  0x00004000
#define BASE_ADDRESS_G2SB_CTX2  0x00008000
#define BASE_ADDRESS_G2SB_CTX3  0x00001000
#define BASE_ADDRESS_G2SB_CTX4  0x00005000
#define BASE_ADDRESS_G2SB_CTX5  0x00002000
#define BASE_ADDRESS_G2SB_CTX6  0x00006000
#define BASE_ADDRESS_G2SB_CTX7  0x0000a000
#define BASE_ADDRESS_G2SB_SWITCH        0x0000f000

//
// ARG2SB REGISTER BANKS
//

#define G2SB0_FIRST_REG 0x0000 // G2SB_INCR_SYNCPT_0
#define G2SB0_LAST_REG 0x0002 // G2SB_INCR_SYNCPT_ERROR_0
#define G2SB1_FIRST_REG 0x0008 // G2SB_G2CLASSCHANNEL_REGONLY_0
#define G2SB1_LAST_REG 0x000d // G2SB_G2RAISE_0
#define G2SB2_FIRST_REG 0x000f // G2SB_G2HOSTSET_0
#define G2SB2_LAST_REG 0x004c // G2SB_G2UBA_A_SB_SURFBASE_0
#define G2SB_CTX10_FIRST_REG 0x4000 // G2SB_CTX1_INCR_SYNCPT_0
#define G2SB_CTX10_LAST_REG 0x4002 // G2SB_CTX1_INCR_SYNCPT_ERROR_0
#define G2SB_CTX11_FIRST_REG 0x4008 // G2SB_CTX1_G2CLASSCHANNEL_REGONLY_0
#define G2SB_CTX11_LAST_REG 0x400d // G2SB_CTX1_G2RAISE_0
#define G2SB_CTX12_FIRST_REG 0x400f // G2SB_CTX1_G2HOSTSET_0
#define G2SB_CTX12_LAST_REG 0x404c // G2SB_CTX1_G2UBA_A_SB_SURFBASE_0
#define G2SB_CTX20_FIRST_REG 0x8000 // G2SB_CTX2_INCR_SYNCPT_0
#define G2SB_CTX20_LAST_REG 0x8002 // G2SB_CTX2_INCR_SYNCPT_ERROR_0
#define G2SB_CTX21_FIRST_REG 0x8008 // G2SB_CTX2_G2CLASSCHANNEL_REGONLY_0
#define G2SB_CTX21_LAST_REG 0x800d // G2SB_CTX2_G2RAISE_0
#define G2SB_CTX22_FIRST_REG 0x800f // G2SB_CTX2_G2HOSTSET_0
#define G2SB_CTX22_LAST_REG 0x804c // G2SB_CTX2_G2UBA_A_SB_SURFBASE_0
#define G2SB_CTX30_FIRST_REG 0x1000 // G2SB_CTX3_INCR_SYNCPT_0
#define G2SB_CTX30_LAST_REG 0x1002 // G2SB_CTX3_INCR_SYNCPT_ERROR_0
#define G2SB_CTX31_FIRST_REG 0x1008 // G2SB_CTX3_G2CLASSCHANNEL_REGONLY_0
#define G2SB_CTX31_LAST_REG 0x100d // G2SB_CTX3_G2RAISE_0
#define G2SB_CTX32_FIRST_REG 0x100f // G2SB_CTX3_G2HOSTSET_0
#define G2SB_CTX32_LAST_REG 0x104c // G2SB_CTX3_G2UBA_A_SB_SURFBASE_0
#define G2SB_CTX40_FIRST_REG 0x5000 // G2SB_CTX4_INCR_SYNCPT_0
#define G2SB_CTX40_LAST_REG 0x5002 // G2SB_CTX4_INCR_SYNCPT_ERROR_0
#define G2SB_CTX41_FIRST_REG 0x5008 // G2SB_CTX4_G2CLASSCHANNEL_REGONLY_0
#define G2SB_CTX41_LAST_REG 0x500d // G2SB_CTX4_G2RAISE_0
#define G2SB_CTX42_FIRST_REG 0x500f // G2SB_CTX4_G2HOSTSET_0
#define G2SB_CTX42_LAST_REG 0x504c // G2SB_CTX4_G2UBA_A_SB_SURFBASE_0
#define G2SB_CTX50_FIRST_REG 0x2000 // G2SB_CTX5_INCR_SYNCPT_0
#define G2SB_CTX50_LAST_REG 0x2002 // G2SB_CTX5_INCR_SYNCPT_ERROR_0
#define G2SB_CTX51_FIRST_REG 0x2008 // G2SB_CTX5_G2CLASSCHANNEL_REGONLY_0
#define G2SB_CTX51_LAST_REG 0x200d // G2SB_CTX5_G2RAISE_0
#define G2SB_CTX52_FIRST_REG 0x200f // G2SB_CTX5_G2HOSTSET_0
#define G2SB_CTX52_LAST_REG 0x204c // G2SB_CTX5_G2UBA_A_SB_SURFBASE_0
#define G2SB_CTX60_FIRST_REG 0x6000 // G2SB_CTX6_INCR_SYNCPT_0
#define G2SB_CTX60_LAST_REG 0x6002 // G2SB_CTX6_INCR_SYNCPT_ERROR_0
#define G2SB_CTX61_FIRST_REG 0x6008 // G2SB_CTX6_G2CLASSCHANNEL_REGONLY_0
#define G2SB_CTX61_LAST_REG 0x600d // G2SB_CTX6_G2RAISE_0
#define G2SB_CTX62_FIRST_REG 0x600f // G2SB_CTX6_G2HOSTSET_0
#define G2SB_CTX62_LAST_REG 0x604c // G2SB_CTX6_G2UBA_A_SB_SURFBASE_0
#define G2SB_CTX70_FIRST_REG 0xa000 // G2SB_CTX7_INCR_SYNCPT_0
#define G2SB_CTX70_LAST_REG 0xa002 // G2SB_CTX7_INCR_SYNCPT_ERROR_0
#define G2SB_CTX71_FIRST_REG 0xa008 // G2SB_CTX7_G2CLASSCHANNEL_REGONLY_0
#define G2SB_CTX71_LAST_REG 0xa00d // G2SB_CTX7_G2RAISE_0
#define G2SB_CTX72_FIRST_REG 0xa00f // G2SB_CTX7_G2HOSTSET_0
#define G2SB_CTX72_LAST_REG 0xa04c // G2SB_CTX7_G2UBA_A_SB_SURFBASE_0
#define G2SB_SWITCH0_FIRST_REG 0xf000 // G2SB_SWITCH_G2INTERRUPT_0
#define G2SB_SWITCH0_LAST_REG 0xf00e // G2SB_SWITCH_MCCIF_G2DW_HYST_0

#ifndef _MK_SHIFT_CONST
  #define _MK_SHIFT_CONST(_constant_) _constant_
#endif
#ifndef _MK_MASK_CONST
  #define _MK_MASK_CONST(_constant_) _constant_
#endif
#ifndef _MK_ENUM_CONST
  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
#endif
#ifndef _MK_ADDR_CONST
  #define _MK_ADDR_CONST(_constant_) _constant_
#endif

#endif // ifndef ___ARG2SB_H_INC_
