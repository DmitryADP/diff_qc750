//
// DO NOT EDIT - generated by simspec!
//

#ifndef ___ARAHB_ARBC_H_INC_
#define ___ARAHB_ARBC_H_INC_
// NOTE: Although the above base is 0x0000000, the actual starting address 
// is 0x0000c004.  This is because in defs/project_ap15_address_map.spec, 
// NV_ADDRESS_MAP_PPSB_AHB_ARBC_OFFSET defined as 0x0000c004.
// The comments are actually correct, matching RTL implementation and
// resolved auto-generated addresses based on the spec system.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  The AHB arbitration control register allow the user to tweak the arbitration behavior of the AHB arbiter.
//      (1)     Enable bus parking.  This will keep granted the last serviced AHB master on the bus so that
//              it can start another transaction faster.  If bus parking is disabled, no AHB masters will be
//              able to start a new transaction until the arbitration is done and the master is granted the
//              bus.
//      (2)     Allow user to specifically disable an AHB master from arbitrating on the AHB bus. 
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AHB Arbitration Controller Register

// Register AHB_ARBITRATION_DISABLE_0  
#define AHB_ARBITRATION_DISABLE_0                       _MK_ADDR_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_SECURE                        0x0
#define AHB_ARBITRATION_DISABLE_0_WORD_COUNT                    0x1
#define AHB_ARBITRATION_DISABLE_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_RESET_MASK                    _MK_MASK_CONST(0x801f3fff)
#define AHB_ARBITRATION_DISABLE_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_READ_MASK                     _MK_MASK_CONST(0x801f3fff)
#define AHB_ARBITRATION_DISABLE_0_WRITE_MASK                    _MK_MASK_CONST(0x801f3fff)
//  1 = disable bus parking.
#define AHB_ARBITRATION_DISABLE_0_DIS_BUS_PARK_SHIFT                    _MK_SHIFT_CONST(31)
#define AHB_ARBITRATION_DISABLE_0_DIS_BUS_PARK_FIELD                    (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_DISABLE_0_DIS_BUS_PARK_SHIFT)
#define AHB_ARBITRATION_DISABLE_0_DIS_BUS_PARK_RANGE                    31:31
#define AHB_ARBITRATION_DISABLE_0_DIS_BUS_PARK_WOFFSET                  0x0
#define AHB_ARBITRATION_DISABLE_0_DIS_BUS_PARK_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_DIS_BUS_PARK_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_DISABLE_0_DIS_BUS_PARK_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_DIS_BUS_PARK_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_DIS_BUS_PARK_ENABLE                   _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_DISABLE_0_DIS_BUS_PARK_DISABLE                  _MK_ENUM_CONST(1)

//  1 = disable SDMMC3 from arbitration.
#define AHB_ARBITRATION_DISABLE_0_SDMMC3_SHIFT                  _MK_SHIFT_CONST(20)
#define AHB_ARBITRATION_DISABLE_0_SDMMC3_FIELD                  (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_DISABLE_0_SDMMC3_SHIFT)
#define AHB_ARBITRATION_DISABLE_0_SDMMC3_RANGE                  20:20
#define AHB_ARBITRATION_DISABLE_0_SDMMC3_WOFFSET                        0x0
#define AHB_ARBITRATION_DISABLE_0_SDMMC3_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_SDMMC3_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_DISABLE_0_SDMMC3_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_SDMMC3_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_SDMMC3_ENABLE                 _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_DISABLE_0_SDMMC3_DISABLE                        _MK_ENUM_CONST(1)

//  1 = disable SDMMC2 from arbitration.
#define AHB_ARBITRATION_DISABLE_0_SDMMC2_SHIFT                  _MK_SHIFT_CONST(19)
#define AHB_ARBITRATION_DISABLE_0_SDMMC2_FIELD                  (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_DISABLE_0_SDMMC2_SHIFT)
#define AHB_ARBITRATION_DISABLE_0_SDMMC2_RANGE                  19:19
#define AHB_ARBITRATION_DISABLE_0_SDMMC2_WOFFSET                        0x0
#define AHB_ARBITRATION_DISABLE_0_SDMMC2_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_SDMMC2_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_DISABLE_0_SDMMC2_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_SDMMC2_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_SDMMC2_ENABLE                 _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_DISABLE_0_SDMMC2_DISABLE                        _MK_ENUM_CONST(1)

//  1 = disable USB2 from arbitration.
#define AHB_ARBITRATION_DISABLE_0_USB2_SHIFT                    _MK_SHIFT_CONST(18)
#define AHB_ARBITRATION_DISABLE_0_USB2_FIELD                    (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_DISABLE_0_USB2_SHIFT)
#define AHB_ARBITRATION_DISABLE_0_USB2_RANGE                    18:18
#define AHB_ARBITRATION_DISABLE_0_USB2_WOFFSET                  0x0
#define AHB_ARBITRATION_DISABLE_0_USB2_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_USB2_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_DISABLE_0_USB2_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_USB2_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_USB2_ENABLE                   _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_DISABLE_0_USB2_DISABLE                  _MK_ENUM_CONST(1)

//  1 = disable USB3 from arbitration.
#define AHB_ARBITRATION_DISABLE_0_USB3_SHIFT                    _MK_SHIFT_CONST(17)
#define AHB_ARBITRATION_DISABLE_0_USB3_FIELD                    (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_DISABLE_0_USB3_SHIFT)
#define AHB_ARBITRATION_DISABLE_0_USB3_RANGE                    17:17
#define AHB_ARBITRATION_DISABLE_0_USB3_WOFFSET                  0x0
#define AHB_ARBITRATION_DISABLE_0_USB3_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_USB3_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_DISABLE_0_USB3_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_USB3_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_USB3_ENABLE                   _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_DISABLE_0_USB3_DISABLE                  _MK_ENUM_CONST(1)

//  1 = disable BSEA from arbitration.
#define AHB_ARBITRATION_DISABLE_0_BSEA_SHIFT                    _MK_SHIFT_CONST(16)
#define AHB_ARBITRATION_DISABLE_0_BSEA_FIELD                    (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_DISABLE_0_BSEA_SHIFT)
#define AHB_ARBITRATION_DISABLE_0_BSEA_RANGE                    16:16
#define AHB_ARBITRATION_DISABLE_0_BSEA_WOFFSET                  0x0
#define AHB_ARBITRATION_DISABLE_0_BSEA_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_BSEA_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_DISABLE_0_BSEA_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_BSEA_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_BSEA_ENABLE                   _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_DISABLE_0_BSEA_DISABLE                  _MK_ENUM_CONST(1)

//  1 = disable BSEV from arbitration.
#define AHB_ARBITRATION_DISABLE_0_BSEV_SHIFT                    _MK_SHIFT_CONST(13)
#define AHB_ARBITRATION_DISABLE_0_BSEV_FIELD                    (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_DISABLE_0_BSEV_SHIFT)
#define AHB_ARBITRATION_DISABLE_0_BSEV_RANGE                    13:13
#define AHB_ARBITRATION_DISABLE_0_BSEV_WOFFSET                  0x0
#define AHB_ARBITRATION_DISABLE_0_BSEV_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_BSEV_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_DISABLE_0_BSEV_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_BSEV_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_BSEV_ENABLE                   _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_DISABLE_0_BSEV_DISABLE                  _MK_ENUM_CONST(1)

//  1 = disable SDMMC4 from arbitration.
#define AHB_ARBITRATION_DISABLE_0_SDMMC4_SHIFT                  _MK_SHIFT_CONST(12)
#define AHB_ARBITRATION_DISABLE_0_SDMMC4_FIELD                  (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_DISABLE_0_SDMMC4_SHIFT)
#define AHB_ARBITRATION_DISABLE_0_SDMMC4_RANGE                  12:12
#define AHB_ARBITRATION_DISABLE_0_SDMMC4_WOFFSET                        0x0
#define AHB_ARBITRATION_DISABLE_0_SDMMC4_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_SDMMC4_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_DISABLE_0_SDMMC4_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_SDMMC4_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_SDMMC4_ENABLE                 _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_DISABLE_0_SDMMC4_DISABLE                        _MK_ENUM_CONST(1)

//  1 = disable SNOR from arbitration.
#define AHB_ARBITRATION_DISABLE_0_SNOR_SHIFT                    _MK_SHIFT_CONST(11)
#define AHB_ARBITRATION_DISABLE_0_SNOR_FIELD                    (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_DISABLE_0_SNOR_SHIFT)
#define AHB_ARBITRATION_DISABLE_0_SNOR_RANGE                    11:11
#define AHB_ARBITRATION_DISABLE_0_SNOR_WOFFSET                  0x0
#define AHB_ARBITRATION_DISABLE_0_SNOR_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_SNOR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_DISABLE_0_SNOR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_SNOR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_SNOR_ENABLE                   _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_DISABLE_0_SNOR_DISABLE                  _MK_ENUM_CONST(1)

//  1 = disable NAND from arbitration.
#define AHB_ARBITRATION_DISABLE_0_NAND_SHIFT                    _MK_SHIFT_CONST(10)
#define AHB_ARBITRATION_DISABLE_0_NAND_FIELD                    (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_DISABLE_0_NAND_SHIFT)
#define AHB_ARBITRATION_DISABLE_0_NAND_RANGE                    10:10
#define AHB_ARBITRATION_DISABLE_0_NAND_WOFFSET                  0x0
#define AHB_ARBITRATION_DISABLE_0_NAND_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_NAND_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_DISABLE_0_NAND_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_NAND_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_NAND_ENABLE                   _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_DISABLE_0_NAND_DISABLE                  _MK_ENUM_CONST(1)

//  1 = disable SDMMC1 from arbitration.
#define AHB_ARBITRATION_DISABLE_0_SDMMC1_SHIFT                  _MK_SHIFT_CONST(9)
#define AHB_ARBITRATION_DISABLE_0_SDMMC1_FIELD                  (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_DISABLE_0_SDMMC1_SHIFT)
#define AHB_ARBITRATION_DISABLE_0_SDMMC1_RANGE                  9:9
#define AHB_ARBITRATION_DISABLE_0_SDMMC1_WOFFSET                        0x0
#define AHB_ARBITRATION_DISABLE_0_SDMMC1_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_SDMMC1_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_DISABLE_0_SDMMC1_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_SDMMC1_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_SDMMC1_ENABLE                 _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_DISABLE_0_SDMMC1_DISABLE                        _MK_ENUM_CONST(1)

//  1 = disable XIO from arbitration.
#define AHB_ARBITRATION_DISABLE_0_XIO_SHIFT                     _MK_SHIFT_CONST(8)
#define AHB_ARBITRATION_DISABLE_0_XIO_FIELD                     (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_DISABLE_0_XIO_SHIFT)
#define AHB_ARBITRATION_DISABLE_0_XIO_RANGE                     8:8
#define AHB_ARBITRATION_DISABLE_0_XIO_WOFFSET                   0x0
#define AHB_ARBITRATION_DISABLE_0_XIO_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_XIO_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_DISABLE_0_XIO_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_XIO_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_XIO_ENABLE                    _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_DISABLE_0_XIO_DISABLE                   _MK_ENUM_CONST(1)

//  1 = disable APB-DMA from arbitration.
#define AHB_ARBITRATION_DISABLE_0_APBDMA_SHIFT                  _MK_SHIFT_CONST(7)
#define AHB_ARBITRATION_DISABLE_0_APBDMA_FIELD                  (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_DISABLE_0_APBDMA_SHIFT)
#define AHB_ARBITRATION_DISABLE_0_APBDMA_RANGE                  7:7
#define AHB_ARBITRATION_DISABLE_0_APBDMA_WOFFSET                        0x0
#define AHB_ARBITRATION_DISABLE_0_APBDMA_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_APBDMA_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_DISABLE_0_APBDMA_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_APBDMA_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_APBDMA_ENABLE                 _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_DISABLE_0_APBDMA_DISABLE                        _MK_ENUM_CONST(1)

//  1 = disable USB from arbitration.
#define AHB_ARBITRATION_DISABLE_0_USB_SHIFT                     _MK_SHIFT_CONST(6)
#define AHB_ARBITRATION_DISABLE_0_USB_FIELD                     (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_DISABLE_0_USB_SHIFT)
#define AHB_ARBITRATION_DISABLE_0_USB_RANGE                     6:6
#define AHB_ARBITRATION_DISABLE_0_USB_WOFFSET                   0x0
#define AHB_ARBITRATION_DISABLE_0_USB_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_USB_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_DISABLE_0_USB_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_USB_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_USB_ENABLE                    _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_DISABLE_0_USB_DISABLE                   _MK_ENUM_CONST(1)

//  1 = disable AHB-DMA from arbitration.
#define AHB_ARBITRATION_DISABLE_0_AHBDMA_SHIFT                  _MK_SHIFT_CONST(5)
#define AHB_ARBITRATION_DISABLE_0_AHBDMA_FIELD                  (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_DISABLE_0_AHBDMA_SHIFT)
#define AHB_ARBITRATION_DISABLE_0_AHBDMA_RANGE                  5:5
#define AHB_ARBITRATION_DISABLE_0_AHBDMA_WOFFSET                        0x0
#define AHB_ARBITRATION_DISABLE_0_AHBDMA_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_AHBDMA_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_DISABLE_0_AHBDMA_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_AHBDMA_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_AHBDMA_ENABLE                 _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_DISABLE_0_AHBDMA_DISABLE                        _MK_ENUM_CONST(1)

//  1 = disable EIDE from arbitration.
#define AHB_ARBITRATION_DISABLE_0_EIDE_SHIFT                    _MK_SHIFT_CONST(4)
#define AHB_ARBITRATION_DISABLE_0_EIDE_FIELD                    (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_DISABLE_0_EIDE_SHIFT)
#define AHB_ARBITRATION_DISABLE_0_EIDE_RANGE                    4:4
#define AHB_ARBITRATION_DISABLE_0_EIDE_WOFFSET                  0x0
#define AHB_ARBITRATION_DISABLE_0_EIDE_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_EIDE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_DISABLE_0_EIDE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_EIDE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_EIDE_ENABLE                   _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_DISABLE_0_EIDE_DISABLE                  _MK_ENUM_CONST(1)

//  1 = disable CoreSight from arbitration.
#define AHB_ARBITRATION_DISABLE_0_CSITE_SHIFT                   _MK_SHIFT_CONST(3)
#define AHB_ARBITRATION_DISABLE_0_CSITE_FIELD                   (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_DISABLE_0_CSITE_SHIFT)
#define AHB_ARBITRATION_DISABLE_0_CSITE_RANGE                   3:3
#define AHB_ARBITRATION_DISABLE_0_CSITE_WOFFSET                 0x0
#define AHB_ARBITRATION_DISABLE_0_CSITE_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_CSITE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_DISABLE_0_CSITE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_CSITE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_CSITE_ENABLE                  _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_DISABLE_0_CSITE_DISABLE                 _MK_ENUM_CONST(1)

//  1 = disable VCP from arbitration.
#define AHB_ARBITRATION_DISABLE_0_VCP_SHIFT                     _MK_SHIFT_CONST(2)
#define AHB_ARBITRATION_DISABLE_0_VCP_FIELD                     (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_DISABLE_0_VCP_SHIFT)
#define AHB_ARBITRATION_DISABLE_0_VCP_RANGE                     2:2
#define AHB_ARBITRATION_DISABLE_0_VCP_WOFFSET                   0x0
#define AHB_ARBITRATION_DISABLE_0_VCP_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_VCP_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_DISABLE_0_VCP_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_VCP_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_VCP_ENABLE                    _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_DISABLE_0_VCP_DISABLE                   _MK_ENUM_CONST(1)

//  1 = disable COP from arbitration.
#define AHB_ARBITRATION_DISABLE_0_COP_SHIFT                     _MK_SHIFT_CONST(1)
#define AHB_ARBITRATION_DISABLE_0_COP_FIELD                     (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_DISABLE_0_COP_SHIFT)
#define AHB_ARBITRATION_DISABLE_0_COP_RANGE                     1:1
#define AHB_ARBITRATION_DISABLE_0_COP_WOFFSET                   0x0
#define AHB_ARBITRATION_DISABLE_0_COP_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_COP_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_DISABLE_0_COP_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_COP_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_COP_ENABLE                    _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_DISABLE_0_COP_DISABLE                   _MK_ENUM_CONST(1)

//  1 = disable CPU from arbitration.
#define AHB_ARBITRATION_DISABLE_0_CPU_SHIFT                     _MK_SHIFT_CONST(0)
#define AHB_ARBITRATION_DISABLE_0_CPU_FIELD                     (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_DISABLE_0_CPU_SHIFT)
#define AHB_ARBITRATION_DISABLE_0_CPU_RANGE                     0:0
#define AHB_ARBITRATION_DISABLE_0_CPU_WOFFSET                   0x0
#define AHB_ARBITRATION_DISABLE_0_CPU_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_CPU_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_DISABLE_0_CPU_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_CPU_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_DISABLE_0_CPU_ENABLE                    _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_DISABLE_0_CPU_DISABLE                   _MK_ENUM_CONST(1)

// AHB Arbitration Priority Control Register

// Register AHB_ARBITRATION_PRIORITY_CTRL_0  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  The AHB arbiter implements a 2-level priority scheme.  In the 1st level, arbitration is determined between
//  the high and low priority group according to the priority weight; the higher the weight, the higher the
//  winning rate of the high priority group.  In the 2nd level, within each of the high/low priority group, 
//  arbitration is determined in a round-robin fashion.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define AHB_ARBITRATION_PRIORITY_CTRL_0                 _MK_ADDR_CONST(0x4)
#define AHB_ARBITRATION_PRIORITY_CTRL_0_SECURE                  0x0
#define AHB_ARBITRATION_PRIORITY_CTRL_0_WORD_COUNT                      0x1
#define AHB_ARBITRATION_PRIORITY_CTRL_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_PRIORITY_CTRL_0_RESET_MASK                      _MK_MASK_CONST(0xffffffff)
#define AHB_ARBITRATION_PRIORITY_CTRL_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_PRIORITY_CTRL_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_PRIORITY_CTRL_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define AHB_ARBITRATION_PRIORITY_CTRL_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// AHB priority weight count. This 3-bit field is  use to control 
// the amount of attention (weight) giving to the high priority 
// group before switching to the low priority group.
#define AHB_ARBITRATION_PRIORITY_CTRL_0_AHB_PRIORITY_WEIGHT_SHIFT                       _MK_SHIFT_CONST(29)
#define AHB_ARBITRATION_PRIORITY_CTRL_0_AHB_PRIORITY_WEIGHT_FIELD                       (_MK_MASK_CONST(0x7) << AHB_ARBITRATION_PRIORITY_CTRL_0_AHB_PRIORITY_WEIGHT_SHIFT)
#define AHB_ARBITRATION_PRIORITY_CTRL_0_AHB_PRIORITY_WEIGHT_RANGE                       31:29
#define AHB_ARBITRATION_PRIORITY_CTRL_0_AHB_PRIORITY_WEIGHT_WOFFSET                     0x0
#define AHB_ARBITRATION_PRIORITY_CTRL_0_AHB_PRIORITY_WEIGHT_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_PRIORITY_CTRL_0_AHB_PRIORITY_WEIGHT_DEFAULT_MASK                        _MK_MASK_CONST(0x7)
#define AHB_ARBITRATION_PRIORITY_CTRL_0_AHB_PRIORITY_WEIGHT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_PRIORITY_CTRL_0_AHB_PRIORITY_WEIGHT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

//  0 = low priority
#define AHB_ARBITRATION_PRIORITY_CTRL_0_AHB_PRIORITY_SELECT_SHIFT                       _MK_SHIFT_CONST(0)
#define AHB_ARBITRATION_PRIORITY_CTRL_0_AHB_PRIORITY_SELECT_FIELD                       (_MK_MASK_CONST(0x1fffffff) << AHB_ARBITRATION_PRIORITY_CTRL_0_AHB_PRIORITY_SELECT_SHIFT)
#define AHB_ARBITRATION_PRIORITY_CTRL_0_AHB_PRIORITY_SELECT_RANGE                       28:0
#define AHB_ARBITRATION_PRIORITY_CTRL_0_AHB_PRIORITY_SELECT_WOFFSET                     0x0
#define AHB_ARBITRATION_PRIORITY_CTRL_0_AHB_PRIORITY_SELECT_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_PRIORITY_CTRL_0_AHB_PRIORITY_SELECT_DEFAULT_MASK                        _MK_MASK_CONST(0x1fffffff)
#define AHB_ARBITRATION_PRIORITY_CTRL_0_AHB_PRIORITY_SELECT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_PRIORITY_CTRL_0_AHB_PRIORITY_SELECT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// USR Protection Register

// Register AHB_ARBITRATION_USR_PROTECT_0  
#define AHB_ARBITRATION_USR_PROTECT_0                   _MK_ADDR_CONST(0x8)
#define AHB_ARBITRATION_USR_PROTECT_0_SECURE                    0x0
#define AHB_ARBITRATION_USR_PROTECT_0_WORD_COUNT                        0x1
#define AHB_ARBITRATION_USR_PROTECT_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_RESET_MASK                        _MK_MASK_CONST(0x1ff)
#define AHB_ARBITRATION_USR_PROTECT_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_READ_MASK                         _MK_MASK_CONST(0x1ff)
#define AHB_ARBITRATION_USR_PROTECT_0_WRITE_MASK                        _MK_MASK_CONST(0x0)
// Abort on USR mode access to Cache memory space
#define AHB_ARBITRATION_USR_PROTECT_0_CACHE_SHIFT                       _MK_SHIFT_CONST(8)
#define AHB_ARBITRATION_USR_PROTECT_0_CACHE_FIELD                       (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_USR_PROTECT_0_CACHE_SHIFT)
#define AHB_ARBITRATION_USR_PROTECT_0_CACHE_RANGE                       8:8
#define AHB_ARBITRATION_USR_PROTECT_0_CACHE_WOFFSET                     0x0
#define AHB_ARBITRATION_USR_PROTECT_0_CACHE_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_CACHE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_USR_PROTECT_0_CACHE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_CACHE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_CACHE_ABT_DIS                     _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_USR_PROTECT_0_CACHE_ABT_EN                      _MK_ENUM_CONST(1)

// Abort on USR mode access to internal ROM memory  space
#define AHB_ARBITRATION_USR_PROTECT_0_ROM_SHIFT                 _MK_SHIFT_CONST(7)
#define AHB_ARBITRATION_USR_PROTECT_0_ROM_FIELD                 (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_USR_PROTECT_0_ROM_SHIFT)
#define AHB_ARBITRATION_USR_PROTECT_0_ROM_RANGE                 7:7
#define AHB_ARBITRATION_USR_PROTECT_0_ROM_WOFFSET                       0x0
#define AHB_ARBITRATION_USR_PROTECT_0_ROM_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_ROM_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_USR_PROTECT_0_ROM_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_ROM_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_ROM_ABT_DIS                       _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_USR_PROTECT_0_ROM_ABT_EN                        _MK_ENUM_CONST(1)

// Abort on USR mode access to APB memory space
#define AHB_ARBITRATION_USR_PROTECT_0_APB_SHIFT                 _MK_SHIFT_CONST(6)
#define AHB_ARBITRATION_USR_PROTECT_0_APB_FIELD                 (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_USR_PROTECT_0_APB_SHIFT)
#define AHB_ARBITRATION_USR_PROTECT_0_APB_RANGE                 6:6
#define AHB_ARBITRATION_USR_PROTECT_0_APB_WOFFSET                       0x0
#define AHB_ARBITRATION_USR_PROTECT_0_APB_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_APB_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_USR_PROTECT_0_APB_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_APB_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_APB_ABT_DIS                       _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_USR_PROTECT_0_APB_ABT_EN                        _MK_ENUM_CONST(1)

// Abort on USR mode access to AHB memory space
#define AHB_ARBITRATION_USR_PROTECT_0_AHB_SHIFT                 _MK_SHIFT_CONST(5)
#define AHB_ARBITRATION_USR_PROTECT_0_AHB_FIELD                 (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_USR_PROTECT_0_AHB_SHIFT)
#define AHB_ARBITRATION_USR_PROTECT_0_AHB_RANGE                 5:5
#define AHB_ARBITRATION_USR_PROTECT_0_AHB_WOFFSET                       0x0
#define AHB_ARBITRATION_USR_PROTECT_0_AHB_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_AHB_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_USR_PROTECT_0_AHB_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_AHB_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_AHB_ABT_DIS                       _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_USR_PROTECT_0_AHB_ABT_EN                        _MK_ENUM_CONST(1)

// Abort on USR mode access to PPSB memory space
#define AHB_ARBITRATION_USR_PROTECT_0_PPSB_SHIFT                        _MK_SHIFT_CONST(4)
#define AHB_ARBITRATION_USR_PROTECT_0_PPSB_FIELD                        (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_USR_PROTECT_0_PPSB_SHIFT)
#define AHB_ARBITRATION_USR_PROTECT_0_PPSB_RANGE                        4:4
#define AHB_ARBITRATION_USR_PROTECT_0_PPSB_WOFFSET                      0x0
#define AHB_ARBITRATION_USR_PROTECT_0_PPSB_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_PPSB_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_USR_PROTECT_0_PPSB_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_PPSB_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_PPSB_ABT_DIS                      _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_USR_PROTECT_0_PPSB_ABT_EN                       _MK_ENUM_CONST(1)

// Abort on USR mode access to iRAMd memory space
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMD_SHIFT                       _MK_SHIFT_CONST(3)
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMD_FIELD                       (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_USR_PROTECT_0_IRAMD_SHIFT)
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMD_RANGE                       3:3
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMD_WOFFSET                     0x0
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMD_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMD_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMD_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMD_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMD_ABT_DIS                     _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMD_ABT_EN                      _MK_ENUM_CONST(1)

// Abort on USR mode access to iRAMc memory space
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMC_SHIFT                       _MK_SHIFT_CONST(2)
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMC_FIELD                       (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_USR_PROTECT_0_IRAMC_SHIFT)
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMC_RANGE                       2:2
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMC_WOFFSET                     0x0
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMC_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMC_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMC_ABT_DIS                     _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMC_ABT_EN                      _MK_ENUM_CONST(1)

// Abort on USR mode access to iRAMb memory space
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMB_SHIFT                       _MK_SHIFT_CONST(1)
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMB_FIELD                       (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_USR_PROTECT_0_IRAMB_SHIFT)
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMB_RANGE                       1:1
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMB_WOFFSET                     0x0
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMB_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMB_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMB_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMB_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMB_ABT_DIS                     _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMB_ABT_EN                      _MK_ENUM_CONST(1)

// Abort on USR mode access to iRAMa memory space
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMA_SHIFT                       _MK_SHIFT_CONST(0)
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMA_FIELD                       (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_USR_PROTECT_0_IRAMA_SHIFT)
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMA_RANGE                       0:0
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMA_WOFFSET                     0x0
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMA_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMA_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMA_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMA_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMA_ABT_DIS                     _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_USR_PROTECT_0_IRAMA_ABT_EN                      _MK_ENUM_CONST(1)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// AHB master/slave gizmo register:
// --------------------------------
// AHB master/slave gizmo are essentially hardware layer that used by many of the master/slave logic which need to
// connect to the AHB bus.  This hardware layer handle all the AHB bus protocol and convert this more complex AHB
// protocol into a much simplier IP interface/handshake.  Because this AHB master/slave gizmo have to interface with
// many IP logic with different characteristics (i.e speed, latency, etc.), these gizmos accept a number of static 
// configuration bits.  Depends on a certain application/usage (i.e.  system speed, latency requirement, transfer 
// direction, burst characteristic, etc.), these static configuration bits can be pre-configure to give extra 
// performance/bus efficiency.  Below is the description of each configuration field, what they're use for, the pros and
// cons of using them.
//
// Notes:  These configuration bits are meant to be change only while that particular gizmo you want to change is idle
//         (not being use).  Changing these configuration bits on-the-fly while that gizmo is active can hang the system.
// 
//
// AHB gizmo configuration bit definition:
// ---------------------------------------
// (1)  AHB master gizmo.
//      -----------------
//      (A)  MAX_AHB_BURSTSIZE:         Controls the maximum burst size that this gizmo can generate on the AHB bus.  For
//                                      our current system, this field should be set to burst-of-8.
//      (B)  IMMEDIATE:                 Controls how fast to start an AHB write request on the bus.  
//                                      (a)  If 1, gizmo will start an AHB write request once the IP side put in one 
//                                           data of a burst.  For IP that can provide quick continuous burst data,
//                                           this setting provide parallelism between AHB request and IP data transfer.
//                                           However, for IP that cannot provide quick burst data, this setting will
//                                           force this gizmo to hold the AHB bus longer, reducing bus efficiency. 
//                                      (b)  If 0, gizmo will wait until all datas of a burst are put into it's FIFO 
//                                           before starting an AHB write request.  With this setting, AHB bus
//                                           efficiency is realize but IP latency/efficiency may reduce.
//      (C)  RD_DATA:                   Controls how read data will be returned from the gizmo to the IP side.
//                                      (a)  If 1, all data of a burst has to be in the gizmo before it will indicate to
//                                           the IP logic that read data is ready.  This setting will ensure there's
//                                           no wait-state/bubble in between read data busrt but it will increase latency.
//                                      (b)  If 0, each data of a burst will be send from gizmo to the IP logic 
//                                           immediately.  This setting will reduce latency but can create non-consecutive
//                                           data burst or bubble between data.
//      (D)  REQ_NEG_CNT:               Provides a way to limit (in terms of number of AHB bus clock) on how fast/often
//                                      this master can request the AHB bus.  The bigger the number, the slower the rate
//                                      of AHB request.
//
// (2)  AHB slave gizmo.
//      ----------------
//      (A)  ENABLE_SPLIT:              Controls whether to enable the split feature of the AHB bus.
//                                      (a)  If 1, gizmo will always generate split response for a read.  If
//                                           'DONT_SPLIT_AHB_WR' is set to 0, gizmo will also generate split response if
//                                           it cannot accept anymore write request from the AHB master.  This setting
//                                           can increase AHB bus utilization since it allow other AHB masters to talk to
//                                           other AHB slaves while this orignal AHB slave is fetching for read data.
//                                           However, the flip side of the coin is that it will take longer time for the
//                                           original AHB master to get the read data because the original AHB master
//                                           has to re-arbitrate for the AHB bus again in order to get to the data it
//                                           asked for.
//                                      (b)  If 0, gizmo will not generate split response.  Instead, it will hold on to
//                                           the AHB bus until all the requested read data is return back to the AHB
//                                           master.  This setting will reduce read latency to the master but decrease
//                                           AHB bus utilization.
//      (B)  FORCE_TO_AHB_SINGLE:       Controls how the gizmo treats the AHB master's burst request.
//                                      (a)  If 1, gizmo will break up the burst request internally into individual
//                                           single word request.
//                                      (b)  If 0, gizmo will burst request internally as burst request.
//      (C)  ENB_FAST_REARBITRATE:      Controls when the gizmo can allow the original read requested AHB master to
//                                      re-arbitrate for the AHB bus again so the AHB master can retreive the originally
//                                      requested read data.
//                                      (a)  If 1, once first read data of a burst is in the slave gizmo's FIFO, it will 
//                                           allow the original AHB master to re-arbitrate, thus, will allow arbitration
//                                           to happen in parallel with subsequent read data of a burst.  However, if
//                                           the data burst has wait-states or bubbles, then this setting will decrease
//                                           AHB bus utilization because the slave gizmo will hold on to the AHB bus
//                                           longer.
//                                      (b)  If 0, all read data of a burst must be in the slave gizmo's FIFO before it
//                                           will allow the original AHB master to re-arbitrate to retrieve the read
//                                           data.  This setting increase read data latency but increase AHB bus
//                                           utilization.
//      (D)  IP_WR_REQ_IMMEDIATE:       Controls when gizmo will start write data request to the IP logic.
//                                      (a)  If 1, gizmo will start write request to the IP logic once it gets one
//                                           write data of a burst from the AHB side.  This setting will create
//                                           non-consecutive/bubbles in a write data burst.
//                                      (b)  If 0, gizmo will start write request to the IP logic only when it gets all
//                                           write data of a burst from the AHB side.  This setting will create
//                                           consecutive data burst (no bubbles or wait-states).
//      (E)  MAX_IP_BURSTSIZE:          Controls the maximum burst size that this gizmo can generate to the IP logic.
//      (F)  ACCEPT_AHB_WR_ALWAYS:      Controls how the slave gizmo will treat AHB write request.
//                                      (a)  If 1, gizmo will always accept a write request without checking whether
//                                           it's FIFOs can accept the write or not.  This setting can reduce bus
//                                           utilization but can reduce the rate of AHB retry.
//                                      (b)  If 0, gizmo will check it's FIFOs to make sure they've room before
//                                           accepting the AHB write request.  This setting increase bus utilization
//                                           bus can create a lot of AHB retry.
//      (G)  DONT_SPLIT_AHB_WR:         Controls whether to split AHB write request when the slave gizmo determines it
//                                      cannot accept the write request.
//                                      (a)  If 1 and when ENABLE_SPLIT=1, gizmo will generate split for write if its
//                                           FIFOs are not ready to accept the AHB write request or data.  This setting 
//                                           can improve AHB bus utilization as there will not be continous AHB master
//                                           retries on the bus.
//                                      (b)  If 0, gizmo will generate retry response for write if its FIFOs are not
//                                           ready to accept the AHB write request.  Software should leave this bit
//                                           at 0 since this feature has not been proven.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AHB Gizmo AHB-DMA/Memory Control Register

// Register AHB_GIZMO_AHB_MEM_0  
#define AHB_GIZMO_AHB_MEM_0                     _MK_ADDR_CONST(0xc)
#define AHB_GIZMO_AHB_MEM_0_SECURE                      0x0
#define AHB_GIZMO_AHB_MEM_0_WORD_COUNT                  0x1
#define AHB_GIZMO_AHB_MEM_0_RESET_VAL                   _MK_MASK_CONST(0x200c1)
#define AHB_GIZMO_AHB_MEM_0_RESET_MASK                  _MK_MASK_CONST(0xff0700c7)
#define AHB_GIZMO_AHB_MEM_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_MEM_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_MEM_0_READ_MASK                   _MK_MASK_CONST(0xff0700c7)
#define AHB_GIZMO_AHB_MEM_0_WRITE_MASK                  _MK_MASK_CONST(0xff0700c7)
// AHB master request negate count. This is an 8-bit counter use to indicate 
// the minimum number of clk count between requests from  this AHB master.
#define AHB_GIZMO_AHB_MEM_0_REQ_NEG_CNT_SHIFT                   _MK_SHIFT_CONST(24)
#define AHB_GIZMO_AHB_MEM_0_REQ_NEG_CNT_FIELD                   (_MK_MASK_CONST(0xff) << AHB_GIZMO_AHB_MEM_0_REQ_NEG_CNT_SHIFT)
#define AHB_GIZMO_AHB_MEM_0_REQ_NEG_CNT_RANGE                   31:24
#define AHB_GIZMO_AHB_MEM_0_REQ_NEG_CNT_WOFFSET                 0x0
#define AHB_GIZMO_AHB_MEM_0_REQ_NEG_CNT_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_MEM_0_REQ_NEG_CNT_DEFAULT_MASK                    _MK_MASK_CONST(0xff)
#define AHB_GIZMO_AHB_MEM_0_REQ_NEG_CNT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_MEM_0_REQ_NEG_CNT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// AHB master gizmo (AHB-DMA) - Start AHB write request immediately 
// 1 = start the AHB write request immediately as soon as the device 
// has put one write data in hte AHB gizmos queue. 0 = start the AHB 
// write request only when all the  write data has transferred from 
// the device to the AHB gizmos queue.
#define AHB_GIZMO_AHB_MEM_0_IMMEDIATE_SHIFT                     _MK_SHIFT_CONST(18)
#define AHB_GIZMO_AHB_MEM_0_IMMEDIATE_FIELD                     (_MK_MASK_CONST(0x1) << AHB_GIZMO_AHB_MEM_0_IMMEDIATE_SHIFT)
#define AHB_GIZMO_AHB_MEM_0_IMMEDIATE_RANGE                     18:18
#define AHB_GIZMO_AHB_MEM_0_IMMEDIATE_WOFFSET                   0x0
#define AHB_GIZMO_AHB_MEM_0_IMMEDIATE_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_MEM_0_IMMEDIATE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define AHB_GIZMO_AHB_MEM_0_IMMEDIATE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_MEM_0_IMMEDIATE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_MEM_0_IMMEDIATE_DISABLE                   _MK_ENUM_CONST(0)
#define AHB_GIZMO_AHB_MEM_0_IMMEDIATE_ENABLE                    _MK_ENUM_CONST(1)

// AHB master gizmo (AHB-DMA) - Maximum 
// allowed AHB burst size. 
// 00 = single transfer. 
// 01 = burst-of-4. 
// 10 = burst-of-8 
// 11 = burst-of-16.
#define AHB_GIZMO_AHB_MEM_0_MAX_AHB_BURSTSIZE_SHIFT                     _MK_SHIFT_CONST(16)
#define AHB_GIZMO_AHB_MEM_0_MAX_AHB_BURSTSIZE_FIELD                     (_MK_MASK_CONST(0x3) << AHB_GIZMO_AHB_MEM_0_MAX_AHB_BURSTSIZE_SHIFT)
#define AHB_GIZMO_AHB_MEM_0_MAX_AHB_BURSTSIZE_RANGE                     17:16
#define AHB_GIZMO_AHB_MEM_0_MAX_AHB_BURSTSIZE_WOFFSET                   0x0
#define AHB_GIZMO_AHB_MEM_0_MAX_AHB_BURSTSIZE_DEFAULT                   _MK_MASK_CONST(0x2)
#define AHB_GIZMO_AHB_MEM_0_MAX_AHB_BURSTSIZE_DEFAULT_MASK                      _MK_MASK_CONST(0x3)
#define AHB_GIZMO_AHB_MEM_0_MAX_AHB_BURSTSIZE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_MEM_0_MAX_AHB_BURSTSIZE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_MEM_0_MAX_AHB_BURSTSIZE_DMA_BURST_1WORDS                  _MK_ENUM_CONST(0)
#define AHB_GIZMO_AHB_MEM_0_MAX_AHB_BURSTSIZE_DMA_BURST_4WORDS                  _MK_ENUM_CONST(1)
#define AHB_GIZMO_AHB_MEM_0_MAX_AHB_BURSTSIZE_DMA_BURST_8WORDS                  _MK_ENUM_CONST(2)
#define AHB_GIZMO_AHB_MEM_0_MAX_AHB_BURSTSIZE_DMA_BURST_16WORDS                 _MK_ENUM_CONST(3)

// AHB slave gizmo (memory controller)-Dont split AHB write transaction 1 = dont 
// split AHB write transaction  ever. 0 (and enable_split=1) = allow AHB write 
// transaction to be split.
#define AHB_GIZMO_AHB_MEM_0_DONT_SPLIT_AHB_WR_SHIFT                     _MK_SHIFT_CONST(7)
#define AHB_GIZMO_AHB_MEM_0_DONT_SPLIT_AHB_WR_FIELD                     (_MK_MASK_CONST(0x1) << AHB_GIZMO_AHB_MEM_0_DONT_SPLIT_AHB_WR_SHIFT)
#define AHB_GIZMO_AHB_MEM_0_DONT_SPLIT_AHB_WR_RANGE                     7:7
#define AHB_GIZMO_AHB_MEM_0_DONT_SPLIT_AHB_WR_WOFFSET                   0x0
#define AHB_GIZMO_AHB_MEM_0_DONT_SPLIT_AHB_WR_DEFAULT                   _MK_MASK_CONST(0x1)
#define AHB_GIZMO_AHB_MEM_0_DONT_SPLIT_AHB_WR_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define AHB_GIZMO_AHB_MEM_0_DONT_SPLIT_AHB_WR_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_MEM_0_DONT_SPLIT_AHB_WR_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_MEM_0_DONT_SPLIT_AHB_WR_ENABLE                    _MK_ENUM_CONST(0)
#define AHB_GIZMO_AHB_MEM_0_DONT_SPLIT_AHB_WR_DISABLE                   _MK_ENUM_CONST(1)

// AHB slave gizmo (memory controller ) - Accept AHB write request 
// always. 1= always accept AHB write request without checking 
// whether there is room in the queue to store the write data.Bypass 
// Memory Controller AHB slave gizmo write queue. 0 = accept AHB 
// write request only when theres  enough room in the queue to store 
// all the write data. Memory controller AHB  slave gizmos write queue 
// is used in this case.
#define AHB_GIZMO_AHB_MEM_0_ACCEPT_AHB_WR_ALWAYS_SHIFT                  _MK_SHIFT_CONST(6)
#define AHB_GIZMO_AHB_MEM_0_ACCEPT_AHB_WR_ALWAYS_FIELD                  (_MK_MASK_CONST(0x1) << AHB_GIZMO_AHB_MEM_0_ACCEPT_AHB_WR_ALWAYS_SHIFT)
#define AHB_GIZMO_AHB_MEM_0_ACCEPT_AHB_WR_ALWAYS_RANGE                  6:6
#define AHB_GIZMO_AHB_MEM_0_ACCEPT_AHB_WR_ALWAYS_WOFFSET                        0x0
#define AHB_GIZMO_AHB_MEM_0_ACCEPT_AHB_WR_ALWAYS_DEFAULT                        _MK_MASK_CONST(0x1)
#define AHB_GIZMO_AHB_MEM_0_ACCEPT_AHB_WR_ALWAYS_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define AHB_GIZMO_AHB_MEM_0_ACCEPT_AHB_WR_ALWAYS_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_MEM_0_ACCEPT_AHB_WR_ALWAYS_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_MEM_0_ACCEPT_AHB_WR_ALWAYS_ACCEPT_ON_CHECK                        _MK_ENUM_CONST(0)
#define AHB_GIZMO_AHB_MEM_0_ACCEPT_AHB_WR_ALWAYS_ACCEPT_ON_NOCHECK                      _MK_ENUM_CONST(1)

// AHB slave gizmo - Enable fast re-arbitration. 1 = allow AHB master re-arbitration as 
// soon as the device returns one read data into the gizmos queue. 0 = allow AHB master 
// re-arbitration only when the  device returns all read data into the gizmos queue.
#define AHB_GIZMO_AHB_MEM_0_ENB_FAST_REARBITRATE_SHIFT                  _MK_SHIFT_CONST(2)
#define AHB_GIZMO_AHB_MEM_0_ENB_FAST_REARBITRATE_FIELD                  (_MK_MASK_CONST(0x1) << AHB_GIZMO_AHB_MEM_0_ENB_FAST_REARBITRATE_SHIFT)
#define AHB_GIZMO_AHB_MEM_0_ENB_FAST_REARBITRATE_RANGE                  2:2
#define AHB_GIZMO_AHB_MEM_0_ENB_FAST_REARBITRATE_WOFFSET                        0x0
#define AHB_GIZMO_AHB_MEM_0_ENB_FAST_REARBITRATE_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_MEM_0_ENB_FAST_REARBITRATE_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define AHB_GIZMO_AHB_MEM_0_ENB_FAST_REARBITRATE_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_MEM_0_ENB_FAST_REARBITRATE_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_MEM_0_ENB_FAST_REARBITRATE_DISABLE                        _MK_ENUM_CONST(0)
#define AHB_GIZMO_AHB_MEM_0_ENB_FAST_REARBITRATE_ENABLE                 _MK_ENUM_CONST(1)

// AHB slave gizmo (memory controller ) - Foce all AHB transaction to single 
// data request transaction 1 = force to single data transaction always.  
// 0 = dont force to single data transaction.
#define AHB_GIZMO_AHB_MEM_0_FORCE_TO_AHB_SINGLE_SHIFT                   _MK_SHIFT_CONST(1)
#define AHB_GIZMO_AHB_MEM_0_FORCE_TO_AHB_SINGLE_FIELD                   (_MK_MASK_CONST(0x1) << AHB_GIZMO_AHB_MEM_0_FORCE_TO_AHB_SINGLE_SHIFT)
#define AHB_GIZMO_AHB_MEM_0_FORCE_TO_AHB_SINGLE_RANGE                   1:1
#define AHB_GIZMO_AHB_MEM_0_FORCE_TO_AHB_SINGLE_WOFFSET                 0x0
#define AHB_GIZMO_AHB_MEM_0_FORCE_TO_AHB_SINGLE_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_MEM_0_FORCE_TO_AHB_SINGLE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_AHB_MEM_0_FORCE_TO_AHB_SINGLE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_MEM_0_FORCE_TO_AHB_SINGLE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_MEM_0_FORCE_TO_AHB_SINGLE_NOT_SINGLE_DATA                 _MK_ENUM_CONST(0)
#define AHB_GIZMO_AHB_MEM_0_FORCE_TO_AHB_SINGLE_SINGLE_DATA                     _MK_ENUM_CONST(1)

// AHB slave gizmo (memory controller ) - Enable splitting AHB transaction. 
// 1 = enable 0 = disable.
#define AHB_GIZMO_AHB_MEM_0_ENABLE_SPLIT_SHIFT                  _MK_SHIFT_CONST(0)
#define AHB_GIZMO_AHB_MEM_0_ENABLE_SPLIT_FIELD                  (_MK_MASK_CONST(0x1) << AHB_GIZMO_AHB_MEM_0_ENABLE_SPLIT_SHIFT)
#define AHB_GIZMO_AHB_MEM_0_ENABLE_SPLIT_RANGE                  0:0
#define AHB_GIZMO_AHB_MEM_0_ENABLE_SPLIT_WOFFSET                        0x0
#define AHB_GIZMO_AHB_MEM_0_ENABLE_SPLIT_DEFAULT                        _MK_MASK_CONST(0x1)
#define AHB_GIZMO_AHB_MEM_0_ENABLE_SPLIT_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define AHB_GIZMO_AHB_MEM_0_ENABLE_SPLIT_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_MEM_0_ENABLE_SPLIT_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_MEM_0_ENABLE_SPLIT_DISABLE                        _MK_ENUM_CONST(0)
#define AHB_GIZMO_AHB_MEM_0_ENABLE_SPLIT_ENABLE                 _MK_ENUM_CONST(1)

// AHB Gizmo APB-DMA Control Register

// Register AHB_GIZMO_APB_DMA_0  
#define AHB_GIZMO_APB_DMA_0                     _MK_ADDR_CONST(0x10)
#define AHB_GIZMO_APB_DMA_0_SECURE                      0x0
#define AHB_GIZMO_APB_DMA_0_WORD_COUNT                  0x1
#define AHB_GIZMO_APB_DMA_0_RESET_VAL                   _MK_MASK_CONST(0xa0000)
#define AHB_GIZMO_APB_DMA_0_RESET_MASK                  _MK_MASK_CONST(0xff0f0000)
#define AHB_GIZMO_APB_DMA_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_APB_DMA_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define AHB_GIZMO_APB_DMA_0_READ_MASK                   _MK_MASK_CONST(0xff0f0000)
#define AHB_GIZMO_APB_DMA_0_WRITE_MASK                  _MK_MASK_CONST(0xff0f0000)
// AHB master request negate count. This is an 8-bit  counter use to indicate 
// the minimum number of clk count between requests from  this AHB master.
#define AHB_GIZMO_APB_DMA_0_REQ_NEG_CNT_SHIFT                   _MK_SHIFT_CONST(24)
#define AHB_GIZMO_APB_DMA_0_REQ_NEG_CNT_FIELD                   (_MK_MASK_CONST(0xff) << AHB_GIZMO_APB_DMA_0_REQ_NEG_CNT_SHIFT)
#define AHB_GIZMO_APB_DMA_0_REQ_NEG_CNT_RANGE                   31:24
#define AHB_GIZMO_APB_DMA_0_REQ_NEG_CNT_WOFFSET                 0x0
#define AHB_GIZMO_APB_DMA_0_REQ_NEG_CNT_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_APB_DMA_0_REQ_NEG_CNT_DEFAULT_MASK                    _MK_MASK_CONST(0xff)
#define AHB_GIZMO_APB_DMA_0_REQ_NEG_CNT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_APB_DMA_0_REQ_NEG_CNT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// AHB master gizmo - Pack all AHB read data.  1 = wait for all 
// requested read data to be in the AHB gizmos queue before returning 
// the data back to the IP. 0 = transfer each read data from the AHB 
// to the IP  immediately.
#define AHB_GIZMO_APB_DMA_0_RD_DATA_SHIFT                       _MK_SHIFT_CONST(19)
#define AHB_GIZMO_APB_DMA_0_RD_DATA_FIELD                       (_MK_MASK_CONST(0x1) << AHB_GIZMO_APB_DMA_0_RD_DATA_SHIFT)
#define AHB_GIZMO_APB_DMA_0_RD_DATA_RANGE                       19:19
#define AHB_GIZMO_APB_DMA_0_RD_DATA_WOFFSET                     0x0
#define AHB_GIZMO_APB_DMA_0_RD_DATA_DEFAULT                     _MK_MASK_CONST(0x1)
#define AHB_GIZMO_APB_DMA_0_RD_DATA_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define AHB_GIZMO_APB_DMA_0_RD_DATA_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_GIZMO_APB_DMA_0_RD_DATA_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define AHB_GIZMO_APB_DMA_0_RD_DATA_NO_WAIT                     _MK_ENUM_CONST(0)
#define AHB_GIZMO_APB_DMA_0_RD_DATA_WAIT                        _MK_ENUM_CONST(1)

// AHB master gizmo (AHB-DMA) - Start AHB write request immediately.  
// 1 = start the AHB write request immediately as soon as the device has 
// put one write data in the AHB gizmos queue. 0 = start the AHB write 
// request only when all the  write data has transferred from the device 
// to the AHB gizmos queue.
#define AHB_GIZMO_APB_DMA_0_IMMEDIATE_SHIFT                     _MK_SHIFT_CONST(18)
#define AHB_GIZMO_APB_DMA_0_IMMEDIATE_FIELD                     (_MK_MASK_CONST(0x1) << AHB_GIZMO_APB_DMA_0_IMMEDIATE_SHIFT)
#define AHB_GIZMO_APB_DMA_0_IMMEDIATE_RANGE                     18:18
#define AHB_GIZMO_APB_DMA_0_IMMEDIATE_WOFFSET                   0x0
#define AHB_GIZMO_APB_DMA_0_IMMEDIATE_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_APB_DMA_0_IMMEDIATE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define AHB_GIZMO_APB_DMA_0_IMMEDIATE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_APB_DMA_0_IMMEDIATE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_APB_DMA_0_IMMEDIATE_DISABLE                   _MK_ENUM_CONST(0)
#define AHB_GIZMO_APB_DMA_0_IMMEDIATE_ENABLE                    _MK_ENUM_CONST(1)

// AHB master gizmo - Maximum allowed 
// AHB burst size.  
// 00 = single transfer.  
// 01 = burst-of-4.  
// 10 = burst-of-8. 
// 11 = burst-of-16.
#define AHB_GIZMO_APB_DMA_0_MAX_AHB_BURSTSIZE_SHIFT                     _MK_SHIFT_CONST(16)
#define AHB_GIZMO_APB_DMA_0_MAX_AHB_BURSTSIZE_FIELD                     (_MK_MASK_CONST(0x3) << AHB_GIZMO_APB_DMA_0_MAX_AHB_BURSTSIZE_SHIFT)
#define AHB_GIZMO_APB_DMA_0_MAX_AHB_BURSTSIZE_RANGE                     17:16
#define AHB_GIZMO_APB_DMA_0_MAX_AHB_BURSTSIZE_WOFFSET                   0x0
#define AHB_GIZMO_APB_DMA_0_MAX_AHB_BURSTSIZE_DEFAULT                   _MK_MASK_CONST(0x2)
#define AHB_GIZMO_APB_DMA_0_MAX_AHB_BURSTSIZE_DEFAULT_MASK                      _MK_MASK_CONST(0x3)
#define AHB_GIZMO_APB_DMA_0_MAX_AHB_BURSTSIZE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_APB_DMA_0_MAX_AHB_BURSTSIZE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_APB_DMA_0_MAX_AHB_BURSTSIZE_DMA_BURST_1WORDS                  _MK_ENUM_CONST(0)
#define AHB_GIZMO_APB_DMA_0_MAX_AHB_BURSTSIZE_DMA_BURST_4WORDS                  _MK_ENUM_CONST(1)
#define AHB_GIZMO_APB_DMA_0_MAX_AHB_BURSTSIZE_DMA_BURST_8WORDS                  _MK_ENUM_CONST(2)
#define AHB_GIZMO_APB_DMA_0_MAX_AHB_BURSTSIZE_DMA_BURST_16WORDS                 _MK_ENUM_CONST(3)


// Reserved address 20 [0x14] 
// AHB Gizmo IDE Control Register

// Register AHB_GIZMO_IDE_0  
#define AHB_GIZMO_IDE_0                 _MK_ADDR_CONST(0x18)
#define AHB_GIZMO_IDE_0_SECURE                  0x0
#define AHB_GIZMO_IDE_0_WORD_COUNT                      0x1
#define AHB_GIZMO_IDE_0_RESET_VAL                       _MK_MASK_CONST(0x200bf)
#define AHB_GIZMO_IDE_0_RESET_MASK                      _MK_MASK_CONST(0xff0f00ff)
#define AHB_GIZMO_IDE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define AHB_GIZMO_IDE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define AHB_GIZMO_IDE_0_READ_MASK                       _MK_MASK_CONST(0xff0f00ff)
#define AHB_GIZMO_IDE_0_WRITE_MASK                      _MK_MASK_CONST(0xff0f00ff)
// AHB master request negate count. This is an 8-bit  counter use to indicate the minimum number of clk 
// count between requests from  this AHB master.
#define AHB_GIZMO_IDE_0_REQ_NEG_CNT_SHIFT                       _MK_SHIFT_CONST(24)
#define AHB_GIZMO_IDE_0_REQ_NEG_CNT_FIELD                       (_MK_MASK_CONST(0xff) << AHB_GIZMO_IDE_0_REQ_NEG_CNT_SHIFT)
#define AHB_GIZMO_IDE_0_REQ_NEG_CNT_RANGE                       31:24
#define AHB_GIZMO_IDE_0_REQ_NEG_CNT_WOFFSET                     0x0
#define AHB_GIZMO_IDE_0_REQ_NEG_CNT_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_GIZMO_IDE_0_REQ_NEG_CNT_DEFAULT_MASK                        _MK_MASK_CONST(0xff)
#define AHB_GIZMO_IDE_0_REQ_NEG_CNT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_GIZMO_IDE_0_REQ_NEG_CNT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// AHB master gizmo - Pack all AHB read data.  1 = wait for all requested read data 
// to be in the AHB gizmos queue before returning the data back to the IP. 0 = transfer 
// each read data from the AHB to the IP  immediately.
#define AHB_GIZMO_IDE_0_RD_DATA_SHIFT                   _MK_SHIFT_CONST(19)
#define AHB_GIZMO_IDE_0_RD_DATA_FIELD                   (_MK_MASK_CONST(0x1) << AHB_GIZMO_IDE_0_RD_DATA_SHIFT)
#define AHB_GIZMO_IDE_0_RD_DATA_RANGE                   19:19
#define AHB_GIZMO_IDE_0_RD_DATA_WOFFSET                 0x0
#define AHB_GIZMO_IDE_0_RD_DATA_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_IDE_0_RD_DATA_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_IDE_0_RD_DATA_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_IDE_0_RD_DATA_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_IDE_0_RD_DATA_NO_WAIT                 _MK_ENUM_CONST(0)
#define AHB_GIZMO_IDE_0_RD_DATA_WAIT                    _MK_ENUM_CONST(1)

// AHB master gizmo (AHB-DMA) - Start AHB write request immediately.  1 = start the 
// AHB write request immediately as soon as the device has put one write data in the 
// AHB gizmos queue. 0 = start the AHB write request only when all the  write data 
// has transferred from the device to the AHB gizmos queue.
#define AHB_GIZMO_IDE_0_IMMEDIATE_SHIFT                 _MK_SHIFT_CONST(18)
#define AHB_GIZMO_IDE_0_IMMEDIATE_FIELD                 (_MK_MASK_CONST(0x1) << AHB_GIZMO_IDE_0_IMMEDIATE_SHIFT)
#define AHB_GIZMO_IDE_0_IMMEDIATE_RANGE                 18:18
#define AHB_GIZMO_IDE_0_IMMEDIATE_WOFFSET                       0x0
#define AHB_GIZMO_IDE_0_IMMEDIATE_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_IDE_0_IMMEDIATE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define AHB_GIZMO_IDE_0_IMMEDIATE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_IDE_0_IMMEDIATE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_IDE_0_IMMEDIATE_DISABLE                       _MK_ENUM_CONST(0)
#define AHB_GIZMO_IDE_0_IMMEDIATE_ENABLE                        _MK_ENUM_CONST(1)

// AHB master gizmo - Maximum 
// allowed AHB burst size.  
// 00 = single transfer.  
// 01 = burst-of-4.  
// 10 = burst-of-8. 
// 11 = burst-of-16.
#define AHB_GIZMO_IDE_0_MAX_AHB_BURSTSIZE_SHIFT                 _MK_SHIFT_CONST(16)
#define AHB_GIZMO_IDE_0_MAX_AHB_BURSTSIZE_FIELD                 (_MK_MASK_CONST(0x3) << AHB_GIZMO_IDE_0_MAX_AHB_BURSTSIZE_SHIFT)
#define AHB_GIZMO_IDE_0_MAX_AHB_BURSTSIZE_RANGE                 17:16
#define AHB_GIZMO_IDE_0_MAX_AHB_BURSTSIZE_WOFFSET                       0x0
#define AHB_GIZMO_IDE_0_MAX_AHB_BURSTSIZE_DEFAULT                       _MK_MASK_CONST(0x2)
#define AHB_GIZMO_IDE_0_MAX_AHB_BURSTSIZE_DEFAULT_MASK                  _MK_MASK_CONST(0x3)
#define AHB_GIZMO_IDE_0_MAX_AHB_BURSTSIZE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_IDE_0_MAX_AHB_BURSTSIZE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_IDE_0_MAX_AHB_BURSTSIZE_DMA_BURST_1WORDS                      _MK_ENUM_CONST(0)
#define AHB_GIZMO_IDE_0_MAX_AHB_BURSTSIZE_DMA_BURST_4WORDS                      _MK_ENUM_CONST(1)
#define AHB_GIZMO_IDE_0_MAX_AHB_BURSTSIZE_DMA_BURST_8WORDS                      _MK_ENUM_CONST(2)
#define AHB_GIZMO_IDE_0_MAX_AHB_BURSTSIZE_DMA_BURST_16WORDS                     _MK_ENUM_CONST(3)

// AHB slave gizmo - Dont split AHB write transaction.  1 = dont split AHB write transaction 
// ever. 0 (and enable_split=1) = allow AHB write  transaction to be split.
#define AHB_GIZMO_IDE_0_DONT_SPLIT_AHB_WR_SHIFT                 _MK_SHIFT_CONST(7)
#define AHB_GIZMO_IDE_0_DONT_SPLIT_AHB_WR_FIELD                 (_MK_MASK_CONST(0x1) << AHB_GIZMO_IDE_0_DONT_SPLIT_AHB_WR_SHIFT)
#define AHB_GIZMO_IDE_0_DONT_SPLIT_AHB_WR_RANGE                 7:7
#define AHB_GIZMO_IDE_0_DONT_SPLIT_AHB_WR_WOFFSET                       0x0
#define AHB_GIZMO_IDE_0_DONT_SPLIT_AHB_WR_DEFAULT                       _MK_MASK_CONST(0x1)
#define AHB_GIZMO_IDE_0_DONT_SPLIT_AHB_WR_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define AHB_GIZMO_IDE_0_DONT_SPLIT_AHB_WR_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_IDE_0_DONT_SPLIT_AHB_WR_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_IDE_0_DONT_SPLIT_AHB_WR_ENABLE                        _MK_ENUM_CONST(0)
#define AHB_GIZMO_IDE_0_DONT_SPLIT_AHB_WR_DISABLE                       _MK_ENUM_CONST(1)

// AHB slave gizmo - Accept AHB write request always.  1 = always accept 
// AHB write request without checking whether there is room in the queue 
// to store the write data. 0 = accept AHB write request only when theres  
// enough room in the queue to store all the write data.
#define AHB_GIZMO_IDE_0_ACCEPT_AHB_WR_ALWAYS_SHIFT                      _MK_SHIFT_CONST(6)
#define AHB_GIZMO_IDE_0_ACCEPT_AHB_WR_ALWAYS_FIELD                      (_MK_MASK_CONST(0x1) << AHB_GIZMO_IDE_0_ACCEPT_AHB_WR_ALWAYS_SHIFT)
#define AHB_GIZMO_IDE_0_ACCEPT_AHB_WR_ALWAYS_RANGE                      6:6
#define AHB_GIZMO_IDE_0_ACCEPT_AHB_WR_ALWAYS_WOFFSET                    0x0
#define AHB_GIZMO_IDE_0_ACCEPT_AHB_WR_ALWAYS_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_IDE_0_ACCEPT_AHB_WR_ALWAYS_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define AHB_GIZMO_IDE_0_ACCEPT_AHB_WR_ALWAYS_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_IDE_0_ACCEPT_AHB_WR_ALWAYS_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_IDE_0_ACCEPT_AHB_WR_ALWAYS_ACCEPT_ON_CHECK                    _MK_ENUM_CONST(0)
#define AHB_GIZMO_IDE_0_ACCEPT_AHB_WR_ALWAYS_ACCEPT_ON_NOCHECK                  _MK_ENUM_CONST(1)

// AHB slave gizmo  Maximum allowed IP 
// burst size.  
// 00 = single transfer.  
// 01 = burst-of-4.  
// 10 = burst-of-8.
// 11 = burst-of-16.
#define AHB_GIZMO_IDE_0_MAX_IP_BURSTSIZE_SHIFT                  _MK_SHIFT_CONST(4)
#define AHB_GIZMO_IDE_0_MAX_IP_BURSTSIZE_FIELD                  (_MK_MASK_CONST(0x3) << AHB_GIZMO_IDE_0_MAX_IP_BURSTSIZE_SHIFT)
#define AHB_GIZMO_IDE_0_MAX_IP_BURSTSIZE_RANGE                  5:4
#define AHB_GIZMO_IDE_0_MAX_IP_BURSTSIZE_WOFFSET                        0x0
#define AHB_GIZMO_IDE_0_MAX_IP_BURSTSIZE_DEFAULT                        _MK_MASK_CONST(0x3)
#define AHB_GIZMO_IDE_0_MAX_IP_BURSTSIZE_DEFAULT_MASK                   _MK_MASK_CONST(0x3)
#define AHB_GIZMO_IDE_0_MAX_IP_BURSTSIZE_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_GIZMO_IDE_0_MAX_IP_BURSTSIZE_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_IDE_0_MAX_IP_BURSTSIZE_DMA_BURST_1WORDS                       _MK_ENUM_CONST(0)
#define AHB_GIZMO_IDE_0_MAX_IP_BURSTSIZE_DMA_BURST_4WORDS                       _MK_ENUM_CONST(1)
#define AHB_GIZMO_IDE_0_MAX_IP_BURSTSIZE_DMA_BURST_8WORDS                       _MK_ENUM_CONST(2)
#define AHB_GIZMO_IDE_0_MAX_IP_BURSTSIZE_DMA_BURST_16WORDS                      _MK_ENUM_CONST(3)

// AHB slave gizmo  Start write request to device immediately.  1 = start write request on the device side as soon 
// as the AHB master puts data into the gizmos queue. 0 = start the device write request only when the  AHB master 
// has placed all write data into the gizmos queue.
#define AHB_GIZMO_IDE_0_IP_WR_REQ_IMMEDIATE_SHIFT                       _MK_SHIFT_CONST(3)
#define AHB_GIZMO_IDE_0_IP_WR_REQ_IMMEDIATE_FIELD                       (_MK_MASK_CONST(0x1) << AHB_GIZMO_IDE_0_IP_WR_REQ_IMMEDIATE_SHIFT)
#define AHB_GIZMO_IDE_0_IP_WR_REQ_IMMEDIATE_RANGE                       3:3
#define AHB_GIZMO_IDE_0_IP_WR_REQ_IMMEDIATE_WOFFSET                     0x0
#define AHB_GIZMO_IDE_0_IP_WR_REQ_IMMEDIATE_DEFAULT                     _MK_MASK_CONST(0x1)
#define AHB_GIZMO_IDE_0_IP_WR_REQ_IMMEDIATE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define AHB_GIZMO_IDE_0_IP_WR_REQ_IMMEDIATE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_GIZMO_IDE_0_IP_WR_REQ_IMMEDIATE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// AHB slave gizmo - Enable fast re-arbitration.  1 = allow AHB master re-arbitration as soon 
// as the device returns one read data into the gizmos queue.0 = allow AHB master re-arbitration 
// only when the  device returns all read data into the gizmos queue.
#define AHB_GIZMO_IDE_0_ENB_FAST_REARBITRATE_SHIFT                      _MK_SHIFT_CONST(2)
#define AHB_GIZMO_IDE_0_ENB_FAST_REARBITRATE_FIELD                      (_MK_MASK_CONST(0x1) << AHB_GIZMO_IDE_0_ENB_FAST_REARBITRATE_SHIFT)
#define AHB_GIZMO_IDE_0_ENB_FAST_REARBITRATE_RANGE                      2:2
#define AHB_GIZMO_IDE_0_ENB_FAST_REARBITRATE_WOFFSET                    0x0
#define AHB_GIZMO_IDE_0_ENB_FAST_REARBITRATE_DEFAULT                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_IDE_0_ENB_FAST_REARBITRATE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define AHB_GIZMO_IDE_0_ENB_FAST_REARBITRATE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_IDE_0_ENB_FAST_REARBITRATE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_IDE_0_ENB_FAST_REARBITRATE_DISABLE                    _MK_ENUM_CONST(0)
#define AHB_GIZMO_IDE_0_ENB_FAST_REARBITRATE_ENABLE                     _MK_ENUM_CONST(1)

// AHB slave gizmo - Force all AHB transaction to single data request transaction.  
// 1 = force to single data transaction always. 
// 0 = dont force to single data  transaction.
#define AHB_GIZMO_IDE_0_FORCE_TO_AHB_SINGLE_SHIFT                       _MK_SHIFT_CONST(1)
#define AHB_GIZMO_IDE_0_FORCE_TO_AHB_SINGLE_FIELD                       (_MK_MASK_CONST(0x1) << AHB_GIZMO_IDE_0_FORCE_TO_AHB_SINGLE_SHIFT)
#define AHB_GIZMO_IDE_0_FORCE_TO_AHB_SINGLE_RANGE                       1:1
#define AHB_GIZMO_IDE_0_FORCE_TO_AHB_SINGLE_WOFFSET                     0x0
#define AHB_GIZMO_IDE_0_FORCE_TO_AHB_SINGLE_DEFAULT                     _MK_MASK_CONST(0x1)
#define AHB_GIZMO_IDE_0_FORCE_TO_AHB_SINGLE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define AHB_GIZMO_IDE_0_FORCE_TO_AHB_SINGLE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_GIZMO_IDE_0_FORCE_TO_AHB_SINGLE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define AHB_GIZMO_IDE_0_FORCE_TO_AHB_SINGLE_NOT_SINGLE_DATA                     _MK_ENUM_CONST(0)
#define AHB_GIZMO_IDE_0_FORCE_TO_AHB_SINGLE_SINGLE_DATA                 _MK_ENUM_CONST(1)

// AHB slave gizmo - Enable splitting AHB transactions.  1 = enable, 0 = disable.
#define AHB_GIZMO_IDE_0_ENABLE_SPLIT_SHIFT                      _MK_SHIFT_CONST(0)
#define AHB_GIZMO_IDE_0_ENABLE_SPLIT_FIELD                      (_MK_MASK_CONST(0x1) << AHB_GIZMO_IDE_0_ENABLE_SPLIT_SHIFT)
#define AHB_GIZMO_IDE_0_ENABLE_SPLIT_RANGE                      0:0
#define AHB_GIZMO_IDE_0_ENABLE_SPLIT_WOFFSET                    0x0
#define AHB_GIZMO_IDE_0_ENABLE_SPLIT_DEFAULT                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_IDE_0_ENABLE_SPLIT_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define AHB_GIZMO_IDE_0_ENABLE_SPLIT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_IDE_0_ENABLE_SPLIT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_IDE_0_ENABLE_SPLIT_DISABLE                    _MK_ENUM_CONST(0)
#define AHB_GIZMO_IDE_0_ENABLE_SPLIT_ENABLE                     _MK_ENUM_CONST(1)

// AHB Gizmo USB Control Register

// Register AHB_GIZMO_USB_0  
#define AHB_GIZMO_USB_0                 _MK_ADDR_CONST(0x1c)
#define AHB_GIZMO_USB_0_SECURE                  0x0
#define AHB_GIZMO_USB_0_WORD_COUNT                      0x1
#define AHB_GIZMO_USB_0_RESET_VAL                       _MK_MASK_CONST(0x20083)
#define AHB_GIZMO_USB_0_RESET_MASK                      _MK_MASK_CONST(0xff0f00cf)
#define AHB_GIZMO_USB_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB_0_READ_MASK                       _MK_MASK_CONST(0xff0f00cf)
#define AHB_GIZMO_USB_0_WRITE_MASK                      _MK_MASK_CONST(0xff0f00cf)
// AHB master request negate count. This is an 8-bit  counter use to indicate the minimum number of clk count 
// between requests from  this AHB master.
#define AHB_GIZMO_USB_0_REQ_NEG_CNT_SHIFT                       _MK_SHIFT_CONST(24)
#define AHB_GIZMO_USB_0_REQ_NEG_CNT_FIELD                       (_MK_MASK_CONST(0xff) << AHB_GIZMO_USB_0_REQ_NEG_CNT_SHIFT)
#define AHB_GIZMO_USB_0_REQ_NEG_CNT_RANGE                       31:24
#define AHB_GIZMO_USB_0_REQ_NEG_CNT_WOFFSET                     0x0
#define AHB_GIZMO_USB_0_REQ_NEG_CNT_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB_0_REQ_NEG_CNT_DEFAULT_MASK                        _MK_MASK_CONST(0xff)
#define AHB_GIZMO_USB_0_REQ_NEG_CNT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB_0_REQ_NEG_CNT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// AHB master gizmo - Pack all AHB read data.  1 = wait for all requested read data to be in 
// the AHB gizmos queue before returning the data back to the IP. 0 = transfer each read data 
// from the AHB to the IP  immediately.
#define AHB_GIZMO_USB_0_RD_DATA_SHIFT                   _MK_SHIFT_CONST(19)
#define AHB_GIZMO_USB_0_RD_DATA_FIELD                   (_MK_MASK_CONST(0x1) << AHB_GIZMO_USB_0_RD_DATA_SHIFT)
#define AHB_GIZMO_USB_0_RD_DATA_RANGE                   19:19
#define AHB_GIZMO_USB_0_RD_DATA_WOFFSET                 0x0
#define AHB_GIZMO_USB_0_RD_DATA_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB_0_RD_DATA_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB_0_RD_DATA_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB_0_RD_DATA_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB_0_RD_DATA_NO_WAIT                 _MK_ENUM_CONST(0)
#define AHB_GIZMO_USB_0_RD_DATA_WAIT                    _MK_ENUM_CONST(1)

// AHB master gizmo (AHB-DMA) - Start AHB write request immediately.  1 = start the AHB 
// write request immediately as soon as the device has put one write data in the AHB gizmos 
// queue. 0 = start the AHB write request only when all the  write data has transferred 
// from the device to the AHB gizmos queue.
#define AHB_GIZMO_USB_0_IMMEDIATE_SHIFT                 _MK_SHIFT_CONST(18)
#define AHB_GIZMO_USB_0_IMMEDIATE_FIELD                 (_MK_MASK_CONST(0x1) << AHB_GIZMO_USB_0_IMMEDIATE_SHIFT)
#define AHB_GIZMO_USB_0_IMMEDIATE_RANGE                 18:18
#define AHB_GIZMO_USB_0_IMMEDIATE_WOFFSET                       0x0
#define AHB_GIZMO_USB_0_IMMEDIATE_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB_0_IMMEDIATE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB_0_IMMEDIATE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB_0_IMMEDIATE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB_0_IMMEDIATE_DISABLE                       _MK_ENUM_CONST(0)
#define AHB_GIZMO_USB_0_IMMEDIATE_ENABLE                        _MK_ENUM_CONST(1)

// AHB master gizmo - Maximum allowed 
// AHB burst size.  
// 00 = single transfer.  
// 01 = burst-of-4.  
// 10 = burst-of-8. 
// 11 = burst-of-16.
#define AHB_GIZMO_USB_0_MAX_AHB_BURSTSIZE_SHIFT                 _MK_SHIFT_CONST(16)
#define AHB_GIZMO_USB_0_MAX_AHB_BURSTSIZE_FIELD                 (_MK_MASK_CONST(0x3) << AHB_GIZMO_USB_0_MAX_AHB_BURSTSIZE_SHIFT)
#define AHB_GIZMO_USB_0_MAX_AHB_BURSTSIZE_RANGE                 17:16
#define AHB_GIZMO_USB_0_MAX_AHB_BURSTSIZE_WOFFSET                       0x0
#define AHB_GIZMO_USB_0_MAX_AHB_BURSTSIZE_DEFAULT                       _MK_MASK_CONST(0x2)
#define AHB_GIZMO_USB_0_MAX_AHB_BURSTSIZE_DEFAULT_MASK                  _MK_MASK_CONST(0x3)
#define AHB_GIZMO_USB_0_MAX_AHB_BURSTSIZE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB_0_MAX_AHB_BURSTSIZE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB_0_MAX_AHB_BURSTSIZE_DMA_BURST_1WORDS                      _MK_ENUM_CONST(0)
#define AHB_GIZMO_USB_0_MAX_AHB_BURSTSIZE_DMA_BURST_4WORDS                      _MK_ENUM_CONST(1)
#define AHB_GIZMO_USB_0_MAX_AHB_BURSTSIZE_DMA_BURST_8WORDS                      _MK_ENUM_CONST(2)
#define AHB_GIZMO_USB_0_MAX_AHB_BURSTSIZE_DMA_BURST_16WORDS                     _MK_ENUM_CONST(3)

// AHB slave gizmo - Dont split AHB write transaction.  1 = dont split AHB write transaction 
// ever. 0 (and enable_split=1) = allow AHB write  transaction to be split.
#define AHB_GIZMO_USB_0_DONT_SPLIT_AHB_WR_SHIFT                 _MK_SHIFT_CONST(7)
#define AHB_GIZMO_USB_0_DONT_SPLIT_AHB_WR_FIELD                 (_MK_MASK_CONST(0x1) << AHB_GIZMO_USB_0_DONT_SPLIT_AHB_WR_SHIFT)
#define AHB_GIZMO_USB_0_DONT_SPLIT_AHB_WR_RANGE                 7:7
#define AHB_GIZMO_USB_0_DONT_SPLIT_AHB_WR_WOFFSET                       0x0
#define AHB_GIZMO_USB_0_DONT_SPLIT_AHB_WR_DEFAULT                       _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB_0_DONT_SPLIT_AHB_WR_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB_0_DONT_SPLIT_AHB_WR_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB_0_DONT_SPLIT_AHB_WR_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB_0_DONT_SPLIT_AHB_WR_ENABLE                        _MK_ENUM_CONST(0)
#define AHB_GIZMO_USB_0_DONT_SPLIT_AHB_WR_DISABLE                       _MK_ENUM_CONST(1)

// AHB slave gizmo - Accept AHB write request always.  1 = always accept 
// AHB write request without checking whether there is room in the queue 
// to store the write data. 0 = accept AHB write request only when theres  
// enough room in the queue to store all the write data.
#define AHB_GIZMO_USB_0_ACCEPT_AHB_WR_ALWAYS_SHIFT                      _MK_SHIFT_CONST(6)
#define AHB_GIZMO_USB_0_ACCEPT_AHB_WR_ALWAYS_FIELD                      (_MK_MASK_CONST(0x1) << AHB_GIZMO_USB_0_ACCEPT_AHB_WR_ALWAYS_SHIFT)
#define AHB_GIZMO_USB_0_ACCEPT_AHB_WR_ALWAYS_RANGE                      6:6
#define AHB_GIZMO_USB_0_ACCEPT_AHB_WR_ALWAYS_WOFFSET                    0x0
#define AHB_GIZMO_USB_0_ACCEPT_AHB_WR_ALWAYS_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB_0_ACCEPT_AHB_WR_ALWAYS_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB_0_ACCEPT_AHB_WR_ALWAYS_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB_0_ACCEPT_AHB_WR_ALWAYS_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB_0_ACCEPT_AHB_WR_ALWAYS_ACCEPT_ON_CHECK                    _MK_ENUM_CONST(0)
#define AHB_GIZMO_USB_0_ACCEPT_AHB_WR_ALWAYS_ACCEPT_ON_NOCHECK                  _MK_ENUM_CONST(1)

// AHB slave gizmo  Start write request to device immediately.  1 = start write request on 
// the device side as soon as the AHB master puts data into the gizmos queue. 0 = start the 
// device write request only when the  AHB master has placed all write data into the gizmos 
// queue.
#define AHB_GIZMO_USB_0_IP_WR_REQ_IMMEDIATE_SHIFT                       _MK_SHIFT_CONST(3)
#define AHB_GIZMO_USB_0_IP_WR_REQ_IMMEDIATE_FIELD                       (_MK_MASK_CONST(0x1) << AHB_GIZMO_USB_0_IP_WR_REQ_IMMEDIATE_SHIFT)
#define AHB_GIZMO_USB_0_IP_WR_REQ_IMMEDIATE_RANGE                       3:3
#define AHB_GIZMO_USB_0_IP_WR_REQ_IMMEDIATE_WOFFSET                     0x0
#define AHB_GIZMO_USB_0_IP_WR_REQ_IMMEDIATE_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB_0_IP_WR_REQ_IMMEDIATE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB_0_IP_WR_REQ_IMMEDIATE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB_0_IP_WR_REQ_IMMEDIATE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB_0_IP_WR_REQ_IMMEDIATE_DISABLE                     _MK_ENUM_CONST(0)
#define AHB_GIZMO_USB_0_IP_WR_REQ_IMMEDIATE_ENABLE                      _MK_ENUM_CONST(1)

// AHB slave gizmo - Enable fast re-arbitration.  1 = allow AHB master re-arbitration as soon 
// as the device returns one read data into the gizmos queue. 0 = allow AHB master 
// re-arbitration only when the  device returns all read data into the gizmos queue.
#define AHB_GIZMO_USB_0_ENB_FAST_REARBITRATE_SHIFT                      _MK_SHIFT_CONST(2)
#define AHB_GIZMO_USB_0_ENB_FAST_REARBITRATE_FIELD                      (_MK_MASK_CONST(0x1) << AHB_GIZMO_USB_0_ENB_FAST_REARBITRATE_SHIFT)
#define AHB_GIZMO_USB_0_ENB_FAST_REARBITRATE_RANGE                      2:2
#define AHB_GIZMO_USB_0_ENB_FAST_REARBITRATE_WOFFSET                    0x0
#define AHB_GIZMO_USB_0_ENB_FAST_REARBITRATE_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB_0_ENB_FAST_REARBITRATE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB_0_ENB_FAST_REARBITRATE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB_0_ENB_FAST_REARBITRATE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB_0_ENB_FAST_REARBITRATE_DISABLE                    _MK_ENUM_CONST(0)
#define AHB_GIZMO_USB_0_ENB_FAST_REARBITRATE_ENABLE                     _MK_ENUM_CONST(1)

// AHB slave gizmo - Force all AHB transaction to single data request transaction.  
// 1 = force to single data transaction always. 
// 0 = dont force to single data transaction.
#define AHB_GIZMO_USB_0_FORCE_TO_AHB_SINGLE_SHIFT                       _MK_SHIFT_CONST(1)
#define AHB_GIZMO_USB_0_FORCE_TO_AHB_SINGLE_FIELD                       (_MK_MASK_CONST(0x1) << AHB_GIZMO_USB_0_FORCE_TO_AHB_SINGLE_SHIFT)
#define AHB_GIZMO_USB_0_FORCE_TO_AHB_SINGLE_RANGE                       1:1
#define AHB_GIZMO_USB_0_FORCE_TO_AHB_SINGLE_WOFFSET                     0x0
#define AHB_GIZMO_USB_0_FORCE_TO_AHB_SINGLE_DEFAULT                     _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB_0_FORCE_TO_AHB_SINGLE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB_0_FORCE_TO_AHB_SINGLE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB_0_FORCE_TO_AHB_SINGLE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB_0_FORCE_TO_AHB_SINGLE_NOT_SINGLE_DATA                     _MK_ENUM_CONST(0)
#define AHB_GIZMO_USB_0_FORCE_TO_AHB_SINGLE_SINGLE_DATA                 _MK_ENUM_CONST(1)

//AHB slave gizmo - Enable splitting AHB transactions.  1 = enable  0 = disable
#define AHB_GIZMO_USB_0_ENABLE_SPLIT_SHIFT                      _MK_SHIFT_CONST(0)
#define AHB_GIZMO_USB_0_ENABLE_SPLIT_FIELD                      (_MK_MASK_CONST(0x1) << AHB_GIZMO_USB_0_ENABLE_SPLIT_SHIFT)
#define AHB_GIZMO_USB_0_ENABLE_SPLIT_RANGE                      0:0
#define AHB_GIZMO_USB_0_ENABLE_SPLIT_WOFFSET                    0x0
#define AHB_GIZMO_USB_0_ENABLE_SPLIT_DEFAULT                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB_0_ENABLE_SPLIT_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB_0_ENABLE_SPLIT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB_0_ENABLE_SPLIT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB_0_ENABLE_SPLIT_DISABLE                    _MK_ENUM_CONST(0)
#define AHB_GIZMO_USB_0_ENABLE_SPLIT_ENABLE                     _MK_ENUM_CONST(1)

// AHB Gizmo AHB XBAR Bridge Control Register

// Register AHB_GIZMO_AHB_XBAR_BRIDGE_0  
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0                     _MK_ADDR_CONST(0x20)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_SECURE                      0x0
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_WORD_COUNT                  0x1
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_RESET_VAL                   _MK_MASK_CONST(0x8d)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_RESET_MASK                  _MK_MASK_CONST(0xff)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_READ_MASK                   _MK_MASK_CONST(0xff)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_WRITE_MASK                  _MK_MASK_CONST(0xff)
// AHB slave gizmo - Dont split AHB write transaction.  1 = dont split AHB write transaction ever. 
// 0 (and enable_split=1) = allow AHB write  transaction to be split.
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_DONT_SPLIT_AHB_WR_SHIFT                     _MK_SHIFT_CONST(7)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_DONT_SPLIT_AHB_WR_FIELD                     (_MK_MASK_CONST(0x1) << AHB_GIZMO_AHB_XBAR_BRIDGE_0_DONT_SPLIT_AHB_WR_SHIFT)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_DONT_SPLIT_AHB_WR_RANGE                     7:7
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_DONT_SPLIT_AHB_WR_WOFFSET                   0x0
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_DONT_SPLIT_AHB_WR_DEFAULT                   _MK_MASK_CONST(0x1)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_DONT_SPLIT_AHB_WR_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_DONT_SPLIT_AHB_WR_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_DONT_SPLIT_AHB_WR_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_DONT_SPLIT_AHB_WR_ENABLE                    _MK_ENUM_CONST(0)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_DONT_SPLIT_AHB_WR_DISABLE                   _MK_ENUM_CONST(1)

// AHB slave gizmo - Accept AHB write request always.  1 = always accept AHB write 
// request without checking whether there is room in the queue to store the write 
// data. 0 = accept AHB write request only when theres  enough room in the queue 
// to store all the write data.
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ACCEPT_AHB_WR_ALWAYS_SHIFT                  _MK_SHIFT_CONST(6)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ACCEPT_AHB_WR_ALWAYS_FIELD                  (_MK_MASK_CONST(0x1) << AHB_GIZMO_AHB_XBAR_BRIDGE_0_ACCEPT_AHB_WR_ALWAYS_SHIFT)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ACCEPT_AHB_WR_ALWAYS_RANGE                  6:6
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ACCEPT_AHB_WR_ALWAYS_WOFFSET                        0x0
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ACCEPT_AHB_WR_ALWAYS_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ACCEPT_AHB_WR_ALWAYS_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ACCEPT_AHB_WR_ALWAYS_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ACCEPT_AHB_WR_ALWAYS_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ACCEPT_AHB_WR_ALWAYS_ACCEPT_ON_CHECK                        _MK_ENUM_CONST(0)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ACCEPT_AHB_WR_ALWAYS_ACCEPT_ON_NOCHECK                      _MK_ENUM_CONST(1)

// AHB slave gizmo - Maximum allowed IP burst 
// size.  
// 00 = single transfer.  
// 01 = burst-of-4.  
// 10 = burst-of-8.  
// 11 = burst-of-16.
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_MAX_IP_BURSTSIZE_SHIFT                      _MK_SHIFT_CONST(4)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_MAX_IP_BURSTSIZE_FIELD                      (_MK_MASK_CONST(0x3) << AHB_GIZMO_AHB_XBAR_BRIDGE_0_MAX_IP_BURSTSIZE_SHIFT)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_MAX_IP_BURSTSIZE_RANGE                      5:4
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_MAX_IP_BURSTSIZE_WOFFSET                    0x0
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_MAX_IP_BURSTSIZE_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_MAX_IP_BURSTSIZE_DEFAULT_MASK                       _MK_MASK_CONST(0x3)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_MAX_IP_BURSTSIZE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_MAX_IP_BURSTSIZE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_MAX_IP_BURSTSIZE_DMA_BURST_1WORDS                   _MK_ENUM_CONST(0)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_MAX_IP_BURSTSIZE_DMA_BURST_4WORDS                   _MK_ENUM_CONST(1)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_MAX_IP_BURSTSIZE_DMA_BURST_8WORDS                   _MK_ENUM_CONST(2)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_MAX_IP_BURSTSIZE_DMA_BURST_16WORDS                  _MK_ENUM_CONST(3)

// AHB slave gizmo - Start write request to device immediately.  1 = start write request on the 
// device side as soon as the AHB master puts data into the gizmos queue.  0 = start the device 
// write request only when the  AHB master has placed all write data into the gizmos queue.
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_IMMEDIATE_SHIFT                     _MK_SHIFT_CONST(3)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_IMMEDIATE_FIELD                     (_MK_MASK_CONST(0x1) << AHB_GIZMO_AHB_XBAR_BRIDGE_0_IMMEDIATE_SHIFT)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_IMMEDIATE_RANGE                     3:3
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_IMMEDIATE_WOFFSET                   0x0
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_IMMEDIATE_DEFAULT                   _MK_MASK_CONST(0x1)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_IMMEDIATE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_IMMEDIATE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_IMMEDIATE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_IMMEDIATE_DISABLE                   _MK_ENUM_CONST(0)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_IMMEDIATE_ENABLE                    _MK_ENUM_CONST(1)

// AHB slave gizmo - Enable fast re-arbitration.  1 = allow AHB master re-arbitration as soon as 
// the device returns one read data into the gizmos queue.  0 = allow AHB master re-arbitration 
// only when the  device returns all read data into the gizmos queue.
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ENB_FAST_REARBITRATE_SHIFT                  _MK_SHIFT_CONST(2)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ENB_FAST_REARBITRATE_FIELD                  (_MK_MASK_CONST(0x1) << AHB_GIZMO_AHB_XBAR_BRIDGE_0_ENB_FAST_REARBITRATE_SHIFT)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ENB_FAST_REARBITRATE_RANGE                  2:2
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ENB_FAST_REARBITRATE_WOFFSET                        0x0
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ENB_FAST_REARBITRATE_DEFAULT                        _MK_MASK_CONST(0x1)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ENB_FAST_REARBITRATE_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ENB_FAST_REARBITRATE_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ENB_FAST_REARBITRATE_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ENB_FAST_REARBITRATE_DISABLE                        _MK_ENUM_CONST(0)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ENB_FAST_REARBITRATE_ENABLE                 _MK_ENUM_CONST(1)

// AHB slave gizmo - Force all AHB transaction to single data request transaction.  
// 1 = force to single data transaction always.  
// 0 = dont force to single data  transaction.
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_FORCE_TO_AHB_SINGLE_SHIFT                   _MK_SHIFT_CONST(1)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_FORCE_TO_AHB_SINGLE_FIELD                   (_MK_MASK_CONST(0x1) << AHB_GIZMO_AHB_XBAR_BRIDGE_0_FORCE_TO_AHB_SINGLE_SHIFT)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_FORCE_TO_AHB_SINGLE_RANGE                   1:1
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_FORCE_TO_AHB_SINGLE_WOFFSET                 0x0
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_FORCE_TO_AHB_SINGLE_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_FORCE_TO_AHB_SINGLE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_FORCE_TO_AHB_SINGLE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_FORCE_TO_AHB_SINGLE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_FORCE_TO_AHB_SINGLE_NOT_SINGLE_DATA                 _MK_ENUM_CONST(0)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_FORCE_TO_AHB_SINGLE_SINGLE_DATA                     _MK_ENUM_CONST(1)

// AHB slave gizmo - Enable splitting AHB transactions.  1 = enable 0 = disable
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ENABLE_SPLIT_SHIFT                  _MK_SHIFT_CONST(0)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ENABLE_SPLIT_FIELD                  (_MK_MASK_CONST(0x1) << AHB_GIZMO_AHB_XBAR_BRIDGE_0_ENABLE_SPLIT_SHIFT)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ENABLE_SPLIT_RANGE                  0:0
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ENABLE_SPLIT_WOFFSET                        0x0
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ENABLE_SPLIT_DEFAULT                        _MK_MASK_CONST(0x1)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ENABLE_SPLIT_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ENABLE_SPLIT_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ENABLE_SPLIT_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ENABLE_SPLIT_DISABLE                        _MK_ENUM_CONST(0)
#define AHB_GIZMO_AHB_XBAR_BRIDGE_0_ENABLE_SPLIT_ENABLE                 _MK_ENUM_CONST(1)

// AHB Gizmo CPU AHB Bridge Control Register

// Register AHB_GIZMO_CPU_AHB_BRIDGE_0  
#define AHB_GIZMO_CPU_AHB_BRIDGE_0                      _MK_ADDR_CONST(0x24)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_SECURE                       0x0
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_WORD_COUNT                   0x1
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_RESET_VAL                    _MK_MASK_CONST(0x60000)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_RESET_MASK                   _MK_MASK_CONST(0xff0f0000)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_READ_MASK                    _MK_MASK_CONST(0xff0f0000)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_WRITE_MASK                   _MK_MASK_CONST(0xff0f0000)
// AHB master request negate count. This is an 8-bit  counter use to indicate the minimum number of clk count between requests from  this AHB master.
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_REQ_NEG_CNT_SHIFT                    _MK_SHIFT_CONST(24)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_REQ_NEG_CNT_FIELD                    (_MK_MASK_CONST(0xff) << AHB_GIZMO_CPU_AHB_BRIDGE_0_REQ_NEG_CNT_SHIFT)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_REQ_NEG_CNT_RANGE                    31:24
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_REQ_NEG_CNT_WOFFSET                  0x0
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_REQ_NEG_CNT_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_REQ_NEG_CNT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_REQ_NEG_CNT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_REQ_NEG_CNT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// AHB master gizmo - Pack all AHB read data.  1 = wait for all requested read data to be in the 
// AHB gizmos queue before returning the data back to the IP.  0 = transfer each read data from 
// the AHB to the IP  immediately.
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_RD_DATA_SHIFT                        _MK_SHIFT_CONST(19)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_RD_DATA_FIELD                        (_MK_MASK_CONST(0x1) << AHB_GIZMO_CPU_AHB_BRIDGE_0_RD_DATA_SHIFT)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_RD_DATA_RANGE                        19:19
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_RD_DATA_WOFFSET                      0x0
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_RD_DATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_RD_DATA_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_RD_DATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_RD_DATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_RD_DATA_NO_WAIT                      _MK_ENUM_CONST(0)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_RD_DATA_WAIT                 _MK_ENUM_CONST(1)

// AHB master gizmo (AHB-DMA) - Start AHB write request immediately.  1 = start the AHB write 
// request immediately as soon as the device  has put one write data in the AHB gizmos queue.  
// 0 = start the AHB write request only when all the  write data has transferred from the 
// device to the AHB gizmos queue.
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_IMMEDIATE_SHIFT                      _MK_SHIFT_CONST(18)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_IMMEDIATE_FIELD                      (_MK_MASK_CONST(0x1) << AHB_GIZMO_CPU_AHB_BRIDGE_0_IMMEDIATE_SHIFT)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_IMMEDIATE_RANGE                      18:18
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_IMMEDIATE_WOFFSET                    0x0
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_IMMEDIATE_DEFAULT                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_IMMEDIATE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_IMMEDIATE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_IMMEDIATE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_IMMEDIATE_DISABLE                    _MK_ENUM_CONST(0)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_IMMEDIATE_ENABLE                     _MK_ENUM_CONST(1)

// AHB master gizmo - Maximum allowed AHB 
// burst size.  
// 00 = single transfer.  
// 01 = burst-of-4.  
// 10 = burst-of-8.  
// 11 = burst-of-16.
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_SHIFT                      _MK_SHIFT_CONST(16)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_FIELD                      (_MK_MASK_CONST(0x3) << AHB_GIZMO_CPU_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_SHIFT)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_RANGE                      17:16
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_WOFFSET                    0x0
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_DEFAULT                    _MK_MASK_CONST(0x2)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_DEFAULT_MASK                       _MK_MASK_CONST(0x3)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_DMA_BURST_1WORDS                   _MK_ENUM_CONST(0)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_DMA_BURST_4WORDS                   _MK_ENUM_CONST(1)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_DMA_BURST_8WORDS                   _MK_ENUM_CONST(2)
#define AHB_GIZMO_CPU_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_DMA_BURST_16WORDS                  _MK_ENUM_CONST(3)

// AHB Gizmo COP AHB Bridge Control Register

// Register AHB_GIZMO_COP_AHB_BRIDGE_0  
#define AHB_GIZMO_COP_AHB_BRIDGE_0                      _MK_ADDR_CONST(0x28)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_SECURE                       0x0
#define AHB_GIZMO_COP_AHB_BRIDGE_0_WORD_COUNT                   0x1
#define AHB_GIZMO_COP_AHB_BRIDGE_0_RESET_VAL                    _MK_MASK_CONST(0x60000)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_RESET_MASK                   _MK_MASK_CONST(0xff0f0000)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_READ_MASK                    _MK_MASK_CONST(0xff0f0000)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_WRITE_MASK                   _MK_MASK_CONST(0xff0f0000)
// AHB master request negate count. This is an 8-bit  counter use to indicate the minimum number of clk count between requests from  this AHB master.
#define AHB_GIZMO_COP_AHB_BRIDGE_0_REQ_NEG_CNT_SHIFT                    _MK_SHIFT_CONST(24)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_REQ_NEG_CNT_FIELD                    (_MK_MASK_CONST(0xff) << AHB_GIZMO_COP_AHB_BRIDGE_0_REQ_NEG_CNT_SHIFT)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_REQ_NEG_CNT_RANGE                    31:24
#define AHB_GIZMO_COP_AHB_BRIDGE_0_REQ_NEG_CNT_WOFFSET                  0x0
#define AHB_GIZMO_COP_AHB_BRIDGE_0_REQ_NEG_CNT_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_REQ_NEG_CNT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_REQ_NEG_CNT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_REQ_NEG_CNT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// AHB master gizmo - Pack all AHB read data.  1 = wait for all requested read data to be in the 
// AHB gizmos queue before returning the data back to the IP.  0 = transfer each read data from 
// the AHB to the IP  immediately.
#define AHB_GIZMO_COP_AHB_BRIDGE_0_RD_DATA_SHIFT                        _MK_SHIFT_CONST(19)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_RD_DATA_FIELD                        (_MK_MASK_CONST(0x1) << AHB_GIZMO_COP_AHB_BRIDGE_0_RD_DATA_SHIFT)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_RD_DATA_RANGE                        19:19
#define AHB_GIZMO_COP_AHB_BRIDGE_0_RD_DATA_WOFFSET                      0x0
#define AHB_GIZMO_COP_AHB_BRIDGE_0_RD_DATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_RD_DATA_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_RD_DATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_RD_DATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_RD_DATA_NO_WAIT                      _MK_ENUM_CONST(0)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_RD_DATA_WAIT                 _MK_ENUM_CONST(1)

// AHB master gizmo (AHB-DMA) - Start AHB write request immediately.  1 = start the AHB write 
// request immediately as soon as the device  has put one write data in the AHB gizmos queue.  
// 0 = start the AHB write request only when all the  write data has transferred from the 
// device to the AHB gizmos queue.
#define AHB_GIZMO_COP_AHB_BRIDGE_0_IMMEDIATE_SHIFT                      _MK_SHIFT_CONST(18)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_IMMEDIATE_FIELD                      (_MK_MASK_CONST(0x1) << AHB_GIZMO_COP_AHB_BRIDGE_0_IMMEDIATE_SHIFT)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_IMMEDIATE_RANGE                      18:18
#define AHB_GIZMO_COP_AHB_BRIDGE_0_IMMEDIATE_WOFFSET                    0x0
#define AHB_GIZMO_COP_AHB_BRIDGE_0_IMMEDIATE_DEFAULT                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_IMMEDIATE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_IMMEDIATE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_IMMEDIATE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_IMMEDIATE_DISABLE                    _MK_ENUM_CONST(0)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_IMMEDIATE_ENABLE                     _MK_ENUM_CONST(1)

// AHB master gizmo - Maximum allowed AHB 
// burst size.  
// 00 = single transfer.  
// 01 = burst-of-4.  
// 10 = burst-of-8.  
// 11 = burst-of-16.
#define AHB_GIZMO_COP_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_SHIFT                      _MK_SHIFT_CONST(16)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_FIELD                      (_MK_MASK_CONST(0x3) << AHB_GIZMO_COP_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_SHIFT)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_RANGE                      17:16
#define AHB_GIZMO_COP_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_WOFFSET                    0x0
#define AHB_GIZMO_COP_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_DEFAULT                    _MK_MASK_CONST(0x2)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_DEFAULT_MASK                       _MK_MASK_CONST(0x3)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_DMA_BURST_1WORDS                   _MK_ENUM_CONST(0)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_DMA_BURST_4WORDS                   _MK_ENUM_CONST(1)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_DMA_BURST_8WORDS                   _MK_ENUM_CONST(2)
#define AHB_GIZMO_COP_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_DMA_BURST_16WORDS                  _MK_ENUM_CONST(3)

// AHB Gizmo XBAR APB Control Register

// Register AHB_GIZMO_XBAR_APB_CTLR_0  
#define AHB_GIZMO_XBAR_APB_CTLR_0                       _MK_ADDR_CONST(0x2c)
#define AHB_GIZMO_XBAR_APB_CTLR_0_SECURE                        0x0
#define AHB_GIZMO_XBAR_APB_CTLR_0_WORD_COUNT                    0x1
#define AHB_GIZMO_XBAR_APB_CTLR_0_RESET_VAL                     _MK_MASK_CONST(0x8)
#define AHB_GIZMO_XBAR_APB_CTLR_0_RESET_MASK                    _MK_MASK_CONST(0x38)
#define AHB_GIZMO_XBAR_APB_CTLR_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_XBAR_APB_CTLR_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_XBAR_APB_CTLR_0_READ_MASK                     _MK_MASK_CONST(0x38)
#define AHB_GIZMO_XBAR_APB_CTLR_0_WRITE_MASK                    _MK_MASK_CONST(0x38)
// AHB slave gizmo - Maximum allowed IP 
// burst size.  
// 00 = single transfer.  
// 01 = burst-of-4.  
// 10 = burst-of-8.  
// 11 = burst-of-16.
#define AHB_GIZMO_XBAR_APB_CTLR_0_MAX_IP_BURSTSIZE_SHIFT                        _MK_SHIFT_CONST(4)
#define AHB_GIZMO_XBAR_APB_CTLR_0_MAX_IP_BURSTSIZE_FIELD                        (_MK_MASK_CONST(0x3) << AHB_GIZMO_XBAR_APB_CTLR_0_MAX_IP_BURSTSIZE_SHIFT)
#define AHB_GIZMO_XBAR_APB_CTLR_0_MAX_IP_BURSTSIZE_RANGE                        5:4
#define AHB_GIZMO_XBAR_APB_CTLR_0_MAX_IP_BURSTSIZE_WOFFSET                      0x0
#define AHB_GIZMO_XBAR_APB_CTLR_0_MAX_IP_BURSTSIZE_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_XBAR_APB_CTLR_0_MAX_IP_BURSTSIZE_DEFAULT_MASK                 _MK_MASK_CONST(0x3)
#define AHB_GIZMO_XBAR_APB_CTLR_0_MAX_IP_BURSTSIZE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_XBAR_APB_CTLR_0_MAX_IP_BURSTSIZE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_XBAR_APB_CTLR_0_MAX_IP_BURSTSIZE_DMA_BURST_1WORDS                     _MK_ENUM_CONST(0)
#define AHB_GIZMO_XBAR_APB_CTLR_0_MAX_IP_BURSTSIZE_DMA_BURST_4WORDS                     _MK_ENUM_CONST(1)
#define AHB_GIZMO_XBAR_APB_CTLR_0_MAX_IP_BURSTSIZE_DMA_BURST_8WORDS                     _MK_ENUM_CONST(2)
#define AHB_GIZMO_XBAR_APB_CTLR_0_MAX_IP_BURSTSIZE_DMA_BURST_16WORDS                    _MK_ENUM_CONST(3)

// AHB slave gizmo - Start write request to device immediately.  1 = start write request on 
// the device side as soon as the AHB master puts data into the gizmos queue.  0 = start 
// the device write request only when the  AHB master has placed all write data into the 
// gizmos queue.
#define AHB_GIZMO_XBAR_APB_CTLR_0_IMMEDIATE_SHIFT                       _MK_SHIFT_CONST(3)
#define AHB_GIZMO_XBAR_APB_CTLR_0_IMMEDIATE_FIELD                       (_MK_MASK_CONST(0x1) << AHB_GIZMO_XBAR_APB_CTLR_0_IMMEDIATE_SHIFT)
#define AHB_GIZMO_XBAR_APB_CTLR_0_IMMEDIATE_RANGE                       3:3
#define AHB_GIZMO_XBAR_APB_CTLR_0_IMMEDIATE_WOFFSET                     0x0
#define AHB_GIZMO_XBAR_APB_CTLR_0_IMMEDIATE_DEFAULT                     _MK_MASK_CONST(0x1)
#define AHB_GIZMO_XBAR_APB_CTLR_0_IMMEDIATE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define AHB_GIZMO_XBAR_APB_CTLR_0_IMMEDIATE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_GIZMO_XBAR_APB_CTLR_0_IMMEDIATE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define AHB_GIZMO_XBAR_APB_CTLR_0_IMMEDIATE_DISABLE                     _MK_ENUM_CONST(0)
#define AHB_GIZMO_XBAR_APB_CTLR_0_IMMEDIATE_ENABLE                      _MK_ENUM_CONST(1)

// AHB Gizmo VCP AHB Bridge Control Register

// Register AHB_GIZMO_VCP_AHB_BRIDGE_0  
#define AHB_GIZMO_VCP_AHB_BRIDGE_0                      _MK_ADDR_CONST(0x30)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_SECURE                       0x0
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_WORD_COUNT                   0x1
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_RESET_VAL                    _MK_MASK_CONST(0x60000)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_RESET_MASK                   _MK_MASK_CONST(0xff0f0000)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_READ_MASK                    _MK_MASK_CONST(0xff0f0000)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_WRITE_MASK                   _MK_MASK_CONST(0xff0f0000)
// AHB master request negate count. This is an 8-bit  counter use to indicate the minimum number of clk count between requests from  this AHB master.
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_REQ_NEG_CNT_SHIFT                    _MK_SHIFT_CONST(24)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_REQ_NEG_CNT_FIELD                    (_MK_MASK_CONST(0xff) << AHB_GIZMO_VCP_AHB_BRIDGE_0_REQ_NEG_CNT_SHIFT)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_REQ_NEG_CNT_RANGE                    31:24
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_REQ_NEG_CNT_WOFFSET                  0x0
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_REQ_NEG_CNT_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_REQ_NEG_CNT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_REQ_NEG_CNT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_REQ_NEG_CNT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//AHB master gizmo - Pack all AHB read data.  1 = wait for all requested read data to be in the AHB gizmos queue before returning the data back to the IP.  0 = transfer each read data from the AHB to the IP  immediately.
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_RD_DATA_SHIFT                        _MK_SHIFT_CONST(19)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_RD_DATA_FIELD                        (_MK_MASK_CONST(0x1) << AHB_GIZMO_VCP_AHB_BRIDGE_0_RD_DATA_SHIFT)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_RD_DATA_RANGE                        19:19
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_RD_DATA_WOFFSET                      0x0
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_RD_DATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_RD_DATA_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_RD_DATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_RD_DATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_RD_DATA_NO_WAIT                      _MK_ENUM_CONST(0)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_RD_DATA_WAIT                 _MK_ENUM_CONST(1)

//AHB master gizmo (AHB-DMA) - Start AHB write request immediately.  1 = start the AHB write request immediately as soon as the device  has put one write data in the AHB gizmos queue.  0 = start the AHB write request only when all the  write data has transferred from the device to the AHB gizmos queue.
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_IMMEDIATE_SHIFT                      _MK_SHIFT_CONST(18)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_IMMEDIATE_FIELD                      (_MK_MASK_CONST(0x1) << AHB_GIZMO_VCP_AHB_BRIDGE_0_IMMEDIATE_SHIFT)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_IMMEDIATE_RANGE                      18:18
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_IMMEDIATE_WOFFSET                    0x0
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_IMMEDIATE_DEFAULT                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_IMMEDIATE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_IMMEDIATE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_IMMEDIATE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_IMMEDIATE_DISABLE                    _MK_ENUM_CONST(0)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_IMMEDIATE_ENABLE                     _MK_ENUM_CONST(1)

//AHB master gizmo - Maximum allowed AHB burst size.  00 = single transfer.  01 = burst-of-4.  10 = burst-of-8.  11 = burst-of-16.
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_SHIFT                      _MK_SHIFT_CONST(16)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_FIELD                      (_MK_MASK_CONST(0x3) << AHB_GIZMO_VCP_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_SHIFT)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_RANGE                      17:16
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_WOFFSET                    0x0
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_DEFAULT                    _MK_MASK_CONST(0x2)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_DEFAULT_MASK                       _MK_MASK_CONST(0x3)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_DMA_BURST_1WORDS                   _MK_ENUM_CONST(0)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_DMA_BURST_4WORDS                   _MK_ENUM_CONST(1)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_DMA_BURST_8WORDS                   _MK_ENUM_CONST(2)
#define AHB_GIZMO_VCP_AHB_BRIDGE_0_MAX_AHB_BURSTSIZE_DMA_BURST_16WORDS                  _MK_ENUM_CONST(3)


// Reserved address 52 [0x34] 

// Reserved address 56 [0x38] 
// AHB Gizmo NAND Control Register

// Register AHB_GIZMO_NAND_0  
#define AHB_GIZMO_NAND_0                        _MK_ADDR_CONST(0x3c)
#define AHB_GIZMO_NAND_0_SECURE                         0x0
#define AHB_GIZMO_NAND_0_WORD_COUNT                     0x1
#define AHB_GIZMO_NAND_0_RESET_VAL                      _MK_MASK_CONST(0xa0000)
#define AHB_GIZMO_NAND_0_RESET_MASK                     _MK_MASK_CONST(0xff0f0000)
#define AHB_GIZMO_NAND_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define AHB_GIZMO_NAND_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_NAND_0_READ_MASK                      _MK_MASK_CONST(0xff0f0000)
#define AHB_GIZMO_NAND_0_WRITE_MASK                     _MK_MASK_CONST(0xff0f0000)
// AHB master request negate count. This is an 8-bit  counter use to indicate the minimum number of clk count 
// between requests from  this AHB master.
#define AHB_GIZMO_NAND_0_REQ_NEG_CNT_SHIFT                      _MK_SHIFT_CONST(24)
#define AHB_GIZMO_NAND_0_REQ_NEG_CNT_FIELD                      (_MK_MASK_CONST(0xff) << AHB_GIZMO_NAND_0_REQ_NEG_CNT_SHIFT)
#define AHB_GIZMO_NAND_0_REQ_NEG_CNT_RANGE                      31:24
#define AHB_GIZMO_NAND_0_REQ_NEG_CNT_WOFFSET                    0x0
#define AHB_GIZMO_NAND_0_REQ_NEG_CNT_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_NAND_0_REQ_NEG_CNT_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define AHB_GIZMO_NAND_0_REQ_NEG_CNT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_NAND_0_REQ_NEG_CNT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// AHB master gizmo - Pack all AHB read data.  1 = wait for all requested read data to be 
// in the AHB gizmos queue before returning the data back to the IP.  0 = transfer each read 
// data from the AHB to the IP  immediately.
#define AHB_GIZMO_NAND_0_RD_DATA_SHIFT                  _MK_SHIFT_CONST(19)
#define AHB_GIZMO_NAND_0_RD_DATA_FIELD                  (_MK_MASK_CONST(0x1) << AHB_GIZMO_NAND_0_RD_DATA_SHIFT)
#define AHB_GIZMO_NAND_0_RD_DATA_RANGE                  19:19
#define AHB_GIZMO_NAND_0_RD_DATA_WOFFSET                        0x0
#define AHB_GIZMO_NAND_0_RD_DATA_DEFAULT                        _MK_MASK_CONST(0x1)
#define AHB_GIZMO_NAND_0_RD_DATA_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define AHB_GIZMO_NAND_0_RD_DATA_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_GIZMO_NAND_0_RD_DATA_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_NAND_0_RD_DATA_NO_WAIT                        _MK_ENUM_CONST(0)
#define AHB_GIZMO_NAND_0_RD_DATA_WAIT                   _MK_ENUM_CONST(1)

// AHB master gizmo (AHB-DMA) - Start AHB write request immediately.  1 = start the AHB 
// write request immediately as soon as the device  has put one write data in the AHB 
// gizmos queue.  0 = start the AHB write request only when all the  write data has 
// transferred from the device to the AHB gizmos queue.
#define AHB_GIZMO_NAND_0_IMMEDIATE_SHIFT                        _MK_SHIFT_CONST(18)
#define AHB_GIZMO_NAND_0_IMMEDIATE_FIELD                        (_MK_MASK_CONST(0x1) << AHB_GIZMO_NAND_0_IMMEDIATE_SHIFT)
#define AHB_GIZMO_NAND_0_IMMEDIATE_RANGE                        18:18
#define AHB_GIZMO_NAND_0_IMMEDIATE_WOFFSET                      0x0
#define AHB_GIZMO_NAND_0_IMMEDIATE_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_NAND_0_IMMEDIATE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define AHB_GIZMO_NAND_0_IMMEDIATE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_NAND_0_IMMEDIATE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_NAND_0_IMMEDIATE_DISABLE                      _MK_ENUM_CONST(0)
#define AHB_GIZMO_NAND_0_IMMEDIATE_ENABLE                       _MK_ENUM_CONST(1)

// AHB master gizmo - Maximum allowed 
// AHB burst size.  
// 00 = single transfer.  
// 01 = burst-of-4.  
// 10 = burst-of-8.  
// 11 = burst-of-16.
#define AHB_GIZMO_NAND_0_MAX_AHB_BURSTSIZE_SHIFT                        _MK_SHIFT_CONST(16)
#define AHB_GIZMO_NAND_0_MAX_AHB_BURSTSIZE_FIELD                        (_MK_MASK_CONST(0x3) << AHB_GIZMO_NAND_0_MAX_AHB_BURSTSIZE_SHIFT)
#define AHB_GIZMO_NAND_0_MAX_AHB_BURSTSIZE_RANGE                        17:16
#define AHB_GIZMO_NAND_0_MAX_AHB_BURSTSIZE_WOFFSET                      0x0
#define AHB_GIZMO_NAND_0_MAX_AHB_BURSTSIZE_DEFAULT                      _MK_MASK_CONST(0x2)
#define AHB_GIZMO_NAND_0_MAX_AHB_BURSTSIZE_DEFAULT_MASK                 _MK_MASK_CONST(0x3)
#define AHB_GIZMO_NAND_0_MAX_AHB_BURSTSIZE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_NAND_0_MAX_AHB_BURSTSIZE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_NAND_0_MAX_AHB_BURSTSIZE_DMA_BURST_1WORDS                     _MK_ENUM_CONST(0)
#define AHB_GIZMO_NAND_0_MAX_AHB_BURSTSIZE_DMA_BURST_4WORDS                     _MK_ENUM_CONST(1)
#define AHB_GIZMO_NAND_0_MAX_AHB_BURSTSIZE_DMA_BURST_8WORDS                     _MK_ENUM_CONST(2)
#define AHB_GIZMO_NAND_0_MAX_AHB_BURSTSIZE_DMA_BURST_16WORDS                    _MK_ENUM_CONST(3)


// Reserved address 64 [0x40] 
// This is now SDMMC4 master gizmo configuration
// AHB Gizmo SDMMC4 Control Register

// Register AHB_GIZMO_SDMMC4_0  
#define AHB_GIZMO_SDMMC4_0                      _MK_ADDR_CONST(0x44)
#define AHB_GIZMO_SDMMC4_0_SECURE                       0x0
#define AHB_GIZMO_SDMMC4_0_WORD_COUNT                   0x1
#define AHB_GIZMO_SDMMC4_0_RESET_VAL                    _MK_MASK_CONST(0x20087)
#define AHB_GIZMO_SDMMC4_0_RESET_MASK                   _MK_MASK_CONST(0xff0700c7)
#define AHB_GIZMO_SDMMC4_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC4_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC4_0_READ_MASK                    _MK_MASK_CONST(0xff0700c7)
#define AHB_GIZMO_SDMMC4_0_WRITE_MASK                   _MK_MASK_CONST(0xff0700c7)
// AHB master request negate count. This is an 8-bit  counter use to indicate the minimum number of clk count between requests from  this AHB master.
#define AHB_GIZMO_SDMMC4_0_REQ_NEG_CNT_SHIFT                    _MK_SHIFT_CONST(24)
#define AHB_GIZMO_SDMMC4_0_REQ_NEG_CNT_FIELD                    (_MK_MASK_CONST(0xff) << AHB_GIZMO_SDMMC4_0_REQ_NEG_CNT_SHIFT)
#define AHB_GIZMO_SDMMC4_0_REQ_NEG_CNT_RANGE                    31:24
#define AHB_GIZMO_SDMMC4_0_REQ_NEG_CNT_WOFFSET                  0x0
#define AHB_GIZMO_SDMMC4_0_REQ_NEG_CNT_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC4_0_REQ_NEG_CNT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define AHB_GIZMO_SDMMC4_0_REQ_NEG_CNT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC4_0_REQ_NEG_CNT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//AHB master gizmo - Start AHB write request immediately.  1 = start the AHB write request immediately as soon as the device puts data in the AHB gizmos queue.  0 = start the AHB write request only when all the  write data has transferred from the device to the AHB gizmos queue.
#define AHB_GIZMO_SDMMC4_0_IMMEDIATE_SHIFT                      _MK_SHIFT_CONST(18)
#define AHB_GIZMO_SDMMC4_0_IMMEDIATE_FIELD                      (_MK_MASK_CONST(0x1) << AHB_GIZMO_SDMMC4_0_IMMEDIATE_SHIFT)
#define AHB_GIZMO_SDMMC4_0_IMMEDIATE_RANGE                      18:18
#define AHB_GIZMO_SDMMC4_0_IMMEDIATE_WOFFSET                    0x0
#define AHB_GIZMO_SDMMC4_0_IMMEDIATE_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC4_0_IMMEDIATE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC4_0_IMMEDIATE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC4_0_IMMEDIATE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC4_0_IMMEDIATE_DISABLE                    _MK_ENUM_CONST(0)
#define AHB_GIZMO_SDMMC4_0_IMMEDIATE_ENABLE                     _MK_ENUM_CONST(1)

//AHB master gizmo - Maximum allowed AHB burst size.  00 = single transfer.  01 = burst-of-4.  10 = burst-of-8.  11 = burst-of-16.
#define AHB_GIZMO_SDMMC4_0_MAX_AHB_BURSTSIZE_SHIFT                      _MK_SHIFT_CONST(16)
#define AHB_GIZMO_SDMMC4_0_MAX_AHB_BURSTSIZE_FIELD                      (_MK_MASK_CONST(0x3) << AHB_GIZMO_SDMMC4_0_MAX_AHB_BURSTSIZE_SHIFT)
#define AHB_GIZMO_SDMMC4_0_MAX_AHB_BURSTSIZE_RANGE                      17:16
#define AHB_GIZMO_SDMMC4_0_MAX_AHB_BURSTSIZE_WOFFSET                    0x0
#define AHB_GIZMO_SDMMC4_0_MAX_AHB_BURSTSIZE_DEFAULT                    _MK_MASK_CONST(0x2)
#define AHB_GIZMO_SDMMC4_0_MAX_AHB_BURSTSIZE_DEFAULT_MASK                       _MK_MASK_CONST(0x3)
#define AHB_GIZMO_SDMMC4_0_MAX_AHB_BURSTSIZE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC4_0_MAX_AHB_BURSTSIZE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC4_0_MAX_AHB_BURSTSIZE_DMA_BURST_1WORDS                   _MK_ENUM_CONST(0)
#define AHB_GIZMO_SDMMC4_0_MAX_AHB_BURSTSIZE_DMA_BURST_4WORDS                   _MK_ENUM_CONST(1)
#define AHB_GIZMO_SDMMC4_0_MAX_AHB_BURSTSIZE_DMA_BURST_8WORDS                   _MK_ENUM_CONST(2)
#define AHB_GIZMO_SDMMC4_0_MAX_AHB_BURSTSIZE_DMA_BURST_16WORDS                  _MK_ENUM_CONST(3)

//AHB slave gizmo - Dont split AHB write transaction.  1 = dont split AHB write transaction ever. 0 (and enable_split=1) = allow AHB write  transaction to be split.
#define AHB_GIZMO_SDMMC4_0_DONT_SPLIT_AHB_WR_SHIFT                      _MK_SHIFT_CONST(7)
#define AHB_GIZMO_SDMMC4_0_DONT_SPLIT_AHB_WR_FIELD                      (_MK_MASK_CONST(0x1) << AHB_GIZMO_SDMMC4_0_DONT_SPLIT_AHB_WR_SHIFT)
#define AHB_GIZMO_SDMMC4_0_DONT_SPLIT_AHB_WR_RANGE                      7:7
#define AHB_GIZMO_SDMMC4_0_DONT_SPLIT_AHB_WR_WOFFSET                    0x0
#define AHB_GIZMO_SDMMC4_0_DONT_SPLIT_AHB_WR_DEFAULT                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC4_0_DONT_SPLIT_AHB_WR_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC4_0_DONT_SPLIT_AHB_WR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC4_0_DONT_SPLIT_AHB_WR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC4_0_DONT_SPLIT_AHB_WR_ENABLE                     _MK_ENUM_CONST(0)
#define AHB_GIZMO_SDMMC4_0_DONT_SPLIT_AHB_WR_DISABLE                    _MK_ENUM_CONST(1)

//AHB slave gizmo - Accept AHB write request always.  1 = always accept AHB write request without checking whether there is room in the queue to store the write data. 0 = accept AHB write request only when theres  enough room in the queue to store all the write data.
#define AHB_GIZMO_SDMMC4_0_ACCEPT_AHB_WR_ALWAYS_SHIFT                   _MK_SHIFT_CONST(6)
#define AHB_GIZMO_SDMMC4_0_ACCEPT_AHB_WR_ALWAYS_FIELD                   (_MK_MASK_CONST(0x1) << AHB_GIZMO_SDMMC4_0_ACCEPT_AHB_WR_ALWAYS_SHIFT)
#define AHB_GIZMO_SDMMC4_0_ACCEPT_AHB_WR_ALWAYS_RANGE                   6:6
#define AHB_GIZMO_SDMMC4_0_ACCEPT_AHB_WR_ALWAYS_WOFFSET                 0x0
#define AHB_GIZMO_SDMMC4_0_ACCEPT_AHB_WR_ALWAYS_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC4_0_ACCEPT_AHB_WR_ALWAYS_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC4_0_ACCEPT_AHB_WR_ALWAYS_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC4_0_ACCEPT_AHB_WR_ALWAYS_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC4_0_ACCEPT_AHB_WR_ALWAYS_ACCEPT_ON_CHECK                 _MK_ENUM_CONST(0)
#define AHB_GIZMO_SDMMC4_0_ACCEPT_AHB_WR_ALWAYS_ACCEPT_ON_NOCHECK                       _MK_ENUM_CONST(1)

//AHB slave gizmo - Enable fast re-arbitration.  1 = allow AHB master re-arbitration as soon as the device returns one read data into the gizmos queue. 0 = allow AHB master re-arbitration only when the  device returns all read data into the gizmos queue.
#define AHB_GIZMO_SDMMC4_0_ENB_FAST_REARBITRATE_SHIFT                   _MK_SHIFT_CONST(2)
#define AHB_GIZMO_SDMMC4_0_ENB_FAST_REARBITRATE_FIELD                   (_MK_MASK_CONST(0x1) << AHB_GIZMO_SDMMC4_0_ENB_FAST_REARBITRATE_SHIFT)
#define AHB_GIZMO_SDMMC4_0_ENB_FAST_REARBITRATE_RANGE                   2:2
#define AHB_GIZMO_SDMMC4_0_ENB_FAST_REARBITRATE_WOFFSET                 0x0
#define AHB_GIZMO_SDMMC4_0_ENB_FAST_REARBITRATE_DEFAULT                 _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC4_0_ENB_FAST_REARBITRATE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC4_0_ENB_FAST_REARBITRATE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC4_0_ENB_FAST_REARBITRATE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC4_0_ENB_FAST_REARBITRATE_DISABLE                 _MK_ENUM_CONST(0)
#define AHB_GIZMO_SDMMC4_0_ENB_FAST_REARBITRATE_ENABLE                  _MK_ENUM_CONST(1)

//AHB slave gizmo - Force all AHB transaction to single data request transaction.  1 = force to single data transaction always. 0 = dont force to single data transaction.
#define AHB_GIZMO_SDMMC4_0_FORCE_TO_AHB_SINGLE_SHIFT                    _MK_SHIFT_CONST(1)
#define AHB_GIZMO_SDMMC4_0_FORCE_TO_AHB_SINGLE_FIELD                    (_MK_MASK_CONST(0x1) << AHB_GIZMO_SDMMC4_0_FORCE_TO_AHB_SINGLE_SHIFT)
#define AHB_GIZMO_SDMMC4_0_FORCE_TO_AHB_SINGLE_RANGE                    1:1
#define AHB_GIZMO_SDMMC4_0_FORCE_TO_AHB_SINGLE_WOFFSET                  0x0
#define AHB_GIZMO_SDMMC4_0_FORCE_TO_AHB_SINGLE_DEFAULT                  _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC4_0_FORCE_TO_AHB_SINGLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC4_0_FORCE_TO_AHB_SINGLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC4_0_FORCE_TO_AHB_SINGLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC4_0_FORCE_TO_AHB_SINGLE_NOT_SINGLE_DATA                  _MK_ENUM_CONST(0)
#define AHB_GIZMO_SDMMC4_0_FORCE_TO_AHB_SINGLE_SINGLE_DATA                      _MK_ENUM_CONST(1)

//AHB slave gizmo - Enable splitting AHB transactions.  1 = enable  0 = disable
#define AHB_GIZMO_SDMMC4_0_ENABLE_SPLIT_SHIFT                   _MK_SHIFT_CONST(0)
#define AHB_GIZMO_SDMMC4_0_ENABLE_SPLIT_FIELD                   (_MK_MASK_CONST(0x1) << AHB_GIZMO_SDMMC4_0_ENABLE_SPLIT_SHIFT)
#define AHB_GIZMO_SDMMC4_0_ENABLE_SPLIT_RANGE                   0:0
#define AHB_GIZMO_SDMMC4_0_ENABLE_SPLIT_WOFFSET                 0x0
#define AHB_GIZMO_SDMMC4_0_ENABLE_SPLIT_DEFAULT                 _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC4_0_ENABLE_SPLIT_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC4_0_ENABLE_SPLIT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC4_0_ENABLE_SPLIT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC4_0_ENABLE_SPLIT_DISABLE                 _MK_ENUM_CONST(0)
#define AHB_GIZMO_SDMMC4_0_ENABLE_SPLIT_ENABLE                  _MK_ENUM_CONST(1)

// AHB Gizmo XIO Control Register

// Register AHB_GIZMO_XIO_0  
#define AHB_GIZMO_XIO_0                 _MK_ADDR_CONST(0x48)
#define AHB_GIZMO_XIO_0_SECURE                  0x0
#define AHB_GIZMO_XIO_0_WORD_COUNT                      0x1
#define AHB_GIZMO_XIO_0_RESET_VAL                       _MK_MASK_CONST(0x40000)
#define AHB_GIZMO_XIO_0_RESET_MASK                      _MK_MASK_CONST(0xff0f0000)
#define AHB_GIZMO_XIO_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define AHB_GIZMO_XIO_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define AHB_GIZMO_XIO_0_READ_MASK                       _MK_MASK_CONST(0xff0f0000)
#define AHB_GIZMO_XIO_0_WRITE_MASK                      _MK_MASK_CONST(0xff0f0000)
// AHB master request negate count. This is an 8-bit  counter use to indicate the minimum number of clk count 
// between requests from  this AHB master.
#define AHB_GIZMO_XIO_0_REQ_NEG_CNT_SHIFT                       _MK_SHIFT_CONST(24)
#define AHB_GIZMO_XIO_0_REQ_NEG_CNT_FIELD                       (_MK_MASK_CONST(0xff) << AHB_GIZMO_XIO_0_REQ_NEG_CNT_SHIFT)
#define AHB_GIZMO_XIO_0_REQ_NEG_CNT_RANGE                       31:24
#define AHB_GIZMO_XIO_0_REQ_NEG_CNT_WOFFSET                     0x0
#define AHB_GIZMO_XIO_0_REQ_NEG_CNT_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_GIZMO_XIO_0_REQ_NEG_CNT_DEFAULT_MASK                        _MK_MASK_CONST(0xff)
#define AHB_GIZMO_XIO_0_REQ_NEG_CNT_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_GIZMO_XIO_0_REQ_NEG_CNT_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// AHB master gizmo - Pack all AHB read data.  1 = wait for all requested read data to be 
// in the AHB gizmos queue before returning the data back to the IP.  0 = transfer each read 
// data from the AHB to the IP  immediately.
#define AHB_GIZMO_XIO_0_RD_DATA_SHIFT                   _MK_SHIFT_CONST(19)
#define AHB_GIZMO_XIO_0_RD_DATA_FIELD                   (_MK_MASK_CONST(0x1) << AHB_GIZMO_XIO_0_RD_DATA_SHIFT)
#define AHB_GIZMO_XIO_0_RD_DATA_RANGE                   19:19
#define AHB_GIZMO_XIO_0_RD_DATA_WOFFSET                 0x0
#define AHB_GIZMO_XIO_0_RD_DATA_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_XIO_0_RD_DATA_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_XIO_0_RD_DATA_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_XIO_0_RD_DATA_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_XIO_0_RD_DATA_NO_WAIT                 _MK_ENUM_CONST(0)
#define AHB_GIZMO_XIO_0_RD_DATA_WAIT                    _MK_ENUM_CONST(1)

// AHB master gizmo (AHB-DMA) - Start AHB write request immediately.  1 = start the AHB 
// write request immediately as soon as the device  has put one write data in the AHB 
// gizmos queue.  0 = start the AHB write request only when all the  write data has 
// transferred from the device to the AHB gizmos queue.
#define AHB_GIZMO_XIO_0_IMMEDIATE_SHIFT                 _MK_SHIFT_CONST(18)
#define AHB_GIZMO_XIO_0_IMMEDIATE_FIELD                 (_MK_MASK_CONST(0x1) << AHB_GIZMO_XIO_0_IMMEDIATE_SHIFT)
#define AHB_GIZMO_XIO_0_IMMEDIATE_RANGE                 18:18
#define AHB_GIZMO_XIO_0_IMMEDIATE_WOFFSET                       0x0
#define AHB_GIZMO_XIO_0_IMMEDIATE_DEFAULT                       _MK_MASK_CONST(0x1)
#define AHB_GIZMO_XIO_0_IMMEDIATE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define AHB_GIZMO_XIO_0_IMMEDIATE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_XIO_0_IMMEDIATE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_XIO_0_IMMEDIATE_DISABLE                       _MK_ENUM_CONST(0)
#define AHB_GIZMO_XIO_0_IMMEDIATE_ENABLE                        _MK_ENUM_CONST(1)

// AHB master gizmo - Maximum allowed 
// AHB burst size.  
// 00 = single transfer.  
// 01 = burst-of-4.  
// 10 = burst-of-8.  
// 11 = burst-of-16.
#define AHB_GIZMO_XIO_0_MAX_AHB_BURSTSIZE_SHIFT                 _MK_SHIFT_CONST(16)
#define AHB_GIZMO_XIO_0_MAX_AHB_BURSTSIZE_FIELD                 (_MK_MASK_CONST(0x3) << AHB_GIZMO_XIO_0_MAX_AHB_BURSTSIZE_SHIFT)
#define AHB_GIZMO_XIO_0_MAX_AHB_BURSTSIZE_RANGE                 17:16
#define AHB_GIZMO_XIO_0_MAX_AHB_BURSTSIZE_WOFFSET                       0x0
#define AHB_GIZMO_XIO_0_MAX_AHB_BURSTSIZE_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_XIO_0_MAX_AHB_BURSTSIZE_DEFAULT_MASK                  _MK_MASK_CONST(0x3)
#define AHB_GIZMO_XIO_0_MAX_AHB_BURSTSIZE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_XIO_0_MAX_AHB_BURSTSIZE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_XIO_0_MAX_AHB_BURSTSIZE_DMA_BURST_1WORDS                      _MK_ENUM_CONST(0)
#define AHB_GIZMO_XIO_0_MAX_AHB_BURSTSIZE_DMA_BURST_4WORDS                      _MK_ENUM_CONST(1)
#define AHB_GIZMO_XIO_0_MAX_AHB_BURSTSIZE_DMA_BURST_8WORDS                      _MK_ENUM_CONST(2)
#define AHB_GIZMO_XIO_0_MAX_AHB_BURSTSIZE_DMA_BURST_16WORDS                     _MK_ENUM_CONST(3)


// Reserved address 76 [0x4c] 

// Reserved address 80 [0x50] 

// Reserved address 84 [0x54] 

// Reserved address 88 [0x58] 

// Reserved address 92 [0x5c] 
// This is now VDE's BSEV master gizmo configuration
// AHB Gizmo BSE Control Register

// Register AHB_GIZMO_BSEV_0  
#define AHB_GIZMO_BSEV_0                        _MK_ADDR_CONST(0x60)
#define AHB_GIZMO_BSEV_0_SECURE                         0x0
#define AHB_GIZMO_BSEV_0_WORD_COUNT                     0x1
#define AHB_GIZMO_BSEV_0_RESET_VAL                      _MK_MASK_CONST(0x20000)
#define AHB_GIZMO_BSEV_0_RESET_MASK                     _MK_MASK_CONST(0xff0f0000)
#define AHB_GIZMO_BSEV_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define AHB_GIZMO_BSEV_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_BSEV_0_READ_MASK                      _MK_MASK_CONST(0xff0f0000)
#define AHB_GIZMO_BSEV_0_WRITE_MASK                     _MK_MASK_CONST(0xff0f0000)
// AHB master request negate count. This is an 8-bit  counter use to indicate the minimum number of clk count 
// between requests from  this AHB master.
#define AHB_GIZMO_BSEV_0_REQ_NEG_CNT_SHIFT                      _MK_SHIFT_CONST(24)
#define AHB_GIZMO_BSEV_0_REQ_NEG_CNT_FIELD                      (_MK_MASK_CONST(0xff) << AHB_GIZMO_BSEV_0_REQ_NEG_CNT_SHIFT)
#define AHB_GIZMO_BSEV_0_REQ_NEG_CNT_RANGE                      31:24
#define AHB_GIZMO_BSEV_0_REQ_NEG_CNT_WOFFSET                    0x0
#define AHB_GIZMO_BSEV_0_REQ_NEG_CNT_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_BSEV_0_REQ_NEG_CNT_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define AHB_GIZMO_BSEV_0_REQ_NEG_CNT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_BSEV_0_REQ_NEG_CNT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// AHB master gizmo - Pack all AHB read data.  1 = wait for all requested read data to be 
// in the AHB gizmos queue before returning the data back to the IP.  0 = transfer each read 
// data from the AHB to the IP  immediately.
#define AHB_GIZMO_BSEV_0_RD_DATA_SHIFT                  _MK_SHIFT_CONST(19)
#define AHB_GIZMO_BSEV_0_RD_DATA_FIELD                  (_MK_MASK_CONST(0x1) << AHB_GIZMO_BSEV_0_RD_DATA_SHIFT)
#define AHB_GIZMO_BSEV_0_RD_DATA_RANGE                  19:19
#define AHB_GIZMO_BSEV_0_RD_DATA_WOFFSET                        0x0
#define AHB_GIZMO_BSEV_0_RD_DATA_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_BSEV_0_RD_DATA_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define AHB_GIZMO_BSEV_0_RD_DATA_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_GIZMO_BSEV_0_RD_DATA_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_BSEV_0_RD_DATA_NO_WAIT                        _MK_ENUM_CONST(0)
#define AHB_GIZMO_BSEV_0_RD_DATA_WAIT                   _MK_ENUM_CONST(1)

// AHB master gizmo (AHB-DMA) - Start AHB write request immediately.  1 = start the AHB 
// write request immediately as soon as the device  has put one write data in the AHB 
// gizmos queue.  0 = start the AHB write request only when all the  write data has 
// transferred from the device to the AHB gizmos queue. !!THIS SHOULD NEVER BE SET TO 
// ENABLE!! (BSEV requires this bit to be 0) 
#define AHB_GIZMO_BSEV_0_IMMEDIATE_SHIFT                        _MK_SHIFT_CONST(18)
#define AHB_GIZMO_BSEV_0_IMMEDIATE_FIELD                        (_MK_MASK_CONST(0x1) << AHB_GIZMO_BSEV_0_IMMEDIATE_SHIFT)
#define AHB_GIZMO_BSEV_0_IMMEDIATE_RANGE                        18:18
#define AHB_GIZMO_BSEV_0_IMMEDIATE_WOFFSET                      0x0
#define AHB_GIZMO_BSEV_0_IMMEDIATE_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_BSEV_0_IMMEDIATE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define AHB_GIZMO_BSEV_0_IMMEDIATE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_BSEV_0_IMMEDIATE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_BSEV_0_IMMEDIATE_DISABLE                      _MK_ENUM_CONST(0)
#define AHB_GIZMO_BSEV_0_IMMEDIATE_ENABLE                       _MK_ENUM_CONST(1)

// AHB master gizmo - Maximum 
// allowed AHB burst size.  
// 00 = single transfer.  
// 01 = burst-of-4.  
// 10 = burst-of-8.
// 11 = burst-of-16.
#define AHB_GIZMO_BSEV_0_MAX_AHB_BURSTSIZE_SHIFT                        _MK_SHIFT_CONST(16)
#define AHB_GIZMO_BSEV_0_MAX_AHB_BURSTSIZE_FIELD                        (_MK_MASK_CONST(0x3) << AHB_GIZMO_BSEV_0_MAX_AHB_BURSTSIZE_SHIFT)
#define AHB_GIZMO_BSEV_0_MAX_AHB_BURSTSIZE_RANGE                        17:16
#define AHB_GIZMO_BSEV_0_MAX_AHB_BURSTSIZE_WOFFSET                      0x0
#define AHB_GIZMO_BSEV_0_MAX_AHB_BURSTSIZE_DEFAULT                      _MK_MASK_CONST(0x2)
#define AHB_GIZMO_BSEV_0_MAX_AHB_BURSTSIZE_DEFAULT_MASK                 _MK_MASK_CONST(0x3)
#define AHB_GIZMO_BSEV_0_MAX_AHB_BURSTSIZE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_BSEV_0_MAX_AHB_BURSTSIZE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_BSEV_0_MAX_AHB_BURSTSIZE_DMA_BURST_1WORDS                     _MK_ENUM_CONST(0)
#define AHB_GIZMO_BSEV_0_MAX_AHB_BURSTSIZE_DMA_BURST_4WORDS                     _MK_ENUM_CONST(1)
#define AHB_GIZMO_BSEV_0_MAX_AHB_BURSTSIZE_DMA_BURST_8WORDS                     _MK_ENUM_CONST(2)
#define AHB_GIZMO_BSEV_0_MAX_AHB_BURSTSIZE_DMA_BURST_16WORDS                    _MK_ENUM_CONST(3)


// Reserved address 100 [0x64] 

// Reserved address 104 [0x68] 

// Reserved address 108 [0x6c] 
// This is now VDE's BSEA master gizmo configuration
// AHB Gizmo SCE Control Register

// Register AHB_GIZMO_BSEA_0  
#define AHB_GIZMO_BSEA_0                        _MK_ADDR_CONST(0x70)
#define AHB_GIZMO_BSEA_0_SECURE                         0x0
#define AHB_GIZMO_BSEA_0_WORD_COUNT                     0x1
#define AHB_GIZMO_BSEA_0_RESET_VAL                      _MK_MASK_CONST(0x20000)
#define AHB_GIZMO_BSEA_0_RESET_MASK                     _MK_MASK_CONST(0xff070000)
#define AHB_GIZMO_BSEA_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define AHB_GIZMO_BSEA_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_BSEA_0_READ_MASK                      _MK_MASK_CONST(0xff070000)
#define AHB_GIZMO_BSEA_0_WRITE_MASK                     _MK_MASK_CONST(0xff070000)
// AHB master request negate count. This is an 8-bit  counter use to indicate the minimum number of clk count 
// between requests from  this AHB master.
#define AHB_GIZMO_BSEA_0_REQ_NEG_CNT_SHIFT                      _MK_SHIFT_CONST(24)
#define AHB_GIZMO_BSEA_0_REQ_NEG_CNT_FIELD                      (_MK_MASK_CONST(0xff) << AHB_GIZMO_BSEA_0_REQ_NEG_CNT_SHIFT)
#define AHB_GIZMO_BSEA_0_REQ_NEG_CNT_RANGE                      31:24
#define AHB_GIZMO_BSEA_0_REQ_NEG_CNT_WOFFSET                    0x0
#define AHB_GIZMO_BSEA_0_REQ_NEG_CNT_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_BSEA_0_REQ_NEG_CNT_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define AHB_GIZMO_BSEA_0_REQ_NEG_CNT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_BSEA_0_REQ_NEG_CNT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// AHB master gizmo - Start AHB write request immediately.  1 = start the AHB 
// write request immediately as soon as the device puts data in the AHB gizmos 
// queue.  0 = start the AHB write request only when all the  write data has 
// transferred from the device to the AHB gizmos queue.  !!THIS SHOULD NEVER BE 
// SET TO ENABLE!! (BSEV requires this bit to be 0) 
#define AHB_GIZMO_BSEA_0_IMMEDIATE_SHIFT                        _MK_SHIFT_CONST(18)
#define AHB_GIZMO_BSEA_0_IMMEDIATE_FIELD                        (_MK_MASK_CONST(0x1) << AHB_GIZMO_BSEA_0_IMMEDIATE_SHIFT)
#define AHB_GIZMO_BSEA_0_IMMEDIATE_RANGE                        18:18
#define AHB_GIZMO_BSEA_0_IMMEDIATE_WOFFSET                      0x0
#define AHB_GIZMO_BSEA_0_IMMEDIATE_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_BSEA_0_IMMEDIATE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define AHB_GIZMO_BSEA_0_IMMEDIATE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_BSEA_0_IMMEDIATE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_BSEA_0_IMMEDIATE_DISABLE                      _MK_ENUM_CONST(0)
#define AHB_GIZMO_BSEA_0_IMMEDIATE_ENABLE                       _MK_ENUM_CONST(1)

// AHB master gizmo - Maximum 
// allowed AHB burst size.  
// 00 = single transfer.  
// 01 = burst-of-4.  
// 10 = burst-of-8.  
// 11 = burst-of-16.
#define AHB_GIZMO_BSEA_0_MAX_AHB_BURSTSIZE_SHIFT                        _MK_SHIFT_CONST(16)
#define AHB_GIZMO_BSEA_0_MAX_AHB_BURSTSIZE_FIELD                        (_MK_MASK_CONST(0x3) << AHB_GIZMO_BSEA_0_MAX_AHB_BURSTSIZE_SHIFT)
#define AHB_GIZMO_BSEA_0_MAX_AHB_BURSTSIZE_RANGE                        17:16
#define AHB_GIZMO_BSEA_0_MAX_AHB_BURSTSIZE_WOFFSET                      0x0
#define AHB_GIZMO_BSEA_0_MAX_AHB_BURSTSIZE_DEFAULT                      _MK_MASK_CONST(0x2)
#define AHB_GIZMO_BSEA_0_MAX_AHB_BURSTSIZE_DEFAULT_MASK                 _MK_MASK_CONST(0x3)
#define AHB_GIZMO_BSEA_0_MAX_AHB_BURSTSIZE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_BSEA_0_MAX_AHB_BURSTSIZE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_BSEA_0_MAX_AHB_BURSTSIZE_DMA_BURST_1WORDS                     _MK_ENUM_CONST(0)
#define AHB_GIZMO_BSEA_0_MAX_AHB_BURSTSIZE_DMA_BURST_4WORDS                     _MK_ENUM_CONST(1)
#define AHB_GIZMO_BSEA_0_MAX_AHB_BURSTSIZE_DMA_BURST_8WORDS                     _MK_ENUM_CONST(2)
#define AHB_GIZMO_BSEA_0_MAX_AHB_BURSTSIZE_DMA_BURST_16WORDS                    _MK_ENUM_CONST(3)

// AHB Gizmo AHB NOR flash Control Register

// Register AHB_GIZMO_NOR_0  
#define AHB_GIZMO_NOR_0                 _MK_ADDR_CONST(0x74)
#define AHB_GIZMO_NOR_0_SECURE                  0x0
#define AHB_GIZMO_NOR_0_WORD_COUNT                      0x1
#define AHB_GIZMO_NOR_0_RESET_VAL                       _MK_MASK_CONST(0x85)
#define AHB_GIZMO_NOR_0_RESET_MASK                      _MK_MASK_CONST(0xc7)
#define AHB_GIZMO_NOR_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define AHB_GIZMO_NOR_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define AHB_GIZMO_NOR_0_READ_MASK                       _MK_MASK_CONST(0xc7)
#define AHB_GIZMO_NOR_0_WRITE_MASK                      _MK_MASK_CONST(0xc7)
// AHB slave gizmo - Dont split AHB write transaction.  1 = dont split AHB 
// write transaction ever. 0 (and enable_split=1) = allow AHB write  
// transaction to be split.
#define AHB_GIZMO_NOR_0_DONT_SPLIT_AHB_WR_SHIFT                 _MK_SHIFT_CONST(7)
#define AHB_GIZMO_NOR_0_DONT_SPLIT_AHB_WR_FIELD                 (_MK_MASK_CONST(0x1) << AHB_GIZMO_NOR_0_DONT_SPLIT_AHB_WR_SHIFT)
#define AHB_GIZMO_NOR_0_DONT_SPLIT_AHB_WR_RANGE                 7:7
#define AHB_GIZMO_NOR_0_DONT_SPLIT_AHB_WR_WOFFSET                       0x0
#define AHB_GIZMO_NOR_0_DONT_SPLIT_AHB_WR_DEFAULT                       _MK_MASK_CONST(0x1)
#define AHB_GIZMO_NOR_0_DONT_SPLIT_AHB_WR_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define AHB_GIZMO_NOR_0_DONT_SPLIT_AHB_WR_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_NOR_0_DONT_SPLIT_AHB_WR_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_NOR_0_DONT_SPLIT_AHB_WR_ENABLE                        _MK_ENUM_CONST(0)
#define AHB_GIZMO_NOR_0_DONT_SPLIT_AHB_WR_DISABLE                       _MK_ENUM_CONST(1)

// AHB slave gizmo - Accept AHB write request always.  
// 1 = always accept AHB write request without checking whether 
// there is room in the queue to store the write data. 0 = accept 
// AHB write request only when theres  enough room in the queue 
// to store all the write data.
#define AHB_GIZMO_NOR_0_ACCEPT_AHB_WR_ALWAYS_SHIFT                      _MK_SHIFT_CONST(6)
#define AHB_GIZMO_NOR_0_ACCEPT_AHB_WR_ALWAYS_FIELD                      (_MK_MASK_CONST(0x1) << AHB_GIZMO_NOR_0_ACCEPT_AHB_WR_ALWAYS_SHIFT)
#define AHB_GIZMO_NOR_0_ACCEPT_AHB_WR_ALWAYS_RANGE                      6:6
#define AHB_GIZMO_NOR_0_ACCEPT_AHB_WR_ALWAYS_WOFFSET                    0x0
#define AHB_GIZMO_NOR_0_ACCEPT_AHB_WR_ALWAYS_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_NOR_0_ACCEPT_AHB_WR_ALWAYS_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define AHB_GIZMO_NOR_0_ACCEPT_AHB_WR_ALWAYS_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_NOR_0_ACCEPT_AHB_WR_ALWAYS_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_NOR_0_ACCEPT_AHB_WR_ALWAYS_ACCEPT_ON_CHECK                    _MK_ENUM_CONST(0)
#define AHB_GIZMO_NOR_0_ACCEPT_AHB_WR_ALWAYS_ACCEPT_ON_NOCHECK                  _MK_ENUM_CONST(1)

// AHB slave gizmo - Enable fast re-arbitration.  1 = allow AHB master 
// re-arbitration as soon as the device returns one read data into the gizmos 
// queue.  0 = allow AHB master re-arbitration only when the  device returns all 
// read data into the gizmos queue.
#define AHB_GIZMO_NOR_0_ENB_FAST_REARBITRATE_SHIFT                      _MK_SHIFT_CONST(2)
#define AHB_GIZMO_NOR_0_ENB_FAST_REARBITRATE_FIELD                      (_MK_MASK_CONST(0x1) << AHB_GIZMO_NOR_0_ENB_FAST_REARBITRATE_SHIFT)
#define AHB_GIZMO_NOR_0_ENB_FAST_REARBITRATE_RANGE                      2:2
#define AHB_GIZMO_NOR_0_ENB_FAST_REARBITRATE_WOFFSET                    0x0
#define AHB_GIZMO_NOR_0_ENB_FAST_REARBITRATE_DEFAULT                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_NOR_0_ENB_FAST_REARBITRATE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define AHB_GIZMO_NOR_0_ENB_FAST_REARBITRATE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_NOR_0_ENB_FAST_REARBITRATE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_NOR_0_ENB_FAST_REARBITRATE_DISABLE                    _MK_ENUM_CONST(0)
#define AHB_GIZMO_NOR_0_ENB_FAST_REARBITRATE_ENABLE                     _MK_ENUM_CONST(1)

// AHB slave gizmo - Force all AHB transaction to single data request 
// transaction.  1 = force to single data transaction always.  
// 0 = dont force to single data  transaction.
#define AHB_GIZMO_NOR_0_FORCE_TO_AHB_SINGLE_SHIFT                       _MK_SHIFT_CONST(1)
#define AHB_GIZMO_NOR_0_FORCE_TO_AHB_SINGLE_FIELD                       (_MK_MASK_CONST(0x1) << AHB_GIZMO_NOR_0_FORCE_TO_AHB_SINGLE_SHIFT)
#define AHB_GIZMO_NOR_0_FORCE_TO_AHB_SINGLE_RANGE                       1:1
#define AHB_GIZMO_NOR_0_FORCE_TO_AHB_SINGLE_WOFFSET                     0x0
#define AHB_GIZMO_NOR_0_FORCE_TO_AHB_SINGLE_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_GIZMO_NOR_0_FORCE_TO_AHB_SINGLE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define AHB_GIZMO_NOR_0_FORCE_TO_AHB_SINGLE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_GIZMO_NOR_0_FORCE_TO_AHB_SINGLE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define AHB_GIZMO_NOR_0_FORCE_TO_AHB_SINGLE_NOT_SINGLE_DATA                     _MK_ENUM_CONST(0)
#define AHB_GIZMO_NOR_0_FORCE_TO_AHB_SINGLE_SINGLE_DATA                 _MK_ENUM_CONST(1)

// AHB slave gizmo - Enable splitting AHB transactions.  1 = enable 0 = disable
#define AHB_GIZMO_NOR_0_ENABLE_SPLIT_SHIFT                      _MK_SHIFT_CONST(0)
#define AHB_GIZMO_NOR_0_ENABLE_SPLIT_FIELD                      (_MK_MASK_CONST(0x1) << AHB_GIZMO_NOR_0_ENABLE_SPLIT_SHIFT)
#define AHB_GIZMO_NOR_0_ENABLE_SPLIT_RANGE                      0:0
#define AHB_GIZMO_NOR_0_ENABLE_SPLIT_WOFFSET                    0x0
#define AHB_GIZMO_NOR_0_ENABLE_SPLIT_DEFAULT                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_NOR_0_ENABLE_SPLIT_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define AHB_GIZMO_NOR_0_ENABLE_SPLIT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_NOR_0_ENABLE_SPLIT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_NOR_0_ENABLE_SPLIT_DISABLE                    _MK_ENUM_CONST(0)
#define AHB_GIZMO_NOR_0_ENABLE_SPLIT_ENABLE                     _MK_ENUM_CONST(1)

// This is now USB2 master gizmo configuration
// AHB Gizmo USB2 Control Register

// Register AHB_GIZMO_USB2_0  
#define AHB_GIZMO_USB2_0                        _MK_ADDR_CONST(0x78)
#define AHB_GIZMO_USB2_0_SECURE                         0x0
#define AHB_GIZMO_USB2_0_WORD_COUNT                     0x1
#define AHB_GIZMO_USB2_0_RESET_VAL                      _MK_MASK_CONST(0x20087)
#define AHB_GIZMO_USB2_0_RESET_MASK                     _MK_MASK_CONST(0xff0700c7)
#define AHB_GIZMO_USB2_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB2_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB2_0_READ_MASK                      _MK_MASK_CONST(0xff0700c7)
#define AHB_GIZMO_USB2_0_WRITE_MASK                     _MK_MASK_CONST(0xff0700c7)
// AHB master request negate count. This is an 8-bit  counter use to indicate the minimum number of clk count between requests from  this AHB master.
#define AHB_GIZMO_USB2_0_REQ_NEG_CNT_SHIFT                      _MK_SHIFT_CONST(24)
#define AHB_GIZMO_USB2_0_REQ_NEG_CNT_FIELD                      (_MK_MASK_CONST(0xff) << AHB_GIZMO_USB2_0_REQ_NEG_CNT_SHIFT)
#define AHB_GIZMO_USB2_0_REQ_NEG_CNT_RANGE                      31:24
#define AHB_GIZMO_USB2_0_REQ_NEG_CNT_WOFFSET                    0x0
#define AHB_GIZMO_USB2_0_REQ_NEG_CNT_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB2_0_REQ_NEG_CNT_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define AHB_GIZMO_USB2_0_REQ_NEG_CNT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB2_0_REQ_NEG_CNT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

//AHB master gizmo - Start AHB write request immediately.  1 = start the AHB write request immediately as soon as the device puts data in the AHB gizmos queue.  0 = start the AHB write request only when all the  write data has transferred from the device to the AHB gizmos queue.
#define AHB_GIZMO_USB2_0_IMMEDIATE_SHIFT                        _MK_SHIFT_CONST(18)
#define AHB_GIZMO_USB2_0_IMMEDIATE_FIELD                        (_MK_MASK_CONST(0x1) << AHB_GIZMO_USB2_0_IMMEDIATE_SHIFT)
#define AHB_GIZMO_USB2_0_IMMEDIATE_RANGE                        18:18
#define AHB_GIZMO_USB2_0_IMMEDIATE_WOFFSET                      0x0
#define AHB_GIZMO_USB2_0_IMMEDIATE_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB2_0_IMMEDIATE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB2_0_IMMEDIATE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB2_0_IMMEDIATE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB2_0_IMMEDIATE_DISABLE                      _MK_ENUM_CONST(0)
#define AHB_GIZMO_USB2_0_IMMEDIATE_ENABLE                       _MK_ENUM_CONST(1)

//AHB master gizmo - Maximum allowed AHB burst size.  00 = single transfer.  01 = burst-of-4.  10 = burst-of-8.  11 = burst-of-16.
#define AHB_GIZMO_USB2_0_MAX_AHB_BURSTSIZE_SHIFT                        _MK_SHIFT_CONST(16)
#define AHB_GIZMO_USB2_0_MAX_AHB_BURSTSIZE_FIELD                        (_MK_MASK_CONST(0x3) << AHB_GIZMO_USB2_0_MAX_AHB_BURSTSIZE_SHIFT)
#define AHB_GIZMO_USB2_0_MAX_AHB_BURSTSIZE_RANGE                        17:16
#define AHB_GIZMO_USB2_0_MAX_AHB_BURSTSIZE_WOFFSET                      0x0
#define AHB_GIZMO_USB2_0_MAX_AHB_BURSTSIZE_DEFAULT                      _MK_MASK_CONST(0x2)
#define AHB_GIZMO_USB2_0_MAX_AHB_BURSTSIZE_DEFAULT_MASK                 _MK_MASK_CONST(0x3)
#define AHB_GIZMO_USB2_0_MAX_AHB_BURSTSIZE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB2_0_MAX_AHB_BURSTSIZE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB2_0_MAX_AHB_BURSTSIZE_DMA_BURST_1WORDS                     _MK_ENUM_CONST(0)
#define AHB_GIZMO_USB2_0_MAX_AHB_BURSTSIZE_DMA_BURST_4WORDS                     _MK_ENUM_CONST(1)
#define AHB_GIZMO_USB2_0_MAX_AHB_BURSTSIZE_DMA_BURST_8WORDS                     _MK_ENUM_CONST(2)
#define AHB_GIZMO_USB2_0_MAX_AHB_BURSTSIZE_DMA_BURST_16WORDS                    _MK_ENUM_CONST(3)

//AHB slave gizmo - Dont split AHB write transaction.  1 = dont split AHB write transaction ever. 0 (and enable_split=1) = allow AHB write  transaction to be split.
#define AHB_GIZMO_USB2_0_DONT_SPLIT_AHB_WR_SHIFT                        _MK_SHIFT_CONST(7)
#define AHB_GIZMO_USB2_0_DONT_SPLIT_AHB_WR_FIELD                        (_MK_MASK_CONST(0x1) << AHB_GIZMO_USB2_0_DONT_SPLIT_AHB_WR_SHIFT)
#define AHB_GIZMO_USB2_0_DONT_SPLIT_AHB_WR_RANGE                        7:7
#define AHB_GIZMO_USB2_0_DONT_SPLIT_AHB_WR_WOFFSET                      0x0
#define AHB_GIZMO_USB2_0_DONT_SPLIT_AHB_WR_DEFAULT                      _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB2_0_DONT_SPLIT_AHB_WR_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB2_0_DONT_SPLIT_AHB_WR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB2_0_DONT_SPLIT_AHB_WR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB2_0_DONT_SPLIT_AHB_WR_ENABLE                       _MK_ENUM_CONST(0)
#define AHB_GIZMO_USB2_0_DONT_SPLIT_AHB_WR_DISABLE                      _MK_ENUM_CONST(1)

//AHB slave gizmo - Accept AHB write request always.  1 = always accept AHB write request without checking whether there is room in the queue to store the write data. 0 = accept AHB write request only when theres  enough room in the queue to store all the write data.
#define AHB_GIZMO_USB2_0_ACCEPT_AHB_WR_ALWAYS_SHIFT                     _MK_SHIFT_CONST(6)
#define AHB_GIZMO_USB2_0_ACCEPT_AHB_WR_ALWAYS_FIELD                     (_MK_MASK_CONST(0x1) << AHB_GIZMO_USB2_0_ACCEPT_AHB_WR_ALWAYS_SHIFT)
#define AHB_GIZMO_USB2_0_ACCEPT_AHB_WR_ALWAYS_RANGE                     6:6
#define AHB_GIZMO_USB2_0_ACCEPT_AHB_WR_ALWAYS_WOFFSET                   0x0
#define AHB_GIZMO_USB2_0_ACCEPT_AHB_WR_ALWAYS_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB2_0_ACCEPT_AHB_WR_ALWAYS_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB2_0_ACCEPT_AHB_WR_ALWAYS_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB2_0_ACCEPT_AHB_WR_ALWAYS_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB2_0_ACCEPT_AHB_WR_ALWAYS_ACCEPT_ON_CHECK                   _MK_ENUM_CONST(0)
#define AHB_GIZMO_USB2_0_ACCEPT_AHB_WR_ALWAYS_ACCEPT_ON_NOCHECK                 _MK_ENUM_CONST(1)

//AHB slave gizmo - Enable fast re-arbitration.  1 = allow AHB master re-arbitration as soon as the device returns one read data into the gizmos queue. 0 = allow AHB master re-arbitration only when the  device returns all read data into the gizmos queue.
#define AHB_GIZMO_USB2_0_ENB_FAST_REARBITRATE_SHIFT                     _MK_SHIFT_CONST(2)
#define AHB_GIZMO_USB2_0_ENB_FAST_REARBITRATE_FIELD                     (_MK_MASK_CONST(0x1) << AHB_GIZMO_USB2_0_ENB_FAST_REARBITRATE_SHIFT)
#define AHB_GIZMO_USB2_0_ENB_FAST_REARBITRATE_RANGE                     2:2
#define AHB_GIZMO_USB2_0_ENB_FAST_REARBITRATE_WOFFSET                   0x0
#define AHB_GIZMO_USB2_0_ENB_FAST_REARBITRATE_DEFAULT                   _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB2_0_ENB_FAST_REARBITRATE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB2_0_ENB_FAST_REARBITRATE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB2_0_ENB_FAST_REARBITRATE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB2_0_ENB_FAST_REARBITRATE_DISABLE                   _MK_ENUM_CONST(0)
#define AHB_GIZMO_USB2_0_ENB_FAST_REARBITRATE_ENABLE                    _MK_ENUM_CONST(1)

//AHB slave gizmo - Force all AHB transaction to single data request transaction.  1 = force to single data transaction always. 0 = dont force to single data transaction.
#define AHB_GIZMO_USB2_0_FORCE_TO_AHB_SINGLE_SHIFT                      _MK_SHIFT_CONST(1)
#define AHB_GIZMO_USB2_0_FORCE_TO_AHB_SINGLE_FIELD                      (_MK_MASK_CONST(0x1) << AHB_GIZMO_USB2_0_FORCE_TO_AHB_SINGLE_SHIFT)
#define AHB_GIZMO_USB2_0_FORCE_TO_AHB_SINGLE_RANGE                      1:1
#define AHB_GIZMO_USB2_0_FORCE_TO_AHB_SINGLE_WOFFSET                    0x0
#define AHB_GIZMO_USB2_0_FORCE_TO_AHB_SINGLE_DEFAULT                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB2_0_FORCE_TO_AHB_SINGLE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB2_0_FORCE_TO_AHB_SINGLE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB2_0_FORCE_TO_AHB_SINGLE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB2_0_FORCE_TO_AHB_SINGLE_NOT_SINGLE_DATA                    _MK_ENUM_CONST(0)
#define AHB_GIZMO_USB2_0_FORCE_TO_AHB_SINGLE_SINGLE_DATA                        _MK_ENUM_CONST(1)

//AHB slave gizmo - Enable splitting AHB transactions.  1 = enable  0 = disable
#define AHB_GIZMO_USB2_0_ENABLE_SPLIT_SHIFT                     _MK_SHIFT_CONST(0)
#define AHB_GIZMO_USB2_0_ENABLE_SPLIT_FIELD                     (_MK_MASK_CONST(0x1) << AHB_GIZMO_USB2_0_ENABLE_SPLIT_SHIFT)
#define AHB_GIZMO_USB2_0_ENABLE_SPLIT_RANGE                     0:0
#define AHB_GIZMO_USB2_0_ENABLE_SPLIT_WOFFSET                   0x0
#define AHB_GIZMO_USB2_0_ENABLE_SPLIT_DEFAULT                   _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB2_0_ENABLE_SPLIT_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB2_0_ENABLE_SPLIT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB2_0_ENABLE_SPLIT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB2_0_ENABLE_SPLIT_DISABLE                   _MK_ENUM_CONST(0)
#define AHB_GIZMO_USB2_0_ENABLE_SPLIT_ENABLE                    _MK_ENUM_CONST(1)

// This is now USB3 master gizmo configuration
// AHB Gizmo USB3 Control Register

// Register AHB_GIZMO_USB3_0  
#define AHB_GIZMO_USB3_0                        _MK_ADDR_CONST(0x7c)
#define AHB_GIZMO_USB3_0_SECURE                         0x0
#define AHB_GIZMO_USB3_0_WORD_COUNT                     0x1
#define AHB_GIZMO_USB3_0_RESET_VAL                      _MK_MASK_CONST(0x20087)
#define AHB_GIZMO_USB3_0_RESET_MASK                     _MK_MASK_CONST(0xff0700c7)
#define AHB_GIZMO_USB3_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB3_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB3_0_READ_MASK                      _MK_MASK_CONST(0xff0700c7)
#define AHB_GIZMO_USB3_0_WRITE_MASK                     _MK_MASK_CONST(0xff0700c7)
// AHB master request negate count. This is an 8-bit  counter use to indicate the minimum number of clk count between requests from  this AHB master.
#define AHB_GIZMO_USB3_0_REQ_NEG_CNT_SHIFT                      _MK_SHIFT_CONST(24)
#define AHB_GIZMO_USB3_0_REQ_NEG_CNT_FIELD                      (_MK_MASK_CONST(0xff) << AHB_GIZMO_USB3_0_REQ_NEG_CNT_SHIFT)
#define AHB_GIZMO_USB3_0_REQ_NEG_CNT_RANGE                      31:24
#define AHB_GIZMO_USB3_0_REQ_NEG_CNT_WOFFSET                    0x0
#define AHB_GIZMO_USB3_0_REQ_NEG_CNT_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB3_0_REQ_NEG_CNT_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define AHB_GIZMO_USB3_0_REQ_NEG_CNT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB3_0_REQ_NEG_CNT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

//AHB master gizmo - Start AHB write request immediately.  1 = start the AHB write request immediately as soon as the device puts data in the AHB gizmos queue.  0 = start the AHB write request only when all the  write data has transferred from the device to the AHB gizmos queue.
#define AHB_GIZMO_USB3_0_IMMEDIATE_SHIFT                        _MK_SHIFT_CONST(18)
#define AHB_GIZMO_USB3_0_IMMEDIATE_FIELD                        (_MK_MASK_CONST(0x1) << AHB_GIZMO_USB3_0_IMMEDIATE_SHIFT)
#define AHB_GIZMO_USB3_0_IMMEDIATE_RANGE                        18:18
#define AHB_GIZMO_USB3_0_IMMEDIATE_WOFFSET                      0x0
#define AHB_GIZMO_USB3_0_IMMEDIATE_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB3_0_IMMEDIATE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB3_0_IMMEDIATE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB3_0_IMMEDIATE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB3_0_IMMEDIATE_DISABLE                      _MK_ENUM_CONST(0)
#define AHB_GIZMO_USB3_0_IMMEDIATE_ENABLE                       _MK_ENUM_CONST(1)

//AHB master gizmo - Maximum allowed AHB burst size.  00 = single transfer.  01 = burst-of-4.  10 = burst-of-8.  11 = burst-of-16.
#define AHB_GIZMO_USB3_0_MAX_AHB_BURSTSIZE_SHIFT                        _MK_SHIFT_CONST(16)
#define AHB_GIZMO_USB3_0_MAX_AHB_BURSTSIZE_FIELD                        (_MK_MASK_CONST(0x3) << AHB_GIZMO_USB3_0_MAX_AHB_BURSTSIZE_SHIFT)
#define AHB_GIZMO_USB3_0_MAX_AHB_BURSTSIZE_RANGE                        17:16
#define AHB_GIZMO_USB3_0_MAX_AHB_BURSTSIZE_WOFFSET                      0x0
#define AHB_GIZMO_USB3_0_MAX_AHB_BURSTSIZE_DEFAULT                      _MK_MASK_CONST(0x2)
#define AHB_GIZMO_USB3_0_MAX_AHB_BURSTSIZE_DEFAULT_MASK                 _MK_MASK_CONST(0x3)
#define AHB_GIZMO_USB3_0_MAX_AHB_BURSTSIZE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB3_0_MAX_AHB_BURSTSIZE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB3_0_MAX_AHB_BURSTSIZE_DMA_BURST_1WORDS                     _MK_ENUM_CONST(0)
#define AHB_GIZMO_USB3_0_MAX_AHB_BURSTSIZE_DMA_BURST_4WORDS                     _MK_ENUM_CONST(1)
#define AHB_GIZMO_USB3_0_MAX_AHB_BURSTSIZE_DMA_BURST_8WORDS                     _MK_ENUM_CONST(2)
#define AHB_GIZMO_USB3_0_MAX_AHB_BURSTSIZE_DMA_BURST_16WORDS                    _MK_ENUM_CONST(3)

//AHB slave gizmo - Dont split AHB write transaction.  1 = dont split AHB write transaction ever. 0 (and enable_split=1) = allow AHB write  transaction to be split.
#define AHB_GIZMO_USB3_0_DONT_SPLIT_AHB_WR_SHIFT                        _MK_SHIFT_CONST(7)
#define AHB_GIZMO_USB3_0_DONT_SPLIT_AHB_WR_FIELD                        (_MK_MASK_CONST(0x1) << AHB_GIZMO_USB3_0_DONT_SPLIT_AHB_WR_SHIFT)
#define AHB_GIZMO_USB3_0_DONT_SPLIT_AHB_WR_RANGE                        7:7
#define AHB_GIZMO_USB3_0_DONT_SPLIT_AHB_WR_WOFFSET                      0x0
#define AHB_GIZMO_USB3_0_DONT_SPLIT_AHB_WR_DEFAULT                      _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB3_0_DONT_SPLIT_AHB_WR_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB3_0_DONT_SPLIT_AHB_WR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB3_0_DONT_SPLIT_AHB_WR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB3_0_DONT_SPLIT_AHB_WR_ENABLE                       _MK_ENUM_CONST(0)
#define AHB_GIZMO_USB3_0_DONT_SPLIT_AHB_WR_DISABLE                      _MK_ENUM_CONST(1)

//AHB slave gizmo - Accept AHB write request always.  1 = always accept AHB write request without checking whether there is room in the queue to store the write data. 0 = accept AHB write request only when theres  enough room in the queue to store all the write data.
#define AHB_GIZMO_USB3_0_ACCEPT_AHB_WR_ALWAYS_SHIFT                     _MK_SHIFT_CONST(6)
#define AHB_GIZMO_USB3_0_ACCEPT_AHB_WR_ALWAYS_FIELD                     (_MK_MASK_CONST(0x1) << AHB_GIZMO_USB3_0_ACCEPT_AHB_WR_ALWAYS_SHIFT)
#define AHB_GIZMO_USB3_0_ACCEPT_AHB_WR_ALWAYS_RANGE                     6:6
#define AHB_GIZMO_USB3_0_ACCEPT_AHB_WR_ALWAYS_WOFFSET                   0x0
#define AHB_GIZMO_USB3_0_ACCEPT_AHB_WR_ALWAYS_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB3_0_ACCEPT_AHB_WR_ALWAYS_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB3_0_ACCEPT_AHB_WR_ALWAYS_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB3_0_ACCEPT_AHB_WR_ALWAYS_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB3_0_ACCEPT_AHB_WR_ALWAYS_ACCEPT_ON_CHECK                   _MK_ENUM_CONST(0)
#define AHB_GIZMO_USB3_0_ACCEPT_AHB_WR_ALWAYS_ACCEPT_ON_NOCHECK                 _MK_ENUM_CONST(1)

//AHB slave gizmo - Enable fast re-arbitration.  1 = allow AHB master re-arbitration as soon as the device returns one read data into the gizmos queue. 0 = allow AHB master re-arbitration only when the  device returns all read data into the gizmos queue.
#define AHB_GIZMO_USB3_0_ENB_FAST_REARBITRATE_SHIFT                     _MK_SHIFT_CONST(2)
#define AHB_GIZMO_USB3_0_ENB_FAST_REARBITRATE_FIELD                     (_MK_MASK_CONST(0x1) << AHB_GIZMO_USB3_0_ENB_FAST_REARBITRATE_SHIFT)
#define AHB_GIZMO_USB3_0_ENB_FAST_REARBITRATE_RANGE                     2:2
#define AHB_GIZMO_USB3_0_ENB_FAST_REARBITRATE_WOFFSET                   0x0
#define AHB_GIZMO_USB3_0_ENB_FAST_REARBITRATE_DEFAULT                   _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB3_0_ENB_FAST_REARBITRATE_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB3_0_ENB_FAST_REARBITRATE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB3_0_ENB_FAST_REARBITRATE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB3_0_ENB_FAST_REARBITRATE_DISABLE                   _MK_ENUM_CONST(0)
#define AHB_GIZMO_USB3_0_ENB_FAST_REARBITRATE_ENABLE                    _MK_ENUM_CONST(1)

//AHB slave gizmo - Force all AHB transaction to single data request transaction.  1 = force to single data transaction always. 0 = dont force to single data transaction.
#define AHB_GIZMO_USB3_0_FORCE_TO_AHB_SINGLE_SHIFT                      _MK_SHIFT_CONST(1)
#define AHB_GIZMO_USB3_0_FORCE_TO_AHB_SINGLE_FIELD                      (_MK_MASK_CONST(0x1) << AHB_GIZMO_USB3_0_FORCE_TO_AHB_SINGLE_SHIFT)
#define AHB_GIZMO_USB3_0_FORCE_TO_AHB_SINGLE_RANGE                      1:1
#define AHB_GIZMO_USB3_0_FORCE_TO_AHB_SINGLE_WOFFSET                    0x0
#define AHB_GIZMO_USB3_0_FORCE_TO_AHB_SINGLE_DEFAULT                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB3_0_FORCE_TO_AHB_SINGLE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB3_0_FORCE_TO_AHB_SINGLE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB3_0_FORCE_TO_AHB_SINGLE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB3_0_FORCE_TO_AHB_SINGLE_NOT_SINGLE_DATA                    _MK_ENUM_CONST(0)
#define AHB_GIZMO_USB3_0_FORCE_TO_AHB_SINGLE_SINGLE_DATA                        _MK_ENUM_CONST(1)

//AHB slave gizmo - Enable splitting AHB transactions.  1 = enable  0 = disable
#define AHB_GIZMO_USB3_0_ENABLE_SPLIT_SHIFT                     _MK_SHIFT_CONST(0)
#define AHB_GIZMO_USB3_0_ENABLE_SPLIT_FIELD                     (_MK_MASK_CONST(0x1) << AHB_GIZMO_USB3_0_ENABLE_SPLIT_SHIFT)
#define AHB_GIZMO_USB3_0_ENABLE_SPLIT_RANGE                     0:0
#define AHB_GIZMO_USB3_0_ENABLE_SPLIT_WOFFSET                   0x0
#define AHB_GIZMO_USB3_0_ENABLE_SPLIT_DEFAULT                   _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB3_0_ENABLE_SPLIT_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define AHB_GIZMO_USB3_0_ENABLE_SPLIT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB3_0_ENABLE_SPLIT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define AHB_GIZMO_USB3_0_ENABLE_SPLIT_DISABLE                   _MK_ENUM_CONST(0)
#define AHB_GIZMO_USB3_0_ENABLE_SPLIT_ENABLE                    _MK_ENUM_CONST(1)

// This is now SDMMC1 master gizmo configuration
// AHB Gizmo SDMMC1 Control Register

// Register AHB_GIZMO_SDMMC1_0  
#define AHB_GIZMO_SDMMC1_0                      _MK_ADDR_CONST(0x80)
#define AHB_GIZMO_SDMMC1_0_SECURE                       0x0
#define AHB_GIZMO_SDMMC1_0_WORD_COUNT                   0x1
#define AHB_GIZMO_SDMMC1_0_RESET_VAL                    _MK_MASK_CONST(0x20087)
#define AHB_GIZMO_SDMMC1_0_RESET_MASK                   _MK_MASK_CONST(0xff0700c7)
#define AHB_GIZMO_SDMMC1_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC1_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC1_0_READ_MASK                    _MK_MASK_CONST(0xff0700c7)
#define AHB_GIZMO_SDMMC1_0_WRITE_MASK                   _MK_MASK_CONST(0xff0700c7)
// AHB master request negate count. This is an 8-bit  counter use to indicate the minimum number of clk count between requests from  this AHB master.
#define AHB_GIZMO_SDMMC1_0_REQ_NEG_CNT_SHIFT                    _MK_SHIFT_CONST(24)
#define AHB_GIZMO_SDMMC1_0_REQ_NEG_CNT_FIELD                    (_MK_MASK_CONST(0xff) << AHB_GIZMO_SDMMC1_0_REQ_NEG_CNT_SHIFT)
#define AHB_GIZMO_SDMMC1_0_REQ_NEG_CNT_RANGE                    31:24
#define AHB_GIZMO_SDMMC1_0_REQ_NEG_CNT_WOFFSET                  0x0
#define AHB_GIZMO_SDMMC1_0_REQ_NEG_CNT_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC1_0_REQ_NEG_CNT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define AHB_GIZMO_SDMMC1_0_REQ_NEG_CNT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC1_0_REQ_NEG_CNT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//AHB master gizmo - Start AHB write request immediately.  1 = start the AHB write request immediately as soon as the device puts data in the AHB gizmos queue.  0 = start the AHB write request only when all the  write data has transferred from the device to the AHB gizmos queue.
#define AHB_GIZMO_SDMMC1_0_IMMEDIATE_SHIFT                      _MK_SHIFT_CONST(18)
#define AHB_GIZMO_SDMMC1_0_IMMEDIATE_FIELD                      (_MK_MASK_CONST(0x1) << AHB_GIZMO_SDMMC1_0_IMMEDIATE_SHIFT)
#define AHB_GIZMO_SDMMC1_0_IMMEDIATE_RANGE                      18:18
#define AHB_GIZMO_SDMMC1_0_IMMEDIATE_WOFFSET                    0x0
#define AHB_GIZMO_SDMMC1_0_IMMEDIATE_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC1_0_IMMEDIATE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC1_0_IMMEDIATE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC1_0_IMMEDIATE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC1_0_IMMEDIATE_DISABLE                    _MK_ENUM_CONST(0)
#define AHB_GIZMO_SDMMC1_0_IMMEDIATE_ENABLE                     _MK_ENUM_CONST(1)

//AHB master gizmo - Maximum allowed AHB burst size.  00 = single transfer.  01 = burst-of-4.  10 = burst-of-8.  11 = burst-of-16.
#define AHB_GIZMO_SDMMC1_0_MAX_AHB_BURSTSIZE_SHIFT                      _MK_SHIFT_CONST(16)
#define AHB_GIZMO_SDMMC1_0_MAX_AHB_BURSTSIZE_FIELD                      (_MK_MASK_CONST(0x3) << AHB_GIZMO_SDMMC1_0_MAX_AHB_BURSTSIZE_SHIFT)
#define AHB_GIZMO_SDMMC1_0_MAX_AHB_BURSTSIZE_RANGE                      17:16
#define AHB_GIZMO_SDMMC1_0_MAX_AHB_BURSTSIZE_WOFFSET                    0x0
#define AHB_GIZMO_SDMMC1_0_MAX_AHB_BURSTSIZE_DEFAULT                    _MK_MASK_CONST(0x2)
#define AHB_GIZMO_SDMMC1_0_MAX_AHB_BURSTSIZE_DEFAULT_MASK                       _MK_MASK_CONST(0x3)
#define AHB_GIZMO_SDMMC1_0_MAX_AHB_BURSTSIZE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC1_0_MAX_AHB_BURSTSIZE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC1_0_MAX_AHB_BURSTSIZE_DMA_BURST_1WORDS                   _MK_ENUM_CONST(0)
#define AHB_GIZMO_SDMMC1_0_MAX_AHB_BURSTSIZE_DMA_BURST_4WORDS                   _MK_ENUM_CONST(1)
#define AHB_GIZMO_SDMMC1_0_MAX_AHB_BURSTSIZE_DMA_BURST_8WORDS                   _MK_ENUM_CONST(2)
#define AHB_GIZMO_SDMMC1_0_MAX_AHB_BURSTSIZE_DMA_BURST_16WORDS                  _MK_ENUM_CONST(3)

//AHB slave gizmo - Dont split AHB write transaction.  1 = dont split AHB write transaction ever. 0 (and enable_split=1) = allow AHB write  transaction to be split.
#define AHB_GIZMO_SDMMC1_0_DONT_SPLIT_AHB_WR_SHIFT                      _MK_SHIFT_CONST(7)
#define AHB_GIZMO_SDMMC1_0_DONT_SPLIT_AHB_WR_FIELD                      (_MK_MASK_CONST(0x1) << AHB_GIZMO_SDMMC1_0_DONT_SPLIT_AHB_WR_SHIFT)
#define AHB_GIZMO_SDMMC1_0_DONT_SPLIT_AHB_WR_RANGE                      7:7
#define AHB_GIZMO_SDMMC1_0_DONT_SPLIT_AHB_WR_WOFFSET                    0x0
#define AHB_GIZMO_SDMMC1_0_DONT_SPLIT_AHB_WR_DEFAULT                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC1_0_DONT_SPLIT_AHB_WR_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC1_0_DONT_SPLIT_AHB_WR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC1_0_DONT_SPLIT_AHB_WR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC1_0_DONT_SPLIT_AHB_WR_ENABLE                     _MK_ENUM_CONST(0)
#define AHB_GIZMO_SDMMC1_0_DONT_SPLIT_AHB_WR_DISABLE                    _MK_ENUM_CONST(1)

//AHB slave gizmo - Accept AHB write request always.  1 = always accept AHB write request without checking whether there is room in the queue to store the write data. 0 = accept AHB write request only when theres  enough room in the queue to store all the write data.
#define AHB_GIZMO_SDMMC1_0_ACCEPT_AHB_WR_ALWAYS_SHIFT                   _MK_SHIFT_CONST(6)
#define AHB_GIZMO_SDMMC1_0_ACCEPT_AHB_WR_ALWAYS_FIELD                   (_MK_MASK_CONST(0x1) << AHB_GIZMO_SDMMC1_0_ACCEPT_AHB_WR_ALWAYS_SHIFT)
#define AHB_GIZMO_SDMMC1_0_ACCEPT_AHB_WR_ALWAYS_RANGE                   6:6
#define AHB_GIZMO_SDMMC1_0_ACCEPT_AHB_WR_ALWAYS_WOFFSET                 0x0
#define AHB_GIZMO_SDMMC1_0_ACCEPT_AHB_WR_ALWAYS_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC1_0_ACCEPT_AHB_WR_ALWAYS_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC1_0_ACCEPT_AHB_WR_ALWAYS_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC1_0_ACCEPT_AHB_WR_ALWAYS_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC1_0_ACCEPT_AHB_WR_ALWAYS_ACCEPT_ON_CHECK                 _MK_ENUM_CONST(0)
#define AHB_GIZMO_SDMMC1_0_ACCEPT_AHB_WR_ALWAYS_ACCEPT_ON_NOCHECK                       _MK_ENUM_CONST(1)

//AHB slave gizmo - Enable fast re-arbitration.  1 = allow AHB master re-arbitration as soon as the device returns one read data into the gizmos queue. 0 = allow AHB master re-arbitration only when the  device returns all read data into the gizmos queue.
#define AHB_GIZMO_SDMMC1_0_ENB_FAST_REARBITRATE_SHIFT                   _MK_SHIFT_CONST(2)
#define AHB_GIZMO_SDMMC1_0_ENB_FAST_REARBITRATE_FIELD                   (_MK_MASK_CONST(0x1) << AHB_GIZMO_SDMMC1_0_ENB_FAST_REARBITRATE_SHIFT)
#define AHB_GIZMO_SDMMC1_0_ENB_FAST_REARBITRATE_RANGE                   2:2
#define AHB_GIZMO_SDMMC1_0_ENB_FAST_REARBITRATE_WOFFSET                 0x0
#define AHB_GIZMO_SDMMC1_0_ENB_FAST_REARBITRATE_DEFAULT                 _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC1_0_ENB_FAST_REARBITRATE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC1_0_ENB_FAST_REARBITRATE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC1_0_ENB_FAST_REARBITRATE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC1_0_ENB_FAST_REARBITRATE_DISABLE                 _MK_ENUM_CONST(0)
#define AHB_GIZMO_SDMMC1_0_ENB_FAST_REARBITRATE_ENABLE                  _MK_ENUM_CONST(1)

//AHB slave gizmo - Force all AHB transaction to single data request transaction.  1 = force to single data transaction always. 0 = dont force to single data transaction.
#define AHB_GIZMO_SDMMC1_0_FORCE_TO_AHB_SINGLE_SHIFT                    _MK_SHIFT_CONST(1)
#define AHB_GIZMO_SDMMC1_0_FORCE_TO_AHB_SINGLE_FIELD                    (_MK_MASK_CONST(0x1) << AHB_GIZMO_SDMMC1_0_FORCE_TO_AHB_SINGLE_SHIFT)
#define AHB_GIZMO_SDMMC1_0_FORCE_TO_AHB_SINGLE_RANGE                    1:1
#define AHB_GIZMO_SDMMC1_0_FORCE_TO_AHB_SINGLE_WOFFSET                  0x0
#define AHB_GIZMO_SDMMC1_0_FORCE_TO_AHB_SINGLE_DEFAULT                  _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC1_0_FORCE_TO_AHB_SINGLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC1_0_FORCE_TO_AHB_SINGLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC1_0_FORCE_TO_AHB_SINGLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC1_0_FORCE_TO_AHB_SINGLE_NOT_SINGLE_DATA                  _MK_ENUM_CONST(0)
#define AHB_GIZMO_SDMMC1_0_FORCE_TO_AHB_SINGLE_SINGLE_DATA                      _MK_ENUM_CONST(1)

//AHB slave gizmo - Enable splitting AHB transactions.  1 = enable  0 = disable
#define AHB_GIZMO_SDMMC1_0_ENABLE_SPLIT_SHIFT                   _MK_SHIFT_CONST(0)
#define AHB_GIZMO_SDMMC1_0_ENABLE_SPLIT_FIELD                   (_MK_MASK_CONST(0x1) << AHB_GIZMO_SDMMC1_0_ENABLE_SPLIT_SHIFT)
#define AHB_GIZMO_SDMMC1_0_ENABLE_SPLIT_RANGE                   0:0
#define AHB_GIZMO_SDMMC1_0_ENABLE_SPLIT_WOFFSET                 0x0
#define AHB_GIZMO_SDMMC1_0_ENABLE_SPLIT_DEFAULT                 _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC1_0_ENABLE_SPLIT_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC1_0_ENABLE_SPLIT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC1_0_ENABLE_SPLIT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC1_0_ENABLE_SPLIT_DISABLE                 _MK_ENUM_CONST(0)
#define AHB_GIZMO_SDMMC1_0_ENABLE_SPLIT_ENABLE                  _MK_ENUM_CONST(1)

// This is now SDMMC2 master gizmo configuration
// AHB Gizmo SDMMC2 Control Register

// Register AHB_GIZMO_SDMMC2_0  
#define AHB_GIZMO_SDMMC2_0                      _MK_ADDR_CONST(0x84)
#define AHB_GIZMO_SDMMC2_0_SECURE                       0x0
#define AHB_GIZMO_SDMMC2_0_WORD_COUNT                   0x1
#define AHB_GIZMO_SDMMC2_0_RESET_VAL                    _MK_MASK_CONST(0x20087)
#define AHB_GIZMO_SDMMC2_0_RESET_MASK                   _MK_MASK_CONST(0xff0700c7)
#define AHB_GIZMO_SDMMC2_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC2_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC2_0_READ_MASK                    _MK_MASK_CONST(0xff0700c7)
#define AHB_GIZMO_SDMMC2_0_WRITE_MASK                   _MK_MASK_CONST(0xff0700c7)
// AHB master request negate count. This is an 8-bit  counter use to indicate the minimum number of clk count between requests from  this AHB master.
#define AHB_GIZMO_SDMMC2_0_REQ_NEG_CNT_SHIFT                    _MK_SHIFT_CONST(24)
#define AHB_GIZMO_SDMMC2_0_REQ_NEG_CNT_FIELD                    (_MK_MASK_CONST(0xff) << AHB_GIZMO_SDMMC2_0_REQ_NEG_CNT_SHIFT)
#define AHB_GIZMO_SDMMC2_0_REQ_NEG_CNT_RANGE                    31:24
#define AHB_GIZMO_SDMMC2_0_REQ_NEG_CNT_WOFFSET                  0x0
#define AHB_GIZMO_SDMMC2_0_REQ_NEG_CNT_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC2_0_REQ_NEG_CNT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define AHB_GIZMO_SDMMC2_0_REQ_NEG_CNT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC2_0_REQ_NEG_CNT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//AHB master gizmo - Start AHB write request immediately.  1 = start the AHB write request immediately as soon as the device puts data in the AHB gizmos queue.  0 = start the AHB write request only when all the  write data has transferred from the device to the AHB gizmos queue.
#define AHB_GIZMO_SDMMC2_0_IMMEDIATE_SHIFT                      _MK_SHIFT_CONST(18)
#define AHB_GIZMO_SDMMC2_0_IMMEDIATE_FIELD                      (_MK_MASK_CONST(0x1) << AHB_GIZMO_SDMMC2_0_IMMEDIATE_SHIFT)
#define AHB_GIZMO_SDMMC2_0_IMMEDIATE_RANGE                      18:18
#define AHB_GIZMO_SDMMC2_0_IMMEDIATE_WOFFSET                    0x0
#define AHB_GIZMO_SDMMC2_0_IMMEDIATE_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC2_0_IMMEDIATE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC2_0_IMMEDIATE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC2_0_IMMEDIATE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC2_0_IMMEDIATE_DISABLE                    _MK_ENUM_CONST(0)
#define AHB_GIZMO_SDMMC2_0_IMMEDIATE_ENABLE                     _MK_ENUM_CONST(1)

//AHB master gizmo - Maximum allowed AHB burst size.  00 = single transfer.  01 = burst-of-4.  10 = burst-of-8.  11 = burst-of-16.
#define AHB_GIZMO_SDMMC2_0_MAX_AHB_BURSTSIZE_SHIFT                      _MK_SHIFT_CONST(16)
#define AHB_GIZMO_SDMMC2_0_MAX_AHB_BURSTSIZE_FIELD                      (_MK_MASK_CONST(0x3) << AHB_GIZMO_SDMMC2_0_MAX_AHB_BURSTSIZE_SHIFT)
#define AHB_GIZMO_SDMMC2_0_MAX_AHB_BURSTSIZE_RANGE                      17:16
#define AHB_GIZMO_SDMMC2_0_MAX_AHB_BURSTSIZE_WOFFSET                    0x0
#define AHB_GIZMO_SDMMC2_0_MAX_AHB_BURSTSIZE_DEFAULT                    _MK_MASK_CONST(0x2)
#define AHB_GIZMO_SDMMC2_0_MAX_AHB_BURSTSIZE_DEFAULT_MASK                       _MK_MASK_CONST(0x3)
#define AHB_GIZMO_SDMMC2_0_MAX_AHB_BURSTSIZE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC2_0_MAX_AHB_BURSTSIZE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC2_0_MAX_AHB_BURSTSIZE_DMA_BURST_1WORDS                   _MK_ENUM_CONST(0)
#define AHB_GIZMO_SDMMC2_0_MAX_AHB_BURSTSIZE_DMA_BURST_4WORDS                   _MK_ENUM_CONST(1)
#define AHB_GIZMO_SDMMC2_0_MAX_AHB_BURSTSIZE_DMA_BURST_8WORDS                   _MK_ENUM_CONST(2)
#define AHB_GIZMO_SDMMC2_0_MAX_AHB_BURSTSIZE_DMA_BURST_16WORDS                  _MK_ENUM_CONST(3)

//AHB slave gizmo - Dont split AHB write transaction.  1 = dont split AHB write transaction ever. 0 (and enable_split=1) = allow AHB write  transaction to be split.
#define AHB_GIZMO_SDMMC2_0_DONT_SPLIT_AHB_WR_SHIFT                      _MK_SHIFT_CONST(7)
#define AHB_GIZMO_SDMMC2_0_DONT_SPLIT_AHB_WR_FIELD                      (_MK_MASK_CONST(0x1) << AHB_GIZMO_SDMMC2_0_DONT_SPLIT_AHB_WR_SHIFT)
#define AHB_GIZMO_SDMMC2_0_DONT_SPLIT_AHB_WR_RANGE                      7:7
#define AHB_GIZMO_SDMMC2_0_DONT_SPLIT_AHB_WR_WOFFSET                    0x0
#define AHB_GIZMO_SDMMC2_0_DONT_SPLIT_AHB_WR_DEFAULT                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC2_0_DONT_SPLIT_AHB_WR_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC2_0_DONT_SPLIT_AHB_WR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC2_0_DONT_SPLIT_AHB_WR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC2_0_DONT_SPLIT_AHB_WR_ENABLE                     _MK_ENUM_CONST(0)
#define AHB_GIZMO_SDMMC2_0_DONT_SPLIT_AHB_WR_DISABLE                    _MK_ENUM_CONST(1)

//AHB slave gizmo - Accept AHB write request always.  1 = always accept AHB write request without checking whether there is room in the queue to store the write data. 0 = accept AHB write request only when theres  enough room in the queue to store all the write data.
#define AHB_GIZMO_SDMMC2_0_ACCEPT_AHB_WR_ALWAYS_SHIFT                   _MK_SHIFT_CONST(6)
#define AHB_GIZMO_SDMMC2_0_ACCEPT_AHB_WR_ALWAYS_FIELD                   (_MK_MASK_CONST(0x1) << AHB_GIZMO_SDMMC2_0_ACCEPT_AHB_WR_ALWAYS_SHIFT)
#define AHB_GIZMO_SDMMC2_0_ACCEPT_AHB_WR_ALWAYS_RANGE                   6:6
#define AHB_GIZMO_SDMMC2_0_ACCEPT_AHB_WR_ALWAYS_WOFFSET                 0x0
#define AHB_GIZMO_SDMMC2_0_ACCEPT_AHB_WR_ALWAYS_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC2_0_ACCEPT_AHB_WR_ALWAYS_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC2_0_ACCEPT_AHB_WR_ALWAYS_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC2_0_ACCEPT_AHB_WR_ALWAYS_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC2_0_ACCEPT_AHB_WR_ALWAYS_ACCEPT_ON_CHECK                 _MK_ENUM_CONST(0)
#define AHB_GIZMO_SDMMC2_0_ACCEPT_AHB_WR_ALWAYS_ACCEPT_ON_NOCHECK                       _MK_ENUM_CONST(1)

//AHB slave gizmo - Enable fast re-arbitration.  1 = allow AHB master re-arbitration as soon as the device returns one read data into the gizmos queue. 0 = allow AHB master re-arbitration only when the  device returns all read data into the gizmos queue.
#define AHB_GIZMO_SDMMC2_0_ENB_FAST_REARBITRATE_SHIFT                   _MK_SHIFT_CONST(2)
#define AHB_GIZMO_SDMMC2_0_ENB_FAST_REARBITRATE_FIELD                   (_MK_MASK_CONST(0x1) << AHB_GIZMO_SDMMC2_0_ENB_FAST_REARBITRATE_SHIFT)
#define AHB_GIZMO_SDMMC2_0_ENB_FAST_REARBITRATE_RANGE                   2:2
#define AHB_GIZMO_SDMMC2_0_ENB_FAST_REARBITRATE_WOFFSET                 0x0
#define AHB_GIZMO_SDMMC2_0_ENB_FAST_REARBITRATE_DEFAULT                 _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC2_0_ENB_FAST_REARBITRATE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC2_0_ENB_FAST_REARBITRATE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC2_0_ENB_FAST_REARBITRATE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC2_0_ENB_FAST_REARBITRATE_DISABLE                 _MK_ENUM_CONST(0)
#define AHB_GIZMO_SDMMC2_0_ENB_FAST_REARBITRATE_ENABLE                  _MK_ENUM_CONST(1)

//AHB slave gizmo - Force all AHB transaction to single data request transaction.  1 = force to single data transaction always. 0 = dont force to single data transaction.
#define AHB_GIZMO_SDMMC2_0_FORCE_TO_AHB_SINGLE_SHIFT                    _MK_SHIFT_CONST(1)
#define AHB_GIZMO_SDMMC2_0_FORCE_TO_AHB_SINGLE_FIELD                    (_MK_MASK_CONST(0x1) << AHB_GIZMO_SDMMC2_0_FORCE_TO_AHB_SINGLE_SHIFT)
#define AHB_GIZMO_SDMMC2_0_FORCE_TO_AHB_SINGLE_RANGE                    1:1
#define AHB_GIZMO_SDMMC2_0_FORCE_TO_AHB_SINGLE_WOFFSET                  0x0
#define AHB_GIZMO_SDMMC2_0_FORCE_TO_AHB_SINGLE_DEFAULT                  _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC2_0_FORCE_TO_AHB_SINGLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC2_0_FORCE_TO_AHB_SINGLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC2_0_FORCE_TO_AHB_SINGLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC2_0_FORCE_TO_AHB_SINGLE_NOT_SINGLE_DATA                  _MK_ENUM_CONST(0)
#define AHB_GIZMO_SDMMC2_0_FORCE_TO_AHB_SINGLE_SINGLE_DATA                      _MK_ENUM_CONST(1)

//AHB slave gizmo - Enable splitting AHB transactions.  1 = enable  0 = disable
#define AHB_GIZMO_SDMMC2_0_ENABLE_SPLIT_SHIFT                   _MK_SHIFT_CONST(0)
#define AHB_GIZMO_SDMMC2_0_ENABLE_SPLIT_FIELD                   (_MK_MASK_CONST(0x1) << AHB_GIZMO_SDMMC2_0_ENABLE_SPLIT_SHIFT)
#define AHB_GIZMO_SDMMC2_0_ENABLE_SPLIT_RANGE                   0:0
#define AHB_GIZMO_SDMMC2_0_ENABLE_SPLIT_WOFFSET                 0x0
#define AHB_GIZMO_SDMMC2_0_ENABLE_SPLIT_DEFAULT                 _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC2_0_ENABLE_SPLIT_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC2_0_ENABLE_SPLIT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC2_0_ENABLE_SPLIT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC2_0_ENABLE_SPLIT_DISABLE                 _MK_ENUM_CONST(0)
#define AHB_GIZMO_SDMMC2_0_ENABLE_SPLIT_ENABLE                  _MK_ENUM_CONST(1)

// This is now SDMMC3 master gizmo configuration
// AHB Gizmo SDMMC3 Control Register

// Register AHB_GIZMO_SDMMC3_0  
#define AHB_GIZMO_SDMMC3_0                      _MK_ADDR_CONST(0x88)
#define AHB_GIZMO_SDMMC3_0_SECURE                       0x0
#define AHB_GIZMO_SDMMC3_0_WORD_COUNT                   0x1
#define AHB_GIZMO_SDMMC3_0_RESET_VAL                    _MK_MASK_CONST(0x20087)
#define AHB_GIZMO_SDMMC3_0_RESET_MASK                   _MK_MASK_CONST(0xff0700c7)
#define AHB_GIZMO_SDMMC3_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC3_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC3_0_READ_MASK                    _MK_MASK_CONST(0xff0700c7)
#define AHB_GIZMO_SDMMC3_0_WRITE_MASK                   _MK_MASK_CONST(0xff0700c7)
// AHB master request negate count. This is an 8-bit  counter use to indicate the minimum number of clk count between requests from  this AHB master.
#define AHB_GIZMO_SDMMC3_0_REQ_NEG_CNT_SHIFT                    _MK_SHIFT_CONST(24)
#define AHB_GIZMO_SDMMC3_0_REQ_NEG_CNT_FIELD                    (_MK_MASK_CONST(0xff) << AHB_GIZMO_SDMMC3_0_REQ_NEG_CNT_SHIFT)
#define AHB_GIZMO_SDMMC3_0_REQ_NEG_CNT_RANGE                    31:24
#define AHB_GIZMO_SDMMC3_0_REQ_NEG_CNT_WOFFSET                  0x0
#define AHB_GIZMO_SDMMC3_0_REQ_NEG_CNT_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC3_0_REQ_NEG_CNT_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define AHB_GIZMO_SDMMC3_0_REQ_NEG_CNT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC3_0_REQ_NEG_CNT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//AHB master gizmo - Start AHB write request immediately.  1 = start the AHB write request immediately as soon as the device puts data in the AHB gizmos queue.  0 = start the AHB write request only when all the  write data has transferred from the device to the AHB gizmos queue.
#define AHB_GIZMO_SDMMC3_0_IMMEDIATE_SHIFT                      _MK_SHIFT_CONST(18)
#define AHB_GIZMO_SDMMC3_0_IMMEDIATE_FIELD                      (_MK_MASK_CONST(0x1) << AHB_GIZMO_SDMMC3_0_IMMEDIATE_SHIFT)
#define AHB_GIZMO_SDMMC3_0_IMMEDIATE_RANGE                      18:18
#define AHB_GIZMO_SDMMC3_0_IMMEDIATE_WOFFSET                    0x0
#define AHB_GIZMO_SDMMC3_0_IMMEDIATE_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC3_0_IMMEDIATE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC3_0_IMMEDIATE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC3_0_IMMEDIATE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC3_0_IMMEDIATE_DISABLE                    _MK_ENUM_CONST(0)
#define AHB_GIZMO_SDMMC3_0_IMMEDIATE_ENABLE                     _MK_ENUM_CONST(1)

//AHB master gizmo - Maximum allowed AHB burst size.  00 = single transfer.  01 = burst-of-4.  10 = burst-of-8.  11 = burst-of-16.
#define AHB_GIZMO_SDMMC3_0_MAX_AHB_BURSTSIZE_SHIFT                      _MK_SHIFT_CONST(16)
#define AHB_GIZMO_SDMMC3_0_MAX_AHB_BURSTSIZE_FIELD                      (_MK_MASK_CONST(0x3) << AHB_GIZMO_SDMMC3_0_MAX_AHB_BURSTSIZE_SHIFT)
#define AHB_GIZMO_SDMMC3_0_MAX_AHB_BURSTSIZE_RANGE                      17:16
#define AHB_GIZMO_SDMMC3_0_MAX_AHB_BURSTSIZE_WOFFSET                    0x0
#define AHB_GIZMO_SDMMC3_0_MAX_AHB_BURSTSIZE_DEFAULT                    _MK_MASK_CONST(0x2)
#define AHB_GIZMO_SDMMC3_0_MAX_AHB_BURSTSIZE_DEFAULT_MASK                       _MK_MASK_CONST(0x3)
#define AHB_GIZMO_SDMMC3_0_MAX_AHB_BURSTSIZE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC3_0_MAX_AHB_BURSTSIZE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC3_0_MAX_AHB_BURSTSIZE_DMA_BURST_1WORDS                   _MK_ENUM_CONST(0)
#define AHB_GIZMO_SDMMC3_0_MAX_AHB_BURSTSIZE_DMA_BURST_4WORDS                   _MK_ENUM_CONST(1)
#define AHB_GIZMO_SDMMC3_0_MAX_AHB_BURSTSIZE_DMA_BURST_8WORDS                   _MK_ENUM_CONST(2)
#define AHB_GIZMO_SDMMC3_0_MAX_AHB_BURSTSIZE_DMA_BURST_16WORDS                  _MK_ENUM_CONST(3)

//AHB slave gizmo - Dont split AHB write transaction.  1 = dont split AHB write transaction ever. 0 (and enable_split=1) = allow AHB write  transaction to be split.
#define AHB_GIZMO_SDMMC3_0_DONT_SPLIT_AHB_WR_SHIFT                      _MK_SHIFT_CONST(7)
#define AHB_GIZMO_SDMMC3_0_DONT_SPLIT_AHB_WR_FIELD                      (_MK_MASK_CONST(0x1) << AHB_GIZMO_SDMMC3_0_DONT_SPLIT_AHB_WR_SHIFT)
#define AHB_GIZMO_SDMMC3_0_DONT_SPLIT_AHB_WR_RANGE                      7:7
#define AHB_GIZMO_SDMMC3_0_DONT_SPLIT_AHB_WR_WOFFSET                    0x0
#define AHB_GIZMO_SDMMC3_0_DONT_SPLIT_AHB_WR_DEFAULT                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC3_0_DONT_SPLIT_AHB_WR_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC3_0_DONT_SPLIT_AHB_WR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC3_0_DONT_SPLIT_AHB_WR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC3_0_DONT_SPLIT_AHB_WR_ENABLE                     _MK_ENUM_CONST(0)
#define AHB_GIZMO_SDMMC3_0_DONT_SPLIT_AHB_WR_DISABLE                    _MK_ENUM_CONST(1)

//AHB slave gizmo - Accept AHB write request always.  1 = always accept AHB write request without checking whether there is room in the queue to store the write data. 0 = accept AHB write request only when theres  enough room in the queue to store all the write data.
#define AHB_GIZMO_SDMMC3_0_ACCEPT_AHB_WR_ALWAYS_SHIFT                   _MK_SHIFT_CONST(6)
#define AHB_GIZMO_SDMMC3_0_ACCEPT_AHB_WR_ALWAYS_FIELD                   (_MK_MASK_CONST(0x1) << AHB_GIZMO_SDMMC3_0_ACCEPT_AHB_WR_ALWAYS_SHIFT)
#define AHB_GIZMO_SDMMC3_0_ACCEPT_AHB_WR_ALWAYS_RANGE                   6:6
#define AHB_GIZMO_SDMMC3_0_ACCEPT_AHB_WR_ALWAYS_WOFFSET                 0x0
#define AHB_GIZMO_SDMMC3_0_ACCEPT_AHB_WR_ALWAYS_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC3_0_ACCEPT_AHB_WR_ALWAYS_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC3_0_ACCEPT_AHB_WR_ALWAYS_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC3_0_ACCEPT_AHB_WR_ALWAYS_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC3_0_ACCEPT_AHB_WR_ALWAYS_ACCEPT_ON_CHECK                 _MK_ENUM_CONST(0)
#define AHB_GIZMO_SDMMC3_0_ACCEPT_AHB_WR_ALWAYS_ACCEPT_ON_NOCHECK                       _MK_ENUM_CONST(1)

//AHB slave gizmo - Enable fast re-arbitration.  1 = allow AHB master re-arbitration as soon as the device returns one read data into the gizmos queue. 0 = allow AHB master re-arbitration only when the  device returns all read data into the gizmos queue.
#define AHB_GIZMO_SDMMC3_0_ENB_FAST_REARBITRATE_SHIFT                   _MK_SHIFT_CONST(2)
#define AHB_GIZMO_SDMMC3_0_ENB_FAST_REARBITRATE_FIELD                   (_MK_MASK_CONST(0x1) << AHB_GIZMO_SDMMC3_0_ENB_FAST_REARBITRATE_SHIFT)
#define AHB_GIZMO_SDMMC3_0_ENB_FAST_REARBITRATE_RANGE                   2:2
#define AHB_GIZMO_SDMMC3_0_ENB_FAST_REARBITRATE_WOFFSET                 0x0
#define AHB_GIZMO_SDMMC3_0_ENB_FAST_REARBITRATE_DEFAULT                 _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC3_0_ENB_FAST_REARBITRATE_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC3_0_ENB_FAST_REARBITRATE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC3_0_ENB_FAST_REARBITRATE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC3_0_ENB_FAST_REARBITRATE_DISABLE                 _MK_ENUM_CONST(0)
#define AHB_GIZMO_SDMMC3_0_ENB_FAST_REARBITRATE_ENABLE                  _MK_ENUM_CONST(1)

//AHB slave gizmo - Force all AHB transaction to single data request transaction.  1 = force to single data transaction always. 0 = dont force to single data transaction.
#define AHB_GIZMO_SDMMC3_0_FORCE_TO_AHB_SINGLE_SHIFT                    _MK_SHIFT_CONST(1)
#define AHB_GIZMO_SDMMC3_0_FORCE_TO_AHB_SINGLE_FIELD                    (_MK_MASK_CONST(0x1) << AHB_GIZMO_SDMMC3_0_FORCE_TO_AHB_SINGLE_SHIFT)
#define AHB_GIZMO_SDMMC3_0_FORCE_TO_AHB_SINGLE_RANGE                    1:1
#define AHB_GIZMO_SDMMC3_0_FORCE_TO_AHB_SINGLE_WOFFSET                  0x0
#define AHB_GIZMO_SDMMC3_0_FORCE_TO_AHB_SINGLE_DEFAULT                  _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC3_0_FORCE_TO_AHB_SINGLE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC3_0_FORCE_TO_AHB_SINGLE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC3_0_FORCE_TO_AHB_SINGLE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC3_0_FORCE_TO_AHB_SINGLE_NOT_SINGLE_DATA                  _MK_ENUM_CONST(0)
#define AHB_GIZMO_SDMMC3_0_FORCE_TO_AHB_SINGLE_SINGLE_DATA                      _MK_ENUM_CONST(1)

//AHB slave gizmo - Enable splitting AHB transactions.  1 = enable  0 = disable
#define AHB_GIZMO_SDMMC3_0_ENABLE_SPLIT_SHIFT                   _MK_SHIFT_CONST(0)
#define AHB_GIZMO_SDMMC3_0_ENABLE_SPLIT_FIELD                   (_MK_MASK_CONST(0x1) << AHB_GIZMO_SDMMC3_0_ENABLE_SPLIT_SHIFT)
#define AHB_GIZMO_SDMMC3_0_ENABLE_SPLIT_RANGE                   0:0
#define AHB_GIZMO_SDMMC3_0_ENABLE_SPLIT_WOFFSET                 0x0
#define AHB_GIZMO_SDMMC3_0_ENABLE_SPLIT_DEFAULT                 _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC3_0_ENABLE_SPLIT_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define AHB_GIZMO_SDMMC3_0_ENABLE_SPLIT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC3_0_ENABLE_SPLIT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define AHB_GIZMO_SDMMC3_0_ENABLE_SPLIT_DISABLE                 _MK_ENUM_CONST(0)
#define AHB_GIZMO_SDMMC3_0_ENABLE_SPLIT_ENABLE                  _MK_ENUM_CONST(1)


// Reserved address 140 [0x8c] 

// Reserved address 144 [0x90] 

// Reserved address 148 [0x94] 

// Reserved address 152 [0x98] 

// Reserved address 156 [0x9c] 

// Reserved address 160 [0xa0] 

// Reserved address 164 [0xa4] 

// Reserved address 168 [0xa8] 

// Reserved address 172 [0xac] 

// Reserved address 176 [0xb0] 

// Reserved address 180 [0xb4] 

// Reserved address 184 [0xb8] 

// Reserved address 188 [0xbc] 

// Reserved address 192 [0xc0] 

// Reserved address 196 [0xc4] 

// Reserved address 200 [0xc8] 

// Reserved address 204 [0xcc] 

// Reserved address 208 [0xd0] 

// Reserved address 212 [0xd4] 
// 6000:C0DC
// PREFETCH_CONFIG_X, see also // 0x6000_C0F0, 0x6000_C0F4 (ahbslv prefetch cfg1,2)
//                         and // 0x6000_C0E4, 0x6000_C0E8 (ahbslv prefetch cfg3,4)
// check size functionality for all prefetch masters
//
// if DISABLE_CHECK_SIZE is 0, then only read requests that have the exact same size
// as the original read request that kick-started the prefetch process will cause a
// "hit". In addition, the address must be the exact next one in the sequence. 
//
// For instance, if the first request on a prefetch-enabled AHB Master arrives with
// SIZE=ONE_BYTE and ADDR[31:0]=0x3, then the next access must have SIZE=ONE_BYTE and
// ADDR[31:0]=0x4 in order to be considered a hit.
//
// if DISABLE_CHECK_SIZE is 1, then a read request will hit as long as the incoming ADDR[31:4]
// matches the expected_ADDR[31:4]. expected_ADDR[31:4] is always either "last ADDR[31:4]" or
// "last ADDR[31:4] + 1", where last ADDR is the prior read request actually issued by the AHB Master.
// (as opposed to the last request to the CIF, which could have been a speculative read).
// expected_ADDR[31:4] is always "last ADDR[31:4]" unless "SIZE" field in the last request
// uses the last byte in the 16-byte CIF word.

// Register AHB_AHB_MEM_PREFETCH_CFG_X_0  
#define AHB_AHB_MEM_PREFETCH_CFG_X_0                    _MK_ADDR_CONST(0xd8)
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_SECURE                     0x0
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_WORD_COUNT                         0x1
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_RESET_MASK                         _MK_MASK_CONST(0xf)
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_READ_MASK                  _MK_MASK_CONST(0xf)
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_WRITE_MASK                         _MK_MASK_CONST(0xf)
// 
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER1_SHIFT                   _MK_SHIFT_CONST(0)
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER1_FIELD                   (_MK_MASK_CONST(0x1) << AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER1_SHIFT)
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER1_RANGE                   0:0
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER1_WOFFSET                 0x0
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER1_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER1_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER1_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER1_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// 
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER2_SHIFT                   _MK_SHIFT_CONST(1)
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER2_FIELD                   (_MK_MASK_CONST(0x1) << AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER2_SHIFT)
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER2_RANGE                   1:1
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER2_WOFFSET                 0x0
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER2_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER2_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER2_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER2_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// 
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER3_SHIFT                   _MK_SHIFT_CONST(2)
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER3_FIELD                   (_MK_MASK_CONST(0x1) << AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER3_SHIFT)
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER3_RANGE                   2:2
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER3_WOFFSET                 0x0
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER3_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER3_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER3_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER3_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// 
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER4_SHIFT                   _MK_SHIFT_CONST(3)
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER4_FIELD                   (_MK_MASK_CONST(0x1) << AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER4_SHIFT)
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER4_RANGE                   3:3
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER4_WOFFSET                 0x0
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER4_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER4_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER4_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG_X_0_DISABLE_CHECK_SIZE_MASTER4_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// 6000:C0E0: xbar control
// XBAR Control Register

// Register AHB_ARBITRATION_XBAR_CTRL_0  
#define AHB_ARBITRATION_XBAR_CTRL_0                     _MK_ADDR_CONST(0xdc)
#define AHB_ARBITRATION_XBAR_CTRL_0_SECURE                      0x0
#define AHB_ARBITRATION_XBAR_CTRL_0_WORD_COUNT                  0x1
#define AHB_ARBITRATION_XBAR_CTRL_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_XBAR_CTRL_0_RESET_MASK                  _MK_MASK_CONST(0x10003)
#define AHB_ARBITRATION_XBAR_CTRL_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_XBAR_CTRL_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_XBAR_CTRL_0_READ_MASK                   _MK_MASK_CONST(0x10003)
#define AHB_ARBITRATION_XBAR_CTRL_0_WRITE_MASK                  _MK_MASK_CONST(0x10003)
// SW should set this bit when memory has been initialized
#define AHB_ARBITRATION_XBAR_CTRL_0_MEM_INIT_DONE_SHIFT                 _MK_SHIFT_CONST(16)
#define AHB_ARBITRATION_XBAR_CTRL_0_MEM_INIT_DONE_FIELD                 (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_XBAR_CTRL_0_MEM_INIT_DONE_SHIFT)
#define AHB_ARBITRATION_XBAR_CTRL_0_MEM_INIT_DONE_RANGE                 16:16
#define AHB_ARBITRATION_XBAR_CTRL_0_MEM_INIT_DONE_WOFFSET                       0x0
#define AHB_ARBITRATION_XBAR_CTRL_0_MEM_INIT_DONE_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_XBAR_CTRL_0_MEM_INIT_DONE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_XBAR_CTRL_0_MEM_INIT_DONE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_XBAR_CTRL_0_MEM_INIT_DONE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_XBAR_CTRL_0_MEM_INIT_DONE_NOT_DONE                      _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_XBAR_CTRL_0_MEM_INIT_DONE_DONE                  _MK_ENUM_CONST(1)

// By default CPU accesses to IRAMs will be held if  there are any pending requests from the AHB to the 
// IRAMs. This is done to  avoid data coherency issues. If SW handles coherency then this can be turned  
// off to improve performance.SW writes to modify
#define AHB_ARBITRATION_XBAR_CTRL_0_HOLD_DIS_SHIFT                      _MK_SHIFT_CONST(1)
#define AHB_ARBITRATION_XBAR_CTRL_0_HOLD_DIS_FIELD                      (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_XBAR_CTRL_0_HOLD_DIS_SHIFT)
#define AHB_ARBITRATION_XBAR_CTRL_0_HOLD_DIS_RANGE                      1:1
#define AHB_ARBITRATION_XBAR_CTRL_0_HOLD_DIS_WOFFSET                    0x0
#define AHB_ARBITRATION_XBAR_CTRL_0_HOLD_DIS_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_XBAR_CTRL_0_HOLD_DIS_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_XBAR_CTRL_0_HOLD_DIS_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_XBAR_CTRL_0_HOLD_DIS_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_XBAR_CTRL_0_HOLD_DIS_ENABLE                     _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_XBAR_CTRL_0_HOLD_DIS_DISABLE                    _MK_ENUM_CONST(1)

// SW writes to modify
#define AHB_ARBITRATION_XBAR_CTRL_0_POST_DIS_SHIFT                      _MK_SHIFT_CONST(0)
#define AHB_ARBITRATION_XBAR_CTRL_0_POST_DIS_FIELD                      (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_XBAR_CTRL_0_POST_DIS_SHIFT)
#define AHB_ARBITRATION_XBAR_CTRL_0_POST_DIS_RANGE                      0:0
#define AHB_ARBITRATION_XBAR_CTRL_0_POST_DIS_WOFFSET                    0x0
#define AHB_ARBITRATION_XBAR_CTRL_0_POST_DIS_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_XBAR_CTRL_0_POST_DIS_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_XBAR_CTRL_0_POST_DIS_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_XBAR_CTRL_0_POST_DIS_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_XBAR_CTRL_0_POST_DIS_ENABLE                     _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_XBAR_CTRL_0_POST_DIS_DISABLE                    _MK_ENUM_CONST(1)

// 6000:C0E4: ahbslv prefetch cfg3 --> reset value = 0x1483.0800. 

// Register AHB_AHB_MEM_PREFETCH_CFG3_0  
#define AHB_AHB_MEM_PREFETCH_CFG3_0                     _MK_ADDR_CONST(0xe0)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_SECURE                      0x0
#define AHB_AHB_MEM_PREFETCH_CFG3_0_WORD_COUNT                  0x1
#define AHB_AHB_MEM_PREFETCH_CFG3_0_RESET_VAL                   _MK_MASK_CONST(0x14800800)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_RESET_MASK                  _MK_MASK_CONST(0xffffffff)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_WRITE_MASK                  _MK_MASK_CONST(0xffe0ffff)
// 1=enable 0=disable
#define AHB_AHB_MEM_PREFETCH_CFG3_0_ENABLE_SHIFT                        _MK_SHIFT_CONST(31)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_ENABLE_FIELD                        (_MK_MASK_CONST(0x1) << AHB_AHB_MEM_PREFETCH_CFG3_0_ENABLE_SHIFT)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_ENABLE_RANGE                        31:31
#define AHB_AHB_MEM_PREFETCH_CFG3_0_ENABLE_WOFFSET                      0x0
#define AHB_AHB_MEM_PREFETCH_CFG3_0_ENABLE_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_ENABLE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_ENABLE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_ENABLE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// AHBDMA master
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_SHIFT                    _MK_SHIFT_CONST(26)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_FIELD                    (_MK_MASK_CONST(0x1f) << AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_SHIFT)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_RANGE                    30:26
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_WOFFSET                  0x0
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_DEFAULT                  _MK_MASK_CONST(0x5)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_DEFAULT_MASK                     _MK_MASK_CONST(0x1f)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_CPU                      _MK_ENUM_CONST(0)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_COP                      _MK_ENUM_CONST(1)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_VCP                      _MK_ENUM_CONST(2)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_UNUSED_03                        _MK_ENUM_CONST(3)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_IDE                      _MK_ENUM_CONST(4)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_AHBDMA                   _MK_ENUM_CONST(5)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_USB                      _MK_ENUM_CONST(6)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_APBDMA                   _MK_ENUM_CONST(7)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_XIO                      _MK_ENUM_CONST(8)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_SDIO1                    _MK_ENUM_CONST(9)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_SDMMC1                   _MK_ENUM_CONST(9)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_NAND_FLASH                       _MK_ENUM_CONST(10)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_SNOR                     _MK_ENUM_CONST(11)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_HSMMC                    _MK_ENUM_CONST(12)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_BSEV                     _MK_ENUM_CONST(13)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_UNUSED_0E                        _MK_ENUM_CONST(14)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_UNUSED_0F                        _MK_ENUM_CONST(15)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_SDMMC4                   _MK_ENUM_CONST(12)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_BSEA                     _MK_ENUM_CONST(16)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_USB3                     _MK_ENUM_CONST(17)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_USB2                     _MK_ENUM_CONST(18)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_SDIO2                    _MK_ENUM_CONST(19)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_SDMMC2                   _MK_ENUM_CONST(19)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_SDMMC3                   _MK_ENUM_CONST(20)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_UNUSED_15                        _MK_ENUM_CONST(21)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_UNUSED_16                        _MK_ENUM_CONST(22)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_UNUSED_17                        _MK_ENUM_CONST(23)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_UNUSED_18                        _MK_ENUM_CONST(24)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_UNUSED_19                        _MK_ENUM_CONST(25)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_UNUSED_1A                        _MK_ENUM_CONST(26)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_UNUSED_1B                        _MK_ENUM_CONST(27)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_UNUSED_1C                        _MK_ENUM_CONST(28)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_UNUSED_1D                        _MK_ENUM_CONST(29)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_UNUSED_1E                        _MK_ENUM_CONST(30)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_AHB_MST_ID_UNUSED_1F                        _MK_ENUM_CONST(31)

// 2^(n+4) byte boundary. any value >16 will use n=16
#define AHB_AHB_MEM_PREFETCH_CFG3_0_ADDR_BNDRY_SHIFT                    _MK_SHIFT_CONST(21)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_ADDR_BNDRY_FIELD                    (_MK_MASK_CONST(0x1f) << AHB_AHB_MEM_PREFETCH_CFG3_0_ADDR_BNDRY_SHIFT)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_ADDR_BNDRY_RANGE                    25:21
#define AHB_AHB_MEM_PREFETCH_CFG3_0_ADDR_BNDRY_WOFFSET                  0x0
#define AHB_AHB_MEM_PREFETCH_CFG3_0_ADDR_BNDRY_DEFAULT                  _MK_MASK_CONST(0x4)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_ADDR_BNDRY_DEFAULT_MASK                     _MK_MASK_CONST(0x1f)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_ADDR_BNDRY_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_ADDR_BNDRY_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// not used for AP-20 and beyond (last used in AP15)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_SPEC_THROTTLE_SHIFT                 _MK_SHIFT_CONST(16)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_SPEC_THROTTLE_FIELD                 (_MK_MASK_CONST(0x1f) << AHB_AHB_MEM_PREFETCH_CFG3_0_SPEC_THROTTLE_SHIFT)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_SPEC_THROTTLE_RANGE                 20:16
#define AHB_AHB_MEM_PREFETCH_CFG3_0_SPEC_THROTTLE_WOFFSET                       0x0
#define AHB_AHB_MEM_PREFETCH_CFG3_0_SPEC_THROTTLE_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_SPEC_THROTTLE_DEFAULT_MASK                  _MK_MASK_CONST(0x1f)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_SPEC_THROTTLE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_SPEC_THROTTLE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// 2048 cycles
#define AHB_AHB_MEM_PREFETCH_CFG3_0_INACTIVITY_TIMEOUT_SHIFT                    _MK_SHIFT_CONST(0)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_INACTIVITY_TIMEOUT_FIELD                    (_MK_MASK_CONST(0xffff) << AHB_AHB_MEM_PREFETCH_CFG3_0_INACTIVITY_TIMEOUT_SHIFT)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_INACTIVITY_TIMEOUT_RANGE                    15:0
#define AHB_AHB_MEM_PREFETCH_CFG3_0_INACTIVITY_TIMEOUT_WOFFSET                  0x0
#define AHB_AHB_MEM_PREFETCH_CFG3_0_INACTIVITY_TIMEOUT_DEFAULT                  _MK_MASK_CONST(0x800)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_INACTIVITY_TIMEOUT_DEFAULT_MASK                     _MK_MASK_CONST(0xffff)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_INACTIVITY_TIMEOUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG3_0_INACTIVITY_TIMEOUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// 6000:C0E8: ahbslv prefetch cfg4 --> reset value = 0x1483.0800. 

// Register AHB_AHB_MEM_PREFETCH_CFG4_0  
#define AHB_AHB_MEM_PREFETCH_CFG4_0                     _MK_ADDR_CONST(0xe4)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_SECURE                      0x0
#define AHB_AHB_MEM_PREFETCH_CFG4_0_WORD_COUNT                  0x1
#define AHB_AHB_MEM_PREFETCH_CFG4_0_RESET_VAL                   _MK_MASK_CONST(0x14800800)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_RESET_MASK                  _MK_MASK_CONST(0xffffffff)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_WRITE_MASK                  _MK_MASK_CONST(0xffe0ffff)
// 1=enable 0=disable
#define AHB_AHB_MEM_PREFETCH_CFG4_0_ENABLE_SHIFT                        _MK_SHIFT_CONST(31)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_ENABLE_FIELD                        (_MK_MASK_CONST(0x1) << AHB_AHB_MEM_PREFETCH_CFG4_0_ENABLE_SHIFT)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_ENABLE_RANGE                        31:31
#define AHB_AHB_MEM_PREFETCH_CFG4_0_ENABLE_WOFFSET                      0x0
#define AHB_AHB_MEM_PREFETCH_CFG4_0_ENABLE_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_ENABLE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_ENABLE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_ENABLE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// AHBDMA master
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_SHIFT                    _MK_SHIFT_CONST(26)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_FIELD                    (_MK_MASK_CONST(0x1f) << AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_SHIFT)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_RANGE                    30:26
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_WOFFSET                  0x0
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_DEFAULT                  _MK_MASK_CONST(0x5)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_DEFAULT_MASK                     _MK_MASK_CONST(0x1f)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_CPU                      _MK_ENUM_CONST(0)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_COP                      _MK_ENUM_CONST(1)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_VCP                      _MK_ENUM_CONST(2)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_UNUSED_03                        _MK_ENUM_CONST(3)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_IDE                      _MK_ENUM_CONST(4)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_AHBDMA                   _MK_ENUM_CONST(5)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_USB                      _MK_ENUM_CONST(6)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_APBDMA                   _MK_ENUM_CONST(7)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_XIO                      _MK_ENUM_CONST(8)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_SDIO1                    _MK_ENUM_CONST(9)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_SDMMC1                   _MK_ENUM_CONST(9)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_NAND_FLASH                       _MK_ENUM_CONST(10)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_SNOR                     _MK_ENUM_CONST(11)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_HSMMC                    _MK_ENUM_CONST(12)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_BSEV                     _MK_ENUM_CONST(13)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_UNUSED_0E                        _MK_ENUM_CONST(14)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_UNUSED_0F                        _MK_ENUM_CONST(15)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_SDMMC4                   _MK_ENUM_CONST(12)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_BSEA                     _MK_ENUM_CONST(16)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_USB3                     _MK_ENUM_CONST(17)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_USB2                     _MK_ENUM_CONST(18)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_SDIO2                    _MK_ENUM_CONST(19)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_SDMMC2                   _MK_ENUM_CONST(19)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_SDMMC3                   _MK_ENUM_CONST(20)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_UNUSED_15                        _MK_ENUM_CONST(21)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_UNUSED_16                        _MK_ENUM_CONST(22)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_UNUSED_17                        _MK_ENUM_CONST(23)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_UNUSED_18                        _MK_ENUM_CONST(24)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_UNUSED_19                        _MK_ENUM_CONST(25)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_UNUSED_1A                        _MK_ENUM_CONST(26)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_UNUSED_1B                        _MK_ENUM_CONST(27)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_UNUSED_1C                        _MK_ENUM_CONST(28)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_UNUSED_1D                        _MK_ENUM_CONST(29)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_UNUSED_1E                        _MK_ENUM_CONST(30)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_AHB_MST_ID_UNUSED_1F                        _MK_ENUM_CONST(31)

// 2^(n+4) byte boundary. any value >16 will use n=16
#define AHB_AHB_MEM_PREFETCH_CFG4_0_ADDR_BNDRY_SHIFT                    _MK_SHIFT_CONST(21)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_ADDR_BNDRY_FIELD                    (_MK_MASK_CONST(0x1f) << AHB_AHB_MEM_PREFETCH_CFG4_0_ADDR_BNDRY_SHIFT)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_ADDR_BNDRY_RANGE                    25:21
#define AHB_AHB_MEM_PREFETCH_CFG4_0_ADDR_BNDRY_WOFFSET                  0x0
#define AHB_AHB_MEM_PREFETCH_CFG4_0_ADDR_BNDRY_DEFAULT                  _MK_MASK_CONST(0x4)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_ADDR_BNDRY_DEFAULT_MASK                     _MK_MASK_CONST(0x1f)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_ADDR_BNDRY_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_ADDR_BNDRY_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// not used for AP-20 and beyond (last used in AP15)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_SPEC_THROTTLE_SHIFT                 _MK_SHIFT_CONST(16)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_SPEC_THROTTLE_FIELD                 (_MK_MASK_CONST(0x1f) << AHB_AHB_MEM_PREFETCH_CFG4_0_SPEC_THROTTLE_SHIFT)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_SPEC_THROTTLE_RANGE                 20:16
#define AHB_AHB_MEM_PREFETCH_CFG4_0_SPEC_THROTTLE_WOFFSET                       0x0
#define AHB_AHB_MEM_PREFETCH_CFG4_0_SPEC_THROTTLE_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_SPEC_THROTTLE_DEFAULT_MASK                  _MK_MASK_CONST(0x1f)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_SPEC_THROTTLE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_SPEC_THROTTLE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// 2048 cycles
#define AHB_AHB_MEM_PREFETCH_CFG4_0_INACTIVITY_TIMEOUT_SHIFT                    _MK_SHIFT_CONST(0)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_INACTIVITY_TIMEOUT_FIELD                    (_MK_MASK_CONST(0xffff) << AHB_AHB_MEM_PREFETCH_CFG4_0_INACTIVITY_TIMEOUT_SHIFT)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_INACTIVITY_TIMEOUT_RANGE                    15:0
#define AHB_AHB_MEM_PREFETCH_CFG4_0_INACTIVITY_TIMEOUT_WOFFSET                  0x0
#define AHB_AHB_MEM_PREFETCH_CFG4_0_INACTIVITY_TIMEOUT_DEFAULT                  _MK_MASK_CONST(0x800)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_INACTIVITY_TIMEOUT_DEFAULT_MASK                     _MK_MASK_CONST(0xffff)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_INACTIVITY_TIMEOUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG4_0_INACTIVITY_TIMEOUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// 0x6000_C0EC: arm7 outstanding rd/wr

// Register AHB_AVP_PPCS_RD_COH_STATUS_0  
#define AHB_AVP_PPCS_RD_COH_STATUS_0                    _MK_ADDR_CONST(0xe8)
#define AHB_AVP_PPCS_RD_COH_STATUS_0_SECURE                     0x0
#define AHB_AVP_PPCS_RD_COH_STATUS_0_WORD_COUNT                         0x1
#define AHB_AVP_PPCS_RD_COH_STATUS_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define AHB_AVP_PPCS_RD_COH_STATUS_0_RESET_MASK                         _MK_MASK_CONST(0x0)
#define AHB_AVP_PPCS_RD_COH_STATUS_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define AHB_AVP_PPCS_RD_COH_STATUS_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_AVP_PPCS_RD_COH_STATUS_0_READ_MASK                  _MK_MASK_CONST(0x10001)
#define AHB_AVP_PPCS_RD_COH_STATUS_0_WRITE_MASK                         _MK_MASK_CONST(0x0)
#define AHB_AVP_PPCS_RD_COH_STATUS_0_RDS_OUTSTANDING_SHIFT                      _MK_SHIFT_CONST(16)
#define AHB_AVP_PPCS_RD_COH_STATUS_0_RDS_OUTSTANDING_FIELD                      (_MK_MASK_CONST(0x1) << AHB_AVP_PPCS_RD_COH_STATUS_0_RDS_OUTSTANDING_SHIFT)
#define AHB_AVP_PPCS_RD_COH_STATUS_0_RDS_OUTSTANDING_RANGE                      16:16
#define AHB_AVP_PPCS_RD_COH_STATUS_0_RDS_OUTSTANDING_WOFFSET                    0x0
#define AHB_AVP_PPCS_RD_COH_STATUS_0_RDS_OUTSTANDING_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_AVP_PPCS_RD_COH_STATUS_0_RDS_OUTSTANDING_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define AHB_AVP_PPCS_RD_COH_STATUS_0_RDS_OUTSTANDING_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_AVP_PPCS_RD_COH_STATUS_0_RDS_OUTSTANDING_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

#define AHB_AVP_PPCS_RD_COH_STATUS_0_WRS_OUTSTANDING_SHIFT                      _MK_SHIFT_CONST(0)
#define AHB_AVP_PPCS_RD_COH_STATUS_0_WRS_OUTSTANDING_FIELD                      (_MK_MASK_CONST(0x1) << AHB_AVP_PPCS_RD_COH_STATUS_0_WRS_OUTSTANDING_SHIFT)
#define AHB_AVP_PPCS_RD_COH_STATUS_0_WRS_OUTSTANDING_RANGE                      0:0
#define AHB_AVP_PPCS_RD_COH_STATUS_0_WRS_OUTSTANDING_WOFFSET                    0x0
#define AHB_AVP_PPCS_RD_COH_STATUS_0_WRS_OUTSTANDING_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_AVP_PPCS_RD_COH_STATUS_0_WRS_OUTSTANDING_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define AHB_AVP_PPCS_RD_COH_STATUS_0_WRS_OUTSTANDING_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_AVP_PPCS_RD_COH_STATUS_0_WRS_OUTSTANDING_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// *** NV_ahbslvmem prefetch ***
// This NV_ahbslvmem prefetch feature is intended to reduce latency and improve overall
// bandwidth for AHB Masters doing reads to SDRAM. AHB only allows one outstanding read
// transaction at a time. When enabled, and kick-started by a first read request (which
// will "miss" since there would be nothing in the prefetch fifo) the prefetcher will 
// make speculative read requests to the memory controller in a consecutive progression
// of linear address. Without this feature, an AHB Master will suffer the roundtrip
// latency thru the gizmo, ppcs, cif, mc arbitration, and all the read data passing
// for every AHB transaction.
//
// Address Boundaries for prefetching will stop the sequential prefetch process from
// making additional speculations. This is useful to help prevent coherency issues --
// software needs ways to stop the prefetcher from prefetching data before the data
// has been written in memory. If an AHB master can be known to make 256 Byte transfers
// that are aligned accesses, ADDR_BNDRY should be set to a value of 4.
//
// INACTIVITY_TIMEOUT is intended to prevent coherency problems. If no
// read request from the prefetch-enabled master is observed after the number of cycles
// specified in the inactivity timeout counter, then any speculatively prefetched read
// data is invalidated.
//
// There are four AHB masters that can be enabled for prefetching.
// Each prefetch buffer can hold up to 8 entries (of 128-bits each entry)
// of prefetched data.
//
// see also the registers at
//   6000:C0DC (AHB_MEM_PREFETCH_CFG_X)
//   6000:C0E4 (AHB_MEM_PREFETCH_CFG3)
//   6000:C0E8 (AHB_MEM_PREFETCH_CFG4)
// 
// 0x6000_C0F0: ahbslv prefetch cfg1 --> reset value = 0x1483.0800. 

// Register AHB_AHB_MEM_PREFETCH_CFG1_0  
#define AHB_AHB_MEM_PREFETCH_CFG1_0                     _MK_ADDR_CONST(0xec)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_SECURE                      0x0
#define AHB_AHB_MEM_PREFETCH_CFG1_0_WORD_COUNT                  0x1
#define AHB_AHB_MEM_PREFETCH_CFG1_0_RESET_VAL                   _MK_MASK_CONST(0x14800800)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_RESET_MASK                  _MK_MASK_CONST(0xffffffff)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_WRITE_MASK                  _MK_MASK_CONST(0xffe0ffff)
// 1=enable 0=disable
#define AHB_AHB_MEM_PREFETCH_CFG1_0_ENABLE_SHIFT                        _MK_SHIFT_CONST(31)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_ENABLE_FIELD                        (_MK_MASK_CONST(0x1) << AHB_AHB_MEM_PREFETCH_CFG1_0_ENABLE_SHIFT)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_ENABLE_RANGE                        31:31
#define AHB_AHB_MEM_PREFETCH_CFG1_0_ENABLE_WOFFSET                      0x0
#define AHB_AHB_MEM_PREFETCH_CFG1_0_ENABLE_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_ENABLE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_ENABLE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_ENABLE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// AHBDMA master
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_SHIFT                    _MK_SHIFT_CONST(26)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_FIELD                    (_MK_MASK_CONST(0x1f) << AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_SHIFT)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_RANGE                    30:26
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_WOFFSET                  0x0
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_DEFAULT                  _MK_MASK_CONST(0x5)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_DEFAULT_MASK                     _MK_MASK_CONST(0x1f)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_CPU                      _MK_ENUM_CONST(0)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_COP                      _MK_ENUM_CONST(1)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_VCP                      _MK_ENUM_CONST(2)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_UNUSED_03                        _MK_ENUM_CONST(3)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_IDE                      _MK_ENUM_CONST(4)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_AHBDMA                   _MK_ENUM_CONST(5)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_USB                      _MK_ENUM_CONST(6)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_APBDMA                   _MK_ENUM_CONST(7)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_XIO                      _MK_ENUM_CONST(8)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_SDIO1                    _MK_ENUM_CONST(9)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_SDMMC1                   _MK_ENUM_CONST(9)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_NAND_FLASH                       _MK_ENUM_CONST(10)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_SNOR                     _MK_ENUM_CONST(11)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_HSMMC                    _MK_ENUM_CONST(12)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_BSEV                     _MK_ENUM_CONST(13)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_UNUSED_0E                        _MK_ENUM_CONST(14)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_UNUSED_0F                        _MK_ENUM_CONST(15)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_SDMMC4                   _MK_ENUM_CONST(12)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_BSEA                     _MK_ENUM_CONST(16)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_USB3                     _MK_ENUM_CONST(17)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_USB2                     _MK_ENUM_CONST(18)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_SDIO2                    _MK_ENUM_CONST(19)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_SDMMC2                   _MK_ENUM_CONST(19)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_SDMMC3                   _MK_ENUM_CONST(20)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_UNUSED_15                        _MK_ENUM_CONST(21)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_UNUSED_16                        _MK_ENUM_CONST(22)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_UNUSED_17                        _MK_ENUM_CONST(23)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_UNUSED_18                        _MK_ENUM_CONST(24)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_UNUSED_19                        _MK_ENUM_CONST(25)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_UNUSED_1A                        _MK_ENUM_CONST(26)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_UNUSED_1B                        _MK_ENUM_CONST(27)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_UNUSED_1C                        _MK_ENUM_CONST(28)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_UNUSED_1D                        _MK_ENUM_CONST(29)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_UNUSED_1E                        _MK_ENUM_CONST(30)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_AHB_MST_ID_UNUSED_1F                        _MK_ENUM_CONST(31)

// 2^(n+4) byte boundary. any value >16 will use n=16
#define AHB_AHB_MEM_PREFETCH_CFG1_0_ADDR_BNDRY_SHIFT                    _MK_SHIFT_CONST(21)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_ADDR_BNDRY_FIELD                    (_MK_MASK_CONST(0x1f) << AHB_AHB_MEM_PREFETCH_CFG1_0_ADDR_BNDRY_SHIFT)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_ADDR_BNDRY_RANGE                    25:21
#define AHB_AHB_MEM_PREFETCH_CFG1_0_ADDR_BNDRY_WOFFSET                  0x0
#define AHB_AHB_MEM_PREFETCH_CFG1_0_ADDR_BNDRY_DEFAULT                  _MK_MASK_CONST(0x4)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_ADDR_BNDRY_DEFAULT_MASK                     _MK_MASK_CONST(0x1f)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_ADDR_BNDRY_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_ADDR_BNDRY_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// not used for AP-20 and beyond (last used in AP15)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_SPEC_THROTTLE_SHIFT                 _MK_SHIFT_CONST(16)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_SPEC_THROTTLE_FIELD                 (_MK_MASK_CONST(0x1f) << AHB_AHB_MEM_PREFETCH_CFG1_0_SPEC_THROTTLE_SHIFT)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_SPEC_THROTTLE_RANGE                 20:16
#define AHB_AHB_MEM_PREFETCH_CFG1_0_SPEC_THROTTLE_WOFFSET                       0x0
#define AHB_AHB_MEM_PREFETCH_CFG1_0_SPEC_THROTTLE_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_SPEC_THROTTLE_DEFAULT_MASK                  _MK_MASK_CONST(0x1f)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_SPEC_THROTTLE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_SPEC_THROTTLE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// 2048 cycles
#define AHB_AHB_MEM_PREFETCH_CFG1_0_INACTIVITY_TIMEOUT_SHIFT                    _MK_SHIFT_CONST(0)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_INACTIVITY_TIMEOUT_FIELD                    (_MK_MASK_CONST(0xffff) << AHB_AHB_MEM_PREFETCH_CFG1_0_INACTIVITY_TIMEOUT_SHIFT)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_INACTIVITY_TIMEOUT_RANGE                    15:0
#define AHB_AHB_MEM_PREFETCH_CFG1_0_INACTIVITY_TIMEOUT_WOFFSET                  0x0
#define AHB_AHB_MEM_PREFETCH_CFG1_0_INACTIVITY_TIMEOUT_DEFAULT                  _MK_MASK_CONST(0x800)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_INACTIVITY_TIMEOUT_DEFAULT_MASK                     _MK_MASK_CONST(0xffff)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_INACTIVITY_TIMEOUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG1_0_INACTIVITY_TIMEOUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// 0x6000_C0F4: ahbslv prefetch cfg2 --> reset value = 0x1883.0800.

// Register AHB_AHB_MEM_PREFETCH_CFG2_0  
#define AHB_AHB_MEM_PREFETCH_CFG2_0                     _MK_ADDR_CONST(0xf0)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_SECURE                      0x0
#define AHB_AHB_MEM_PREFETCH_CFG2_0_WORD_COUNT                  0x1
#define AHB_AHB_MEM_PREFETCH_CFG2_0_RESET_VAL                   _MK_MASK_CONST(0x18800800)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_RESET_MASK                  _MK_MASK_CONST(0xffffffff)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_WRITE_MASK                  _MK_MASK_CONST(0xffe0ffff)
// 1=enable 0=disable
#define AHB_AHB_MEM_PREFETCH_CFG2_0_ENABLE_SHIFT                        _MK_SHIFT_CONST(31)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_ENABLE_FIELD                        (_MK_MASK_CONST(0x1) << AHB_AHB_MEM_PREFETCH_CFG2_0_ENABLE_SHIFT)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_ENABLE_RANGE                        31:31
#define AHB_AHB_MEM_PREFETCH_CFG2_0_ENABLE_WOFFSET                      0x0
#define AHB_AHB_MEM_PREFETCH_CFG2_0_ENABLE_DEFAULT                      _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_ENABLE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_ENABLE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_ENABLE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// USB
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_SHIFT                    _MK_SHIFT_CONST(26)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_FIELD                    (_MK_MASK_CONST(0x1f) << AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_SHIFT)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_RANGE                    30:26
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_WOFFSET                  0x0
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_DEFAULT                  _MK_MASK_CONST(0x6)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_DEFAULT_MASK                     _MK_MASK_CONST(0x1f)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_CPU                      _MK_ENUM_CONST(0)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_COP                      _MK_ENUM_CONST(1)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_VCP                      _MK_ENUM_CONST(2)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_UNUSED_03                        _MK_ENUM_CONST(3)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_IDE                      _MK_ENUM_CONST(4)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_AHBDMA                   _MK_ENUM_CONST(5)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_USB                      _MK_ENUM_CONST(6)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_APBDMA                   _MK_ENUM_CONST(7)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_XIO                      _MK_ENUM_CONST(8)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_SDIO1                    _MK_ENUM_CONST(9)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_SDMMC1                   _MK_ENUM_CONST(9)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_NAND_FLASH                       _MK_ENUM_CONST(10)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_SNOR                     _MK_ENUM_CONST(11)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_HSMMC                    _MK_ENUM_CONST(12)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_BSEV                     _MK_ENUM_CONST(13)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_UNUSED_0E                        _MK_ENUM_CONST(14)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_UNUSED_0F                        _MK_ENUM_CONST(15)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_SDMMC4                   _MK_ENUM_CONST(12)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_BSEA                     _MK_ENUM_CONST(16)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_USB3                     _MK_ENUM_CONST(17)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_USB2                     _MK_ENUM_CONST(18)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_SDIO2                    _MK_ENUM_CONST(19)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_SDMMC2                   _MK_ENUM_CONST(19)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_SDMMC3                   _MK_ENUM_CONST(20)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_UNUSED_15                        _MK_ENUM_CONST(21)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_UNUSED_16                        _MK_ENUM_CONST(22)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_UNUSED_17                        _MK_ENUM_CONST(23)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_UNUSED_18                        _MK_ENUM_CONST(24)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_UNUSED_19                        _MK_ENUM_CONST(25)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_UNUSED_1A                        _MK_ENUM_CONST(26)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_UNUSED_1B                        _MK_ENUM_CONST(27)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_UNUSED_1C                        _MK_ENUM_CONST(28)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_UNUSED_1D                        _MK_ENUM_CONST(29)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_UNUSED_1E                        _MK_ENUM_CONST(30)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_AHB_MST_ID_UNUSED_1F                        _MK_ENUM_CONST(31)

// 2^(n+4) byte boundary. any value >16 will use n=16
#define AHB_AHB_MEM_PREFETCH_CFG2_0_ADDR_BNDRY_SHIFT                    _MK_SHIFT_CONST(21)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_ADDR_BNDRY_FIELD                    (_MK_MASK_CONST(0x1f) << AHB_AHB_MEM_PREFETCH_CFG2_0_ADDR_BNDRY_SHIFT)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_ADDR_BNDRY_RANGE                    25:21
#define AHB_AHB_MEM_PREFETCH_CFG2_0_ADDR_BNDRY_WOFFSET                  0x0
#define AHB_AHB_MEM_PREFETCH_CFG2_0_ADDR_BNDRY_DEFAULT                  _MK_MASK_CONST(0x4)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_ADDR_BNDRY_DEFAULT_MASK                     _MK_MASK_CONST(0x1f)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_ADDR_BNDRY_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_ADDR_BNDRY_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// not used for AP-20 and beyond (last used in AP15)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_SPEC_THROTTLE_SHIFT                 _MK_SHIFT_CONST(16)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_SPEC_THROTTLE_FIELD                 (_MK_MASK_CONST(0x1f) << AHB_AHB_MEM_PREFETCH_CFG2_0_SPEC_THROTTLE_SHIFT)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_SPEC_THROTTLE_RANGE                 20:16
#define AHB_AHB_MEM_PREFETCH_CFG2_0_SPEC_THROTTLE_WOFFSET                       0x0
#define AHB_AHB_MEM_PREFETCH_CFG2_0_SPEC_THROTTLE_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_SPEC_THROTTLE_DEFAULT_MASK                  _MK_MASK_CONST(0x1f)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_SPEC_THROTTLE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_SPEC_THROTTLE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// 
#define AHB_AHB_MEM_PREFETCH_CFG2_0_INACTIVITY_TIMEOUT_SHIFT                    _MK_SHIFT_CONST(0)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_INACTIVITY_TIMEOUT_FIELD                    (_MK_MASK_CONST(0xffff) << AHB_AHB_MEM_PREFETCH_CFG2_0_INACTIVITY_TIMEOUT_SHIFT)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_INACTIVITY_TIMEOUT_RANGE                    15:0
#define AHB_AHB_MEM_PREFETCH_CFG2_0_INACTIVITY_TIMEOUT_WOFFSET                  0x0
#define AHB_AHB_MEM_PREFETCH_CFG2_0_INACTIVITY_TIMEOUT_DEFAULT                  _MK_MASK_CONST(0x800)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_INACTIVITY_TIMEOUT_DEFAULT_MASK                     _MK_MASK_CONST(0xffff)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_INACTIVITY_TIMEOUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_AHB_MEM_PREFETCH_CFG2_0_INACTIVITY_TIMEOUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// 0x6000_C0F8: ahbslv outstanding rd, rdque_empty status

// Register AHB_AHBSLVMEM_STATUS_0  
#define AHB_AHBSLVMEM_STATUS_0                  _MK_ADDR_CONST(0xf4)
#define AHB_AHBSLVMEM_STATUS_0_SECURE                   0x0
#define AHB_AHBSLVMEM_STATUS_0_WORD_COUNT                       0x1
#define AHB_AHBSLVMEM_STATUS_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define AHB_AHBSLVMEM_STATUS_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define AHB_AHBSLVMEM_STATUS_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define AHB_AHBSLVMEM_STATUS_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_AHBSLVMEM_STATUS_0_READ_MASK                        _MK_MASK_CONST(0x3)
#define AHB_AHBSLVMEM_STATUS_0_WRITE_MASK                       _MK_MASK_CONST(0x0)
#define AHB_AHBSLVMEM_STATUS_0_PPCS_RDS_OUTSTANDING_SHIFT                       _MK_SHIFT_CONST(1)
#define AHB_AHBSLVMEM_STATUS_0_PPCS_RDS_OUTSTANDING_FIELD                       (_MK_MASK_CONST(0x1) << AHB_AHBSLVMEM_STATUS_0_PPCS_RDS_OUTSTANDING_SHIFT)
#define AHB_AHBSLVMEM_STATUS_0_PPCS_RDS_OUTSTANDING_RANGE                       1:1
#define AHB_AHBSLVMEM_STATUS_0_PPCS_RDS_OUTSTANDING_WOFFSET                     0x0
#define AHB_AHBSLVMEM_STATUS_0_PPCS_RDS_OUTSTANDING_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_AHBSLVMEM_STATUS_0_PPCS_RDS_OUTSTANDING_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_AHBSLVMEM_STATUS_0_PPCS_RDS_OUTSTANDING_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_AHBSLVMEM_STATUS_0_PPCS_RDS_OUTSTANDING_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

#define AHB_AHBSLVMEM_STATUS_0_GIZMO_IP_RDQUE_EMPTY_SHIFT                       _MK_SHIFT_CONST(0)
#define AHB_AHBSLVMEM_STATUS_0_GIZMO_IP_RDQUE_EMPTY_FIELD                       (_MK_MASK_CONST(0x1) << AHB_AHBSLVMEM_STATUS_0_GIZMO_IP_RDQUE_EMPTY_SHIFT)
#define AHB_AHBSLVMEM_STATUS_0_GIZMO_IP_RDQUE_EMPTY_RANGE                       0:0
#define AHB_AHBSLVMEM_STATUS_0_GIZMO_IP_RDQUE_EMPTY_WOFFSET                     0x0
#define AHB_AHBSLVMEM_STATUS_0_GIZMO_IP_RDQUE_EMPTY_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_AHBSLVMEM_STATUS_0_GIZMO_IP_RDQUE_EMPTY_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_AHBSLVMEM_STATUS_0_GIZMO_IP_RDQUE_EMPTY_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_AHBSLVMEM_STATUS_0_GIZMO_IP_RDQUE_EMPTY_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// 0x6000_C0FC: AHB Memory Write Queue AHB Master ID Register

// Register AHB_ARBITRATION_AHB_MEM_WRQUE_MST_ID_0  
#define AHB_ARBITRATION_AHB_MEM_WRQUE_MST_ID_0                  _MK_ADDR_CONST(0xf8)
#define AHB_ARBITRATION_AHB_MEM_WRQUE_MST_ID_0_SECURE                   0x0
#define AHB_ARBITRATION_AHB_MEM_WRQUE_MST_ID_0_WORD_COUNT                       0x1
#define AHB_ARBITRATION_AHB_MEM_WRQUE_MST_ID_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_AHB_MEM_WRQUE_MST_ID_0_RESET_MASK                       _MK_MASK_CONST(0x7fffffff)
#define AHB_ARBITRATION_AHB_MEM_WRQUE_MST_ID_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_AHB_MEM_WRQUE_MST_ID_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_AHB_MEM_WRQUE_MST_ID_0_READ_MASK                        _MK_MASK_CONST(0x7fffffff)
#define AHB_ARBITRATION_AHB_MEM_WRQUE_MST_ID_0_WRITE_MASK                       _MK_MASK_CONST(0x7fffffff)
// 0 = there is no write data in the write queue from  that AHB master.
#define AHB_ARBITRATION_AHB_MEM_WRQUE_MST_ID_0_AHB_MASTER_ID_SHIFT                      _MK_SHIFT_CONST(0)
#define AHB_ARBITRATION_AHB_MEM_WRQUE_MST_ID_0_AHB_MASTER_ID_FIELD                      (_MK_MASK_CONST(0x7fffffff) << AHB_ARBITRATION_AHB_MEM_WRQUE_MST_ID_0_AHB_MASTER_ID_SHIFT)
#define AHB_ARBITRATION_AHB_MEM_WRQUE_MST_ID_0_AHB_MASTER_ID_RANGE                      30:0
#define AHB_ARBITRATION_AHB_MEM_WRQUE_MST_ID_0_AHB_MASTER_ID_WOFFSET                    0x0
#define AHB_ARBITRATION_AHB_MEM_WRQUE_MST_ID_0_AHB_MASTER_ID_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_AHB_MEM_WRQUE_MST_ID_0_AHB_MASTER_ID_DEFAULT_MASK                       _MK_MASK_CONST(0x7fffffff)
#define AHB_ARBITRATION_AHB_MEM_WRQUE_MST_ID_0_AHB_MASTER_ID_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_AHB_MEM_WRQUE_MST_ID_0_AHB_MASTER_ID_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// 0x6000_C100: CPU Abort Info Register

// Register AHB_ARBITRATION_CPU_ABORT_INFO_0  
#define AHB_ARBITRATION_CPU_ABORT_INFO_0                        _MK_ADDR_CONST(0xfc)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_SECURE                         0x0
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_WORD_COUNT                     0x1
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_RESET_MASK                     _MK_MASK_CONST(0xffff)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_READ_MASK                      _MK_MASK_CONST(0xffff)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_WRITE_MASK                     _MK_MASK_CONST(0x0)
// Abort occurred due to an iRAMa protection  violation
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMA_SHIFT                    _MK_SHIFT_CONST(15)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMA_FIELD                    (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMA_SHIFT)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMA_RANGE                    15:15
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMA_WOFFSET                  0x0
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMA_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMA_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMA_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMA_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMA_ABT_DIS                  _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMA_ABT_EN                   _MK_ENUM_CONST(1)

// Abort occurred due to an iRAMb protection  violation
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMB_SHIFT                    _MK_SHIFT_CONST(14)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMB_FIELD                    (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMB_SHIFT)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMB_RANGE                    14:14
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMB_WOFFSET                  0x0
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMB_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMB_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMB_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMB_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMB_ABT_DIS                  _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMB_ABT_EN                   _MK_ENUM_CONST(1)

// Abort occurred due to an iRAMc protection  violation
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMC_SHIFT                    _MK_SHIFT_CONST(13)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMC_FIELD                    (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMC_SHIFT)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMC_RANGE                    13:13
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMC_WOFFSET                  0x0
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMC_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMC_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMC_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMC_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMC_ABT_DIS                  _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMC_ABT_EN                   _MK_ENUM_CONST(1)

// Abort occurred due to an iRAMd protection  violation
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMD_SHIFT                    _MK_SHIFT_CONST(12)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMD_FIELD                    (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMD_SHIFT)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMD_RANGE                    12:12
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMD_WOFFSET                  0x0
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMD_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMD_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMD_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMD_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMD_ABT_DIS                  _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_IRAMD_ABT_EN                   _MK_ENUM_CONST(1)

// Abort occurred due to an access to invalid iRAM  address space
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_INV_IRAM_SHIFT                 _MK_SHIFT_CONST(11)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_INV_IRAM_FIELD                 (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_CPU_ABORT_INFO_0_INV_IRAM_SHIFT)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_INV_IRAM_RANGE                 11:11
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_INV_IRAM_WOFFSET                       0x0
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_INV_IRAM_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_INV_IRAM_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_INV_IRAM_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_INV_IRAM_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_INV_IRAM_ABT_DIS                       _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_INV_IRAM_ABT_EN                        _MK_ENUM_CONST(1)

// Abort occurred due to a PPSB protection violation
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_PPSB_SHIFT                     _MK_SHIFT_CONST(10)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_PPSB_FIELD                     (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_CPU_ABORT_INFO_0_PPSB_SHIFT)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_PPSB_RANGE                     10:10
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_PPSB_WOFFSET                   0x0
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_PPSB_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_PPSB_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_PPSB_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_PPSB_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_PPSB_ABT_DIS                   _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_PPSB_ABT_EN                    _MK_ENUM_CONST(1)

// Abort occurred due to an APB protection violation
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_APB_SHIFT                      _MK_SHIFT_CONST(9)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_APB_FIELD                      (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_CPU_ABORT_INFO_0_APB_SHIFT)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_APB_RANGE                      9:9
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_APB_WOFFSET                    0x0
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_APB_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_APB_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_APB_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_APB_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_APB_ABT_DIS                    _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_APB_ABT_EN                     _MK_ENUM_CONST(1)

// Abort occurred due to an AHB protection violation
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_AHB_SHIFT                      _MK_SHIFT_CONST(8)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_AHB_FIELD                      (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_CPU_ABORT_INFO_0_AHB_SHIFT)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_AHB_RANGE                      8:8
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_AHB_WOFFSET                    0x0
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_AHB_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_AHB_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_AHB_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_AHB_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_AHB_ABT_DIS                    _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_AHB_ABT_EN                     _MK_ENUM_CONST(1)

// Abort occurred due to a Cache protection violation
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_CACHE_SHIFT                    _MK_SHIFT_CONST(7)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_CACHE_FIELD                    (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_CPU_ABORT_INFO_0_CACHE_SHIFT)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_CACHE_RANGE                    7:7
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_CACHE_WOFFSET                  0x0
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_CACHE_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_CACHE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_CACHE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_CACHE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_CACHE_ABT_DIS                  _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_CACHE_ABT_EN                   _MK_ENUM_CONST(1)

// TRUE for any protection violation
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_PROTECTION_SHIFT                       _MK_SHIFT_CONST(6)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_PROTECTION_FIELD                       (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_CPU_ABORT_INFO_0_PROTECTION_SHIFT)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_PROTECTION_RANGE                       6:6
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_PROTECTION_WOFFSET                     0x0
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_PROTECTION_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_PROTECTION_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_PROTECTION_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_PROTECTION_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_PROTECTION_ABT_DIS                     _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_PROTECTION_ABT_EN                      _MK_ENUM_CONST(1)

// TRUE for abort caused by Misalignment (i.e. word  access at odd byte address)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_ALIGN_SHIFT                    _MK_SHIFT_CONST(5)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_ALIGN_FIELD                    (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_CPU_ABORT_INFO_0_ALIGN_SHIFT)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_ALIGN_RANGE                    5:5
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_ALIGN_WOFFSET                  0x0
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_ALIGN_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_ALIGN_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_ALIGN_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_ALIGN_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_ALIGN_ABT_DIS                  _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_ALIGN_ABT_EN                   _MK_ENUM_CONST(1)

// TRUE for abort caused by Bad Size (i.e. word  access at odd byte address)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_BADSIZE_SHIFT                  _MK_SHIFT_CONST(4)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_BADSIZE_FIELD                  (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_CPU_ABORT_INFO_0_BADSIZE_SHIFT)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_BADSIZE_RANGE                  4:4
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_BADSIZE_WOFFSET                        0x0
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_BADSIZE_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_BADSIZE_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_BADSIZE_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_BADSIZE_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_BADSIZE_ABT_DIS                        _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_BADSIZE_ABT_EN                 _MK_ENUM_CONST(1)

// Aborted transaction was a Write
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_WRITE_SHIFT                    _MK_SHIFT_CONST(3)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_WRITE_FIELD                    (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_CPU_ABORT_INFO_0_WRITE_SHIFT)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_WRITE_RANGE                    3:3
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_WRITE_WOFFSET                  0x0
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_WRITE_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_WRITE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_WRITE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_WRITE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_WRITE_ABT_DIS                  _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_WRITE_ABT_EN                   _MK_ENUM_CONST(1)

// Aborted transaction was a Data access
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_DATA_SHIFT                     _MK_SHIFT_CONST(2)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_DATA_FIELD                     (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_CPU_ABORT_INFO_0_DATA_SHIFT)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_DATA_RANGE                     2:2
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_DATA_WOFFSET                   0x0
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_DATA_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_DATA_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_DATA_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_DATA_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_DATA_ABT_DIS                   _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_DATA_ABT_EN                    _MK_ENUM_CONST(1)

// Aborted transaction Request Size 00=byte,  01=hword, 10=word
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_SIZE_SHIFT                     _MK_SHIFT_CONST(0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_SIZE_FIELD                     (_MK_MASK_CONST(0x3) << AHB_ARBITRATION_CPU_ABORT_INFO_0_SIZE_SHIFT)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_SIZE_RANGE                     1:0
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_SIZE_WOFFSET                   0x0
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_SIZE_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_SIZE_DEFAULT_MASK                      _MK_MASK_CONST(0x3)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_SIZE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_SIZE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_SIZE_BYTE_ABT                  _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_SIZE_HWORD_ABT                 _MK_ENUM_CONST(1)
#define AHB_ARBITRATION_CPU_ABORT_INFO_0_SIZE_WORD_ABT                  _MK_ENUM_CONST(2)

// 0x6000_C104: CPU Abort Address Register

// Register AHB_ARBITRATION_CPU_ABORT_ADDR_0  
#define AHB_ARBITRATION_CPU_ABORT_ADDR_0                        _MK_ADDR_CONST(0x100)
#define AHB_ARBITRATION_CPU_ABORT_ADDR_0_SECURE                         0x0
#define AHB_ARBITRATION_CPU_ABORT_ADDR_0_WORD_COUNT                     0x1
#define AHB_ARBITRATION_CPU_ABORT_ADDR_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_ADDR_0_RESET_MASK                     _MK_MASK_CONST(0xffffffff)
#define AHB_ARBITRATION_CPU_ABORT_ADDR_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_ADDR_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_ADDR_0_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define AHB_ARBITRATION_CPU_ABORT_ADDR_0_WRITE_MASK                     _MK_MASK_CONST(0x0)
// Instruction Address which caused the abort
#define AHB_ARBITRATION_CPU_ABORT_ADDR_0_ADDR_SHIFT                     _MK_SHIFT_CONST(0)
#define AHB_ARBITRATION_CPU_ABORT_ADDR_0_ADDR_FIELD                     (_MK_MASK_CONST(0xffffffff) << AHB_ARBITRATION_CPU_ABORT_ADDR_0_ADDR_SHIFT)
#define AHB_ARBITRATION_CPU_ABORT_ADDR_0_ADDR_RANGE                     31:0
#define AHB_ARBITRATION_CPU_ABORT_ADDR_0_ADDR_WOFFSET                   0x0
#define AHB_ARBITRATION_CPU_ABORT_ADDR_0_ADDR_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_ADDR_0_ADDR_DEFAULT_MASK                      _MK_MASK_CONST(0xffffffff)
#define AHB_ARBITRATION_CPU_ABORT_ADDR_0_ADDR_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_CPU_ABORT_ADDR_0_ADDR_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// 0x6000_C108: COP Abort Info Register

// Register AHB_ARBITRATION_COP_ABORT_INFO_0  
#define AHB_ARBITRATION_COP_ABORT_INFO_0                        _MK_ADDR_CONST(0x104)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_SECURE                         0x0
#define AHB_ARBITRATION_COP_ABORT_INFO_0_WORD_COUNT                     0x1
#define AHB_ARBITRATION_COP_ABORT_INFO_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_RESET_MASK                     _MK_MASK_CONST(0xe7ff)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_READ_MASK                      _MK_MASK_CONST(0xe7ff)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_WRITE_MASK                     _MK_MASK_CONST(0x0)
// Abort occurred due to an iRAMa protection  violation
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMA_SHIFT                    _MK_SHIFT_CONST(15)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMA_FIELD                    (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMA_SHIFT)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMA_RANGE                    15:15
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMA_WOFFSET                  0x0
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMA_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMA_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMA_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMA_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMA_ABT_DIS                  _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMA_ABT_EN                   _MK_ENUM_CONST(1)

// Abort occurred due to an iRAMb protection  violation
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMB_SHIFT                    _MK_SHIFT_CONST(14)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMB_FIELD                    (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMB_SHIFT)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMB_RANGE                    14:14
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMB_WOFFSET                  0x0
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMB_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMB_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMB_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMB_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMB_ABT_DIS                  _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMB_ABT_EN                   _MK_ENUM_CONST(1)

// Abort occurred due to an iRAMc protection  violation
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMC_SHIFT                    _MK_SHIFT_CONST(13)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMC_FIELD                    (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMC_SHIFT)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMC_RANGE                    13:13
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMC_WOFFSET                  0x0
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMC_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMC_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMC_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMC_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMC_ABT_DIS                  _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_IRAMC_ABT_EN                   _MK_ENUM_CONST(1)

// Abort occurred due to a PPSB protection violation
#define AHB_ARBITRATION_COP_ABORT_INFO_0_PPSB_SHIFT                     _MK_SHIFT_CONST(10)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_PPSB_FIELD                     (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_COP_ABORT_INFO_0_PPSB_SHIFT)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_PPSB_RANGE                     10:10
#define AHB_ARBITRATION_COP_ABORT_INFO_0_PPSB_WOFFSET                   0x0
#define AHB_ARBITRATION_COP_ABORT_INFO_0_PPSB_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_PPSB_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_PPSB_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_PPSB_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_PPSB_ABT_DIS                   _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_PPSB_ABT_EN                    _MK_ENUM_CONST(1)

// Abort occurred due to an APB protection violation
#define AHB_ARBITRATION_COP_ABORT_INFO_0_APB_SHIFT                      _MK_SHIFT_CONST(9)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_APB_FIELD                      (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_COP_ABORT_INFO_0_APB_SHIFT)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_APB_RANGE                      9:9
#define AHB_ARBITRATION_COP_ABORT_INFO_0_APB_WOFFSET                    0x0
#define AHB_ARBITRATION_COP_ABORT_INFO_0_APB_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_APB_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_APB_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_APB_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_APB_ABT_DIS                    _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_APB_ABT_EN                     _MK_ENUM_CONST(1)

// Abort occurred due to an AHB protection violation
#define AHB_ARBITRATION_COP_ABORT_INFO_0_AHB_SHIFT                      _MK_SHIFT_CONST(8)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_AHB_FIELD                      (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_COP_ABORT_INFO_0_AHB_SHIFT)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_AHB_RANGE                      8:8
#define AHB_ARBITRATION_COP_ABORT_INFO_0_AHB_WOFFSET                    0x0
#define AHB_ARBITRATION_COP_ABORT_INFO_0_AHB_DEFAULT                    _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_AHB_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_AHB_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_AHB_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_AHB_ABT_DIS                    _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_AHB_ABT_EN                     _MK_ENUM_CONST(1)

// Abort occurred due to a Cache protection violation
#define AHB_ARBITRATION_COP_ABORT_INFO_0_CACHE_SHIFT                    _MK_SHIFT_CONST(7)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_CACHE_FIELD                    (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_COP_ABORT_INFO_0_CACHE_SHIFT)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_CACHE_RANGE                    7:7
#define AHB_ARBITRATION_COP_ABORT_INFO_0_CACHE_WOFFSET                  0x0
#define AHB_ARBITRATION_COP_ABORT_INFO_0_CACHE_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_CACHE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_CACHE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_CACHE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_CACHE_ABT_DIS                  _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_CACHE_ABT_EN                   _MK_ENUM_CONST(1)

// TRUE for any protection violation
#define AHB_ARBITRATION_COP_ABORT_INFO_0_PROTECTION_SHIFT                       _MK_SHIFT_CONST(6)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_PROTECTION_FIELD                       (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_COP_ABORT_INFO_0_PROTECTION_SHIFT)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_PROTECTION_RANGE                       6:6
#define AHB_ARBITRATION_COP_ABORT_INFO_0_PROTECTION_WOFFSET                     0x0
#define AHB_ARBITRATION_COP_ABORT_INFO_0_PROTECTION_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_PROTECTION_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_PROTECTION_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_PROTECTION_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_PROTECTION_ABT_DIS                     _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_PROTECTION_ABT_EN                      _MK_ENUM_CONST(1)

// TRUE for abort caused by Misalignment (i.e. word  access at odd byte address)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_ALIGN_SHIFT                    _MK_SHIFT_CONST(5)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_ALIGN_FIELD                    (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_COP_ABORT_INFO_0_ALIGN_SHIFT)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_ALIGN_RANGE                    5:5
#define AHB_ARBITRATION_COP_ABORT_INFO_0_ALIGN_WOFFSET                  0x0
#define AHB_ARBITRATION_COP_ABORT_INFO_0_ALIGN_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_ALIGN_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_ALIGN_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_ALIGN_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_ALIGN_ABT_DIS                  _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_ALIGN_ABT_EN                   _MK_ENUM_CONST(1)

// TRUE for abort caused by Bad Size (i.e. word  access at odd byte address)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_BADSIZE_SHIFT                  _MK_SHIFT_CONST(4)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_BADSIZE_FIELD                  (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_COP_ABORT_INFO_0_BADSIZE_SHIFT)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_BADSIZE_RANGE                  4:4
#define AHB_ARBITRATION_COP_ABORT_INFO_0_BADSIZE_WOFFSET                        0x0
#define AHB_ARBITRATION_COP_ABORT_INFO_0_BADSIZE_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_BADSIZE_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_BADSIZE_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_BADSIZE_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_BADSIZE_ABT_DIS                        _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_BADSIZE_ABT_EN                 _MK_ENUM_CONST(1)

// Aborted transaction was a Write
#define AHB_ARBITRATION_COP_ABORT_INFO_0_WRITE_SHIFT                    _MK_SHIFT_CONST(3)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_WRITE_FIELD                    (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_COP_ABORT_INFO_0_WRITE_SHIFT)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_WRITE_RANGE                    3:3
#define AHB_ARBITRATION_COP_ABORT_INFO_0_WRITE_WOFFSET                  0x0
#define AHB_ARBITRATION_COP_ABORT_INFO_0_WRITE_DEFAULT                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_WRITE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_WRITE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_WRITE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_WRITE_ABT_DIS                  _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_WRITE_ABT_EN                   _MK_ENUM_CONST(1)

// Aborted transaction was a Data access
#define AHB_ARBITRATION_COP_ABORT_INFO_0_DATA_SHIFT                     _MK_SHIFT_CONST(2)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_DATA_FIELD                     (_MK_MASK_CONST(0x1) << AHB_ARBITRATION_COP_ABORT_INFO_0_DATA_SHIFT)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_DATA_RANGE                     2:2
#define AHB_ARBITRATION_COP_ABORT_INFO_0_DATA_WOFFSET                   0x0
#define AHB_ARBITRATION_COP_ABORT_INFO_0_DATA_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_DATA_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_DATA_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_DATA_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_DATA_ABT_DIS                   _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_DATA_ABT_EN                    _MK_ENUM_CONST(1)

// Aborted transaction Request Size 00=byte,  01=hword, 10=word
#define AHB_ARBITRATION_COP_ABORT_INFO_0_SIZE_SHIFT                     _MK_SHIFT_CONST(0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_SIZE_FIELD                     (_MK_MASK_CONST(0x3) << AHB_ARBITRATION_COP_ABORT_INFO_0_SIZE_SHIFT)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_SIZE_RANGE                     1:0
#define AHB_ARBITRATION_COP_ABORT_INFO_0_SIZE_WOFFSET                   0x0
#define AHB_ARBITRATION_COP_ABORT_INFO_0_SIZE_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_SIZE_DEFAULT_MASK                      _MK_MASK_CONST(0x3)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_SIZE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_SIZE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_SIZE_BYTE_ABT                  _MK_ENUM_CONST(0)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_SIZE_HWORD_ABT                 _MK_ENUM_CONST(1)
#define AHB_ARBITRATION_COP_ABORT_INFO_0_SIZE_WORD_ABT                  _MK_ENUM_CONST(2)

// 0x6000_C10C: COP Abort Address Register

// Register AHB_ARBITRATION_COP_ABORT_ADDR_0  
#define AHB_ARBITRATION_COP_ABORT_ADDR_0                        _MK_ADDR_CONST(0x108)
#define AHB_ARBITRATION_COP_ABORT_ADDR_0_SECURE                         0x0
#define AHB_ARBITRATION_COP_ABORT_ADDR_0_WORD_COUNT                     0x1
#define AHB_ARBITRATION_COP_ABORT_ADDR_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_ADDR_0_RESET_MASK                     _MK_MASK_CONST(0xffffffff)
#define AHB_ARBITRATION_COP_ABORT_ADDR_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_ADDR_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_ADDR_0_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define AHB_ARBITRATION_COP_ABORT_ADDR_0_WRITE_MASK                     _MK_MASK_CONST(0x0)
// Instruction Address which caused the abort
#define AHB_ARBITRATION_COP_ABORT_ADDR_0_ADDR_SHIFT                     _MK_SHIFT_CONST(0)
#define AHB_ARBITRATION_COP_ABORT_ADDR_0_ADDR_FIELD                     (_MK_MASK_CONST(0xffffffff) << AHB_ARBITRATION_COP_ABORT_ADDR_0_ADDR_SHIFT)
#define AHB_ARBITRATION_COP_ABORT_ADDR_0_ADDR_RANGE                     31:0
#define AHB_ARBITRATION_COP_ABORT_ADDR_0_ADDR_WOFFSET                   0x0
#define AHB_ARBITRATION_COP_ABORT_ADDR_0_ADDR_DEFAULT                   _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_ADDR_0_ADDR_DEFAULT_MASK                      _MK_MASK_CONST(0xffffffff)
#define AHB_ARBITRATION_COP_ABORT_ADDR_0_ADDR_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_ARBITRATION_COP_ABORT_ADDR_0_ADDR_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// 0x6000_C110 - 0x6001_C23C;
// 0x130 = 304 decimal = 76 registers * 4 bytes each

// Reserved address 268 [0x10c] 

// Reserved address 272 [0x110] 

// Reserved address 276 [0x114] 

// Reserved address 280 [0x118] 

// Reserved address 284 [0x11c] 

// Reserved address 288 [0x120] 

// Reserved address 292 [0x124] 

// Reserved address 296 [0x128] 

// Reserved address 300 [0x12c] 

// Reserved address 304 [0x130] 

// Reserved address 308 [0x134] 

// Reserved address 312 [0x138] 

// Reserved address 316 [0x13c] 

// Reserved address 320 [0x140] 

// Reserved address 324 [0x144] 

// Reserved address 328 [0x148] 

// Reserved address 332 [0x14c] 

// Reserved address 336 [0x150] 

// Reserved address 340 [0x154] 

// Reserved address 344 [0x158] 

// Reserved address 348 [0x15c] 

// Reserved address 352 [0x160] 

// Reserved address 356 [0x164] 

// Reserved address 360 [0x168] 

// Reserved address 364 [0x16c] 

// Reserved address 368 [0x170] 

// Reserved address 372 [0x174] 

// Reserved address 376 [0x178] 

// Reserved address 380 [0x17c] 

// Reserved address 384 [0x180] 

// Reserved address 388 [0x184] 

// Reserved address 392 [0x188] 

// Reserved address 396 [0x18c] 

// Reserved address 400 [0x190] 

// Reserved address 404 [0x194] 

// Reserved address 408 [0x198] 

// Reserved address 412 [0x19c] 

// Reserved address 416 [0x1a0] 

// Reserved address 420 [0x1a4] 

// Reserved address 424 [0x1a8] 

// Reserved address 428 [0x1ac] 

// Reserved address 432 [0x1b0] 

// Reserved address 436 [0x1b4] 

// Reserved address 440 [0x1b8] 

// Reserved address 444 [0x1bc] 

// Reserved address 448 [0x1c0] 

// Reserved address 452 [0x1c4] 

// Reserved address 456 [0x1c8] 

// Reserved address 460 [0x1cc] 

// Reserved address 464 [0x1d0] 

// Reserved address 468 [0x1d4] 

// Reserved address 472 [0x1d8] 

// Reserved address 476 [0x1dc] 

// Reserved address 480 [0x1e0] 

// Reserved address 484 [0x1e4] 

// Reserved address 488 [0x1e8] 

// Reserved address 492 [0x1ec] 

// Reserved address 496 [0x1f0] 

// Reserved address 500 [0x1f4] 

// Reserved address 504 [0x1f8] 

// Reserved address 508 [0x1fc] 

// Reserved address 512 [0x200] 

// Reserved address 516 [0x204] 

// Reserved address 520 [0x208] 

// Reserved address 524 [0x20c] 

// Reserved address 528 [0x210] 

// Reserved address 532 [0x214] 

// Reserved address 536 [0x218] 

// Reserved address 540 [0x21c] 

// Reserved address 544 [0x220] 

// Reserved address 548 [0x224] 

// Reserved address 552 [0x228] 

// Reserved address 556 [0x22c] 

// Reserved address 560 [0x230] 

// Reserved address 564 [0x234] 

// Reserved address 568 [0x238] 
// 0x6000_C240 - 0x6001_C28C:
// --------------------------------------------------
//   NV_AVPC_MCCIF configuration
// --------------------------------------------------
//                        new 
// base AVPC_MCCIF 0x6001_C040;
// 0x6000_C240:    rdcl_rdfast, wrmc_clle2x, rdmc_rdfast, wrcl_mcle2x (client or memory side clock control)
// 0x6000_C244:    avpc(arm7)w_wcoal_tmval (write coalesce timeout value)
// 0x6000_C248-84: 16 reserved registers
// 0x6000_C288-8C: reserved unused (for nice alignment)
// Memory Client Interface Fifo Control Register.
// The registers below allow to optimize the synchronization timing in
// the memory client asynchronous fifos. When they can be used depend on
// the client and memory controller clock ratio.
// Additionally, the RDMC_RDFAST/RDCL_RDFAST fields can increase power
// consumption if the asynchronous fifo is implemented as a real ram.
// There is no power impact on latch-based fifos. Flipflop-based fifos
// do not use these fields.
// See recommended settings below.
//
// !! IMPORTANT !!
// The register fields can only be changed when the memory client async
// fifos are empty.
//
// The register field ending with WRCL_MCLE2X (if any) can be set to improve
// async fifo synchronization on the write side by one client clock cycle if
// the memory controller clock frequency is less or equal to twice the client
// clock frequency:
//
//      mcclk_freq <= 2 * clientclk_freq
//
// The register field ending with WRMC_CLLE2X (if any) can be set to improve
// async fifo synchronization on the write side by one memory controller clock
// cycle if the client clock frequency is less or equal to twice the memory
// controller clock frequency:
//
//      clientclk_freq <= 2 * mcclk_freq
//
// The register field ending with RDMC_RDFAST (if any) can be set to improve async
// fifo synchronization on the read side by one memory controller clock cycle.
//
// !! WARNING !!
// RDMC_RDFAST can be used along with WRCL_MCLE2X only when:
//
//       mcclk_freq <= clientclk_freq
//
// The register field ending with RDCL_RDFAST (if any) can be set to improve async
// fifo synchronization on the read side by one client clock cycle.
//
// !! WARNING !!
// RDCL_RDFAST can be used along with WRMC_CLLE2X only when:
//
//       clientclk_freq <= mcclk_freq
//
// RECOMMENDED SETTINGS
// # Client writing to fifo, memory controller reading from fifo
// - mcclk_freq <= clientclk_freq
//     You can enable both RDMC_RDFAST and WRCL_CLLE2X. If one of the fifos is
//     a real ram and power is a concern, you should avoid enabling RDMC_RDFAST.
// - clientclk_freq < mcclk_freq <= 2 * clientclk_freq
//     You can enable RDMC_RDFAST or WRCL_MCLE2X, but because the client clock
//     is slower, you should enable only WRCL_MCLE2X.
// - 2 * clientclk_freq < mcclk_freq
//     You can only enable RDMC_RDFAST. If one of the fifos is a real ram and
//     power is a concern, you should avoid enabling RDMC_RDFAST.
//
// # Memory controller writing to fifo, client reading from fifo
// - clientclk_freq <= mcclk_freq
//     You can enable both RDCL_RDFAST and WRMC_CLLE2X. If one of the fifos is
//     a real ram and power is a concern, you should avoid enabling RDCL_RDFAST.
// - mcclk_freq < clientclk_freq <= 2 * mcclk_freq
//     You can enable RDCL_RDFAST or WRMC_CLLE2X, but because the memory controller
//     clock is slower, you should enable only WRMC_CLLE2X.
// - 2 * mcclk_freq < clientclk_freq
//     You can only enable RDCL_RDFAST. If one of the fifos is a real ram and
//     power is a concern, you should avoid enabling RDCL_RDFAST.
//

// Register AHB_AVPC_MCCIF_FIFOCTRL_0  
#define AHB_AVPC_MCCIF_FIFOCTRL_0                       _MK_ADDR_CONST(0x23c)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_SECURE                        0x0
#define AHB_AVPC_MCCIF_FIFOCTRL_0_WORD_COUNT                    0x1
#define AHB_AVPC_MCCIF_FIFOCTRL_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_RESET_MASK                    _MK_MASK_CONST(0xf)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_READ_MASK                     _MK_MASK_CONST(0xf)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_WRITE_MASK                    _MK_MASK_CONST(0xf)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_WRCL_MCLE2X_SHIFT                  _MK_SHIFT_CONST(0)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_WRCL_MCLE2X_FIELD                  (_MK_MASK_CONST(0x1) << AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_WRCL_MCLE2X_SHIFT)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_WRCL_MCLE2X_RANGE                  0:0
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_WRCL_MCLE2X_WOFFSET                        0x0
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_WRCL_MCLE2X_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_WRCL_MCLE2X_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_WRCL_MCLE2X_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_WRCL_MCLE2X_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_WRCL_MCLE2X_INIT_ENUM                      DISABLE
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_WRCL_MCLE2X_DISABLE                        _MK_ENUM_CONST(0)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_WRCL_MCLE2X_ENABLE                 _MK_ENUM_CONST(1)

#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_RDMC_RDFAST_SHIFT                  _MK_SHIFT_CONST(1)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_RDMC_RDFAST_FIELD                  (_MK_MASK_CONST(0x1) << AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_RDMC_RDFAST_SHIFT)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_RDMC_RDFAST_RANGE                  1:1
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_RDMC_RDFAST_WOFFSET                        0x0
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_RDMC_RDFAST_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_RDMC_RDFAST_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_RDMC_RDFAST_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_RDMC_RDFAST_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_RDMC_RDFAST_INIT_ENUM                      DISABLE
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_RDMC_RDFAST_DISABLE                        _MK_ENUM_CONST(0)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_RDMC_RDFAST_ENABLE                 _MK_ENUM_CONST(1)

#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_WRMC_CLLE2X_SHIFT                  _MK_SHIFT_CONST(2)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_WRMC_CLLE2X_FIELD                  (_MK_MASK_CONST(0x1) << AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_WRMC_CLLE2X_SHIFT)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_WRMC_CLLE2X_RANGE                  2:2
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_WRMC_CLLE2X_WOFFSET                        0x0
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_WRMC_CLLE2X_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_WRMC_CLLE2X_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_WRMC_CLLE2X_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_WRMC_CLLE2X_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_WRMC_CLLE2X_INIT_ENUM                      DISABLE
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_WRMC_CLLE2X_DISABLE                        _MK_ENUM_CONST(0)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_WRMC_CLLE2X_ENABLE                 _MK_ENUM_CONST(1)

#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_RDCL_RDFAST_SHIFT                  _MK_SHIFT_CONST(3)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_RDCL_RDFAST_FIELD                  (_MK_MASK_CONST(0x1) << AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_RDCL_RDFAST_SHIFT)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_RDCL_RDFAST_RANGE                  3:3
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_RDCL_RDFAST_WOFFSET                        0x0
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_RDCL_RDFAST_DEFAULT                        _MK_MASK_CONST(0x0)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_RDCL_RDFAST_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_RDCL_RDFAST_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_RDCL_RDFAST_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_RDCL_RDFAST_INIT_ENUM                      DISABLE
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_RDCL_RDFAST_DISABLE                        _MK_ENUM_CONST(0)
#define AHB_AVPC_MCCIF_FIFOCTRL_0_AVPC_MCCIF_RDCL_RDFAST_ENABLE                 _MK_ENUM_CONST(1)


// Reserved address 573 [0x23d] 

// Reserved address 574 [0x23e] 

// Reserved address 575 [0x23f] 
// Write Coalescing Time-Out Register
// This register exists only for write clients. Reset value defaults to 
// to 50 for most clients, but may be different for certain clients.
// Write coalescing happens inside the memory client.
// Coalescing means two (NV_MC_MW/2)-bit requests are grouped together in one NV_MC_MW-bit request.
// The register value indicates how many cycles a first write request is going to wait
// for a subsequent one for possible coalescing. The coalescing can only happen
// if the request addresses are compatible. A value of zero means that coalescing is off
// and requests are sent right away to the memory controller.
// Write coalescing can have a very significant impact performance when accessing the internal memory,
// because its memory word is NV_MC_WM-bit wide. Grouping two half-word accesses is
// much more efficient, because the two accesses would actually have taken three cycles,
// due to a stall when accessing the same memory bank. It also reduces the number of
// accessing (one instead of two), freeing up internal memory bandwidth for other accesses.
// The impact on external memory accesses is not as significant as the burst access is for
// NV_MC_MW/2 bits. But a coalesced write guarantees two consecutive same page accesses
// which is good for external memory bandwidth utilization.
// The write coalescing time-out should be programmed depending on the client behavior.
// The first write is obviously delayed by an amount of client cycles equal to the time-out value.
// Note that writes tagged by the client (i.e. the client expects a write response, usually
// for coherency), and the last write of a block transfer are not delayed.
// They only have a one-cycle opportunity to get coalesced.
//

// Register AHB_TIMEOUT_WCOAL_AVPC_0  
#define AHB_TIMEOUT_WCOAL_AVPC_0                        _MK_ADDR_CONST(0x240)
#define AHB_TIMEOUT_WCOAL_AVPC_0_SECURE                         0x0
#define AHB_TIMEOUT_WCOAL_AVPC_0_WORD_COUNT                     0x1
#define AHB_TIMEOUT_WCOAL_AVPC_0_RESET_VAL                      _MK_MASK_CONST(0x32)
#define AHB_TIMEOUT_WCOAL_AVPC_0_RESET_MASK                     _MK_MASK_CONST(0xff)
#define AHB_TIMEOUT_WCOAL_AVPC_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define AHB_TIMEOUT_WCOAL_AVPC_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define AHB_TIMEOUT_WCOAL_AVPC_0_READ_MASK                      _MK_MASK_CONST(0xff)
#define AHB_TIMEOUT_WCOAL_AVPC_0_WRITE_MASK                     _MK_MASK_CONST(0xff)
#define AHB_TIMEOUT_WCOAL_AVPC_0_AVPCARM7W_WCOAL_TMVAL_SHIFT                    _MK_SHIFT_CONST(0)
#define AHB_TIMEOUT_WCOAL_AVPC_0_AVPCARM7W_WCOAL_TMVAL_FIELD                    (_MK_MASK_CONST(0xff) << AHB_TIMEOUT_WCOAL_AVPC_0_AVPCARM7W_WCOAL_TMVAL_SHIFT)
#define AHB_TIMEOUT_WCOAL_AVPC_0_AVPCARM7W_WCOAL_TMVAL_RANGE                    7:0
#define AHB_TIMEOUT_WCOAL_AVPC_0_AVPCARM7W_WCOAL_TMVAL_WOFFSET                  0x0
#define AHB_TIMEOUT_WCOAL_AVPC_0_AVPCARM7W_WCOAL_TMVAL_DEFAULT                  _MK_MASK_CONST(0x32)
#define AHB_TIMEOUT_WCOAL_AVPC_0_AVPCARM7W_WCOAL_TMVAL_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define AHB_TIMEOUT_WCOAL_AVPC_0_AVPCARM7W_WCOAL_TMVAL_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define AHB_TIMEOUT_WCOAL_AVPC_0_AVPCARM7W_WCOAL_TMVAL_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Reserved address 577 [0x241] 

// Reserved address 578 [0x242] 

// Reserved address 579 [0x243] 

// Reserved address 580 [0x244] 

// Reserved address 581 [0x245] 

// Reserved address 582 [0x246] 

// Reserved address 583 [0x247] 

// Reserved address 584 [0x248] 

// Reserved address 585 [0x249] 

// Reserved address 586 [0x24a] 

// Reserved address 587 [0x24b] 

// Reserved address 588 [0x24c] 

// Reserved address 589 [0x24d] 

// Reserved address 590 [0x24e] 

// Reserved address 591 [0x24f] 

// Reserved address 592 [0x250] 

// Reserved address 593 [0x251] 

// Reserved address 594 [0x252] 

// Reserved address 595 [0x253] 

// Reserved address 596 [0x254] 

// Reserved address 597 [0x255] 

// Reserved address 598 [0x256] 

// Reserved address 599 [0x257] 

// Reserved address 600 [0x258] 

// Reserved address 601 [0x259] 

// Reserved address 602 [0x25a] 

// Reserved address 603 [0x25b] 

// Reserved address 604 [0x25c] 

// Reserved address 605 [0x25d] 

// Reserved address 606 [0x25e] 

// Reserved address 607 [0x25f] 

// Reserved address 608 [0x260] 

// Reserved address 609 [0x261] 

// Reserved address 610 [0x262] 

// Reserved address 611 [0x263] 

//
// REGISTER LIST
//
#define LIST_ARAHB_ARBC_REGS(_op_) \
_op_(AHB_ARBITRATION_DISABLE_0) \
_op_(AHB_ARBITRATION_PRIORITY_CTRL_0) \
_op_(AHB_ARBITRATION_USR_PROTECT_0) \
_op_(AHB_GIZMO_AHB_MEM_0) \
_op_(AHB_GIZMO_APB_DMA_0) \
_op_(AHB_GIZMO_IDE_0) \
_op_(AHB_GIZMO_USB_0) \
_op_(AHB_GIZMO_AHB_XBAR_BRIDGE_0) \
_op_(AHB_GIZMO_CPU_AHB_BRIDGE_0) \
_op_(AHB_GIZMO_COP_AHB_BRIDGE_0) \
_op_(AHB_GIZMO_XBAR_APB_CTLR_0) \
_op_(AHB_GIZMO_VCP_AHB_BRIDGE_0) \
_op_(AHB_GIZMO_NAND_0) \
_op_(AHB_GIZMO_SDMMC4_0) \
_op_(AHB_GIZMO_XIO_0) \
_op_(AHB_GIZMO_BSEV_0) \
_op_(AHB_GIZMO_BSEA_0) \
_op_(AHB_GIZMO_NOR_0) \
_op_(AHB_GIZMO_USB2_0) \
_op_(AHB_GIZMO_USB3_0) \
_op_(AHB_GIZMO_SDMMC1_0) \
_op_(AHB_GIZMO_SDMMC2_0) \
_op_(AHB_GIZMO_SDMMC3_0) \
_op_(AHB_AHB_MEM_PREFETCH_CFG_X_0) \
_op_(AHB_ARBITRATION_XBAR_CTRL_0) \
_op_(AHB_AHB_MEM_PREFETCH_CFG3_0) \
_op_(AHB_AHB_MEM_PREFETCH_CFG4_0) \
_op_(AHB_AVP_PPCS_RD_COH_STATUS_0) \
_op_(AHB_AHB_MEM_PREFETCH_CFG1_0) \
_op_(AHB_AHB_MEM_PREFETCH_CFG2_0) \
_op_(AHB_AHBSLVMEM_STATUS_0) \
_op_(AHB_ARBITRATION_AHB_MEM_WRQUE_MST_ID_0) \
_op_(AHB_ARBITRATION_CPU_ABORT_INFO_0) \
_op_(AHB_ARBITRATION_CPU_ABORT_ADDR_0) \
_op_(AHB_ARBITRATION_COP_ABORT_INFO_0) \
_op_(AHB_ARBITRATION_COP_ABORT_ADDR_0) \
_op_(AHB_AVPC_MCCIF_FIFOCTRL_0) \
_op_(AHB_TIMEOUT_WCOAL_AVPC_0)


//
// ADDRESS SPACES
//

#define BASE_ADDRESS_AHB        0x00000000

//
// ARAHB_ARBC REGISTER BANKS
//

#define AHB0_FIRST_REG 0x0000 // AHB_ARBITRATION_DISABLE_0
#define AHB0_LAST_REG 0x0010 // AHB_GIZMO_APB_DMA_0
#define AHB1_FIRST_REG 0x0018 // AHB_GIZMO_IDE_0
#define AHB1_LAST_REG 0x0030 // AHB_GIZMO_VCP_AHB_BRIDGE_0
#define AHB2_FIRST_REG 0x003c // AHB_GIZMO_NAND_0
#define AHB2_LAST_REG 0x003c // AHB_GIZMO_NAND_0
#define AHB3_FIRST_REG 0x0044 // AHB_GIZMO_SDMMC4_0
#define AHB3_LAST_REG 0x0048 // AHB_GIZMO_XIO_0
#define AHB4_FIRST_REG 0x0060 // AHB_GIZMO_BSEV_0
#define AHB4_LAST_REG 0x0060 // AHB_GIZMO_BSEV_0
#define AHB5_FIRST_REG 0x0070 // AHB_GIZMO_BSEA_0
#define AHB5_LAST_REG 0x0088 // AHB_GIZMO_SDMMC3_0
#define AHB6_FIRST_REG 0x00d8 // AHB_AHB_MEM_PREFETCH_CFG_X_0
#define AHB6_LAST_REG 0x0108 // AHB_ARBITRATION_COP_ABORT_ADDR_0
#define AHB7_FIRST_REG 0x023c // AHB_AVPC_MCCIF_FIFOCTRL_0
#define AHB7_LAST_REG 0x023c // AHB_AVPC_MCCIF_FIFOCTRL_0
#define AHB8_FIRST_REG 0x0240 // AHB_TIMEOUT_WCOAL_AVPC_0
#define AHB8_LAST_REG 0x0240 // AHB_TIMEOUT_WCOAL_AVPC_0

#ifndef _MK_SHIFT_CONST
  #define _MK_SHIFT_CONST(_constant_) _constant_
#endif
#ifndef _MK_MASK_CONST
  #define _MK_MASK_CONST(_constant_) _constant_
#endif
#ifndef _MK_ENUM_CONST
  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
#endif
#ifndef _MK_ADDR_CONST
  #define _MK_ADDR_CONST(_constant_) _constant_
#endif

#endif // ifndef ___ARAHB_ARBC_H_INC_
