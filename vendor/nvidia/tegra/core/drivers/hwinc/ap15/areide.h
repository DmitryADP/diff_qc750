/*
 * Copyright (c) 2007 NVIDIA Corporation.  All Rights Reserved.
 *
 * NVIDIA Corporation and its licensors retain all intellectual property and
 * proprietary rights in and to this software and related documentation.  Any
 * use, reproduction, disclosure or distribution of this software and related
 * documentation without an express license agreement from NVIDIA Corporation
 * is strictly prohibited.
 */

//
// DO NOT EDIT - generated by simspec!
//

#ifndef ___AREIDE_H_INC_
#define ___AREIDE_H_INC_
// Primary Master PIO Mode (C0D0)

// Register EIDE_CONTROLLER_ATA_PM_PIO_CSR_0  
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0                        _MK_ADDR_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_WORD_COUNT                     0x1
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_RESET_MASK                     _MK_MASK_CONST(0xffffffff)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_WRITE_MASK                     _MK_MASK_CONST(0xffffffff)
// Reserved = 0
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_N_A_SHIFT                      _MK_SHIFT_CONST(16)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_N_A_FIELD                      (_MK_MASK_CONST(0xffff) << EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_N_A_SHIFT)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_N_A_RANGE                      31:16
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_N_A_WOFFSET                    0x0
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_N_A_DEFAULT                    _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_N_A_DEFAULT_MASK                       _MK_MASK_CONST(0xffff)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_N_A_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_N_A_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Cycle Recovery: DIOR/DIOW recovery time (div2*N +  1) cycles 
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T2I_T1AS_SHIFT                 _MK_SHIFT_CONST(12)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T2I_T1AS_FIELD                 (_MK_MASK_CONST(0xf) << EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T2I_T1AS_SHIFT)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T2I_T1AS_RANGE                 15:12
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T2I_T1AS_WOFFSET                       0x0
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T2I_T1AS_DEFAULT                       _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T2I_T1AS_DEFAULT_MASK                  _MK_MASK_CONST(0xf)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T2I_T1AS_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T2I_T1AS_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Write Data Setup: DIOW data setup (div2*N + 1)  cycles (WDATA_SETUP)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T3_SHIFT                       _MK_SHIFT_CONST(8)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T3_FIELD                       (_MK_MASK_CONST(0xf) << EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T3_SHIFT)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T3_RANGE                       11:8
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T3_WOFFSET                     0x0
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T3_DEFAULT                     _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T3_DEFAULT_MASK                        _MK_MASK_CONST(0xf)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T3_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T3_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// T2 minus T3: DIOW to DIOW data setup (div2*N + 1)  cycles (BK2BK_WRITE_DLY) 
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T2_T3_SHIFT                    _MK_SHIFT_CONST(4)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T2_T3_FIELD                    (_MK_MASK_CONST(0xf) << EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T2_T3_SHIFT)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T2_T3_RANGE                    7:4
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T2_T3_WOFFSET                  0x0
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T2_T3_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T2_T3_DEFAULT_MASK                     _MK_MASK_CONST(0xf)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T2_T3_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T2_T3_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Address Setup: Address valid to DIOR/DIOW setup  time (div2*N + 1) cycles
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T1AS_SHIFT                     _MK_SHIFT_CONST(0)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T1AS_FIELD                     (_MK_MASK_CONST(0xf) << EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T1AS_SHIFT)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T1AS_RANGE                     3:0
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T1AS_WOFFSET                   0x0
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T1AS_DEFAULT                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T1AS_DEFAULT_MASK                      _MK_MASK_CONST(0xf)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T1AS_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_PIO_CSR_0_T1AS_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// Primary Master MultiWord/Ultra DMA Mode (C0D0)

// Register EIDE_CONTROLLER_ATA_PM_DMA_CSR_0  
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0                        _MK_ADDR_CONST(0x4)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_WORD_COUNT                     0x1
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_RESET_MASK                     _MK_MASK_CONST(0xffffffff)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_WRITE_MASK                     _MK_MASK_CONST(0xffffffff)
// MultiWord DMA mode
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_MOD_SHIFT                      _MK_SHIFT_CONST(31)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_MOD_FIELD                      (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_MOD_SHIFT)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_MOD_RANGE                      31:31
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_MOD_WOFFSET                    0x0
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_MOD_DEFAULT                    _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_MOD_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_MOD_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_MOD_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_MOD_MDMA                       _MK_ENUM_CONST(0)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_MOD_UDMA                       _MK_ENUM_CONST(1)

// Reserved = 0
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_N_A_1_SHIFT                    _MK_SHIFT_CONST(20)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_N_A_1_FIELD                    (_MK_MASK_CONST(0x7ff) << EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_N_A_1_SHIFT)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_N_A_1_RANGE                    30:20
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_N_A_1_WOFFSET                  0x0
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_N_A_1_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_N_A_1_DEFAULT_MASK                     _MK_MASK_CONST(0x7ff)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_N_A_1_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_N_A_1_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// When MOD=MDMA, DMA_CSR_19_16=TKR, Read Recovery: DIOR recovery time (div2*N + 1) cycles,
// When MOD=UDMA  DMA_CSR_19_16=TMLI, CRC interlock limit: CRC set up time in N cycles
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_19_16_SHIFT                    _MK_SHIFT_CONST(16)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_19_16_FIELD                    (_MK_MASK_CONST(0xf) << EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_19_16_SHIFT)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_19_16_RANGE                    19:16
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_19_16_WOFFSET                  0x0
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_19_16_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_19_16_DEFAULT_MASK                     _MK_MASK_CONST(0xf)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_19_16_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_19_16_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// When MOD=MDMA, DMA_CSR_15_12=TDR, Read Pulse Width: DIOR width (div2*N + 1) cycles
// when MOD=UDMA, DMA_CSR_15_12=TSS, strobe setuptime, Time for strobe edge to negation of DMARQ or assertion of STOP of (div2*N +1 + cyles
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_15_12_SHIFT                    _MK_SHIFT_CONST(12)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_15_12_FIELD                    (_MK_MASK_CONST(0xf) << EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_15_12_SHIFT)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_15_12_RANGE                    15:12
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_15_12_WOFFSET                  0x0
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_15_12_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_15_12_DEFAULT_MASK                     _MK_MASK_CONST(0xf)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_15_12_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_15_12_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// When MOD=MDMA, DMA_CSR_11_8=TKW, Write Recovery: DIOW recovery time (div2*N + 1) cycles 
// When MOD=UDMA, DMA_CSR_11_8=TDVS, Data valid send, Data valid sent time at sender (div2*N + 1) cycles of Tcyc timing
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_11_8_SHIFT                     _MK_SHIFT_CONST(8)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_11_8_FIELD                     (_MK_MASK_CONST(0xf) << EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_11_8_SHIFT)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_11_8_RANGE                     11:8
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_11_8_WOFFSET                   0x0
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_11_8_DEFAULT                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_11_8_DEFAULT_MASK                      _MK_MASK_CONST(0xf)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_11_8_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_11_8_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// When MOD=MDMA, DMA_CSR_7_4=TDW, Write Pulse Width: DIOW width (div2*N + 1) cycles
// When MOD=UDMA, DMA_CSR_7_6=TRP, Ready to pause: Ready to pause time (div2*N+1) cycles
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_7_4_SHIFT                      _MK_SHIFT_CONST(4)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_7_4_FIELD                      (_MK_MASK_CONST(0xf) << EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_7_4_SHIFT)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_7_4_RANGE                      7:4
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_7_4_WOFFSET                    0x0
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_7_4_DEFAULT                    _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_7_4_DEFAULT_MASK                       _MK_MASK_CONST(0xf)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_7_4_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_7_4_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// when MOD=MDMA, DMA_CSR_3_0=TM, CS valid set up: CS valid to DIOR/DIOW (div2*N + 1) cycles 
// When MOD=UDMA, DMA_CSR_3_0=TACK, DMACK valid: setup and hold time for DMACK (div2*N + 1) cycles
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_3_0_SHIFT                      _MK_SHIFT_CONST(0)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_3_0_FIELD                      (_MK_MASK_CONST(0xf) << EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_3_0_SHIFT)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_3_0_RANGE                      3:0
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_3_0_WOFFSET                    0x0
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_3_0_DEFAULT                    _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_3_0_DEFAULT_MASK                       _MK_MASK_CONST(0xf)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_3_0_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PM_DMA_CSR_0_DMA_CSR_3_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Primary Slave PIO Mode (C0D1)

// Register EIDE_CONTROLLER_ATA_PS_PIO_CSR_0  
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0                        _MK_ADDR_CONST(0x8)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_WORD_COUNT                     0x1
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_RESET_MASK                     _MK_MASK_CONST(0xffffffff)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_WRITE_MASK                     _MK_MASK_CONST(0xffffffff)
// Reserved = 0
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_N_A_3_SHIFT                    _MK_SHIFT_CONST(16)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_N_A_3_FIELD                    (_MK_MASK_CONST(0xffff) << EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_N_A_3_SHIFT)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_N_A_3_RANGE                    31:16
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_N_A_3_WOFFSET                  0x0
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_N_A_3_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_N_A_3_DEFAULT_MASK                     _MK_MASK_CONST(0xffff)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_N_A_3_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_N_A_3_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Cycle Recovery: DIOR/DIOW recovery time (div2*N +  1) cycles
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T2I_T1AS_SHIFT                 _MK_SHIFT_CONST(12)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T2I_T1AS_FIELD                 (_MK_MASK_CONST(0xf) << EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T2I_T1AS_SHIFT)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T2I_T1AS_RANGE                 15:12
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T2I_T1AS_WOFFSET                       0x0
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T2I_T1AS_DEFAULT                       _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T2I_T1AS_DEFAULT_MASK                  _MK_MASK_CONST(0xf)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T2I_T1AS_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T2I_T1AS_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Write Data Setup: (WDATA_SETUP) DIOW data setup  (div2*N + 1) cycles
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T3_SHIFT                       _MK_SHIFT_CONST(8)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T3_FIELD                       (_MK_MASK_CONST(0xf) << EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T3_SHIFT)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T3_RANGE                       11:8
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T3_WOFFSET                     0x0
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T3_DEFAULT                     _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T3_DEFAULT_MASK                        _MK_MASK_CONST(0xf)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T3_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T3_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// T2 minus T3: (BK2BK_WRITE_DLY) DIOW to DIOW data  setup (div2*N + 1) cycles
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T2_T3_SHIFT                    _MK_SHIFT_CONST(4)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T2_T3_FIELD                    (_MK_MASK_CONST(0xf) << EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T2_T3_SHIFT)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T2_T3_RANGE                    7:4
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T2_T3_WOFFSET                  0x0
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T2_T3_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T2_T3_DEFAULT_MASK                     _MK_MASK_CONST(0xf)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T2_T3_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T2_T3_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Address Setup: (T1AS) Address valid to DIOR/DIOW  setup time (div2*N + 1) cycles
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T1AS_SHIFT                     _MK_SHIFT_CONST(0)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T1AS_FIELD                     (_MK_MASK_CONST(0xf) << EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T1AS_SHIFT)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T1AS_RANGE                     3:0
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T1AS_WOFFSET                   0x0
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T1AS_DEFAULT                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T1AS_DEFAULT_MASK                      _MK_MASK_CONST(0xf)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T1AS_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_PIO_CSR_0_T1AS_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// Primary Slave MultiWord/Ultra DMA Mode (C0D1)

// Register EIDE_CONTROLLER_ATA_PS_DMA_CSR_0  
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0                        _MK_ADDR_CONST(0xc)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_WORD_COUNT                     0x1
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_RESET_MASK                     _MK_MASK_CONST(0xffffffff)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_WRITE_MASK                     _MK_MASK_CONST(0xffffffff)
// MultiWord DMA mode
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_MOD_SHIFT                      _MK_SHIFT_CONST(31)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_MOD_FIELD                      (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_MOD_SHIFT)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_MOD_RANGE                      31:31
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_MOD_WOFFSET                    0x0
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_MOD_DEFAULT                    _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_MOD_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_MOD_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_MOD_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_MOD_MDMA                       _MK_ENUM_CONST(0)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_MOD_UDMA                       _MK_ENUM_CONST(1)

// Reserved = 0
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_N_A_1_SHIFT                    _MK_SHIFT_CONST(20)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_N_A_1_FIELD                    (_MK_MASK_CONST(0x7ff) << EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_N_A_1_SHIFT)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_N_A_1_RANGE                    30:20
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_N_A_1_WOFFSET                  0x0
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_N_A_1_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_N_A_1_DEFAULT_MASK                     _MK_MASK_CONST(0x7ff)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_N_A_1_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_N_A_1_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// When MOD=MDMA, DMA_CSR_19_16=TKR, Read Recovery: DIOR recovery time (div2*N + 1) cycles,
// When MOD=UDMA  DMA_CSR_19_16=TMLI, CRC interlock limit: CRC set up time in N cycles
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_19_16_SHIFT                    _MK_SHIFT_CONST(16)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_19_16_FIELD                    (_MK_MASK_CONST(0xf) << EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_19_16_SHIFT)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_19_16_RANGE                    19:16
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_19_16_WOFFSET                  0x0
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_19_16_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_19_16_DEFAULT_MASK                     _MK_MASK_CONST(0xf)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_19_16_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_19_16_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// When MOD=MDMA, DMA_CSR_15_12=TDR, Read Pulse Width: DIOR width (div2*N + 1) cycles
// when MOD=UDMA, DMA_CSR_15_12=TSS, strobe setuptime, Time for strobe edge to
// negation of DMARQ or assertion of STOP of (div2*N +1)  cyles
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_15_12_SHIFT                    _MK_SHIFT_CONST(12)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_15_12_FIELD                    (_MK_MASK_CONST(0xf) << EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_15_12_SHIFT)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_15_12_RANGE                    15:12
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_15_12_WOFFSET                  0x0
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_15_12_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_15_12_DEFAULT_MASK                     _MK_MASK_CONST(0xf)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_15_12_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_15_12_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// When MOD=MDMA, DMA_CSR_11_8=TKW, Write Recovery: DIOW recovery time (div2*N + 1) cycles 
// When MOD=UDMA, DMA_CSR_11_8=TDVS, Data valid send, Data valid sent time at sender (div2*N + 1) cycles of Tcyc timing
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_11_8_SHIFT                     _MK_SHIFT_CONST(8)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_11_8_FIELD                     (_MK_MASK_CONST(0xf) << EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_11_8_SHIFT)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_11_8_RANGE                     11:8
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_11_8_WOFFSET                   0x0
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_11_8_DEFAULT                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_11_8_DEFAULT_MASK                      _MK_MASK_CONST(0xf)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_11_8_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_11_8_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// When MOD=MDMA, DMA_CSR_7_4=TDW, Write Pulse Width: DIOW width (div2*N + 1) cycles
// When MOD=UDMA, DMA_CSR_7_6=TRP, Ready to pause: Ready to pause time (div2*N+1) cycles
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_7_4_SHIFT                      _MK_SHIFT_CONST(4)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_7_4_FIELD                      (_MK_MASK_CONST(0xf) << EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_7_4_SHIFT)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_7_4_RANGE                      7:4
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_7_4_WOFFSET                    0x0
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_7_4_DEFAULT                    _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_7_4_DEFAULT_MASK                       _MK_MASK_CONST(0xf)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_7_4_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_7_4_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// when MOD=MDMA, DMA_CSR_3_0=TM, CS valid set up: CS valid to DIOR/DIOW (div2*N + 1) cycles 
// When MOD=UDMA, DMA_CSR_3_0=TACK, DMACK valid: setup and hold time for DMACK (div2*N + 1) cycles
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_3_0_SHIFT                      _MK_SHIFT_CONST(0)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_3_0_FIELD                      (_MK_MASK_CONST(0xf) << EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_3_0_SHIFT)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_3_0_RANGE                      3:0
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_3_0_WOFFSET                    0x0
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_3_0_DEFAULT                    _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_3_0_DEFAULT_MASK                       _MK_MASK_CONST(0xf)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_3_0_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_PS_DMA_CSR_0_DMA_CSR_3_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Reserved address 16 [0x10] 

// Reserved address 20 [0x14] 

// Reserved address 24 [0x18] 

// Reserved address 28 [0x1c] 

// Reserved address 32 [0x20] 

// Reserved address 36 [0x24] 
// Primary Control and Status (CSR)

// Register EIDE_CONTROLLER_ATA_IDE0_CSR_0  
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0                  _MK_ADDR_CONST(0x28)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_WORD_COUNT                       0x1
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_RESET_VAL                        _MK_MASK_CONST(0x158000)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_RESET_MASK                       _MK_MASK_CONST(0xffffffff)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_WRITE_MASK                       _MK_MASK_CONST(0xffffffff)
//  1 = reset
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_SRST_SHIFT                       _MK_SHIFT_CONST(31)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_SRST_FIELD                       (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_IDE0_CSR_0_SRST_SHIFT)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_SRST_RANGE                       31:31
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_SRST_WOFFSET                     0x0
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_SRST_DEFAULT                     _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_SRST_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_SRST_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_SRST_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_SRST_NO_RST                      _MK_ENUM_CONST(0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_SRST_RST                 _MK_ENUM_CONST(1)

// Reserved = 0
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_10_SHIFT                     _MK_SHIFT_CONST(30)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_10_FIELD                     (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_10_SHIFT)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_10_RANGE                     30:30
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_10_WOFFSET                   0x0
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_10_DEFAULT                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_10_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_10_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_10_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

//  0 = Below 50MHz
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_SPEED_SHIFT                      _MK_SHIFT_CONST(29)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_SPEED_FIELD                      (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_IDE0_CSR_0_SPEED_SHIFT)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_SPEED_RANGE                      29:29
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_SPEED_WOFFSET                    0x0
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_SPEED_DEFAULT                    _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_SPEED_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_SPEED_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_SPEED_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_SPEED_BELOW_50MHZ                        _MK_ENUM_CONST(0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_SPEED_EQUAL_OR_ABOVE_50MHZ                       _MK_ENUM_CONST(1)

//  0 = Disable
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DIV2_SHIFT                       _MK_SHIFT_CONST(28)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DIV2_FIELD                       (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_IDE0_CSR_0_DIV2_SHIFT)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DIV2_RANGE                       28:28
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DIV2_WOFFSET                     0x0
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DIV2_DEFAULT                     _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DIV2_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DIV2_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DIV2_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DIV2_DIV2_DISABLE                        _MK_ENUM_CONST(0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DIV2_DIV2_ENABLE                 _MK_ENUM_CONST(1)

// Reserved
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_11_SHIFT                     _MK_SHIFT_CONST(25)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_11_FIELD                     (_MK_MASK_CONST(0x7) << EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_11_SHIFT)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_11_RANGE                     27:25
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_11_WOFFSET                   0x0
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_11_DEFAULT                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_11_DEFAULT_MASK                      _MK_MASK_CONST(0x7)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_11_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_11_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

//  0 = Little Endian (3.2.1.0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PD_END_SHIFT                     _MK_SHIFT_CONST(24)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PD_END_FIELD                     (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_IDE0_CSR_0_PD_END_SHIFT)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PD_END_RANGE                     24:24
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PD_END_WOFFSET                   0x0
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PD_END_DEFAULT                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PD_END_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PD_END_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PD_END_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PD_END_LITTL_ENDIAN                      _MK_ENUM_CONST(0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PD_END_BIG_ENDIAN                        _MK_ENUM_CONST(1)

// Reserved = 0
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_12_SHIFT                     _MK_SHIFT_CONST(23)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_12_FIELD                     (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_12_SHIFT)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_12_RANGE                     23:23
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_12_WOFFSET                   0x0
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_12_DEFAULT                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_12_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_12_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_12_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

//  0 = NOP
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PREF_SHIFT                       _MK_SHIFT_CONST(22)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PREF_FIELD                       (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_IDE0_CSR_0_PREF_SHIFT)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PREF_RANGE                       22:22
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PREF_WOFFSET                     0x0
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PREF_DEFAULT                     _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PREF_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PREF_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PREF_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PREF_UN_SET                      _MK_ENUM_CONST(0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PREF_SET                 _MK_ENUM_CONST(1)

// Reserved = 0
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_13_SHIFT                     _MK_SHIFT_CONST(21)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_13_FIELD                     (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_13_SHIFT)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_13_RANGE                     21:21
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_13_WOFFSET                   0x0
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_13_DEFAULT                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_13_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_13_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_13_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

//  0 = Active low ready
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_RDY0_P_SHIFT                     _MK_SHIFT_CONST(20)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_RDY0_P_FIELD                     (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_IDE0_CSR_0_RDY0_P_SHIFT)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_RDY0_P_RANGE                     20:20
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_RDY0_P_WOFFSET                   0x0
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_RDY0_P_DEFAULT                   _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_RDY0_P_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_RDY0_P_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_RDY0_P_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_RDY0_P_ACTIVE_LOW                        _MK_ENUM_CONST(0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_RDY0_P_ACTIVE_HIGH                       _MK_ENUM_CONST(1)

//  0 = Active low (def)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DAK0_P_SHIFT                     _MK_SHIFT_CONST(19)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DAK0_P_FIELD                     (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_IDE0_CSR_0_DAK0_P_SHIFT)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DAK0_P_RANGE                     19:19
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DAK0_P_WOFFSET                   0x0
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DAK0_P_DEFAULT                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DAK0_P_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DAK0_P_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DAK0_P_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DAK0_P_ACTIVE_LOW                        _MK_ENUM_CONST(0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DAK0_P_ACTIVE_HIGH                       _MK_ENUM_CONST(1)

//  0 = Active low
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DRQ0_P_SHIFT                     _MK_SHIFT_CONST(18)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DRQ0_P_FIELD                     (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_IDE0_CSR_0_DRQ0_P_SHIFT)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DRQ0_P_RANGE                     18:18
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DRQ0_P_WOFFSET                   0x0
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DRQ0_P_DEFAULT                   _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DRQ0_P_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DRQ0_P_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DRQ0_P_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DRQ0_P_ACTIVE_LOW                        _MK_ENUM_CONST(0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DRQ0_P_ACTIVE_HIGH                       _MK_ENUM_CONST(1)

//  11=Rising edge
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IRQ0_0_SHIFT                     _MK_SHIFT_CONST(16)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IRQ0_0_FIELD                     (_MK_MASK_CONST(0x3) << EIDE_CONTROLLER_ATA_IDE0_CSR_0_IRQ0_0_SHIFT)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IRQ0_0_RANGE                     17:16
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IRQ0_0_WOFFSET                   0x0
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IRQ0_0_DEFAULT                   _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IRQ0_0_DEFAULT_MASK                      _MK_MASK_CONST(0x3)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IRQ0_0_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IRQ0_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IRQ0_0_ACTIVE_LOW                        _MK_ENUM_CONST(0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IRQ0_0_ACTIVE_HIGH                       _MK_ENUM_CONST(1)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IRQ0_0_RISING_EDGE                       _MK_ENUM_CONST(3)

//  0 = Disallow DMACK0 (wait)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_GNT0_SHIFT                       _MK_SHIFT_CONST(15)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_GNT0_FIELD                       (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_IDE0_CSR_0_GNT0_SHIFT)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_GNT0_RANGE                       15:15
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_GNT0_WOFFSET                     0x0
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_GNT0_DEFAULT                     _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_GNT0_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_GNT0_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_GNT0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_GNT0_WAIT                        _MK_ENUM_CONST(0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_GNT0_START                       _MK_ENUM_CONST(1)

//  0 = NOP (Disable stop) 
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_HTE0_SHIFT                       _MK_SHIFT_CONST(14)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_HTE0_FIELD                       (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_IDE0_CSR_0_HTE0_SHIFT)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_HTE0_RANGE                       14:14
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_HTE0_WOFFSET                     0x0
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_HTE0_DEFAULT                     _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_HTE0_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_HTE0_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_HTE0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_HTE0_ACTIVE_LOW                  _MK_ENUM_CONST(0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_HTE0_ACTIVE_HIGH                 _MK_ENUM_CONST(1)

// Reserved = 0
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_14_SHIFT                     _MK_SHIFT_CONST(6)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_14_FIELD                     (_MK_MASK_CONST(0xff) << EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_14_SHIFT)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_14_RANGE                     13:6
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_14_WOFFSET                   0x0
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_14_DEFAULT                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_14_DEFAULT_MASK                      _MK_MASK_CONST(0xff)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_14_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_N_A_14_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

//  0 = disable (def)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IE_IRQ0_SHIFT                    _MK_SHIFT_CONST(5)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IE_IRQ0_FIELD                    (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_IDE0_CSR_0_IE_IRQ0_SHIFT)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IE_IRQ0_RANGE                    5:5
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IE_IRQ0_WOFFSET                  0x0
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IE_IRQ0_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IE_IRQ0_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IE_IRQ0_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IE_IRQ0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IE_IRQ0_UN_SET                   _MK_ENUM_CONST(0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IE_IRQ0_SET                      _MK_ENUM_CONST(1)

//  0 = disable (def)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IE_DRQ0_SHIFT                    _MK_SHIFT_CONST(4)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IE_DRQ0_FIELD                    (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_IDE0_CSR_0_IE_DRQ0_SHIFT)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IE_DRQ0_RANGE                    4:4
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IE_DRQ0_WOFFSET                  0x0
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IE_DRQ0_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IE_DRQ0_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IE_DRQ0_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IE_DRQ0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IE_DRQ0_UN_SET                   _MK_ENUM_CONST(0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IE_DRQ0_SET                      _MK_ENUM_CONST(1)

//  0 = inactive Read to clear
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IS_IRQ0_SHIFT                    _MK_SHIFT_CONST(3)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IS_IRQ0_FIELD                    (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_IDE0_CSR_0_IS_IRQ0_SHIFT)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IS_IRQ0_RANGE                    3:3
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IS_IRQ0_WOFFSET                  0x0
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IS_IRQ0_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IS_IRQ0_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IS_IRQ0_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IS_IRQ0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IS_IRQ0_UN_SET                   _MK_ENUM_CONST(0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IS_IRQ0_SET                      _MK_ENUM_CONST(1)

//  0 = inactive Read to clear
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IS_DRQ0_SHIFT                    _MK_SHIFT_CONST(2)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IS_DRQ0_FIELD                    (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_IDE0_CSR_0_IS_DRQ0_SHIFT)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IS_DRQ0_RANGE                    2:2
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IS_DRQ0_WOFFSET                  0x0
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IS_DRQ0_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IS_DRQ0_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IS_DRQ0_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IS_DRQ0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IS_DRQ0_UN_SET                   _MK_ENUM_CONST(0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_IS_DRQ0_SET                      _MK_ENUM_CONST(1)

//  0 = Inactive (idling) 
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DMA0_SHIFT                       _MK_SHIFT_CONST(1)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DMA0_FIELD                       (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_IDE0_CSR_0_DMA0_SHIFT)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DMA0_RANGE                       1:1
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DMA0_WOFFSET                     0x0
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DMA0_DEFAULT                     _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DMA0_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DMA0_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DMA0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DMA0_INACTIVE                    _MK_ENUM_CONST(0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_DMA0_ACTIVE                      _MK_ENUM_CONST(1)

//  0 = Ready (done)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PIO_WB_SHIFT                     _MK_SHIFT_CONST(0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PIO_WB_FIELD                     (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_IDE0_CSR_0_PIO_WB_SHIFT)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PIO_WB_RANGE                     0:0
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PIO_WB_WOFFSET                   0x0
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PIO_WB_DEFAULT                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PIO_WB_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PIO_WB_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PIO_WB_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PIO_WB_READY                     _MK_ENUM_CONST(0)
#define EIDE_CONTROLLER_ATA_IDE0_CSR_0_PIO_WB_BUSY                      _MK_ENUM_CONST(1)


// Reserved address 44 [0x2c] 

// Reserved address 48 [0x30] 

// Reserved address 52 [0x34] 

// Reserved address 56 [0x38] 

// Reserved address 60 [0x3c] 

// Reserved address 64 [0x40] 

// Reserved address 68 [0x44] 

// Reserved address 72 [0x48] 

// Reserved address 76 [0x4c] 

// Reserved address 80 [0x50] 

// Reserved address 84 [0x54] 

// Reserved address 88 [0x58] 

// Reserved address 92 [0x5c] 

// Reserved address 96 [0x60] 

// Reserved address 100 [0x64] 

// Reserved address 104 [0x68] 

// Reserved address 108 [0x6c] 

// Reserved address 112 [0x70] 

// Reserved address 116 [0x74] 

// Reserved address 120 [0x78] 

// Reserved address 124 [0x7c] 

// Reserved address 128 [0x80] 

// Reserved address 132 [0x84] 

// Reserved address 136 [0x88] 

// Reserved address 140 [0x8c] 

// Reserved address 144 [0x90] 

// Reserved address 148 [0x94] 

// Reserved address 152 [0x98] 

// Reserved address 156 [0x9c] 

// Reserved address 160 [0xa0] 

// Reserved address 164 [0xa4] 

// Reserved address 168 [0xa8] 

// Reserved address 172 [0xac] 

// Reserved address 176 [0xb0] 

// Reserved address 180 [0xb4] 

// Reserved address 184 [0xb8] 

// Reserved address 188 [0xbc] 

// Reserved address 192 [0xc0] 

// Reserved address 196 [0xc4] 

// Reserved address 200 [0xc8] 

// Reserved address 204 [0xcc] 

// Reserved address 208 [0xd0] 

// Reserved address 212 [0xd4] 

// Reserved address 216 [0xd8] 

// Reserved address 220 [0xdc] 

// Reserved address 224 [0xe0] 

// Reserved address 228 [0xe4] 

// Reserved address 232 [0xe8] 

// Reserved address 236 [0xec] 

// Reserved address 240 [0xf0] 

// Reserved address 244 [0xf4] 

// Reserved address 248 [0xf8] 

// Reserved address 252 [0xfc] 

// Reserved address 256 [0x100] 

// Reserved address 260 [0x104] 

// Reserved address 264 [0x108] 

// Reserved address 268 [0x10c] 

// Reserved address 272 [0x110] 

// Reserved address 276 [0x114] 

// Reserved address 280 [0x118] 

// Reserved address 284 [0x11c] 

// Reserved address 288 [0x120] 

// Reserved address 292 [0x124] 

// Reserved address 296 [0x128] 

// Reserved address 300 [0x12c] 

// Reserved address 304 [0x130] 

// Reserved address 308 [0x134] 

// Reserved address 312 [0x138] 

// Reserved address 316 [0x13c] 

// Reserved address 320 [0x140] 

// Reserved address 324 [0x144] 

// Reserved address 328 [0x148] 

// Reserved address 332 [0x14c] 

// Reserved address 336 [0x150] 

// Reserved address 340 [0x154] 

// Reserved address 344 [0x158] 

// Reserved address 348 [0x15c] 

// Reserved address 352 [0x160] 

// Reserved address 356 [0x164] 

// Reserved address 360 [0x168] 

// Reserved address 364 [0x16c] 

// Reserved address 368 [0x170] 

// Reserved address 372 [0x174] 

// Reserved address 376 [0x178] 

// Reserved address 380 [0x17c] 

// Reserved address 384 [0x180] 

// Reserved address 388 [0x184] 

// Reserved address 392 [0x188] 

// Reserved address 396 [0x18c] 

// Reserved address 400 [0x190] 

// Reserved address 404 [0x194] 

// Reserved address 408 [0x198] 

// Reserved address 412 [0x19c] 

// Reserved address 416 [0x1a0] 

// Reserved address 420 [0x1a4] 

// Reserved address 424 [0x1a8] 

// Reserved address 428 [0x1ac] 

// Reserved address 432 [0x1b0] 

// Reserved address 436 [0x1b4] 

// Reserved address 440 [0x1b8] 

// Reserved address 444 [0x1bc] 

// Reserved address 448 [0x1c0] 

// Reserved address 452 [0x1c4] 

// Reserved address 456 [0x1c8] 

// Reserved address 460 [0x1cc] 

// Reserved address 464 [0x1d0] 

// Reserved address 468 [0x1d4] 

// Reserved address 472 [0x1d8] 

// Reserved address 476 [0x1dc] 
// Primary Channel PIO Data

// Register EIDE_CONTROLLER_ATA_P_IO_1F0_0  
#define EIDE_CONTROLLER_ATA_P_IO_1F0_0                  _MK_ADDR_CONST(0x1e0)
#define EIDE_CONTROLLER_ATA_P_IO_1F0_0_WORD_COUNT                       0x1
#define EIDE_CONTROLLER_ATA_P_IO_1F0_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F0_0_RESET_MASK                       _MK_MASK_CONST(0xffff)
#define EIDE_CONTROLLER_ATA_P_IO_1F0_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F0_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F0_0_READ_MASK                        _MK_MASK_CONST(0xffff)
#define EIDE_CONTROLLER_ATA_P_IO_1F0_0_WRITE_MASK                       _MK_MASK_CONST(0xffff)
// Read/Write Data to Channel 0 PIO Error Register:  This register shall be accessed for host PIO data transfer.
#define EIDE_CONTROLLER_ATA_P_IO_1F0_0_DATA_SHIFT                       _MK_SHIFT_CONST(0)
#define EIDE_CONTROLLER_ATA_P_IO_1F0_0_DATA_FIELD                       (_MK_MASK_CONST(0xffff) << EIDE_CONTROLLER_ATA_P_IO_1F0_0_DATA_SHIFT)
#define EIDE_CONTROLLER_ATA_P_IO_1F0_0_DATA_RANGE                       15:0
#define EIDE_CONTROLLER_ATA_P_IO_1F0_0_DATA_WOFFSET                     0x0
#define EIDE_CONTROLLER_ATA_P_IO_1F0_0_DATA_DEFAULT                     _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F0_0_DATA_DEFAULT_MASK                        _MK_MASK_CONST(0xffff)
#define EIDE_CONTROLLER_ATA_P_IO_1F0_0_DATA_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F0_0_DATA_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Primary Channel PIO Error/Feature

// Register EIDE_CONTROLLER_ATA_P_IO_1F1_0  
#define EIDE_CONTROLLER_ATA_P_IO_1F1_0                  _MK_ADDR_CONST(0x1e4)
#define EIDE_CONTROLLER_ATA_P_IO_1F1_0_WORD_COUNT                       0x1
#define EIDE_CONTROLLER_ATA_P_IO_1F1_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F1_0_RESET_MASK                       _MK_MASK_CONST(0xff)
#define EIDE_CONTROLLER_ATA_P_IO_1F1_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F1_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F1_0_READ_MASK                        _MK_MASK_CONST(0xff)
#define EIDE_CONTROLLER_ATA_P_IO_1F1_0_WRITE_MASK                       _MK_MASK_CONST(0xff)
// Read/Write Data to Channel 0 PIO Error Register:  This register shall be accessed for host PIO data transfer.
#define EIDE_CONTROLLER_ATA_P_IO_1F1_0_DATA_SHIFT                       _MK_SHIFT_CONST(1)
#define EIDE_CONTROLLER_ATA_P_IO_1F1_0_DATA_FIELD                       (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_P_IO_1F1_0_DATA_SHIFT)
#define EIDE_CONTROLLER_ATA_P_IO_1F1_0_DATA_RANGE                       1:1
#define EIDE_CONTROLLER_ATA_P_IO_1F1_0_DATA_WOFFSET                     0x0
#define EIDE_CONTROLLER_ATA_P_IO_1F1_0_DATA_DEFAULT                     _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F1_0_DATA_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_P_IO_1F1_0_DATA_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F1_0_DATA_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Read Channel 0 PIO Error Register: This register  contains status for the current command.
#define EIDE_CONTROLLER_ATA_P_IO_1F1_0_ERROR_SHIFT                      _MK_SHIFT_CONST(0)
#define EIDE_CONTROLLER_ATA_P_IO_1F1_0_ERROR_FIELD                      (_MK_MASK_CONST(0xff) << EIDE_CONTROLLER_ATA_P_IO_1F1_0_ERROR_SHIFT)
#define EIDE_CONTROLLER_ATA_P_IO_1F1_0_ERROR_RANGE                      7:0
#define EIDE_CONTROLLER_ATA_P_IO_1F1_0_ERROR_WOFFSET                    0x0
#define EIDE_CONTROLLER_ATA_P_IO_1F1_0_ERROR_DEFAULT                    _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F1_0_ERROR_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define EIDE_CONTROLLER_ATA_P_IO_1F1_0_ERROR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F1_0_ERROR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Primary Channel PIO Sector Count

// Register EIDE_CONTROLLER_ATA_P_IO_1F2_0  
#define EIDE_CONTROLLER_ATA_P_IO_1F2_0                  _MK_ADDR_CONST(0x1e8)
#define EIDE_CONTROLLER_ATA_P_IO_1F2_0_WORD_COUNT                       0x1
#define EIDE_CONTROLLER_ATA_P_IO_1F2_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F2_0_RESET_MASK                       _MK_MASK_CONST(0xff)
#define EIDE_CONTROLLER_ATA_P_IO_1F2_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F2_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F2_0_READ_MASK                        _MK_MASK_CONST(0xff)
#define EIDE_CONTROLLER_ATA_P_IO_1F2_0_WRITE_MASK                       _MK_MASK_CONST(0xff)
// Read/Write Channel 0 PIO Sector Count Register:  The content of this register becomes a command parameter when the command  register is written.
#define EIDE_CONTROLLER_ATA_P_IO_1F2_0_SECTOR_COUNTS_SHIFT                      _MK_SHIFT_CONST(0)
#define EIDE_CONTROLLER_ATA_P_IO_1F2_0_SECTOR_COUNTS_FIELD                      (_MK_MASK_CONST(0xff) << EIDE_CONTROLLER_ATA_P_IO_1F2_0_SECTOR_COUNTS_SHIFT)
#define EIDE_CONTROLLER_ATA_P_IO_1F2_0_SECTOR_COUNTS_RANGE                      7:0
#define EIDE_CONTROLLER_ATA_P_IO_1F2_0_SECTOR_COUNTS_WOFFSET                    0x0
#define EIDE_CONTROLLER_ATA_P_IO_1F2_0_SECTOR_COUNTS_DEFAULT                    _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F2_0_SECTOR_COUNTS_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define EIDE_CONTROLLER_ATA_P_IO_1F2_0_SECTOR_COUNTS_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F2_0_SECTOR_COUNTS_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Primary Channel PIO Sector Number

// Register EIDE_CONTROLLER_ATA_P_IO_1F3_0  
#define EIDE_CONTROLLER_ATA_P_IO_1F3_0                  _MK_ADDR_CONST(0x1ec)
#define EIDE_CONTROLLER_ATA_P_IO_1F3_0_WORD_COUNT                       0x1
#define EIDE_CONTROLLER_ATA_P_IO_1F3_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F3_0_RESET_MASK                       _MK_MASK_CONST(0xff)
#define EIDE_CONTROLLER_ATA_P_IO_1F3_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F3_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F3_0_READ_MASK                        _MK_MASK_CONST(0xff)
#define EIDE_CONTROLLER_ATA_P_IO_1F3_0_WRITE_MASK                       _MK_MASK_CONST(0xff)
// Read/Write Channel 0 PIO Sector Number Register:  The content of this register becomes a command parameter when the command  register is written.
#define EIDE_CONTROLLER_ATA_P_IO_1F3_0_SECTOR_NUMBER_SHIFT                      _MK_SHIFT_CONST(0)
#define EIDE_CONTROLLER_ATA_P_IO_1F3_0_SECTOR_NUMBER_FIELD                      (_MK_MASK_CONST(0xff) << EIDE_CONTROLLER_ATA_P_IO_1F3_0_SECTOR_NUMBER_SHIFT)
#define EIDE_CONTROLLER_ATA_P_IO_1F3_0_SECTOR_NUMBER_RANGE                      7:0
#define EIDE_CONTROLLER_ATA_P_IO_1F3_0_SECTOR_NUMBER_WOFFSET                    0x0
#define EIDE_CONTROLLER_ATA_P_IO_1F3_0_SECTOR_NUMBER_DEFAULT                    _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F3_0_SECTOR_NUMBER_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define EIDE_CONTROLLER_ATA_P_IO_1F3_0_SECTOR_NUMBER_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F3_0_SECTOR_NUMBER_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Primary Channel PIO Cylinder Low

// Register EIDE_CONTROLLER_ATA_P_IO_1F4_0  
#define EIDE_CONTROLLER_ATA_P_IO_1F4_0                  _MK_ADDR_CONST(0x1f0)
#define EIDE_CONTROLLER_ATA_P_IO_1F4_0_WORD_COUNT                       0x1
#define EIDE_CONTROLLER_ATA_P_IO_1F4_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F4_0_RESET_MASK                       _MK_MASK_CONST(0xff)
#define EIDE_CONTROLLER_ATA_P_IO_1F4_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F4_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F4_0_READ_MASK                        _MK_MASK_CONST(0xff)
#define EIDE_CONTROLLER_ATA_P_IO_1F4_0_WRITE_MASK                       _MK_MASK_CONST(0xff)
// Primary Channel Cylinder Low Register: The  content of this register becomes a command parameter when the command  register is written.
#define EIDE_CONTROLLER_ATA_P_IO_1F4_0_CYLINDER_LOW_SHIFT                       _MK_SHIFT_CONST(0)
#define EIDE_CONTROLLER_ATA_P_IO_1F4_0_CYLINDER_LOW_FIELD                       (_MK_MASK_CONST(0xff) << EIDE_CONTROLLER_ATA_P_IO_1F4_0_CYLINDER_LOW_SHIFT)
#define EIDE_CONTROLLER_ATA_P_IO_1F4_0_CYLINDER_LOW_RANGE                       7:0
#define EIDE_CONTROLLER_ATA_P_IO_1F4_0_CYLINDER_LOW_WOFFSET                     0x0
#define EIDE_CONTROLLER_ATA_P_IO_1F4_0_CYLINDER_LOW_DEFAULT                     _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F4_0_CYLINDER_LOW_DEFAULT_MASK                        _MK_MASK_CONST(0xff)
#define EIDE_CONTROLLER_ATA_P_IO_1F4_0_CYLINDER_LOW_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F4_0_CYLINDER_LOW_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Primary Channel PIO Cylinder High

// Register EIDE_CONTROLLER_ATA_P_IO_1F5_0  
#define EIDE_CONTROLLER_ATA_P_IO_1F5_0                  _MK_ADDR_CONST(0x1f4)
#define EIDE_CONTROLLER_ATA_P_IO_1F5_0_WORD_COUNT                       0x1
#define EIDE_CONTROLLER_ATA_P_IO_1F5_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F5_0_RESET_MASK                       _MK_MASK_CONST(0xff)
#define EIDE_CONTROLLER_ATA_P_IO_1F5_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F5_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F5_0_READ_MASK                        _MK_MASK_CONST(0xff)
#define EIDE_CONTROLLER_ATA_P_IO_1F5_0_WRITE_MASK                       _MK_MASK_CONST(0xff)
// Primary Channel Cylinder High Register: The  content of this register becomes a command parameter when the command  register is written.
#define EIDE_CONTROLLER_ATA_P_IO_1F5_0_CYLINDER_HIGH_SHIFT                      _MK_SHIFT_CONST(0)
#define EIDE_CONTROLLER_ATA_P_IO_1F5_0_CYLINDER_HIGH_FIELD                      (_MK_MASK_CONST(0xff) << EIDE_CONTROLLER_ATA_P_IO_1F5_0_CYLINDER_HIGH_SHIFT)
#define EIDE_CONTROLLER_ATA_P_IO_1F5_0_CYLINDER_HIGH_RANGE                      7:0
#define EIDE_CONTROLLER_ATA_P_IO_1F5_0_CYLINDER_HIGH_WOFFSET                    0x0
#define EIDE_CONTROLLER_ATA_P_IO_1F5_0_CYLINDER_HIGH_DEFAULT                    _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F5_0_CYLINDER_HIGH_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define EIDE_CONTROLLER_ATA_P_IO_1F5_0_CYLINDER_HIGH_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F5_0_CYLINDER_HIGH_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Primary Channel PIO Device/Head

// Register EIDE_CONTROLLER_ATA_P_IO_1F6_0  
#define EIDE_CONTROLLER_ATA_P_IO_1F6_0                  _MK_ADDR_CONST(0x1f8)
#define EIDE_CONTROLLER_ATA_P_IO_1F6_0_WORD_COUNT                       0x1
#define EIDE_CONTROLLER_ATA_P_IO_1F6_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F6_0_RESET_MASK                       _MK_MASK_CONST(0xff)
#define EIDE_CONTROLLER_ATA_P_IO_1F6_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F6_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F6_0_READ_MASK                        _MK_MASK_CONST(0xff)
#define EIDE_CONTROLLER_ATA_P_IO_1F6_0_WRITE_MASK                       _MK_MASK_CONST(0xff)
// Primary Channel Device/Head Register: The content  of this register becomes a command parameter when the command register is  written.
#define EIDE_CONTROLLER_ATA_P_IO_1F6_0_DEVICE_HEAD_SHIFT                        _MK_SHIFT_CONST(0)
#define EIDE_CONTROLLER_ATA_P_IO_1F6_0_DEVICE_HEAD_FIELD                        (_MK_MASK_CONST(0xff) << EIDE_CONTROLLER_ATA_P_IO_1F6_0_DEVICE_HEAD_SHIFT)
#define EIDE_CONTROLLER_ATA_P_IO_1F6_0_DEVICE_HEAD_RANGE                        7:0
#define EIDE_CONTROLLER_ATA_P_IO_1F6_0_DEVICE_HEAD_WOFFSET                      0x0
#define EIDE_CONTROLLER_ATA_P_IO_1F6_0_DEVICE_HEAD_DEFAULT                      _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F6_0_DEVICE_HEAD_DEFAULT_MASK                 _MK_MASK_CONST(0xff)
#define EIDE_CONTROLLER_ATA_P_IO_1F6_0_DEVICE_HEAD_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F6_0_DEVICE_HEAD_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Primary Channel PIO Status/Command

// Register EIDE_CONTROLLER_ATA_P_IO_1F7_0  
#define EIDE_CONTROLLER_ATA_P_IO_1F7_0                  _MK_ADDR_CONST(0x1fc)
#define EIDE_CONTROLLER_ATA_P_IO_1F7_0_WORD_COUNT                       0x1
#define EIDE_CONTROLLER_ATA_P_IO_1F7_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F7_0_RESET_MASK                       _MK_MASK_CONST(0xff)
#define EIDE_CONTROLLER_ATA_P_IO_1F7_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F7_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F7_0_READ_MASK                        _MK_MASK_CONST(0xff)
#define EIDE_CONTROLLER_ATA_P_IO_1F7_0_WRITE_MASK                       _MK_MASK_CONST(0xff)
// Primary Channel Device/Head Register: The content  of this register becomes a command parameter when the command register is  written.
#define EIDE_CONTROLLER_ATA_P_IO_1F7_0_DEVICE_HEAD_SHIFT                        _MK_SHIFT_CONST(1)
#define EIDE_CONTROLLER_ATA_P_IO_1F7_0_DEVICE_HEAD_FIELD                        (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_P_IO_1F7_0_DEVICE_HEAD_SHIFT)
#define EIDE_CONTROLLER_ATA_P_IO_1F7_0_DEVICE_HEAD_RANGE                        1:1
#define EIDE_CONTROLLER_ATA_P_IO_1F7_0_DEVICE_HEAD_WOFFSET                      0x0
#define EIDE_CONTROLLER_ATA_P_IO_1F7_0_DEVICE_HEAD_DEFAULT                      _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F7_0_DEVICE_HEAD_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_P_IO_1F7_0_DEVICE_HEAD_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F7_0_DEVICE_HEAD_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Read Channel 0 PIO Status Register: This register  contains the device status.
#define EIDE_CONTROLLER_ATA_P_IO_1F7_0_STATUS_SHIFT                     _MK_SHIFT_CONST(0)
#define EIDE_CONTROLLER_ATA_P_IO_1F7_0_STATUS_FIELD                     (_MK_MASK_CONST(0xff) << EIDE_CONTROLLER_ATA_P_IO_1F7_0_STATUS_SHIFT)
#define EIDE_CONTROLLER_ATA_P_IO_1F7_0_STATUS_RANGE                     7:0
#define EIDE_CONTROLLER_ATA_P_IO_1F7_0_STATUS_WOFFSET                   0x0
#define EIDE_CONTROLLER_ATA_P_IO_1F7_0_STATUS_DEFAULT                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F7_0_STATUS_DEFAULT_MASK                      _MK_MASK_CONST(0xff)
#define EIDE_CONTROLLER_ATA_P_IO_1F7_0_STATUS_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_IO_1F7_0_STATUS_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Reserved address 512 [0x200] 

// Reserved address 516 [0x204] 

// Reserved address 520 [0x208] 

// Reserved address 524 [0x20c] 

// Reserved address 528 [0x210] 

// Reserved address 532 [0x214] 

// Reserved address 536 [0x218] 

// Reserved address 540 [0x21c] 

// Reserved address 544 [0x220] 

// Reserved address 548 [0x224] 

// Reserved address 552 [0x228] 

// Reserved address 556 [0x22c] 

// Reserved address 560 [0x230] 

// Reserved address 564 [0x234] 

// Reserved address 568 [0x238] 

// Reserved address 572 [0x23c] 

// Reserved address 576 [0x240] 

// Reserved address 580 [0x244] 

// Reserved address 584 [0x248] 

// Reserved address 588 [0x24c] 

// Reserved address 592 [0x250] 

// Reserved address 596 [0x254] 

// Reserved address 600 [0x258] 

// Reserved address 604 [0x25c] 

// Reserved address 608 [0x260] 

// Reserved address 612 [0x264] 

// Reserved address 616 [0x268] 

// Reserved address 620 [0x26c] 

// Reserved address 624 [0x270] 

// Reserved address 628 [0x274] 

// Reserved address 632 [0x278] 

// Reserved address 636 [0x27c] 

// Reserved address 640 [0x280] 

// Reserved address 644 [0x284] 

// Reserved address 648 [0x288] 

// Reserved address 652 [0x28c] 

// Reserved address 656 [0x290] 

// Reserved address 660 [0x294] 

// Reserved address 664 [0x298] 

// Reserved address 668 [0x29c] 

// Reserved address 672 [0x2a0] 

// Reserved address 676 [0x2a4] 

// Reserved address 680 [0x2a8] 

// Reserved address 684 [0x2ac] 

// Reserved address 688 [0x2b0] 

// Reserved address 692 [0x2b4] 

// Reserved address 696 [0x2b8] 

// Reserved address 700 [0x2bc] 

// Reserved address 704 [0x2c0] 

// Reserved address 708 [0x2c4] 

// Reserved address 712 [0x2c8] 

// Reserved address 716 [0x2cc] 

// Reserved address 720 [0x2d0] 

// Reserved address 724 [0x2d4] 

// Reserved address 728 [0x2d8] 

// Reserved address 732 [0x2dc] 

// Reserved address 736 [0x2e0] 

// Reserved address 740 [0x2e4] 

// Reserved address 744 [0x2e8] 

// Reserved address 748 [0x2ec] 

// Reserved address 752 [0x2f0] 

// Reserved address 756 [0x2f4] 

// Reserved address 760 [0x2f8] 

// Reserved address 764 [0x2fc] 

// Reserved address 768 [0x300] 

// Reserved address 772 [0x304] 

// Reserved address 776 [0x308] 

// Reserved address 780 [0x30c] 

// Reserved address 784 [0x310] 

// Reserved address 788 [0x314] 

// Reserved address 792 [0x318] 

// Reserved address 796 [0x31c] 

// Reserved address 800 [0x320] 

// Reserved address 804 [0x324] 

// Reserved address 808 [0x328] 

// Reserved address 812 [0x32c] 

// Reserved address 816 [0x330] 

// Reserved address 820 [0x334] 

// Reserved address 824 [0x338] 

// Reserved address 828 [0x33c] 

// Reserved address 832 [0x340] 

// Reserved address 836 [0x344] 

// Reserved address 840 [0x348] 

// Reserved address 844 [0x34c] 

// Reserved address 848 [0x350] 

// Reserved address 852 [0x354] 

// Reserved address 856 [0x358] 

// Reserved address 860 [0x35c] 

// Reserved address 864 [0x360] 

// Reserved address 868 [0x364] 

// Reserved address 872 [0x368] 

// Reserved address 876 [0x36c] 

// Reserved address 880 [0x370] 

// Reserved address 884 [0x374] 

// Reserved address 888 [0x378] 

// Reserved address 892 [0x37c] 

// Reserved address 896 [0x380] 

// Reserved address 900 [0x384] 

// Reserved address 904 [0x388] 

// Reserved address 908 [0x38c] 

// Reserved address 912 [0x390] 

// Reserved address 916 [0x394] 

// Reserved address 920 [0x398] 

// Reserved address 924 [0x39c] 

// Reserved address 928 [0x3a0] 

// Reserved address 932 [0x3a4] 

// Reserved address 936 [0x3a8] 

// Reserved address 940 [0x3ac] 

// Reserved address 944 [0x3b0] 

// Reserved address 948 [0x3b4] 

// Reserved address 952 [0x3b8] 

// Reserved address 956 [0x3bc] 

// Reserved address 960 [0x3c0] 

// Reserved address 964 [0x3c4] 

// Reserved address 968 [0x3c8] 

// Reserved address 972 [0x3cc] 

// Reserved address 976 [0x3d0] 

// Reserved address 980 [0x3d4] 

// Reserved address 984 [0x3d8] 

// Reserved address 988 [0x3dc] 

// Reserved address 992 [0x3e0] 

// Reserved address 996 [0x3e4] 

// Reserved address 1000 [0x3e8] 

// Reserved address 1004 [0x3ec] 

// Reserved address 1008 [0x3f0] 

// Reserved address 1012 [0x3f4] 
// Primary Channel ALT Status/Command

// Register EIDE_CONTROLLER_ATA_P_ALT_3F6_0  
#define EIDE_CONTROLLER_ATA_P_ALT_3F6_0                 _MK_ADDR_CONST(0x3f8)
#define EIDE_CONTROLLER_ATA_P_ALT_3F6_0_WORD_COUNT                      0x1
#define EIDE_CONTROLLER_ATA_P_ALT_3F6_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_ALT_3F6_0_RESET_MASK                      _MK_MASK_CONST(0xff)
#define EIDE_CONTROLLER_ATA_P_ALT_3F6_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_ALT_3F6_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_ALT_3F6_0_READ_MASK                       _MK_MASK_CONST(0xff)
#define EIDE_CONTROLLER_ATA_P_ALT_3F6_0_WRITE_MASK                      _MK_MASK_CONST(0xff)
// Primary Channel Alternate Status Register: This  register contains the same information as the status register in the command  block.
#define EIDE_CONTROLLER_ATA_P_ALT_3F6_0_PRIMARY_ALT_PIO_STATUS_SHIFT                    _MK_SHIFT_CONST(0)
#define EIDE_CONTROLLER_ATA_P_ALT_3F6_0_PRIMARY_ALT_PIO_STATUS_FIELD                    (_MK_MASK_CONST(0xff) << EIDE_CONTROLLER_ATA_P_ALT_3F6_0_PRIMARY_ALT_PIO_STATUS_SHIFT)
#define EIDE_CONTROLLER_ATA_P_ALT_3F6_0_PRIMARY_ALT_PIO_STATUS_RANGE                    7:0
#define EIDE_CONTROLLER_ATA_P_ALT_3F6_0_PRIMARY_ALT_PIO_STATUS_WOFFSET                  0x0
#define EIDE_CONTROLLER_ATA_P_ALT_3F6_0_PRIMARY_ALT_PIO_STATUS_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_ALT_3F6_0_PRIMARY_ALT_PIO_STATUS_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define EIDE_CONTROLLER_ATA_P_ALT_3F6_0_PRIMARY_ALT_PIO_STATUS_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_P_ALT_3F6_0_PRIMARY_ALT_PIO_STATUS_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)


// Reserved address 1020 [0x3fc] 
// IDE-DMA Primary Status/Control

// Register EIDE_CONTROLLER_ATA_DMA_P_CSR_0  
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0                 _MK_ADDR_CONST(0x400)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_WORD_COUNT                      0x1
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_RESET_MASK                      _MK_MASK_CONST(0xffffffff)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
//  1 = transfer completed (Read clears  this flag)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DONE_SHIFT                      _MK_SHIFT_CONST(31)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DONE_FIELD                      (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DONE_SHIFT)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DONE_RANGE                      31:31
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DONE_WOFFSET                    0x0
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DONE_DEFAULT                    _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DONE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DONE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DONE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DONE_TRANSFER_NOT_COMPLETED                     _MK_ENUM_CONST(0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DONE_TRANSFER_COMPLETED                 _MK_ENUM_CONST(1)

// DMARQ Status: DMARQ from primary Channel is  Active
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DRQ0_SHIFT                      _MK_SHIFT_CONST(30)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DRQ0_FIELD                      (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DRQ0_SHIFT)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DRQ0_RANGE                      30:30
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DRQ0_WOFFSET                    0x0
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DRQ0_DEFAULT                    _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DRQ0_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DRQ0_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DRQ0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DRQ0_NON_ACTIVE                 _MK_ENUM_CONST(0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DRQ0_ACTIVE                     _MK_ENUM_CONST(1)

//  0 = NOP (Read clears this flag)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_HTERM_SHIFT                     _MK_SHIFT_CONST(29)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_HTERM_FIELD                     (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_DMA_P_CSR_0_HTERM_SHIFT)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_HTERM_RANGE                     29:29
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_HTERM_WOFFSET                   0x0
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_HTERM_DEFAULT                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_HTERM_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_HTERM_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_HTERM_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_HTERM_NOP                       _MK_ENUM_CONST(0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_HTERM_TERMINATED                        _MK_ENUM_CONST(1)

// Reserved = 0
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_19_SHIFT                    _MK_SHIFT_CONST(19)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_19_FIELD                    (_MK_MASK_CONST(0x3ff) << EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_19_SHIFT)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_19_RANGE                    28:19
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_19_WOFFSET                  0x0
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_19_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_19_DEFAULT_MASK                     _MK_MASK_CONST(0x3ff)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_19_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_19_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//  7 = 64 Words (64x64bits) reserved
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_AHB_BURST_LENGTH_SHIFT                  _MK_SHIFT_CONST(16)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_AHB_BURST_LENGTH_FIELD                  (_MK_MASK_CONST(0x7) << EIDE_CONTROLLER_ATA_DMA_P_CSR_0_AHB_BURST_LENGTH_SHIFT)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_AHB_BURST_LENGTH_RANGE                  18:16
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_AHB_BURST_LENGTH_WOFFSET                        0x0
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_AHB_BURST_LENGTH_DEFAULT                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_AHB_BURST_LENGTH_DEFAULT_MASK                   _MK_MASK_CONST(0x7)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_AHB_BURST_LENGTH_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_AHB_BURST_LENGTH_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_AHB_BURST_LENGTH_SINGLE_WORD                    _MK_ENUM_CONST(2)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_AHB_BURST_LENGTH_FOUR_WORDS                     _MK_ENUM_CONST(3)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_AHB_BURST_LENGTH_EIGHT_WORDS                    _MK_ENUM_CONST(4)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_AHB_BURST_LENGTH_SIXTEEN_WORDS                  _MK_ENUM_CONST(5)

// Reserved = 0
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_20_SHIFT                    _MK_SHIFT_CONST(8)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_20_FIELD                    (_MK_MASK_CONST(0xff) << EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_20_SHIFT)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_20_RANGE                    15:8
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_20_WOFFSET                  0x0
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_20_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_20_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_20_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_20_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//  0 = Disable
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_IE_T_SHIFT                      _MK_SHIFT_CONST(7)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_IE_T_FIELD                      (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_DMA_P_CSR_0_IE_T_SHIFT)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_IE_T_RANGE                      7:7
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_IE_T_WOFFSET                    0x0
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_IE_T_DEFAULT                    _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_IE_T_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_IE_T_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_IE_T_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_IE_T_DISABLE                    _MK_ENUM_CONST(0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_IE_T_ENABLE                     _MK_ENUM_CONST(1)

//  0 = Disable
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_IE_E_SHIFT                      _MK_SHIFT_CONST(6)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_IE_E_FIELD                      (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_DMA_P_CSR_0_IE_E_SHIFT)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_IE_E_RANGE                      6:6
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_IE_E_WOFFSET                    0x0
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_IE_E_DEFAULT                    _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_IE_E_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_IE_E_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_IE_E_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_IE_E_DISABLE                    _MK_ENUM_CONST(0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_IE_E_ENABLE                     _MK_ENUM_CONST(1)

// Reserved = 0
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_21_SHIFT                    _MK_SHIFT_CONST(4)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_21_FIELD                    (_MK_MASK_CONST(0x3) << EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_21_SHIFT)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_21_RANGE                    5:4
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_21_WOFFSET                  0x0
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_21_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_21_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_21_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_21_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//  0 = Read from AHB and write to IDE
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DIR_SHIFT                       _MK_SHIFT_CONST(3)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DIR_FIELD                       (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DIR_SHIFT)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DIR_RANGE                       3:3
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DIR_WOFFSET                     0x0
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DIR_DEFAULT                     _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DIR_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DIR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DIR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DIR_FROM_AHB                    _MK_ENUM_CONST(0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_DIR_TO_AHB                      _MK_ENUM_CONST(1)

// Reserved = 0
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_22_SHIFT                    _MK_SHIFT_CONST(2)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_22_FIELD                    (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_22_SHIFT)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_22_RANGE                    2:2
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_22_WOFFSET                  0x0
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_22_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_22_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_22_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_N_A_22_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//  0 = NOP
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_CLR_SHIFT                       _MK_SHIFT_CONST(1)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_CLR_FIELD                       (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_DMA_P_CSR_0_CLR_SHIFT)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_CLR_RANGE                       1:1
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_CLR_WOFFSET                     0x0
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_CLR_DEFAULT                     _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_CLR_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_CLR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_CLR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_CLR_NOP                 _MK_ENUM_CONST(0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_CLR_CLEAR                       _MK_ENUM_CONST(1)

//  0 = NOP
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_ENB_SHIFT                       _MK_SHIFT_CONST(0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_ENB_FIELD                       (_MK_MASK_CONST(0x1) << EIDE_CONTROLLER_ATA_DMA_P_CSR_0_ENB_SHIFT)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_ENB_RANGE                       0:0
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_ENB_WOFFSET                     0x0
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_ENB_DEFAULT                     _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_ENB_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_ENB_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_ENB_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_ENB_NOP                 _MK_ENUM_CONST(0)
#define EIDE_CONTROLLER_ATA_DMA_P_CSR_0_ENB_START                       _MK_ENUM_CONST(1)

// IDE-DMA Transfer Word Counts (Status)

// Register EIDE_CONTROLLER_ATA_DMA_WCOUNT_0  
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0                        _MK_ADDR_CONST(0x404)
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_WORD_COUNT                     0x1
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_RESET_MASK                     _MK_MASK_CONST(0xffffffff)
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_WRITE_MASK                     _MK_MASK_CONST(0x0)
// Reserved
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_N_A_23_SHIFT                   _MK_SHIFT_CONST(20)
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_N_A_23_FIELD                   (_MK_MASK_CONST(0xfff) << EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_N_A_23_SHIFT)
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_N_A_23_RANGE                   31:20
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_N_A_23_WOFFSET                 0x0
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_N_A_23_DEFAULT                 _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_N_A_23_DEFAULT_MASK                    _MK_MASK_CONST(0xfff)
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_N_A_23_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_N_A_23_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Transfer 32bit Word Count (status)
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_XFER_SIZE_SHIFT                        _MK_SHIFT_CONST(2)
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_XFER_SIZE_FIELD                        (_MK_MASK_CONST(0x3ffff) << EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_XFER_SIZE_SHIFT)
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_XFER_SIZE_RANGE                        19:2
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_XFER_SIZE_WOFFSET                      0x0
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_XFER_SIZE_DEFAULT                      _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_XFER_SIZE_DEFAULT_MASK                 _MK_MASK_CONST(0x3ffff)
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_XFER_SIZE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_XFER_SIZE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Reserved
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_N_A_24_SHIFT                   _MK_SHIFT_CONST(0)
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_N_A_24_FIELD                   (_MK_MASK_CONST(0x3) << EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_N_A_24_SHIFT)
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_N_A_24_RANGE                   1:0
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_N_A_24_WOFFSET                 0x0
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_N_A_24_DEFAULT                 _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_N_A_24_DEFAULT_MASK                    _MK_MASK_CONST(0x3)
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_N_A_24_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_WCOUNT_0_N_A_24_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// IDE-DMA Transfer Word Length (Size)

// Register EIDE_CONTROLLER_ATA_DMA_WLENGTH_0  
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0                       _MK_ADDR_CONST(0x408)
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_WORD_COUNT                    0x1
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_RESET_MASK                    _MK_MASK_CONST(0xffffffff)
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_READ_MASK                     _MK_MASK_CONST(0xffffffff)
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_WRITE_MASK                    _MK_MASK_CONST(0xffffffff)
// Reserved = 0
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_N_A_25_SHIFT                  _MK_SHIFT_CONST(20)
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_N_A_25_FIELD                  (_MK_MASK_CONST(0xfff) << EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_N_A_25_SHIFT)
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_N_A_25_RANGE                  31:20
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_N_A_25_WOFFSET                        0x0
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_N_A_25_DEFAULT                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_N_A_25_DEFAULT_MASK                   _MK_MASK_CONST(0xfff)
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_N_A_25_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_N_A_25_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Transfer 32bit Word Count (size)
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_XFER_SIZE_SHIFT                       _MK_SHIFT_CONST(2)
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_XFER_SIZE_FIELD                       (_MK_MASK_CONST(0x3ffff) << EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_XFER_SIZE_SHIFT)
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_XFER_SIZE_RANGE                       19:2
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_XFER_SIZE_WOFFSET                     0x0
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_XFER_SIZE_DEFAULT                     _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_XFER_SIZE_DEFAULT_MASK                        _MK_MASK_CONST(0x3ffff)
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_XFER_SIZE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_XFER_SIZE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Reserved = 0
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_N_A_26_SHIFT                  _MK_SHIFT_CONST(0)
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_N_A_26_FIELD                  (_MK_MASK_CONST(0x3) << EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_N_A_26_SHIFT)
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_N_A_26_RANGE                  1:0
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_N_A_26_WOFFSET                        0x0
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_N_A_26_DEFAULT                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_N_A_26_DEFAULT_MASK                   _MK_MASK_CONST(0x3)
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_N_A_26_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_WLENGTH_0_N_A_26_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// IDE-DMA Source/Destination Address

// Register EIDE_CONTROLLER_ATA_DMA_TARGET_0  
#define EIDE_CONTROLLER_ATA_DMA_TARGET_0                        _MK_ADDR_CONST(0x40c)
#define EIDE_CONTROLLER_ATA_DMA_TARGET_0_WORD_COUNT                     0x1
#define EIDE_CONTROLLER_ATA_DMA_TARGET_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_TARGET_0_RESET_MASK                     _MK_MASK_CONST(0xffffffff)
#define EIDE_CONTROLLER_ATA_DMA_TARGET_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_TARGET_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_TARGET_0_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define EIDE_CONTROLLER_ATA_DMA_TARGET_0_WRITE_MASK                     _MK_MASK_CONST(0xffffffff)
// (Starting Address)
#define EIDE_CONTROLLER_ATA_DMA_TARGET_0_ADDRESS_SHIFT                  _MK_SHIFT_CONST(2)
#define EIDE_CONTROLLER_ATA_DMA_TARGET_0_ADDRESS_FIELD                  (_MK_MASK_CONST(0x3fffffff) << EIDE_CONTROLLER_ATA_DMA_TARGET_0_ADDRESS_SHIFT)
#define EIDE_CONTROLLER_ATA_DMA_TARGET_0_ADDRESS_RANGE                  31:2
#define EIDE_CONTROLLER_ATA_DMA_TARGET_0_ADDRESS_WOFFSET                        0x0
#define EIDE_CONTROLLER_ATA_DMA_TARGET_0_ADDRESS_DEFAULT                        _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_TARGET_0_ADDRESS_DEFAULT_MASK                   _MK_MASK_CONST(0x3fffffff)
#define EIDE_CONTROLLER_ATA_DMA_TARGET_0_ADDRESS_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_TARGET_0_ADDRESS_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Reserved = 0
#define EIDE_CONTROLLER_ATA_DMA_TARGET_0_N_A_27_SHIFT                   _MK_SHIFT_CONST(0)
#define EIDE_CONTROLLER_ATA_DMA_TARGET_0_N_A_27_FIELD                   (_MK_MASK_CONST(0x3) << EIDE_CONTROLLER_ATA_DMA_TARGET_0_N_A_27_SHIFT)
#define EIDE_CONTROLLER_ATA_DMA_TARGET_0_N_A_27_RANGE                   1:0
#define EIDE_CONTROLLER_ATA_DMA_TARGET_0_N_A_27_WOFFSET                 0x0
#define EIDE_CONTROLLER_ATA_DMA_TARGET_0_N_A_27_DEFAULT                 _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_TARGET_0_N_A_27_DEFAULT_MASK                    _MK_MASK_CONST(0x3)
#define EIDE_CONTROLLER_ATA_DMA_TARGET_0_N_A_27_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define EIDE_CONTROLLER_ATA_DMA_TARGET_0_N_A_27_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


//
// REGISTER LIST
//
#define LIST_AREIDE_REGS(_op_) \
_op_(EIDE_CONTROLLER_ATA_PM_PIO_CSR_0) \
_op_(EIDE_CONTROLLER_ATA_PM_DMA_CSR_0) \
_op_(EIDE_CONTROLLER_ATA_PS_PIO_CSR_0) \
_op_(EIDE_CONTROLLER_ATA_PS_DMA_CSR_0) \
_op_(EIDE_CONTROLLER_ATA_IDE0_CSR_0) \
_op_(EIDE_CONTROLLER_ATA_P_IO_1F0_0) \
_op_(EIDE_CONTROLLER_ATA_P_IO_1F1_0) \
_op_(EIDE_CONTROLLER_ATA_P_IO_1F2_0) \
_op_(EIDE_CONTROLLER_ATA_P_IO_1F3_0) \
_op_(EIDE_CONTROLLER_ATA_P_IO_1F4_0) \
_op_(EIDE_CONTROLLER_ATA_P_IO_1F5_0) \
_op_(EIDE_CONTROLLER_ATA_P_IO_1F6_0) \
_op_(EIDE_CONTROLLER_ATA_P_IO_1F7_0) \
_op_(EIDE_CONTROLLER_ATA_P_ALT_3F6_0) \
_op_(EIDE_CONTROLLER_ATA_DMA_P_CSR_0) \
_op_(EIDE_CONTROLLER_ATA_DMA_WCOUNT_0) \
_op_(EIDE_CONTROLLER_ATA_DMA_WLENGTH_0) \
_op_(EIDE_CONTROLLER_ATA_DMA_TARGET_0)


//
// ADDRESS SPACES
//

#define BASE_ADDRESS_EIDE_CONTROLLER    0x00000000

//
// AREIDE REGISTER BANKS
//

#define EIDE_CONTROLLER0_FIRST_REG 0x0000 // EIDE_CONTROLLER_ATA_PM_PIO_CSR_0
#define EIDE_CONTROLLER0_LAST_REG 0x000c // EIDE_CONTROLLER_ATA_PS_DMA_CSR_0
#define EIDE_CONTROLLER1_FIRST_REG 0x0028 // EIDE_CONTROLLER_ATA_IDE0_CSR_0
#define EIDE_CONTROLLER1_LAST_REG 0x0028 // EIDE_CONTROLLER_ATA_IDE0_CSR_0
#define EIDE_CONTROLLER2_FIRST_REG 0x01e0 // EIDE_CONTROLLER_ATA_P_IO_1F0_0
#define EIDE_CONTROLLER2_LAST_REG 0x01fc // EIDE_CONTROLLER_ATA_P_IO_1F7_0
#define EIDE_CONTROLLER3_FIRST_REG 0x03f8 // EIDE_CONTROLLER_ATA_P_ALT_3F6_0
#define EIDE_CONTROLLER3_LAST_REG 0x03f8 // EIDE_CONTROLLER_ATA_P_ALT_3F6_0
#define EIDE_CONTROLLER4_FIRST_REG 0x0400 // EIDE_CONTROLLER_ATA_DMA_P_CSR_0
#define EIDE_CONTROLLER4_LAST_REG 0x040c // EIDE_CONTROLLER_ATA_DMA_TARGET_0

#ifndef _MK_SHIFT_CONST
  #define _MK_SHIFT_CONST(_constant_) _constant_
#endif
#ifndef _MK_MASK_CONST
  #define _MK_MASK_CONST(_constant_) _constant_
#endif
#ifndef _MK_ENUM_CONST
  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
#endif
#ifndef _MK_ADDR_CONST
  #define _MK_ADDR_CONST(_constant_) _constant_
#endif

#endif // ifndef ___AREIDE_H_INC_
