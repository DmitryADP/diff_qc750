//
// DO NOT EDIT - generated by simspec!
//

#ifndef ___ARUSB_OTG_H_INC_
#define ___ARUSB_OTG_H_INC_
// USB2D Identification Register

// Register USB2_CONTROLLER_USB2D_ID_0  
#define USB2_CONTROLLER_USB2D_ID_0                      _MK_ADDR_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ID_0_WORD_COUNT                   0x1
#define USB2_CONTROLLER_USB2D_ID_0_RESET_VAL                    _MK_MASK_CONST(0x33fa05)
#define USB2_CONTROLLER_USB2D_ID_0_RESET_MASK                   _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_ID_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ID_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ID_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_ID_0_WRITE_MASK                   _MK_MASK_CONST(0x0)
// Reserved 
#define USB2_CONTROLLER_USB2D_ID_0_N_A_SHIFT                    _MK_SHIFT_CONST(24)
#define USB2_CONTROLLER_USB2D_ID_0_N_A_FIELD                    (_MK_MASK_CONST(0xff) << USB2_CONTROLLER_USB2D_ID_0_N_A_SHIFT)
#define USB2_CONTROLLER_USB2D_ID_0_N_A_RANGE                    31:24
#define USB2_CONTROLLER_USB2D_ID_0_N_A_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ID_0_N_A_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ID_0_N_A_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define USB2_CONTROLLER_USB2D_ID_0_N_A_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ID_0_N_A_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Revision number of the USB controller. This is set  to 0x33.
#define USB2_CONTROLLER_USB2D_ID_0_REVISION_SHIFT                       _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_ID_0_REVISION_FIELD                       (_MK_MASK_CONST(0xff) << USB2_CONTROLLER_USB2D_ID_0_REVISION_SHIFT)
#define USB2_CONTROLLER_USB2D_ID_0_REVISION_RANGE                       23:16
#define USB2_CONTROLLER_USB2D_ID_0_REVISION_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_ID_0_REVISION_DEFAULT                     _MK_MASK_CONST(0x33)
#define USB2_CONTROLLER_USB2D_ID_0_REVISION_DEFAULT_MASK                        _MK_MASK_CONST(0xff)
#define USB2_CONTROLLER_USB2D_ID_0_REVISION_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ID_0_REVISION_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Ones complement version of ID. This field is set  to 0xFA.
#define USB2_CONTROLLER_USB2D_ID_0_NID_SHIFT                    _MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_ID_0_NID_FIELD                    (_MK_MASK_CONST(0xff) << USB2_CONTROLLER_USB2D_ID_0_NID_SHIFT)
#define USB2_CONTROLLER_USB2D_ID_0_NID_RANGE                    15:8
#define USB2_CONTROLLER_USB2D_ID_0_NID_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ID_0_NID_DEFAULT                  _MK_MASK_CONST(0xfa)
#define USB2_CONTROLLER_USB2D_ID_0_NID_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define USB2_CONTROLLER_USB2D_ID_0_NID_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ID_0_NID_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Configuration number. This field is set to 0x05
#define USB2_CONTROLLER_USB2D_ID_0_ID_SHIFT                     _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_ID_0_ID_FIELD                     (_MK_MASK_CONST(0xff) << USB2_CONTROLLER_USB2D_ID_0_ID_SHIFT)
#define USB2_CONTROLLER_USB2D_ID_0_ID_RANGE                     7:0
#define USB2_CONTROLLER_USB2D_ID_0_ID_WOFFSET                   0x0
#define USB2_CONTROLLER_USB2D_ID_0_ID_DEFAULT                   _MK_MASK_CONST(0x5)
#define USB2_CONTROLLER_USB2D_ID_0_ID_DEFAULT_MASK                      _MK_MASK_CONST(0xff)
#define USB2_CONTROLLER_USB2D_ID_0_ID_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ID_0_ID_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// USB2D Hardware General Register

// Register USB2_CONTROLLER_USB2D_HW_GENERAL_0  
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0                      _MK_ADDR_CONST(0x4)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_WORD_COUNT                   0x1
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_RESET_VAL                    _MK_MASK_CONST(0x35)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_RESET_MASK                   _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_WRITE_MASK                   _MK_MASK_CONST(0x0)
// Reserved 
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_N_A1_SHIFT                   _MK_SHIFT_CONST(9)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_N_A1_FIELD                   (_MK_MASK_CONST(0x7fffff) << USB2_CONTROLLER_USB2D_HW_GENERAL_0_N_A1_SHIFT)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_N_A1_RANGE                   31:9
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_N_A1_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_N_A1_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_N_A1_DEFAULT_MASK                    _MK_MASK_CONST(0x7fffff)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_N_A1_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_N_A1_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// VUSB_HS_PHY_MODE : set to 0 for UTMI PHY
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_PHYM_SHIFT                   _MK_SHIFT_CONST(6)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_PHYM_FIELD                   (_MK_MASK_CONST(0x7) << USB2_CONTROLLER_USB2D_HW_GENERAL_0_PHYM_SHIFT)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_PHYM_RANGE                   8:6
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_PHYM_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_PHYM_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_PHYM_DEFAULT_MASK                    _MK_MASK_CONST(0x7)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_PHYM_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_PHYM_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// VUSB_HS_PHY16_8 : Width of the UTMI parallel  interface. Set to 3 : 16-bit UTMI parallel interface software programmable to  8-bit
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_PHYW_SHIFT                   _MK_SHIFT_CONST(4)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_PHYW_FIELD                   (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_HW_GENERAL_0_PHYW_SHIFT)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_PHYW_RANGE                   5:4
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_PHYW_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_PHYW_DEFAULT                 _MK_MASK_CONST(0x3)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_PHYW_DEFAULT_MASK                    _MK_MASK_CONST(0x3)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_PHYW_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_PHYW_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Reserved 
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_N_A2_SHIFT                   _MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_N_A2_FIELD                   (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HW_GENERAL_0_N_A2_SHIFT)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_N_A2_RANGE                   3:3
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_N_A2_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_N_A2_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_N_A2_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_N_A2_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_N_A2_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// VUSB_HS_CLOCK_CONFIGURATION : Clock configuration  2 selected
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_CLKC_SHIFT                   _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_CLKC_FIELD                   (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_HW_GENERAL_0_CLKC_SHIFT)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_CLKC_RANGE                   2:1
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_CLKC_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_CLKC_DEFAULT                 _MK_MASK_CONST(0x2)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_CLKC_DEFAULT_MASK                    _MK_MASK_CONST(0x3)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_CLKC_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_CLKC_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// VUSB_HS_RESET_TYPE : set to 1 = asynchronous reset
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_RT_SHIFT                     _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_RT_FIELD                     (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HW_GENERAL_0_RT_SHIFT)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_RT_RANGE                     0:0
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_RT_WOFFSET                   0x0
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_RT_DEFAULT                   _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_RT_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_RT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_GENERAL_0_RT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// USB2D Hardware Host Register

// Register USB2_CONTROLLER_USB2D_HW_HOST_0  
#define USB2_CONTROLLER_USB2D_HW_HOST_0                 _MK_ADDR_CONST(0x8)
#define USB2_CONTROLLER_USB2D_HW_HOST_0_WORD_COUNT                      0x1
#define USB2_CONTROLLER_USB2D_HW_HOST_0_RESET_VAL                       _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_HW_HOST_0_RESET_MASK                      _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_HW_HOST_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_HOST_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_HOST_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_HW_HOST_0_WRITE_MASK                      _MK_MASK_CONST(0x0)
// Reserved 
#define USB2_CONTROLLER_USB2D_HW_HOST_0_N_A_SHIFT                       _MK_SHIFT_CONST(4)
#define USB2_CONTROLLER_USB2D_HW_HOST_0_N_A_FIELD                       (_MK_MASK_CONST(0xfffffff) << USB2_CONTROLLER_USB2D_HW_HOST_0_N_A_SHIFT)
#define USB2_CONTROLLER_USB2D_HW_HOST_0_N_A_RANGE                       31:4
#define USB2_CONTROLLER_USB2D_HW_HOST_0_N_A_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_HW_HOST_0_N_A_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_HOST_0_N_A_DEFAULT_MASK                        _MK_MASK_CONST(0xfffffff)
#define USB2_CONTROLLER_USB2D_HW_HOST_0_N_A_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_HOST_0_N_A_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// VUSB_HS_NUM_PORT-1: This host controller has only  1 port. So this field will always be 0.
#define USB2_CONTROLLER_USB2D_HW_HOST_0_NPORT_SHIFT                     _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HW_HOST_0_NPORT_FIELD                     (_MK_MASK_CONST(0x7) << USB2_CONTROLLER_USB2D_HW_HOST_0_NPORT_SHIFT)
#define USB2_CONTROLLER_USB2D_HW_HOST_0_NPORT_RANGE                     3:1
#define USB2_CONTROLLER_USB2D_HW_HOST_0_NPORT_WOFFSET                   0x0
#define USB2_CONTROLLER_USB2D_HW_HOST_0_NPORT_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_HOST_0_NPORT_DEFAULT_MASK                      _MK_MASK_CONST(0x7)
#define USB2_CONTROLLER_USB2D_HW_HOST_0_NPORT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_HOST_0_NPORT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// VUSB_HS_HOST: Indicates support for host mode. Set  to 1.
#define USB2_CONTROLLER_USB2D_HW_HOST_0_HC_SHIFT                        _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HW_HOST_0_HC_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HW_HOST_0_HC_SHIFT)
#define USB2_CONTROLLER_USB2D_HW_HOST_0_HC_RANGE                        0:0
#define USB2_CONTROLLER_USB2D_HW_HOST_0_HC_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_HW_HOST_0_HC_DEFAULT                      _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_HW_HOST_0_HC_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_HW_HOST_0_HC_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_HOST_0_HC_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// USB2D Hardware Device Register

// Register USB2_CONTROLLER_USB2D_HW_DEVICE_0  
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0                       _MK_ADDR_CONST(0xc)
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_WORD_COUNT                    0x1
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_RESET_VAL                     _MK_MASK_CONST(0x7)
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_RESET_MASK                    _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_READ_MASK                     _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_WRITE_MASK                    _MK_MASK_CONST(0x0)
// Reserved 
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_N_A_SHIFT                     _MK_SHIFT_CONST(6)
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_N_A_FIELD                     (_MK_MASK_CONST(0x3ffffff) << USB2_CONTROLLER_USB2D_HW_DEVICE_0_N_A_SHIFT)
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_N_A_RANGE                     31:6
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_N_A_WOFFSET                   0x0
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_N_A_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_N_A_DEFAULT_MASK                      _MK_MASK_CONST(0x3ffffff)
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_N_A_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_N_A_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// VUSB_HS_DV_EP: No. of endpoints supported by this device controller. Set to 3. This includes control endpoint 0.
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_DEVEP_SHIFT                   _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_DEVEP_FIELD                   (_MK_MASK_CONST(0x1f) << USB2_CONTROLLER_USB2D_HW_DEVICE_0_DEVEP_SHIFT)
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_DEVEP_RANGE                   5:1
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_DEVEP_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_DEVEP_DEFAULT                 _MK_MASK_CONST(0x3)
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_DEVEP_DEFAULT_MASK                    _MK_MASK_CONST(0x1f)
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_DEVEP_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_DEVEP_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Device capable: Set to 1 indicating support for device mode.
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_DC_SHIFT                      _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_DC_FIELD                      (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HW_DEVICE_0_DC_SHIFT)
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_DC_RANGE                      0:0
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_DC_WOFFSET                    0x0
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_DC_DEFAULT                    _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_DC_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_DC_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_DEVICE_0_DC_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// USB2D Hardware TX Buffer Register

// Register USB2_CONTROLLER_USB2D_HW_TXBUF_0  
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0                        _MK_ADDR_CONST(0x10)
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_WORD_COUNT                     0x1
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_RESET_VAL                      _MK_MASK_CONST(0x60810)
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_RESET_MASK                     _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_WRITE_MASK                     _MK_MASK_CONST(0x0)
// Reserved 
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_N_A_SHIFT                      _MK_SHIFT_CONST(24)
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_N_A_FIELD                      (_MK_MASK_CONST(0xff) << USB2_CONTROLLER_USB2D_HW_TXBUF_0_N_A_SHIFT)
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_N_A_RANGE                      31:24
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_N_A_WOFFSET                    0x0
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_N_A_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_N_A_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_N_A_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_N_A_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// VUSB_HS_TX_CHAN_ADD: Total no. of address bits for the transmit buffer of each transmit endpoint. Set to 6. Each transmit buffer is 64 words deep.
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_TXCHANADD_SHIFT                        _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_TXCHANADD_FIELD                        (_MK_MASK_CONST(0xff) << USB2_CONTROLLER_USB2D_HW_TXBUF_0_TXCHANADD_SHIFT)
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_TXCHANADD_RANGE                        23:16
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_TXCHANADD_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_TXCHANADD_DEFAULT                      _MK_MASK_CONST(0x6)
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_TXCHANADD_DEFAULT_MASK                 _MK_MASK_CONST(0xff)
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_TXCHANADD_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_TXCHANADD_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// VUSB_HS_TX_ADD: Total no. of address bits for the transmit buffer. Set to 8. The total depth of the transmit buffer is 192 words.
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_TXADD_SHIFT                    _MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_TXADD_FIELD                    (_MK_MASK_CONST(0xff) << USB2_CONTROLLER_USB2D_HW_TXBUF_0_TXADD_SHIFT)
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_TXADD_RANGE                    15:8
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_TXADD_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_TXADD_DEFAULT                  _MK_MASK_CONST(0x8)
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_TXADD_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_TXADD_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_TXADD_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// VUSB_HS_TX_BURST: Maximum burst size supported by the transmit endpoints for data transfers. Set to 16.
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_TCBURST_SHIFT                  _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_TCBURST_FIELD                  (_MK_MASK_CONST(0xff) << USB2_CONTROLLER_USB2D_HW_TXBUF_0_TCBURST_SHIFT)
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_TCBURST_RANGE                  7:0
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_TCBURST_WOFFSET                        0x0
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_TCBURST_DEFAULT                        _MK_MASK_CONST(0x10)
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_TCBURST_DEFAULT_MASK                   _MK_MASK_CONST(0xff)
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_TCBURST_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_TXBUF_0_TCBURST_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// USB2D RX Buffer HW Parameters Register

// Register USB2_CONTROLLER_USB2D_HW_RXBUF_0  
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0                        _MK_ADDR_CONST(0x14)
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_WORD_COUNT                     0x1
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_RESET_VAL                      _MK_MASK_CONST(0x610)
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_RESET_MASK                     _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_WRITE_MASK                     _MK_MASK_CONST(0x0)
// Reserved 
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_N_A_SHIFT                      _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_N_A_FIELD                      (_MK_MASK_CONST(0xffff) << USB2_CONTROLLER_USB2D_HW_RXBUF_0_N_A_SHIFT)
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_N_A_RANGE                      31:16
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_N_A_WOFFSET                    0x0
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_N_A_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_N_A_DEFAULT_MASK                       _MK_MASK_CONST(0xffff)
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_N_A_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_N_A_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// VUSB_HS_RX_ADD: Total no. of address bits for the receive buffer. Set to 6. The total depth of the receive buffer is 64 words
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_RXADD_SHIFT                    _MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_RXADD_FIELD                    (_MK_MASK_CONST(0xff) << USB2_CONTROLLER_USB2D_HW_RXBUF_0_RXADD_SHIFT)
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_RXADD_RANGE                    15:8
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_RXADD_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_RXADD_DEFAULT                  _MK_MASK_CONST(0x6)
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_RXADD_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_RXADD_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_RXADD_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// VUSB_HS_RX_BURST: Maximum burst size supported by the receive endpoints for data transfers. Set to 16.
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_RXBURST_SHIFT                  _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_RXBURST_FIELD                  (_MK_MASK_CONST(0xff) << USB2_CONTROLLER_USB2D_HW_RXBUF_0_RXBURST_SHIFT)
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_RXBURST_RANGE                  7:0
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_RXBURST_WOFFSET                        0x0
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_RXBURST_DEFAULT                        _MK_MASK_CONST(0x10)
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_RXBURST_DEFAULT_MASK                   _MK_MASK_CONST(0xff)
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_RXBURST_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HW_RXBUF_0_RXBURST_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// USB2D Capability Register Length Register

// Register USB2_CONTROLLER_USB2D_CAPLENGTH_0  
#define USB2_CONTROLLER_USB2D_CAPLENGTH_0                       _MK_ADDR_CONST(0x100)
#define USB2_CONTROLLER_USB2D_CAPLENGTH_0_WORD_COUNT                    0x1
#define USB2_CONTROLLER_USB2D_CAPLENGTH_0_RESET_VAL                     _MK_MASK_CONST(0x40)
#define USB2_CONTROLLER_USB2D_CAPLENGTH_0_RESET_MASK                    _MK_MASK_CONST(0xffff)
#define USB2_CONTROLLER_USB2D_CAPLENGTH_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_CAPLENGTH_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_CAPLENGTH_0_READ_MASK                     _MK_MASK_CONST(0xffff)
#define USB2_CONTROLLER_USB2D_CAPLENGTH_0_WRITE_MASK                    _MK_MASK_CONST(0x0)
// Reserved 
#define USB2_CONTROLLER_USB2D_CAPLENGTH_0_N_A_SHIFT                     _MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_CAPLENGTH_0_N_A_FIELD                     (_MK_MASK_CONST(0xff) << USB2_CONTROLLER_USB2D_CAPLENGTH_0_N_A_SHIFT)
#define USB2_CONTROLLER_USB2D_CAPLENGTH_0_N_A_RANGE                     15:8
#define USB2_CONTROLLER_USB2D_CAPLENGTH_0_N_A_WOFFSET                   0x0
#define USB2_CONTROLLER_USB2D_CAPLENGTH_0_N_A_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_CAPLENGTH_0_N_A_DEFAULT_MASK                      _MK_MASK_CONST(0xff)
#define USB2_CONTROLLER_USB2D_CAPLENGTH_0_N_A_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_CAPLENGTH_0_N_A_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// Indicates which offset to add to the register base address at the beginning of the Operational Register. Set to 0x40.
#define USB2_CONTROLLER_USB2D_CAPLENGTH_0_CAPLENGTH_SHIFT                       _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_CAPLENGTH_0_CAPLENGTH_FIELD                       (_MK_MASK_CONST(0xff) << USB2_CONTROLLER_USB2D_CAPLENGTH_0_CAPLENGTH_SHIFT)
#define USB2_CONTROLLER_USB2D_CAPLENGTH_0_CAPLENGTH_RANGE                       7:0
#define USB2_CONTROLLER_USB2D_CAPLENGTH_0_CAPLENGTH_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_CAPLENGTH_0_CAPLENGTH_DEFAULT                     _MK_MASK_CONST(0x40)
#define USB2_CONTROLLER_USB2D_CAPLENGTH_0_CAPLENGTH_DEFAULT_MASK                        _MK_MASK_CONST(0xff)
#define USB2_CONTROLLER_USB2D_CAPLENGTH_0_CAPLENGTH_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_CAPLENGTH_0_CAPLENGTH_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// USB2D Host Interface Version Number Register

// Register USB2_CONTROLLER_USB2D_HCIVERSON_0  
#define USB2_CONTROLLER_USB2D_HCIVERSON_0                       _MK_ADDR_CONST(0x102)
#define USB2_CONTROLLER_USB2D_HCIVERSON_0_WORD_COUNT                    0x1
#define USB2_CONTROLLER_USB2D_HCIVERSON_0_RESET_VAL                     _MK_MASK_CONST(0x100)
#define USB2_CONTROLLER_USB2D_HCIVERSON_0_RESET_MASK                    _MK_MASK_CONST(0xffff)
#define USB2_CONTROLLER_USB2D_HCIVERSON_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCIVERSON_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCIVERSON_0_READ_MASK                     _MK_MASK_CONST(0xffff)
#define USB2_CONTROLLER_USB2D_HCIVERSON_0_WRITE_MASK                    _MK_MASK_CONST(0x0)
// Contains a BCD encoding of the EHCI revision number supported by this host controller. The most significant byte of this register represents a major revision and the least significant byte is the minor revision. This host controller supports EHCI revision 1.00.
#define USB2_CONTROLLER_USB2D_HCIVERSON_0_HCIVERSION_SHIFT                      _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HCIVERSON_0_HCIVERSION_FIELD                      (_MK_MASK_CONST(0xffff) << USB2_CONTROLLER_USB2D_HCIVERSON_0_HCIVERSION_SHIFT)
#define USB2_CONTROLLER_USB2D_HCIVERSON_0_HCIVERSION_RANGE                      15:0
#define USB2_CONTROLLER_USB2D_HCIVERSON_0_HCIVERSION_WOFFSET                    0x0
#define USB2_CONTROLLER_USB2D_HCIVERSON_0_HCIVERSION_DEFAULT                    _MK_MASK_CONST(0x100)
#define USB2_CONTROLLER_USB2D_HCIVERSON_0_HCIVERSION_DEFAULT_MASK                       _MK_MASK_CONST(0xffff)
#define USB2_CONTROLLER_USB2D_HCIVERSON_0_HCIVERSION_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCIVERSON_0_HCIVERSION_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// USB2D Host Control Structural Parameters Register

// Register USB2_CONTROLLER_USB2D_HCSPARAMS_0  
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0                       _MK_ADDR_CONST(0x104)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_WORD_COUNT                    0x1
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_RESET_VAL                     _MK_MASK_CONST(0x1100011)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_RESET_MASK                    _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_READ_MASK                     _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_WRITE_MASK                    _MK_MASK_CONST(0x0)
// Reserved 
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_A1_SHIFT                    _MK_SHIFT_CONST(28)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_A1_FIELD                    (_MK_MASK_CONST(0xf) << USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_A1_SHIFT)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_A1_RANGE                    31:28
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_A1_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_A1_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_A1_DEFAULT_MASK                     _MK_MASK_CONST(0xf)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_A1_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_A1_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Number of Transaction Translators: indicates the number of embedded transaction translators associated with the USB2.0 host controller. This field is always set to 1 indicating only 1 embedded TT is implemented in this implementation. This is a non-EHCI field to support embedded TT.
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_TT_SHIFT                    _MK_SHIFT_CONST(24)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_TT_FIELD                    (_MK_MASK_CONST(0xf) << USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_TT_SHIFT)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_TT_RANGE                    27:24
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_TT_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_TT_DEFAULT                  _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_TT_DEFAULT_MASK                     _MK_MASK_CONST(0xf)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_TT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_TT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Number of Ports per Transaction Translator: indicates the number of ports assigned to each transaction translator within the USB2.0 host controller. Field always equals N_PORTS. This is a non-EHCI field to support embedded TT.
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_PTT_SHIFT                   _MK_SHIFT_CONST(20)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_PTT_FIELD                   (_MK_MASK_CONST(0xf) << USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_PTT_SHIFT)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_PTT_RANGE                   23:20
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_PTT_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_PTT_DEFAULT                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_PTT_DEFAULT_MASK                    _MK_MASK_CONST(0xf)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_PTT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_PTT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Reserved 
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_A2_SHIFT                    _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_A2_FIELD                    (_MK_MASK_CONST(0xf) << USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_A2_SHIFT)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_A2_RANGE                    19:16
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_A2_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_A2_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_A2_DEFAULT_MASK                     _MK_MASK_CONST(0xf)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_A2_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_A2_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Number of Companion Controller: indicates the number of companion controllers. This field is set to 0.
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_CC_SHIFT                    _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_CC_FIELD                    (_MK_MASK_CONST(0xf) << USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_CC_SHIFT)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_CC_RANGE                    15:12
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_CC_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_CC_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_CC_DEFAULT_MASK                     _MK_MASK_CONST(0xf)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_CC_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_CC_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Number of Ports per Companion Controller: indicates the number of ports supported per internal companion controller. This field is set to 0.
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_PCC_SHIFT                   _MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_PCC_FIELD                   (_MK_MASK_CONST(0xf) << USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_PCC_SHIFT)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_PCC_RANGE                   11:8
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_PCC_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_PCC_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_PCC_DEFAULT_MASK                    _MK_MASK_CONST(0xf)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_PCC_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_PCC_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Reserved 
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_A3_SHIFT                    _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_A3_FIELD                    (_MK_MASK_CONST(0x7) << USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_A3_SHIFT)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_A3_RANGE                    7:5
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_A3_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_A3_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_A3_DEFAULT_MASK                     _MK_MASK_CONST(0x7)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_A3_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_A3_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Port Power Control: indicates whether the host controller implementation includes port power control. 
// 1 = Ports have port power switches         0= Ports do not have port power switches.
// This field affects the functionality of the port Power field in each port status and control register. This field is set to 1.
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_PPC_SHIFT                     _MK_SHIFT_CONST(4)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_PPC_FIELD                     (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HCSPARAMS_0_PPC_SHIFT)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_PPC_RANGE                     4:4
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_PPC_WOFFSET                   0x0
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_PPC_DEFAULT                   _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_PPC_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_PPC_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_PPC_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// Number of downstream ports. This field specifies the number of physical downstream ports implemented on this host controller. This field is fixed to 1, since this host controller only supports 1 port.
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_PORTS_SHIFT                 _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_PORTS_FIELD                 (_MK_MASK_CONST(0xf) << USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_PORTS_SHIFT)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_PORTS_RANGE                 3:0
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_PORTS_WOFFSET                       0x0
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_PORTS_DEFAULT                       _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_PORTS_DEFAULT_MASK                  _MK_MASK_CONST(0xf)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_PORTS_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCSPARAMS_0_N_PORTS_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// USB2D Host Control Capability Parameters Register

// Register USB2_CONTROLLER_USB2D_HCCPARAMS_0  
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0                       _MK_ADDR_CONST(0x108)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_WORD_COUNT                    0x1
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_RESET_VAL                     _MK_MASK_CONST(0x6)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_RESET_MASK                    _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_READ_MASK                     _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_WRITE_MASK                    _MK_MASK_CONST(0x0)
// Reserved 
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_N_A1_SHIFT                    _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_N_A1_FIELD                    (_MK_MASK_CONST(0xffff) << USB2_CONTROLLER_USB2D_HCCPARAMS_0_N_A1_SHIFT)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_N_A1_RANGE                    31:16
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_N_A1_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_N_A1_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_N_A1_DEFAULT_MASK                     _MK_MASK_CONST(0xffff)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_N_A1_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_N_A1_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// EHCI Extended Capabilities Pointer: indicates a capabilities list exists. A value of 00h indicates no extended capabilities are implemented. For this implementation this field is always "0". 
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_EECP_SHIFT                    _MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_EECP_FIELD                    (_MK_MASK_CONST(0xff) << USB2_CONTROLLER_USB2D_HCCPARAMS_0_EECP_SHIFT)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_EECP_RANGE                    15:8
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_EECP_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_EECP_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_EECP_DEFAULT_MASK                     _MK_MASK_CONST(0xff)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_EECP_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_EECP_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Isochronous Scheduling Threshold. This field indicates, relative to the current position of the executing host controller, where software can reliably update the isochronous schedule. When bit [7] is zero, the value of the least significant 3 bits indicates the number of micro-frames a host controller can hold a set of isochronous data structures  (one or more) before flushing the state. When bit [7] is a one, then host software assumes the host controller may cache an isochronous data structure for an entire frame. This field will always be "0". 
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_IST_SHIFT                     _MK_SHIFT_CONST(4)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_IST_FIELD                     (_MK_MASK_CONST(0xf) << USB2_CONTROLLER_USB2D_HCCPARAMS_0_IST_SHIFT)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_IST_RANGE                     7:4
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_IST_WOFFSET                   0x0
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_IST_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_IST_DEFAULT_MASK                      _MK_MASK_CONST(0xf)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_IST_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_IST_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// Reserved 
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_N_A2_SHIFT                    _MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_N_A2_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HCCPARAMS_0_N_A2_SHIFT)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_N_A2_RANGE                    3:3
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_N_A2_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_N_A2_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_N_A2_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_N_A2_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_N_A2_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Asynchronous Schedule Park Capability. 
// 1 = (Default) the host controller supports the park feature for high-speed queue heads in the Asynchronous Schedule. The feature can be disabled or enabled and set to a specific level by using the Asynchronous Schedule Park Mode Enable and Asynchronous Schedule Park Mode Count fields in the USBCMD register. 
// This field is always 1.
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_ASP_SHIFT                     _MK_SHIFT_CONST(2)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_ASP_FIELD                     (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HCCPARAMS_0_ASP_SHIFT)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_ASP_RANGE                     2:2
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_ASP_WOFFSET                   0x0
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_ASP_DEFAULT                   _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_ASP_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_ASP_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_ASP_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// Programmable Frame List Flag. 
// 0 = System software must use a frame list length of 1024 elements with this host controller. The USBCMD register Frame List Size field is a read-only register and must be set to zero. 
// 1 = System software can specify and use a smaller frame list and configure the host controller via the USBCMD register Frame List Size field.  The frame list must always be aligned on a 4K-page boundary.  This requirement ensures that the frame list is always physically contiguous. 
// This field will always be "1". 
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_PFL_SHIFT                     _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_PFL_FIELD                     (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HCCPARAMS_0_PFL_SHIFT)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_PFL_RANGE                     1:1
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_PFL_WOFFSET                   0x0
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_PFL_DEFAULT                   _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_PFL_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_PFL_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_PFL_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// Reserved
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_N_A3_SHIFT                    _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_N_A3_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HCCPARAMS_0_N_A3_SHIFT)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_N_A3_RANGE                    0:0
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_N_A3_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_N_A3_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_N_A3_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_N_A3_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_HCCPARAMS_0_N_A3_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// USB2D Device Interface Version Number Register

// Register USB2_CONTROLLER_USB2D_DCIVERSION_0  
#define USB2_CONTROLLER_USB2D_DCIVERSION_0                      _MK_ADDR_CONST(0x120)
#define USB2_CONTROLLER_USB2D_DCIVERSION_0_WORD_COUNT                   0x1
#define USB2_CONTROLLER_USB2D_DCIVERSION_0_RESET_VAL                    _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_DCIVERSION_0_RESET_MASK                   _MK_MASK_CONST(0xffff)
#define USB2_CONTROLLER_USB2D_DCIVERSION_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_DCIVERSION_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_DCIVERSION_0_READ_MASK                    _MK_MASK_CONST(0xffff)
#define USB2_CONTROLLER_USB2D_DCIVERSION_0_WRITE_MASK                   _MK_MASK_CONST(0x0)
// The device controller interface conforms to the two-byte BCD encoding of the interface version number contained in this  register. 
#define USB2_CONTROLLER_USB2D_DCIVERSION_0_DCIVERSION_SHIFT                     _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DCIVERSION_0_DCIVERSION_FIELD                     (_MK_MASK_CONST(0xffff) << USB2_CONTROLLER_USB2D_DCIVERSION_0_DCIVERSION_SHIFT)
#define USB2_CONTROLLER_USB2D_DCIVERSION_0_DCIVERSION_RANGE                     15:0
#define USB2_CONTROLLER_USB2D_DCIVERSION_0_DCIVERSION_WOFFSET                   0x0
#define USB2_CONTROLLER_USB2D_DCIVERSION_0_DCIVERSION_DEFAULT                   _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_DCIVERSION_0_DCIVERSION_DEFAULT_MASK                      _MK_MASK_CONST(0xffff)
#define USB2_CONTROLLER_USB2D_DCIVERSION_0_DCIVERSION_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_DCIVERSION_0_DCIVERSION_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// USB2D Device Control Capabilities Register

// Register USB2_CONTROLLER_USB2D_DCCPARAMS_0  
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0                       _MK_ADDR_CONST(0x124)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_WORD_COUNT                    0x1
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_RESET_VAL                     _MK_MASK_CONST(0x183)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_RESET_MASK                    _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_READ_MASK                     _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_WRITE_MASK                    _MK_MASK_CONST(0x0)
// Reserved 
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_N_A1_SHIFT                    _MK_SHIFT_CONST(9)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_N_A1_FIELD                    (_MK_MASK_CONST(0x7fffff) << USB2_CONTROLLER_USB2D_DCCPARAMS_0_N_A1_SHIFT)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_N_A1_RANGE                    31:9
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_N_A1_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_N_A1_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_N_A1_DEFAULT_MASK                     _MK_MASK_CONST(0x7fffff)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_N_A1_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_N_A1_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Host Capable: 1 = This controller is capable of operating as an EHCI compatible USB 2 0 host controller operating as an EHCI  compatible USB 2.0 host controller. This field is set to 1.
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_HC_SHIFT                      _MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_HC_FIELD                      (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_DCCPARAMS_0_HC_SHIFT)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_HC_RANGE                      8:8
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_HC_WOFFSET                    0x0
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_HC_DEFAULT                    _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_HC_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_HC_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_HC_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Device Capable: 1 = Controller is capable of operating as USB 2.0 device. This field is set to 1.
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_DC_SHIFT                      _MK_SHIFT_CONST(7)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_DC_FIELD                      (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_DCCPARAMS_0_DC_SHIFT)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_DC_RANGE                      7:7
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_DC_WOFFSET                    0x0
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_DC_DEFAULT                    _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_DC_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_DC_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_DC_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Reserved 
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_N_A2_SHIFT                    _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_N_A2_FIELD                    (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_DCCPARAMS_0_N_A2_SHIFT)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_N_A2_RANGE                    6:5
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_N_A2_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_N_A2_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_N_A2_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_N_A2_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_N_A2_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Device Endpoint Number: Number of endpoints built into the device controller. This is set to 3.
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_DEN_SHIFT                     _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_DEN_FIELD                     (_MK_MASK_CONST(0x1f) << USB2_CONTROLLER_USB2D_DCCPARAMS_0_DEN_SHIFT)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_DEN_RANGE                     4:0
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_DEN_WOFFSET                   0x0
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_DEN_DEFAULT                   _MK_MASK_CONST(0x3)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_DEN_DEFAULT_MASK                      _MK_MASK_CONST(0x1f)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_DEN_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_DCCPARAMS_0_DEN_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// USB2D USB Command Register

// Register USB2_CONTROLLER_USB2D_USBCMD_0  
#define USB2_CONTROLLER_USB2D_USBCMD_0                  _MK_ADDR_CONST(0x140)
#define USB2_CONTROLLER_USB2D_USBCMD_0_WORD_COUNT                       0x1
#define USB2_CONTROLLER_USB2D_USBCMD_0_RESET_VAL                        _MK_MASK_CONST(0x80b00)
#define USB2_CONTROLLER_USB2D_USBCMD_0_RESET_MASK                       _MK_MASK_CONST(0x80ffefff)
#define USB2_CONTROLLER_USB2D_USBCMD_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_READ_MASK                        _MK_MASK_CONST(0x80ffefff)
#define USB2_CONTROLLER_USB2D_USBCMD_0_WRITE_MASK                       _MK_MASK_CONST(0xffeb7f)
// Reserved 
#define USB2_CONTROLLER_USB2D_USBCMD_0_N_A1_SHIFT                       _MK_SHIFT_CONST(31)
#define USB2_CONTROLLER_USB2D_USBCMD_0_N_A1_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBCMD_0_N_A1_SHIFT)
#define USB2_CONTROLLER_USB2D_USBCMD_0_N_A1_RANGE                       31:31
#define USB2_CONTROLLER_USB2D_USBCMD_0_N_A1_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_USBCMD_0_N_A1_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_N_A1_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBCMD_0_N_A1_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_N_A1_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Interrupt Threshold Control .Read/Write. Default 08h. The system software uses this field to set the maximum rate at which the host/device controller will issue interrupts. ITC contains the maximum interrupt interval measured in micro-frames. Valid values are shown below.  
// Value          Maximum Interrupt Interval 
// 00h              Immediate (no threshold) 
// 01h                1 micro-frame 
// 02h           2 micro-frames 
// 04h          4 micro-frames 
// 08h          8 micro-frames 
// 10h          16 micro-frames 
// 20h         32 micro-frames 
// 40h         64 micro-frames
#define USB2_CONTROLLER_USB2D_USBCMD_0_ITC_SHIFT                        _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ITC_FIELD                        (_MK_MASK_CONST(0xff) << USB2_CONTROLLER_USB2D_USBCMD_0_ITC_SHIFT)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ITC_RANGE                        23:16
#define USB2_CONTROLLER_USB2D_USBCMD_0_ITC_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_USBCMD_0_ITC_DEFAULT                      _MK_MASK_CONST(0x8)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ITC_DEFAULT_MASK                 _MK_MASK_CONST(0xff)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ITC_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ITC_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ITC_IMMEDIATE                    _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ITC_ONE_MF                       _MK_ENUM_CONST(2)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ITC_TWO_MF                       _MK_ENUM_CONST(4)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ITC_EIGHT_MF                     _MK_ENUM_CONST(8)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ITC_SIXTEEN_MF                   _MK_ENUM_CONST(16)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ITC_THIRTY_TWO_MF                        _MK_ENUM_CONST(32)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ITC_SIXTY_FOUR_MF                        _MK_ENUM_CONST(64)

// Bit 2 of Frame List Size.
#define USB2_CONTROLLER_USB2D_USBCMD_0_FS2_SHIFT                        _MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_USBCMD_0_FS2_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBCMD_0_FS2_SHIFT)
#define USB2_CONTROLLER_USB2D_USBCMD_0_FS2_RANGE                        15:15
#define USB2_CONTROLLER_USB2D_USBCMD_0_FS2_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_USBCMD_0_FS2_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_FS2_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBCMD_0_FS2_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_FS2_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Frame List Size . (Read/Write).  000 = Default
// This field is Read/Write only if Programmable Frame List Flag in the HCCPARAMS registers is set to one.  Hence this field is Read/Write for this implementation. This field specifies the size of the frame list that controls which bits in the Frame Index Register should be used for the Frame List Current index. 
// Note that this field is made up from USBCMD bits 15, 3 and 2. 
// 000 = 1024 elements (4096 bytes) Default value 
// 001 = 512 elements (2048 bytes) 
// 010 = 256 elements (1024 bytes)  
// 011 = 128 elements (512 bytes) 
// 100 = 64 elements (256 bytes) 
// 101 = 32 elements (128 bytes) 
// 110 = 16 elements (64 bytes) 
// 111 = 8 elements (32 bytes)       
// Only the host controller uses this field. 
#define USB2_CONTROLLER_USB2D_USBCMD_0_FS1_FS0_SHIFT                    _MK_SHIFT_CONST(2)
#define USB2_CONTROLLER_USB2D_USBCMD_0_FS1_FS0_FIELD                    (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_USBCMD_0_FS1_FS0_SHIFT)
#define USB2_CONTROLLER_USB2D_USBCMD_0_FS1_FS0_RANGE                    3:2
#define USB2_CONTROLLER_USB2D_USBCMD_0_FS1_FS0_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_USBCMD_0_FS1_FS0_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_FS1_FS0_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define USB2_CONTROLLER_USB2D_USBCMD_0_FS1_FS0_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_FS1_FS0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Setup Tripwire. This bit is used as a semaphore when the 8 bytes  of setup data read extracted by the firmware. If the setup lockout mode is  off, then there exists a hazard when new setup data arrives and firmware is  copying setup data from the QH for a previous setup packet. This bit is set  and cleared by software and will be cleared by hardware when a hazard exists.
#define USB2_CONTROLLER_USB2D_USBCMD_0_SUTW_SHIFT                       _MK_SHIFT_CONST(13)
#define USB2_CONTROLLER_USB2D_USBCMD_0_SUTW_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBCMD_0_SUTW_SHIFT)
#define USB2_CONTROLLER_USB2D_USBCMD_0_SUTW_RANGE                       13:13
#define USB2_CONTROLLER_USB2D_USBCMD_0_SUTW_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_USBCMD_0_SUTW_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_SUTW_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBCMD_0_SUTW_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_SUTW_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_SUTW_CLEAR                       _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_SUTW_SET                 _MK_ENUM_CONST(1)

// Add DTD Tripwire. This bit is used as a semaphore when a dTD is  added to an active (primed) endpoint. This bit is set and cleared by software  and will be cleared by hardware when a hazard exists such that adding a dTD  to a primed endpoint may go unnoticed.
#define USB2_CONTROLLER_USB2D_USBCMD_0_ATDTW_SHIFT                      _MK_SHIFT_CONST(14)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ATDTW_FIELD                      (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBCMD_0_ATDTW_SHIFT)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ATDTW_RANGE                      14:14
#define USB2_CONTROLLER_USB2D_USBCMD_0_ATDTW_WOFFSET                    0x0
#define USB2_CONTROLLER_USB2D_USBCMD_0_ATDTW_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ATDTW_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ATDTW_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ATDTW_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ATDTW_CLEAR                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ATDTW_SET                        _MK_ENUM_CONST(1)

// Asynchronous Schedule Park mode Enable. Software uses this bit to enable or disable Park mode. When this bit is one, Park mode is enabled. When this bit is a zero, Park mode is disabled.  This field is set to "1" in this  implementation. 
#define USB2_CONTROLLER_USB2D_USBCMD_0_ASPE_SHIFT                       _MK_SHIFT_CONST(11)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ASPE_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBCMD_0_ASPE_SHIFT)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ASPE_RANGE                       11:11
#define USB2_CONTROLLER_USB2D_USBCMD_0_ASPE_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_USBCMD_0_ASPE_DEFAULT                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ASPE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ASPE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ASPE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ASPE_DISABLE                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ASPE_ENABLE                      _MK_ENUM_CONST(1)

// Reserved 
#define USB2_CONTROLLER_USB2D_USBCMD_0_N_A_SHIFT                        _MK_SHIFT_CONST(10)
#define USB2_CONTROLLER_USB2D_USBCMD_0_N_A_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBCMD_0_N_A_SHIFT)
#define USB2_CONTROLLER_USB2D_USBCMD_0_N_A_RANGE                        10:10
#define USB2_CONTROLLER_USB2D_USBCMD_0_N_A_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_USBCMD_0_N_A_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_N_A_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBCMD_0_N_A_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_N_A_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Asynchronous Schedule Park Mode Count (OPTIONAL) Read/Write.  If the Asynchronous Park Capability bit in the HCCPARAMS register is a one,  then this field defaults to 3h and is R/W. Otherwise it defaults to zero and  is RO. It contains a count of the number of successive transactions the host  controller is allowed to execute from a high-speed queue head on the  Asynchronous schedule before continuing traversal of the Asynchronous  schedule. Valid values are 1h to 3h. Software must not write a zero to this  bit when Park Mode Enable is a one as this will result in undefined behavior.  This field is set to 3h in this implementation and is Read/Write capable. 
#define USB2_CONTROLLER_USB2D_USBCMD_0_ASP1_ASP0_SHIFT                  _MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ASP1_ASP0_FIELD                  (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_USBCMD_0_ASP1_ASP0_SHIFT)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ASP1_ASP0_RANGE                  9:8
#define USB2_CONTROLLER_USB2D_USBCMD_0_ASP1_ASP0_WOFFSET                        0x0
#define USB2_CONTROLLER_USB2D_USBCMD_0_ASP1_ASP0_DEFAULT                        _MK_MASK_CONST(0x3)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ASP1_ASP0_DEFAULT_MASK                   _MK_MASK_CONST(0x3)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ASP1_ASP0_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ASP1_ASP0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Light Host/Device Controller Reset (OPTIONAL) .  Read Only. Not Implemented. This field will always be "0". 
#define USB2_CONTROLLER_USB2D_USBCMD_0_LR_SHIFT                 _MK_SHIFT_CONST(7)
#define USB2_CONTROLLER_USB2D_USBCMD_0_LR_FIELD                 (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBCMD_0_LR_SHIFT)
#define USB2_CONTROLLER_USB2D_USBCMD_0_LR_RANGE                 7:7
#define USB2_CONTROLLER_USB2D_USBCMD_0_LR_WOFFSET                       0x0
#define USB2_CONTROLLER_USB2D_USBCMD_0_LR_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_LR_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBCMD_0_LR_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_LR_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Interrupt on Async Advance Doorbell. When the host controller has evicted all  appropriate cached schedule states, it sets the Interrupt on Async Advance  status bit in the USBSTS register. If the Interrupt on Sync Advance Enable  bit in the USBINTR register is one, then the host controller will assert an  interrupt at the next interrupt threshold. The host controller sets this bit  to zero after it has set the Interrupt on Sync Advance status bit in the  USBSTS register to one. Software should not write a one to this bit when the  asynchronous schedule is inactive. Doing so will yield undefined results. This  bit is only used in host mode. Writing a one to this bit when device mode is  selected will have undefined results. 
#define USB2_CONTROLLER_USB2D_USBCMD_0_IAA_SHIFT                        _MK_SHIFT_CONST(6)
#define USB2_CONTROLLER_USB2D_USBCMD_0_IAA_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBCMD_0_IAA_SHIFT)
#define USB2_CONTROLLER_USB2D_USBCMD_0_IAA_RANGE                        6:6
#define USB2_CONTROLLER_USB2D_USBCMD_0_IAA_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_USBCMD_0_IAA_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_IAA_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBCMD_0_IAA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_IAA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_IAA_CLEAR                        _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_IAA_SET                  _MK_ENUM_CONST(1)

// Asynchronous Schedule Enable. This bit controls whether the host controller skips processing the Asynchronous Schedule. 
// 0 = Do not process the Asynchronous Schedule. 
// 1 = Use the ASYNCLISTADDR register to access the  Asynchronous Schedule. 
// Only the host controller uses this bit. 
#define USB2_CONTROLLER_USB2D_USBCMD_0_ASE_SHIFT                        _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ASE_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBCMD_0_ASE_SHIFT)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ASE_RANGE                        5:5
#define USB2_CONTROLLER_USB2D_USBCMD_0_ASE_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_USBCMD_0_ASE_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ASE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ASE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ASE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ASE_DISABLE                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_ASE_ENABLE                       _MK_ENUM_CONST(1)

// Periodic Schedule Enable.This bit controls whether the host controller skips processing the Periodic Schedule. 
// 0 = Do not process the Periodic Schedule 
// 1 = Use the PERIODICLISTBASE register to access the Periodic  Schedule. 
// Only the host controller uses this bit. 
#define USB2_CONTROLLER_USB2D_USBCMD_0_PSE_SHIFT                        _MK_SHIFT_CONST(4)
#define USB2_CONTROLLER_USB2D_USBCMD_0_PSE_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBCMD_0_PSE_SHIFT)
#define USB2_CONTROLLER_USB2D_USBCMD_0_PSE_RANGE                        4:4
#define USB2_CONTROLLER_USB2D_USBCMD_0_PSE_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_USBCMD_0_PSE_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_PSE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBCMD_0_PSE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_PSE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_PSE_DISABLE                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_PSE_ENABLE                       _MK_ENUM_CONST(1)

// Controller Reset. Software uses this bit to reset the controller. This bit is set to zero by the Host/Device Controller when the reset process is complete. Software cannot terminate the reset process early by writing a zero to this register. 
// Host Controller: 
// When software writes a one to this bit, the Host Controller resets its internal pipelines, timers, counters, state machines etc. to their initial value. Any transaction currently in progress on USB is immediately terminated. A USB reset is not driven on downstream ports. Software should not set this bit to a one when the HCHalted bit in the USBSTS register is a zero.  Attempting to reset an actively running host controller results in undefined behavior.   
// Device Controller: 
// When software writes a one to this bit, the Device  Controller resets its internal pipelines, timers, counters, state machines  etc. to their initial value. Any transaction currently in progress on USB is  immediately terminated. Writing a one to this bit in device mode is not  recommended. 
#define USB2_CONTROLLER_USB2D_USBCMD_0_RST_SHIFT                        _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_USBCMD_0_RST_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBCMD_0_RST_SHIFT)
#define USB2_CONTROLLER_USB2D_USBCMD_0_RST_RANGE                        1:1
#define USB2_CONTROLLER_USB2D_USBCMD_0_RST_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_USBCMD_0_RST_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_RST_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBCMD_0_RST_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_RST_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_RST_CLEAR                        _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_RST_SET                  _MK_ENUM_CONST(1)

// Run/Stop: 
// Host Controller: 
// When set to a 1, the Host Controller proceeds with the execution of the schedule.  
// The Host Controller continues execution as long as this bit is set to a one.  When this bit is set to 0, the Host Controller completes the current transaction on the USB and then halts.  The HCHalted bit in the status register indicates when the Host Controller has finished the transaction and has entered the stopped state.  Software should not write a one to this field unless the host controller is in the Halted state (i.e. HCHalted in the USBSTS register is a one). 
// Device Controller: 
// Writing a one to this bit will cause the device  controller to enable a pull-up on D+ and initiate an attach event. This  control bit is not directly connected to the pull-up enable, as the pull-up  will become disabled upon transitioning into high-speed mode. Software should  use this bit to prevent an attach event before the device controller has been  properly initialized. Writing a 0 to this will cause a detach event. 
#define USB2_CONTROLLER_USB2D_USBCMD_0_RS_SHIFT                 _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_RS_FIELD                 (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBCMD_0_RS_SHIFT)
#define USB2_CONTROLLER_USB2D_USBCMD_0_RS_RANGE                 0:0
#define USB2_CONTROLLER_USB2D_USBCMD_0_RS_WOFFSET                       0x0
#define USB2_CONTROLLER_USB2D_USBCMD_0_RS_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_RS_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBCMD_0_RS_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_RS_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_RS_STOP                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBCMD_0_RS_RUN                   _MK_ENUM_CONST(1)

// USB2D USB Status Register

// Register USB2_CONTROLLER_USB2D_USBSTS_0  
#define USB2_CONTROLLER_USB2D_USBSTS_0                  _MK_ADDR_CONST(0x144)
#define USB2_CONTROLLER_USB2D_USBSTS_0_WORD_COUNT                       0x1
#define USB2_CONTROLLER_USB2D_USBSTS_0_RESET_VAL                        _MK_MASK_CONST(0x1000)
#define USB2_CONTROLLER_USB2D_USBSTS_0_RESET_MASK                       _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_USBSTS_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_USBSTS_0_WRITE_MASK                       _MK_MASK_CONST(0xd1ef)
// Reserved 
#define USB2_CONTROLLER_USB2D_USBSTS_0_N_A1_SHIFT                       _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_USBSTS_0_N_A1_FIELD                       (_MK_MASK_CONST(0xffff) << USB2_CONTROLLER_USB2D_USBSTS_0_N_A1_SHIFT)
#define USB2_CONTROLLER_USB2D_USBSTS_0_N_A1_RANGE                       31:16
#define USB2_CONTROLLER_USB2D_USBSTS_0_N_A1_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_USBSTS_0_N_A1_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_N_A1_DEFAULT_MASK                        _MK_MASK_CONST(0xffff)
#define USB2_CONTROLLER_USB2D_USBSTS_0_N_A1_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_N_A1_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Asynchronous Schedule Status. This bit reports the current real status of the Asynchronous Schedule.  When set to zero the asynchronous schedule status is disabled and if set to one the status is enabled.  The Host Controller is not required to immediately disable or enable the Asynchronous Schedule when software transitions the Asynchronous Schedule Enable bit in the USBCMD register.  
// If AS = ASE: 
// 1= Enable Asynchronous Schedule    0= Disable Asynchronous Schedule
// Only used by the host controller. 
#define USB2_CONTROLLER_USB2D_USBSTS_0_AS_SHIFT                 _MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_USBSTS_0_AS_FIELD                 (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBSTS_0_AS_SHIFT)
#define USB2_CONTROLLER_USB2D_USBSTS_0_AS_RANGE                 15:15
#define USB2_CONTROLLER_USB2D_USBSTS_0_AS_WOFFSET                       0x0
#define USB2_CONTROLLER_USB2D_USBSTS_0_AS_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_AS_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBSTS_0_AS_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_AS_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_AS_DISABLE                       _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_AS_ENABLE                        _MK_ENUM_CONST(1)

// Periodic Schedule Status. This bit reports the current real status of the Periodic Schedule.  When set to zero the periodic schedule is disabled, and if set to one the status is enabled.  
// The Host Controller is not required to immediately disable or enable the Periodic Schedule when software transitions the Periodic Schedule Enable bit in the USBCMD register.  
// If PS = PSE then:
// 1 = Periodic Schedule is enabled or 0 = Periodic Schedule is disabled
// Only used by the host controller. 
#define USB2_CONTROLLER_USB2D_USBSTS_0_PS_SHIFT                 _MK_SHIFT_CONST(14)
#define USB2_CONTROLLER_USB2D_USBSTS_0_PS_FIELD                 (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBSTS_0_PS_SHIFT)
#define USB2_CONTROLLER_USB2D_USBSTS_0_PS_RANGE                 14:14
#define USB2_CONTROLLER_USB2D_USBSTS_0_PS_WOFFSET                       0x0
#define USB2_CONTROLLER_USB2D_USBSTS_0_PS_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_PS_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBSTS_0_PS_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_PS_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_PS_DISABLE                       _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_PS_ENABLE                        _MK_ENUM_CONST(1)

// Reclamation. This is a read-only status bit used to detect an  empty asynchronous schedule. Only used by the host controller. 
#define USB2_CONTROLLER_USB2D_USBSTS_0_RCL_SHIFT                        _MK_SHIFT_CONST(13)
#define USB2_CONTROLLER_USB2D_USBSTS_0_RCL_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBSTS_0_RCL_SHIFT)
#define USB2_CONTROLLER_USB2D_USBSTS_0_RCL_RANGE                        13:13
#define USB2_CONTROLLER_USB2D_USBSTS_0_RCL_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_USBSTS_0_RCL_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_RCL_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBSTS_0_RCL_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_RCL_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_RCL_DISABLE                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_RCL_ENABLE                       _MK_ENUM_CONST(1)

// HCHalted. 1 = Default. This bit is a zero  whenever the Run/Stop bit is a one. The Host Controller sets this bit to one  after it has stopped executing because of the Run/Stop bit being set to 0,  either by software or by the Host Controller hardware (e.g. internal error). Only  used by the host controller. 
#define USB2_CONTROLLER_USB2D_USBSTS_0_HCH_SHIFT                        _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_USBSTS_0_HCH_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBSTS_0_HCH_SHIFT)
#define USB2_CONTROLLER_USB2D_USBSTS_0_HCH_RANGE                        12:12
#define USB2_CONTROLLER_USB2D_USBSTS_0_HCH_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_USBSTS_0_HCH_DEFAULT                      _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBSTS_0_HCH_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBSTS_0_HCH_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_HCH_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_HCH_UNHALTED                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_HCH_HALTED                       _MK_ENUM_CONST(1)

// Reserved 
#define USB2_CONTROLLER_USB2D_USBSTS_0_N_A2_SHIFT                       _MK_SHIFT_CONST(9)
#define USB2_CONTROLLER_USB2D_USBSTS_0_N_A2_FIELD                       (_MK_MASK_CONST(0x7) << USB2_CONTROLLER_USB2D_USBSTS_0_N_A2_SHIFT)
#define USB2_CONTROLLER_USB2D_USBSTS_0_N_A2_RANGE                       11:9
#define USB2_CONTROLLER_USB2D_USBSTS_0_N_A2_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_USBSTS_0_N_A2_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_N_A2_DEFAULT_MASK                        _MK_MASK_CONST(0x7)
#define USB2_CONTROLLER_USB2D_USBSTS_0_N_A2_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_N_A2_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// DCSuspend. When a device controller enters a suspend state  from an active state, this bit will be set to a 1. The device controller  clears the bit upon exiting from a suspend state. Only used by the device  controller. 
#define USB2_CONTROLLER_USB2D_USBSTS_0_SLI_SHIFT                        _MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_USBSTS_0_SLI_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBSTS_0_SLI_SHIFT)
#define USB2_CONTROLLER_USB2D_USBSTS_0_SLI_RANGE                        8:8
#define USB2_CONTROLLER_USB2D_USBSTS_0_SLI_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_USBSTS_0_SLI_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_SLI_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBSTS_0_SLI_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_SLI_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_SLI_NOTSUSPEND                   _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_SLI_SUSPENDED                    _MK_ENUM_CONST(1)

// SOF Received. When the device controller detects a Start Of (micro) Frame, this bit will be set to a one. When a SOF is extremely late, the device controller will automatically set this bit to indicate that an SOF was expected.  Therefore, this bit will be set roughly every 1ms in device FS mode and every 125us in HS mode and will be synchronized to the actual SOF that is received. Since device controller is initialized to FS before connect, this bit Will be set at an interval of 1ms during the prelude to the connect and chirp. In host mode, this bit will be set every 125us and can be used by host controller driver as a time base. 
// Software writes a 1 to this bit to clear it. This  is a non-EHCI status bit. 
#define USB2_CONTROLLER_USB2D_USBSTS_0_SRI_SHIFT                        _MK_SHIFT_CONST(7)
#define USB2_CONTROLLER_USB2D_USBSTS_0_SRI_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBSTS_0_SRI_SHIFT)
#define USB2_CONTROLLER_USB2D_USBSTS_0_SRI_RANGE                        7:7
#define USB2_CONTROLLER_USB2D_USBSTS_0_SRI_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_USBSTS_0_SRI_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_SRI_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBSTS_0_SRI_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_SRI_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_SRI_SOF_NOT_RCVD                 _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_SRI_SOF_RCVD                     _MK_ENUM_CONST(1)

// USB Reset Received. When the device controller detects a USB Reset and  enters the default state, this bit is set to a 1. Software can write a 1 to  this bit to clear the USB Reset Received status bit. Only used by the device  controller. 
#define USB2_CONTROLLER_USB2D_USBSTS_0_URI_SHIFT                        _MK_SHIFT_CONST(6)
#define USB2_CONTROLLER_USB2D_USBSTS_0_URI_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBSTS_0_URI_SHIFT)
#define USB2_CONTROLLER_USB2D_USBSTS_0_URI_RANGE                        6:6
#define USB2_CONTROLLER_USB2D_USBSTS_0_URI_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_USBSTS_0_URI_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_URI_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBSTS_0_URI_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_URI_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_URI_NO_USB_RESET                 _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_URI_USB_RESET                    _MK_ENUM_CONST(1)

// Interrupt and Asynchronous Advance. System software can force the host controller to  issue an interrupt the next time the host controller advances the  asynchronous schedule by writing a one to the Interrupt on Async Advance  Doorbell bit in the USBCMD register. This status bit indicates the assertion  of that interrupt source. Only used by the host controller
#define USB2_CONTROLLER_USB2D_USBSTS_0_AAI_SHIFT                        _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_USBSTS_0_AAI_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBSTS_0_AAI_SHIFT)
#define USB2_CONTROLLER_USB2D_USBSTS_0_AAI_RANGE                        5:5
#define USB2_CONTROLLER_USB2D_USBSTS_0_AAI_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_USBSTS_0_AAI_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_AAI_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBSTS_0_AAI_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_AAI_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_AAI_NOT_ADVANCED                 _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_AAI_ADVANCED                     _MK_ENUM_CONST(1)

// System Error. This bit is not used in this  implementation and will always be set to "0". 
#define USB2_CONTROLLER_USB2D_USBSTS_0_SEI_SHIFT                        _MK_SHIFT_CONST(4)
#define USB2_CONTROLLER_USB2D_USBSTS_0_SEI_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBSTS_0_SEI_SHIFT)
#define USB2_CONTROLLER_USB2D_USBSTS_0_SEI_RANGE                        4:4
#define USB2_CONTROLLER_USB2D_USBSTS_0_SEI_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_USBSTS_0_SEI_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_SEI_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBSTS_0_SEI_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_SEI_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_SEI_NO_ERROR                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_SEI_ERROR                        _MK_ENUM_CONST(1)

// Frame List Rollover. The Host Controller sets this bit to a 1 when  the Frame List Index rolls over from its maximum value to 0. The exact  value at which the rollover occurs depends on the frame list size. For  example. If the frame list size (as programmed in the Frame List Size field  of the USBCMD register) is 1024, the Frame Index Register rolls over every  time FRINDEX [1 3] toggles. Similarly, if the size is 512, the Host  Controller sets this bit to a 1 every time FHINDEX [12] toggles. Only used  by the host controller. 
#define USB2_CONTROLLER_USB2D_USBSTS_0_FRI_SHIFT                        _MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_USBSTS_0_FRI_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBSTS_0_FRI_SHIFT)
#define USB2_CONTROLLER_USB2D_USBSTS_0_FRI_RANGE                        3:3
#define USB2_CONTROLLER_USB2D_USBSTS_0_FRI_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_USBSTS_0_FRI_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_FRI_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBSTS_0_FRI_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_FRI_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_FRI_NO_ROLLOVER                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_FRI_ROLLOVER                     _MK_ENUM_CONST(1)

// Port Change Detect. The Host Controller sets this bit to a 1 when on  any port a Connect Status occurs, a Port Enable/Disable Change occurs, or the  Force Port Resume bit is set as the result of a J-K transition on the  suspended port. The Device Controller sets this bit to a one when the port  controller enters the full or high-speed operational state. When the port  controller exits the full or high-speed operational states due to Reset or  Suspend events, the notification mechanisms are the USB Reset Received bit  and the DCSuspend bits respectively. This bit is not EHCI compatible. 
#define USB2_CONTROLLER_USB2D_USBSTS_0_PCI_SHIFT                        _MK_SHIFT_CONST(2)
#define USB2_CONTROLLER_USB2D_USBSTS_0_PCI_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBSTS_0_PCI_SHIFT)
#define USB2_CONTROLLER_USB2D_USBSTS_0_PCI_RANGE                        2:2
#define USB2_CONTROLLER_USB2D_USBSTS_0_PCI_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_USBSTS_0_PCI_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_PCI_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBSTS_0_PCI_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_PCI_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_PCI_NO_PORT_CHANGE                       _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_PCI_PORT_CHANGE                  _MK_ENUM_CONST(1)

// USB Error Interrupt. This bit gets set by the Host/Device controller  when completion of a USB transaction results in an error condition. This bit  is set along with the USBINT bit, if the TD on which the error interrupt  occurred also ad its interrupt on complete (IOC) bit set. 
#define USB2_CONTROLLER_USB2D_USBSTS_0_UEI_SHIFT                        _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_USBSTS_0_UEI_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBSTS_0_UEI_SHIFT)
#define USB2_CONTROLLER_USB2D_USBSTS_0_UEI_RANGE                        1:1
#define USB2_CONTROLLER_USB2D_USBSTS_0_UEI_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_USBSTS_0_UEI_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_UEI_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBSTS_0_UEI_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_UEI_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_UEI_NO_ERROR                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_UEI_ERROR                        _MK_ENUM_CONST(1)

// USB Interrupt. This bit is set by the Host/Device Controller when  the cause of an interrupt is a completion of a USB transaction where the  Transfer Descriptor (TD) as an interrupt on complete (IOC) bit set. This bit  is also set by the Host/Device Controller when a short packet is detected. A  short packet is when the actual number of bytes received was less than the  expected number of bytes. 
#define USB2_CONTROLLER_USB2D_USBSTS_0_UI_SHIFT                 _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_UI_FIELD                 (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBSTS_0_UI_SHIFT)
#define USB2_CONTROLLER_USB2D_USBSTS_0_UI_RANGE                 0:0
#define USB2_CONTROLLER_USB2D_USBSTS_0_UI_WOFFSET                       0x0
#define USB2_CONTROLLER_USB2D_USBSTS_0_UI_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_UI_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBSTS_0_UI_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_UI_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_UI_NO_INT                        _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBSTS_0_UI_INT                   _MK_ENUM_CONST(1)

// USB2D USB Interrupt Enable Register

// Register USB2_CONTROLLER_USB2D_USBINTR_0  
#define USB2_CONTROLLER_USB2D_USBINTR_0                 _MK_ADDR_CONST(0x148)
#define USB2_CONTROLLER_USB2D_USBINTR_0_WORD_COUNT                      0x1
#define USB2_CONTROLLER_USB2D_USBINTR_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_RESET_MASK                      _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_USBINTR_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_USBINTR_0_WRITE_MASK                      _MK_MASK_CONST(0x1ff)
// Reserved = 0
#define USB2_CONTROLLER_USB2D_USBINTR_0_N_A_SHIFT                       _MK_SHIFT_CONST(9)
#define USB2_CONTROLLER_USB2D_USBINTR_0_N_A_FIELD                       (_MK_MASK_CONST(0x7fffff) << USB2_CONTROLLER_USB2D_USBINTR_0_N_A_SHIFT)
#define USB2_CONTROLLER_USB2D_USBINTR_0_N_A_RANGE                       31:9
#define USB2_CONTROLLER_USB2D_USBINTR_0_N_A_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_USBINTR_0_N_A_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_N_A_DEFAULT_MASK                        _MK_MASK_CONST(0x7fffff)
#define USB2_CONTROLLER_USB2D_USBINTR_0_N_A_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_N_A_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Sleep Enable. 1 = Device controller issues an interrupt if  DCSuspend bit in USBSTS register transitions. 
// The interrupt is acknowledged by SW by writing a 1 to the DCSuspend bit. Only used by the device controller. 
#define USB2_CONTROLLER_USB2D_USBINTR_0_SLE_SHIFT                       _MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_USBINTR_0_SLE_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBINTR_0_SLE_SHIFT)
#define USB2_CONTROLLER_USB2D_USBINTR_0_SLE_RANGE                       8:8
#define USB2_CONTROLLER_USB2D_USBINTR_0_SLE_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_USBINTR_0_SLE_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_SLE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBINTR_0_SLE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_SLE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_SLE_DISABLE                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_SLE_ENABLE                      _MK_ENUM_CONST(1)

// SOF Received Enable. 1 = Device controller issues an interrupt if SOF Received bit in USBSTS register = 1.
// The interrupt is acknowledged by software clearing  the SOF Received bit. 
#define USB2_CONTROLLER_USB2D_USBINTR_0_SRE_SHIFT                       _MK_SHIFT_CONST(7)
#define USB2_CONTROLLER_USB2D_USBINTR_0_SRE_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBINTR_0_SRE_SHIFT)
#define USB2_CONTROLLER_USB2D_USBINTR_0_SRE_RANGE                       7:7
#define USB2_CONTROLLER_USB2D_USBINTR_0_SRE_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_USBINTR_0_SRE_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_SRE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBINTR_0_SRE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_SRE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_SRE_DISABLE                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_SRE_ENABLE                      _MK_ENUM_CONST(1)

// USB Reset Enable.1 = Device controller issues an interrupt if USB Reset Received bit in USBSTS register  = 1 
// The interrupt is acknowledged by software clearing  the USB Reset Received bit. Only used by the device controller. 
#define USB2_CONTROLLER_USB2D_USBINTR_0_URE_SHIFT                       _MK_SHIFT_CONST(6)
#define USB2_CONTROLLER_USB2D_USBINTR_0_URE_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBINTR_0_URE_SHIFT)
#define USB2_CONTROLLER_USB2D_USBINTR_0_URE_RANGE                       6:6
#define USB2_CONTROLLER_USB2D_USBINTR_0_URE_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_USBINTR_0_URE_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_URE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBINTR_0_URE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_URE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_URE_DISABLE                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_URE_ENABLE                      _MK_ENUM_CONST(1)

// Interrupt on Asynchronous Advance Enable. 1 = the host controller issues an interrupt at the  next interrupt threshold if Interrupt on Async Advance bit in USBSTS register  = 1. 
// The interrupt is acknowledged by software clearing the Interrupt on  Async Advance bit. Only used by the host controller. 
#define USB2_CONTROLLER_USB2D_USBINTR_0_AAE_SHIFT                       _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_USBINTR_0_AAE_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBINTR_0_AAE_SHIFT)
#define USB2_CONTROLLER_USB2D_USBINTR_0_AAE_RANGE                       5:5
#define USB2_CONTROLLER_USB2D_USBINTR_0_AAE_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_USBINTR_0_AAE_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_AAE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBINTR_0_AAE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_AAE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_AAE_DISABLE                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_AAE_ENABLE                      _MK_ENUM_CONST(1)

// System Error Enable. 1 = Host/device controller issues an interrupt if  the System Error bit in USBSTS register = 1.
// The interrupt is acknowledged by  software clearing the System Error bit. 
#define USB2_CONTROLLER_USB2D_USBINTR_0_SEE_SHIFT                       _MK_SHIFT_CONST(4)
#define USB2_CONTROLLER_USB2D_USBINTR_0_SEE_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBINTR_0_SEE_SHIFT)
#define USB2_CONTROLLER_USB2D_USBINTR_0_SEE_RANGE                       4:4
#define USB2_CONTROLLER_USB2D_USBINTR_0_SEE_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_USBINTR_0_SEE_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_SEE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBINTR_0_SEE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_SEE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_SEE_DISABLE                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_SEE_ENABLE                      _MK_ENUM_CONST(1)

// Frame List Rollover Enable. 1 = Host controller issues an interrupt if Frame  List Rollover bit in the USBSTS register = 1.
// The interrupt is acknowledged  by software clearing the Frame List Rollover bit. Only used by the host  controller. 
#define USB2_CONTROLLER_USB2D_USBINTR_0_FRE_SHIFT                       _MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_USBINTR_0_FRE_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBINTR_0_FRE_SHIFT)
#define USB2_CONTROLLER_USB2D_USBINTR_0_FRE_RANGE                       3:3
#define USB2_CONTROLLER_USB2D_USBINTR_0_FRE_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_USBINTR_0_FRE_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_FRE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBINTR_0_FRE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_FRE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_FRE_DISABLE                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_FRE_ENABLE                      _MK_ENUM_CONST(1)

// Port Change Detect Enable. 1 = Host/device controller issues an interrupt if  Port Change Detect bit in USBSTS register = 1. 
// The interrupt is acknowledged  by software clearing the Port Change Detect bit.
#define USB2_CONTROLLER_USB2D_USBINTR_0_PCE_SHIFT                       _MK_SHIFT_CONST(2)
#define USB2_CONTROLLER_USB2D_USBINTR_0_PCE_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBINTR_0_PCE_SHIFT)
#define USB2_CONTROLLER_USB2D_USBINTR_0_PCE_RANGE                       2:2
#define USB2_CONTROLLER_USB2D_USBINTR_0_PCE_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_USBINTR_0_PCE_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_PCE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBINTR_0_PCE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_PCE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_PCE_DISABLE                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_PCE_ENABLE                      _MK_ENUM_CONST(1)

// USB Error Interrupt Enable. 1 = Host controller issues an interrupt at the  next interrupt threshold if the USBERRINT bit in USBSTS = 1. 
// The interrupt is  acknowledged by software clearing the USBERRINT bit in the USBSTS register. 
#define USB2_CONTROLLER_USB2D_USBINTR_0_UEE_SHIFT                       _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_USBINTR_0_UEE_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBINTR_0_UEE_SHIFT)
#define USB2_CONTROLLER_USB2D_USBINTR_0_UEE_RANGE                       1:1
#define USB2_CONTROLLER_USB2D_USBINTR_0_UEE_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_USBINTR_0_UEE_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_UEE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBINTR_0_UEE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_UEE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_UEE_DISABLE                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_UEE_ENABLE                      _MK_ENUM_CONST(1)

// USB Interrupt Enable. 1 = Host/device issues an interrupt at the next  interrupt threshold if the USBINT bit in USBSTS = 1. 
// The interrupt is  acknowledged by software clearing the USBINT bit.
#define USB2_CONTROLLER_USB2D_USBINTR_0_UE_SHIFT                        _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_UE_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBINTR_0_UE_SHIFT)
#define USB2_CONTROLLER_USB2D_USBINTR_0_UE_RANGE                        0:0
#define USB2_CONTROLLER_USB2D_USBINTR_0_UE_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_USBINTR_0_UE_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_UE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBINTR_0_UE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_UE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_UE_DISABLE                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBINTR_0_UE_ENABLE                       _MK_ENUM_CONST(1)

// USB2D USB Frame Index Register

// Register USB2_CONTROLLER_USB2D_FRINDEX_0  
#define USB2_CONTROLLER_USB2D_FRINDEX_0                 _MK_ADDR_CONST(0x14c)
#define USB2_CONTROLLER_USB2D_FRINDEX_0_WORD_COUNT                      0x1
#define USB2_CONTROLLER_USB2D_FRINDEX_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_FRINDEX_0_RESET_MASK                      _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_FRINDEX_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_FRINDEX_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_FRINDEX_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_FRINDEX_0_WRITE_MASK                      _MK_MASK_CONST(0x0)
// Reserved 
#define USB2_CONTROLLER_USB2D_FRINDEX_0_N_A_SHIFT                       _MK_SHIFT_CONST(14)
#define USB2_CONTROLLER_USB2D_FRINDEX_0_N_A_FIELD                       (_MK_MASK_CONST(0x3ffff) << USB2_CONTROLLER_USB2D_FRINDEX_0_N_A_SHIFT)
#define USB2_CONTROLLER_USB2D_FRINDEX_0_N_A_RANGE                       31:14
#define USB2_CONTROLLER_USB2D_FRINDEX_0_N_A_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_FRINDEX_0_N_A_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_FRINDEX_0_N_A_DEFAULT_MASK                        _MK_MASK_CONST(0x3ffff)
#define USB2_CONTROLLER_USB2D_FRINDEX_0_N_A_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_FRINDEX_0_N_A_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Frame Index.  
// The value in this register increments at the end of each time frame (micro-frame). 
// Bits [N: 3] are used for the Frame List current index. Each location of the frame list is accessed 8 times (frames or micro-frames) before moving to the next index.  
// The following illustrates values of N based on the value of the Frame List Size field in the USBCMD register, when used in host mode. 
// USBCMD          [Frame List Size] Number        Elements N 
//   000b                   (1024)                  12 
//   001b                   (512)                   11 
//   010b                   (256)                   10 
//   011b                   (128)                   9 
//   100b            (64)                    8 
//   101b            (32)                    7 
//   110b            (16)                    6 
//   111b            (8)                     5 
// In device mode the value is the current frame  number of the last frame transmitted. It is not used as an index. In either  mode bits 2:0 indicate the current micro-frame. 
#define USB2_CONTROLLER_USB2D_FRINDEX_0_FRINDEX_SHIFT                   _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_FRINDEX_0_FRINDEX_FIELD                   (_MK_MASK_CONST(0x3fff) << USB2_CONTROLLER_USB2D_FRINDEX_0_FRINDEX_SHIFT)
#define USB2_CONTROLLER_USB2D_FRINDEX_0_FRINDEX_RANGE                   13:0
#define USB2_CONTROLLER_USB2D_FRINDEX_0_FRINDEX_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_FRINDEX_0_FRINDEX_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_FRINDEX_0_FRINDEX_DEFAULT_MASK                    _MK_MASK_CONST(0x3fff)
#define USB2_CONTROLLER_USB2D_FRINDEX_0_FRINDEX_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_FRINDEX_0_FRINDEX_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Reserved address 336 [0x150] 
// USB2D Host Controller Frame List Base Address Register

// Register USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0  
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0                        _MK_ADDR_CONST(0x154)
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_WORD_COUNT                     0x1
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_RESET_MASK                     _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_WRITE_MASK                     _MK_MASK_CONST(0xfffff000)
// Host mode: This 32-bit register contains the beginning address of the Periodic Frame List in the system memory.  HCD loads this register prior to starting the schedule execution by the Host Controller.  The memory structure referenced by this physical memory pointer is assumed to be 4-Kbyte aligned.  The contents of this register are combined with the Frame Index Register (FRINDEX) to enable the Host Controller to step through the Periodic Frame List in sequence. 
// Base Address (Low). These bits correspond to memory address signals [31:12], respectively. Only used by the host controller. 
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_BASEADR_SHIFT                  _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_BASEADR_FIELD                  (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_BASEADR_SHIFT)
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_BASEADR_RANGE                  31:12
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_BASEADR_WOFFSET                        0x0
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_BASEADR_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_BASEADR_DEFAULT_MASK                   _MK_MASK_CONST(0xfffff)
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_BASEADR_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_BASEADR_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Reserved = 0
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_N_A1_SHIFT                     _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_N_A1_FIELD                     (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_N_A1_SHIFT)
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_N_A1_RANGE                     11:0
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_N_A1_WOFFSET                   0x0
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_N_A1_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_N_A1_DEFAULT_MASK                      _MK_MASK_CONST(0xfff)
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_N_A1_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_N_A1_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// Device mode. The upper seven bits of this register represent the device address. After any controller reset or a USB reset, the device address is set to the default address (0). The default address will match all incoming addresses. Software shall reprogram the address after receiving a SET_ADDRESS request. 
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_USBADR_SHIFT                   _MK_SHIFT_CONST(25)
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_USBADR_FIELD                   (_MK_MASK_CONST(0x7f) << USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_USBADR_SHIFT)
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_USBADR_RANGE                   31:25
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_USBADR_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_USBADR_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_USBADR_DEFAULT_MASK                    _MK_MASK_CONST(0x7f)
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_USBADR_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_USBADR_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Reserved = 0
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_N_A2_SHIFT                     _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_N_A2_FIELD                     (_MK_MASK_CONST(0x1ffffff) << USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_N_A2_SHIFT)
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_N_A2_RANGE                     24:0
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_N_A2_WOFFSET                   0x0
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_N_A2_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_N_A2_DEFAULT_MASK                      _MK_MASK_CONST(0x1ffffff)
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_N_A2_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0_N_A2_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// USB2D Next Asynchronous List Address Register

// Register USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0  
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0                   _MK_ADDR_CONST(0x158)
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_WORD_COUNT                        0x1
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_RESET_MASK                        _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffe0)
// Host mode. This 32-bit register contains the address of the next asynchronous queue head to be executed by the host.
// Link Pointer Low (LPL). These bits correspond to memory address signals [31:5], respectively. This field may only reference a Queue Head (OH). Only used by the host controller.
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_ASYBASE_SHIFT                     _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_ASYBASE_FIELD                     (_MK_MASK_CONST(0x7ffffff) << USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_ASYBASE_SHIFT)
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_ASYBASE_RANGE                     31:5
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_ASYBASE_WOFFSET                   0x0
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_ASYBASE_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_ASYBASE_DEFAULT_MASK                      _MK_MASK_CONST(0x7ffffff)
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_ASYBASE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_ASYBASE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// Reserved = 0
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_N_A1_SHIFT                        _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_N_A1_FIELD                        (_MK_MASK_CONST(0x1f) << USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_N_A1_SHIFT)
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_N_A1_RANGE                        4:0
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_N_A1_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_N_A1_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_N_A1_DEFAULT_MASK                 _MK_MASK_CONST(0x1f)
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_N_A1_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_N_A1_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Device mode. This register contains the address of the top of the endpoint list in system memory. These bits correspond to memory address signals [31:11], respectively. This field will reference a list of up to 32 Queue Heads (QH). Only used by the device controller.
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_EPBASE_SHIFT                      _MK_SHIFT_CONST(11)
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_EPBASE_FIELD                      (_MK_MASK_CONST(0x1fffff) << USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_EPBASE_SHIFT)
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_EPBASE_RANGE                      31:11
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_EPBASE_WOFFSET                    0x0
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_EPBASE_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_EPBASE_DEFAULT_MASK                       _MK_MASK_CONST(0x1fffff)
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_EPBASE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_EPBASE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Reserved = 0
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_N_A2_SHIFT                        _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_N_A2_FIELD                        (_MK_MASK_CONST(0x7ff) << USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_N_A2_SHIFT)
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_N_A2_RANGE                        10:0
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_N_A2_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_N_A2_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_N_A2_DEFAULT_MASK                 _MK_MASK_CONST(0x7ff)
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_N_A2_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0_N_A2_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// USB2D Asynchronous Buffer Status for Embedded TT Register

// Register USB2_CONTROLLER_USB2D_ASYNCTTSTS_0  
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0                      _MK_ADDR_CONST(0x15c)
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_WORD_COUNT                   0x1
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_RESET_MASK                   _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_WRITE_MASK                   _MK_MASK_CONST(0x2)
// Reserved = 0
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_N_A_SHIFT                    _MK_SHIFT_CONST(2)
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_N_A_FIELD                    (_MK_MASK_CONST(0x3fffffff) << USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_N_A_SHIFT)
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_N_A_RANGE                    31:2
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_N_A_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_N_A_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_N_A_DEFAULT_MASK                     _MK_MASK_CONST(0x3fffffff)
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_N_A_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_N_A_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Embedded TT Async Buffers Clear. (Read/Write to  set) This field will clear all pending transactions in the embedded TT Async  Buffer(s). The clear will take as much time as necessary to clear buffer  without interfering with a transaction in progress. TTAC will return to zero  after being set by software only after the actual clear occurs. 
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_TTAC_SHIFT                   _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_TTAC_FIELD                   (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_TTAC_SHIFT)
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_TTAC_RANGE                   1:1
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_TTAC_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_TTAC_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_TTAC_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_TTAC_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_TTAC_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Embedded TT Async Buffers Status. (Read Only) This  read only bit will be 1 if one or more transactions are being held in the  embedded TT Async. Buffers. When this bit is a zero, then all outstanding  transactions in the embedded TT have been flushed. 
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_TTAS_SHIFT                   _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_TTAS_FIELD                   (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_TTAS_SHIFT)
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_TTAS_RANGE                   0:0
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_TTAS_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_TTAS_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_TTAS_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_TTAS_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ASYNCTTSTS_0_TTAS_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// USB2D Burst Size register

// Register USB2_CONTROLLER_USB2D_BURSTSIZE_0  
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0                       _MK_ADDR_CONST(0x160)
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_WORD_COUNT                    0x1
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_RESET_VAL                     _MK_MASK_CONST(0x1010)
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_RESET_MASK                    _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_READ_MASK                     _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_WRITE_MASK                    _MK_MASK_CONST(0xffff)
// Reserved 
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_N_A1_SHIFT                    _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_N_A1_FIELD                    (_MK_MASK_CONST(0xffff) << USB2_CONTROLLER_USB2D_BURSTSIZE_0_N_A1_SHIFT)
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_N_A1_RANGE                    31:16
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_N_A1_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_N_A1_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_N_A1_DEFAULT_MASK                     _MK_MASK_CONST(0xffff)
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_N_A1_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_N_A1_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Programmable TX Burst Length.  (Read/Write) This register represents the maximum length of a burst in 32-bit words while moving data from system memory to the USB bus.
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_TXPBURST_SHIFT                        _MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_TXPBURST_FIELD                        (_MK_MASK_CONST(0xff) << USB2_CONTROLLER_USB2D_BURSTSIZE_0_TXPBURST_SHIFT)
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_TXPBURST_RANGE                        15:8
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_TXPBURST_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_TXPBURST_DEFAULT                      _MK_MASK_CONST(0x10)
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_TXPBURST_DEFAULT_MASK                 _MK_MASK_CONST(0xff)
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_TXPBURST_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_TXPBURST_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Programmable RX Burst Length.  (Read/Write) This register represents the maximum length of a burst in 32-bit words while moving data from the USB bus to system memory.
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_RXPBURST_SHIFT                        _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_RXPBURST_FIELD                        (_MK_MASK_CONST(0xff) << USB2_CONTROLLER_USB2D_BURSTSIZE_0_RXPBURST_SHIFT)
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_RXPBURST_RANGE                        7:0
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_RXPBURST_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_RXPBURST_DEFAULT                      _MK_MASK_CONST(0x10)
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_RXPBURST_DEFAULT_MASK                 _MK_MASK_CONST(0xff)
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_RXPBURST_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_BURSTSIZE_0_RXPBURST_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// USB2D Transmit fill tuning register

// Register USB2_CONTROLLER_USB2D_TXFILLTUNING_0  
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0                    _MK_ADDR_CONST(0x164)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_WORD_COUNT                         0x1
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_RESET_VAL                  _MK_MASK_CONST(0x20000)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_RESET_MASK                         _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_WRITE_MASK                         _MK_MASK_CONST(0x3f1fff)
// Reserved 
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_N_A1_SHIFT                 _MK_SHIFT_CONST(22)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_N_A1_FIELD                 (_MK_MASK_CONST(0x3ff) << USB2_CONTROLLER_USB2D_TXFILLTUNING_0_N_A1_SHIFT)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_N_A1_RANGE                 31:22
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_N_A1_WOFFSET                       0x0
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_N_A1_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_N_A1_DEFAULT_MASK                  _MK_MASK_CONST(0x3ff)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_N_A1_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_N_A1_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// FIFO Burst Threshold.  (Read/Write) This register controls the number of data bursts that are posted to the TX latency FIFO in host mode before the packet begins on to the bus.  The minimum value is 2 and this value should be a low as possible to maximize USB performance.  A higher value can be used in systems with unpredicable latency and/or insufficient bandwidth where the FIFO may underrun because the data transferred from the latency FIFO to USB occurs before it can be replenished from system memory.  This value is ignored if the Stream Disable bit in USBMODE register is set.
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_TXFIFOTHRES_SHIFT                  _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_TXFIFOTHRES_FIELD                  (_MK_MASK_CONST(0x3f) << USB2_CONTROLLER_USB2D_TXFILLTUNING_0_TXFIFOTHRES_SHIFT)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_TXFIFOTHRES_RANGE                  21:16
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_TXFIFOTHRES_WOFFSET                        0x0
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_TXFIFOTHRES_DEFAULT                        _MK_MASK_CONST(0x2)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_TXFIFOTHRES_DEFAULT_MASK                   _MK_MASK_CONST(0x3f)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_TXFIFOTHRES_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_TXFIFOTHRES_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Reserved 
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_N_A2_SHIFT                 _MK_SHIFT_CONST(13)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_N_A2_FIELD                 (_MK_MASK_CONST(0x7) << USB2_CONTROLLER_USB2D_TXFILLTUNING_0_N_A2_SHIFT)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_N_A2_RANGE                 15:13
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_N_A2_WOFFSET                       0x0
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_N_A2_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_N_A2_DEFAULT_MASK                  _MK_MASK_CONST(0x7)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_N_A2_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_N_A2_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Scheduler Health Counter.  (Read/Write To Clear)  [Default = 0] This register increments when the host controller fails to fill the TX latency FIFO to the level programmed by TXFIFOTHRES before running out of time to send the packet before the next Start-Of-Frame.
// This health counter measures the number of times this occurs to provide feedback to selecting a proper TXSCHOH.  Writing to this register will clear the counter and this counter will max. at 31.
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_TXSCHHEALTH_SHIFT                  _MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_TXSCHHEALTH_FIELD                  (_MK_MASK_CONST(0x1f) << USB2_CONTROLLER_USB2D_TXFILLTUNING_0_TXSCHHEALTH_SHIFT)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_TXSCHHEALTH_RANGE                  12:8
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_TXSCHHEALTH_WOFFSET                        0x0
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_TXSCHHEALTH_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_TXSCHHEALTH_DEFAULT_MASK                   _MK_MASK_CONST(0x1f)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_TXSCHHEALTH_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_TXSCHHEALTH_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Scheduler Overhead.  (Read/Write)  [Default = 0] This register adds an additional fixed offset to the schedule time estimator described above as Tff.  As an approximation, the value chosen for this register should limit the number of back-off events captured in the TXSCHHEALTH to less than 10 per second in a highly utilized bus.  Choosing a value that is too high for this register is not desired as it can needlessly reduce USB utilization.
// The time unit represented in this register is 1.267us when a device is connected in High-Speed Mode.
// The time unit represented in this register is 6.333us when a device is connected in Low/Full Speed Mode
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_TXSCHOH_SHIFT                      _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_TXSCHOH_FIELD                      (_MK_MASK_CONST(0xff) << USB2_CONTROLLER_USB2D_TXFILLTUNING_0_TXSCHOH_SHIFT)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_TXSCHOH_RANGE                      7:0
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_TXSCHOH_WOFFSET                    0x0
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_TXSCHOH_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_TXSCHOH_DEFAULT_MASK                       _MK_MASK_CONST(0xff)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_TXSCHOH_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_TXFILLTUNING_0_TXSCHOH_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Reserved address 384 [0x180] 
// USB2D Port Status/Control 1 Register

// Register USB2_CONTROLLER_USB2D_PORTSC1_0  
#define USB2_CONTROLLER_USB2D_PORTSC1_0                 _MK_ADDR_CONST(0x184)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WORD_COUNT                      0x1
#define USB2_CONTROLLER_USB2D_PORTSC1_0_RESET_VAL                       _MK_MASK_CONST(0x1004)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_RESET_MASK                      _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WRITE_MASK                      _MK_MASK_CONST(0x17f114e)
// 0 = UTMI interface. This is the only value  supported. This bit is not defined in the EHCI specification. 
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTS_SHIFT                       _MK_SHIFT_CONST(31)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTS_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_PORTSC1_0_PTS_SHIFT)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTS_RANGE                       31:31
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTS_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTS_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTS_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTS_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTS_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTS_UTMI                        _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTS_RESERVED                    _MK_ENUM_CONST(1)

// 0 = Serial transceiver not selected. This is the  only value supported. This bit is not defined in the EHCI specification. 
#define USB2_CONTROLLER_USB2D_PORTSC1_0_STS_SHIFT                       _MK_SHIFT_CONST(30)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_STS_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_PORTSC1_0_STS_SHIFT)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_STS_RANGE                       30:30
#define USB2_CONTROLLER_USB2D_PORTSC1_0_STS_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_PORTSC1_0_STS_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_STS_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_STS_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_STS_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_STS_PARALLEL_IF                 _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_STS_SERIAL_IF                   _MK_ENUM_CONST(1)

// Parallel Transceiver Width. Fixed to 0. This bit is not defined in the EHCI specification.  
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTW_SHIFT                       _MK_SHIFT_CONST(29)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTW_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_PORTSC1_0_PTW_SHIFT)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTW_RANGE                       29:29
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTW_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTW_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTW_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTW_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTW_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTW_EIGHT_BIT                   _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTW_RESERVED                    _MK_ENUM_CONST(1)

// Reserved 
#define USB2_CONTROLLER_USB2D_PORTSC1_0_N_A1_SHIFT                      _MK_SHIFT_CONST(28)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_N_A1_FIELD                      (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_PORTSC1_0_N_A1_SHIFT)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_N_A1_RANGE                      28:28
#define USB2_CONTROLLER_USB2D_PORTSC1_0_N_A1_WOFFSET                    0x0
#define USB2_CONTROLLER_USB2D_PORTSC1_0_N_A1_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_N_A1_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_N_A1_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_N_A1_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// This register field indicates the speed at which the port is operating. 
// 00 = Full Speed
// 01 = Low Speed
// 10 = High Speed 
// This bit is not defined in the EHCI specification.  
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PSPD_SHIFT                      _MK_SHIFT_CONST(26)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PSPD_FIELD                      (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_PORTSC1_0_PSPD_SHIFT)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PSPD_RANGE                      27:26
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PSPD_WOFFSET                    0x0
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PSPD_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PSPD_DEFAULT_MASK                       _MK_MASK_CONST(0x3)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PSPD_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PSPD_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PSPD_FULL_SPEED                 _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PSPD_LOW_SPEED                  _MK_ENUM_CONST(1)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PSPD_HIGH_SPEED                 _MK_ENUM_CONST(2)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PSPD_RESERVED                   _MK_ENUM_CONST(3)

// Reserved
#define USB2_CONTROLLER_USB2D_PORTSC1_0_N_A2_SHIFT                      _MK_SHIFT_CONST(25)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_N_A2_FIELD                      (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_PORTSC1_0_N_A2_SHIFT)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_N_A2_RANGE                      25:25
#define USB2_CONTROLLER_USB2D_PORTSC1_0_N_A2_WOFFSET                    0x0
#define USB2_CONTROLLER_USB2D_PORTSC1_0_N_A2_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_N_A2_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_N_A2_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_N_A2_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Port Force Full Speed Connect: Writing this bit to a 1b forces the port to connect at Full Speed only. It disables the chirp sequence that allows the port to identify itself as High Speed. This is useful for testing FS configurations with a HS host, hub or device. This bit is not defined in the EHCI specification.
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PFSC_SHIFT                      _MK_SHIFT_CONST(24)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PFSC_FIELD                      (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_PORTSC1_0_PFSC_SHIFT)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PFSC_RANGE                      24:24
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PFSC_WOFFSET                    0x0
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PFSC_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PFSC_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PFSC_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PFSC_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PFSC_DONT_FORCE_FULL_SPEED                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PFSC_FORCE_FULL_SPEED                   _MK_ENUM_CONST(1)

// Reserved
#define USB2_CONTROLLER_USB2D_PORTSC1_0_N_A3_SHIFT                      _MK_SHIFT_CONST(23)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_N_A3_FIELD                      (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_PORTSC1_0_N_A3_SHIFT)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_N_A3_RANGE                      23:23
#define USB2_CONTROLLER_USB2D_PORTSC1_0_N_A3_WOFFSET                    0x0
#define USB2_CONTROLLER_USB2D_PORTSC1_0_N_A3_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_N_A3_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_N_A3_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_N_A3_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Default = 0b. Wake on Over-current Enable: Writing this bit to a one enables  the port to be sensitive to over-current conditions as wake-up events. This  field is zero if Port Power(PP) is zero. This bit should only be used when  operating in Host mode. Writing this bit to 1 while the controller is working  in device mode can result in undefined behavior.
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKOC_SHIFT                      _MK_SHIFT_CONST(22)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKOC_FIELD                      (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_PORTSC1_0_WKOC_SHIFT)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKOC_RANGE                      22:22
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKOC_WOFFSET                    0x0
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKOC_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKOC_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKOC_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKOC_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKOC_DISBLE                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKOC_ENABLE                     _MK_ENUM_CONST(1)

// Wake on Disconnect Enable: Writing this bit to a one enables the port to be sensitive to device disconnects as wake-up events. This field is zero if Port Power(PP)  and B-Host Enable(BHEN) is zero or in device mode. 
// This bit should only be used when operating in Host mode. Writing this bit to 1 while the controller is working in device mode can result in undefined behaviour. 
// This bit should not be written to 1 if there is no  device connected. After the device disconnect is detected, this bit should be  cleared to 0.
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKDS_SHIFT                      _MK_SHIFT_CONST(21)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKDS_FIELD                      (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_PORTSC1_0_WKDS_SHIFT)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKDS_RANGE                      21:21
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKDS_WOFFSET                    0x0
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKDS_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKDS_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKDS_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKDS_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKDS_DISBLE                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKDS_ENABLE                     _MK_ENUM_CONST(1)

// Wake on Connect Enable: Writing this bit to a one enables the port to be sensitive to device connects as wake-up events. This field is zero if Port Power(PP)  and B-Host Enable(BHEN) is zero or in device mode. 
// This bit should only be used when operating in Host mode. Writing this bit to 1 while the controller is working in device mode can result in undefined behaviour. 
// This bit should not be written to 1 while the  device is connected. After the device connection is detected, this bit should  be cleared to 0.
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKCN_SHIFT                      _MK_SHIFT_CONST(20)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKCN_FIELD                      (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_PORTSC1_0_WKCN_SHIFT)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKCN_RANGE                      20:20
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKCN_WOFFSET                    0x0
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKCN_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKCN_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKCN_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKCN_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKCN_DISBLE                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_WKCN_ENABLE                     _MK_ENUM_CONST(1)

// Port Test Control: Any other value than zero indicates that the port is operating in test mode. 
//   Value                  Specific Test 
//  0000b                Not enabled 
//  0001b                  J_ STATE 
//  0010b             K_STATE 
//  0011b              SEQ_NAK 
//  0100b              Packet 
//  0101b               FORCE_ENABLE 
//  0110b to 1111b         Reserved 
// Refer to Chapter 7 of the USB Specification  Revision 2.0 for details on each test mode. 
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTC_SHIFT                       _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTC_FIELD                       (_MK_MASK_CONST(0xf) << USB2_CONTROLLER_USB2D_PORTSC1_0_PTC_SHIFT)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTC_RANGE                       19:16
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTC_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTC_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTC_DEFAULT_MASK                        _MK_MASK_CONST(0xf)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTC_NORMAL_OP                   _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTC_TEST_J                      _MK_ENUM_CONST(1)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTC_TEST_K                      _MK_ENUM_CONST(2)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTC_TEST_SE0_NAK                        _MK_ENUM_CONST(3)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTC_TEST_PKT                    _MK_ENUM_CONST(4)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PTC_TEST_FORCE_ENABLE                   _MK_ENUM_CONST(5)

// Port Indicator Control: This field is not supported in the current  implementation. Please use a GPIO if you wish to use Port Indicators.
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PIC_SHIFT                       _MK_SHIFT_CONST(14)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PIC_FIELD                       (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_PORTSC1_0_PIC_SHIFT)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PIC_RANGE                       15:14
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PIC_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PIC_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PIC_DEFAULT_MASK                        _MK_MASK_CONST(0x3)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PIC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PIC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Port Owner. Port owner handoff is not implemented in this design, therefore this bit will  always be 0. 
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PO_SHIFT                        _MK_SHIFT_CONST(13)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PO_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_PORTSC1_0_PO_SHIFT)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PO_RANGE                        13:13
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PO_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PO_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PO_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PO_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PO_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Port Power: The function of this bit depends on the value of the Port Power Switching (PPC) field in the HCSPARAMS register. The behavior is as follows: 
// PPC                       PP  Operation 
// 0b                           0b Read Only. A device controller with no OTG capability does not have port power control switches. 
// 1b                          1b/0b RW.  Host/OTG controller requires port power control switches. 
// This bit represents the current setting of the switch (0=off, 1=on).  When power is not available on a port (i.e. PP equals a 0), the port is non-functional and will not report attaches, detaches, etc. 
// When an over-current condition is detected on a  powered port and PPC is a one, the PP bit in each affected port may be  transitioned by the host controller driver from a one to a zero (removing  power from the port). 
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PP_SHIFT                        _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PP_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_PORTSC1_0_PP_SHIFT)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PP_RANGE                        12:12
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PP_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PP_DEFAULT                      _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PP_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PP_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PP_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PP_NOT_POWERED                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PP_POWERED                      _MK_ENUM_CONST(1)

// Line state. These bits reflect the current logical levels of the D+ (bit 10) and D- (bit 11) signal lines. The encoding of the bits are:
// 00b = SE0 
// 01b = J-state 
// 10b = K-state 
// 11b = Undefined 
// The value of this field is undefined if Port  Power(PP) and B-Host Enable(BHEN) is zero in host mode. In host mode, the use  of line-state by the host controller driver is not necessary (unlike EHCI),  because the port controller state machine and the port routing manage the  connection of LS and FS. In device mode, the use of line-state by the device  controller driver is not necessary. 
#define USB2_CONTROLLER_USB2D_PORTSC1_0_LS_SHIFT                        _MK_SHIFT_CONST(10)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_LS_FIELD                        (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_PORTSC1_0_LS_SHIFT)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_LS_RANGE                        11:10
#define USB2_CONTROLLER_USB2D_PORTSC1_0_LS_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_PORTSC1_0_LS_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_LS_DEFAULT_MASK                 _MK_MASK_CONST(0x3)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_LS_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_LS_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_LS_SE0                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_LS_J_STATE                      _MK_ENUM_CONST(1)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_LS_K_STATE                      _MK_ENUM_CONST(2)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_LS_UNDEFINED                    _MK_ENUM_CONST(3)

// When the bit is one, the host/device connected to the port is in high-speed mode and if set to zero, the host/device connected to the port is not in a high-speed mode. 
// Note: HSP is redundant with PSPD(27:26). 
// This bit is not defined in the EHCI specification.
#define USB2_CONTROLLER_USB2D_PORTSC1_0_HSP_SHIFT                       _MK_SHIFT_CONST(9)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_HSP_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_PORTSC1_0_HSP_SHIFT)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_HSP_RANGE                       9:9
#define USB2_CONTROLLER_USB2D_PORTSC1_0_HSP_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_PORTSC1_0_HSP_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_HSP_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_HSP_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_HSP_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_HSP_NOT_HIGH_SPEED                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_HSP_HIGH_SPEED                  _MK_ENUM_CONST(1)

// This field is zero if Port Power(PP) and B-Host Enable(BHEN) is zero. 
// In Host Mode: Read/Write. 1=Port is in Reset. 0=Port is not in Reset.
// When software writes a one to this bit the bus-reset sequence as defined in the USB Specification Revision 2.0 is started. This bit will automatically change to zero after the reset sequence is complete. This behavior is different from EHCI where the host controller driver is required to set this bit to a zero after the reset duration is timed in the driver.  
// In Device Mode: This bit is a read only status  bit. Device reset from the USB bus is also indicated in the USBSTS register. 
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PR_SHIFT                        _MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PR_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_PORTSC1_0_PR_SHIFT)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PR_RANGE                        8:8
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PR_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PR_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PR_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PR_NOT_USB_RESET                        _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PR_USB_RESET                    _MK_ENUM_CONST(1)

// Port suspend. 1=Port in suspend state. 0=Port not in suspend state. 
// In Host Mode: Read/Write. 
// Port Enabled Bit and Suspend bit of this register define the port states as follows: 
// Bits [Port Enabled, Suspend]    Port State 
//        0x                        Disable 
//   10                        Enable 
//    11                        Suspend 
// When in suspend state, downstream propagation of data is blocked on this port, except for port reset. The blocking occurs at the end of the current transaction if a transaction was in progress when this bit was written to 1. In the suspend state, the port is sensitive to resume detection. Note that the bit status does not change until the port is suspended and that there may be a delay in suspending a port if there is a transaction currently in progress on the USB. The host controller will unconditionally set this bit to zero when software sets the Force Port Resume bit to zero. A write of zero to this bit is ignored by the host controller. If host software sets this bit to a one when the port is not enabled (i.e. Port enabled bit is a zero) the results are undefined. This field is zero if Port Power(PP) and B-Host Enable(BHEN) is zero in host mode.
// In Device Mode: Read Only. This bit is a read only status bit. 
#define USB2_CONTROLLER_USB2D_PORTSC1_0_SUSP_SHIFT                      _MK_SHIFT_CONST(7)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_SUSP_FIELD                      (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_PORTSC1_0_SUSP_SHIFT)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_SUSP_RANGE                      7:7
#define USB2_CONTROLLER_USB2D_PORTSC1_0_SUSP_WOFFSET                    0x0
#define USB2_CONTROLLER_USB2D_PORTSC1_0_SUSP_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_SUSP_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_SUSP_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_SUSP_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_SUSP_NOT_SUSPEND                        _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_SUSP_SUSPEND                    _MK_ENUM_CONST(1)

// Force Port Resume. 1= Resume detected/driven on port. 0=No resume (K state) detected/driven on port. 
// In Host Mode: 
// Software sets this bit to one to drive resume signaling. The Host Controller sets this bit to one if a J-to-K transition is detected while the port is in the Suspend state. When this bit transitions to a one because a J-to-K transition is detected, the Port Change Detect bit in the USBSTS register is also set to one.  This bit will automatically change to zero after the resume sequence is complete. This behavior is different from EHCI where the host controller driver is required to set this bit to a zero after the resume duration is timed in the driver. 
// Note that when the Host controller owns the port, the resume sequence follows the defined sequence documented in the USB Specification Revision 2.0. The resume signaling (Full-speed 'K') is driven on the port as long as this bit remains a one.  This bit remains a one until the port has switched to the high-speed idle.  Writing a zero has no effect because the port controller will time the resume operation to clear the bit when the port control state switches to HS or FS idle. This field is zero if Port Power(PP) and B-Host Enable(BHEN) is zero in host mode. This bit is not-EHCI compatible. 
// In Device mode:  
// After the device has been in Suspend State for 5ms or more, software must set this bit to one to drive resume signaling before clearing. The Device Controller will set this bit to one if a J-to-K transition is detected while the port is in the Suspend state. The bit will be cleared when the device returns to normal operation. Also, when this bit transitions to a one because a J-to-K transition is detected, the Port Change Detect bit in the USBSTS register is also set to one. 
// Software should ensure that the PHY clock is operational before writing a 1 to this bit to start the resume sequence. This is true for both Device and Host modes.
#define USB2_CONTROLLER_USB2D_PORTSC1_0_FPR_SHIFT                       _MK_SHIFT_CONST(6)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_FPR_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_PORTSC1_0_FPR_SHIFT)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_FPR_RANGE                       6:6
#define USB2_CONTROLLER_USB2D_PORTSC1_0_FPR_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_PORTSC1_0_FPR_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_FPR_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_FPR_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_FPR_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_FPR_NO_RESUME                   _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_FPR_RESUME                      _MK_ENUM_CONST(1)

// Over-current Change: Not supported
#define USB2_CONTROLLER_USB2D_PORTSC1_0_OCC_SHIFT                       _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_OCC_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_PORTSC1_0_OCC_SHIFT)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_OCC_RANGE                       5:5
#define USB2_CONTROLLER_USB2D_PORTSC1_0_OCC_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_PORTSC1_0_OCC_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_OCC_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_OCC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_OCC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_OCC_NO_CHANGE                   _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_OCC_CHANGE                      _MK_ENUM_CONST(1)

// Over-current Active: Not supported
#define USB2_CONTROLLER_USB2D_PORTSC1_0_OCA_SHIFT                       _MK_SHIFT_CONST(4)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_OCA_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_PORTSC1_0_OCA_SHIFT)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_OCA_RANGE                       4:4
#define USB2_CONTROLLER_USB2D_PORTSC1_0_OCA_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_PORTSC1_0_OCA_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_OCA_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_OCA_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_OCA_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_OCA_NO_OVER_CURRENT                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_OCA_OVER_CURRENT                        _MK_ENUM_CONST(1)

// Port Enable/Disable Change: 1=Port enabled/disabled status has changed. 0=No change.
// In Host Mode: 
// For the root hub, this bit gets set to a one only when a port is disabled due to disconnect on the port or due to the appropriate conditions existing at the EOF2 point (See Chapter 11 of the USB Specification). Software clears this by writing a one to it. This field is zero if Port Power(PP) and B-Host Enable(BHEN) is zero. 
// In Device mode:  
// The device port is always enabled. (This bit will  be zero) 
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PEC_SHIFT                       _MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PEC_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_PORTSC1_0_PEC_SHIFT)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PEC_RANGE                       3:3
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PEC_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PEC_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PEC_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PEC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PEC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PEC_NO_CHANGE                   _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PEC_CHANGE                      _MK_ENUM_CONST(1)

// Port Enabled/Disabled: 1=Enable. 0=Disable (default)
// In Host Mode: 
// Ports can only be enabled by the host controller as a part of the reset and enable. Software cannot enable a port by writing a one to this field. Ports can be disabled by either a fault condition (disconnect event or other fault condition) or by the host software. Note that the bit status does not change until the port state actually changes. There may be a delay in disabling or enabling a port due to other host controller and bus events.  When the port is disabled, (0b) downstream propagation of data is blocked except for reset. This field is zero if Port Power(PP) and B-Host Enable(BHEN) is zero in host mode. 
// In Device Mode: 
// The device port is always enabled. (This bit will  be one) 
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PE_SHIFT                        _MK_SHIFT_CONST(2)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PE_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_PORTSC1_0_PE_SHIFT)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PE_RANGE                        2:2
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PE_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PE_DEFAULT                      _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PE_PORT_DISABLED                        _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_PE_PORT_ENABLED                 _MK_ENUM_CONST(1)

// Connect Status Change: 1 =Change in Current Connect Status. 0=No change (default) 
// In Host Mode: 
// Indicates a change has occurred in the port's Current Connect Status. The host/device controller sets this bit for all changes to the port device connect status, even if system software has not cleared an existing connect status change. For example, the insertion status changes twice before system software has cleared the changed condition, hub hardware will be 'setting' an already-set bit (i.e., the bit will remain set).  Software clears this bit by writing a one to it. This field is zero if Port Power(PP) and B-Host Enable(BHEN) is zero in host mode. 
// This bit is undefined in device controller mode. 
#define USB2_CONTROLLER_USB2D_PORTSC1_0_CSC_SHIFT                       _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_CSC_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_PORTSC1_0_CSC_SHIFT)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_CSC_RANGE                       1:1
#define USB2_CONTROLLER_USB2D_PORTSC1_0_CSC_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_PORTSC1_0_CSC_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_CSC_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_CSC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_CSC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_CSC_NO_CHANGE                   _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_CSC_CHANGE                      _MK_ENUM_CONST(1)

// Current Connect Status: 
// In Host Mode: 1=Device is present on port.                0=No device is present (default) 
// This value reflects the current state of the port, and may not correspond directly to the event that caused the Connect Status Change bit (Bit 1) to be set. This field is zero if Port Power(PP) and B-Host Enable(BHEN) is zero in host mode. 
// In Device Mode: 1=Attached                    0=Not Attached (default) 
// A one indicates that the device successfully attached and is operating in either high speed or full speed as indicated by the High Speed Port bit in this register. A zero indicates that the device did not attach successfully or was forcibly disconnected by the software writing a zero to the Run bit in the USBCMD register. It does not state the device being disconnected or suspended. 
#define USB2_CONTROLLER_USB2D_PORTSC1_0_CCS_SHIFT                       _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_CCS_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_PORTSC1_0_CCS_SHIFT)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_CCS_RANGE                       0:0
#define USB2_CONTROLLER_USB2D_PORTSC1_0_CCS_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_PORTSC1_0_CCS_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_CCS_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_CCS_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_CCS_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_CCS_NOT_CONNECTED                       _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_PORTSC1_0_CCS_CONNECTED                   _MK_ENUM_CONST(1)


// Reserved address 416 [0x1a0] 
// USB2D On-The-Go (OTG) Status and Control Register

// Register USB2_CONTROLLER_USB2D_OTGSC_0  
#define USB2_CONTROLLER_USB2D_OTGSC_0                   _MK_ADDR_CONST(0x1a4)
#define USB2_CONTROLLER_USB2D_OTGSC_0_WORD_COUNT                        0x1
#define USB2_CONTROLLER_USB2D_OTGSC_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_RESET_MASK                        _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_OTGSC_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_OTGSC_0_WRITE_MASK                        _MK_MASK_CONST(0x7f7f001b)
// Reserved 
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A1_SHIFT                        _MK_SHIFT_CONST(31)
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A1_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_OTGSC_0_N_A1_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A1_RANGE                        31:31
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A1_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A1_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A1_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A1_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A1_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Data Pulse Interrupt Enable. Setting this bit enables the Data pulse interrupt.
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPIE_SHIFT                        _MK_SHIFT_CONST(30)
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPIE_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_OTGSC_0_DPIE_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPIE_RANGE                        30:30
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPIE_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPIE_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPIE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPIE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPIE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPIE_DISABLE                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPIE_ENABLE                       _MK_ENUM_CONST(1)

// 1 millisecond timer Interrupt enable. Setting this bit enables the 1 millisecond timer  interrupt.
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMSE_SHIFT                      _MK_SHIFT_CONST(29)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMSE_FIELD                      (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_OTGSC_0_ONEMSE_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMSE_RANGE                      29:29
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMSE_WOFFSET                    0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMSE_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMSE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMSE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMSE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMSE_DISABLE                    _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMSE_ENABLE                     _MK_ENUM_CONST(1)

// B Session End Interrupt Enable. Setting this bit enables the B session end  interrupt
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSEIE_SHIFT                       _MK_SHIFT_CONST(28)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSEIE_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_OTGSC_0_BSEIE_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSEIE_RANGE                       28:28
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSEIE_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSEIE_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSEIE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSEIE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSEIE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSEIE_DISABLE                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSEIE_ENABLE                      _MK_ENUM_CONST(1)

// B Session Valid Interrupt Enable. Setting this bit enables the B session valid  interrupt
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSVIE_SHIFT                       _MK_SHIFT_CONST(27)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSVIE_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_OTGSC_0_BSVIE_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSVIE_RANGE                       27:27
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSVIE_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSVIE_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSVIE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSVIE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSVIE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSVIE_DISABLE                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSVIE_ENABLE                      _MK_ENUM_CONST(1)

// A Session Valid Interrupt Enable. Setting this bit enables the A session valid  interrupt
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASVIE_SHIFT                       _MK_SHIFT_CONST(26)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASVIE_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_OTGSC_0_ASVIE_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASVIE_RANGE                       26:26
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASVIE_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASVIE_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASVIE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASVIE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASVIE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASVIE_DISABLE                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASVIE_ENABLE                      _MK_ENUM_CONST(1)

// A VBus Valid Interrupt Enable. Setting this bit enables the A VBus valid  interrupt
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVVIE_SHIFT                       _MK_SHIFT_CONST(25)
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVVIE_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_OTGSC_0_AVVIE_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVVIE_RANGE                       25:25
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVVIE_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVVIE_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVVIE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVVIE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVVIE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVVIE_DISABLE                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVVIE_ENABLE                      _MK_ENUM_CONST(1)

// USB ID Interrupt Enable. Setting this bit enables the USB ID interrupt
#define USB2_CONTROLLER_USB2D_OTGSC_0_IDIE_SHIFT                        _MK_SHIFT_CONST(24)
#define USB2_CONTROLLER_USB2D_OTGSC_0_IDIE_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_OTGSC_0_IDIE_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_IDIE_RANGE                        24:24
#define USB2_CONTROLLER_USB2D_OTGSC_0_IDIE_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_IDIE_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_IDIE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_IDIE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_IDIE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_IDIE_DISABLE                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_IDIE_ENABLE                       _MK_ENUM_CONST(1)

// Reserved 
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A2_SHIFT                        _MK_SHIFT_CONST(23)
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A2_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_OTGSC_0_N_A2_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A2_RANGE                        23:23
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A2_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A2_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A2_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A2_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A2_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Data Pulse Interrupt Status. This bit is set when data bus pulsing occurs on DP or DM.  Data bus pulsing is only detected when USBMODE.CM = Host (11) and PORTSC(0).PortPower = Off (0). Software writes a 1 to clear this bit.
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPIS_SHIFT                        _MK_SHIFT_CONST(22)
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPIS_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_OTGSC_0_DPIS_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPIS_RANGE                        22:22
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPIS_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPIS_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPIS_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPIS_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPIS_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPIS_INT_CLEAR                    _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPIS_INT_SET                      _MK_ENUM_CONST(1)

// 1 millisecond timer Interrupt Status: This bit is set once every millisecond. Software  writes a 1 to clear it.
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMSS_SHIFT                      _MK_SHIFT_CONST(21)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMSS_FIELD                      (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_OTGSC_0_ONEMSS_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMSS_RANGE                      21:21
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMSS_WOFFSET                    0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMSS_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMSS_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMSS_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMSS_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMSS_INT_CLEAR                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMSS_INT_SET                    _MK_ENUM_CONST(1)

// B Session End Interrupt Status. This bit is set when VBus has fallen below the B  session end threshold. Software writes a 1 to clear this bit .
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSEIS_SHIFT                       _MK_SHIFT_CONST(20)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSEIS_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_OTGSC_0_BSEIS_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSEIS_RANGE                       20:20
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSEIS_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSEIS_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSEIS_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSEIS_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSEIS_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSEIS_INT_CLEAR                   _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSEIS_INT_SET                     _MK_ENUM_CONST(1)

// B Session Valid Interrupt Status. This bit is set when VBus has either risen above  or fallen below the B session valid threshold (0.8 VDC). Software writes a 1  to clear this bit. 
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSVIS_SHIFT                       _MK_SHIFT_CONST(19)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSVIS_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_OTGSC_0_BSVIS_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSVIS_RANGE                       19:19
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSVIS_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSVIS_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSVIS_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSVIS_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSVIS_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSVIS_INT_CLEAR                   _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSVIS_INT_SET                     _MK_ENUM_CONST(1)

// A Session Valid Interrupt Status. This bit is set when VBus has either risen above  or fallen below the A session valid threshold (0.8 VDC). Software writes a  one to clear this bit. 
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASVIS_SHIFT                       _MK_SHIFT_CONST(18)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASVIS_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_OTGSC_0_ASVIS_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASVIS_RANGE                       18:18
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASVIS_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASVIS_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASVIS_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASVIS_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASVIS_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASVIS_INT_CLEAR                   _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASVIS_INT_SET                     _MK_ENUM_CONST(1)

// A VBus Valid Interrupt Status. This bit is set when VBus has either risen above  or fallen below the VBus valid threshold (4.4 VDC) on an A device. Software  writes a 1 to clear this bit. 
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVVIS_SHIFT                       _MK_SHIFT_CONST(17)
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVVIS_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_OTGSC_0_AVVIS_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVVIS_RANGE                       17:17
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVVIS_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVVIS_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVVIS_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVVIS_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVVIS_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVVIS_INT_CLEAR                   _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVVIS_INT_SET                     _MK_ENUM_CONST(1)

// USB ID Interrupt Status. This bit is set when a change on the ID input has been detected. Software writes a 1 to clear this bit. 
#define USB2_CONTROLLER_USB2D_OTGSC_0_IDIS_SHIFT                        _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_OTGSC_0_IDIS_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_OTGSC_0_IDIS_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_IDIS_RANGE                        16:16
#define USB2_CONTROLLER_USB2D_OTGSC_0_IDIS_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_IDIS_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_IDIS_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_IDIS_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_IDIS_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_IDIS_INT_CLEAR                    _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_IDIS_INT_SET                      _MK_ENUM_CONST(1)

// Reserved 
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A3_SHIFT                        _MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A3_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_OTGSC_0_N_A3_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A3_RANGE                        15:15
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A3_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A3_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A3_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A3_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A3_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Data Bus Pulsing Status. A 1 indicates data bus pulsing is being detected  on the port. 
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPS_SHIFT                 _MK_SHIFT_CONST(14)
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPS_FIELD                 (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_OTGSC_0_DPS_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPS_RANGE                 14:14
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPS_WOFFSET                       0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPS_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPS_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPS_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPS_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPS_STS_CLEAR                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_DPS_STS_SET                       _MK_ENUM_CONST(1)

// 1 millisecond timer toggle. This bit toggles once per millisecond
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMST_SHIFT                      _MK_SHIFT_CONST(13)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMST_FIELD                      (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_OTGSC_0_ONEMST_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMST_RANGE                      13:13
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMST_WOFFSET                    0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMST_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMST_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMST_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMST_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMST_STS_CLEAR                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ONEMST_STS_SET                    _MK_ENUM_CONST(1)

// B session End. Indicates VBus is below the B session end  threshold
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSE_SHIFT                 _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSE_FIELD                 (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_OTGSC_0_BSE_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSE_RANGE                 12:12
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSE_WOFFSET                       0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSE_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSE_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSE_STS_CLEAR                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSE_STS_SET                       _MK_ENUM_CONST(1)

// B Session Valid. Indicates VBus is above the B session valid  threshold
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSV_SHIFT                 _MK_SHIFT_CONST(11)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSV_FIELD                 (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_OTGSC_0_BSV_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSV_RANGE                 11:11
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSV_WOFFSET                       0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSV_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSV_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSV_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSV_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSV_STS_CLEAR                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_BSV_STS_SET                       _MK_ENUM_CONST(1)

// A Session Valid. Indicates VBus is above the A session valid  threshold
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASV_SHIFT                 _MK_SHIFT_CONST(10)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASV_FIELD                 (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_OTGSC_0_ASV_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASV_RANGE                 10:10
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASV_WOFFSET                       0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASV_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASV_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASV_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASV_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASV_STS_CLEAR                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ASV_STS_SET                       _MK_ENUM_CONST(1)

// A VBus Valid. Indicates VBus is above the A VBus valid threshold
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVV_SHIFT                 _MK_SHIFT_CONST(9)
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVV_FIELD                 (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_OTGSC_0_AVV_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVV_RANGE                 9:9
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVV_WOFFSET                       0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVV_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVV_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVV_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVV_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVV_STS_CLEAR                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_AVV_STS_SET                       _MK_ENUM_CONST(1)

// USB ID: 0 = A-device  1 = B-device
#define USB2_CONTROLLER_USB2D_OTGSC_0_ID_SHIFT                  _MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ID_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_OTGSC_0_ID_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ID_RANGE                  8:8
#define USB2_CONTROLLER_USB2D_OTGSC_0_ID_WOFFSET                        0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_ID_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ID_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ID_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ID_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ID_A_DEV                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_ID_B_DEV                  _MK_ENUM_CONST(1)

// Reserved 
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A4_SHIFT                        _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A4_FIELD                        (_MK_MASK_CONST(0x7) << USB2_CONTROLLER_USB2D_OTGSC_0_N_A4_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A4_RANGE                        7:5
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A4_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A4_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A4_DEFAULT_MASK                 _MK_MASK_CONST(0x7)
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A4_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A4_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Data Pulsing. Setting this bit causes the pull-up on DP to be  asserted for data pulsing during SRP. 
#define USB2_CONTROLLER_USB2D_OTGSC_0_DP_SHIFT                  _MK_SHIFT_CONST(4)
#define USB2_CONTROLLER_USB2D_OTGSC_0_DP_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_OTGSC_0_DP_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_DP_RANGE                  4:4
#define USB2_CONTROLLER_USB2D_OTGSC_0_DP_WOFFSET                        0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_DP_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_DP_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_DP_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_DP_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_DP_NO_DATA_PULSE                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_DP_DATA_PULSE                     _MK_ENUM_CONST(1)

// OTG Termination. This bit must be set when the OTG device is in device mode, this controls the pulldown on DM. 
#define USB2_CONTROLLER_USB2D_OTGSC_0_OT_SHIFT                  _MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_OTGSC_0_OT_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_OTGSC_0_OT_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_OT_RANGE                  3:3
#define USB2_CONTROLLER_USB2D_OTGSC_0_OT_WOFFSET                        0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_OT_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_OT_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_OT_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_OT_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_OT_NO_OTG_TERM                    _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_OT_OTG_TERM                       _MK_ENUM_CONST(1)

// Reserved = 0
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A5_SHIFT                        _MK_SHIFT_CONST(2)
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A5_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_OTGSC_0_N_A5_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A5_RANGE                        2:2
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A5_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A5_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A5_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A5_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_N_A5_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// VBUS Charge. Setting this bit causes the VBus line to be  charged. This is used for VBus pulsing during SRP. 
#define USB2_CONTROLLER_USB2D_OTGSC_0_VC_SHIFT                  _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_VC_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_OTGSC_0_VC_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_VC_RANGE                  1:1
#define USB2_CONTROLLER_USB2D_OTGSC_0_VC_WOFFSET                        0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_VC_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_VC_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_VC_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_VC_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_VC_NO_VBUS_CHRG                   _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_VC_VBUS_CHRG                      _MK_ENUM_CONST(1)

// VBUS_Discharge. Read/write. Setting this bit  causes Vbus to discharge through a resistor. 
#define USB2_CONTROLLER_USB2D_OTGSC_0_VD_SHIFT                  _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_VD_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_OTGSC_0_VD_SHIFT)
#define USB2_CONTROLLER_USB2D_OTGSC_0_VD_RANGE                  0:0
#define USB2_CONTROLLER_USB2D_OTGSC_0_VD_WOFFSET                        0x0
#define USB2_CONTROLLER_USB2D_OTGSC_0_VD_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_VD_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_OTGSC_0_VD_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_VD_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_VD_NO_VBUS_DISCHRG                        _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_OTGSC_0_VD_VBUS_DISCHRG                   _MK_ENUM_CONST(1)

// USB2D USB Device Mode Register

// Register USB2_CONTROLLER_USB2D_USBMODE_0  
#define USB2_CONTROLLER_USB2D_USBMODE_0                 _MK_ADDR_CONST(0x1a8)
#define USB2_CONTROLLER_USB2D_USBMODE_0_WORD_COUNT                      0x1
#define USB2_CONTROLLER_USB2D_USBMODE_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBMODE_0_RESET_MASK                      _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_USBMODE_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBMODE_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBMODE_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_USBMODE_0_WRITE_MASK                      _MK_MASK_CONST(0x0)
// Reserved 
#define USB2_CONTROLLER_USB2D_USBMODE_0_N_A_SHIFT                       _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_USBMODE_0_N_A_FIELD                       (_MK_MASK_CONST(0x7ffffff) << USB2_CONTROLLER_USB2D_USBMODE_0_N_A_SHIFT)
#define USB2_CONTROLLER_USB2D_USBMODE_0_N_A_RANGE                       31:5
#define USB2_CONTROLLER_USB2D_USBMODE_0_N_A_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_USBMODE_0_N_A_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBMODE_0_N_A_DEFAULT_MASK                        _MK_MASK_CONST(0x7ffffff)
#define USB2_CONTROLLER_USB2D_USBMODE_0_N_A_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBMODE_0_N_A_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Stream disbable: 1 Streaming is disabled - helpful to avoid overrun/underruns when system load is too high.
#define USB2_CONTROLLER_USB2D_USBMODE_0_SDIS_SHIFT                      _MK_SHIFT_CONST(4)
#define USB2_CONTROLLER_USB2D_USBMODE_0_SDIS_FIELD                      (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBMODE_0_SDIS_SHIFT)
#define USB2_CONTROLLER_USB2D_USBMODE_0_SDIS_RANGE                      4:4
#define USB2_CONTROLLER_USB2D_USBMODE_0_SDIS_WOFFSET                    0x0
#define USB2_CONTROLLER_USB2D_USBMODE_0_SDIS_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBMODE_0_SDIS_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBMODE_0_SDIS_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBMODE_0_SDIS_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBMODE_0_SDIS_STREAM_ENABLE                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBMODE_0_SDIS_STREAM_DISABLE                     _MK_ENUM_CONST(1)

// Setup Lockout Mode:
// In device mode, this bit controls the behavior of the setup lockout mechanism.
// 0 - Setup lockout is ON (default)
// 1  Setup lockout is OFF. Firmware requires the  use of setup tripwire semaphore in USB2D_USBCMD register.
#define USB2_CONTROLLER_USB2D_USBMODE_0_SLOM_SHIFT                      _MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_USBMODE_0_SLOM_FIELD                      (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBMODE_0_SLOM_SHIFT)
#define USB2_CONTROLLER_USB2D_USBMODE_0_SLOM_RANGE                      3:3
#define USB2_CONTROLLER_USB2D_USBMODE_0_SLOM_WOFFSET                    0x0
#define USB2_CONTROLLER_USB2D_USBMODE_0_SLOM_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBMODE_0_SLOM_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBMODE_0_SLOM_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBMODE_0_SLOM_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBMODE_0_SLOM_LOCKOUT_OFF                        _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBMODE_0_SLOM_LOCKOUT_ON                 _MK_ENUM_CONST(1)

// Endian Select: Note: For this implementation, this should be  always set to 0 (little endian).
#define USB2_CONTROLLER_USB2D_USBMODE_0_ES_SHIFT                        _MK_SHIFT_CONST(2)
#define USB2_CONTROLLER_USB2D_USBMODE_0_ES_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_USBMODE_0_ES_SHIFT)
#define USB2_CONTROLLER_USB2D_USBMODE_0_ES_RANGE                        2:2
#define USB2_CONTROLLER_USB2D_USBMODE_0_ES_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_USBMODE_0_ES_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBMODE_0_ES_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_USBMODE_0_ES_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBMODE_0_ES_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBMODE_0_ES_LITTLE_ENDIAN                        _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBMODE_0_ES_RESERVED                     _MK_ENUM_CONST(1)

// Controller Mode: The controller mode will default to an idle state and will need to be initialized to the desired operating mode after reset. This register can only be written once after reset. If it is necessary to switch modes, software must reset the controller by writing to the RESET bit in the USBCMD register before reprogramming this register. 
// 00 = Idle [Default] 
// 01 = Reserved 
// 10 = Device Controller  
// 11 = Host Controller 
#define USB2_CONTROLLER_USB2D_USBMODE_0_CM_SHIFT                        _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_USBMODE_0_CM_FIELD                        (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_USBMODE_0_CM_SHIFT)
#define USB2_CONTROLLER_USB2D_USBMODE_0_CM_RANGE                        1:0
#define USB2_CONTROLLER_USB2D_USBMODE_0_CM_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_USBMODE_0_CM_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBMODE_0_CM_DEFAULT_MASK                 _MK_MASK_CONST(0x3)
#define USB2_CONTROLLER_USB2D_USBMODE_0_CM_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBMODE_0_CM_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_USBMODE_0_CM_IDLE                 _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_USBMODE_0_CM_RESERVED                     _MK_ENUM_CONST(1)
#define USB2_CONTROLLER_USB2D_USBMODE_0_CM_DEVICE_MODE                  _MK_ENUM_CONST(2)
#define USB2_CONTROLLER_USB2D_USBMODE_0_CM_HOST_MODE                    _MK_ENUM_CONST(3)

// USB2D Endpoint Setup Status Register

// Register USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0  
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0                  _MK_ADDR_CONST(0x1ac)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_WORD_COUNT                       0x1
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_RESET_MASK                       _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_WRITE_MASK                       _MK_MASK_CONST(0xffffffff)
// Reserved = 0
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_N_A_SHIFT                        _MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_N_A_FIELD                        (_MK_MASK_CONST(0x1fffffff) << USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_N_A_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_N_A_RANGE                        31:3
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_N_A_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_N_A_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_N_A_DEFAULT_MASK                 _MK_MASK_CONST(0x1fffffff)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_N_A_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_N_A_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Endpoint 2 Setup Status:
// For every setup transaction that is received, this bit is set to 1. Software must clear or acknowledge the setup transfer by writing a 1 to it after it has read the setup data from Queue head. The response to a setup packet (as in the order of operations and total response time) is crucial to limit bus time-outs while the setup lock-out mechanism is engaged. 
//  This register is only used in device mode.
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT2_SHIFT                    _MK_SHIFT_CONST(2)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT2_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT2_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT2_RANGE                    2:2
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT2_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT2_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT2_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT2_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT2_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT2_NOT_RCVD                 _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT2_SETUP_RCVD                       _MK_ENUM_CONST(1)

// Endpoint 1 Setup Status:
// For every setup transaction that is received, this bit is set to 1. Software must clear or acknowledge the setup transfer by writing a 1 to it after it has read the setup data from Queue head. The response to a setup packet (as in the order of operations and total response time) is crucial to limit bus time-outs while the setup lock-out mechanism is engaged. 
//  This register is only used in device mode.
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT1_SHIFT                    _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT1_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT1_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT1_RANGE                    1:1
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT1_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT1_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT1_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT1_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT1_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT1_NOT_RCVD                 _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT1_SETUP_RCVD                       _MK_ENUM_CONST(1)

// Endpoint 0 Setup Status:
// For every setup transaction that is received, this bit is set to 1. Software must clear or acknowledge the setup transfer by writing a 1 to it after it has read the setup data from Queue head. The response to a setup packet (as in the order of operations and total response time) is crucial to limit bus time-outs while the setup lock-out mechanism is engaged. 
//  This register is only used in device mode.
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT0_SHIFT                    _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT0_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT0_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT0_RANGE                    0:0
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT0_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT0_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT0_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT0_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT0_NOT_RCVD                 _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0_ENDPTSETUPSTAT0_SETUP_RCVD                       _MK_ENUM_CONST(1)

// USB2D Endpoint Initialization Register

// Register USB2_CONTROLLER_USB2D_ENDPTPRIME_0  
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0                      _MK_ADDR_CONST(0x1b0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_WORD_COUNT                   0x1
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_RESET_MASK                   _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
// Reserved = 0
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_N_A1_SHIFT                   _MK_SHIFT_CONST(19)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_N_A1_FIELD                   (_MK_MASK_CONST(0x1fff) << USB2_CONTROLLER_USB2D_ENDPTPRIME_0_N_A1_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_N_A1_RANGE                   31:19
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_N_A1_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_N_A1_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_N_A1_DEFAULT_MASK                    _MK_MASK_CONST(0x1fff)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_N_A1_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_N_A1_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Prime Endpoint Transmit Buffer:
// This bit is used to request that a buffer prepared for a transmit operation in order to respond to a USB IN/INTERRUPT transaction on this endpiont. Software should write a "1" to this bit when posting a new transfer descriptor to this endpoint. Hardware will automatically use this bit to begin parsing for a new transfer descriptor from the queue head and prepare a transmit buffer. Hardware will clear this bit when this endpoint is successfully primed.
// This is only used in device mode.
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB2_SHIFT                  _MK_SHIFT_CONST(18)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB2_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB2_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB2_RANGE                  18:18
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB2_WOFFSET                        0x0
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB2_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB2_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB2_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB2_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB2_DONT_PRIME                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB2_PRIME                  _MK_ENUM_CONST(1)

// Prime Endpoint Transmit Buffer:
// This bit is used to request that a buffer prepared for a transmit operation in order to respond to a USB IN/INTERRUPT transaction on this endpiont. Software should write a "1" to this bit when posting a new transfer descriptor to this endpoint. Hardware will automatically use this bit to begin parsing for a new transfer descriptor from the queue head and prepare a transmit buffer. Hardware will clear this bit when this endpoint is successfully primed.
// This is only used in device mode.
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB1_SHIFT                  _MK_SHIFT_CONST(17)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB1_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB1_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB1_RANGE                  17:17
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB1_WOFFSET                        0x0
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB1_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB1_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB1_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB1_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB1_DONT_PRIME                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB1_PRIME                  _MK_ENUM_CONST(1)

// Prime Endpoint Transmit Buffer:
// This bit is used to request that a buffer prepared for a transmit operation in order to respond to a USB IN/INTERRUPT transaction on this endpiont. Software should write a "1" to this bit when posting a new transfer descriptor to this endpoint. Hardware will automatically use this bit to begin parsing for a new transfer descriptor from the queue head and prepare a transmit buffer. Hardware will clear this bit when this endpoint is successfully primed.
// This is only used in device mode.
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB0_SHIFT                  _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB0_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB0_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB0_RANGE                  16:16
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB0_WOFFSET                        0x0
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB0_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB0_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB0_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB0_DONT_PRIME                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PETB0_PRIME                  _MK_ENUM_CONST(1)

// Reserved = 0
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_N_A2_SHIFT                   _MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_N_A2_FIELD                   (_MK_MASK_CONST(0x1fff) << USB2_CONTROLLER_USB2D_ENDPTPRIME_0_N_A2_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_N_A2_RANGE                   15:3
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_N_A2_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_N_A2_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_N_A2_DEFAULT_MASK                    _MK_MASK_CONST(0x1fff)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_N_A2_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_N_A2_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Prime Endpoint Receive Buffer:
// This bit is used to request that a buffer prepared for a receive operation when a USB host initiates a USB OUT transaction to this endpoint. Software should write a one to this bit whenever posting a new transfer descriptor to this endpoint. Hardware will automatically use this bit to begin parsing for a new transfer descriptor from the queue head and prepare a receive buffer. Hardware will clear this bit when this endpoint is successfully primed. 
// This is only used in device mode.
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB2_SHIFT                  _MK_SHIFT_CONST(2)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB2_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB2_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB2_RANGE                  2:2
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB2_WOFFSET                        0x0
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB2_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB2_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB2_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB2_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB2_DONT_PRIME                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB2_PRIME                  _MK_ENUM_CONST(1)

// Prime Endpoint Receive Buffer:
// This bit is used to request that a buffer prepared for a receive operation when a USB host initiates a USB OUT transaction to this endpoint. Software should write a one to this bit whenever posting a new transfer descriptor to this endpoint. Hardware will automatically use this bit to begin parsing for a new transfer descriptor from the queue head and prepare a receive buffer. Hardware will clear this bit when this endpoint is successfully primed. 
// This is only used in device mode.
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB1_SHIFT                  _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB1_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB1_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB1_RANGE                  1:1
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB1_WOFFSET                        0x0
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB1_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB1_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB1_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB1_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB1_DONT_PRIME                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB1_PRIME                  _MK_ENUM_CONST(1)

// Prime Endpoint Receive Buffer:
// This bit is used to request that a buffer prepared for a receive operation when a USB host initiates a USB OUT transaction to this endpoint. Software should write a one to this bit whenever posting a new transfer descriptor to this endpoint. Hardware will automatically use this bit to begin parsing for a new transfer descriptor from the queue head and prepare a receive buffer. Hardware will clear this bit when this endpoint is successfully primed. 
// This is only used in device mode.
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB0_SHIFT                  _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB0_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB0_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB0_RANGE                  0:0
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB0_WOFFSET                        0x0
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB0_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB0_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB0_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB0_DONT_PRIME                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTPRIME_0_PERB0_PRIME                  _MK_ENUM_CONST(1)

// USB2D Endpoint De-Initialization Register

// Register USB2_CONTROLLER_USB2D_ENDPTFLUSH_0  
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0                      _MK_ADDR_CONST(0x1b4)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_WORD_COUNT                   0x1
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_RESET_MASK                   _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
// Reserved = 0
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_N_A1_SHIFT                   _MK_SHIFT_CONST(19)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_N_A1_FIELD                   (_MK_MASK_CONST(0x1fff) << USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_N_A1_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_N_A1_RANGE                   31:19
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_N_A1_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_N_A1_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_N_A1_DEFAULT_MASK                    _MK_MASK_CONST(0x1fff)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_N_A1_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_N_A1_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Flush Endpoint Transmit Buffer: 
// Writing a one to this bit causes the associated endpoint to clear any primed buffers. If a packet is in progress for the associated endpoint that transfer will continue until completion. Hardware clears this register after the endpoint flush operation is successful. 
// This is only used in device mode.
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB2_SHIFT                  _MK_SHIFT_CONST(18)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB2_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB2_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB2_RANGE                  18:18
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB2_WOFFSET                        0x0
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB2_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB2_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB2_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB2_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB2_DONT_FLUSH                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB2_FLUSH                  _MK_ENUM_CONST(1)

// 
// Writing a one to this bit causes the associated endpoint to clear any primed buffers. If a packet is in progress for the associated endpoint that transfer will continue until completion. Hardware clears this register after the endpoint flush operation is successful. 
// This is only used in device mode.
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB1_SHIFT                  _MK_SHIFT_CONST(17)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB1_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB1_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB1_RANGE                  17:17
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB1_WOFFSET                        0x0
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB1_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB1_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB1_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB1_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB1_DONT_FLUSH                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB1_FLUSH                  _MK_ENUM_CONST(1)

//
// Writing a one to this bit causes the associated endpoint to clear any primed buffers. If a packet is in progress for the associated endpoint that transfer will continue until completion. Hardware clears this register after the endpoint flush operation is successful. 
// This is only used in device mode.
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB0_SHIFT                  _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB0_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB0_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB0_RANGE                  16:16
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB0_WOFFSET                        0x0
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB0_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB0_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB0_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB0_DONT_FLUSH                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FETB0_FLUSH                  _MK_ENUM_CONST(1)

// Reserved = 0
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_N_A2_SHIFT                   _MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_N_A2_FIELD                   (_MK_MASK_CONST(0x1fff) << USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_N_A2_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_N_A2_RANGE                   15:3
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_N_A2_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_N_A2_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_N_A2_DEFAULT_MASK                    _MK_MASK_CONST(0x1fff)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_N_A2_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_N_A2_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Flush Endpoint Receive Buffer:
// Writing a one to this bit causes the associated endpoint to clear any primed buffers. If a packet is in progress for the associated endpoint that transfer will continue until completion. Hardware clears this register after the endpoint flush operation is successful. 
// This is only used in device mode.
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB2_SHIFT                  _MK_SHIFT_CONST(2)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB2_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB2_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB2_RANGE                  2:2
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB2_WOFFSET                        0x0
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB2_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB2_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB2_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB2_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB2_DONT_FLUSH                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB2_FLUSH                  _MK_ENUM_CONST(1)

// Flush Endpoint Receive Buffer:
// Writing a one to this bit causes the associated endpoint to clear any primed buffers. If a packet is in progress for the associated endpoint that transfer will continue until completion. Hardware clears this register after the endpoint flush operation is successful. 
// This is only used in device mode.
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB1_SHIFT                  _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB1_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB1_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB1_RANGE                  1:1
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB1_WOFFSET                        0x0
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB1_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB1_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB1_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB1_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB1_DONT_FLUSH                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB1_FLUSH                  _MK_ENUM_CONST(1)

// Flush Endpoint Receive Buffer:
// Writing a one to this bit causes the associated endpoint to clear any primed buffers. If a packet is in progress for the associated endpoint that transfer will continue until completion. Hardware clears this register after the endpoint flush operation is successful. 
// This is only used in device mode.
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB0_SHIFT                  _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB0_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB0_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB0_RANGE                  0:0
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB0_WOFFSET                        0x0
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB0_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB0_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB0_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB0_DONT_FLUSH                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTFLUSH_0_FERB0_FLUSH                  _MK_ENUM_CONST(1)

// USB2D Endpoint Status Register

// Register USB2_CONTROLLER_USB2D_ENDPTSTATUS_0  
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0                     _MK_ADDR_CONST(0x1b8)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_WORD_COUNT                  0x1
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_RESET_MASK                  _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_WRITE_MASK                  _MK_MASK_CONST(0x0)
// Reserved = 0
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_N_A1_SHIFT                  _MK_SHIFT_CONST(19)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_N_A1_FIELD                  (_MK_MASK_CONST(0x1fff) << USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_N_A1_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_N_A1_RANGE                  31:19
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_N_A1_WOFFSET                        0x0
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_N_A1_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_N_A1_DEFAULT_MASK                   _MK_MASK_CONST(0x1fff)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_N_A1_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_N_A1_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Endpoint Transmit Buffer Ready:
// One bit for each endpoint indicates status of the respective endpoint buffer. This bit is set to a one by the hardware as a response to receiving a command from a corresponding bit in the ENDPTPRIME register. There will always be a delay between setting a bit in the ENDPTPRIME register and endpoint indicating ready. This delay ime varies based upon the current USB traffic and the number of bits set in the ENDPTPRIME register. Buffer ready is cleared by USB reset, by the USB DMA system, or through the ENDPTFLUSH register. 
// This is only used in device mode.
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR2_SHIFT                 _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR2_FIELD                 (_MK_MASK_CONST(0x7) << USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR2_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR2_RANGE                 18:16
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR2_WOFFSET                       0x0
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR2_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR2_DEFAULT_MASK                  _MK_MASK_CONST(0x7)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR2_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR2_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR2_NOT_READY                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR2_READY                 _MK_ENUM_CONST(1)

// Endpoint Transmit Buffer Ready:
// One bit for each endpoint indicates status of the respective endpoint buffer. This bit is set to a one by the hardware as a response to receiving a command from a corresponding bit in the ENDPTPRIME register. There will always be a delay between setting a bit in the ENDPTPRIME register and endpoint indicating ready. This delay ime varies based upon the current USB traffic and the number of bits set in the ENDPTPRIME register. Buffer ready is cleared by USB reset, by the USB DMA system, or through the ENDPTFLUSH register. 
// This is only used in device mode.
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR1_SHIFT                 _MK_SHIFT_CONST(17)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR1_FIELD                 (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR1_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR1_RANGE                 17:17
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR1_WOFFSET                       0x0
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR1_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR1_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR1_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR1_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR1_NOT_READY                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR1_READY                 _MK_ENUM_CONST(1)

// Endpoint Transmit Buffer Ready:
// One bit for each endpoint indicates status of the respective endpoint buffer. This bit is set to a one by the hardware as a response to receiving a command from a corresponding bit in the ENDPTPRIME register. There will always be a delay between setting a bit in the ENDPTPRIME register and endpoint indicating ready. This delay ime varies based upon the current USB traffic and the number of bits set in the ENDPTPRIME register. Buffer ready is cleared by USB reset, by the USB DMA system, or through the ENDPTFLUSH register. 
// This is only used in device mode.
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR0_SHIFT                 _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR0_FIELD                 (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR0_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR0_RANGE                 16:16
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR0_WOFFSET                       0x0
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR0_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR0_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR0_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR0_NOT_READY                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ETBR0_READY                 _MK_ENUM_CONST(1)

// Reserved = 0
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_N_A2_SHIFT                  _MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_N_A2_FIELD                  (_MK_MASK_CONST(0x1fff) << USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_N_A2_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_N_A2_RANGE                  15:3
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_N_A2_WOFFSET                        0x0
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_N_A2_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_N_A2_DEFAULT_MASK                   _MK_MASK_CONST(0x1fff)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_N_A2_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_N_A2_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Endpoint Receive Buffer Ready:
// One bit for each endpoint indicates status of the respective endpoint buffer. This bit is set to a one by the hardware as a response to receiving a command from a corresponding bit in the ENDPTPRIME register. There will always be a delay between setting a bit in the ENDPTPRIME register and endpoint indicating ready. This delay ime varies based upon the current USB traffic and the number of bits set in the ENDPTPRIME register. Buffer ready is cleared by USB reset, by the USB DMA system, or through the ENDPTFLUSH register. 
// This is only used in device mode.
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR2_SHIFT                 _MK_SHIFT_CONST(2)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR2_FIELD                 (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR2_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR2_RANGE                 2:2
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR2_WOFFSET                       0x0
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR2_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR2_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR2_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR2_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR2_NOT_READY                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR2_READY                 _MK_ENUM_CONST(1)

// Endpoint Receive Buffer Ready:
// One bit for each endpoint indicates status of the respective endpoint buffer. This bit is set to a one by the hardware as a response to receiving a command from a corresponding bit in the ENDPTPRIME register. There will always be a delay between setting a bit in the ENDPTPRIME register and endpoint indicating ready. This delay ime varies based upon the current USB traffic and the number of bits set in the ENDPTPRIME register. Buffer ready is cleared by USB reset, by the USB DMA system, or through the ENDPTFLUSH register. 
// This is only used in device mode.
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR1_SHIFT                 _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR1_FIELD                 (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR1_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR1_RANGE                 1:1
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR1_WOFFSET                       0x0
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR1_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR1_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR1_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR1_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR1_NOT_READY                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR1_READY                 _MK_ENUM_CONST(1)

// Endpoint Receive Buffer Ready:
// One bit for each endpoint indicates status of the respective endpoint buffer. This bit is set to a one by the hardware as a response to receiving a command from a corresponding bit in the ENDPTPRIME register. There will always be a delay between setting a bit in the ENDPTPRIME register and endpoint indicating ready. This delay ime varies based upon the current USB traffic and the number of bits set in the ENDPTPRIME register. Buffer ready is cleared by USB reset, by the USB DMA system, or through the ENDPTFLUSH register. 
// This is only used in device mode.
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR0_SHIFT                 _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR0_FIELD                 (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR0_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR0_RANGE                 0:0
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR0_WOFFSET                       0x0
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR0_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR0_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR0_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR0_NOT_READY                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTSTATUS_0_ERBR0_READY                 _MK_ENUM_CONST(1)

// USB2D Endpoint Complete Register

// Register USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0  
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0                   _MK_ADDR_CONST(0x1bc)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_WORD_COUNT                        0x1
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_RESET_MASK                        _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// Reserved = 0
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_N_A1_SHIFT                        _MK_SHIFT_CONST(19)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_N_A1_FIELD                        (_MK_MASK_CONST(0x1fff) << USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_N_A1_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_N_A1_RANGE                        31:19
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_N_A1_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_N_A1_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_N_A1_DEFAULT_MASK                 _MK_MASK_CONST(0x1fff)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_N_A1_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_N_A1_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Endpoint Transmit Complete Event:
// Each bit indicates a transmit event (IN/INTERRUPT) occurred and software should read the corresponding endpoint queue to determine the endpoint status. If the corresponding IOC bit is set in the Transfer Descriptor, then this bit will be set simultaneously with the USBINT. Writing a one clears the corresponding bit in this register. 
// This is only used in device mode.
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE2_SHIFT                       _MK_SHIFT_CONST(18)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE2_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE2_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE2_RANGE                       18:18
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE2_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE2_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE2_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE2_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE2_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE2_NOT_COMPLETE                        _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE2_COMPLETE                    _MK_ENUM_CONST(1)

// Endpoint Transmit Complete Event:
// Each bit indicates a transmit event (IN/INTERRUPT) occurred and software should read the corresponding endpoint queue to determine the endpoint status. If the corresponding IOC bit is set in the Transfer Descriptor, then this bit will be set simultaneously with the USBINT. Writing a one clears the corresponding bit in this register. 
// This is only used in device mode.
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE1_SHIFT                       _MK_SHIFT_CONST(17)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE1_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE1_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE1_RANGE                       17:17
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE1_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE1_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE1_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE1_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE1_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE1_NOT_COMPLETE                        _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE1_COMPLETE                    _MK_ENUM_CONST(1)

// Endpoint Transmit Complete Event:
// Each bit indicates a transmit event (IN/INTERRUPT) occurred and software should read the corresponding endpoint queue to determine the endpoint status. If the corresponding IOC bit is set in the Transfer Descriptor, then this bit will be set simultaneously with the USBINT. Writing a one clears the corresponding bit in this register. 
// This is only used in device mode.
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE0_SHIFT                       _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE0_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE0_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE0_RANGE                       16:16
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE0_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE0_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE0_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE0_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE0_NOT_COMPLETE                        _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ETCE0_COMPLETE                    _MK_ENUM_CONST(1)

// Reserved = 0
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_N_A2_SHIFT                        _MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_N_A2_FIELD                        (_MK_MASK_CONST(0x1fff) << USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_N_A2_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_N_A2_RANGE                        15:3
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_N_A2_WOFFSET                      0x0
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_N_A2_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_N_A2_DEFAULT_MASK                 _MK_MASK_CONST(0x1fff)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_N_A2_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_N_A2_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Endpoint Receive Complete Event:
// Each bit indicates a received event (OUT/SETUP) occurred and software should read the corresponding endpoint queue to determine the transfer status. If the corresponding IOC bit is set in the Transfer Descriptor, then this bit will be set simultaneously with the USBINT. Writing a one clears the corresponding bit in this register.
// This is only used in device mode.
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE2_SHIFT                       _MK_SHIFT_CONST(2)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE2_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE2_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE2_RANGE                       2:2
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE2_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE2_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE2_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE2_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE2_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE2_NOT_COMPLETE                        _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE2_COMPLETE                    _MK_ENUM_CONST(1)

// Endpoint Receive Complete Event:
// Each bit indicates a received event (OUT/SETUP) occurred and software should read the corresponding endpoint queue to determine the transfer status. If the corresponding IOC bit is set in the Transfer Descriptor, then this bit will be set simultaneously with the USBINT. Writing a one clears the corresponding bit in this register.
// This is only used in device mode.
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE1_SHIFT                       _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE1_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE1_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE1_RANGE                       1:1
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE1_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE1_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE1_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE1_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE1_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE1_NOT_COMPLETE                        _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE1_COMPLETE                    _MK_ENUM_CONST(1)

// Endpoint Receive Complete Event:
// Each bit indicates a received event (OUT/SETUP) occurred and software should read the corresponding endpoint queue to determine the transfer status. If the corresponding IOC bit is set in the Transfer Descriptor, then this bit will be set simultaneously with the USBINT. Writing a one clears the corresponding bit in this register.
// This is only used in device mode.
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE0_SHIFT                       _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE0_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE0_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE0_RANGE                       0:0
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE0_WOFFSET                     0x0
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE0_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE0_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE0_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE0_NOT_COMPLETE                        _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0_ERCE0_COMPLETE                    _MK_ENUM_CONST(1)

// USB2D Endpoint Control 0 Register

// Register USB2_CONTROLLER_USB2D_ENDPTCTRL0_0  
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0                      _MK_ADDR_CONST(0x1c0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_WORD_COUNT                   0x1
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RESET_VAL                    _MK_MASK_CONST(0x800080)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RESET_MASK                   _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_WRITE_MASK                   _MK_MASK_CONST(0x0)
// Reserved 
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A1_SHIFT                   _MK_SHIFT_CONST(24)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A1_FIELD                   (_MK_MASK_CONST(0xff) << USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A1_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A1_RANGE                   31:24
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A1_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A1_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A1_DEFAULT_MASK                    _MK_MASK_CONST(0xff)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A1_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A1_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// TX Endpoint Enable. Endpoint 0 is always  enabled. 
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXE_SHIFT                    _MK_SHIFT_CONST(23)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXE_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXE_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXE_RANGE                    23:23
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXE_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXE_DEFAULT                  _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXE_DISABLE                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXE_ENABLE                   _MK_ENUM_CONST(1)

// Reserved 
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A2_SHIFT                   _MK_SHIFT_CONST(20)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A2_FIELD                   (_MK_MASK_CONST(0x7) << USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A2_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A2_RANGE                   22:20
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A2_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A2_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A2_DEFAULT_MASK                    _MK_MASK_CONST(0x7)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A2_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A2_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// TX Endpoint Type. Endpoint0 is fixed as a Control Endpoint. 
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXT_SHIFT                    _MK_SHIFT_CONST(18)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXT_FIELD                    (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXT_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXT_RANGE                    19:18
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXT_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXT_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXT_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXT_CTRL                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXT_ISO                      _MK_ENUM_CONST(1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXT_BULK                     _MK_ENUM_CONST(2)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXT_INTR                     _MK_ENUM_CONST(3)

// Reserved 
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A3_SHIFT                   _MK_SHIFT_CONST(17)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A3_FIELD                   (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A3_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A3_RANGE                   17:17
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A3_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A3_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A3_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A3_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A3_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// TX Endpoint Stall: Software can write a one to this bit to force the  endpoint to return a STALL handshake to the Host. It will continue returning  STALL until the bit is cleared by software or it will automatically be  cleared upon receipt of a new SETUP request. 
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXS_SHIFT                    _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXS_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXS_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXS_RANGE                    16:16
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXS_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXS_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXS_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXS_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXS_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXS_EP_OK                    _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_TXS_EP_STALL                 _MK_ENUM_CONST(1)

// Reserved 
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A4_SHIFT                   _MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A4_FIELD                   (_MK_MASK_CONST(0xff) << USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A4_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A4_RANGE                   15:8
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A4_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A4_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A4_DEFAULT_MASK                    _MK_MASK_CONST(0xff)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A4_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A4_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

//  RX Endpoint Enable. Endpoint 0 is always  enabled. 
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXE_SHIFT                    _MK_SHIFT_CONST(7)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXE_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXE_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXE_RANGE                    7:7
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXE_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXE_DEFAULT                  _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXE_DISABLE                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXE_ENABLE                   _MK_ENUM_CONST(1)

// Reserved 
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A5_SHIFT                   _MK_SHIFT_CONST(4)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A5_FIELD                   (_MK_MASK_CONST(0x7) << USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A5_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A5_RANGE                   6:4
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A5_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A5_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A5_DEFAULT_MASK                    _MK_MASK_CONST(0x7)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A5_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A5_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// RX Endpoint Type. Endpoint 0 is fixed as a Control Endpoint. 
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXT_SHIFT                    _MK_SHIFT_CONST(2)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXT_FIELD                    (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXT_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXT_RANGE                    3:2
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXT_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXT_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXT_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXT_CTRL                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXT_ISO                      _MK_ENUM_CONST(1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXT_BULK                     _MK_ENUM_CONST(2)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXT_INTR                     _MK_ENUM_CONST(3)

// Reserved
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A6_SHIFT                   _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A6_FIELD                   (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A6_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A6_RANGE                   1:1
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A6_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A6_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A6_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A6_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_N_A6_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// RX Endpoint Stall: Software can write a one to this bit to force the  endpoint to return a STALL handshake to the Host. It will continue returning  STALL until the bit is cleared by software or it will automatically be  cleared upon receipt of a new SETUP request. 
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXS_SHIFT                    _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXS_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXS_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXS_RANGE                    0:0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXS_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXS_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXS_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXS_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXS_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXS_EP_OK                    _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL0_0_RXS_EP_STALL                 _MK_ENUM_CONST(1)

// USB2D Endpoint Control 1 Register

// Register USB2_CONTROLLER_USB2D_ENDPTCTRL1_0  
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0                      _MK_ADDR_CONST(0x1c4)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_WORD_COUNT                   0x1
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RESET_MASK                   _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_WRITE_MASK                   _MK_MASK_CONST(0xfffdfffd)
// Reserved = 0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A1_SHIFT                   _MK_SHIFT_CONST(24)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A1_FIELD                   (_MK_MASK_CONST(0xff) << USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A1_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A1_RANGE                   31:24
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A1_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A1_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A1_DEFAULT_MASK                    _MK_MASK_CONST(0xff)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A1_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A1_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// TX Endpoint Enable. An Endpoint should be enabled only after it has  been configured. 
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXE_SHIFT                    _MK_SHIFT_CONST(23)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXE_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXE_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXE_RANGE                    23:23
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXE_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXE_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXE_DISABLE                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXE_ENABLE                   _MK_ENUM_CONST(1)

// TX Data Toggle Reset: Whenever a configuration event is received for  this Endpoint software must write a one to this bit in order to synchronize  the data PIDs between the Host and device. 
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXR_SHIFT                    _MK_SHIFT_CONST(22)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXR_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXR_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXR_RANGE                    22:22
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXR_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXR_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXR_KEEP_GOING                       _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXR_RESET_PID_SEQ                    _MK_ENUM_CONST(1)

// TX Data Toggle Inhibit: This bit is only used for test and should always  be written as zero. Writing a one to this bit will cause this endpoint to  ignore the data toggle sequence and always transmit DATA0 for a data packet. 
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXI_SHIFT                    _MK_SHIFT_CONST(21)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXI_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXI_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXI_RANGE                    21:21
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXI_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXI_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXI_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXI_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXI_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXI_DIS_PID_SEQ                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXI_ENB_PID_SEQ                      _MK_ENUM_CONST(1)

// Reserved = 0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A2_SHIFT                   _MK_SHIFT_CONST(20)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A2_FIELD                   (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A2_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A2_RANGE                   20:20
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A2_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A2_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A2_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A2_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A2_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// TX Endpoint Type:
// 00 = Control    01 = Isochronous                10 = Bulk               11 = Interrupt
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXT_SHIFT                    _MK_SHIFT_CONST(18)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXT_FIELD                    (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXT_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXT_RANGE                    19:18
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXT_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXT_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXT_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXT_CTRL                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXT_ISO                      _MK_ENUM_CONST(1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXT_BULK                     _MK_ENUM_CONST(2)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXT_INTR                     _MK_ENUM_CONST(3)

// This is fixed to 0.
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXD_SHIFT                    _MK_SHIFT_CONST(17)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXD_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXD_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXD_RANGE                    17:17
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXD_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXD_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXD_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXD_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXD_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// TX Endpoint Stall: This bit will be set automatically upon receipt of  a SETUP request if this Endpoint is not configured as a Control Endpoint. It  will be cleared automatically upon receipt of a SETUP request if this  Endpoint is configured as a Control Endpoint. Software can write a one to  this bit to force the endpoint to return a STALL handshake to the Host. It  will continue to returning STALL until this bit is either cleared by software  or automatically cleared as above. 
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXS_SHIFT                    _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXS_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXS_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXS_RANGE                    16:16
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXS_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXS_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXS_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXS_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXS_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXS_EP_OK                    _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_TXS_EP_STALL                 _MK_ENUM_CONST(1)

// Reserved = 0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A3_SHIFT                   _MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A3_FIELD                   (_MK_MASK_CONST(0xff) << USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A3_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A3_RANGE                   15:8
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A3_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A3_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A3_DEFAULT_MASK                    _MK_MASK_CONST(0xff)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A3_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A3_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// RX Endpoint Enable. An Endpoint should be enabled only after it has  been configured. 
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXE_SHIFT                    _MK_SHIFT_CONST(7)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXE_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXE_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXE_RANGE                    7:7
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXE_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXE_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXE_DISABLE                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXE_ENABLE                   _MK_ENUM_CONST(1)

// RX Data Toggle Reset: Whenever a configuration event is received for  this Endpoint, software must write a one to this bit in order to synchronize  the data PIDs between the host and device. 
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXR_SHIFT                    _MK_SHIFT_CONST(6)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXR_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXR_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXR_RANGE                    6:6
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXR_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXR_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXR_KEEP_GOING                       _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXR_RESET_PID_SEQ                    _MK_ENUM_CONST(1)

// RX Data Toggle Inhibit: This bit is only used for test and should always  be written as zero. Writing a one to this bit will cause this endpoint to  ignore the data toggle sequence and always accept data packet regardless of  their data PID. 
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXI_SHIFT                    _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXI_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXI_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXI_RANGE                    5:5
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXI_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXI_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXI_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXI_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXI_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXI_DIS_PID_SEQ                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXI_ENB_PID_SEQ                      _MK_ENUM_CONST(1)

// Reserved = 0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A4_SHIFT                   _MK_SHIFT_CONST(4)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A4_FIELD                   (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A4_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A4_RANGE                   4:4
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A4_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A4_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A4_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A4_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_N_A4_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// RX Endpoint Type:
// 00 = Control    01 = Isochronous                10 = Bulk               11 = Interrupt
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXT_SHIFT                    _MK_SHIFT_CONST(2)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXT_FIELD                    (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXT_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXT_RANGE                    3:2
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXT_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXT_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXT_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXT_CTRL                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXT_ISO                      _MK_ENUM_CONST(1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXT_BULK                     _MK_ENUM_CONST(2)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXT_INTR                     _MK_ENUM_CONST(3)

// This is fixed to 0.
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXD_SHIFT                    _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXD_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXD_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXD_RANGE                    1:1
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXD_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXD_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXD_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXD_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXD_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// RX Endpoint Stall: This bit will be set automatically upon receipt of  a SETUP request if this Endpoint is not configured as a Control Endpoint. It  will be cleared automatically upon receipt a SETUP request if this Endpoint  is configured as a Control Endpoint, Software can write a one to this bit to  force the endpoint to return a STALL handshake to the Host. It will continue  to returning STALL until this bit is either cleared by software or  automatically cleared as above, 
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXS_SHIFT                    _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXS_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXS_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXS_RANGE                    0:0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXS_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXS_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXS_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXS_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXS_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXS_EP_OK                    _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL1_0_RXS_EP_STALL                 _MK_ENUM_CONST(1)

// USB2D Endpoint Control 2 Register

// Register USB2_CONTROLLER_USB2D_ENDPTCTRL2_0  
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0                      _MK_ADDR_CONST(0x1c8)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_WORD_COUNT                   0x1
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RESET_MASK                   _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_WRITE_MASK                   _MK_MASK_CONST(0xfffdfffd)
// Reserved = 0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A1_SHIFT                   _MK_SHIFT_CONST(24)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A1_FIELD                   (_MK_MASK_CONST(0xff) << USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A1_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A1_RANGE                   31:24
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A1_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A1_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A1_DEFAULT_MASK                    _MK_MASK_CONST(0xff)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A1_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A1_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// TX Endpoint Enable. An Endpoint should be enabled only after it has  been configured. 
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXE_SHIFT                    _MK_SHIFT_CONST(23)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXE_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXE_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXE_RANGE                    23:23
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXE_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXE_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXE_DISABLE                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXE_ENABLE                   _MK_ENUM_CONST(1)

// TX Data Toggle Reset: Whenever a configuration event is received for  this Endpoint software must write a one to this bit in order to synchronize  the data PIDs between the Host and device. 
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXR_SHIFT                    _MK_SHIFT_CONST(22)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXR_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXR_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXR_RANGE                    22:22
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXR_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXR_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXR_KEEP_GOING                       _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXR_RESET_PID_SEQ                    _MK_ENUM_CONST(1)

// TX Data Toggle Inhibit: This bit is only used for test and should always  be written as zero. Writing a one to this bit will cause this endpoint to  ignore the data toggle sequence and always transmit DATA0 for a data packet. 
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXI_SHIFT                    _MK_SHIFT_CONST(21)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXI_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXI_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXI_RANGE                    21:21
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXI_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXI_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXI_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXI_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXI_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXI_DIS_PID_SEQ                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXI_ENB_PID_SEQ                      _MK_ENUM_CONST(1)

// Reserved = 0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A2_SHIFT                   _MK_SHIFT_CONST(20)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A2_FIELD                   (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A2_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A2_RANGE                   20:20
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A2_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A2_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A2_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A2_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A2_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// TX Endpoint Type:
// 00 = Control    01 = Isochronous                10 = Bulk               11 = Interrupt
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXT_SHIFT                    _MK_SHIFT_CONST(18)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXT_FIELD                    (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXT_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXT_RANGE                    19:18
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXT_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXT_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXT_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXT_CTRL                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXT_ISO                      _MK_ENUM_CONST(1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXT_BULK                     _MK_ENUM_CONST(2)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXT_INTR                     _MK_ENUM_CONST(3)

// This is fixed to 0.
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXD_SHIFT                    _MK_SHIFT_CONST(17)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXD_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXD_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXD_RANGE                    17:17
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXD_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXD_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXD_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXD_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXD_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// TX Endpoint Stall: This bit will be set automatically upon receipt of  a SETUP request if this Endpoint is not configured as a Control Endpoint. It  will be cleared automatically upon receipt of a SETUP request if this  Endpoint is configured as a Control Endpoint. Software can write a one to  this bit to force the endpoint to return a STALL handshake to the Host. It  will continue to returning STALL until this bit is either cleared by software  or automatically cleared as above. 
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXS_SHIFT                    _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXS_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXS_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXS_RANGE                    16:16
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXS_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXS_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXS_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXS_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXS_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXS_EP_OK                    _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_TXS_EP_STALL                 _MK_ENUM_CONST(1)

// Reserved = 0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A3_SHIFT                   _MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A3_FIELD                   (_MK_MASK_CONST(0xff) << USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A3_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A3_RANGE                   15:8
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A3_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A3_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A3_DEFAULT_MASK                    _MK_MASK_CONST(0xff)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A3_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A3_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// RX Endpoint Enable. An Endpoint should be enabled only after it has  been configured. 
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXE_SHIFT                    _MK_SHIFT_CONST(7)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXE_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXE_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXE_RANGE                    7:7
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXE_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXE_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXE_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXE_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXE_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXE_DISABLE                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXE_ENABLE                   _MK_ENUM_CONST(1)

// RX Data Toggle Reset: Whenever a configuration event is received for  this Endpoint, software must write a one to this bit in order to synchronize  the data PIDs between the host and device. 
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXR_SHIFT                    _MK_SHIFT_CONST(6)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXR_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXR_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXR_RANGE                    6:6
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXR_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXR_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXR_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXR_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXR_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXR_KEEP_GOING                       _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXR_RESET_PID_SEQ                    _MK_ENUM_CONST(1)

// RX Data Toggle Inhibit: This bit is only used for test and should always  be written as zero. Writing a one to this bit will cause this endpoint to  ignore the data toggle sequence and always accept data packet regardless of  their data PID. 
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXI_SHIFT                    _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXI_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXI_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXI_RANGE                    5:5
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXI_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXI_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXI_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXI_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXI_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXI_DIS_PID_SEQ                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXI_ENB_PID_SEQ                      _MK_ENUM_CONST(1)

// Reserved = 0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A4_SHIFT                   _MK_SHIFT_CONST(4)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A4_FIELD                   (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A4_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A4_RANGE                   4:4
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A4_WOFFSET                 0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A4_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A4_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A4_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_N_A4_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// RX Endpoint Type:
// 00 = Control    01 = Isochronous                10 = Bulk               11 = Interrupt
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXT_SHIFT                    _MK_SHIFT_CONST(2)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXT_FIELD                    (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXT_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXT_RANGE                    3:2
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXT_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXT_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXT_DEFAULT_MASK                     _MK_MASK_CONST(0x3)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXT_CTRL                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXT_ISO                      _MK_ENUM_CONST(1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXT_BULK                     _MK_ENUM_CONST(2)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXT_INTR                     _MK_ENUM_CONST(3)

// This is fixed to 0.
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXD_SHIFT                    _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXD_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXD_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXD_RANGE                    1:1
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXD_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXD_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXD_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXD_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXD_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// RX Endpoint Stall: This bit will be set automatically upon receipt of  a SETUP request if this Endpoint is not configured as a Control Endpoint. It  will be cleared automatically upon receipt a SETUP request if this Endpoint  is configured as a Control Endpoint, Software can write a one to this bit to  force the endpoint to return a STALL handshake to the Host. It will continue  to returning STALL until this bit is either cleared by software or  automatically cleared as above.
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXS_SHIFT                    _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXS_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXS_SHIFT)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXS_RANGE                    0:0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXS_WOFFSET                  0x0
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXS_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXS_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXS_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXS_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXS_EP_OK                    _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_ENDPTCTRL2_0_RXS_EP_STALL                 _MK_ENUM_CONST(1)

// Only declaring the size as 1 word to reduce the size of the generated header file

// Ram USB2_TX_MEM_USB2_TX_MEM_0  
#define USB2_TX_MEM_USB2_TX_MEM_0                       _MK_ADDR_CONST(0x400)
#define USB2_TX_MEM_USB2_TX_MEM_0_WORD_COUNT                    0x1
#define USB2_TX_MEM_USB2_TX_MEM_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define USB2_TX_MEM_USB2_TX_MEM_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define USB2_TX_MEM_USB2_TX_MEM_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define USB2_TX_MEM_USB2_TX_MEM_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define USB2_TX_MEM_USB2_TX_MEM_0_READ_MASK                     _MK_MASK_CONST(0xffffffff)
#define USB2_TX_MEM_USB2_TX_MEM_0_WRITE_MASK                    _MK_MASK_CONST(0xffffffff)
// TX buffer memory
#define USB2_TX_MEM_USB2_TX_MEM_0_USB2_TX_MEM_SHIFT                     _MK_SHIFT_CONST(0)
#define USB2_TX_MEM_USB2_TX_MEM_0_USB2_TX_MEM_FIELD                     (_MK_MASK_CONST(0xffffffff) << USB2_TX_MEM_USB2_TX_MEM_0_USB2_TX_MEM_SHIFT)
#define USB2_TX_MEM_USB2_TX_MEM_0_USB2_TX_MEM_RANGE                     31:0
#define USB2_TX_MEM_USB2_TX_MEM_0_USB2_TX_MEM_WOFFSET                   0x0
#define USB2_TX_MEM_USB2_TX_MEM_0_USB2_TX_MEM_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_TX_MEM_USB2_TX_MEM_0_USB2_TX_MEM_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_TX_MEM_USB2_TX_MEM_0_USB2_TX_MEM_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_TX_MEM_USB2_TX_MEM_0_USB2_TX_MEM_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Ram USB2_TX_MEM_USB2_TX_MEM  
#define USB2_TX_MEM_USB2_TX_MEM                 _MK_ADDR_CONST(0x400)
#define USB2_TX_MEM_USB2_TX_MEM_WORD_COUNT                      0x1
#define USB2_TX_MEM_USB2_TX_MEM_RESET_VAL                       _MK_MASK_CONST(0x0)
#define USB2_TX_MEM_USB2_TX_MEM_RESET_MASK                      _MK_MASK_CONST(0x0)
#define USB2_TX_MEM_USB2_TX_MEM_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define USB2_TX_MEM_USB2_TX_MEM_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define USB2_TX_MEM_USB2_TX_MEM_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define USB2_TX_MEM_USB2_TX_MEM_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// TX buffer memory
#define USB2_TX_MEM_USB2_TX_MEM_USB2_TX_MEM_SHIFT                       _MK_SHIFT_CONST(0)
#define USB2_TX_MEM_USB2_TX_MEM_USB2_TX_MEM_FIELD                       (_MK_MASK_CONST(0xffffffff) << USB2_TX_MEM_USB2_TX_MEM_USB2_TX_MEM_SHIFT)
#define USB2_TX_MEM_USB2_TX_MEM_USB2_TX_MEM_RANGE                       31:0
#define USB2_TX_MEM_USB2_TX_MEM_USB2_TX_MEM_WOFFSET                     0x0
#define USB2_TX_MEM_USB2_TX_MEM_USB2_TX_MEM_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_TX_MEM_USB2_TX_MEM_USB2_TX_MEM_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define USB2_TX_MEM_USB2_TX_MEM_USB2_TX_MEM_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_TX_MEM_USB2_TX_MEM_USB2_TX_MEM_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Only declaring the size as 1 word to reduce the size of the generated header file

// Ram USB2_RX_MEM_USB2_RX_MEM_0  
#define USB2_RX_MEM_USB2_RX_MEM_0                       _MK_ADDR_CONST(0x800)
#define USB2_RX_MEM_USB2_RX_MEM_0_WORD_COUNT                    0x1
#define USB2_RX_MEM_USB2_RX_MEM_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define USB2_RX_MEM_USB2_RX_MEM_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define USB2_RX_MEM_USB2_RX_MEM_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define USB2_RX_MEM_USB2_RX_MEM_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define USB2_RX_MEM_USB2_RX_MEM_0_READ_MASK                     _MK_MASK_CONST(0xffffffff)
#define USB2_RX_MEM_USB2_RX_MEM_0_WRITE_MASK                    _MK_MASK_CONST(0xffffffff)
// RX buffer memory
#define USB2_RX_MEM_USB2_RX_MEM_0_USB2_RX_MEM_SHIFT                     _MK_SHIFT_CONST(0)
#define USB2_RX_MEM_USB2_RX_MEM_0_USB2_RX_MEM_FIELD                     (_MK_MASK_CONST(0xffffffff) << USB2_RX_MEM_USB2_RX_MEM_0_USB2_RX_MEM_SHIFT)
#define USB2_RX_MEM_USB2_RX_MEM_0_USB2_RX_MEM_RANGE                     31:0
#define USB2_RX_MEM_USB2_RX_MEM_0_USB2_RX_MEM_WOFFSET                   0x0
#define USB2_RX_MEM_USB2_RX_MEM_0_USB2_RX_MEM_DEFAULT                   _MK_MASK_CONST(0x0)
#define USB2_RX_MEM_USB2_RX_MEM_0_USB2_RX_MEM_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_RX_MEM_USB2_RX_MEM_0_USB2_RX_MEM_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define USB2_RX_MEM_USB2_RX_MEM_0_USB2_RX_MEM_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


// Ram USB2_RX_MEM_USB2_RX_MEM  
#define USB2_RX_MEM_USB2_RX_MEM                 _MK_ADDR_CONST(0x800)
#define USB2_RX_MEM_USB2_RX_MEM_WORD_COUNT                      0x1
#define USB2_RX_MEM_USB2_RX_MEM_RESET_VAL                       _MK_MASK_CONST(0x0)
#define USB2_RX_MEM_USB2_RX_MEM_RESET_MASK                      _MK_MASK_CONST(0x0)
#define USB2_RX_MEM_USB2_RX_MEM_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define USB2_RX_MEM_USB2_RX_MEM_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define USB2_RX_MEM_USB2_RX_MEM_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define USB2_RX_MEM_USB2_RX_MEM_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// RX buffer memory
#define USB2_RX_MEM_USB2_RX_MEM_USB2_RX_MEM_SHIFT                       _MK_SHIFT_CONST(0)
#define USB2_RX_MEM_USB2_RX_MEM_USB2_RX_MEM_FIELD                       (_MK_MASK_CONST(0xffffffff) << USB2_RX_MEM_USB2_RX_MEM_USB2_RX_MEM_SHIFT)
#define USB2_RX_MEM_USB2_RX_MEM_USB2_RX_MEM_RANGE                       31:0
#define USB2_RX_MEM_USB2_RX_MEM_USB2_RX_MEM_WOFFSET                     0x0
#define USB2_RX_MEM_USB2_RX_MEM_USB2_RX_MEM_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_RX_MEM_USB2_RX_MEM_USB2_RX_MEM_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define USB2_RX_MEM_USB2_RX_MEM_USB2_RX_MEM_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_RX_MEM_USB2_RX_MEM_USB2_RX_MEM_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// USB2D Queue Head for OUT endpoint 0

// Register USB2_QH_USB2D_QH_EP_0_OUT_0  
#define USB2_QH_USB2D_QH_EP_0_OUT_0                     _MK_ADDR_CONST(0x1000)
#define USB2_QH_USB2D_QH_EP_0_OUT_0_WORD_COUNT                  0x1
#define USB2_QH_USB2D_QH_EP_0_OUT_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_0_OUT_0_RESET_MASK                  _MK_MASK_CONST(0xffffffff)
#define USB2_QH_USB2D_QH_EP_0_OUT_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_0_OUT_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_0_OUT_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define USB2_QH_USB2D_QH_EP_0_OUT_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Queue Head for OUT endpoint 0 
// This is used to store a local Queue Head data structure for either device mode or host mode.
// In device mode, it holds the Queue Head for OUT endpoint 0.
#define USB2_QH_USB2D_QH_EP_0_OUT_0_USB2D_QH_SHIFT                      _MK_SHIFT_CONST(0)
#define USB2_QH_USB2D_QH_EP_0_OUT_0_USB2D_QH_FIELD                      (_MK_MASK_CONST(0xffffffff) << USB2_QH_USB2D_QH_EP_0_OUT_0_USB2D_QH_SHIFT)
#define USB2_QH_USB2D_QH_EP_0_OUT_0_USB2D_QH_RANGE                      31:0
#define USB2_QH_USB2D_QH_EP_0_OUT_0_USB2D_QH_WOFFSET                    0x0
#define USB2_QH_USB2D_QH_EP_0_OUT_0_USB2D_QH_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_0_OUT_0_USB2D_QH_DEFAULT_MASK                       _MK_MASK_CONST(0xffffffff)
#define USB2_QH_USB2D_QH_EP_0_OUT_0_USB2D_QH_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_0_OUT_0_USB2D_QH_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// USB2D Queue Head for IN endpoint 0

// Register USB2_QH_USB2D_QH_EP_0_IN_0  
#define USB2_QH_USB2D_QH_EP_0_IN_0                      _MK_ADDR_CONST(0x1040)
#define USB2_QH_USB2D_QH_EP_0_IN_0_WORD_COUNT                   0x1
#define USB2_QH_USB2D_QH_EP_0_IN_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_0_IN_0_RESET_MASK                   _MK_MASK_CONST(0xffffffff)
#define USB2_QH_USB2D_QH_EP_0_IN_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_0_IN_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_0_IN_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define USB2_QH_USB2D_QH_EP_0_IN_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
// Queue Head for IN endpoint 0. 
// This is used to store a local Queue Head data structure for either device mode or host mode.
// In device mode, it holds the Queue Head for IN endpoint 0.
#define USB2_QH_USB2D_QH_EP_0_IN_0_USB2D_QH_SHIFT                       _MK_SHIFT_CONST(0)
#define USB2_QH_USB2D_QH_EP_0_IN_0_USB2D_QH_FIELD                       (_MK_MASK_CONST(0xffffffff) << USB2_QH_USB2D_QH_EP_0_IN_0_USB2D_QH_SHIFT)
#define USB2_QH_USB2D_QH_EP_0_IN_0_USB2D_QH_RANGE                       31:0
#define USB2_QH_USB2D_QH_EP_0_IN_0_USB2D_QH_WOFFSET                     0x0
#define USB2_QH_USB2D_QH_EP_0_IN_0_USB2D_QH_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_0_IN_0_USB2D_QH_DEFAULT_MASK                        _MK_MASK_CONST(0xffffffff)
#define USB2_QH_USB2D_QH_EP_0_IN_0_USB2D_QH_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_0_IN_0_USB2D_QH_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// USB2D Queue Head for OUT endpoint 1

// Register USB2_QH_USB2D_QH_EP_1_OUT_0  
#define USB2_QH_USB2D_QH_EP_1_OUT_0                     _MK_ADDR_CONST(0x1080)
#define USB2_QH_USB2D_QH_EP_1_OUT_0_WORD_COUNT                  0x1
#define USB2_QH_USB2D_QH_EP_1_OUT_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_1_OUT_0_RESET_MASK                  _MK_MASK_CONST(0xffffffff)
#define USB2_QH_USB2D_QH_EP_1_OUT_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_1_OUT_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_1_OUT_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define USB2_QH_USB2D_QH_EP_1_OUT_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Queue Head for OUT endpoint 1 
// This is used to store a local Queue Head data structure for either device mode or host mode.
// In device mode, it holds the Queue Head for OUT endpoint 1.
#define USB2_QH_USB2D_QH_EP_1_OUT_0_USB2D_QH_SHIFT                      _MK_SHIFT_CONST(0)
#define USB2_QH_USB2D_QH_EP_1_OUT_0_USB2D_QH_FIELD                      (_MK_MASK_CONST(0xffffffff) << USB2_QH_USB2D_QH_EP_1_OUT_0_USB2D_QH_SHIFT)
#define USB2_QH_USB2D_QH_EP_1_OUT_0_USB2D_QH_RANGE                      31:0
#define USB2_QH_USB2D_QH_EP_1_OUT_0_USB2D_QH_WOFFSET                    0x0
#define USB2_QH_USB2D_QH_EP_1_OUT_0_USB2D_QH_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_1_OUT_0_USB2D_QH_DEFAULT_MASK                       _MK_MASK_CONST(0xffffffff)
#define USB2_QH_USB2D_QH_EP_1_OUT_0_USB2D_QH_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_1_OUT_0_USB2D_QH_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// USB2D Queue Head for IN endpoint 1

// Register USB2_QH_USB2D_QH_EP_1_IN_0  
#define USB2_QH_USB2D_QH_EP_1_IN_0                      _MK_ADDR_CONST(0x10c0)
#define USB2_QH_USB2D_QH_EP_1_IN_0_WORD_COUNT                   0x1
#define USB2_QH_USB2D_QH_EP_1_IN_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_1_IN_0_RESET_MASK                   _MK_MASK_CONST(0xffffffff)
#define USB2_QH_USB2D_QH_EP_1_IN_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_1_IN_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_1_IN_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define USB2_QH_USB2D_QH_EP_1_IN_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
// Queue Head for IN endpoint 1. 
// This is used to store a local Queue Head data structure for either device mode or host mode.
// In device mode, it holds the Queue Head for IN endpoint 1.
#define USB2_QH_USB2D_QH_EP_1_IN_0_USB2D_QH_SHIFT                       _MK_SHIFT_CONST(0)
#define USB2_QH_USB2D_QH_EP_1_IN_0_USB2D_QH_FIELD                       (_MK_MASK_CONST(0xffffffff) << USB2_QH_USB2D_QH_EP_1_IN_0_USB2D_QH_SHIFT)
#define USB2_QH_USB2D_QH_EP_1_IN_0_USB2D_QH_RANGE                       31:0
#define USB2_QH_USB2D_QH_EP_1_IN_0_USB2D_QH_WOFFSET                     0x0
#define USB2_QH_USB2D_QH_EP_1_IN_0_USB2D_QH_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_1_IN_0_USB2D_QH_DEFAULT_MASK                        _MK_MASK_CONST(0xffffffff)
#define USB2_QH_USB2D_QH_EP_1_IN_0_USB2D_QH_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_1_IN_0_USB2D_QH_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// USB2D Queue Head for OUT endpoint 2

// Register USB2_QH_USB2D_QH_EP_2_OUT_0  
#define USB2_QH_USB2D_QH_EP_2_OUT_0                     _MK_ADDR_CONST(0x1100)
#define USB2_QH_USB2D_QH_EP_2_OUT_0_WORD_COUNT                  0x1
#define USB2_QH_USB2D_QH_EP_2_OUT_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_2_OUT_0_RESET_MASK                  _MK_MASK_CONST(0xffffffff)
#define USB2_QH_USB2D_QH_EP_2_OUT_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_2_OUT_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_2_OUT_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define USB2_QH_USB2D_QH_EP_2_OUT_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Queue Head for OUT endpoint 2 
// This is used to store a local Queue Head data structure for either device mode or host mode.
// In device mode, it holds the Queue Head for OUT endpoint 2.
#define USB2_QH_USB2D_QH_EP_2_OUT_0_USB2D_QH_SHIFT                      _MK_SHIFT_CONST(0)
#define USB2_QH_USB2D_QH_EP_2_OUT_0_USB2D_QH_FIELD                      (_MK_MASK_CONST(0xffffffff) << USB2_QH_USB2D_QH_EP_2_OUT_0_USB2D_QH_SHIFT)
#define USB2_QH_USB2D_QH_EP_2_OUT_0_USB2D_QH_RANGE                      31:0
#define USB2_QH_USB2D_QH_EP_2_OUT_0_USB2D_QH_WOFFSET                    0x0
#define USB2_QH_USB2D_QH_EP_2_OUT_0_USB2D_QH_DEFAULT                    _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_2_OUT_0_USB2D_QH_DEFAULT_MASK                       _MK_MASK_CONST(0xffffffff)
#define USB2_QH_USB2D_QH_EP_2_OUT_0_USB2D_QH_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_2_OUT_0_USB2D_QH_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// USB2D Queue Head for IN endpoint 2

// Register USB2_QH_USB2D_QH_EP_2_IN_0  
#define USB2_QH_USB2D_QH_EP_2_IN_0                      _MK_ADDR_CONST(0x1140)
#define USB2_QH_USB2D_QH_EP_2_IN_0_WORD_COUNT                   0x1
#define USB2_QH_USB2D_QH_EP_2_IN_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_2_IN_0_RESET_MASK                   _MK_MASK_CONST(0xffffffff)
#define USB2_QH_USB2D_QH_EP_2_IN_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_2_IN_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_2_IN_0_READ_MASK                    _MK_MASK_CONST(0xffffffff)
#define USB2_QH_USB2D_QH_EP_2_IN_0_WRITE_MASK                   _MK_MASK_CONST(0xffffffff)
// Queue Head for IN endpoint 2. 
// This is used to store a local Queue Head data structure for either device mode or host mode.
// In device mode, it holds the Queue Head for IN endpoint 2.
#define USB2_QH_USB2D_QH_EP_2_IN_0_USB2D_QH_SHIFT                       _MK_SHIFT_CONST(0)
#define USB2_QH_USB2D_QH_EP_2_IN_0_USB2D_QH_FIELD                       (_MK_MASK_CONST(0xffffffff) << USB2_QH_USB2D_QH_EP_2_IN_0_USB2D_QH_SHIFT)
#define USB2_QH_USB2D_QH_EP_2_IN_0_USB2D_QH_RANGE                       31:0
#define USB2_QH_USB2D_QH_EP_2_IN_0_USB2D_QH_WOFFSET                     0x0
#define USB2_QH_USB2D_QH_EP_2_IN_0_USB2D_QH_DEFAULT                     _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_2_IN_0_USB2D_QH_DEFAULT_MASK                        _MK_MASK_CONST(0xffffffff)
#define USB2_QH_USB2D_QH_EP_2_IN_0_USB2D_QH_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define USB2_QH_USB2D_QH_EP_2_IN_0_USB2D_QH_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Packet USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_SIZE 32

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_MULT_SHIFT                    _MK_SHIFT_CONST(30)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_MULT_FIELD                    (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_MULT_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_MULT_RANGE                    _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(30)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_MULT_ROW                      0
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_MULT_NON_ISO_IS_0                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_MULT_MULTI_1                  _MK_ENUM_CONST(1)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_MULT_MULT_2                   _MK_ENUM_CONST(2)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_MULT_MULTI_3                  _MK_ENUM_CONST(3)

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_ZLT_SHIFT                     _MK_SHIFT_CONST(29)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_ZLT_FIELD                     (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_ZLT_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_ZLT_RANGE                     _MK_SHIFT_CONST(29):_MK_SHIFT_CONST(29)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_ZLT_ROW                       0
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_ZLT_ZERO_LENGTH_TERM_ENABLED                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_ZLT_ZERO_LENGTH_TERM_DISABLED                 _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED0_0_SHIFT                     _MK_SHIFT_CONST(27)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED0_0_FIELD                     (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED0_0_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED0_0_RANGE                     _MK_SHIFT_CONST(28):_MK_SHIFT_CONST(27)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED0_0_ROW                       0

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_MAX_PACKET_LENGTH_SHIFT                       _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_MAX_PACKET_LENGTH_FIELD                       (_MK_MASK_CONST(0x7ff) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_MAX_PACKET_LENGTH_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_MAX_PACKET_LENGTH_RANGE                       _MK_SHIFT_CONST(26):_MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_MAX_PACKET_LENGTH_ROW                 0

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_IOS_SHIFT                     _MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_IOS_FIELD                     (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_IOS_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_IOS_RANGE                     _MK_SHIFT_CONST(15):_MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_IOS_ROW                       0
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_IOS_DISABLE                   _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_IOS_ENABLE                    _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED0_1_SHIFT                     _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED0_1_FIELD                     (_MK_MASK_CONST(0x7fff) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED0_1_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED0_1_RANGE                     _MK_SHIFT_CONST(14):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED0_1_ROW                       0

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_CURRENT_DTD_PTR_SHIFT                 _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_CURRENT_DTD_PTR_FIELD                 (_MK_MASK_CONST(0x7ffffff) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_CURRENT_DTD_PTR_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_CURRENT_DTD_PTR_RANGE                 _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_CURRENT_DTD_PTR_ROW                   1

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED1_0_SHIFT                     _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED1_0_FIELD                     (_MK_MASK_CONST(0x1f) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED1_0_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED1_0_RANGE                     _MK_SHIFT_CONST(4):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED1_0_ROW                       1

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_NEXT_DTD_PTR_SHIFT                    _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_NEXT_DTD_PTR_FIELD                    (_MK_MASK_CONST(0x7ffffff) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_NEXT_DTD_PTR_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_NEXT_DTD_PTR_RANGE                    _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_NEXT_DTD_PTR_ROW                      2

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED2_0_SHIFT                     _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED2_0_FIELD                     (_MK_MASK_CONST(0xf) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED2_0_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED2_0_RANGE                     _MK_SHIFT_CONST(4):_MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED2_0_ROW                       2

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_TERMINATE_SHIFT                       _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_TERMINATE_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_TERMINATE_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_TERMINATE_RANGE                       _MK_SHIFT_CONST(0):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_TERMINATE_ROW                 2
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_TERMINATE_CLEAR                       _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_TERMINATE_SET                 _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_TOTAL_BYTES_SHIFT                     _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_TOTAL_BYTES_FIELD                     (_MK_MASK_CONST(0xffff) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_TOTAL_BYTES_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_TOTAL_BYTES_RANGE                     _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_TOTAL_BYTES_ROW                       3

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_IOC_SHIFT                     _MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_IOC_FIELD                     (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_IOC_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_IOC_RANGE                     _MK_SHIFT_CONST(15):_MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_IOC_ROW                       3
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_IOC_DISABLE                   _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_IOC_ENABLE                    _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED3_0_SHIFT                     _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED3_0_FIELD                     (_MK_MASK_CONST(0x7) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED3_0_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED3_0_RANGE                     _MK_SHIFT_CONST(14):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED3_0_ROW                       3

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_MULTIPLIER_OVERRIDE_SHIFT                     _MK_SHIFT_CONST(10)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_MULTIPLIER_OVERRIDE_FIELD                     (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_MULTIPLIER_OVERRIDE_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_MULTIPLIER_OVERRIDE_RANGE                     _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(10)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_MULTIPLIER_OVERRIDE_ROW                       3
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_MULTIPLIER_OVERRIDE_DISABLE                   _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_MULTIPLIER_OVERRIDE_ENABLE                    _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED3_1_SHIFT                     _MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED3_1_FIELD                     (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED3_1_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED3_1_RANGE                     _MK_SHIFT_CONST(9):_MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED3_1_ROW                       3

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_ACTIVE_SHIFT                  _MK_SHIFT_CONST(7)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_ACTIVE_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_ACTIVE_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_ACTIVE_RANGE                  _MK_SHIFT_CONST(7):_MK_SHIFT_CONST(7)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_ACTIVE_ROW                    3
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_ACTIVE_CLEAR                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_ACTIVE_SET                    _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_HALTED_SHIFT                  _MK_SHIFT_CONST(6)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_HALTED_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_HALTED_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_HALTED_RANGE                  _MK_SHIFT_CONST(6):_MK_SHIFT_CONST(6)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_HALTED_ROW                    3
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_HALTED_CLEAR                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_HALTED_SET                    _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_DATA_BUFFER_ERROR_SHIFT                       _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_DATA_BUFFER_ERROR_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_DATA_BUFFER_ERROR_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_DATA_BUFFER_ERROR_RANGE                       _MK_SHIFT_CONST(5):_MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_DATA_BUFFER_ERROR_ROW                 3
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_DATA_BUFFER_ERROR_CLEAR                       _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_DATA_BUFFER_ERROR_SET                 _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED3_2_SHIFT                     _MK_SHIFT_CONST(4)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED3_2_FIELD                     (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED3_2_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED3_2_RANGE                     _MK_SHIFT_CONST(4):_MK_SHIFT_CONST(4)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED3_2_ROW                       3

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_TRANSACTION_ERROR_SHIFT                       _MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_TRANSACTION_ERROR_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_TRANSACTION_ERROR_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_TRANSACTION_ERROR_RANGE                       _MK_SHIFT_CONST(3):_MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_TRANSACTION_ERROR_ROW                 3
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_TRANSACTION_ERROR_CLEAR                       _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_TRANSACTION_ERROR_SET                 _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED3_3_SHIFT                     _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED3_3_FIELD                     (_MK_MASK_CONST(0x7) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED3_3_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED3_3_RANGE                     _MK_SHIFT_CONST(2):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED3_3_ROW                       3

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_PTR_PAGE0_SHIFT                   _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_PTR_PAGE0_FIELD                   (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_PTR_PAGE0_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_PTR_PAGE0_RANGE                   _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_PTR_PAGE0_ROW                     4

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_OFFSET_SHIFT                      _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_OFFSET_FIELD                      (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_OFFSET_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_OFFSET_RANGE                      _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_OFFSET_ROW                        4

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_PTR_PAGE1_SHIFT                   _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_PTR_PAGE1_FIELD                   (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_PTR_PAGE1_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_PTR_PAGE1_RANGE                   _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_PTR_PAGE1_ROW                     5

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED5_0_SHIFT                     _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED5_0_FIELD                     (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED5_0_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED5_0_RANGE                     _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED5_0_ROW                       5

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_PTR_PAGE2_SHIFT                   _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_PTR_PAGE2_FIELD                   (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_PTR_PAGE2_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_PTR_PAGE2_RANGE                   _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_PTR_PAGE2_ROW                     6

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED6_0_SHIFT                     _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED6_0_FIELD                     (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED6_0_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED6_0_RANGE                     _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED6_0_ROW                       6

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_PTR_PAGE3_SHIFT                   _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_PTR_PAGE3_FIELD                   (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_PTR_PAGE3_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_PTR_PAGE3_RANGE                   _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_PTR_PAGE3_ROW                     7

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED7_0_SHIFT                     _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED7_0_FIELD                     (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED7_0_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED7_0_RANGE                     _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED7_0_ROW                       7

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_PTR_PAGE4_SHIFT                   _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_PTR_PAGE4_FIELD                   (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_PTR_PAGE4_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_PTR_PAGE4_RANGE                   _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_BUF_PTR_PAGE4_ROW                     8

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED8_0_SHIFT                     _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED8_0_FIELD                     (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED8_0_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED8_0_RANGE                     _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED8_0_ROW                       8

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED9_0_SHIFT                     _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED9_0_FIELD                     (_MK_MASK_CONST(0xffffffff) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED9_0_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED9_0_RANGE                     _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_RESERVED9_0_ROW                       9

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_SETUP_BUF_BYTES3_0_SHIFT                      _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_SETUP_BUF_BYTES3_0_FIELD                      (_MK_MASK_CONST(0xffffffff) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_SETUP_BUF_BYTES3_0_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_SETUP_BUF_BYTES3_0_RANGE                      _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_SETUP_BUF_BYTES3_0_ROW                        10

#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_SETUP_BUF_BYTES7_4_SHIFT                      _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_SETUP_BUF_BYTES7_4_FIELD                      (_MK_MASK_CONST(0xffffffff) << USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_SETUP_BUF_BYTES7_4_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_SETUP_BUF_BYTES7_4_RANGE                      _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_QUEUE_HEAD_0_SETUP_BUF_BYTES7_4_ROW                        11


// Packet USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_SIZE 32

#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_NEXT_DTD_PTR_SHIFT                   _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_NEXT_DTD_PTR_FIELD                   (_MK_MASK_CONST(0x7ffffff) << USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_NEXT_DTD_PTR_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_NEXT_DTD_PTR_RANGE                   _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_NEXT_DTD_PTR_ROW                     0

#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED2_0_SHIFT                    _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED2_0_FIELD                    (_MK_MASK_CONST(0xf) << USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED2_0_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED2_0_RANGE                    _MK_SHIFT_CONST(4):_MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED2_0_ROW                      0

#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_TERMINATE_SHIFT                      _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_TERMINATE_FIELD                      (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_TERMINATE_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_TERMINATE_RANGE                      _MK_SHIFT_CONST(0):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_TERMINATE_ROW                        0
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_TERMINATE_CLEAR                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_TERMINATE_SET                        _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_TOTAL_BYTES_SHIFT                    _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_TOTAL_BYTES_FIELD                    (_MK_MASK_CONST(0xffff) << USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_TOTAL_BYTES_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_TOTAL_BYTES_RANGE                    _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_TOTAL_BYTES_ROW                      1

#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_IOC_SHIFT                    _MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_IOC_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_IOC_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_IOC_RANGE                    _MK_SHIFT_CONST(15):_MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_IOC_ROW                      1
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_IOC_DISABLE                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_IOC_ENABLE                   _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED3_0_SHIFT                    _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED3_0_FIELD                    (_MK_MASK_CONST(0x7) << USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED3_0_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED3_0_RANGE                    _MK_SHIFT_CONST(14):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED3_0_ROW                      1

#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_MULTIPLIER_OVERRIDE_SHIFT                    _MK_SHIFT_CONST(10)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_MULTIPLIER_OVERRIDE_FIELD                    (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_MULTIPLIER_OVERRIDE_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_MULTIPLIER_OVERRIDE_RANGE                    _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(10)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_MULTIPLIER_OVERRIDE_ROW                      1
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_MULTIPLIER_OVERRIDE_DISABLE                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_MULTIPLIER_OVERRIDE_ENABLE                   _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED3_1_SHIFT                    _MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED3_1_FIELD                    (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED3_1_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED3_1_RANGE                    _MK_SHIFT_CONST(9):_MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED3_1_ROW                      1

#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_ACTIVE_SHIFT                 _MK_SHIFT_CONST(7)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_ACTIVE_FIELD                 (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_ACTIVE_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_ACTIVE_RANGE                 _MK_SHIFT_CONST(7):_MK_SHIFT_CONST(7)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_ACTIVE_ROW                   1
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_ACTIVE_CLEAR                 _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_ACTIVE_SET                   _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_HALTED_SHIFT                 _MK_SHIFT_CONST(6)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_HALTED_FIELD                 (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_HALTED_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_HALTED_RANGE                 _MK_SHIFT_CONST(6):_MK_SHIFT_CONST(6)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_HALTED_ROW                   1
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_HALTED_CLEAR                 _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_HALTED_SET                   _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_SHIFT                      _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_FIELD                      (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_RANGE                      _MK_SHIFT_CONST(5):_MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_ROW                        1
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_CLEAR                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_SET                        _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED3_2_SHIFT                    _MK_SHIFT_CONST(4)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED3_2_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED3_2_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED3_2_RANGE                    _MK_SHIFT_CONST(4):_MK_SHIFT_CONST(4)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED3_2_ROW                      1

#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_SHIFT                      _MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_FIELD                      (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_RANGE                      _MK_SHIFT_CONST(3):_MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_ROW                        1
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_CLEAR                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_SET                        _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED3_3_SHIFT                    _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED3_3_FIELD                    (_MK_MASK_CONST(0x7) << USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED3_3_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED3_3_RANGE                    _MK_SHIFT_CONST(2):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED3_3_ROW                      1

#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE0_SHIFT                  _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE0_FIELD                  (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE0_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE0_RANGE                  _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE0_ROW                    2

#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_OFFSET_SHIFT                     _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_OFFSET_FIELD                     (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_OFFSET_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_OFFSET_RANGE                     _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_OFFSET_ROW                       2

#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE1_SHIFT                  _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE1_FIELD                  (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE1_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE1_RANGE                  _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE1_ROW                    3

#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED5_0_SHIFT                    _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED5_0_FIELD                    (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED5_0_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED5_0_RANGE                    _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED5_0_ROW                      3

#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE2_SHIFT                  _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE2_FIELD                  (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE2_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE2_RANGE                  _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE2_ROW                    4

#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED6_0_SHIFT                    _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED6_0_FIELD                    (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED6_0_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED6_0_RANGE                    _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED6_0_ROW                      4

#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE3_SHIFT                  _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE3_FIELD                  (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE3_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE3_RANGE                  _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE3_ROW                    5

#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED7_0_SHIFT                    _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED7_0_FIELD                    (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED7_0_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED7_0_RANGE                    _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED7_0_ROW                      5

#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE4_SHIFT                  _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE4_FIELD                  (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE4_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE4_RANGE                  _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE4_ROW                    6

#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED8_0_SHIFT                    _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED8_0_FIELD                    (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED8_0_SHIFT)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED8_0_RANGE                    _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_DEVICE_TRANSFER_DESCRIPTOR_0_RESERVED8_0_ROW                      6


// Packet USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_SIZE 32

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_QUEUE_HEAD_HORIZONTAL_LINK_PTR_SHIFT                    _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_QUEUE_HEAD_HORIZONTAL_LINK_PTR_FIELD                    (_MK_MASK_CONST(0x7ffffff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_QUEUE_HEAD_HORIZONTAL_LINK_PTR_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_QUEUE_HEAD_HORIZONTAL_LINK_PTR_RANGE                    _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_QUEUE_HEAD_HORIZONTAL_LINK_PTR_ROW                      0

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED0_0_SHIFT                       _MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED0_0_FIELD                       (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED0_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED0_0_RANGE                       _MK_SHIFT_CONST(4):_MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED0_0_ROW                 0

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_QH_ITD_TYPE_SHIFT                       _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_QH_ITD_TYPE_FIELD                       (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_QH_ITD_TYPE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_QH_ITD_TYPE_RANGE                       _MK_SHIFT_CONST(2):_MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_QH_ITD_TYPE_ROW                 0
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_QH_ITD_TYPE_ITD                 _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_QH_ITD_TYPE_QH                  _MK_ENUM_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_QH_ITD_TYPE_SITD                        _MK_ENUM_CONST(2)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_QH_ITD_TYPE_FSTN                        _MK_ENUM_CONST(3)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_QH_TERMINATE_SHIFT                      _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_QH_TERMINATE_FIELD                      (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_QH_TERMINATE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_QH_TERMINATE_RANGE                      _MK_SHIFT_CONST(0):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_QH_TERMINATE_ROW                        0
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_QH_TERMINATE_VALID_QH_PTR                       _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_QH_TERMINATE_INVALID_QH_PTR                     _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_NAK_CNT_RL_SHIFT                        _MK_SHIFT_CONST(28)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_NAK_CNT_RL_FIELD                        (_MK_MASK_CONST(0xf) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_NAK_CNT_RL_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_NAK_CNT_RL_RANGE                        _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(28)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_NAK_CNT_RL_ROW                  1

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_CTRL_EP_FLAG_SHIFT                      _MK_SHIFT_CONST(27)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_CTRL_EP_FLAG_FIELD                      (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_CTRL_EP_FLAG_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_CTRL_EP_FLAG_RANGE                      _MK_SHIFT_CONST(27):_MK_SHIFT_CONST(27)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_CTRL_EP_FLAG_ROW                        1
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_CTRL_EP_FLAG_NOT_CTRL_EP                        _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_CTRL_EP_FLAG_CTRP_EP                    _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_MAX_PKT_LENGTH_SHIFT                    _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_MAX_PKT_LENGTH_FIELD                    (_MK_MASK_CONST(0x7ff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_MAX_PKT_LENGTH_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_MAX_PKT_LENGTH_RANGE                    _MK_SHIFT_CONST(26):_MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_MAX_PKT_LENGTH_ROW                      1

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_HEAD_RECLAMATION_LIST_SHIFT                     _MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_HEAD_RECLAMATION_LIST_FIELD                     (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_HEAD_RECLAMATION_LIST_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_HEAD_RECLAMATION_LIST_RANGE                     _MK_SHIFT_CONST(15):_MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_HEAD_RECLAMATION_LIST_ROW                       1
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_HEAD_RECLAMATION_LIST_CLEAR                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_HEAD_RECLAMATION_LIST_SET                       _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_DATA_TOGGLE_CTRL_SHIFT                  _MK_SHIFT_CONST(14)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_DATA_TOGGLE_CTRL_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_DATA_TOGGLE_CTRL_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_DATA_TOGGLE_CTRL_RANGE                  _MK_SHIFT_CONST(14):_MK_SHIFT_CONST(14)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_DATA_TOGGLE_CTRL_ROW                    1
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_DATA_TOGGLE_CTRL_QH_DT                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_DATA_TOGGLE_CTRL_QTD_DT                 _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ENDPT_SPEED_SHIFT                       _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ENDPT_SPEED_FIELD                       (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ENDPT_SPEED_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ENDPT_SPEED_RANGE                       _MK_SHIFT_CONST(13):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ENDPT_SPEED_ROW                 1
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ENDPT_SPEED_FULL_SPEED                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ENDPT_SPEED_LOW_SPEED                   _MK_ENUM_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ENDPT_SPEED_HIGH_SPEED                  _MK_ENUM_CONST(2)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ENDPT_SPEED_RESERVED                    _MK_ENUM_CONST(3)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ENPT_NUMBER_SHIFT                       _MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ENPT_NUMBER_FIELD                       (_MK_MASK_CONST(0xf) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ENPT_NUMBER_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ENPT_NUMBER_RANGE                       _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ENPT_NUMBER_ROW                 1

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_INACTIVATE_SHIFT                        _MK_SHIFT_CONST(7)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_INACTIVATE_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_INACTIVATE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_INACTIVATE_RANGE                        _MK_SHIFT_CONST(7):_MK_SHIFT_CONST(7)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_INACTIVATE_ROW                  1
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_INACTIVATE_NO_INACTIVATE                        _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_INACTIVATE_INACTIVATE                   _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_DEV_ADDRESS_SHIFT                       _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_DEV_ADDRESS_FIELD                       (_MK_MASK_CONST(0x7f) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_DEV_ADDRESS_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_DEV_ADDRESS_RANGE                       _MK_SHIFT_CONST(6):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_DEV_ADDRESS_ROW                 1

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_MULT_SHIFT                      _MK_SHIFT_CONST(30)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_MULT_FIELD                      (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_MULT_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_MULT_RANGE                      _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(30)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_MULT_ROW                        2
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_MULT_NON_ISO_IS_0                       _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_MULT_MULTI_1                    _MK_ENUM_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_MULT_MULT_2                     _MK_ENUM_CONST(2)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_MULT_MULTI_3                    _MK_ENUM_CONST(3)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_PORT_NUMBER_SHIFT                       _MK_SHIFT_CONST(23)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_PORT_NUMBER_FIELD                       (_MK_MASK_CONST(0x7f) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_PORT_NUMBER_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_PORT_NUMBER_RANGE                       _MK_SHIFT_CONST(29):_MK_SHIFT_CONST(23)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_PORT_NUMBER_ROW                 2

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_HUB_ADDR_SHIFT                  _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_HUB_ADDR_FIELD                  (_MK_MASK_CONST(0x7f) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_HUB_ADDR_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_HUB_ADDR_RANGE                  _MK_SHIFT_CONST(22):_MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_HUB_ADDR_ROW                    2

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_UFRAME_C_MASK_SHIFT                     _MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_UFRAME_C_MASK_FIELD                     (_MK_MASK_CONST(0xff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_UFRAME_C_MASK_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_UFRAME_C_MASK_RANGE                     _MK_SHIFT_CONST(15):_MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_UFRAME_C_MASK_ROW                       2

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_UFRAME_S_MASK_SHIFT                     _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_UFRAME_S_MASK_FIELD                     (_MK_MASK_CONST(0xff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_UFRAME_S_MASK_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_UFRAME_S_MASK_RANGE                     _MK_SHIFT_CONST(7):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_UFRAME_S_MASK_ROW                       2

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_CURRENT_QTD_PTR_SHIFT                   _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_CURRENT_QTD_PTR_FIELD                   (_MK_MASK_CONST(0x7ffffff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_CURRENT_QTD_PTR_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_CURRENT_QTD_PTR_RANGE                   _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_CURRENT_QTD_PTR_ROW                     3

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED3_0_SHIFT                       _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED3_0_FIELD                       (_MK_MASK_CONST(0x1f) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED3_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED3_0_RANGE                       _MK_SHIFT_CONST(4):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED3_0_ROW                 3

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_NEXT_QTD_PTR_SHIFT                      _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_NEXT_QTD_PTR_FIELD                      (_MK_MASK_CONST(0x7ffffff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_NEXT_QTD_PTR_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_NEXT_QTD_PTR_RANGE                      _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_NEXT_QTD_PTR_ROW                        4

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED4_0_SHIFT                       _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED4_0_FIELD                       (_MK_MASK_CONST(0xf) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED4_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED4_0_RANGE                       _MK_SHIFT_CONST(4):_MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED4_0_ROW                 4

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_QTD_TERMINATE_SHIFT                     _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_QTD_TERMINATE_FIELD                     (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_QTD_TERMINATE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_QTD_TERMINATE_RANGE                     _MK_SHIFT_CONST(0):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_QTD_TERMINATE_ROW                       4
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_QTD_TERMINATE_VALID_TD_PTR                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_QTD_TERMINATE_INVALID_TD_PTR                    _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ALT_NEXT_QTD_PTR_SHIFT                  _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ALT_NEXT_QTD_PTR_FIELD                  (_MK_MASK_CONST(0x7ffffff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ALT_NEXT_QTD_PTR_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ALT_NEXT_QTD_PTR_RANGE                  _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ALT_NEXT_QTD_PTR_ROW                    5

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED5_0_SHIFT                       _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED5_0_FIELD                       (_MK_MASK_CONST(0xf) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED5_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED5_0_RANGE                       _MK_SHIFT_CONST(4):_MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED5_0_ROW                 5

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ALT_QTD_TERMINATE_SHIFT                 _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ALT_QTD_TERMINATE_FIELD                 (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ALT_QTD_TERMINATE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ALT_QTD_TERMINATE_RANGE                 _MK_SHIFT_CONST(0):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ALT_QTD_TERMINATE_ROW                   5
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ALT_QTD_TERMINATE_VALID_TD_PTR                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ALT_QTD_TERMINATE_INVALID_TD_PTR                        _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_DATA_TOGGLE_SHIFT                       _MK_SHIFT_CONST(31)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_DATA_TOGGLE_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_DATA_TOGGLE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_DATA_TOGGLE_RANGE                       _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(31)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_DATA_TOGGLE_ROW                 6
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_DATA_TOGGLE_DATA0                       _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_DATA_TOGGLE_DATA1                       _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_TOTAL_BYTES_SHIFT                       _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_TOTAL_BYTES_FIELD                       (_MK_MASK_CONST(0x7fff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_TOTAL_BYTES_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_TOTAL_BYTES_RANGE                       _MK_SHIFT_CONST(30):_MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_TOTAL_BYTES_ROW                 6

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_IOC_SHIFT                       _MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_IOC_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_IOC_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_IOC_RANGE                       _MK_SHIFT_CONST(15):_MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_IOC_ROW                 6
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_IOC_DISABLE                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_IOC_ENABLE                      _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_CURRENT_PAGE_SHIFT                      _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_CURRENT_PAGE_FIELD                      (_MK_MASK_CONST(0x7) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_CURRENT_PAGE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_CURRENT_PAGE_RANGE                      _MK_SHIFT_CONST(14):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_CURRENT_PAGE_ROW                        6

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ERR_COUNTER_SHIFT                       _MK_SHIFT_CONST(10)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ERR_COUNTER_FIELD                       (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ERR_COUNTER_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ERR_COUNTER_RANGE                       _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(10)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ERR_COUNTER_ROW                 6

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_PID_CODE_SHIFT                  _MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_PID_CODE_FIELD                  (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_PID_CODE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_PID_CODE_RANGE                  _MK_SHIFT_CONST(9):_MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_PID_CODE_ROW                    6
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_PID_CODE_OUT                    _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_PID_CODE_IN                     _MK_ENUM_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_PID_CODE_SETUP                  _MK_ENUM_CONST(2)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_PID_CODE_RESERVED                       _MK_ENUM_CONST(3)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ACTIVE_SHIFT                    _MK_SHIFT_CONST(7)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ACTIVE_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ACTIVE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ACTIVE_RANGE                    _MK_SHIFT_CONST(7):_MK_SHIFT_CONST(7)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ACTIVE_ROW                      6
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ACTIVE_CLEAR                    _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_ACTIVE_SET                      _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_HALTED_SHIFT                    _MK_SHIFT_CONST(6)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_HALTED_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_HALTED_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_HALTED_RANGE                    _MK_SHIFT_CONST(6):_MK_SHIFT_CONST(6)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_HALTED_ROW                      6
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_HALTED_CLEAR                    _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_HALTED_SET                      _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_DATA_BUFFER_ERROR_SHIFT                 _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_DATA_BUFFER_ERROR_FIELD                 (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_DATA_BUFFER_ERROR_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_DATA_BUFFER_ERROR_RANGE                 _MK_SHIFT_CONST(5):_MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_DATA_BUFFER_ERROR_ROW                   6
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_DATA_BUFFER_ERROR_CLEAR                 _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_DATA_BUFFER_ERROR_SET                   _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BABBLE_DETECTED_SHIFT                   _MK_SHIFT_CONST(4)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BABBLE_DETECTED_FIELD                   (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BABBLE_DETECTED_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BABBLE_DETECTED_RANGE                   _MK_SHIFT_CONST(4):_MK_SHIFT_CONST(4)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BABBLE_DETECTED_ROW                     6
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BABBLE_DETECTED_CLEAR                   _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BABBLE_DETECTED_SET                     _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_TRANSACTION_ERROR_SHIFT                 _MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_TRANSACTION_ERROR_FIELD                 (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_TRANSACTION_ERROR_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_TRANSACTION_ERROR_RANGE                 _MK_SHIFT_CONST(3):_MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_TRANSACTION_ERROR_ROW                   6
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_TRANSACTION_ERROR_CLEAR                 _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_TRANSACTION_ERROR_SET                   _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_MISSED_MICRO_FRAME_SHIFT                        _MK_SHIFT_CONST(2)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_MISSED_MICRO_FRAME_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_MISSED_MICRO_FRAME_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_MISSED_MICRO_FRAME_RANGE                        _MK_SHIFT_CONST(2):_MK_SHIFT_CONST(2)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_MISSED_MICRO_FRAME_ROW                  6
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_MISSED_MICRO_FRAME_CLEAR                        _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_MISSED_MICRO_FRAME_SET                  _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_SPLIT_TRANS_STATE_SHIFT                 _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_SPLIT_TRANS_STATE_FIELD                 (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_SPLIT_TRANS_STATE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_SPLIT_TRANS_STATE_RANGE                 _MK_SHIFT_CONST(1):_MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_SPLIT_TRANS_STATE_ROW                   6
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_SPLIT_TRANS_STATE_DO_START_SPLIT                        _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_SPLIT_TRANS_STATE_DO_COMPLETE_SPLIT                     _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_PING_STATE_SHIFT                        _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_PING_STATE_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_PING_STATE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_PING_STATE_RANGE                        _MK_SHIFT_CONST(0):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_PING_STATE_ROW                  6
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_PING_STATE_DO_OUT                       _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_PING_STATE_DO_PING                      _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_PTR_PAGE0_SHIFT                     _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_PTR_PAGE0_FIELD                     (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_PTR_PAGE0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_PTR_PAGE0_RANGE                     _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_PTR_PAGE0_ROW                       7

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_OFFSET_SHIFT                        _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_OFFSET_FIELD                        (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_OFFSET_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_OFFSET_RANGE                        _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_OFFSET_ROW                  7

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_PTR_PAGE1_SHIFT                     _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_PTR_PAGE1_FIELD                     (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_PTR_PAGE1_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_PTR_PAGE1_RANGE                     _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_PTR_PAGE1_ROW                       8

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED8_0_SHIFT                       _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED8_0_FIELD                       (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED8_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED8_0_RANGE                       _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED8_0_ROW                 8

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_PTR_PAGE2_SHIFT                     _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_PTR_PAGE2_FIELD                     (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_PTR_PAGE2_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_PTR_PAGE2_RANGE                     _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_PTR_PAGE2_ROW                       9

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED9_0_SHIFT                       _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED9_0_FIELD                       (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED9_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED9_0_RANGE                       _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED9_0_ROW                 9

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_PTR_PAGE3_SHIFT                     _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_PTR_PAGE3_FIELD                     (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_PTR_PAGE3_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_PTR_PAGE3_RANGE                     _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_PTR_PAGE3_ROW                       10

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED10_0_SHIFT                      _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED10_0_FIELD                      (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED10_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED10_0_RANGE                      _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED10_0_ROW                        10

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_PTR_PAGE4_SHIFT                     _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_PTR_PAGE4_FIELD                     (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_PTR_PAGE4_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_PTR_PAGE4_RANGE                     _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_BUF_PTR_PAGE4_ROW                       11

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED11_0_SHIFT                      _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED11_0_FIELD                      (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED11_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED11_0_RANGE                      _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_HEAD_0_RESERVED11_0_ROW                        11


// Packet USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_SIZE 32

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_NEXT_QTD_PTR_SHIFT                       _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_NEXT_QTD_PTR_FIELD                       (_MK_MASK_CONST(0x7ffffff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_NEXT_QTD_PTR_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_NEXT_QTD_PTR_RANGE                       _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_NEXT_QTD_PTR_ROW                 0

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED4_0_SHIFT                        _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED4_0_FIELD                        (_MK_MASK_CONST(0xf) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED4_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED4_0_RANGE                        _MK_SHIFT_CONST(4):_MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED4_0_ROW                  0

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_QTD_TERMINATE_SHIFT                      _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_QTD_TERMINATE_FIELD                      (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_QTD_TERMINATE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_QTD_TERMINATE_RANGE                      _MK_SHIFT_CONST(0):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_QTD_TERMINATE_ROW                        0
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_QTD_TERMINATE_VALID_TD_PTR                       _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_QTD_TERMINATE_INVALID_TD_PTR                     _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_ALT_NEXT_QTD_PTR_SHIFT                   _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_ALT_NEXT_QTD_PTR_FIELD                   (_MK_MASK_CONST(0x7ffffff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_ALT_NEXT_QTD_PTR_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_ALT_NEXT_QTD_PTR_RANGE                   _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_ALT_NEXT_QTD_PTR_ROW                     1

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED5_0_SHIFT                        _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED5_0_FIELD                        (_MK_MASK_CONST(0xf) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED5_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED5_0_RANGE                        _MK_SHIFT_CONST(4):_MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED5_0_ROW                  1

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_ALT_QTD_TERMINATE_SHIFT                  _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_ALT_QTD_TERMINATE_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_ALT_QTD_TERMINATE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_ALT_QTD_TERMINATE_RANGE                  _MK_SHIFT_CONST(0):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_ALT_QTD_TERMINATE_ROW                    1
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_ALT_QTD_TERMINATE_VALID_TD_PTR                   _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_ALT_QTD_TERMINATE_INVALID_TD_PTR                 _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_DATA_TOGGLE_SHIFT                        _MK_SHIFT_CONST(31)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_DATA_TOGGLE_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_DATA_TOGGLE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_DATA_TOGGLE_RANGE                        _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(31)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_DATA_TOGGLE_ROW                  2
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_DATA_TOGGLE_DATA0                        _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_DATA_TOGGLE_DATA1                        _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_TOTAL_BYTES_SHIFT                        _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_TOTAL_BYTES_FIELD                        (_MK_MASK_CONST(0x7fff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_TOTAL_BYTES_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_TOTAL_BYTES_RANGE                        _MK_SHIFT_CONST(30):_MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_TOTAL_BYTES_ROW                  2

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_IOC_SHIFT                        _MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_IOC_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_IOC_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_IOC_RANGE                        _MK_SHIFT_CONST(15):_MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_IOC_ROW                  2
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_IOC_DISABLE                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_IOC_ENABLE                       _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_CURRENT_PAGE_SHIFT                       _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_CURRENT_PAGE_FIELD                       (_MK_MASK_CONST(0x7) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_CURRENT_PAGE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_CURRENT_PAGE_RANGE                       _MK_SHIFT_CONST(14):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_CURRENT_PAGE_ROW                 2

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_ERR_COUNTER_SHIFT                        _MK_SHIFT_CONST(10)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_ERR_COUNTER_FIELD                        (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_ERR_COUNTER_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_ERR_COUNTER_RANGE                        _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(10)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_ERR_COUNTER_ROW                  2

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_PID_CODE_SHIFT                   _MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_PID_CODE_FIELD                   (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_PID_CODE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_PID_CODE_RANGE                   _MK_SHIFT_CONST(9):_MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_PID_CODE_ROW                     2
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_PID_CODE_OUT                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_PID_CODE_IN                      _MK_ENUM_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_PID_CODE_SETUP                   _MK_ENUM_CONST(2)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_PID_CODE_RESERVED                        _MK_ENUM_CONST(3)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_ACTIVE_SHIFT                     _MK_SHIFT_CONST(7)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_ACTIVE_FIELD                     (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_ACTIVE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_ACTIVE_RANGE                     _MK_SHIFT_CONST(7):_MK_SHIFT_CONST(7)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_ACTIVE_ROW                       2
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_ACTIVE_CLEAR                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_ACTIVE_SET                       _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_HALTED_SHIFT                     _MK_SHIFT_CONST(6)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_HALTED_FIELD                     (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_HALTED_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_HALTED_RANGE                     _MK_SHIFT_CONST(6):_MK_SHIFT_CONST(6)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_HALTED_ROW                       2
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_HALTED_CLEAR                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_HALTED_SET                       _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_SHIFT                  _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_RANGE                  _MK_SHIFT_CONST(5):_MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_ROW                    2
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_CLEAR                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_SET                    _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_SHIFT                    _MK_SHIFT_CONST(4)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_RANGE                    _MK_SHIFT_CONST(4):_MK_SHIFT_CONST(4)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_ROW                      2
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_CLEAR                    _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_SET                      _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_SHIFT                  _MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_RANGE                  _MK_SHIFT_CONST(3):_MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_ROW                    2
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_CLEAR                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_SET                    _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_MISSED_MICRO_FRAME_SHIFT                 _MK_SHIFT_CONST(2)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_MISSED_MICRO_FRAME_FIELD                 (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_MISSED_MICRO_FRAME_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_MISSED_MICRO_FRAME_RANGE                 _MK_SHIFT_CONST(2):_MK_SHIFT_CONST(2)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_MISSED_MICRO_FRAME_ROW                   2
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_MISSED_MICRO_FRAME_CLEAR                 _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_MISSED_MICRO_FRAME_SET                   _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_SPLIT_TRANS_STATE_SHIFT                  _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_SPLIT_TRANS_STATE_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_SPLIT_TRANS_STATE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_SPLIT_TRANS_STATE_RANGE                  _MK_SHIFT_CONST(1):_MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_SPLIT_TRANS_STATE_ROW                    2
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_SPLIT_TRANS_STATE_DO_START_SPLIT                 _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_SPLIT_TRANS_STATE_DO_COMPLETE_SPLIT                      _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_PING_STATE_SHIFT                 _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_PING_STATE_FIELD                 (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_PING_STATE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_PING_STATE_RANGE                 _MK_SHIFT_CONST(0):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_PING_STATE_ROW                   2
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_PING_STATE_DO_OUT                        _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_PING_STATE_DO_PING                       _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE0_SHIFT                      _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE0_FIELD                      (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE0_RANGE                      _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE0_ROW                        3

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_OFFSET_SHIFT                 _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_OFFSET_FIELD                 (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_OFFSET_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_OFFSET_RANGE                 _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_OFFSET_ROW                   3

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE1_SHIFT                      _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE1_FIELD                      (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE1_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE1_RANGE                      _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE1_ROW                        4

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED8_0_SHIFT                        _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED8_0_FIELD                        (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED8_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED8_0_RANGE                        _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED8_0_ROW                  4

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE2_SHIFT                      _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE2_FIELD                      (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE2_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE2_RANGE                      _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE2_ROW                        5

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED9_0_SHIFT                        _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED9_0_FIELD                        (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED9_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED9_0_RANGE                        _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED9_0_ROW                  5

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE3_SHIFT                      _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE3_FIELD                      (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE3_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE3_RANGE                      _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE3_ROW                        6

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED10_0_SHIFT                       _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED10_0_FIELD                       (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED10_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED10_0_RANGE                       _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED10_0_ROW                 6

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE4_SHIFT                      _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE4_FIELD                      (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE4_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE4_RANGE                      _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE4_ROW                        7

#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED11_0_SHIFT                       _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED11_0_FIELD                       (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED11_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED11_0_RANGE                       _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_QUEUE_TRANSFER_DESCRIPTOR_0_RESERVED11_0_ROW                 7


// Packet USB2_CONTROLLER_USB2D_HOST_FRAME_LIST_ELEMENT_0
#define USB2_CONTROLLER_USB2D_HOST_FRAME_LIST_ELEMENT_0_SIZE 32

#define USB2_CONTROLLER_USB2D_HOST_FRAME_LIST_ELEMENT_0_FRAME_LIST_LINK_PTR_SHIFT                       _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_FRAME_LIST_ELEMENT_0_FRAME_LIST_LINK_PTR_FIELD                       (_MK_MASK_CONST(0x7ffffff) << USB2_CONTROLLER_USB2D_HOST_FRAME_LIST_ELEMENT_0_FRAME_LIST_LINK_PTR_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_FRAME_LIST_ELEMENT_0_FRAME_LIST_LINK_PTR_RANGE                       _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_FRAME_LIST_ELEMENT_0_FRAME_LIST_LINK_PTR_ROW                 0

#define USB2_CONTROLLER_USB2D_HOST_FRAME_LIST_ELEMENT_0_RESERVED0_0_SHIFT                       _MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_HOST_FRAME_LIST_ELEMENT_0_RESERVED0_0_FIELD                       (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_HOST_FRAME_LIST_ELEMENT_0_RESERVED0_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_FRAME_LIST_ELEMENT_0_RESERVED0_0_RANGE                       _MK_SHIFT_CONST(4):_MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_HOST_FRAME_LIST_ELEMENT_0_RESERVED0_0_ROW                 0

#define USB2_CONTROLLER_USB2D_HOST_FRAME_LIST_ELEMENT_0_QH_ITD_TYPE_SHIFT                       _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_FRAME_LIST_ELEMENT_0_QH_ITD_TYPE_FIELD                       (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_HOST_FRAME_LIST_ELEMENT_0_QH_ITD_TYPE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_FRAME_LIST_ELEMENT_0_QH_ITD_TYPE_RANGE                       _MK_SHIFT_CONST(2):_MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_FRAME_LIST_ELEMENT_0_QH_ITD_TYPE_ROW                 0
#define USB2_CONTROLLER_USB2D_HOST_FRAME_LIST_ELEMENT_0_QH_ITD_TYPE_ITD                 _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_FRAME_LIST_ELEMENT_0_QH_ITD_TYPE_QH                  _MK_ENUM_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_FRAME_LIST_ELEMENT_0_QH_ITD_TYPE_SITD                        _MK_ENUM_CONST(2)
#define USB2_CONTROLLER_USB2D_HOST_FRAME_LIST_ELEMENT_0_QH_ITD_TYPE_FSTN                        _MK_ENUM_CONST(3)

#define USB2_CONTROLLER_USB2D_HOST_FRAME_LIST_ELEMENT_0_RESERVED1_0_SHIFT                       _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_FRAME_LIST_ELEMENT_0_RESERVED1_0_FIELD                       (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_FRAME_LIST_ELEMENT_0_RESERVED1_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_FRAME_LIST_ELEMENT_0_RESERVED1_0_RANGE                       _MK_SHIFT_CONST(0):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_FRAME_LIST_ELEMENT_0_RESERVED1_0_ROW                 0


// Packet USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_SIZE 32

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_NEXT_LINK_PTR_SHIFT                        _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_NEXT_LINK_PTR_FIELD                        (_MK_MASK_CONST(0x7ffffff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_NEXT_LINK_PTR_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_NEXT_LINK_PTR_RANGE                        _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_NEXT_LINK_PTR_ROW                  0

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED0_0_SHIFT                  _MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED0_0_FIELD                  (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED0_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED0_0_RANGE                  _MK_SHIFT_CONST(4):_MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED0_0_ROW                    0

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_QH_ITD_TYPE_SHIFT                  _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_QH_ITD_TYPE_FIELD                  (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_QH_ITD_TYPE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_QH_ITD_TYPE_RANGE                  _MK_SHIFT_CONST(2):_MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_QH_ITD_TYPE_ROW                    0
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_QH_ITD_TYPE_ITD                    _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_QH_ITD_TYPE_QH                     _MK_ENUM_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_QH_ITD_TYPE_SITD                   _MK_ENUM_CONST(2)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_QH_ITD_TYPE_FSTN                   _MK_ENUM_CONST(3)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TERMINATE_SHIFT                    _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TERMINATE_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TERMINATE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TERMINATE_RANGE                    _MK_SHIFT_CONST(0):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TERMINATE_ROW                      0
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TERMINATE_VALID_LINK_PTR                   _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TERMINATE_INVALID_LINK_PTR                 _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_0_SHIFT                     _MK_SHIFT_CONST(31)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_0_FIELD                     (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_0_RANGE                     _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(31)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_0_ROW                       1
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_0_CLEAR                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_0_SET                       _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_0_SHIFT                  _MK_SHIFT_CONST(30)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_0_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_0_RANGE                  _MK_SHIFT_CONST(30):_MK_SHIFT_CONST(30)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_0_ROW                    1
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_0_CLEAR                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_0_SET                    _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_0_SHIFT                    _MK_SHIFT_CONST(29)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_0_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_0_RANGE                    _MK_SHIFT_CONST(29):_MK_SHIFT_CONST(29)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_0_ROW                      1
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_0_CLEAR                    _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_0_SET                      _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_0_SHIFT                  _MK_SHIFT_CONST(28)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_0_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_0_RANGE                  _MK_SHIFT_CONST(28):_MK_SHIFT_CONST(28)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_0_ROW                    1
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_0_CLEAR                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_0_SET                    _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_0_LENGTH_SHIFT                 _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_0_LENGTH_FIELD                 (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_0_LENGTH_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_0_LENGTH_RANGE                 _MK_SHIFT_CONST(27):_MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_0_LENGTH_ROW                   1

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_0_SHIFT                        _MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_0_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_0_RANGE                        _MK_SHIFT_CONST(15):_MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_0_ROW                  1
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_0_DISABLE                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_0_ENABLE                       _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_0_SHIFT                        _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_0_FIELD                        (_MK_MASK_CONST(0x7) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_0_RANGE                        _MK_SHIFT_CONST(14):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_0_ROW                  1

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_0_OFFSET_SHIFT                 _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_0_OFFSET_FIELD                 (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_0_OFFSET_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_0_OFFSET_RANGE                 _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_0_OFFSET_ROW                   1

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_1_SHIFT                     _MK_SHIFT_CONST(31)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_1_FIELD                     (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_1_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_1_RANGE                     _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(31)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_1_ROW                       2
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_1_CLEAR                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_1_SET                       _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_1_SHIFT                  _MK_SHIFT_CONST(30)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_1_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_1_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_1_RANGE                  _MK_SHIFT_CONST(30):_MK_SHIFT_CONST(30)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_1_ROW                    2
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_1_CLEAR                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_1_SET                    _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_1_SHIFT                    _MK_SHIFT_CONST(29)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_1_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_1_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_1_RANGE                    _MK_SHIFT_CONST(29):_MK_SHIFT_CONST(29)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_1_ROW                      2
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_1_CLEAR                    _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_1_SET                      _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_1_SHIFT                  _MK_SHIFT_CONST(28)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_1_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_1_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_1_RANGE                  _MK_SHIFT_CONST(28):_MK_SHIFT_CONST(28)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_1_ROW                    2
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_1_CLEAR                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_1_SET                    _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_1_LENGTH_SHIFT                 _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_1_LENGTH_FIELD                 (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_1_LENGTH_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_1_LENGTH_RANGE                 _MK_SHIFT_CONST(27):_MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_1_LENGTH_ROW                   2

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_1_SHIFT                        _MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_1_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_1_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_1_RANGE                        _MK_SHIFT_CONST(15):_MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_1_ROW                  2
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_1_DISABLE                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_1_ENABLE                       _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_1_SHIFT                        _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_1_FIELD                        (_MK_MASK_CONST(0x7) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_1_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_1_RANGE                        _MK_SHIFT_CONST(14):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_1_ROW                  2

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_1_OFFSET_SHIFT                 _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_1_OFFSET_FIELD                 (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_1_OFFSET_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_1_OFFSET_RANGE                 _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_1_OFFSET_ROW                   2

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_2_SHIFT                     _MK_SHIFT_CONST(31)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_2_FIELD                     (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_2_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_2_RANGE                     _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(31)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_2_ROW                       3
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_2_CLEAR                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_2_SET                       _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_2_SHIFT                  _MK_SHIFT_CONST(30)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_2_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_2_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_2_RANGE                  _MK_SHIFT_CONST(30):_MK_SHIFT_CONST(30)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_2_ROW                    3
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_2_CLEAR                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_2_SET                    _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_2_SHIFT                    _MK_SHIFT_CONST(29)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_2_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_2_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_2_RANGE                    _MK_SHIFT_CONST(29):_MK_SHIFT_CONST(29)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_2_ROW                      3
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_2_CLEAR                    _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_2_SET                      _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_2_SHIFT                  _MK_SHIFT_CONST(28)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_2_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_2_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_2_RANGE                  _MK_SHIFT_CONST(28):_MK_SHIFT_CONST(28)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_2_ROW                    3
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_2_CLEAR                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_2_SET                    _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_2_LENGTH_SHIFT                 _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_2_LENGTH_FIELD                 (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_2_LENGTH_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_2_LENGTH_RANGE                 _MK_SHIFT_CONST(27):_MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_2_LENGTH_ROW                   3

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_2_SHIFT                        _MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_2_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_2_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_2_RANGE                        _MK_SHIFT_CONST(15):_MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_2_ROW                  3
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_2_DISABLE                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_2_ENABLE                       _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_2_SHIFT                        _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_2_FIELD                        (_MK_MASK_CONST(0x7) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_2_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_2_RANGE                        _MK_SHIFT_CONST(14):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_2_ROW                  3

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_2_OFFSET_SHIFT                 _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_2_OFFSET_FIELD                 (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_2_OFFSET_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_2_OFFSET_RANGE                 _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_2_OFFSET_ROW                   3

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_3_SHIFT                     _MK_SHIFT_CONST(31)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_3_FIELD                     (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_3_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_3_RANGE                     _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(31)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_3_ROW                       4
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_3_CLEAR                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_3_SET                       _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_3_SHIFT                  _MK_SHIFT_CONST(30)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_3_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_3_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_3_RANGE                  _MK_SHIFT_CONST(30):_MK_SHIFT_CONST(30)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_3_ROW                    4
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_3_CLEAR                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_3_SET                    _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_3_SHIFT                    _MK_SHIFT_CONST(29)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_3_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_3_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_3_RANGE                    _MK_SHIFT_CONST(29):_MK_SHIFT_CONST(29)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_3_ROW                      4
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_3_CLEAR                    _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_3_SET                      _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_3_SHIFT                  _MK_SHIFT_CONST(28)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_3_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_3_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_3_RANGE                  _MK_SHIFT_CONST(28):_MK_SHIFT_CONST(28)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_3_ROW                    4
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_3_CLEAR                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_3_SET                    _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_3_LENGTH_SHIFT                 _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_3_LENGTH_FIELD                 (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_3_LENGTH_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_3_LENGTH_RANGE                 _MK_SHIFT_CONST(27):_MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_3_LENGTH_ROW                   4

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_3_SHIFT                        _MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_3_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_3_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_3_RANGE                        _MK_SHIFT_CONST(15):_MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_3_ROW                  4
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_3_DISABLE                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_3_ENABLE                       _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_3_SHIFT                        _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_3_FIELD                        (_MK_MASK_CONST(0x7) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_3_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_3_RANGE                        _MK_SHIFT_CONST(14):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_3_ROW                  4

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_3_OFFSET_SHIFT                 _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_3_OFFSET_FIELD                 (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_3_OFFSET_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_3_OFFSET_RANGE                 _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_3_OFFSET_ROW                   4

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_4_SHIFT                     _MK_SHIFT_CONST(31)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_4_FIELD                     (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_4_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_4_RANGE                     _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(31)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_4_ROW                       5
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_4_CLEAR                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_4_SET                       _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_4_SHIFT                  _MK_SHIFT_CONST(30)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_4_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_4_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_4_RANGE                  _MK_SHIFT_CONST(30):_MK_SHIFT_CONST(30)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_4_ROW                    5
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_4_CLEAR                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_4_SET                    _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_4_SHIFT                    _MK_SHIFT_CONST(29)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_4_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_4_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_4_RANGE                    _MK_SHIFT_CONST(29):_MK_SHIFT_CONST(29)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_4_ROW                      5
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_4_CLEAR                    _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_4_SET                      _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_4_SHIFT                  _MK_SHIFT_CONST(28)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_4_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_4_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_4_RANGE                  _MK_SHIFT_CONST(28):_MK_SHIFT_CONST(28)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_4_ROW                    5
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_4_CLEAR                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_4_SET                    _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_4_LENGTH_SHIFT                 _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_4_LENGTH_FIELD                 (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_4_LENGTH_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_4_LENGTH_RANGE                 _MK_SHIFT_CONST(27):_MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_4_LENGTH_ROW                   5

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_4_SHIFT                        _MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_4_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_4_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_4_RANGE                        _MK_SHIFT_CONST(15):_MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_4_ROW                  5
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_4_DISABLE                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_4_ENABLE                       _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_4_SHIFT                        _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_4_FIELD                        (_MK_MASK_CONST(0x7) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_4_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_4_RANGE                        _MK_SHIFT_CONST(14):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_4_ROW                  5

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_4_OFFSET_SHIFT                 _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_4_OFFSET_FIELD                 (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_4_OFFSET_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_4_OFFSET_RANGE                 _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_4_OFFSET_ROW                   5

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_5_SHIFT                     _MK_SHIFT_CONST(31)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_5_FIELD                     (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_5_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_5_RANGE                     _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(31)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_5_ROW                       6
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_5_CLEAR                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_5_SET                       _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_5_SHIFT                  _MK_SHIFT_CONST(30)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_5_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_5_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_5_RANGE                  _MK_SHIFT_CONST(30):_MK_SHIFT_CONST(30)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_5_ROW                    6
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_5_CLEAR                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_5_SET                    _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_5_SHIFT                    _MK_SHIFT_CONST(29)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_5_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_5_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_5_RANGE                    _MK_SHIFT_CONST(29):_MK_SHIFT_CONST(29)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_5_ROW                      6
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_5_CLEAR                    _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_5_SET                      _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_5_SHIFT                  _MK_SHIFT_CONST(28)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_5_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_5_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_5_RANGE                  _MK_SHIFT_CONST(28):_MK_SHIFT_CONST(28)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_5_ROW                    6
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_5_CLEAR                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_5_SET                    _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_5_LENGTH_SHIFT                 _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_5_LENGTH_FIELD                 (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_5_LENGTH_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_5_LENGTH_RANGE                 _MK_SHIFT_CONST(27):_MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_5_LENGTH_ROW                   6

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_5_SHIFT                        _MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_5_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_5_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_5_RANGE                        _MK_SHIFT_CONST(15):_MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_5_ROW                  6
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_5_DISABLE                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_5_ENABLE                       _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_5_SHIFT                        _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_5_FIELD                        (_MK_MASK_CONST(0x7) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_5_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_5_RANGE                        _MK_SHIFT_CONST(14):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_5_ROW                  6

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_5_OFFSET_SHIFT                 _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_5_OFFSET_FIELD                 (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_5_OFFSET_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_5_OFFSET_RANGE                 _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_5_OFFSET_ROW                   6

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_6_SHIFT                     _MK_SHIFT_CONST(31)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_6_FIELD                     (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_6_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_6_RANGE                     _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(31)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_6_ROW                       7
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_6_CLEAR                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_6_SET                       _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_6_SHIFT                  _MK_SHIFT_CONST(30)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_6_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_6_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_6_RANGE                  _MK_SHIFT_CONST(30):_MK_SHIFT_CONST(30)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_6_ROW                    7
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_6_CLEAR                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_6_SET                    _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_6_SHIFT                    _MK_SHIFT_CONST(29)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_6_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_6_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_6_RANGE                    _MK_SHIFT_CONST(29):_MK_SHIFT_CONST(29)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_6_ROW                      7
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_6_CLEAR                    _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_6_SET                      _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_6_SHIFT                  _MK_SHIFT_CONST(28)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_6_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_6_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_6_RANGE                  _MK_SHIFT_CONST(28):_MK_SHIFT_CONST(28)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_6_ROW                    7
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_6_CLEAR                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_6_SET                    _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_6_LENGTH_SHIFT                 _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_6_LENGTH_FIELD                 (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_6_LENGTH_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_6_LENGTH_RANGE                 _MK_SHIFT_CONST(27):_MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_6_LENGTH_ROW                   7

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_6_SHIFT                        _MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_6_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_6_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_6_RANGE                        _MK_SHIFT_CONST(15):_MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_6_ROW                  7
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_6_DISABLE                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_6_ENABLE                       _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_6_SHIFT                        _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_6_FIELD                        (_MK_MASK_CONST(0x7) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_6_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_6_RANGE                        _MK_SHIFT_CONST(14):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_6_ROW                  7

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_6_OFFSET_SHIFT                 _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_6_OFFSET_FIELD                 (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_6_OFFSET_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_6_OFFSET_RANGE                 _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_6_OFFSET_ROW                   7

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_7_SHIFT                     _MK_SHIFT_CONST(31)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_7_FIELD                     (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_7_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_7_RANGE                     _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(31)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_7_ROW                       8
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_7_CLEAR                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_7_SET                       _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_7_SHIFT                  _MK_SHIFT_CONST(30)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_7_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_7_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_7_RANGE                  _MK_SHIFT_CONST(30):_MK_SHIFT_CONST(30)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_7_ROW                    8
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_7_CLEAR                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_7_SET                    _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_7_SHIFT                    _MK_SHIFT_CONST(29)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_7_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_7_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_7_RANGE                    _MK_SHIFT_CONST(29):_MK_SHIFT_CONST(29)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_7_ROW                      8
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_7_CLEAR                    _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_7_SET                      _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_7_SHIFT                  _MK_SHIFT_CONST(28)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_7_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_7_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_7_RANGE                  _MK_SHIFT_CONST(28):_MK_SHIFT_CONST(28)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_7_ROW                    8
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_7_CLEAR                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_7_SET                    _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_7_LENGTH_SHIFT                 _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_7_LENGTH_FIELD                 (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_7_LENGTH_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_7_LENGTH_RANGE                 _MK_SHIFT_CONST(27):_MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_7_LENGTH_ROW                   8

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_7_SHIFT                        _MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_7_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_7_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_7_RANGE                        _MK_SHIFT_CONST(15):_MK_SHIFT_CONST(15)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_7_ROW                  8
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_7_DISABLE                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_IOC_7_ENABLE                       _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_7_SHIFT                        _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_7_FIELD                        (_MK_MASK_CONST(0x7) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_7_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_7_RANGE                        _MK_SHIFT_CONST(14):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_7_ROW                  8

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_7_OFFSET_SHIFT                 _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_7_OFFSET_FIELD                 (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_7_OFFSET_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_7_OFFSET_RANGE                 _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_7_OFFSET_ROW                   8

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE0_SHIFT                        _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE0_FIELD                        (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE0_RANGE                        _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE0_ROW                  9

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ENPT_NUMBER_SHIFT                  _MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ENPT_NUMBER_FIELD                  (_MK_MASK_CONST(0xf) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ENPT_NUMBER_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ENPT_NUMBER_RANGE                  _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_ENPT_NUMBER_ROW                    9

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED9_0_SHIFT                  _MK_SHIFT_CONST(7)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED9_0_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED9_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED9_0_RANGE                  _MK_SHIFT_CONST(7):_MK_SHIFT_CONST(7)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED9_0_ROW                    9

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DEV_ADDRESS_SHIFT                  _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DEV_ADDRESS_FIELD                  (_MK_MASK_CONST(0x7f) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DEV_ADDRESS_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DEV_ADDRESS_RANGE                  _MK_SHIFT_CONST(6):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DEV_ADDRESS_ROW                    9

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE1_SHIFT                        _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE1_FIELD                        (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE1_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE1_RANGE                        _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE1_ROW                  10

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DIRECTION_SHIFT                    _MK_SHIFT_CONST(11)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DIRECTION_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DIRECTION_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DIRECTION_RANGE                    _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(11)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DIRECTION_ROW                      10
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DIRECTION_OUT                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_DIRECTION_IN                       _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_MAX_PKT_SIZE_SHIFT                 _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_MAX_PKT_SIZE_FIELD                 (_MK_MASK_CONST(0x7ff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_MAX_PKT_SIZE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_MAX_PKT_SIZE_RANGE                 _MK_SHIFT_CONST(10):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_MAX_PKT_SIZE_ROW                   10

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE2_SHIFT                        _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE2_FIELD                        (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE2_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE2_RANGE                        _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE2_ROW                  11

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED11_0_SHIFT                 _MK_SHIFT_CONST(2)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED11_0_FIELD                 (_MK_MASK_CONST(0x3ff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED11_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED11_0_RANGE                 _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(2)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED11_0_ROW                   11

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_MULT_SHIFT                 _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_MULT_FIELD                 (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_MULT_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_MULT_RANGE                 _MK_SHIFT_CONST(1):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_MULT_ROW                   11
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_MULT_RESERVED                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_MULT_MULTI_1                       _MK_ENUM_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_MULT_MULT_2                        _MK_ENUM_CONST(2)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_MULT_MULTI_3                       _MK_ENUM_CONST(3)

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE3_SHIFT                        _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE3_FIELD                        (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE3_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE3_RANGE                        _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE3_ROW                  12

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED12_0_SHIFT                 _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED12_0_FIELD                 (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED12_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED12_0_RANGE                 _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED12_0_ROW                   12

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE4_SHIFT                        _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE4_FIELD                        (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE4_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE4_RANGE                        _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE4_ROW                  13

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED13_0_SHIFT                 _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED13_0_FIELD                 (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED13_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED13_0_RANGE                 _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED13_0_ROW                   13

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE5_SHIFT                        _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE5_FIELD                        (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE5_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE5_RANGE                        _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE5_ROW                  14

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED14_0_SHIFT                 _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED14_0_FIELD                 (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED14_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED14_0_RANGE                 _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED14_0_ROW                   14

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE6_SHIFT                        _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE6_FIELD                        (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE6_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE6_RANGE                        _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE6_ROW                  15

#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED15_0_SHIFT                 _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED15_0_FIELD                 (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED15_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED15_0_RANGE                 _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_ISO_TRANSFER_DESCRIPTOR_0_RESERVED15_0_ROW                   15


// Packet USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_SIZE 32

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_NEXT_LINK_PTR_SHIFT                  _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_NEXT_LINK_PTR_FIELD                  (_MK_MASK_CONST(0x7ffffff) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_NEXT_LINK_PTR_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_NEXT_LINK_PTR_RANGE                  _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_NEXT_LINK_PTR_ROW                    0

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED0_0_SHIFT                    _MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED0_0_FIELD                    (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED0_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED0_0_RANGE                    _MK_SHIFT_CONST(4):_MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED0_0_ROW                      0

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_QH_ITD_TYPE_SHIFT                    _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_QH_ITD_TYPE_FIELD                    (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_QH_ITD_TYPE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_QH_ITD_TYPE_RANGE                    _MK_SHIFT_CONST(2):_MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_QH_ITD_TYPE_ROW                      0
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_QH_ITD_TYPE_ITD                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_QH_ITD_TYPE_QH                       _MK_ENUM_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_QH_ITD_TYPE_SITD                     _MK_ENUM_CONST(2)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_QH_ITD_TYPE_FSTN                     _MK_ENUM_CONST(3)

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TERMINATE_SHIFT                      _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TERMINATE_FIELD                      (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TERMINATE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TERMINATE_RANGE                      _MK_SHIFT_CONST(0):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TERMINATE_ROW                        0
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TERMINATE_VALID_LINK_PTR                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TERMINATE_INVALID_LINK_PTR                   _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_DIRECTION_SHIFT                      _MK_SHIFT_CONST(31)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_DIRECTION_FIELD                      (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_DIRECTION_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_DIRECTION_RANGE                      _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(31)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_DIRECTION_ROW                        1
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_DIRECTION_OUT                        _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_DIRECTION_IN                 _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_PORT_NUMBER_SHIFT                    _MK_SHIFT_CONST(24)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_PORT_NUMBER_FIELD                    (_MK_MASK_CONST(0x7f) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_PORT_NUMBER_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_PORT_NUMBER_RANGE                    _MK_SHIFT_CONST(30):_MK_SHIFT_CONST(24)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_PORT_NUMBER_ROW                      1

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED1_0_SHIFT                    _MK_SHIFT_CONST(23)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED1_0_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED1_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED1_0_RANGE                    _MK_SHIFT_CONST(23):_MK_SHIFT_CONST(23)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED1_0_ROW                      1

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_HUB_ADDR_SHIFT                       _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_HUB_ADDR_FIELD                       (_MK_MASK_CONST(0x7f) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_HUB_ADDR_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_HUB_ADDR_RANGE                       _MK_SHIFT_CONST(22):_MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_HUB_ADDR_ROW                 1

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED1_1_SHIFT                    _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED1_1_FIELD                    (_MK_MASK_CONST(0xf) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED1_1_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED1_1_RANGE                    _MK_SHIFT_CONST(15):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED1_1_ROW                      1

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_ENPT_NUMBER_SHIFT                    _MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_ENPT_NUMBER_FIELD                    (_MK_MASK_CONST(0xf) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_ENPT_NUMBER_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_ENPT_NUMBER_RANGE                    _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_ENPT_NUMBER_ROW                      1

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED1_2_SHIFT                    _MK_SHIFT_CONST(7)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED1_2_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED1_2_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED1_2_RANGE                    _MK_SHIFT_CONST(7):_MK_SHIFT_CONST(7)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED1_2_ROW                      1

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_DEV_ADDRESS_SHIFT                    _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_DEV_ADDRESS_FIELD                    (_MK_MASK_CONST(0x7f) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_DEV_ADDRESS_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_DEV_ADDRESS_RANGE                    _MK_SHIFT_CONST(6):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_DEV_ADDRESS_ROW                      1

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED2_0_SHIFT                    _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED2_0_FIELD                    (_MK_MASK_CONST(0xffff) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED2_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED2_0_RANGE                    _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED2_0_ROW                      2

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_UFRAME_C_MASK_SHIFT                  _MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_UFRAME_C_MASK_FIELD                  (_MK_MASK_CONST(0xff) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_UFRAME_C_MASK_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_UFRAME_C_MASK_RANGE                  _MK_SHIFT_CONST(15):_MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_UFRAME_C_MASK_ROW                    2

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_UFRAME_S_MASK_SHIFT                  _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_UFRAME_S_MASK_FIELD                  (_MK_MASK_CONST(0xff) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_UFRAME_S_MASK_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_UFRAME_S_MASK_RANGE                  _MK_SHIFT_CONST(7):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_UFRAME_S_MASK_ROW                    2

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_IOC_SHIFT                    _MK_SHIFT_CONST(31)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_IOC_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_IOC_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_IOC_RANGE                    _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(31)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_IOC_ROW                      3
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_IOC_DISABLE                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_IOC_ENABLE                   _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_SHIFT                    _MK_SHIFT_CONST(30)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_RANGE                    _MK_SHIFT_CONST(30):_MK_SHIFT_CONST(30)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_PAGE_SELECT_ROW                      3

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED3_0_SHIFT                    _MK_SHIFT_CONST(26)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED3_0_FIELD                    (_MK_MASK_CONST(0xf) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED3_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED3_0_RANGE                    _MK_SHIFT_CONST(29):_MK_SHIFT_CONST(26)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED3_0_ROW                      3

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TOTAL_BYTES_SHIFT                    _MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TOTAL_BYTES_FIELD                    (_MK_MASK_CONST(0x3ff) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TOTAL_BYTES_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TOTAL_BYTES_RANGE                    _MK_SHIFT_CONST(25):_MK_SHIFT_CONST(16)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TOTAL_BYTES_ROW                      3

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_C_PROG_MASK_SHIFT                    _MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_C_PROG_MASK_FIELD                    (_MK_MASK_CONST(0xff) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_C_PROG_MASK_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_C_PROG_MASK_RANGE                    _MK_SHIFT_CONST(15):_MK_SHIFT_CONST(8)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_C_PROG_MASK_ROW                      3

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_SHIFT                 _MK_SHIFT_CONST(7)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_FIELD                 (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_RANGE                 _MK_SHIFT_CONST(7):_MK_SHIFT_CONST(7)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_ROW                   3
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_CLEAR                 _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_ACTIVE_SET                   _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_ERROR_SHIFT                  _MK_SHIFT_CONST(6)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_ERROR_FIELD                  (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_ERROR_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_ERROR_RANGE                  _MK_SHIFT_CONST(6):_MK_SHIFT_CONST(6)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_ERROR_ROW                    3
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_ERROR_CLEAR                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_ERROR_SET                    _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_SHIFT                      _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_FIELD                      (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_RANGE                      _MK_SHIFT_CONST(5):_MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_ROW                        3
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_CLEAR                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_DATA_BUFFER_ERROR_SET                        _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_SHIFT                        _MK_SHIFT_CONST(4)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_FIELD                        (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_RANGE                        _MK_SHIFT_CONST(4):_MK_SHIFT_CONST(4)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_ROW                  3
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_CLEAR                        _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_BABBLE_DETECTED_SET                  _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_SHIFT                      _MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_FIELD                      (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_RANGE                      _MK_SHIFT_CONST(3):_MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_ROW                        3
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_CLEAR                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_ERROR_SET                        _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_MISSED_MICRO_FRAME_SHIFT                     _MK_SHIFT_CONST(2)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_MISSED_MICRO_FRAME_FIELD                     (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_MISSED_MICRO_FRAME_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_MISSED_MICRO_FRAME_RANGE                     _MK_SHIFT_CONST(2):_MK_SHIFT_CONST(2)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_MISSED_MICRO_FRAME_ROW                       3
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_MISSED_MICRO_FRAME_CLEAR                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_MISSED_MICRO_FRAME_SET                       _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_SPLIT_TRANS_STATE_SHIFT                      _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_SPLIT_TRANS_STATE_FIELD                      (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_SPLIT_TRANS_STATE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_SPLIT_TRANS_STATE_RANGE                      _MK_SHIFT_CONST(1):_MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_SPLIT_TRANS_STATE_ROW                        3
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_SPLIT_TRANS_STATE_DO_START_SPLIT                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_SPLIT_TRANS_STATE_DO_COMPLETE_SPLIT                  _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED3_1_SHIFT                    _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED3_1_FIELD                    (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED3_1_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED3_1_RANGE                    _MK_SHIFT_CONST(0):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED3_1_ROW                      3

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE0_SHIFT                  _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE0_FIELD                  (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE0_RANGE                  _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE0_ROW                    4

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_BUF_OFFSET_SHIFT                     _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_BUF_OFFSET_FIELD                     (_MK_MASK_CONST(0xfff) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_BUF_OFFSET_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_BUF_OFFSET_RANGE                     _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_BUF_OFFSET_ROW                       4

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE1_SHIFT                  _MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE1_FIELD                  (_MK_MASK_CONST(0xfffff) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE1_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE1_RANGE                  _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(12)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_BUF_PTR_PAGE1_ROW                    5

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED5_0_SHIFT                    _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED5_0_FIELD                    (_MK_MASK_CONST(0x7f) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED5_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED5_0_RANGE                    _MK_SHIFT_CONST(11):_MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED5_0_ROW                      5

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_POSITION_SHIFT                   _MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_POSITION_FIELD                   (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_POSITION_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_POSITION_RANGE                   _MK_SHIFT_CONST(4):_MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_POSITION_ROW                     5
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_POSITION_ALL                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_POSITION_BEGIN                   _MK_ENUM_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_POSITION_MID                     _MK_ENUM_CONST(2)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_POSITION_END                     _MK_ENUM_CONST(3)

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_COUNT_SHIFT                      _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_COUNT_FIELD                      (_MK_MASK_CONST(0x7) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_COUNT_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_COUNT_RANGE                      _MK_SHIFT_CONST(2):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_TRANSACTION_COUNT_ROW                        5

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_SITD_BACK_PTR_SHIFT                  _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_SITD_BACK_PTR_FIELD                  (_MK_MASK_CONST(0x7ffffff) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_SITD_BACK_PTR_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_SITD_BACK_PTR_RANGE                  _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_SITD_BACK_PTR_ROW                    6

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED6_0_SHIFT                    _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED6_0_FIELD                    (_MK_MASK_CONST(0xf) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED6_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED6_0_RANGE                    _MK_SHIFT_CONST(4):_MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_RESERVED6_0_ROW                      6

#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_BP_TERMINATE_SHIFT                   _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_BP_TERMINATE_FIELD                   (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_BP_TERMINATE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_BP_TERMINATE_RANGE                   _MK_SHIFT_CONST(0):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_BP_TERMINATE_ROW                     6
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_BP_TERMINATE_VALID_BACK_PTR                  _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_SPLIT_ISO_TRANSFER_DESCRIPTOR_0_BP_TERMINATE_INVALID_BACK_PTR                        _MK_ENUM_CONST(1)


// Packet USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_SIZE 32

#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_NORMAL_PATH_LINK_PTR_SHIFT                      _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_NORMAL_PATH_LINK_PTR_FIELD                      (_MK_MASK_CONST(0x7ffffff) << USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_NORMAL_PATH_LINK_PTR_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_NORMAL_PATH_LINK_PTR_RANGE                      _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_NORMAL_PATH_LINK_PTR_ROW                        0

#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_RESERVED0_0_SHIFT                       _MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_RESERVED0_0_FIELD                       (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_RESERVED0_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_RESERVED0_0_RANGE                       _MK_SHIFT_CONST(4):_MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_RESERVED0_0_ROW                 0

#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_QH_ITD_TYPE_SHIFT                       _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_QH_ITD_TYPE_FIELD                       (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_QH_ITD_TYPE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_QH_ITD_TYPE_RANGE                       _MK_SHIFT_CONST(2):_MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_QH_ITD_TYPE_ROW                 0
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_QH_ITD_TYPE_ITD                 _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_QH_ITD_TYPE_QH                  _MK_ENUM_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_QH_ITD_TYPE_SITD                        _MK_ENUM_CONST(2)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_QH_ITD_TYPE_FSTN                        _MK_ENUM_CONST(3)

#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_TERMINATE_SHIFT                 _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_TERMINATE_FIELD                 (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_TERMINATE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_TERMINATE_RANGE                 _MK_SHIFT_CONST(0):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_TERMINATE_ROW                   0
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_TERMINATE_VALID_LINK_PTR                        _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_TERMINATE_INVALID_LINK_PTR                      _MK_ENUM_CONST(1)

#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_BACK_PATH_LINK_PTR_SHIFT                        _MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_BACK_PATH_LINK_PTR_FIELD                        (_MK_MASK_CONST(0x7ffffff) << USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_BACK_PATH_LINK_PTR_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_BACK_PATH_LINK_PTR_RANGE                        _MK_SHIFT_CONST(31):_MK_SHIFT_CONST(5)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_BACK_PATH_LINK_PTR_ROW                  1

#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_RESERVED1_0_SHIFT                       _MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_RESERVED1_0_FIELD                       (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_RESERVED1_0_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_RESERVED1_0_RANGE                       _MK_SHIFT_CONST(4):_MK_SHIFT_CONST(3)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_RESERVED1_0_ROW                 1

#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_BP_QH_ITD_TYPE_SHIFT                    _MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_BP_QH_ITD_TYPE_FIELD                    (_MK_MASK_CONST(0x3) << USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_BP_QH_ITD_TYPE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_BP_QH_ITD_TYPE_RANGE                    _MK_SHIFT_CONST(2):_MK_SHIFT_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_BP_QH_ITD_TYPE_ROW                      1
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_BP_QH_ITD_TYPE_ITD                      _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_BP_QH_ITD_TYPE_QH                       _MK_ENUM_CONST(1)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_BP_QH_ITD_TYPE_SITD                     _MK_ENUM_CONST(2)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_BP_QH_ITD_TYPE_FSTN                     _MK_ENUM_CONST(3)

#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_BP_TERMINATE_SHIFT                      _MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_BP_TERMINATE_FIELD                      (_MK_MASK_CONST(0x1) << USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_BP_TERMINATE_SHIFT)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_BP_TERMINATE_RANGE                      _MK_SHIFT_CONST(0):_MK_SHIFT_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_BP_TERMINATE_ROW                        1
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_BP_TERMINATE_VALID_LINK_PTR                     _MK_ENUM_CONST(0)
#define USB2_CONTROLLER_USB2D_HOST_PERIODIC_FRAME_SPAN_TRAVERSAL_NODE_0_BP_TERMINATE_INVALID_LINK_PTR                   _MK_ENUM_CONST(1)


//
// REGISTER LIST
//
#define LIST_ARUSB_OTG_REGS(_op_) \
_op_(USB2_CONTROLLER_USB2D_ID_0) \
_op_(USB2_CONTROLLER_USB2D_HW_GENERAL_0) \
_op_(USB2_CONTROLLER_USB2D_HW_HOST_0) \
_op_(USB2_CONTROLLER_USB2D_HW_DEVICE_0) \
_op_(USB2_CONTROLLER_USB2D_HW_TXBUF_0) \
_op_(USB2_CONTROLLER_USB2D_HW_RXBUF_0) \
_op_(USB2_CONTROLLER_USB2D_CAPLENGTH_0) \
_op_(USB2_CONTROLLER_USB2D_HCIVERSON_0) \
_op_(USB2_CONTROLLER_USB2D_HCSPARAMS_0) \
_op_(USB2_CONTROLLER_USB2D_HCCPARAMS_0) \
_op_(USB2_CONTROLLER_USB2D_DCIVERSION_0) \
_op_(USB2_CONTROLLER_USB2D_DCCPARAMS_0) \
_op_(USB2_CONTROLLER_USB2D_USBCMD_0) \
_op_(USB2_CONTROLLER_USB2D_USBSTS_0) \
_op_(USB2_CONTROLLER_USB2D_USBINTR_0) \
_op_(USB2_CONTROLLER_USB2D_FRINDEX_0) \
_op_(USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0) \
_op_(USB2_CONTROLLER_USB2D_ASYNCLISTADDR_0) \
_op_(USB2_CONTROLLER_USB2D_ASYNCTTSTS_0) \
_op_(USB2_CONTROLLER_USB2D_BURSTSIZE_0) \
_op_(USB2_CONTROLLER_USB2D_TXFILLTUNING_0) \
_op_(USB2_CONTROLLER_USB2D_PORTSC1_0) \
_op_(USB2_CONTROLLER_USB2D_OTGSC_0) \
_op_(USB2_CONTROLLER_USB2D_USBMODE_0) \
_op_(USB2_CONTROLLER_USB2D_ENDPTSETUPSTAT_0) \
_op_(USB2_CONTROLLER_USB2D_ENDPTPRIME_0) \
_op_(USB2_CONTROLLER_USB2D_ENDPTFLUSH_0) \
_op_(USB2_CONTROLLER_USB2D_ENDPTSTATUS_0) \
_op_(USB2_CONTROLLER_USB2D_ENDPTCOMPLETE_0) \
_op_(USB2_CONTROLLER_USB2D_ENDPTCTRL0_0) \
_op_(USB2_CONTROLLER_USB2D_ENDPTCTRL1_0) \
_op_(USB2_CONTROLLER_USB2D_ENDPTCTRL2_0) \
_op_(USB2_TX_MEM_USB2_TX_MEM_0) \
_op_(USB2_TX_MEM_USB2_TX_MEM) \
_op_(USB2_RX_MEM_USB2_RX_MEM_0) \
_op_(USB2_RX_MEM_USB2_RX_MEM) \
_op_(USB2_QH_USB2D_QH_EP_0_OUT_0) \
_op_(USB2_QH_USB2D_QH_EP_0_IN_0) \
_op_(USB2_QH_USB2D_QH_EP_1_OUT_0) \
_op_(USB2_QH_USB2D_QH_EP_1_IN_0) \
_op_(USB2_QH_USB2D_QH_EP_2_OUT_0) \
_op_(USB2_QH_USB2D_QH_EP_2_IN_0)


//
// ADDRESS SPACES
//

#define BASE_ADDRESS_USB2_CONTROLLER    0x00000000
#define BASE_ADDRESS_USB2_TX_MEM        0x00000400
#define BASE_ADDRESS_USB2_RX_MEM        0x00000800
#define BASE_ADDRESS_USB2_QH    0x00001000

//
// ARUSB_OTG REGISTER BANKS
//

#define USB2_CONTROLLER0_FIRST_REG 0x0000 // USB2_CONTROLLER_USB2D_ID_0
#define USB2_CONTROLLER0_LAST_REG 0x0014 // USB2_CONTROLLER_USB2D_HW_RXBUF_0
#define USB2_CONTROLLER1_FIRST_REG 0x0100 // USB2_CONTROLLER_USB2D_CAPLENGTH_0
#define USB2_CONTROLLER1_LAST_REG 0x0108 // USB2_CONTROLLER_USB2D_HCCPARAMS_0
#define USB2_CONTROLLER2_FIRST_REG 0x0120 // USB2_CONTROLLER_USB2D_DCIVERSION_0
#define USB2_CONTROLLER2_LAST_REG 0x0124 // USB2_CONTROLLER_USB2D_DCCPARAMS_0
#define USB2_CONTROLLER3_FIRST_REG 0x0140 // USB2_CONTROLLER_USB2D_USBCMD_0
#define USB2_CONTROLLER3_LAST_REG 0x014c // USB2_CONTROLLER_USB2D_FRINDEX_0
#define USB2_CONTROLLER4_FIRST_REG 0x0154 // USB2_CONTROLLER_USB2D_PERIODICLISTBASE_0
#define USB2_CONTROLLER4_LAST_REG 0x0164 // USB2_CONTROLLER_USB2D_TXFILLTUNING_0
#define USB2_CONTROLLER5_FIRST_REG 0x0184 // USB2_CONTROLLER_USB2D_PORTSC1_0
#define USB2_CONTROLLER5_LAST_REG 0x0184 // USB2_CONTROLLER_USB2D_PORTSC1_0
#define USB2_CONTROLLER6_FIRST_REG 0x01a4 // USB2_CONTROLLER_USB2D_OTGSC_0
#define USB2_CONTROLLER6_LAST_REG 0x01c8 // USB2_CONTROLLER_USB2D_ENDPTCTRL2_0
#define USB2_TX_MEM0_FIRST_REG 0x0400 // USB2_TX_MEM_USB2_TX_MEM_0
#define USB2_TX_MEM0_LAST_REG 0x0400 // USB2_TX_MEM_USB2_TX_MEM_0
#define USB2_RX_MEM0_FIRST_REG 0x0800 // USB2_RX_MEM_USB2_RX_MEM_0
#define USB2_RX_MEM0_LAST_REG 0x0800 // USB2_RX_MEM_USB2_RX_MEM_0
#define USB2_QH0_FIRST_REG 0x1000 // USB2_QH_USB2D_QH_EP_0_OUT_0
#define USB2_QH0_LAST_REG 0x1000 // USB2_QH_USB2D_QH_EP_0_OUT_0
#define USB2_QH1_FIRST_REG 0x1040 // USB2_QH_USB2D_QH_EP_0_IN_0
#define USB2_QH1_LAST_REG 0x1040 // USB2_QH_USB2D_QH_EP_0_IN_0
#define USB2_QH2_FIRST_REG 0x1080 // USB2_QH_USB2D_QH_EP_1_OUT_0
#define USB2_QH2_LAST_REG 0x1080 // USB2_QH_USB2D_QH_EP_1_OUT_0
#define USB2_QH3_FIRST_REG 0x10c0 // USB2_QH_USB2D_QH_EP_1_IN_0
#define USB2_QH3_LAST_REG 0x10c0 // USB2_QH_USB2D_QH_EP_1_IN_0
#define USB2_QH4_FIRST_REG 0x1100 // USB2_QH_USB2D_QH_EP_2_OUT_0
#define USB2_QH4_LAST_REG 0x1100 // USB2_QH_USB2D_QH_EP_2_OUT_0
#define USB2_QH5_FIRST_REG 0x1140 // USB2_QH_USB2D_QH_EP_2_IN_0
#define USB2_QH5_LAST_REG 0x1140 // USB2_QH_USB2D_QH_EP_2_IN_0

#ifndef _MK_SHIFT_CONST
  #define _MK_SHIFT_CONST(_constant_) _constant_
#endif
#ifndef _MK_MASK_CONST
  #define _MK_MASK_CONST(_constant_) _constant_
#endif
#ifndef _MK_ENUM_CONST
  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
#endif
#ifndef _MK_ADDR_CONST
  #define _MK_ADDR_CONST(_constant_) _constant_
#endif

#endif // ifndef ___ARUSB_OTG_H_INC_
