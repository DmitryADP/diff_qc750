//
// DO NOT EDIT - generated by simspec!
//

#ifndef ___ARHSMMC_H_INC_
#define ___ARHSMMC_H_INC_
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The HSMMC host controller is use to interface with any typical low-cost MMC and SDMMC devices found on the market
//  today.  In addition, this controller also supports the new classes of enhanced HSMMC devices.  These new devices
//  include CE-ATA hard disk and typically have wider data bus widths and higher interface speeds.  To minimize CPU
//  loading, the HSMMC host controller also provideds a build-in DMA engine to efficiently move data between the AHB
//  bus and the HSMMC card.
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Features:
//      (1)     Supports SPI mode, MMC mode, and CE-ATA mode.
//      (2)     Supports 1-bit, 4-bit, and 8-bit data bus for MMC mode and CE-ATA mode.
//      (3)     Supports CE-ATA command completion signal and command completion signal disable protocol.
//      (4)     Supports high-speed (52MHz) cards and backward compatible card (20MHz).
//      (5)     Supports block lengths up to 32KB.
//      (6)     Supports a maximum of 52 MB/s transfer rate.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Clock Control (Start/Stop) Register

// Register HSMMC_SRT_STP_CLK_0  
#define HSMMC_SRT_STP_CLK_0                     _MK_ADDR_CONST(0x0)
#define HSMMC_SRT_STP_CLK_0_WORD_COUNT                  0x1
#define HSMMC_SRT_STP_CLK_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define HSMMC_SRT_STP_CLK_0_RESET_MASK                  _MK_MASK_CONST(0x3)
#define HSMMC_SRT_STP_CLK_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define HSMMC_SRT_STP_CLK_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define HSMMC_SRT_STP_CLK_0_READ_MASK                   _MK_MASK_CONST(0x0)
#define HSMMC_SRT_STP_CLK_0_WRITE_MASK                  _MK_MASK_CONST(0x3)
// Start MMC clock.  Write 1 will trigger a pulse to start the MMC clock.
#define HSMMC_SRT_STP_CLK_0_START_SHIFT                 _MK_SHIFT_CONST(1)
#define HSMMC_SRT_STP_CLK_0_START_FIELD                 (_MK_MASK_CONST(0x1) << HSMMC_SRT_STP_CLK_0_START_SHIFT)
#define HSMMC_SRT_STP_CLK_0_START_RANGE                 1:1
#define HSMMC_SRT_STP_CLK_0_START_WOFFSET                       0x0
#define HSMMC_SRT_STP_CLK_0_START_DEFAULT                       _MK_MASK_CONST(0x0)
#define HSMMC_SRT_STP_CLK_0_START_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define HSMMC_SRT_STP_CLK_0_START_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define HSMMC_SRT_STP_CLK_0_START_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Stop MMC clock.  Write 1 will trigger a pulse to stop the MMC clock.
#define HSMMC_SRT_STP_CLK_0_STOP_SHIFT                  _MK_SHIFT_CONST(0)
#define HSMMC_SRT_STP_CLK_0_STOP_FIELD                  (_MK_MASK_CONST(0x1) << HSMMC_SRT_STP_CLK_0_STOP_SHIFT)
#define HSMMC_SRT_STP_CLK_0_STOP_RANGE                  0:0
#define HSMMC_SRT_STP_CLK_0_STOP_WOFFSET                        0x0
#define HSMMC_SRT_STP_CLK_0_STOP_DEFAULT                        _MK_MASK_CONST(0x0)
#define HSMMC_SRT_STP_CLK_0_STOP_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define HSMMC_SRT_STP_CLK_0_STOP_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define HSMMC_SRT_STP_CLK_0_STOP_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Status Register

// Register HSMMC_STATUS_0  
#define HSMMC_STATUS_0                  _MK_ADDR_CONST(0x4)
#define HSMMC_STATUS_0_WORD_COUNT                       0x1
#define HSMMC_STATUS_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_RESET_MASK                       _MK_MASK_CONST(0xc003ff3f)
#define HSMMC_STATUS_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_READ_MASK                        _MK_MASK_CONST(0x4003ff3f)
#define HSMMC_STATUS_0_WRITE_MASK                       _MK_MASK_CONST(0x8003f800)
// Clear DMA/TX/RX FIFOs. Writing a 1 will trigger a  pulse to clear the DMA-FIFO, TX-FIFO, and RX-FIFO.
#define HSMMC_STATUS_0_CLR_FIFO_SHIFT                   _MK_SHIFT_CONST(31)
#define HSMMC_STATUS_0_CLR_FIFO_FIELD                   (_MK_MASK_CONST(0x1) << HSMMC_STATUS_0_CLR_FIFO_SHIFT)
#define HSMMC_STATUS_0_CLR_FIFO_RANGE                   31:31
#define HSMMC_STATUS_0_CLR_FIFO_WOFFSET                 0x0
#define HSMMC_STATUS_0_CLR_FIFO_DEFAULT                 _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_CLR_FIFO_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define HSMMC_STATUS_0_CLR_FIFO_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_CLR_FIFO_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_CLR_FIFO_CLEAR_FIFO                      _MK_ENUM_CONST(1)
#define HSMMC_STATUS_0_CLR_FIFO_NO_ACTION                       _MK_ENUM_CONST(0)

// DMA busy:  1 = busy, 0 = idle.
#define HSMMC_STATUS_0_DMA_BSY_SHIFT                    _MK_SHIFT_CONST(30)
#define HSMMC_STATUS_0_DMA_BSY_FIELD                    (_MK_MASK_CONST(0x1) << HSMMC_STATUS_0_DMA_BSY_SHIFT)
#define HSMMC_STATUS_0_DMA_BSY_RANGE                    30:30
#define HSMMC_STATUS_0_DMA_BSY_WOFFSET                  0x0
#define HSMMC_STATUS_0_DMA_BSY_DEFAULT                  _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_DMA_BSY_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define HSMMC_STATUS_0_DMA_BSY_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_DMA_BSY_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_DMA_BSY_DMA_BUSY                 _MK_ENUM_CONST(1)
#define HSMMC_STATUS_0_DMA_BSY_DMA_IDLE                 _MK_ENUM_CONST(0)

//  CE-ATA command completion signal (CCS) pulse detected.  
//  1 = CCS detected,  0 = CCS not detected. 
//  This status is automatically clear when theres a write to the CMD_DAT_CTRL register or to  
//  the CCS_DT field. Valid only in CE-ATA mode
#define HSMMC_STATUS_0_CCS_DT_SHIFT                     _MK_SHIFT_CONST(17)
#define HSMMC_STATUS_0_CCS_DT_FIELD                     (_MK_MASK_CONST(0x1) << HSMMC_STATUS_0_CCS_DT_SHIFT)
#define HSMMC_STATUS_0_CCS_DT_RANGE                     17:17
#define HSMMC_STATUS_0_CCS_DT_WOFFSET                   0x0
#define HSMMC_STATUS_0_CCS_DT_DEFAULT                   _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_CCS_DT_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define HSMMC_STATUS_0_CCS_DT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_CCS_DT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_CCS_DT_NOT_DET                   _MK_ENUM_CONST(0)
#define HSMMC_STATUS_0_CCS_DT_DET                       _MK_ENUM_CONST(1)

//   CE-ATA command command completion signal disable (CCSD) packet sent.
//   1 = CCSD sent to card, 0 = CCSD not sent to the card yet. 
//   This status is automatically clear when theres a write to the CMD_DAT_CTRL register or to 
//    the CCSD_ISS field. Valid only in CE-ATA mode
#define HSMMC_STATUS_0_CCSD_ISS_SHIFT                   _MK_SHIFT_CONST(16)
#define HSMMC_STATUS_0_CCSD_ISS_FIELD                   (_MK_MASK_CONST(0x1) << HSMMC_STATUS_0_CCSD_ISS_SHIFT)
#define HSMMC_STATUS_0_CCSD_ISS_RANGE                   16:16
#define HSMMC_STATUS_0_CCSD_ISS_WOFFSET                 0x0
#define HSMMC_STATUS_0_CCSD_ISS_DEFAULT                 _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_CCSD_ISS_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define HSMMC_STATUS_0_CCSD_ISS_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_CCSD_ISS_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_CCSD_ISS_NOT_SENT                        _MK_ENUM_CONST(0)
#define HSMMC_STATUS_0_CCSD_ISS_SENT                    _MK_ENUM_CONST(1)

//   Busy signal deassert from card reported from command FSM.
//   1 = busy deassserted, 0 = busy still asserted. 
//   This status gets automatically cleared when there is a write to the CMD_DAT_CTL register or 
//   to the PRGCMD_DN field.
#define HSMMC_STATUS_0_PRGCMD_DN_SHIFT                  _MK_SHIFT_CONST(15)
#define HSMMC_STATUS_0_PRGCMD_DN_FIELD                  (_MK_MASK_CONST(0x1) << HSMMC_STATUS_0_PRGCMD_DN_SHIFT)
#define HSMMC_STATUS_0_PRGCMD_DN_RANGE                  15:15
#define HSMMC_STATUS_0_PRGCMD_DN_WOFFSET                        0x0
#define HSMMC_STATUS_0_PRGCMD_DN_DEFAULT                        _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_PRGCMD_DN_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define HSMMC_STATUS_0_PRGCMD_DN_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_PRGCMD_DN_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_PRGCMD_DN_PRGCMD_DONE                    _MK_ENUM_CONST(1)
#define HSMMC_STATUS_0_PRGCMD_DN_PRGCMD_NOTDONE                 _MK_ENUM_CONST(0)

//   DMA transfer completed.
//   1 = completed, 0 = not complete. 
//   This status is automatically clear when theres a write to the CMD_DAT_CTRL register or to 
//   the DMA_DN field.
#define HSMMC_STATUS_0_DMA_DN_SHIFT                     _MK_SHIFT_CONST(14)
#define HSMMC_STATUS_0_DMA_DN_FIELD                     (_MK_MASK_CONST(0x1) << HSMMC_STATUS_0_DMA_DN_SHIFT)
#define HSMMC_STATUS_0_DMA_DN_RANGE                     14:14
#define HSMMC_STATUS_0_DMA_DN_WOFFSET                   0x0
#define HSMMC_STATUS_0_DMA_DN_DEFAULT                   _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_DMA_DN_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define HSMMC_STATUS_0_DMA_DN_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_DMA_DN_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_DMA_DN_DMA_DONE                  _MK_ENUM_CONST(1)
#define HSMMC_STATUS_0_DMA_DN_DMA_NOTDONE                       _MK_ENUM_CONST(0)

//   Command/response completed.
//   1 = completed, 0 = not complete. 
//      This status is automatically clear when theres a write to the CMD_DAT_CTRL register or to 
//   the CMD_DN field.
#define HSMMC_STATUS_0_CMD_DN_SHIFT                     _MK_SHIFT_CONST(13)
#define HSMMC_STATUS_0_CMD_DN_FIELD                     (_MK_MASK_CONST(0x1) << HSMMC_STATUS_0_CMD_DN_SHIFT)
#define HSMMC_STATUS_0_CMD_DN_RANGE                     13:13
#define HSMMC_STATUS_0_CMD_DN_WOFFSET                   0x0
#define HSMMC_STATUS_0_CMD_DN_DEFAULT                   _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_CMD_DN_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define HSMMC_STATUS_0_CMD_DN_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_CMD_DN_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_CMD_DN_CMD_DONE                  _MK_ENUM_CONST(1)
#define HSMMC_STATUS_0_CMD_DN_CMD_NOTDONE                       _MK_ENUM_CONST(0)

//  Busy signal deasserted from card reported from data FSM.
// 1 = busy deasserted, 0 = busy is still asserted. 
//    This status is automatically clear when theres a write to the CMD_DAT_CTRL register or to 
//   the PRG_DN field.
#define HSMMC_STATUS_0_PRG_DN_SHIFT                     _MK_SHIFT_CONST(12)
#define HSMMC_STATUS_0_PRG_DN_FIELD                     (_MK_MASK_CONST(0x1) << HSMMC_STATUS_0_PRG_DN_SHIFT)
#define HSMMC_STATUS_0_PRG_DN_RANGE                     12:12
#define HSMMC_STATUS_0_PRG_DN_WOFFSET                   0x0
#define HSMMC_STATUS_0_PRG_DN_DEFAULT                   _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_PRG_DN_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define HSMMC_STATUS_0_PRG_DN_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_PRG_DN_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_PRG_DN_PRG_DONE                  _MK_ENUM_CONST(1)
#define HSMMC_STATUS_0_PRG_DN_PRG_NOTDONE                       _MK_ENUM_CONST(0)

//   Data transfer is completed.
//   1 = completed, 0 = not complete. 
//   This status is automatically clear when theres a write to the CMD_DAT_CTRL register or to 
//      the DT_DN field.
#define HSMMC_STATUS_0_DT_DN_SHIFT                      _MK_SHIFT_CONST(11)
#define HSMMC_STATUS_0_DT_DN_FIELD                      (_MK_MASK_CONST(0x1) << HSMMC_STATUS_0_DT_DN_SHIFT)
#define HSMMC_STATUS_0_DT_DN_RANGE                      11:11
#define HSMMC_STATUS_0_DT_DN_WOFFSET                    0x0
#define HSMMC_STATUS_0_DT_DN_DEFAULT                    _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_DT_DN_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define HSMMC_STATUS_0_DT_DN_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_DT_DN_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_DT_DN_DATA_DONE                  _MK_ENUM_CONST(1)
#define HSMMC_STATUS_0_DT_DN_DATA_NOTDONE                       _MK_ENUM_CONST(0)

//   Response CRC error code. This bit is valid only when RSP_E field is high. 
//   00 = CRC error (data response status = 101), 
//   01 = write error (data response status = 110), 
//   10 = illegal data response status bits,  
//   11 = reserved.
#define HSMMC_STATUS_0_ERR_CODE_SHIFT                   _MK_SHIFT_CONST(9)
#define HSMMC_STATUS_0_ERR_CODE_FIELD                   (_MK_MASK_CONST(0x3) << HSMMC_STATUS_0_ERR_CODE_SHIFT)
#define HSMMC_STATUS_0_ERR_CODE_RANGE                   10:9
#define HSMMC_STATUS_0_ERR_CODE_WOFFSET                 0x0
#define HSMMC_STATUS_0_ERR_CODE_DEFAULT                 _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_ERR_CODE_DEFAULT_MASK                    _MK_MASK_CONST(0x3)
#define HSMMC_STATUS_0_ERR_CODE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_ERR_CODE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_ERR_CODE_CRC_ERROR                       _MK_ENUM_CONST(0)
#define HSMMC_STATUS_0_ERR_CODE_WRITE_ERROR                     _MK_ENUM_CONST(1)
#define HSMMC_STATUS_0_ERR_CODE_ILLEGAL_RESPONSE                        _MK_ENUM_CONST(2)
#define HSMMC_STATUS_0_ERR_CODE_RSVD                    _MK_ENUM_CONST(3)

//  MMC clock state.
//  1 = MMC clock stopped, 0 = MMC Clock is running.
#define HSMMC_STATUS_0_CLK_ST_SHIFT                     _MK_SHIFT_CONST(8)
#define HSMMC_STATUS_0_CLK_ST_FIELD                     (_MK_MASK_CONST(0x1) << HSMMC_STATUS_0_CLK_ST_SHIFT)
#define HSMMC_STATUS_0_CLK_ST_RANGE                     8:8
#define HSMMC_STATUS_0_CLK_ST_WOFFSET                   0x0
#define HSMMC_STATUS_0_CLK_ST_DEFAULT                   _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_CLK_ST_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define HSMMC_STATUS_0_CLK_ST_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_CLK_ST_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

//  Response CRC error.
//  1 = detected error, 0 = no error. 
//  This status is automatically clear when theres a write to RSP_E field.
#define HSMMC_STATUS_0_RSP_E_SHIFT                      _MK_SHIFT_CONST(5)
#define HSMMC_STATUS_0_RSP_E_FIELD                      (_MK_MASK_CONST(0x1) << HSMMC_STATUS_0_RSP_E_SHIFT)
#define HSMMC_STATUS_0_RSP_E_RANGE                      5:5
#define HSMMC_STATUS_0_RSP_E_WOFFSET                    0x0
#define HSMMC_STATUS_0_RSP_E_DEFAULT                    _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_RSP_E_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define HSMMC_STATUS_0_RSP_E_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_RSP_E_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_RSP_E_RESP_CRC_ERR                       _MK_ENUM_CONST(1)
#define HSMMC_STATUS_0_RSP_E_RESP_NO_ERR                        _MK_ENUM_CONST(0)

//  SPI data error.
//  1 = detected error, 0 = no error. 
//  This status is automatically clear when theres a write to SPI_R field.
#define HSMMC_STATUS_0_SPI_R_SHIFT                      _MK_SHIFT_CONST(4)
#define HSMMC_STATUS_0_SPI_R_FIELD                      (_MK_MASK_CONST(0x1) << HSMMC_STATUS_0_SPI_R_SHIFT)
#define HSMMC_STATUS_0_SPI_R_RANGE                      4:4
#define HSMMC_STATUS_0_SPI_R_WOFFSET                    0x0
#define HSMMC_STATUS_0_SPI_R_DEFAULT                    _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_SPI_R_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define HSMMC_STATUS_0_SPI_R_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_SPI_R_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_SPI_R_SPI_ERR                    _MK_ENUM_CONST(1)
#define HSMMC_STATUS_0_SPI_R_SPI_NO_ERR                 _MK_ENUM_CONST(0)

//  Data CRC read error.
//  1 = detected error, 0 = no error. 
//      This status is automatically clear when theres a write to CRC_R field.
#define HSMMC_STATUS_0_CRC_R_SHIFT                      _MK_SHIFT_CONST(3)
#define HSMMC_STATUS_0_CRC_R_FIELD                      (_MK_MASK_CONST(0x1) << HSMMC_STATUS_0_CRC_R_SHIFT)
#define HSMMC_STATUS_0_CRC_R_RANGE                      3:3
#define HSMMC_STATUS_0_CRC_R_WOFFSET                    0x0
#define HSMMC_STATUS_0_CRC_R_DEFAULT                    _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_CRC_R_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define HSMMC_STATUS_0_CRC_R_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_CRC_R_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_CRC_R_RD_CRC_ERR                 _MK_ENUM_CONST(1)
#define HSMMC_STATUS_0_CRC_R_RD_NO_ERR                  _MK_ENUM_CONST(0)

//  Data CRC write error.
//  1 = detected error, 0 = no error. 
//     This status is automatically clear when theres a write to CRC_W field.
#define HSMMC_STATUS_0_CRC_W_SHIFT                      _MK_SHIFT_CONST(2)
#define HSMMC_STATUS_0_CRC_W_FIELD                      (_MK_MASK_CONST(0x1) << HSMMC_STATUS_0_CRC_W_SHIFT)
#define HSMMC_STATUS_0_CRC_W_RANGE                      2:2
#define HSMMC_STATUS_0_CRC_W_WOFFSET                    0x0
#define HSMMC_STATUS_0_CRC_W_DEFAULT                    _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_CRC_W_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define HSMMC_STATUS_0_CRC_W_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_CRC_W_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_CRC_W_WR_CRC_ERR                 _MK_ENUM_CONST(1)
#define HSMMC_STATUS_0_CRC_W_WR_NO_ERR                  _MK_ENUM_CONST(0)

//  Response timeout.
//  1 = detected timeout, 0 = no timeout. 
//  This status is automatically clear when theres a write to TO_RS field.
#define HSMMC_STATUS_0_TO_RS_SHIFT                      _MK_SHIFT_CONST(1)
#define HSMMC_STATUS_0_TO_RS_FIELD                      (_MK_MASK_CONST(0x1) << HSMMC_STATUS_0_TO_RS_SHIFT)
#define HSMMC_STATUS_0_TO_RS_RANGE                      1:1
#define HSMMC_STATUS_0_TO_RS_WOFFSET                    0x0
#define HSMMC_STATUS_0_TO_RS_DEFAULT                    _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_TO_RS_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define HSMMC_STATUS_0_TO_RS_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_TO_RS_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_TO_RS_RSP_TO                     _MK_ENUM_CONST(1)
#define HSMMC_STATUS_0_TO_RS_RSP_RCVD                   _MK_ENUM_CONST(0)

//  Data read timeout.
//  1 = detected timeout, 0 = no timeout. 
//    This status is automatically clear when theres a write to TO_RD field.
#define HSMMC_STATUS_0_TO_RD_SHIFT                      _MK_SHIFT_CONST(0)
#define HSMMC_STATUS_0_TO_RD_FIELD                      (_MK_MASK_CONST(0x1) << HSMMC_STATUS_0_TO_RD_SHIFT)
#define HSMMC_STATUS_0_TO_RD_RANGE                      0:0
#define HSMMC_STATUS_0_TO_RD_WOFFSET                    0x0
#define HSMMC_STATUS_0_TO_RD_DEFAULT                    _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_TO_RD_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define HSMMC_STATUS_0_TO_RD_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_TO_RD_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define HSMMC_STATUS_0_TO_RD_RD_TO                      _MK_ENUM_CONST(1)
#define HSMMC_STATUS_0_TO_RD_RD_RCVD                    _MK_ENUM_CONST(0)

// Clock Rate Register

// Register HSMMC_CLK_RATE_0  
#define HSMMC_CLK_RATE_0                        _MK_ADDR_CONST(0x8)
#define HSMMC_CLK_RATE_0_WORD_COUNT                     0x1
#define HSMMC_CLK_RATE_0_RESET_VAL                      _MK_MASK_CONST(0x6)
#define HSMMC_CLK_RATE_0_RESET_MASK                     _MK_MASK_CONST(0x7)
#define HSMMC_CLK_RATE_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define HSMMC_CLK_RATE_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define HSMMC_CLK_RATE_0_READ_MASK                      _MK_MASK_CONST(0x7)
#define HSMMC_CLK_RATE_0_WRITE_MASK                     _MK_MASK_CONST(0x7)
// MMC card clock rate. 
//             0h = same speed as master clock.
//             1h = 1/2 master clock speed.
//                 2h = 1/4 master clock speed.
//                 3h = 1/8 master clock speed.
//                 4h = 1/16 master clock speed.
//                5h = 1/32 master clock speed.
//                6h = 1/64 master clock speed.
//                7h = reserved
// This register should be updated only after the application has checked CLK.ST 
// to see the MMC card clock has stopped.
#define HSMMC_CLK_RATE_0_CLK_RATE_SHIFT                 _MK_SHIFT_CONST(0)
#define HSMMC_CLK_RATE_0_CLK_RATE_FIELD                 (_MK_MASK_CONST(0x7) << HSMMC_CLK_RATE_0_CLK_RATE_SHIFT)
#define HSMMC_CLK_RATE_0_CLK_RATE_RANGE                 2:0
#define HSMMC_CLK_RATE_0_CLK_RATE_WOFFSET                       0x0
#define HSMMC_CLK_RATE_0_CLK_RATE_DEFAULT                       _MK_MASK_CONST(0x6)
#define HSMMC_CLK_RATE_0_CLK_RATE_DEFAULT_MASK                  _MK_MASK_CONST(0x7)
#define HSMMC_CLK_RATE_0_CLK_RATE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define HSMMC_CLK_RATE_0_CLK_RATE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define HSMMC_CLK_RATE_0_CLK_RATE_NO_DIV                        _MK_ENUM_CONST(0)
#define HSMMC_CLK_RATE_0_CLK_RATE_HALF                  _MK_ENUM_CONST(1)
#define HSMMC_CLK_RATE_0_CLK_RATE_ONE_FOURTH                    _MK_ENUM_CONST(2)
#define HSMMC_CLK_RATE_0_CLK_RATE_ONE_EIGTH                     _MK_ENUM_CONST(3)
#define HSMMC_CLK_RATE_0_CLK_RATE_ONE_SIXTEENTH                 _MK_ENUM_CONST(4)
#define HSMMC_CLK_RATE_0_CLK_RATE_ONE_THIRTYSECOND                      _MK_ENUM_CONST(5)
#define HSMMC_CLK_RATE_0_CLK_RATE_ONE_SIXTYFOURTH                       _MK_ENUM_CONST(6)
#define HSMMC_CLK_RATE_0_CLK_RATE_RSVD                  _MK_ENUM_CONST(7)

// SPI Mode Control Register

// Register HSMMC_SPI_CTRL_0  
#define HSMMC_SPI_CTRL_0                        _MK_ADDR_CONST(0xc)
#define HSMMC_SPI_CTRL_0_WORD_COUNT                     0x1
#define HSMMC_SPI_CTRL_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define HSMMC_SPI_CTRL_0_RESET_MASK                     _MK_MASK_CONST(0x27)
#define HSMMC_SPI_CTRL_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define HSMMC_SPI_CTRL_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define HSMMC_SPI_CTRL_0_READ_MASK                      _MK_MASK_CONST(0x27)
#define HSMMC_SPI_CTRL_0_WRITE_MASK                     _MK_MASK_CONST(0x27)
// SPI chip select. 0h = select card 0, 1h = select card 1, , 7h = select card 7.
#define HSMMC_SPI_CTRL_0_SPI_CS_ADDR_SHIFT                      _MK_SHIFT_CONST(5)
#define HSMMC_SPI_CTRL_0_SPI_CS_ADDR_FIELD                      (_MK_MASK_CONST(0x1) << HSMMC_SPI_CTRL_0_SPI_CS_ADDR_SHIFT)
#define HSMMC_SPI_CTRL_0_SPI_CS_ADDR_RANGE                      5:5
#define HSMMC_SPI_CTRL_0_SPI_CS_ADDR_WOFFSET                    0x0
#define HSMMC_SPI_CTRL_0_SPI_CS_ADDR_DEFAULT                    _MK_MASK_CONST(0x0)
#define HSMMC_SPI_CTRL_0_SPI_CS_ADDR_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define HSMMC_SPI_CTRL_0_SPI_CS_ADDR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define HSMMC_SPI_CTRL_0_SPI_CS_ADDR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Enable SPI chip select.  1 = enable,  0 = disable.
#define HSMMC_SPI_CTRL_0_SPI_CS_SHIFT                   _MK_SHIFT_CONST(2)
#define HSMMC_SPI_CTRL_0_SPI_CS_FIELD                   (_MK_MASK_CONST(0x1) << HSMMC_SPI_CTRL_0_SPI_CS_SHIFT)
#define HSMMC_SPI_CTRL_0_SPI_CS_RANGE                   2:2
#define HSMMC_SPI_CTRL_0_SPI_CS_WOFFSET                 0x0
#define HSMMC_SPI_CTRL_0_SPI_CS_DEFAULT                 _MK_MASK_CONST(0x0)
#define HSMMC_SPI_CTRL_0_SPI_CS_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define HSMMC_SPI_CTRL_0_SPI_CS_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define HSMMC_SPI_CTRL_0_SPI_CS_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define HSMMC_SPI_CTRL_0_SPI_CS_DISABLE                 _MK_ENUM_CONST(0)
#define HSMMC_SPI_CTRL_0_SPI_CS_ENABLE                  _MK_ENUM_CONST(1)

// Enable SPI CRC. 1 = enable, 0 = disable.
#define HSMMC_SPI_CTRL_0_CRC_ON_SHIFT                   _MK_SHIFT_CONST(1)
#define HSMMC_SPI_CTRL_0_CRC_ON_FIELD                   (_MK_MASK_CONST(0x1) << HSMMC_SPI_CTRL_0_CRC_ON_SHIFT)
#define HSMMC_SPI_CTRL_0_CRC_ON_RANGE                   1:1
#define HSMMC_SPI_CTRL_0_CRC_ON_WOFFSET                 0x0
#define HSMMC_SPI_CTRL_0_CRC_ON_DEFAULT                 _MK_MASK_CONST(0x0)
#define HSMMC_SPI_CTRL_0_CRC_ON_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define HSMMC_SPI_CTRL_0_CRC_ON_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define HSMMC_SPI_CTRL_0_CRC_ON_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define HSMMC_SPI_CTRL_0_CRC_ON_ON                      _MK_ENUM_CONST(0)
#define HSMMC_SPI_CTRL_0_CRC_ON_OFF                     _MK_ENUM_CONST(1)

// Enable SPI mode. 1 = SPI mode, 0 = MMC mode.
#define HSMMC_SPI_CTRL_0_SPI_EN_SHIFT                   _MK_SHIFT_CONST(0)
#define HSMMC_SPI_CTRL_0_SPI_EN_FIELD                   (_MK_MASK_CONST(0x1) << HSMMC_SPI_CTRL_0_SPI_EN_SHIFT)
#define HSMMC_SPI_CTRL_0_SPI_EN_RANGE                   0:0
#define HSMMC_SPI_CTRL_0_SPI_EN_WOFFSET                 0x0
#define HSMMC_SPI_CTRL_0_SPI_EN_DEFAULT                 _MK_MASK_CONST(0x0)
#define HSMMC_SPI_CTRL_0_SPI_EN_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define HSMMC_SPI_CTRL_0_SPI_EN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define HSMMC_SPI_CTRL_0_SPI_EN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define HSMMC_SPI_CTRL_0_SPI_EN_DISABLE                 _MK_ENUM_CONST(0)
#define HSMMC_SPI_CTRL_0_SPI_EN_ENABLE                  _MK_ENUM_CONST(1)

// Command Data Control Register

// Register HSMMC_CMD_DAT_CTRL_0  
#define HSMMC_CMD_DAT_CTRL_0                    _MK_ADDR_CONST(0x10)
#define HSMMC_CMD_DAT_CTRL_0_WORD_COUNT                         0x1
#define HSMMC_CMD_DAT_CTRL_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_RESET_MASK                         _MK_MASK_CONST(0xc0003fbf)
#define HSMMC_CMD_DAT_CTRL_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_READ_MASK                  _MK_MASK_CONST(0xc0003fbf)
#define HSMMC_CMD_DAT_CTRL_0_WRITE_MASK                         _MK_MASK_CONST(0xc0003fbf)
//  Enable CE-ATA mode.  1 = CE-ATA mode, 0 = non-CE-ATA mode. 
//  When enable, this will disable the host controller from auto-generating 
//  CMD-12 (stop  transmission command).
#define HSMMC_CMD_DAT_CTRL_0_CEATA_SHIFT                        _MK_SHIFT_CONST(31)
#define HSMMC_CMD_DAT_CTRL_0_CEATA_FIELD                        (_MK_MASK_CONST(0x1) << HSMMC_CMD_DAT_CTRL_0_CEATA_SHIFT)
#define HSMMC_CMD_DAT_CTRL_0_CEATA_RANGE                        31:31
#define HSMMC_CMD_DAT_CTRL_0_CEATA_WOFFSET                      0x0
#define HSMMC_CMD_DAT_CTRL_0_CEATA_DEFAULT                      _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_CEATA_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define HSMMC_CMD_DAT_CTRL_0_CEATA_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_CEATA_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_CEATA_CEATA_MODE_EN                        _MK_ENUM_CONST(1)
#define HSMMC_CMD_DAT_CTRL_0_CEATA_CEATA_MODE_DIS                       _MK_ENUM_CONST(0)

//  Enable CE-ATA command completion signal (CCS) protocol.
//  1 = enable, 0 = disable. 
//  When enable during a certain command, it indicates to the host controller 
//  whether to expect the command completion signal protocol.
#define HSMMC_CMD_DAT_CTRL_0_ENB_CCS_SHIFT                      _MK_SHIFT_CONST(30)
#define HSMMC_CMD_DAT_CTRL_0_ENB_CCS_FIELD                      (_MK_MASK_CONST(0x1) << HSMMC_CMD_DAT_CTRL_0_ENB_CCS_SHIFT)
#define HSMMC_CMD_DAT_CTRL_0_ENB_CCS_RANGE                      30:30
#define HSMMC_CMD_DAT_CTRL_0_ENB_CCS_WOFFSET                    0x0
#define HSMMC_CMD_DAT_CTRL_0_ENB_CCS_DEFAULT                    _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_ENB_CCS_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define HSMMC_CMD_DAT_CTRL_0_ENB_CCS_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_ENB_CCS_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_ENB_CCS_CCS_EN                     _MK_ENUM_CONST(1)
#define HSMMC_CMD_DAT_CTRL_0_ENB_CCS_CCS_DIS                    _MK_ENUM_CONST(0)

//  Enable the use of "Number of Blocks" transfer feature.  1 = enable, 0 = disable.
#define HSMMC_CMD_DAT_CTRL_0_NOB_ON_SHIFT                       _MK_SHIFT_CONST(13)
#define HSMMC_CMD_DAT_CTRL_0_NOB_ON_FIELD                       (_MK_MASK_CONST(0x1) << HSMMC_CMD_DAT_CTRL_0_NOB_ON_SHIFT)
#define HSMMC_CMD_DAT_CTRL_0_NOB_ON_RANGE                       13:13
#define HSMMC_CMD_DAT_CTRL_0_NOB_ON_WOFFSET                     0x0
#define HSMMC_CMD_DAT_CTRL_0_NOB_ON_DEFAULT                     _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_NOB_ON_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define HSMMC_CMD_DAT_CTRL_0_NOB_ON_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_NOB_ON_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_NOB_ON_NOBLKS_ON                   _MK_ENUM_CONST(1)
#define HSMMC_CMD_DAT_CTRL_0_NOB_ON_NOBLKS_OFF                  _MK_ENUM_CONST(0)

//  Enable changing the "WIDE" field.  1 = enable, 0 = disable.
#define HSMMC_CMD_DAT_CTRL_0_WE_WIDE_SHIFT                      _MK_SHIFT_CONST(12)
#define HSMMC_CMD_DAT_CTRL_0_WE_WIDE_FIELD                      (_MK_MASK_CONST(0x1) << HSMMC_CMD_DAT_CTRL_0_WE_WIDE_SHIFT)
#define HSMMC_CMD_DAT_CTRL_0_WE_WIDE_RANGE                      12:12
#define HSMMC_CMD_DAT_CTRL_0_WE_WIDE_WOFFSET                    0x0
#define HSMMC_CMD_DAT_CTRL_0_WE_WIDE_DEFAULT                    _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_WE_WIDE_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define HSMMC_CMD_DAT_CTRL_0_WE_WIDE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_WE_WIDE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_WE_WIDE_WR_TO_WIDE                 _MK_ENUM_CONST(1)
#define HSMMC_CMD_DAT_CTRL_0_WE_WIDE_WR_TO_WIDE_DIS                     _MK_ENUM_CONST(0)

//  Data width of data transfer. 
//     00 = 1-bit data width.
//     01 = 4-bit data width.
//     10 = 8-bit data width.
//     11 = reserved.
#define HSMMC_CMD_DAT_CTRL_0_WIDE_SHIFT                 _MK_SHIFT_CONST(10)
#define HSMMC_CMD_DAT_CTRL_0_WIDE_FIELD                 (_MK_MASK_CONST(0x3) << HSMMC_CMD_DAT_CTRL_0_WIDE_SHIFT)
#define HSMMC_CMD_DAT_CTRL_0_WIDE_RANGE                 11:10
#define HSMMC_CMD_DAT_CTRL_0_WIDE_WOFFSET                       0x0
#define HSMMC_CMD_DAT_CTRL_0_WIDE_DEFAULT                       _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_WIDE_DEFAULT_MASK                  _MK_MASK_CONST(0x3)
#define HSMMC_CMD_DAT_CTRL_0_WIDE_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_WIDE_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_WIDE_ONE_BIT_MODE                  _MK_ENUM_CONST(0)
#define HSMMC_CMD_DAT_CTRL_0_WIDE_FOUR_BIT_MODE                 _MK_ENUM_CONST(1)
#define HSMMC_CMD_DAT_CTRL_0_WIDE_EIGHT_BIT_MODE                        _MK_ENUM_CONST(16)
#define HSMMC_CMD_DAT_CTRL_0_WIDE_RSVD                  _MK_ENUM_CONST(17)

//  Don't generate command.
//    1 = don't start command on MMC bus.
//          0 = start command on MMC bus.
//  This bit allows the application to write to this register without initiating 
//  a command on the MMC bus.
#define HSMMC_CMD_DAT_CTRL_0_NO_CMD_SHIFT                       _MK_SHIFT_CONST(9)
#define HSMMC_CMD_DAT_CTRL_0_NO_CMD_FIELD                       (_MK_MASK_CONST(0x1) << HSMMC_CMD_DAT_CTRL_0_NO_CMD_SHIFT)
#define HSMMC_CMD_DAT_CTRL_0_NO_CMD_RANGE                       9:9
#define HSMMC_CMD_DAT_CTRL_0_NO_CMD_WOFFSET                     0x0
#define HSMMC_CMD_DAT_CTRL_0_NO_CMD_DEFAULT                     _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_NO_CMD_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define HSMMC_CMD_DAT_CTRL_0_NO_CMD_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_NO_CMD_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_NO_CMD_SEND_NO_CMD                 _MK_ENUM_CONST(1)
#define HSMMC_CMD_DAT_CTRL_0_NO_CMD_NO_ACTION                   _MK_ENUM_CONST(1)

//  Enable card initialization.  1 = enable, 0 = disable.
#define HSMMC_CMD_DAT_CTRL_0_INIT_SHIFT                 _MK_SHIFT_CONST(8)
#define HSMMC_CMD_DAT_CTRL_0_INIT_FIELD                 (_MK_MASK_CONST(0x1) << HSMMC_CMD_DAT_CTRL_0_INIT_SHIFT)
#define HSMMC_CMD_DAT_CTRL_0_INIT_RANGE                 8:8
#define HSMMC_CMD_DAT_CTRL_0_INIT_WOFFSET                       0x0
#define HSMMC_CMD_DAT_CTRL_0_INIT_DEFAULT                       _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_INIT_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define HSMMC_CMD_DAT_CTRL_0_INIT_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_INIT_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_INIT_INIT_CMD                      _MK_ENUM_CONST(1)
#define HSMMC_CMD_DAT_CTRL_0_INIT_NON_INIT_CMD                  _MK_ENUM_CONST(0)

//  Use busy handshake for current command.
//    1 = expect busy handshake, 0 = no busy handshake.
#define HSMMC_CMD_DAT_CTRL_0_BUSY_SHIFT                 _MK_SHIFT_CONST(7)
#define HSMMC_CMD_DAT_CTRL_0_BUSY_FIELD                 (_MK_MASK_CONST(0x1) << HSMMC_CMD_DAT_CTRL_0_BUSY_SHIFT)
#define HSMMC_CMD_DAT_CTRL_0_BUSY_RANGE                 7:7
#define HSMMC_CMD_DAT_CTRL_0_BUSY_WOFFSET                       0x0
#define HSMMC_CMD_DAT_CTRL_0_BUSY_DEFAULT                       _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_BUSY_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define HSMMC_CMD_DAT_CTRL_0_BUSY_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_BUSY_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_BUSY_RSP_WITH_BSY                  _MK_ENUM_CONST(1)
#define HSMMC_CMD_DAT_CTRL_0_BUSY_RSP_NO_BSY                    _MK_ENUM_CONST(0)

//  Multiple block mode.  1 = multiple block mode, 0 = single block mode.
#define HSMMC_CMD_DAT_CTRL_0_MULTB_SHIFT                        _MK_SHIFT_CONST(5)
#define HSMMC_CMD_DAT_CTRL_0_MULTB_FIELD                        (_MK_MASK_CONST(0x1) << HSMMC_CMD_DAT_CTRL_0_MULTB_SHIFT)
#define HSMMC_CMD_DAT_CTRL_0_MULTB_RANGE                        5:5
#define HSMMC_CMD_DAT_CTRL_0_MULTB_WOFFSET                      0x0
#define HSMMC_CMD_DAT_CTRL_0_MULTB_DEFAULT                      _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_MULTB_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define HSMMC_CMD_DAT_CTRL_0_MULTB_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_MULTB_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_MULTB_MULTI_BLK_EN                 _MK_ENUM_CONST(1)
#define HSMMC_CMD_DAT_CTRL_0_MULTB_SINGLE_BLK_EN                        _MK_ENUM_CONST(0)

//  Stream mode.  1 = stream mode, 0 = block mode.
#define HSMMC_CMD_DAT_CTRL_0_STRM_SHIFT                 _MK_SHIFT_CONST(4)
#define HSMMC_CMD_DAT_CTRL_0_STRM_FIELD                 (_MK_MASK_CONST(0x1) << HSMMC_CMD_DAT_CTRL_0_STRM_SHIFT)
#define HSMMC_CMD_DAT_CTRL_0_STRM_RANGE                 4:4
#define HSMMC_CMD_DAT_CTRL_0_STRM_WOFFSET                       0x0
#define HSMMC_CMD_DAT_CTRL_0_STRM_DEFAULT                       _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_STRM_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define HSMMC_CMD_DAT_CTRL_0_STRM_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_STRM_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_STRM_STREAM_MODE_EN                        _MK_ENUM_CONST(1)
#define HSMMC_CMD_DAT_CTRL_0_STRM_STREAM_MODE_DIS                       _MK_ENUM_CONST(0)

//  Write data transfer.  1 = write data transfer, 0 = read data transfer.
#define HSMMC_CMD_DAT_CTRL_0_WR_RD_SHIFT                        _MK_SHIFT_CONST(3)
#define HSMMC_CMD_DAT_CTRL_0_WR_RD_FIELD                        (_MK_MASK_CONST(0x1) << HSMMC_CMD_DAT_CTRL_0_WR_RD_SHIFT)
#define HSMMC_CMD_DAT_CTRL_0_WR_RD_RANGE                        3:3
#define HSMMC_CMD_DAT_CTRL_0_WR_RD_WOFFSET                      0x0
#define HSMMC_CMD_DAT_CTRL_0_WR_RD_DEFAULT                      _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_WR_RD_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define HSMMC_CMD_DAT_CTRL_0_WR_RD_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_WR_RD_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_WR_RD_WR                   _MK_ENUM_CONST(1)
#define HSMMC_CMD_DAT_CTRL_0_WR_RD_RD                   _MK_ENUM_CONST(0)

//  Data transfer comamnd.  1 = with data transfer, 0 = no data transfer.
#define HSMMC_CMD_DAT_CTRL_0_DATA_SHIFT                 _MK_SHIFT_CONST(2)
#define HSMMC_CMD_DAT_CTRL_0_DATA_FIELD                 (_MK_MASK_CONST(0x1) << HSMMC_CMD_DAT_CTRL_0_DATA_SHIFT)
#define HSMMC_CMD_DAT_CTRL_0_DATA_RANGE                 2:2
#define HSMMC_CMD_DAT_CTRL_0_DATA_WOFFSET                       0x0
#define HSMMC_CMD_DAT_CTRL_0_DATA_DEFAULT                       _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_DATA_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define HSMMC_CMD_DAT_CTRL_0_DATA_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_DATA_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_DATA_ADTC_CMD                      _MK_ENUM_CONST(1)
#define HSMMC_CMD_DAT_CTRL_0_DATA_NON_ADTC_CMD                  _MK_ENUM_CONST(0)

//  Response format.
//    00 = no response.
//    01 = R1 response format.
//    10 = R2 response format.
//    11 = R3 response format.
#define HSMMC_CMD_DAT_CTRL_0_RSP_FORMAT_SHIFT                   _MK_SHIFT_CONST(0)
#define HSMMC_CMD_DAT_CTRL_0_RSP_FORMAT_FIELD                   (_MK_MASK_CONST(0x3) << HSMMC_CMD_DAT_CTRL_0_RSP_FORMAT_SHIFT)
#define HSMMC_CMD_DAT_CTRL_0_RSP_FORMAT_RANGE                   1:0
#define HSMMC_CMD_DAT_CTRL_0_RSP_FORMAT_WOFFSET                 0x0
#define HSMMC_CMD_DAT_CTRL_0_RSP_FORMAT_DEFAULT                 _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_RSP_FORMAT_DEFAULT_MASK                    _MK_MASK_CONST(0x3)
#define HSMMC_CMD_DAT_CTRL_0_RSP_FORMAT_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_RSP_FORMAT_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define HSMMC_CMD_DAT_CTRL_0_RSP_FORMAT_NO_RESP                 _MK_ENUM_CONST(0)
#define HSMMC_CMD_DAT_CTRL_0_RSP_FORMAT_R1_RESP                 _MK_ENUM_CONST(1)
#define HSMMC_CMD_DAT_CTRL_0_RSP_FORMAT_R2_RESP                 _MK_ENUM_CONST(2)
#define HSMMC_CMD_DAT_CTRL_0_RSP_FORMAT_R3_RESP                 _MK_ENUM_CONST(3)

// Response Time-Out Value Register

// Register HSMMC_RESP_TO_0  
#define HSMMC_RESP_TO_0                 _MK_ADDR_CONST(0x14)
#define HSMMC_RESP_TO_0_WORD_COUNT                      0x1
#define HSMMC_RESP_TO_0_RESET_VAL                       _MK_MASK_CONST(0x40)
#define HSMMC_RESP_TO_0_RESET_MASK                      _MK_MASK_CONST(0x7f)
#define HSMMC_RESP_TO_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define HSMMC_RESP_TO_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define HSMMC_RESP_TO_0_READ_MASK                       _MK_MASK_CONST(0x7f)
#define HSMMC_RESP_TO_0_WRITE_MASK                      _MK_MASK_CONST(0x7f)
// Response timeout.  Specify the number of MMC card clocks after command, before the 
// HSMMC controller set the TO_RS status bit for the received response.
#define HSMMC_RESP_TO_0_RES_TO_SHIFT                    _MK_SHIFT_CONST(0)
#define HSMMC_RESP_TO_0_RES_TO_FIELD                    (_MK_MASK_CONST(0x7f) << HSMMC_RESP_TO_0_RES_TO_SHIFT)
#define HSMMC_RESP_TO_0_RES_TO_RANGE                    6:0
#define HSMMC_RESP_TO_0_RES_TO_WOFFSET                  0x0
#define HSMMC_RESP_TO_0_RES_TO_DEFAULT                  _MK_MASK_CONST(0x40)
#define HSMMC_RESP_TO_0_RES_TO_DEFAULT_MASK                     _MK_MASK_CONST(0x7f)
#define HSMMC_RESP_TO_0_RES_TO_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define HSMMC_RESP_TO_0_RES_TO_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Read Time-Out value Register

// Register HSMMC_MMC_READ_TO_0  
#define HSMMC_MMC_READ_TO_0                     _MK_ADDR_CONST(0x18)
#define HSMMC_MMC_READ_TO_0_WORD_COUNT                  0x1
#define HSMMC_MMC_READ_TO_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define HSMMC_MMC_READ_TO_0_RESET_MASK                  _MK_MASK_CONST(0xffff)
#define HSMMC_MMC_READ_TO_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define HSMMC_MMC_READ_TO_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define HSMMC_MMC_READ_TO_0_READ_MASK                   _MK_MASK_CONST(0xffff)
#define HSMMC_MMC_READ_TO_0_WRITE_MASK                  _MK_MASK_CONST(0xffff)
// Read timeout.  Specify the number of clocks (256 MMC card clock) after command, before 
// the HSMMC controller set the TO_RD status bit for the received data.
#define HSMMC_MMC_READ_TO_0_READ_TO_SHIFT                       _MK_SHIFT_CONST(0)
#define HSMMC_MMC_READ_TO_0_READ_TO_FIELD                       (_MK_MASK_CONST(0xffff) << HSMMC_MMC_READ_TO_0_READ_TO_SHIFT)
#define HSMMC_MMC_READ_TO_0_READ_TO_RANGE                       15:0
#define HSMMC_MMC_READ_TO_0_READ_TO_WOFFSET                     0x0
#define HSMMC_MMC_READ_TO_0_READ_TO_DEFAULT                     _MK_MASK_CONST(0x0)
#define HSMMC_MMC_READ_TO_0_READ_TO_DEFAULT_MASK                        _MK_MASK_CONST(0xffff)
#define HSMMC_MMC_READ_TO_0_READ_TO_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define HSMMC_MMC_READ_TO_0_READ_TO_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Block Length Register

// Register HSMMC_BLK_LEN_0  
#define HSMMC_BLK_LEN_0                 _MK_ADDR_CONST(0x1c)
#define HSMMC_BLK_LEN_0_WORD_COUNT                      0x1
#define HSMMC_BLK_LEN_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define HSMMC_BLK_LEN_0_RESET_MASK                      _MK_MASK_CONST(0xffff)
#define HSMMC_BLK_LEN_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define HSMMC_BLK_LEN_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define HSMMC_BLK_LEN_0_READ_MASK                       _MK_MASK_CONST(0xffff)
#define HSMMC_BLK_LEN_0_WRITE_MASK                      _MK_MASK_CONST(0xffff)
// Block length.  Specify the block length for the data transfer.
#define HSMMC_BLK_LEN_0_BLK_LEN_SHIFT                   _MK_SHIFT_CONST(0)
#define HSMMC_BLK_LEN_0_BLK_LEN_FIELD                   (_MK_MASK_CONST(0xffff) << HSMMC_BLK_LEN_0_BLK_LEN_SHIFT)
#define HSMMC_BLK_LEN_0_BLK_LEN_RANGE                   15:0
#define HSMMC_BLK_LEN_0_BLK_LEN_WOFFSET                 0x0
#define HSMMC_BLK_LEN_0_BLK_LEN_DEFAULT                 _MK_MASK_CONST(0x0)
#define HSMMC_BLK_LEN_0_BLK_LEN_DEFAULT_MASK                    _MK_MASK_CONST(0xffff)
#define HSMMC_BLK_LEN_0_BLK_LEN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define HSMMC_BLK_LEN_0_BLK_LEN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Number of Blocks Register

// Register HSMMC_NUM_OF_BLKS_0  
#define HSMMC_NUM_OF_BLKS_0                     _MK_ADDR_CONST(0x20)
#define HSMMC_NUM_OF_BLKS_0_WORD_COUNT                  0x1
#define HSMMC_NUM_OF_BLKS_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define HSMMC_NUM_OF_BLKS_0_RESET_MASK                  _MK_MASK_CONST(0xffff)
#define HSMMC_NUM_OF_BLKS_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define HSMMC_NUM_OF_BLKS_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define HSMMC_NUM_OF_BLKS_0_READ_MASK                   _MK_MASK_CONST(0xffff)
#define HSMMC_NUM_OF_BLKS_0_WRITE_MASK                  _MK_MASK_CONST(0xffff)
// Number of Blocks.  Specify the number of blocks for the data transfer when NOB_ON is set to 1.
#define HSMMC_NUM_OF_BLKS_0_NOB_SHIFT                   _MK_SHIFT_CONST(0)
#define HSMMC_NUM_OF_BLKS_0_NOB_FIELD                   (_MK_MASK_CONST(0xffff) << HSMMC_NUM_OF_BLKS_0_NOB_SHIFT)
#define HSMMC_NUM_OF_BLKS_0_NOB_RANGE                   15:0
#define HSMMC_NUM_OF_BLKS_0_NOB_WOFFSET                 0x0
#define HSMMC_NUM_OF_BLKS_0_NOB_DEFAULT                 _MK_MASK_CONST(0x0)
#define HSMMC_NUM_OF_BLKS_0_NOB_DEFAULT_MASK                    _MK_MASK_CONST(0xffff)
#define HSMMC_NUM_OF_BLKS_0_NOB_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define HSMMC_NUM_OF_BLKS_0_NOB_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Interrupt Mask Register

// Register HSMMC_INT_MASK_0  
#define HSMMC_INT_MASK_0                        _MK_ADDR_CONST(0x24)
#define HSMMC_INT_MASK_0_WORD_COUNT                     0x1
#define HSMMC_INT_MASK_0_RESET_VAL                      _MK_MASK_CONST(0x3f)
#define HSMMC_INT_MASK_0_RESET_MASK                     _MK_MASK_CONST(0x7f)
#define HSMMC_INT_MASK_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define HSMMC_INT_MASK_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define HSMMC_INT_MASK_0_READ_MASK                      _MK_MASK_CONST(0x7f)
#define HSMMC_INT_MASK_0_WRITE_MASK                     _MK_MASK_CONST(0x7f)
//  Command FSM program done interrupt mask.  1 = mask interrupt, 0 = allow the interrupt.
//  This indicates whether to generate an interrupt when PRGCMD_DN is active.
#define HSMMC_INT_MASK_0_PROG_CMD_SHIFT                 _MK_SHIFT_CONST(6)
#define HSMMC_INT_MASK_0_PROG_CMD_FIELD                 (_MK_MASK_CONST(0x1) << HSMMC_INT_MASK_0_PROG_CMD_SHIFT)
#define HSMMC_INT_MASK_0_PROG_CMD_RANGE                 6:6
#define HSMMC_INT_MASK_0_PROG_CMD_WOFFSET                       0x0
#define HSMMC_INT_MASK_0_PROG_CMD_DEFAULT                       _MK_MASK_CONST(0x0)
#define HSMMC_INT_MASK_0_PROG_CMD_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define HSMMC_INT_MASK_0_PROG_CMD_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define HSMMC_INT_MASK_0_PROG_CMD_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define HSMMC_INT_MASK_0_PROG_CMD_MASK                  _MK_ENUM_CONST(1)
#define HSMMC_INT_MASK_0_PROG_CMD_UNMASK                        _MK_ENUM_CONST(0)

//  CE-ATA command completion signal interrupt mask.  1 = mask interrupt, 0 = allow interrupt.
#define HSMMC_INT_MASK_0_CCS_SHIFT                      _MK_SHIFT_CONST(5)
#define HSMMC_INT_MASK_0_CCS_FIELD                      (_MK_MASK_CONST(0x1) << HSMMC_INT_MASK_0_CCS_SHIFT)
#define HSMMC_INT_MASK_0_CCS_RANGE                      5:5
#define HSMMC_INT_MASK_0_CCS_WOFFSET                    0x0
#define HSMMC_INT_MASK_0_CCS_DEFAULT                    _MK_MASK_CONST(0x1)
#define HSMMC_INT_MASK_0_CCS_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define HSMMC_INT_MASK_0_CCS_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define HSMMC_INT_MASK_0_CCS_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define HSMMC_INT_MASK_0_CCS_MASK                       _MK_ENUM_CONST(1)
#define HSMMC_INT_MASK_0_CCS_UNMASK                     _MK_ENUM_CONST(0)

//  CE-ATA command completion signal disable interrupt mask.  1 = mask interrupt, 0 = allow interrupt.
#define HSMMC_INT_MASK_0_CCSD_SHIFT                     _MK_SHIFT_CONST(4)
#define HSMMC_INT_MASK_0_CCSD_FIELD                     (_MK_MASK_CONST(0x1) << HSMMC_INT_MASK_0_CCSD_SHIFT)
#define HSMMC_INT_MASK_0_CCSD_RANGE                     4:4
#define HSMMC_INT_MASK_0_CCSD_WOFFSET                   0x0
#define HSMMC_INT_MASK_0_CCSD_DEFAULT                   _MK_MASK_CONST(0x1)
#define HSMMC_INT_MASK_0_CCSD_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define HSMMC_INT_MASK_0_CCSD_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define HSMMC_INT_MASK_0_CCSD_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define HSMMC_INT_MASK_0_CCSD_MASK                      _MK_ENUM_CONST(1)
#define HSMMC_INT_MASK_0_CCSD_UNMASK                    _MK_ENUM_CONST(0)

//  DMA complete interrupt mask.  1 = mask interrupt, 0 = allow interrupt.
//  This indicates whether to generate an interrupt  when DMA_DN is active.
#define HSMMC_INT_MASK_0_DMA_SHIFT                      _MK_SHIFT_CONST(3)
#define HSMMC_INT_MASK_0_DMA_FIELD                      (_MK_MASK_CONST(0x1) << HSMMC_INT_MASK_0_DMA_SHIFT)
#define HSMMC_INT_MASK_0_DMA_RANGE                      3:3
#define HSMMC_INT_MASK_0_DMA_WOFFSET                    0x0
#define HSMMC_INT_MASK_0_DMA_DEFAULT                    _MK_MASK_CONST(0x1)
#define HSMMC_INT_MASK_0_DMA_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define HSMMC_INT_MASK_0_DMA_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define HSMMC_INT_MASK_0_DMA_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define HSMMC_INT_MASK_0_DMA_MASK                       _MK_ENUM_CONST(1)
#define HSMMC_INT_MASK_0_DMA_UNMASK                     _MK_ENUM_CONST(0)

//  End command response interrupt mask.  1 = mask interrupt,, 0 = allow interrupt.
//  This indicates whether to generate an interrupt when CMD_DN is active.
#define HSMMC_INT_MASK_0_CMD_SHIFT                      _MK_SHIFT_CONST(2)
#define HSMMC_INT_MASK_0_CMD_FIELD                      (_MK_MASK_CONST(0x1) << HSMMC_INT_MASK_0_CMD_SHIFT)
#define HSMMC_INT_MASK_0_CMD_RANGE                      2:2
#define HSMMC_INT_MASK_0_CMD_WOFFSET                    0x0
#define HSMMC_INT_MASK_0_CMD_DEFAULT                    _MK_MASK_CONST(0x1)
#define HSMMC_INT_MASK_0_CMD_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define HSMMC_INT_MASK_0_CMD_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define HSMMC_INT_MASK_0_CMD_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define HSMMC_INT_MASK_0_CMD_MASK                       _MK_ENUM_CONST(1)
#define HSMMC_INT_MASK_0_CMD_UNMASK                     _MK_ENUM_CONST(0)

//  Data FSM program done interrupt mask.  1 = mask interrupt, 0 = allow the interrupt.
//  This indicates whether to generate an interrupt when PRG_DN is active.
#define HSMMC_INT_MASK_0_PROG_SHIFT                     _MK_SHIFT_CONST(1)
#define HSMMC_INT_MASK_0_PROG_FIELD                     (_MK_MASK_CONST(0x1) << HSMMC_INT_MASK_0_PROG_SHIFT)
#define HSMMC_INT_MASK_0_PROG_RANGE                     1:1
#define HSMMC_INT_MASK_0_PROG_WOFFSET                   0x0
#define HSMMC_INT_MASK_0_PROG_DEFAULT                   _MK_MASK_CONST(0x1)
#define HSMMC_INT_MASK_0_PROG_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define HSMMC_INT_MASK_0_PROG_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define HSMMC_INT_MASK_0_PROG_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define HSMMC_INT_MASK_0_PROG_MASK                      _MK_ENUM_CONST(1)
#define HSMMC_INT_MASK_0_PROG_UNMASK                    _MK_ENUM_CONST(0)

//  Data transfer done interrupt mask.  1 = mask interrupt, 0 = allow the interrupt.
//  This indicates whether to generate an interrupt  when DT_DN is active.
#define HSMMC_INT_MASK_0_DTRAN_SHIFT                    _MK_SHIFT_CONST(0)
#define HSMMC_INT_MASK_0_DTRAN_FIELD                    (_MK_MASK_CONST(0x1) << HSMMC_INT_MASK_0_DTRAN_SHIFT)
#define HSMMC_INT_MASK_0_DTRAN_RANGE                    0:0
#define HSMMC_INT_MASK_0_DTRAN_WOFFSET                  0x0
#define HSMMC_INT_MASK_0_DTRAN_DEFAULT                  _MK_MASK_CONST(0x1)
#define HSMMC_INT_MASK_0_DTRAN_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define HSMMC_INT_MASK_0_DTRAN_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define HSMMC_INT_MASK_0_DTRAN_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define HSMMC_INT_MASK_0_DTRAN_MASK                     _MK_ENUM_CONST(1)
#define HSMMC_INT_MASK_0_DTRAN_UNMASK                   _MK_ENUM_CONST(0)

// Command Number Register

// Register HSMMC_CMD_NUM_0  
#define HSMMC_CMD_NUM_0                 _MK_ADDR_CONST(0x28)
#define HSMMC_CMD_NUM_0_WORD_COUNT                      0x1
#define HSMMC_CMD_NUM_0_RESET_VAL                       _MK_MASK_CONST(0x40)
#define HSMMC_CMD_NUM_0_RESET_MASK                      _MK_MASK_CONST(0x807f)
#define HSMMC_CMD_NUM_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define HSMMC_CMD_NUM_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define HSMMC_CMD_NUM_0_READ_MASK                       _MK_MASK_CONST(0x807f)
#define HSMMC_CMD_NUM_0_WRITE_MASK                      _MK_MASK_CONST(0x807f)
//  Card B select.  1 = select MMC card B, 0 = select MMC card A. 
#define HSMMC_CMD_NUM_0_SEL_B_SHIFT                     _MK_SHIFT_CONST(15)
#define HSMMC_CMD_NUM_0_SEL_B_FIELD                     (_MK_MASK_CONST(0x1) << HSMMC_CMD_NUM_0_SEL_B_SHIFT)
#define HSMMC_CMD_NUM_0_SEL_B_RANGE                     15:15
#define HSMMC_CMD_NUM_0_SEL_B_WOFFSET                   0x0
#define HSMMC_CMD_NUM_0_SEL_B_DEFAULT                   _MK_MASK_CONST(0x0)
#define HSMMC_CMD_NUM_0_SEL_B_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define HSMMC_CMD_NUM_0_SEL_B_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define HSMMC_CMD_NUM_0_SEL_B_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

//  Hardwired High
#define HSMMC_CMD_NUM_0_HARDWIRED_TO_1_SHIFT                    _MK_SHIFT_CONST(6)
#define HSMMC_CMD_NUM_0_HARDWIRED_TO_1_FIELD                    (_MK_MASK_CONST(0x1) << HSMMC_CMD_NUM_0_HARDWIRED_TO_1_SHIFT)
#define HSMMC_CMD_NUM_0_HARDWIRED_TO_1_RANGE                    6:6
#define HSMMC_CMD_NUM_0_HARDWIRED_TO_1_WOFFSET                  0x0
#define HSMMC_CMD_NUM_0_HARDWIRED_TO_1_DEFAULT                  _MK_MASK_CONST(0x1)
#define HSMMC_CMD_NUM_0_HARDWIRED_TO_1_DEFAULT_MASK                     _MK_MASK_CONST(0x1)
#define HSMMC_CMD_NUM_0_HARDWIRED_TO_1_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define HSMMC_CMD_NUM_0_HARDWIRED_TO_1_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

//  Command number.  This field selects the command number to be generated to the MMC card. 
//  This corresponds to bit[45:40] of the MMC command  format.
#define HSMMC_CMD_NUM_0_COMMAND_NUMBER_SHIFT                    _MK_SHIFT_CONST(0)
#define HSMMC_CMD_NUM_0_COMMAND_NUMBER_FIELD                    (_MK_MASK_CONST(0x3f) << HSMMC_CMD_NUM_0_COMMAND_NUMBER_SHIFT)
#define HSMMC_CMD_NUM_0_COMMAND_NUMBER_RANGE                    5:0
#define HSMMC_CMD_NUM_0_COMMAND_NUMBER_WOFFSET                  0x0
#define HSMMC_CMD_NUM_0_COMMAND_NUMBER_DEFAULT                  _MK_MASK_CONST(0x0)
#define HSMMC_CMD_NUM_0_COMMAND_NUMBER_DEFAULT_MASK                     _MK_MASK_CONST(0x3f)
#define HSMMC_CMD_NUM_0_COMMAND_NUMBER_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define HSMMC_CMD_NUM_0_COMMAND_NUMBER_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Argument Register

// Register HSMMC_CMD_ARGUMENT_0  
#define HSMMC_CMD_ARGUMENT_0                    _MK_ADDR_CONST(0x2c)
#define HSMMC_CMD_ARGUMENT_0_WORD_COUNT                         0x1
#define HSMMC_CMD_ARGUMENT_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define HSMMC_CMD_ARGUMENT_0_RESET_MASK                         _MK_MASK_CONST(0xffffffff)
#define HSMMC_CMD_ARGUMENT_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define HSMMC_CMD_ARGUMENT_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define HSMMC_CMD_ARGUMENT_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define HSMMC_CMD_ARGUMENT_0_WRITE_MASK                         _MK_MASK_CONST(0xffffffff)
//  Command argument.  This field selects the command argument to be generated to the MMC card. 
//     This corresponds to bit[39:8] of the MMC command  format.
#define HSMMC_CMD_ARGUMENT_0_ARGUMENT_SHIFT                     _MK_SHIFT_CONST(0)
#define HSMMC_CMD_ARGUMENT_0_ARGUMENT_FIELD                     (_MK_MASK_CONST(0xffffffff) << HSMMC_CMD_ARGUMENT_0_ARGUMENT_SHIFT)
#define HSMMC_CMD_ARGUMENT_0_ARGUMENT_RANGE                     31:0
#define HSMMC_CMD_ARGUMENT_0_ARGUMENT_WOFFSET                   0x0
#define HSMMC_CMD_ARGUMENT_0_ARGUMENT_DEFAULT                   _MK_MASK_CONST(0x0)
#define HSMMC_CMD_ARGUMENT_0_ARGUMENT_DEFAULT_MASK                      _MK_MASK_CONST(0xffffffff)
#define HSMMC_CMD_ARGUMENT_0_ARGUMENT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define HSMMC_CMD_ARGUMENT_0_ARGUMENT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// Command Completion Signal Disable Register

// Register HSMMC_CCSD_0  
#define HSMMC_CCSD_0                    _MK_ADDR_CONST(0x30)
#define HSMMC_CCSD_0_WORD_COUNT                         0x1
#define HSMMC_CCSD_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define HSMMC_CCSD_0_RESET_MASK                         _MK_MASK_CONST(0x80000000)
#define HSMMC_CCSD_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define HSMMC_CCSD_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define HSMMC_CCSD_0_READ_MASK                  _MK_MASK_CONST(0x80000000)
#define HSMMC_CCSD_0_WRITE_MASK                         _MK_MASK_CONST(0x80000000)
//  CE-ATA command signal completion signal disable packet to the card.  1 = enable, 0 = disable.
#define HSMMC_CCSD_0_CCS_DIS_SHIFT                      _MK_SHIFT_CONST(31)
#define HSMMC_CCSD_0_CCS_DIS_FIELD                      (_MK_MASK_CONST(0x1) << HSMMC_CCSD_0_CCS_DIS_SHIFT)
#define HSMMC_CCSD_0_CCS_DIS_RANGE                      31:31
#define HSMMC_CCSD_0_CCS_DIS_WOFFSET                    0x0
#define HSMMC_CCSD_0_CCS_DIS_DEFAULT                    _MK_MASK_CONST(0x0)
#define HSMMC_CCSD_0_CCS_DIS_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define HSMMC_CCSD_0_CCS_DIS_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define HSMMC_CCSD_0_CCS_DIS_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define HSMMC_CCSD_0_CCS_DIS_CCS_ENABLE                 _MK_ENUM_CONST(1)
#define HSMMC_CCSD_0_CCS_DIS_CCS_DISABLE                        _MK_ENUM_CONST(0)

// Response FIFO Register

// Register HSMMC_RES_FIFO_0  
#define HSMMC_RES_FIFO_0                        _MK_ADDR_CONST(0x34)
#define HSMMC_RES_FIFO_0_WORD_COUNT                     0x1
#define HSMMC_RES_FIFO_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define HSMMC_RES_FIFO_0_RESET_MASK                     _MK_MASK_CONST(0xffffffff)
#define HSMMC_RES_FIFO_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define HSMMC_RES_FIFO_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define HSMMC_RES_FIFO_0_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define HSMMC_RES_FIFO_0_WRITE_MASK                     _MK_MASK_CONST(0xffffffff)
//  Response FIFO.  This field corresponds to the response captured (from left-to-right) 
//  from the MMC response bit stream. Depends on the response format, this response FIFO 
//  may contain either 48-bits or 128-bits.
#define HSMMC_RES_FIFO_0_RESPONSE_FIFO_SHIFT                    _MK_SHIFT_CONST(0)
#define HSMMC_RES_FIFO_0_RESPONSE_FIFO_FIELD                    (_MK_MASK_CONST(0xffffffff) << HSMMC_RES_FIFO_0_RESPONSE_FIFO_SHIFT)
#define HSMMC_RES_FIFO_0_RESPONSE_FIFO_RANGE                    31:0
#define HSMMC_RES_FIFO_0_RESPONSE_FIFO_WOFFSET                  0x0
#define HSMMC_RES_FIFO_0_RESPONSE_FIFO_DEFAULT                  _MK_MASK_CONST(0x0)
#define HSMMC_RES_FIFO_0_RESPONSE_FIFO_DEFAULT_MASK                     _MK_MASK_CONST(0xffffffff)
#define HSMMC_RES_FIFO_0_RESPONSE_FIFO_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define HSMMC_RES_FIFO_0_RESPONSE_FIFO_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define HSMMC_RES_FIFO_0_RESPONSE_FIFO_INIT_ENUM                        XXXXXXXX


// Reserved address 56 [0x38] 
// Debug Register

// Register HSMMC_DEBUG_0  
#define HSMMC_DEBUG_0                   _MK_ADDR_CONST(0x3c)
#define HSMMC_DEBUG_0_WORD_COUNT                        0x1
#define HSMMC_DEBUG_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define HSMMC_DEBUG_0_RESET_MASK                        _MK_MASK_CONST(0x30001)
#define HSMMC_DEBUG_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define HSMMC_DEBUG_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define HSMMC_DEBUG_0_READ_MASK                         _MK_MASK_CONST(0x30001)
#define HSMMC_DEBUG_0_WRITE_MASK                        _MK_MASK_CONST(0x30001)
//  Invert MMC clock input.  This field invert the clock used to strobe the card data
//  coming back in.  1 = invert clock, 0 = don't invert clcok.
#define HSMMC_DEBUG_0_INV_CLK_IN_SHIFT                  _MK_SHIFT_CONST(17)
#define HSMMC_DEBUG_0_INV_CLK_IN_FIELD                  (_MK_MASK_CONST(0x1) << HSMMC_DEBUG_0_INV_CLK_IN_SHIFT)
#define HSMMC_DEBUG_0_INV_CLK_IN_RANGE                  17:17
#define HSMMC_DEBUG_0_INV_CLK_IN_WOFFSET                        0x0
#define HSMMC_DEBUG_0_INV_CLK_IN_DEFAULT                        _MK_MASK_CONST(0x0)
#define HSMMC_DEBUG_0_INV_CLK_IN_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define HSMMC_DEBUG_0_INV_CLK_IN_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define HSMMC_DEBUG_0_INV_CLK_IN_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

//  Invert MMC clock output.  This field invert the clock going out to the card.
//  1 = invert clock, 0 = don't invert clcok.
#define HSMMC_DEBUG_0_INV_CLK_OUT_SHIFT                 _MK_SHIFT_CONST(16)
#define HSMMC_DEBUG_0_INV_CLK_OUT_FIELD                 (_MK_MASK_CONST(0x1) << HSMMC_DEBUG_0_INV_CLK_OUT_SHIFT)
#define HSMMC_DEBUG_0_INV_CLK_OUT_RANGE                 16:16
#define HSMMC_DEBUG_0_INV_CLK_OUT_WOFFSET                       0x0
#define HSMMC_DEBUG_0_INV_CLK_OUT_DEFAULT                       _MK_MASK_CONST(0x0)
#define HSMMC_DEBUG_0_INV_CLK_OUT_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define HSMMC_DEBUG_0_INV_CLK_OUT_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define HSMMC_DEBUG_0_INV_CLK_OUT_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

//  Debug select.  This field selects which 8 internal signals to route to the 8-bit
//  debug bus.
#define HSMMC_DEBUG_0_DBGSEL_SHIFT                      _MK_SHIFT_CONST(0)
#define HSMMC_DEBUG_0_DBGSEL_FIELD                      (_MK_MASK_CONST(0x1) << HSMMC_DEBUG_0_DBGSEL_SHIFT)
#define HSMMC_DEBUG_0_DBGSEL_RANGE                      0:0
#define HSMMC_DEBUG_0_DBGSEL_WOFFSET                    0x0
#define HSMMC_DEBUG_0_DBGSEL_DEFAULT                    _MK_MASK_CONST(0x0)
#define HSMMC_DEBUG_0_DBGSEL_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define HSMMC_DEBUG_0_DBGSEL_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define HSMMC_DEBUG_0_DBGSEL_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// DMA Control Register

// Register HSMMC_DMA_CNTL_0  
#define HSMMC_DMA_CNTL_0                        _MK_ADDR_CONST(0x40)
#define HSMMC_DMA_CNTL_0_WORD_COUNT                     0x1
#define HSMMC_DMA_CNTL_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define HSMMC_DMA_CNTL_0_RESET_MASK                     _MK_MASK_CONST(0x81ffffff)
#define HSMMC_DMA_CNTL_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define HSMMC_DMA_CNTL_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define HSMMC_DMA_CNTL_0_READ_MASK                      _MK_MASK_CONST(0x81ffffff)
#define HSMMC_DMA_CNTL_0_WRITE_MASK                     _MK_MASK_CONST(0x81ffffff)
//  Enable DMA for data movement.  1 = enable DMA, 0 = disable DMA.
#define HSMMC_DMA_CNTL_0_DMA_EN_SHIFT                   _MK_SHIFT_CONST(31)
#define HSMMC_DMA_CNTL_0_DMA_EN_FIELD                   (_MK_MASK_CONST(0x1) << HSMMC_DMA_CNTL_0_DMA_EN_SHIFT)
#define HSMMC_DMA_CNTL_0_DMA_EN_RANGE                   31:31
#define HSMMC_DMA_CNTL_0_DMA_EN_WOFFSET                 0x0
#define HSMMC_DMA_CNTL_0_DMA_EN_DEFAULT                 _MK_MASK_CONST(0x0)
#define HSMMC_DMA_CNTL_0_DMA_EN_DEFAULT_MASK                    _MK_MASK_CONST(0x1)
#define HSMMC_DMA_CNTL_0_DMA_EN_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define HSMMC_DMA_CNTL_0_DMA_EN_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define HSMMC_DMA_CNTL_0_DMA_EN_ENABLE                  _MK_ENUM_CONST(1)
#define HSMMC_DMA_CNTL_0_DMA_EN_DISABLE                 _MK_ENUM_CONST(0)

//  AHB DMA transfer size (in bytes). This is in n+1 scheme (i.e. if this field is 
//  all zero, the DMA will transfer one-byte).
#define HSMMC_DMA_CNTL_0_XFER_SIZE_SHIFT                        _MK_SHIFT_CONST(0)
#define HSMMC_DMA_CNTL_0_XFER_SIZE_FIELD                        (_MK_MASK_CONST(0x1ffffff) << HSMMC_DMA_CNTL_0_XFER_SIZE_SHIFT)
#define HSMMC_DMA_CNTL_0_XFER_SIZE_RANGE                        24:0
#define HSMMC_DMA_CNTL_0_XFER_SIZE_WOFFSET                      0x0
#define HSMMC_DMA_CNTL_0_XFER_SIZE_DEFAULT                      _MK_MASK_CONST(0x0)
#define HSMMC_DMA_CNTL_0_XFER_SIZE_DEFAULT_MASK                 _MK_MASK_CONST(0x1ffffff)
#define HSMMC_DMA_CNTL_0_XFER_SIZE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define HSMMC_DMA_CNTL_0_XFER_SIZE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// DMA Base Address Register

// Register HSMMC_DMA_BASE_0  
#define HSMMC_DMA_BASE_0                        _MK_ADDR_CONST(0x44)
#define HSMMC_DMA_BASE_0_WORD_COUNT                     0x1
#define HSMMC_DMA_BASE_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define HSMMC_DMA_BASE_0_RESET_MASK                     _MK_MASK_CONST(0xfffffffc)
#define HSMMC_DMA_BASE_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define HSMMC_DMA_BASE_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define HSMMC_DMA_BASE_0_READ_MASK                      _MK_MASK_CONST(0xfffffffc)
#define HSMMC_DMA_BASE_0_WRITE_MASK                     _MK_MASK_CONST(0xfffffffc)
// AHB DMA base address[31:2].
#define HSMMC_DMA_BASE_0_BASE_ADDR_SHIFT                        _MK_SHIFT_CONST(2)
#define HSMMC_DMA_BASE_0_BASE_ADDR_FIELD                        (_MK_MASK_CONST(0x3fffffff) << HSMMC_DMA_BASE_0_BASE_ADDR_SHIFT)
#define HSMMC_DMA_BASE_0_BASE_ADDR_RANGE                        31:2
#define HSMMC_DMA_BASE_0_BASE_ADDR_WOFFSET                      0x0
#define HSMMC_DMA_BASE_0_BASE_ADDR_DEFAULT                      _MK_MASK_CONST(0x0)
#define HSMMC_DMA_BASE_0_BASE_ADDR_DEFAULT_MASK                 _MK_MASK_CONST(0x3fffffff)
#define HSMMC_DMA_BASE_0_BASE_ADDR_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define HSMMC_DMA_BASE_0_BASE_ADDR_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// DMA Byte Count Register

// Register HSMMC_DMA_BYTE_CNT_0  
#define HSMMC_DMA_BYTE_CNT_0                    _MK_ADDR_CONST(0x48)
#define HSMMC_DMA_BYTE_CNT_0_WORD_COUNT                         0x1
#define HSMMC_DMA_BYTE_CNT_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define HSMMC_DMA_BYTE_CNT_0_RESET_MASK                         _MK_MASK_CONST(0x3ffffff)
#define HSMMC_DMA_BYTE_CNT_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define HSMMC_DMA_BYTE_CNT_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define HSMMC_DMA_BYTE_CNT_0_READ_MASK                  _MK_MASK_CONST(0x3ffffff)
#define HSMMC_DMA_BYTE_CNT_0_WRITE_MASK                         _MK_MASK_CONST(0x0)
// This field indicates the number of bytes processed by the DMA.
#define HSMMC_DMA_BYTE_CNT_0_BYTE_CNT_SHIFT                     _MK_SHIFT_CONST(0)
#define HSMMC_DMA_BYTE_CNT_0_BYTE_CNT_FIELD                     (_MK_MASK_CONST(0x3ffffff) << HSMMC_DMA_BYTE_CNT_0_BYTE_CNT_SHIFT)
#define HSMMC_DMA_BYTE_CNT_0_BYTE_CNT_RANGE                     25:0
#define HSMMC_DMA_BYTE_CNT_0_BYTE_CNT_WOFFSET                   0x0
#define HSMMC_DMA_BYTE_CNT_0_BYTE_CNT_DEFAULT                   _MK_MASK_CONST(0x0)
#define HSMMC_DMA_BYTE_CNT_0_BYTE_CNT_DEFAULT_MASK                      _MK_MASK_CONST(0x3ffffff)
#define HSMMC_DMA_BYTE_CNT_0_BYTE_CNT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define HSMMC_DMA_BYTE_CNT_0_BYTE_CNT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)


//
// REGISTER LIST
//
#define LIST_ARHSMMC_REGS(_op_) \
_op_(HSMMC_SRT_STP_CLK_0) \
_op_(HSMMC_STATUS_0) \
_op_(HSMMC_CLK_RATE_0) \
_op_(HSMMC_SPI_CTRL_0) \
_op_(HSMMC_CMD_DAT_CTRL_0) \
_op_(HSMMC_RESP_TO_0) \
_op_(HSMMC_MMC_READ_TO_0) \
_op_(HSMMC_BLK_LEN_0) \
_op_(HSMMC_NUM_OF_BLKS_0) \
_op_(HSMMC_INT_MASK_0) \
_op_(HSMMC_CMD_NUM_0) \
_op_(HSMMC_CMD_ARGUMENT_0) \
_op_(HSMMC_CCSD_0) \
_op_(HSMMC_RES_FIFO_0) \
_op_(HSMMC_DEBUG_0) \
_op_(HSMMC_DMA_CNTL_0) \
_op_(HSMMC_DMA_BASE_0) \
_op_(HSMMC_DMA_BYTE_CNT_0)


//
// ADDRESS SPACES
//

#define BASE_ADDRESS_HSMMC      0x00000000

//
// ARHSMMC REGISTER BANKS
//

#define HSMMC0_FIRST_REG 0x0000 // HSMMC_SRT_STP_CLK_0
#define HSMMC0_LAST_REG 0x0034 // HSMMC_RES_FIFO_0
#define HSMMC1_FIRST_REG 0x003c // HSMMC_DEBUG_0
#define HSMMC1_LAST_REG 0x0048 // HSMMC_DMA_BYTE_CNT_0

#ifndef _MK_SHIFT_CONST
  #define _MK_SHIFT_CONST(_constant_) _constant_
#endif
#ifndef _MK_MASK_CONST
  #define _MK_MASK_CONST(_constant_) _constant_
#endif
#ifndef _MK_ENUM_CONST
  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
#endif
#ifndef _MK_ADDR_CONST
  #define _MK_ADDR_CONST(_constant_) _constant_
#endif

#endif // ifndef ___ARHSMMC_H_INC_
