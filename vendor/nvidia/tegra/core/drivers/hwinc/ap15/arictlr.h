//
// DO NOT EDIT - generated by simspec!
//

#ifndef ___ARICTLR_H_INC_
#define ___ARICTLR_H_INC_
// --------------------------------------------------------------------------
//
// Copyright (c) 2007, NVIDIA Corp.
// All Rights Reserved.
//
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
//
// --------------------------------------------------------------------------
//
// this spec file is for sw header generation
//
// hw should use headers generated from:
//     arintr_ctlr.spec
//
//
// sw header does not contain any reg fields -- instead, sw uses relocation table
//
// --------------------------------------------------------------------------
//
// Copyright (c) 2007, NVIDIA Corp.
// All Rights Reserved.
//
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
//
// --------------------------------------------------------------------------
//
//
// common register in all interrupt controllers
//
// note: register bit fields are controlled by list macros, to see
// an expanded list of interrupt fields, please see
//
//     //hw/ap/defs/project_{project}_address_map.spec
//
// under the section "Interrupt Bit Fields"
//
//#################################################################
//
// macro for register fields
//
// The system has three sets of Interrupt Controllers, for a total of 96 bits. 
// There are two levels of interrupt priority, Fast Interrupt Request (FIQ), 
// and Regular Interrupt Request (IRQ).
// Any of the interrupt requests can be routed to either the nIRQ or the nFIQ of 
// either processor, based on the select bits set in the interrupt class and 
// interrupt enable registers.
// Interrupt enabling and steering is accomplished by programming the Interrupt Enable
// registers (CPU_IER or COP_IER) and the Interrupt Class registers (CPU_IEP_CLASS or
// COP_IEP_CLASS). The following text discusses routing as it relates to the CPU, but this
// discussion also applies to the COP (AVP).
// When a 1 is set in the proper bit position in the CPU_IER register, that particular
// source is capable of interrupting the processor. The interrupt status register (ISR)
// allows the processor to view the state of the pending interrupt requests, whether 
// enabled or disabled. The forced interrupt status register (FIR) allows the software
// to selectively force the execution of a specific interrupt service routine. 
// The read-only VIRQ_CPU and VIRQ_COP registers allow the processor to determine the
// actual source of the interrupt request(s) causing the processor to enter the nIRQ 
// interrupt service routine. The VIRQ is the logical OR of the FIR and ISR
// registers, ANDed with the CPU_IER register, and ANDed with the NOT of the CPU_IEP_CLASS
// register. The read-only VFIQ allows the processor to determine the actual source of the
// interrupt request(s) causing the processor to enter the nFIQ interrupt service routine.
// The VFIQ is the logical OR of the FIR and ISR registers, ANDed with the CPU_IER 
// register, and ANDed with the CPU_IEP_CLASS register.
// The CPU_IER, FIR and CPU_IEP_CLASS registers also have corresponding set and clear
// registers, which allow bits to be turned on or off in a single atomic operation.
// 
// It is also possible to perform software DMA for many modules, as the DMA requests
// are also routed to the interrupt controller so they can be satisfied by interrupt 
// handlers.
// The DMA requests are grouped into read requests and write requests and presented at
// bits 31 and 30 of the ISR register (Secondary interrupt controller only) 
// Individual requests can be viewed by reading the DSR register.
// The Arbitration Semaphore module can also generate interrupt requests to the interrupt
// controller when a processor achieves Arbitration Grant Status. Refer to the 
// arictlr_common_arbgnt specfile for details.
//
// Valid Interrupt Request Status for CPU Register

// Register ICTLR_VIRQ_CPU_0  
#define ICTLR_VIRQ_CPU_0                        _MK_ADDR_CONST(0x0)
#define ICTLR_VIRQ_CPU_0_WORD_COUNT                     0x1
#define ICTLR_VIRQ_CPU_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define ICTLR_VIRQ_CPU_0_RESET_MASK                     _MK_MASK_CONST(0xffffffff)
#define ICTLR_VIRQ_CPU_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define ICTLR_VIRQ_CPU_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define ICTLR_VIRQ_CPU_0_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define ICTLR_VIRQ_CPU_0_WRITE_MASK                     _MK_MASK_CONST(0x0)
// Flags set by Hardware, cleared by SW
#define ICTLR_VIRQ_CPU_0_IRQ31_IRQ0_SHIFT                       _MK_SHIFT_CONST(0)
#define ICTLR_VIRQ_CPU_0_IRQ31_IRQ0_FIELD                       (_MK_MASK_CONST(0xffffffff) << ICTLR_VIRQ_CPU_0_IRQ31_IRQ0_SHIFT)
#define ICTLR_VIRQ_CPU_0_IRQ31_IRQ0_RANGE                       31:0
#define ICTLR_VIRQ_CPU_0_IRQ31_IRQ0_WOFFSET                     0x0
#define ICTLR_VIRQ_CPU_0_IRQ31_IRQ0_DEFAULT                     _MK_MASK_CONST(0x0)
#define ICTLR_VIRQ_CPU_0_IRQ31_IRQ0_DEFAULT_MASK                        _MK_MASK_CONST(0xffffffff)
#define ICTLR_VIRQ_CPU_0_IRQ31_IRQ0_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define ICTLR_VIRQ_CPU_0_IRQ31_IRQ0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Valid Interrupt Status for COP Register

// Register ICTLR_VIRQ_COP_0  
#define ICTLR_VIRQ_COP_0                        _MK_ADDR_CONST(0x4)
#define ICTLR_VIRQ_COP_0_WORD_COUNT                     0x1
#define ICTLR_VIRQ_COP_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define ICTLR_VIRQ_COP_0_RESET_MASK                     _MK_MASK_CONST(0xffffffff)
#define ICTLR_VIRQ_COP_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define ICTLR_VIRQ_COP_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define ICTLR_VIRQ_COP_0_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define ICTLR_VIRQ_COP_0_WRITE_MASK                     _MK_MASK_CONST(0x0)
// Flags set by Hardware, cleared by SW
#define ICTLR_VIRQ_COP_0_IRQ31_IRQ0_SHIFT                       _MK_SHIFT_CONST(0)
#define ICTLR_VIRQ_COP_0_IRQ31_IRQ0_FIELD                       (_MK_MASK_CONST(0xffffffff) << ICTLR_VIRQ_COP_0_IRQ31_IRQ0_SHIFT)
#define ICTLR_VIRQ_COP_0_IRQ31_IRQ0_RANGE                       31:0
#define ICTLR_VIRQ_COP_0_IRQ31_IRQ0_WOFFSET                     0x0
#define ICTLR_VIRQ_COP_0_IRQ31_IRQ0_DEFAULT                     _MK_MASK_CONST(0x0)
#define ICTLR_VIRQ_COP_0_IRQ31_IRQ0_DEFAULT_MASK                        _MK_MASK_CONST(0xffffffff)
#define ICTLR_VIRQ_COP_0_IRQ31_IRQ0_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define ICTLR_VIRQ_COP_0_IRQ31_IRQ0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// FIQ Valid Interrupt Status for CPU Register

// Register ICTLR_VFIQ_CPU_0  
#define ICTLR_VFIQ_CPU_0                        _MK_ADDR_CONST(0x8)
#define ICTLR_VFIQ_CPU_0_WORD_COUNT                     0x1
#define ICTLR_VFIQ_CPU_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define ICTLR_VFIQ_CPU_0_RESET_MASK                     _MK_MASK_CONST(0xffffffff)
#define ICTLR_VFIQ_CPU_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define ICTLR_VFIQ_CPU_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define ICTLR_VFIQ_CPU_0_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define ICTLR_VFIQ_CPU_0_WRITE_MASK                     _MK_MASK_CONST(0x0)
// Flags set by Hardware, cleared by SW
#define ICTLR_VFIQ_CPU_0_FIQ31_FIQ0_SHIFT                       _MK_SHIFT_CONST(0)
#define ICTLR_VFIQ_CPU_0_FIQ31_FIQ0_FIELD                       (_MK_MASK_CONST(0xffffffff) << ICTLR_VFIQ_CPU_0_FIQ31_FIQ0_SHIFT)
#define ICTLR_VFIQ_CPU_0_FIQ31_FIQ0_RANGE                       31:0
#define ICTLR_VFIQ_CPU_0_FIQ31_FIQ0_WOFFSET                     0x0
#define ICTLR_VFIQ_CPU_0_FIQ31_FIQ0_DEFAULT                     _MK_MASK_CONST(0x0)
#define ICTLR_VFIQ_CPU_0_FIQ31_FIQ0_DEFAULT_MASK                        _MK_MASK_CONST(0xffffffff)
#define ICTLR_VFIQ_CPU_0_FIQ31_FIQ0_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define ICTLR_VFIQ_CPU_0_FIQ31_FIQ0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// FIQ Valid Interrupt Status for COP Register

// Register ICTLR_VFIQ_COP_0  
#define ICTLR_VFIQ_COP_0                        _MK_ADDR_CONST(0xc)
#define ICTLR_VFIQ_COP_0_WORD_COUNT                     0x1
#define ICTLR_VFIQ_COP_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define ICTLR_VFIQ_COP_0_RESET_MASK                     _MK_MASK_CONST(0xffffffff)
#define ICTLR_VFIQ_COP_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define ICTLR_VFIQ_COP_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define ICTLR_VFIQ_COP_0_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define ICTLR_VFIQ_COP_0_WRITE_MASK                     _MK_MASK_CONST(0x0)
// Flags set by Hardware, cleared by SW
#define ICTLR_VFIQ_COP_0_FIQ31_FIQ0_SHIFT                       _MK_SHIFT_CONST(0)
#define ICTLR_VFIQ_COP_0_FIQ31_FIQ0_FIELD                       (_MK_MASK_CONST(0xffffffff) << ICTLR_VFIQ_COP_0_FIQ31_FIQ0_SHIFT)
#define ICTLR_VFIQ_COP_0_FIQ31_FIQ0_RANGE                       31:0
#define ICTLR_VFIQ_COP_0_FIQ31_FIQ0_WOFFSET                     0x0
#define ICTLR_VFIQ_COP_0_FIQ31_FIQ0_DEFAULT                     _MK_MASK_CONST(0x0)
#define ICTLR_VFIQ_COP_0_FIQ31_FIQ0_DEFAULT_MASK                        _MK_MASK_CONST(0xffffffff)
#define ICTLR_VFIQ_COP_0_FIQ31_FIQ0_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define ICTLR_VFIQ_COP_0_FIQ31_FIQ0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Latched Interrupt Status Register (HW)

// Register ICTLR_ISR_0  
#define ICTLR_ISR_0                     _MK_ADDR_CONST(0x10)
#define ICTLR_ISR_0_WORD_COUNT                  0x1
#define ICTLR_ISR_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define ICTLR_ISR_0_RESET_MASK                  _MK_MASK_CONST(0xffffffff)
#define ICTLR_ISR_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define ICTLR_ISR_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define ICTLR_ISR_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define ICTLR_ISR_0_WRITE_MASK                  _MK_MASK_CONST(0x0)
// Read-only. Set by hardware event, cleared at  source by software.
#define ICTLR_ISR_0_ISR31_ISR0_SHIFT                    _MK_SHIFT_CONST(0)
#define ICTLR_ISR_0_ISR31_ISR0_FIELD                    (_MK_MASK_CONST(0xffffffff) << ICTLR_ISR_0_ISR31_ISR0_SHIFT)
#define ICTLR_ISR_0_ISR31_ISR0_RANGE                    31:0
#define ICTLR_ISR_0_ISR31_ISR0_WOFFSET                  0x0
#define ICTLR_ISR_0_ISR31_ISR0_DEFAULT                  _MK_MASK_CONST(0x0)
#define ICTLR_ISR_0_ISR31_ISR0_DEFAULT_MASK                     _MK_MASK_CONST(0xffffffff)
#define ICTLR_ISR_0_ISR31_ISR0_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define ICTLR_ISR_0_ISR31_ISR0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Forced Interrupt Status Register (SW)

// Register ICTLR_FIR_0  
#define ICTLR_FIR_0                     _MK_ADDR_CONST(0x14)
#define ICTLR_FIR_0_WORD_COUNT                  0x1
#define ICTLR_FIR_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define ICTLR_FIR_0_RESET_MASK                  _MK_MASK_CONST(0xffffffff)
#define ICTLR_FIR_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define ICTLR_FIR_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define ICTLR_FIR_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define ICTLR_FIR_0_WRITE_MASK                  _MK_MASK_CONST(0x0)
// Read only: Set during write to FIR_SET, cleared  during write to FIR_CLR.
#define ICTLR_FIR_0_FIR31_FIR0_SHIFT                    _MK_SHIFT_CONST(0)
#define ICTLR_FIR_0_FIR31_FIR0_FIELD                    (_MK_MASK_CONST(0xffffffff) << ICTLR_FIR_0_FIR31_FIR0_SHIFT)
#define ICTLR_FIR_0_FIR31_FIR0_RANGE                    31:0
#define ICTLR_FIR_0_FIR31_FIR0_WOFFSET                  0x0
#define ICTLR_FIR_0_FIR31_FIR0_DEFAULT                  _MK_MASK_CONST(0x0)
#define ICTLR_FIR_0_FIR31_FIR0_DEFAULT_MASK                     _MK_MASK_CONST(0xffffffff)
#define ICTLR_FIR_0_FIR31_FIR0_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define ICTLR_FIR_0_FIR31_FIR0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Force Interrupt Register Set

// Register ICTLR_FIR_SET_0  
#define ICTLR_FIR_SET_0                 _MK_ADDR_CONST(0x18)
#define ICTLR_FIR_SET_0_WORD_COUNT                      0x1
#define ICTLR_FIR_SET_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define ICTLR_FIR_SET_0_RESET_MASK                      _MK_MASK_CONST(0xffffffff)
#define ICTLR_FIR_SET_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define ICTLR_FIR_SET_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define ICTLR_FIR_SET_0_READ_MASK                       _MK_MASK_CONST(0x0)
#define ICTLR_FIR_SET_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// Set Forced Interrupt Bit. Writing a 1 will set an  interrupt
#define ICTLR_FIR_SET_0_FIR_SET_SHIFT                   _MK_SHIFT_CONST(0)
#define ICTLR_FIR_SET_0_FIR_SET_FIELD                   (_MK_MASK_CONST(0xffffffff) << ICTLR_FIR_SET_0_FIR_SET_SHIFT)
#define ICTLR_FIR_SET_0_FIR_SET_RANGE                   31:0
#define ICTLR_FIR_SET_0_FIR_SET_WOFFSET                 0x0
#define ICTLR_FIR_SET_0_FIR_SET_DEFAULT                 _MK_MASK_CONST(0x0)
#define ICTLR_FIR_SET_0_FIR_SET_DEFAULT_MASK                    _MK_MASK_CONST(0xffffffff)
#define ICTLR_FIR_SET_0_FIR_SET_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define ICTLR_FIR_SET_0_FIR_SET_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Force Interrupt Register Clear Register

// Register ICTLR_FIR_CLR_0  
#define ICTLR_FIR_CLR_0                 _MK_ADDR_CONST(0x1c)
#define ICTLR_FIR_CLR_0_WORD_COUNT                      0x1
#define ICTLR_FIR_CLR_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define ICTLR_FIR_CLR_0_RESET_MASK                      _MK_MASK_CONST(0xffffffff)
#define ICTLR_FIR_CLR_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define ICTLR_FIR_CLR_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define ICTLR_FIR_CLR_0_READ_MASK                       _MK_MASK_CONST(0x0)
#define ICTLR_FIR_CLR_0_WRITE_MASK                      _MK_MASK_CONST(0xffffffff)
// Clear Forced Interrupt Bit: Writing a 1 will clear  the forced interrupt
#define ICTLR_FIR_CLR_0_FIR_CLR_SHIFT                   _MK_SHIFT_CONST(0)
#define ICTLR_FIR_CLR_0_FIR_CLR_FIELD                   (_MK_MASK_CONST(0xffffffff) << ICTLR_FIR_CLR_0_FIR_CLR_SHIFT)
#define ICTLR_FIR_CLR_0_FIR_CLR_RANGE                   31:0
#define ICTLR_FIR_CLR_0_FIR_CLR_WOFFSET                 0x0
#define ICTLR_FIR_CLR_0_FIR_CLR_DEFAULT                 _MK_MASK_CONST(0x0)
#define ICTLR_FIR_CLR_0_FIR_CLR_DEFAULT_MASK                    _MK_MASK_CONST(0xffffffff)
#define ICTLR_FIR_CLR_0_FIR_CLR_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define ICTLR_FIR_CLR_0_FIR_CLR_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Enabled Interrupt Source for CPU Register

// Register ICTLR_CPU_IER_0  
#define ICTLR_CPU_IER_0                 _MK_ADDR_CONST(0x20)
#define ICTLR_CPU_IER_0_WORD_COUNT                      0x1
#define ICTLR_CPU_IER_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define ICTLR_CPU_IER_0_RESET_MASK                      _MK_MASK_CONST(0xffffffff)
#define ICTLR_CPU_IER_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define ICTLR_CPU_IER_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define ICTLR_CPU_IER_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define ICTLR_CPU_IER_0_WRITE_MASK                      _MK_MASK_CONST(0x0)
//  Interrupt Enable Status. 0 = Disabled
#define ICTLR_CPU_IER_0_IER31_IER0_SHIFT                        _MK_SHIFT_CONST(0)
#define ICTLR_CPU_IER_0_IER31_IER0_FIELD                        (_MK_MASK_CONST(0xffffffff) << ICTLR_CPU_IER_0_IER31_IER0_SHIFT)
#define ICTLR_CPU_IER_0_IER31_IER0_RANGE                        31:0
#define ICTLR_CPU_IER_0_IER31_IER0_WOFFSET                      0x0
#define ICTLR_CPU_IER_0_IER31_IER0_DEFAULT                      _MK_MASK_CONST(0x0)
#define ICTLR_CPU_IER_0_IER31_IER0_DEFAULT_MASK                 _MK_MASK_CONST(0xffffffff)
#define ICTLR_CPU_IER_0_IER31_IER0_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define ICTLR_CPU_IER_0_IER31_IER0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Set Interrupt Enable for CPU Register

// Register ICTLR_CPU_IER_SET_0  
#define ICTLR_CPU_IER_SET_0                     _MK_ADDR_CONST(0x24)
#define ICTLR_CPU_IER_SET_0_WORD_COUNT                  0x1
#define ICTLR_CPU_IER_SET_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define ICTLR_CPU_IER_SET_0_RESET_MASK                  _MK_MASK_CONST(0xffffffff)
#define ICTLR_CPU_IER_SET_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define ICTLR_CPU_IER_SET_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define ICTLR_CPU_IER_SET_0_READ_MASK                   _MK_MASK_CONST(0x0)
#define ICTLR_CPU_IER_SET_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Writing a 1 in any bit position will enable the  corresponding Interrupt Source for CPU 
#define ICTLR_CPU_IER_SET_0_CPU_IER_SET_SHIFT                   _MK_SHIFT_CONST(0)
#define ICTLR_CPU_IER_SET_0_CPU_IER_SET_FIELD                   (_MK_MASK_CONST(0xffffffff) << ICTLR_CPU_IER_SET_0_CPU_IER_SET_SHIFT)
#define ICTLR_CPU_IER_SET_0_CPU_IER_SET_RANGE                   31:0
#define ICTLR_CPU_IER_SET_0_CPU_IER_SET_WOFFSET                 0x0
#define ICTLR_CPU_IER_SET_0_CPU_IER_SET_DEFAULT                 _MK_MASK_CONST(0x0)
#define ICTLR_CPU_IER_SET_0_CPU_IER_SET_DEFAULT_MASK                    _MK_MASK_CONST(0xffffffff)
#define ICTLR_CPU_IER_SET_0_CPU_IER_SET_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define ICTLR_CPU_IER_SET_0_CPU_IER_SET_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// CPUs Clear Interrupt Enable for CPU

// Register ICTLR_CPU_IER_CLR_0  
#define ICTLR_CPU_IER_CLR_0                     _MK_ADDR_CONST(0x28)
#define ICTLR_CPU_IER_CLR_0_WORD_COUNT                  0x1
#define ICTLR_CPU_IER_CLR_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define ICTLR_CPU_IER_CLR_0_RESET_MASK                  _MK_MASK_CONST(0xffffffff)
#define ICTLR_CPU_IER_CLR_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define ICTLR_CPU_IER_CLR_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define ICTLR_CPU_IER_CLR_0_READ_MASK                   _MK_MASK_CONST(0x0)
#define ICTLR_CPU_IER_CLR_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Writing a 1 in any bit position will disable the  corresponding Interrupt Source for CPU 
#define ICTLR_CPU_IER_CLR_0_CPU_IER_CLR_SHIFT                   _MK_SHIFT_CONST(0)
#define ICTLR_CPU_IER_CLR_0_CPU_IER_CLR_FIELD                   (_MK_MASK_CONST(0xffffffff) << ICTLR_CPU_IER_CLR_0_CPU_IER_CLR_SHIFT)
#define ICTLR_CPU_IER_CLR_0_CPU_IER_CLR_RANGE                   31:0
#define ICTLR_CPU_IER_CLR_0_CPU_IER_CLR_WOFFSET                 0x0
#define ICTLR_CPU_IER_CLR_0_CPU_IER_CLR_DEFAULT                 _MK_MASK_CONST(0x0)
#define ICTLR_CPU_IER_CLR_0_CPU_IER_CLR_DEFAULT_MASK                    _MK_MASK_CONST(0xffffffff)
#define ICTLR_CPU_IER_CLR_0_CPU_IER_CLR_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define ICTLR_CPU_IER_CLR_0_CPU_IER_CLR_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// CPUs Interrupt Enable Priority Class (FIQ/IRQ)

// Register ICTLR_CPU_IEP_CLASS_0  
#define ICTLR_CPU_IEP_CLASS_0                   _MK_ADDR_CONST(0x2c)
#define ICTLR_CPU_IEP_CLASS_0_WORD_COUNT                        0x1
#define ICTLR_CPU_IEP_CLASS_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define ICTLR_CPU_IEP_CLASS_0_RESET_MASK                        _MK_MASK_CONST(0xffffffff)
#define ICTLR_CPU_IEP_CLASS_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define ICTLR_CPU_IEP_CLASS_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define ICTLR_CPU_IEP_CLASS_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define ICTLR_CPU_IEP_CLASS_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
//  Set Priority Interrupt Source For CPU. 1 = FIQ, 0 = IRQ.
#define ICTLR_CPU_IEP_CLASS_0_CPU_IEP_CLASS_SHIFT                       _MK_SHIFT_CONST(0)
#define ICTLR_CPU_IEP_CLASS_0_CPU_IEP_CLASS_FIELD                       (_MK_MASK_CONST(0xffffffff) << ICTLR_CPU_IEP_CLASS_0_CPU_IEP_CLASS_SHIFT)
#define ICTLR_CPU_IEP_CLASS_0_CPU_IEP_CLASS_RANGE                       31:0
#define ICTLR_CPU_IEP_CLASS_0_CPU_IEP_CLASS_WOFFSET                     0x0
#define ICTLR_CPU_IEP_CLASS_0_CPU_IEP_CLASS_DEFAULT                     _MK_MASK_CONST(0x0)
#define ICTLR_CPU_IEP_CLASS_0_CPU_IEP_CLASS_DEFAULT_MASK                        _MK_MASK_CONST(0xffffffff)
#define ICTLR_CPU_IEP_CLASS_0_CPU_IEP_CLASS_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define ICTLR_CPU_IEP_CLASS_0_CPU_IEP_CLASS_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Enabled Interrupt Source for COP Register

// Register ICTLR_COP_IER_0  
#define ICTLR_COP_IER_0                 _MK_ADDR_CONST(0x30)
#define ICTLR_COP_IER_0_WORD_COUNT                      0x1
#define ICTLR_COP_IER_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define ICTLR_COP_IER_0_RESET_MASK                      _MK_MASK_CONST(0xffffffff)
#define ICTLR_COP_IER_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define ICTLR_COP_IER_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define ICTLR_COP_IER_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define ICTLR_COP_IER_0_WRITE_MASK                      _MK_MASK_CONST(0x0)
//  Interrupt Enable Status. 0 = Disabled.
#define ICTLR_COP_IER_0_IER31_IER0_SHIFT                        _MK_SHIFT_CONST(0)
#define ICTLR_COP_IER_0_IER31_IER0_FIELD                        (_MK_MASK_CONST(0xffffffff) << ICTLR_COP_IER_0_IER31_IER0_SHIFT)
#define ICTLR_COP_IER_0_IER31_IER0_RANGE                        31:0
#define ICTLR_COP_IER_0_IER31_IER0_WOFFSET                      0x0
#define ICTLR_COP_IER_0_IER31_IER0_DEFAULT                      _MK_MASK_CONST(0x0)
#define ICTLR_COP_IER_0_IER31_IER0_DEFAULT_MASK                 _MK_MASK_CONST(0xffffffff)
#define ICTLR_COP_IER_0_IER31_IER0_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define ICTLR_COP_IER_0_IER31_IER0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Set Interrupt Source for COP Register

// Register ICTLR_COP_IER_SET_0  
#define ICTLR_COP_IER_SET_0                     _MK_ADDR_CONST(0x34)
#define ICTLR_COP_IER_SET_0_WORD_COUNT                  0x1
#define ICTLR_COP_IER_SET_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define ICTLR_COP_IER_SET_0_RESET_MASK                  _MK_MASK_CONST(0xffffffff)
#define ICTLR_COP_IER_SET_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define ICTLR_COP_IER_SET_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define ICTLR_COP_IER_SET_0_READ_MASK                   _MK_MASK_CONST(0x0)
#define ICTLR_COP_IER_SET_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Writing a 1 in any bit position will enable the  corresponding Interrupt Source for COP 
#define ICTLR_COP_IER_SET_0_COP_IER_SET_SHIFT                   _MK_SHIFT_CONST(0)
#define ICTLR_COP_IER_SET_0_COP_IER_SET_FIELD                   (_MK_MASK_CONST(0xffffffff) << ICTLR_COP_IER_SET_0_COP_IER_SET_SHIFT)
#define ICTLR_COP_IER_SET_0_COP_IER_SET_RANGE                   31:0
#define ICTLR_COP_IER_SET_0_COP_IER_SET_WOFFSET                 0x0
#define ICTLR_COP_IER_SET_0_COP_IER_SET_DEFAULT                 _MK_MASK_CONST(0x0)
#define ICTLR_COP_IER_SET_0_COP_IER_SET_DEFAULT_MASK                    _MK_MASK_CONST(0xffffffff)
#define ICTLR_COP_IER_SET_0_COP_IER_SET_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define ICTLR_COP_IER_SET_0_COP_IER_SET_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// Clear Interrupt Source for COP Register

// Register ICTLR_COP_IER_CLR_0  
#define ICTLR_COP_IER_CLR_0                     _MK_ADDR_CONST(0x38)
#define ICTLR_COP_IER_CLR_0_WORD_COUNT                  0x1
#define ICTLR_COP_IER_CLR_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define ICTLR_COP_IER_CLR_0_RESET_MASK                  _MK_MASK_CONST(0xffffffff)
#define ICTLR_COP_IER_CLR_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define ICTLR_COP_IER_CLR_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define ICTLR_COP_IER_CLR_0_READ_MASK                   _MK_MASK_CONST(0x0)
#define ICTLR_COP_IER_CLR_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Writing a 1 in any bit position will disable the  corresponding Interrupt Source for COP
#define ICTLR_COP_IER_CLR_0_COP_IER_CLR_SHIFT                   _MK_SHIFT_CONST(0)
#define ICTLR_COP_IER_CLR_0_COP_IER_CLR_FIELD                   (_MK_MASK_CONST(0xffffffff) << ICTLR_COP_IER_CLR_0_COP_IER_CLR_SHIFT)
#define ICTLR_COP_IER_CLR_0_COP_IER_CLR_RANGE                   31:0
#define ICTLR_COP_IER_CLR_0_COP_IER_CLR_WOFFSET                 0x0
#define ICTLR_COP_IER_CLR_0_COP_IER_CLR_DEFAULT                 _MK_MASK_CONST(0x0)
#define ICTLR_COP_IER_CLR_0_COP_IER_CLR_DEFAULT_MASK                    _MK_MASK_CONST(0xffffffff)
#define ICTLR_COP_IER_CLR_0_COP_IER_CLR_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define ICTLR_COP_IER_CLR_0_COP_IER_CLR_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)

// COPs Interrupt Enable Priority Class (FIQ/IRQ) Register

// Register ICTLR_COP_IEP_CLASS_0  
#define ICTLR_COP_IEP_CLASS_0                   _MK_ADDR_CONST(0x3c)
#define ICTLR_COP_IEP_CLASS_0_WORD_COUNT                        0x1
#define ICTLR_COP_IEP_CLASS_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define ICTLR_COP_IEP_CLASS_0_RESET_MASK                        _MK_MASK_CONST(0xffffffff)
#define ICTLR_COP_IEP_CLASS_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define ICTLR_COP_IEP_CLASS_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define ICTLR_COP_IEP_CLASS_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define ICTLR_COP_IEP_CLASS_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
//  Set Priority Interrupt Source For COP. 1 = FIQ, 0 = IRQ.
#define ICTLR_COP_IEP_CLASS_0_COP_IEP_CLASS_SHIFT                       _MK_SHIFT_CONST(0)
#define ICTLR_COP_IEP_CLASS_0_COP_IEP_CLASS_FIELD                       (_MK_MASK_CONST(0xffffffff) << ICTLR_COP_IEP_CLASS_0_COP_IEP_CLASS_SHIFT)
#define ICTLR_COP_IEP_CLASS_0_COP_IEP_CLASS_RANGE                       31:0
#define ICTLR_COP_IEP_CLASS_0_COP_IEP_CLASS_WOFFSET                     0x0
#define ICTLR_COP_IEP_CLASS_0_COP_IEP_CLASS_DEFAULT                     _MK_MASK_CONST(0x0)
#define ICTLR_COP_IEP_CLASS_0_COP_IEP_CLASS_DEFAULT_MASK                        _MK_MASK_CONST(0xffffffff)
#define ICTLR_COP_IEP_CLASS_0_COP_IEP_CLASS_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define ICTLR_COP_IEP_CLASS_0_COP_IEP_CLASS_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


//
// REGISTER LIST
//
#define LIST_ARICTLR_REGS(_op_) \
_op_(ICTLR_VIRQ_CPU_0) \
_op_(ICTLR_VIRQ_COP_0) \
_op_(ICTLR_VFIQ_CPU_0) \
_op_(ICTLR_VFIQ_COP_0) \
_op_(ICTLR_ISR_0) \
_op_(ICTLR_FIR_0) \
_op_(ICTLR_FIR_SET_0) \
_op_(ICTLR_FIR_CLR_0) \
_op_(ICTLR_CPU_IER_0) \
_op_(ICTLR_CPU_IER_SET_0) \
_op_(ICTLR_CPU_IER_CLR_0) \
_op_(ICTLR_CPU_IEP_CLASS_0) \
_op_(ICTLR_COP_IER_0) \
_op_(ICTLR_COP_IER_SET_0) \
_op_(ICTLR_COP_IER_CLR_0) \
_op_(ICTLR_COP_IEP_CLASS_0)


//
// ADDRESS SPACES
//

#define BASE_ADDRESS_ICTLR      0x00000000

//
// ARICTLR REGISTER BANKS
//

#define ICTLR0_FIRST_REG 0x0000 // ICTLR_VIRQ_CPU_0
#define ICTLR0_LAST_REG 0x003c // ICTLR_COP_IEP_CLASS_0

#ifndef _MK_SHIFT_CONST
  #define _MK_SHIFT_CONST(_constant_) _constant_
#endif
#ifndef _MK_MASK_CONST
  #define _MK_MASK_CONST(_constant_) _constant_
#endif
#ifndef _MK_ENUM_CONST
  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
#endif
#ifndef _MK_ADDR_CONST
  #define _MK_ADDR_CONST(_constant_) _constant_
#endif

#endif // ifndef ___ARICTLR_H_INC_
