//
// DO NOT EDIT - generated by simspec!
//

#ifndef ___ARSPDIF_PPI_H_INC_
#define ___ARSPDIF_PPI_H_INC_
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  The SPDIF is consisting of the following two major modules:
//      (1)     The SPDIFOUT submodule is responsible for sending data to the "spdifout" port in IEC 60958-3
//              biphase-mark code format.
//      (2)     The SPDIFIN submodule is responsible for retrieving data to the "spdifin" port in IEC 60958-3
//              biphase-mark code format.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Feature:
//      (1)     Support 5 data format.
//              (a)     16-bit.
//              (b)     20-bit.
//              (c)     24-bit.
//              (d)     raw.
//              (e)     16-bit packed.
//      (2)     Support "autolock" mode to automatically detect the "spdifin" sample rate and lock onto the
//              data stream.
//      (3)     Support "override" mode to provide a manual control to sampel the "spdifin" data stream.
//      (4)     Provide a loopback mode to route the "spdifout" back to "spdifin" for self-testing.
//      (5)     SPDIFOUT (transmitter).
//              (a)     16-word data FIFO for storage of outgoing audio data.
//              (b)     4-word user FIFO for storage of outgoing user data.
//              (c)     6-word page buffer for storage of outgoing channel status.
//      (6)     SPDIFIN (receiver).
//              (a)     16-word data FIFO for storage of incoming audio data.
//              (b)     4-word user FIFO for storage of incoming user data.
//              (c)     6-word page buffer for storage of incoming channel status.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Below are the clock rate required by each sub-controller for the given sample rate.
//
//  Sample Rate:        SPDIFOUT clock freq.    Period          SPDIFIN clock freq.
//     (KHz)            (exact freq. MHz)        (ns)           (min. freq but <= 100MHz)
//  -----------------------------------------------------------------------------------------------------------
//     32.0                     4.0960          244.141         16.3840 (48MHz typical)
//     44.1                     5.6448          177.154         22.5790 (48MHz typical)
//     48.0                     6.1440          162.760         24.5760 (48MHz typical)
//     88.2                    11.2896           88.577         45.1584 (72MHz typical)
//     96.0                    12.2880           81.380         49.1520 (72MHz typical)
//    176.4                    22.5792           44.289         90.3168 (108MHz typical)
//    192.0                    24.5760           40.690         98.3040 (108MHz typical)
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SPDIF Control Register
// -------------------------
// Note:  Changing the state of TC_EN, TU_EN, LBK_EN, PACK, BIT_MODE while 
//        RX_EN and/or TX_EN and/or RX_BSY and/or TX_BSY is set can cause
//        unexpected behavior and therefore shall not be attempted.
// Note:  It's important to fill transmitter's data/user FIFOs and channel
//        status page buffer with valid data prior to enabling the 
//        transmitter (TX_EN=1) since the first FIFO/data buffer entries
//        will be loaded immediately onto temporary storage buffers when
//        TX_EN change to enable.

// Register SPDIF_CTRL_0  
#define SPDIF_CTRL_0                    _MK_ADDR_CONST(0x0)
#define SPDIF_CTRL_0_WORD_COUNT                         0x1
#define SPDIF_CTRL_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_RESET_MASK                         _MK_MASK_CONST(0x7ffff000)
#define SPDIF_CTRL_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_READ_MASK                  _MK_MASK_CONST(0x7ffff000)
#define SPDIF_CTRL_0_WRITE_MASK                         _MK_MASK_CONST(0x7ffff000)
// 1=start capturing from left channel,0=start capturing from right channel.
#define SPDIF_CTRL_0_CAP_LC_SHIFT                       _MK_SHIFT_CONST(30)
#define SPDIF_CTRL_0_CAP_LC_FIELD                       (_MK_MASK_CONST(0x1) << SPDIF_CTRL_0_CAP_LC_SHIFT)
#define SPDIF_CTRL_0_CAP_LC_RANGE                       30:30
#define SPDIF_CTRL_0_CAP_LC_WOFFSET                     0x0
#define SPDIF_CTRL_0_CAP_LC_DEFAULT                     _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_CAP_LC_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define SPDIF_CTRL_0_CAP_LC_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_CAP_LC_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_CAP_LC_RIGHT_CH                    _MK_ENUM_CONST(0)
#define SPDIF_CTRL_0_CAP_LC_LEFT_CH                     _MK_ENUM_CONST(1)

// SPDIF receiver(RX):                  1=enable, 0=disable.
#define SPDIF_CTRL_0_RX_EN_SHIFT                        _MK_SHIFT_CONST(29)
#define SPDIF_CTRL_0_RX_EN_FIELD                        (_MK_MASK_CONST(0x1) << SPDIF_CTRL_0_RX_EN_SHIFT)
#define SPDIF_CTRL_0_RX_EN_RANGE                        29:29
#define SPDIF_CTRL_0_RX_EN_WOFFSET                      0x0
#define SPDIF_CTRL_0_RX_EN_DEFAULT                      _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_RX_EN_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SPDIF_CTRL_0_RX_EN_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_RX_EN_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_RX_EN_DISABLE                      _MK_ENUM_CONST(0)
#define SPDIF_CTRL_0_RX_EN_ENABLE                       _MK_ENUM_CONST(1)

// SPDIF Transmitter(TX):               1=enable, 0=disable.
#define SPDIF_CTRL_0_TX_EN_SHIFT                        _MK_SHIFT_CONST(28)
#define SPDIF_CTRL_0_TX_EN_FIELD                        (_MK_MASK_CONST(0x1) << SPDIF_CTRL_0_TX_EN_SHIFT)
#define SPDIF_CTRL_0_TX_EN_RANGE                        28:28
#define SPDIF_CTRL_0_TX_EN_WOFFSET                      0x0
#define SPDIF_CTRL_0_TX_EN_DEFAULT                      _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_TX_EN_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SPDIF_CTRL_0_TX_EN_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_TX_EN_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_TX_EN_DISABLE                      _MK_ENUM_CONST(0)
#define SPDIF_CTRL_0_TX_EN_ENABLE                       _MK_ENUM_CONST(1)

// Transmit Channel status:             1=enable, 0=disable.
#define SPDIF_CTRL_0_TC_EN_SHIFT                        _MK_SHIFT_CONST(27)
#define SPDIF_CTRL_0_TC_EN_FIELD                        (_MK_MASK_CONST(0x1) << SPDIF_CTRL_0_TC_EN_SHIFT)
#define SPDIF_CTRL_0_TC_EN_RANGE                        27:27
#define SPDIF_CTRL_0_TC_EN_WOFFSET                      0x0
#define SPDIF_CTRL_0_TC_EN_DEFAULT                      _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_TC_EN_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SPDIF_CTRL_0_TC_EN_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_TC_EN_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_TC_EN_DISABLE                      _MK_ENUM_CONST(0)
#define SPDIF_CTRL_0_TC_EN_ENABLE                       _MK_ENUM_CONST(1)

// Transmit user Data:                  1=enable, 0=disable.
#define SPDIF_CTRL_0_TU_EN_SHIFT                        _MK_SHIFT_CONST(26)
#define SPDIF_CTRL_0_TU_EN_FIELD                        (_MK_MASK_CONST(0x1) << SPDIF_CTRL_0_TU_EN_SHIFT)
#define SPDIF_CTRL_0_TU_EN_RANGE                        26:26
#define SPDIF_CTRL_0_TU_EN_WOFFSET                      0x0
#define SPDIF_CTRL_0_TU_EN_DEFAULT                      _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_TU_EN_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SPDIF_CTRL_0_TU_EN_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_TU_EN_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_TU_EN_DISABLE                      _MK_ENUM_CONST(0)
#define SPDIF_CTRL_0_TU_EN_ENABLE                       _MK_ENUM_CONST(1)

// Interrupt on transmit error:         1=enable, 0=disable.
#define SPDIF_CTRL_0_IE_TXE_SHIFT                       _MK_SHIFT_CONST(25)
#define SPDIF_CTRL_0_IE_TXE_FIELD                       (_MK_MASK_CONST(0x1) << SPDIF_CTRL_0_IE_TXE_SHIFT)
#define SPDIF_CTRL_0_IE_TXE_RANGE                       25:25
#define SPDIF_CTRL_0_IE_TXE_WOFFSET                     0x0
#define SPDIF_CTRL_0_IE_TXE_DEFAULT                     _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_IE_TXE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define SPDIF_CTRL_0_IE_TXE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_IE_TXE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_IE_TXE_DISABLE                     _MK_ENUM_CONST(0)
#define SPDIF_CTRL_0_IE_TXE_ENABLE                      _MK_ENUM_CONST(1)

// Interrupt on receive error:          1=enable, 0=disable.
#define SPDIF_CTRL_0_IE_RXE_SHIFT                       _MK_SHIFT_CONST(24)
#define SPDIF_CTRL_0_IE_RXE_FIELD                       (_MK_MASK_CONST(0x1) << SPDIF_CTRL_0_IE_RXE_SHIFT)
#define SPDIF_CTRL_0_IE_RXE_RANGE                       24:24
#define SPDIF_CTRL_0_IE_RXE_WOFFSET                     0x0
#define SPDIF_CTRL_0_IE_RXE_DEFAULT                     _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_IE_RXE_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define SPDIF_CTRL_0_IE_RXE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_IE_RXE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_IE_RXE_DISABLE                     _MK_ENUM_CONST(0)
#define SPDIF_CTRL_0_IE_RXE_ENABLE                      _MK_ENUM_CONST(1)

// Interrupt on invalid preamble:       1=enable, 0=disable.
#define SPDIF_CTRL_0_IE_P_SHIFT                 _MK_SHIFT_CONST(23)
#define SPDIF_CTRL_0_IE_P_FIELD                 (_MK_MASK_CONST(0x1) << SPDIF_CTRL_0_IE_P_SHIFT)
#define SPDIF_CTRL_0_IE_P_RANGE                 23:23
#define SPDIF_CTRL_0_IE_P_WOFFSET                       0x0
#define SPDIF_CTRL_0_IE_P_DEFAULT                       _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_IE_P_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SPDIF_CTRL_0_IE_P_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_IE_P_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_IE_P_DISABLE                       _MK_ENUM_CONST(0)
#define SPDIF_CTRL_0_IE_P_ENABLE                        _MK_ENUM_CONST(1)

// Interrupt on "B" preamble:           1=enable, 0=disable.
#define SPDIF_CTRL_0_IE_B_SHIFT                 _MK_SHIFT_CONST(22)
#define SPDIF_CTRL_0_IE_B_FIELD                 (_MK_MASK_CONST(0x1) << SPDIF_CTRL_0_IE_B_SHIFT)
#define SPDIF_CTRL_0_IE_B_RANGE                 22:22
#define SPDIF_CTRL_0_IE_B_WOFFSET                       0x0
#define SPDIF_CTRL_0_IE_B_DEFAULT                       _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_IE_B_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SPDIF_CTRL_0_IE_B_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_IE_B_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_IE_B_DISABLE                       _MK_ENUM_CONST(0)
#define SPDIF_CTRL_0_IE_B_ENABLE                        _MK_ENUM_CONST(1)

// Interrupt when block of channel status received:      1=enable, 0=disable.
#define SPDIF_CTRL_0_IE_C_SHIFT                 _MK_SHIFT_CONST(21)
#define SPDIF_CTRL_0_IE_C_FIELD                 (_MK_MASK_CONST(0x1) << SPDIF_CTRL_0_IE_C_SHIFT)
#define SPDIF_CTRL_0_IE_C_RANGE                 21:21
#define SPDIF_CTRL_0_IE_C_WOFFSET                       0x0
#define SPDIF_CTRL_0_IE_C_DEFAULT                       _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_IE_C_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SPDIF_CTRL_0_IE_C_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_IE_C_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_IE_C_DISABLE                       _MK_ENUM_CONST(0)
#define SPDIF_CTRL_0_IE_C_ENABLE                        _MK_ENUM_CONST(1)

// Interrupt when a valid information unit (IU) recieve: 1=enable, 0=disable.
#define SPDIF_CTRL_0_IE_U_SHIFT                 _MK_SHIFT_CONST(20)
#define SPDIF_CTRL_0_IE_U_FIELD                 (_MK_MASK_CONST(0x1) << SPDIF_CTRL_0_IE_U_SHIFT)
#define SPDIF_CTRL_0_IE_U_RANGE                 20:20
#define SPDIF_CTRL_0_IE_U_WOFFSET                       0x0
#define SPDIF_CTRL_0_IE_U_DEFAULT                       _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_IE_U_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SPDIF_CTRL_0_IE_U_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_IE_U_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_IE_U_DISABLE                       _MK_ENUM_CONST(0)
#define SPDIF_CTRL_0_IE_U_ENABLE                        _MK_ENUM_CONST(1)

// Interrupt when RX user FIFO attn. level is reached:   1=enable, 0=disable.
#define SPDIF_CTRL_0_QE_RU_SHIFT                        _MK_SHIFT_CONST(19)
#define SPDIF_CTRL_0_QE_RU_FIELD                        (_MK_MASK_CONST(0x1) << SPDIF_CTRL_0_QE_RU_SHIFT)
#define SPDIF_CTRL_0_QE_RU_RANGE                        19:19
#define SPDIF_CTRL_0_QE_RU_WOFFSET                      0x0
#define SPDIF_CTRL_0_QE_RU_DEFAULT                      _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_QE_RU_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SPDIF_CTRL_0_QE_RU_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_QE_RU_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_QE_RU_DISABLE                      _MK_ENUM_CONST(0)
#define SPDIF_CTRL_0_QE_RU_ENABLE                       _MK_ENUM_CONST(1)

// Interrupt when TX user FIFO attn. level is reached:   1=enable, 0=disable.
#define SPDIF_CTRL_0_QE_TU_SHIFT                        _MK_SHIFT_CONST(18)
#define SPDIF_CTRL_0_QE_TU_FIELD                        (_MK_MASK_CONST(0x1) << SPDIF_CTRL_0_QE_TU_SHIFT)
#define SPDIF_CTRL_0_QE_TU_RANGE                        18:18
#define SPDIF_CTRL_0_QE_TU_WOFFSET                      0x0
#define SPDIF_CTRL_0_QE_TU_DEFAULT                      _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_QE_TU_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SPDIF_CTRL_0_QE_TU_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_QE_TU_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_QE_TU_DISABLE                      _MK_ENUM_CONST(0)
#define SPDIF_CTRL_0_QE_TU_ENABLE                       _MK_ENUM_CONST(1)

// Interrupt when RX data FIFO attn. level is reached:   1=enable, 0=disable.
#define SPDIF_CTRL_0_QE_RX_SHIFT                        _MK_SHIFT_CONST(17)
#define SPDIF_CTRL_0_QE_RX_FIELD                        (_MK_MASK_CONST(0x1) << SPDIF_CTRL_0_QE_RX_SHIFT)
#define SPDIF_CTRL_0_QE_RX_RANGE                        17:17
#define SPDIF_CTRL_0_QE_RX_WOFFSET                      0x0
#define SPDIF_CTRL_0_QE_RX_DEFAULT                      _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_QE_RX_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SPDIF_CTRL_0_QE_RX_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_QE_RX_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_QE_RX_DISABLE                      _MK_ENUM_CONST(0)
#define SPDIF_CTRL_0_QE_RX_ENABLE                       _MK_ENUM_CONST(1)

// Interrupt when TX data FIFO attn. level is reached:   1=lnable, 0=disable.
#define SPDIF_CTRL_0_QE_TX_SHIFT                        _MK_SHIFT_CONST(16)
#define SPDIF_CTRL_0_QE_TX_FIELD                        (_MK_MASK_CONST(0x1) << SPDIF_CTRL_0_QE_TX_SHIFT)
#define SPDIF_CTRL_0_QE_TX_RANGE                        16:16
#define SPDIF_CTRL_0_QE_TX_WOFFSET                      0x0
#define SPDIF_CTRL_0_QE_TX_DEFAULT                      _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_QE_TX_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SPDIF_CTRL_0_QE_TX_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_QE_TX_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_QE_TX_DISABLE                      _MK_ENUM_CONST(0)
#define SPDIF_CTRL_0_QE_TX_ENABLE                       _MK_ENUM_CONST(1)

// Loopback test mode:   1=enable internal loopback, 0=Normal mode.
#define SPDIF_CTRL_0_LBK_EN_SHIFT                       _MK_SHIFT_CONST(15)
#define SPDIF_CTRL_0_LBK_EN_FIELD                       (_MK_MASK_CONST(0x1) << SPDIF_CTRL_0_LBK_EN_SHIFT)
#define SPDIF_CTRL_0_LBK_EN_RANGE                       15:15
#define SPDIF_CTRL_0_LBK_EN_WOFFSET                     0x0
#define SPDIF_CTRL_0_LBK_EN_DEFAULT                     _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_LBK_EN_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define SPDIF_CTRL_0_LBK_EN_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_LBK_EN_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_LBK_EN_DISABLE                     _MK_ENUM_CONST(0)
#define SPDIF_CTRL_0_LBK_EN_ENABLE                      _MK_ENUM_CONST(1)

// Pack data mode: 1=Packeted left/right channel data into a single word, 
//                 0=Single data (16 bit needs to be  padded to match the 
//                   interface data bit size)
#define SPDIF_CTRL_0_PACK_SHIFT                 _MK_SHIFT_CONST(14)
#define SPDIF_CTRL_0_PACK_FIELD                 (_MK_MASK_CONST(0x1) << SPDIF_CTRL_0_PACK_SHIFT)
#define SPDIF_CTRL_0_PACK_RANGE                 14:14
#define SPDIF_CTRL_0_PACK_WOFFSET                       0x0
#define SPDIF_CTRL_0_PACK_DEFAULT                       _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_PACK_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SPDIF_CTRL_0_PACK_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_PACK_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_PACK_DISABLE                       _MK_ENUM_CONST(0)
#define SPDIF_CTRL_0_PACK_ENABLE                        _MK_ENUM_CONST(1)

// 00=16bit data 
// 01=20bit data 
// 10=24bit data 
// 11=raw data
#define SPDIF_CTRL_0_BIT_MODE_SHIFT                     _MK_SHIFT_CONST(12)
#define SPDIF_CTRL_0_BIT_MODE_FIELD                     (_MK_MASK_CONST(0x3) << SPDIF_CTRL_0_BIT_MODE_SHIFT)
#define SPDIF_CTRL_0_BIT_MODE_RANGE                     13:12
#define SPDIF_CTRL_0_BIT_MODE_WOFFSET                   0x0
#define SPDIF_CTRL_0_BIT_MODE_DEFAULT                   _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_BIT_MODE_DEFAULT_MASK                      _MK_MASK_CONST(0x3)
#define SPDIF_CTRL_0_BIT_MODE_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_BIT_MODE_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SPDIF_CTRL_0_BIT_MODE_MODE16BIT                 _MK_ENUM_CONST(0)
#define SPDIF_CTRL_0_BIT_MODE_MODE20BIT                 _MK_ENUM_CONST(1)
#define SPDIF_CTRL_0_BIT_MODE_MODE24BIT                 _MK_ENUM_CONST(2)
#define SPDIF_CTRL_0_BIT_MODE_MODERAW                   _MK_ENUM_CONST(3)

// SPDIF Status Register
// -------------------------
// Note:  IS_P, IS_B, IS_C, and IS_U are sticky bits.  Software must write a 1 to the corresponding bit location to clear the status.

// Register SPDIF_STATUS_0  
#define SPDIF_STATUS_0                  _MK_ADDR_CONST(0x4)
#define SPDIF_STATUS_0_WORD_COUNT                       0x1
#define SPDIF_STATUS_0_RESET_VAL                        _MK_MASK_CONST(0x50000)
#define SPDIF_STATUS_0_RESET_MASK                       _MK_MASK_CONST(0x3fff0000)
#define SPDIF_STATUS_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_READ_MASK                        _MK_MASK_CONST(0x3fff0000)
#define SPDIF_STATUS_0_WRITE_MASK                       _MK_MASK_CONST(0x0)
// Receiver(RX) shifter is busy receiving data.  1=busy, 0=not busy.
//   This bit is asserted when the receiver first locked onto the preamble of the
//   data stream after RX_EN is asserted.  This bit is deasserted when either,
//      (a)  the end of a frame is reached after RX_EN is deeasserted, or
//      (b)  the SPDIF data stream becomes inactive.
#define SPDIF_STATUS_0_RX_BSY_SHIFT                     _MK_SHIFT_CONST(29)
#define SPDIF_STATUS_0_RX_BSY_FIELD                     (_MK_MASK_CONST(0x1) << SPDIF_STATUS_0_RX_BSY_SHIFT)
#define SPDIF_STATUS_0_RX_BSY_RANGE                     29:29
#define SPDIF_STATUS_0_RX_BSY_WOFFSET                   0x0
#define SPDIF_STATUS_0_RX_BSY_DEFAULT                   _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_RX_BSY_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define SPDIF_STATUS_0_RX_BSY_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_RX_BSY_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_RX_BSY_FREE                      _MK_ENUM_CONST(0)
#define SPDIF_STATUS_0_RX_BSY_BUSY                      _MK_ENUM_CONST(1)

// Transmitter(TX) shifter is busy transmitting data.  1=busy, 0=not busy.
//   This bit is asserted when TX_EN is asserted.  This bit is deasserted when the
//   end of a frame is reached after TX_EN is deasserted.
#define SPDIF_STATUS_0_TX_BSY_SHIFT                     _MK_SHIFT_CONST(28)
#define SPDIF_STATUS_0_TX_BSY_FIELD                     (_MK_MASK_CONST(0x1) << SPDIF_STATUS_0_TX_BSY_SHIFT)
#define SPDIF_STATUS_0_TX_BSY_RANGE                     28:28
#define SPDIF_STATUS_0_TX_BSY_WOFFSET                   0x0
#define SPDIF_STATUS_0_TX_BSY_DEFAULT                   _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_TX_BSY_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define SPDIF_STATUS_0_TX_BSY_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_TX_BSY_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_TX_BSY_FREE                      _MK_ENUM_CONST(0)
#define SPDIF_STATUS_0_TX_BSY_BUSY                      _MK_ENUM_CONST(1)

// TX is busy shifting out channel status.  1=busy, 0=not busy.
//   This bit is asserted when both TX_EN and TC_EN are asserted and data from
//   CH_STA_TX_A register is loaded into the internal shifter.  This bit is deasserted
//   when either,
//      (a) the end of a frame is reached after TX_EN is deasserted, or
//      (b) CH_STA_TX_F register is loaded into the internal shifter.
#define SPDIF_STATUS_0_TC_BSY_SHIFT                     _MK_SHIFT_CONST(27)
#define SPDIF_STATUS_0_TC_BSY_FIELD                     (_MK_MASK_CONST(0x1) << SPDIF_STATUS_0_TC_BSY_SHIFT)
#define SPDIF_STATUS_0_TC_BSY_RANGE                     27:27
#define SPDIF_STATUS_0_TC_BSY_WOFFSET                   0x0
#define SPDIF_STATUS_0_TC_BSY_DEFAULT                   _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_TC_BSY_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define SPDIF_STATUS_0_TC_BSY_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_TC_BSY_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_TC_BSY_FREE                      _MK_ENUM_CONST(0)
#define SPDIF_STATUS_0_TC_BSY_BUSY                      _MK_ENUM_CONST(1)

// TX User data FIFO busy.  1=busy, 0=not busy.
//   This bit is asserted when TX_EN and TXU_EN are asserted and there's data in the
//   TX user FIFO.  This bit is deassert when either,
//      (a) the end of a frame is reached after TX_EN is deasserted, or
//   (b) there's no data left in the TX user FIFO.
#define SPDIF_STATUS_0_TU_BSY_SHIFT                     _MK_SHIFT_CONST(26)
#define SPDIF_STATUS_0_TU_BSY_FIELD                     (_MK_MASK_CONST(0x1) << SPDIF_STATUS_0_TU_BSY_SHIFT)
#define SPDIF_STATUS_0_TU_BSY_RANGE                     26:26
#define SPDIF_STATUS_0_TU_BSY_WOFFSET                   0x0
#define SPDIF_STATUS_0_TU_BSY_DEFAULT                   _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_TU_BSY_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define SPDIF_STATUS_0_TU_BSY_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_TU_BSY_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_TU_BSY_FREE                      _MK_ENUM_CONST(0)
#define SPDIF_STATUS_0_TU_BSY_BUSY                      _MK_ENUM_CONST(1)

// Tx FIFO Underrun error status:        1=error, 0=no error
#define SPDIF_STATUS_0_TX_ERR_SHIFT                     _MK_SHIFT_CONST(25)
#define SPDIF_STATUS_0_TX_ERR_FIELD                     (_MK_MASK_CONST(0x1) << SPDIF_STATUS_0_TX_ERR_SHIFT)
#define SPDIF_STATUS_0_TX_ERR_RANGE                     25:25
#define SPDIF_STATUS_0_TX_ERR_WOFFSET                   0x0
#define SPDIF_STATUS_0_TX_ERR_DEFAULT                   _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_TX_ERR_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define SPDIF_STATUS_0_TX_ERR_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_TX_ERR_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_TX_ERR_NO_ERROR                  _MK_ENUM_CONST(0)
#define SPDIF_STATUS_0_TX_ERR_ERROR                     _MK_ENUM_CONST(1)

// Rx FIFO Overrun error status:         1=error, 0=no error
#define SPDIF_STATUS_0_RX_ERR_SHIFT                     _MK_SHIFT_CONST(24)
#define SPDIF_STATUS_0_RX_ERR_FIELD                     (_MK_MASK_CONST(0x1) << SPDIF_STATUS_0_RX_ERR_SHIFT)
#define SPDIF_STATUS_0_RX_ERR_RANGE                     24:24
#define SPDIF_STATUS_0_RX_ERR_WOFFSET                   0x0
#define SPDIF_STATUS_0_RX_ERR_DEFAULT                   _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_RX_ERR_DEFAULT_MASK                      _MK_MASK_CONST(0x1)
#define SPDIF_STATUS_0_RX_ERR_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_RX_ERR_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_RX_ERR_NO_ERROR                  _MK_ENUM_CONST(0)
#define SPDIF_STATUS_0_RX_ERR_ERROR                     _MK_ENUM_CONST(1)

// Preamble status:             1=bad/missing preamble, 0=Preamble ok
#define SPDIF_STATUS_0_IS_P_SHIFT                       _MK_SHIFT_CONST(23)
#define SPDIF_STATUS_0_IS_P_FIELD                       (_MK_MASK_CONST(0x1) << SPDIF_STATUS_0_IS_P_SHIFT)
#define SPDIF_STATUS_0_IS_P_RANGE                       23:23
#define SPDIF_STATUS_0_IS_P_WOFFSET                     0x0
#define SPDIF_STATUS_0_IS_P_DEFAULT                     _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_IS_P_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define SPDIF_STATUS_0_IS_P_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_IS_P_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_IS_P_OK                  _MK_ENUM_CONST(0)
#define SPDIF_STATUS_0_IS_P_MISSED                      _MK_ENUM_CONST(1)

// B-preamble detection status: 0=not detected, 1=B-preamble detected
#define SPDIF_STATUS_0_IS_B_SHIFT                       _MK_SHIFT_CONST(22)
#define SPDIF_STATUS_0_IS_B_FIELD                       (_MK_MASK_CONST(0x1) << SPDIF_STATUS_0_IS_B_SHIFT)
#define SPDIF_STATUS_0_IS_B_RANGE                       22:22
#define SPDIF_STATUS_0_IS_B_WOFFSET                     0x0
#define SPDIF_STATUS_0_IS_B_DEFAULT                     _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_IS_B_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define SPDIF_STATUS_0_IS_B_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_IS_B_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_IS_B_NOT_DETECTED                        _MK_ENUM_CONST(0)
#define SPDIF_STATUS_0_IS_B_DETECTED                    _MK_ENUM_CONST(1)

// RX channel block data receive atatus:  1=received entire block of channel status, 
//                                        0=entire block not recieved yet. 
#define SPDIF_STATUS_0_IS_C_SHIFT                       _MK_SHIFT_CONST(21)
#define SPDIF_STATUS_0_IS_C_FIELD                       (_MK_MASK_CONST(0x1) << SPDIF_STATUS_0_IS_C_SHIFT)
#define SPDIF_STATUS_0_IS_C_RANGE                       21:21
#define SPDIF_STATUS_0_IS_C_WOFFSET                     0x0
#define SPDIF_STATUS_0_IS_C_DEFAULT                     _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_IS_C_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define SPDIF_STATUS_0_IS_C_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_IS_C_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// RX User Data Valid flag:  1=valid IU detected, 0 = no IU detected.
#define SPDIF_STATUS_0_IS_U_SHIFT                       _MK_SHIFT_CONST(20)
#define SPDIF_STATUS_0_IS_U_FIELD                       (_MK_MASK_CONST(0x1) << SPDIF_STATUS_0_IS_U_SHIFT)
#define SPDIF_STATUS_0_IS_U_RANGE                       20:20
#define SPDIF_STATUS_0_IS_U_WOFFSET                     0x0
#define SPDIF_STATUS_0_IS_U_DEFAULT                     _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_IS_U_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define SPDIF_STATUS_0_IS_U_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_IS_U_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// RX User FIFO Status:  1=attention level reached, 0=attention level not reached.
#define SPDIF_STATUS_0_QS_RU_SHIFT                      _MK_SHIFT_CONST(19)
#define SPDIF_STATUS_0_QS_RU_FIELD                      (_MK_MASK_CONST(0x1) << SPDIF_STATUS_0_QS_RU_SHIFT)
#define SPDIF_STATUS_0_QS_RU_RANGE                      19:19
#define SPDIF_STATUS_0_QS_RU_WOFFSET                    0x0
#define SPDIF_STATUS_0_QS_RU_DEFAULT                    _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_QS_RU_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define SPDIF_STATUS_0_QS_RU_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_QS_RU_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// TX User FIFO Status:  1=attention level reached, 0=attention level not reached.
#define SPDIF_STATUS_0_QS_TU_SHIFT                      _MK_SHIFT_CONST(18)
#define SPDIF_STATUS_0_QS_TU_FIELD                      (_MK_MASK_CONST(0x1) << SPDIF_STATUS_0_QS_TU_SHIFT)
#define SPDIF_STATUS_0_QS_TU_RANGE                      18:18
#define SPDIF_STATUS_0_QS_TU_WOFFSET                    0x0
#define SPDIF_STATUS_0_QS_TU_DEFAULT                    _MK_MASK_CONST(0x1)
#define SPDIF_STATUS_0_QS_TU_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define SPDIF_STATUS_0_QS_TU_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_QS_TU_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// RX Data FIFO Status:  1=attention level reached, 0=attention level not reached.
#define SPDIF_STATUS_0_QS_RX_SHIFT                      _MK_SHIFT_CONST(17)
#define SPDIF_STATUS_0_QS_RX_FIELD                      (_MK_MASK_CONST(0x1) << SPDIF_STATUS_0_QS_RX_SHIFT)
#define SPDIF_STATUS_0_QS_RX_RANGE                      17:17
#define SPDIF_STATUS_0_QS_RX_WOFFSET                    0x0
#define SPDIF_STATUS_0_QS_RX_DEFAULT                    _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_QS_RX_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define SPDIF_STATUS_0_QS_RX_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_QS_RX_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// TX Data FIFO Status:  1=attention level reached, 0=attention level not reached.
#define SPDIF_STATUS_0_QS_TX_SHIFT                      _MK_SHIFT_CONST(16)
#define SPDIF_STATUS_0_QS_TX_FIELD                      (_MK_MASK_CONST(0x1) << SPDIF_STATUS_0_QS_TX_SHIFT)
#define SPDIF_STATUS_0_QS_TX_RANGE                      16:16
#define SPDIF_STATUS_0_QS_TX_WOFFSET                    0x0
#define SPDIF_STATUS_0_QS_TX_DEFAULT                    _MK_MASK_CONST(0x1)
#define SPDIF_STATUS_0_QS_TX_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define SPDIF_STATUS_0_QS_TX_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SPDIF_STATUS_0_QS_TX_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// SPDIF Data Strobe Control Register

// Register SPDIF_STROBE_CTRL_0  
#define SPDIF_STROBE_CTRL_0                     _MK_ADDR_CONST(0x8)
#define SPDIF_STROBE_CTRL_0_WORD_COUNT                  0x1
#define SPDIF_STROBE_CTRL_0_RESET_VAL                   _MK_MASK_CONST(0x7f0000)
#define SPDIF_STROBE_CTRL_0_RESET_MASK                  _MK_MASK_CONST(0xff9f3f)
#define SPDIF_STROBE_CTRL_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define SPDIF_STROBE_CTRL_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SPDIF_STROBE_CTRL_0_READ_MASK                   _MK_MASK_CONST(0xff9f3f)
#define SPDIF_STROBE_CTRL_0_WRITE_MASK                  _MK_MASK_CONST(0x9f3f)
// Indicates the approximate number of detected SPDIFIN clocks within a biphase period.
#define SPDIF_STROBE_CTRL_0_PERIOD_SHIFT                        _MK_SHIFT_CONST(16)
#define SPDIF_STROBE_CTRL_0_PERIOD_FIELD                        (_MK_MASK_CONST(0xff) << SPDIF_STROBE_CTRL_0_PERIOD_SHIFT)
#define SPDIF_STROBE_CTRL_0_PERIOD_RANGE                        23:16
#define SPDIF_STROBE_CTRL_0_PERIOD_WOFFSET                      0x0
#define SPDIF_STROBE_CTRL_0_PERIOD_DEFAULT                      _MK_MASK_CONST(0x7f)
#define SPDIF_STROBE_CTRL_0_PERIOD_DEFAULT_MASK                 _MK_MASK_CONST(0xff)
#define SPDIF_STROBE_CTRL_0_PERIOD_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SPDIF_STROBE_CTRL_0_PERIOD_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// SPDIFIN Data Strobe Mode 1=Manual-locked strobe 0=Auto-locked strobe (default)
#define SPDIF_STROBE_CTRL_0_STROBE_SHIFT                        _MK_SHIFT_CONST(15)
#define SPDIF_STROBE_CTRL_0_STROBE_FIELD                        (_MK_MASK_CONST(0x1) << SPDIF_STROBE_CTRL_0_STROBE_SHIFT)
#define SPDIF_STROBE_CTRL_0_STROBE_RANGE                        15:15
#define SPDIF_STROBE_CTRL_0_STROBE_WOFFSET                      0x0
#define SPDIF_STROBE_CTRL_0_STROBE_DEFAULT                      _MK_MASK_CONST(0x0)
#define SPDIF_STROBE_CTRL_0_STROBE_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SPDIF_STROBE_CTRL_0_STROBE_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SPDIF_STROBE_CTRL_0_STROBE_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Manual data strobe time within the bi-phase clock period (in terms of the number 
// of over-sampling clocks)
#define SPDIF_STROBE_CTRL_0_DATA_STROBES_SHIFT                  _MK_SHIFT_CONST(8)
#define SPDIF_STROBE_CTRL_0_DATA_STROBES_FIELD                  (_MK_MASK_CONST(0x1f) << SPDIF_STROBE_CTRL_0_DATA_STROBES_SHIFT)
#define SPDIF_STROBE_CTRL_0_DATA_STROBES_RANGE                  12:8
#define SPDIF_STROBE_CTRL_0_DATA_STROBES_WOFFSET                        0x0
#define SPDIF_STROBE_CTRL_0_DATA_STROBES_DEFAULT                        _MK_MASK_CONST(0x0)
#define SPDIF_STROBE_CTRL_0_DATA_STROBES_DEFAULT_MASK                   _MK_MASK_CONST(0x1f)
#define SPDIF_STROBE_CTRL_0_DATA_STROBES_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SPDIF_STROBE_CTRL_0_DATA_STROBES_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Manual SPDIFIN bi-phase clock period (in terms of the number of over-sampling or
// 'spdifin' clocks)
#define SPDIF_STROBE_CTRL_0_CLOCK_PERIOD_SHIFT                  _MK_SHIFT_CONST(0)
#define SPDIF_STROBE_CTRL_0_CLOCK_PERIOD_FIELD                  (_MK_MASK_CONST(0x3f) << SPDIF_STROBE_CTRL_0_CLOCK_PERIOD_SHIFT)
#define SPDIF_STROBE_CTRL_0_CLOCK_PERIOD_RANGE                  5:0
#define SPDIF_STROBE_CTRL_0_CLOCK_PERIOD_WOFFSET                        0x0
#define SPDIF_STROBE_CTRL_0_CLOCK_PERIOD_DEFAULT                        _MK_MASK_CONST(0x0)
#define SPDIF_STROBE_CTRL_0_CLOCK_PERIOD_DEFAULT_MASK                   _MK_MASK_CONST(0x3f)
#define SPDIF_STROBE_CTRL_0_CLOCK_PERIOD_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SPDIF_STROBE_CTRL_0_CLOCK_PERIOD_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// SPDIF FIFO Configuration and Status Register

// Register SPDIF_DATA_FIFO_CSR_0  
#define SPDIF_DATA_FIFO_CSR_0                   _MK_ADDR_CONST(0xc)
#define SPDIF_DATA_FIFO_CSR_0_WORD_COUNT                        0x1
#define SPDIF_DATA_FIFO_CSR_0_RESET_VAL                         _MK_MASK_CONST(0x40010)
#define SPDIF_DATA_FIFO_CSR_0_RESET_MASK                        _MK_MASK_CONST(0xffffffff)
#define SPDIF_DATA_FIFO_CSR_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define SPDIF_DATA_FIFO_CSR_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define SPDIF_DATA_FIFO_CSR_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define SPDIF_DATA_FIFO_CSR_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
// Clear Receiver User FIFO (RX USR.FIFO)
#define SPDIF_DATA_FIFO_CSR_0_RU_CLR_SHIFT                      _MK_SHIFT_CONST(31)
#define SPDIF_DATA_FIFO_CSR_0_RU_CLR_FIELD                      (_MK_MASK_CONST(0x1) << SPDIF_DATA_FIFO_CSR_0_RU_CLR_SHIFT)
#define SPDIF_DATA_FIFO_CSR_0_RU_CLR_RANGE                      31:31
#define SPDIF_DATA_FIFO_CSR_0_RU_CLR_WOFFSET                    0x0
#define SPDIF_DATA_FIFO_CSR_0_RU_CLR_DEFAULT                    _MK_MASK_CONST(0x0)
#define SPDIF_DATA_FIFO_CSR_0_RU_CLR_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define SPDIF_DATA_FIFO_CSR_0_RU_CLR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SPDIF_DATA_FIFO_CSR_0_RU_CLR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// RX USR.FIFO Attention Level:         00=1-slot-full, 01=2-slots-full, 10=3-slots-full, 11=4-slots-full.
#define SPDIF_DATA_FIFO_CSR_0_RU_ATN_LVL_SHIFT                  _MK_SHIFT_CONST(29)
#define SPDIF_DATA_FIFO_CSR_0_RU_ATN_LVL_FIELD                  (_MK_MASK_CONST(0x3) << SPDIF_DATA_FIFO_CSR_0_RU_ATN_LVL_SHIFT)
#define SPDIF_DATA_FIFO_CSR_0_RU_ATN_LVL_RANGE                  30:29
#define SPDIF_DATA_FIFO_CSR_0_RU_ATN_LVL_WOFFSET                        0x0
#define SPDIF_DATA_FIFO_CSR_0_RU_ATN_LVL_DEFAULT                        _MK_MASK_CONST(0x0)
#define SPDIF_DATA_FIFO_CSR_0_RU_ATN_LVL_DEFAULT_MASK                   _MK_MASK_CONST(0x3)
#define SPDIF_DATA_FIFO_CSR_0_RU_ATN_LVL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SPDIF_DATA_FIFO_CSR_0_RU_ATN_LVL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define SPDIF_DATA_FIFO_CSR_0_RU_ATN_LVL_RU1_WORD_FULL                  _MK_ENUM_CONST(0)
#define SPDIF_DATA_FIFO_CSR_0_RU_ATN_LVL_RU2_WORD_FULL                  _MK_ENUM_CONST(1)
#define SPDIF_DATA_FIFO_CSR_0_RU_ATN_LVL_RU3_WORD_FULL                  _MK_ENUM_CONST(2)
#define SPDIF_DATA_FIFO_CSR_0_RU_ATN_LVL_RU4_WORD_FULL                  _MK_ENUM_CONST(3)

// Number of RX USR.FIFO levels with valid data.
#define SPDIF_DATA_FIFO_CSR_0_FULL_COUNT_SHIFT                  _MK_SHIFT_CONST(24)
#define SPDIF_DATA_FIFO_CSR_0_FULL_COUNT_FIELD                  (_MK_MASK_CONST(0x1f) << SPDIF_DATA_FIFO_CSR_0_FULL_COUNT_SHIFT)
#define SPDIF_DATA_FIFO_CSR_0_FULL_COUNT_RANGE                  28:24
#define SPDIF_DATA_FIFO_CSR_0_FULL_COUNT_WOFFSET                        0x0
#define SPDIF_DATA_FIFO_CSR_0_FULL_COUNT_DEFAULT                        _MK_MASK_CONST(0x0)
#define SPDIF_DATA_FIFO_CSR_0_FULL_COUNT_DEFAULT_MASK                   _MK_MASK_CONST(0x1f)
#define SPDIF_DATA_FIFO_CSR_0_FULL_COUNT_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SPDIF_DATA_FIFO_CSR_0_FULL_COUNT_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// Clear Transmitter User FIFO (TX USR.FIFO)
#define SPDIF_DATA_FIFO_CSR_0_TU_CLR_SHIFT                      _MK_SHIFT_CONST(23)
#define SPDIF_DATA_FIFO_CSR_0_TU_CLR_FIELD                      (_MK_MASK_CONST(0x1) << SPDIF_DATA_FIFO_CSR_0_TU_CLR_SHIFT)
#define SPDIF_DATA_FIFO_CSR_0_TU_CLR_RANGE                      23:23
#define SPDIF_DATA_FIFO_CSR_0_TU_CLR_WOFFSET                    0x0
#define SPDIF_DATA_FIFO_CSR_0_TU_CLR_DEFAULT                    _MK_MASK_CONST(0x0)
#define SPDIF_DATA_FIFO_CSR_0_TU_CLR_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define SPDIF_DATA_FIFO_CSR_0_TU_CLR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SPDIF_DATA_FIFO_CSR_0_TU_CLR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// TxUSR.FIFO Attention Level:  11=4-slots-empty, 10=3-slots-empty, 01=2-slots-empty, 00=1-slot-empty.
#define SPDIF_DATA_FIFO_CSR_0_TU_ATN_LVL_SHIFT                  _MK_SHIFT_CONST(21)
#define SPDIF_DATA_FIFO_CSR_0_TU_ATN_LVL_FIELD                  (_MK_MASK_CONST(0x3) << SPDIF_DATA_FIFO_CSR_0_TU_ATN_LVL_SHIFT)
#define SPDIF_DATA_FIFO_CSR_0_TU_ATN_LVL_RANGE                  22:21
#define SPDIF_DATA_FIFO_CSR_0_TU_ATN_LVL_WOFFSET                        0x0
#define SPDIF_DATA_FIFO_CSR_0_TU_ATN_LVL_DEFAULT                        _MK_MASK_CONST(0x0)
#define SPDIF_DATA_FIFO_CSR_0_TU_ATN_LVL_DEFAULT_MASK                   _MK_MASK_CONST(0x3)
#define SPDIF_DATA_FIFO_CSR_0_TU_ATN_LVL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SPDIF_DATA_FIFO_CSR_0_TU_ATN_LVL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define SPDIF_DATA_FIFO_CSR_0_TU_ATN_LVL_TU1_WORD_EMPTY                 _MK_ENUM_CONST(0)
#define SPDIF_DATA_FIFO_CSR_0_TU_ATN_LVL_TU2_WORD_EMPTY                 _MK_ENUM_CONST(1)
#define SPDIF_DATA_FIFO_CSR_0_TU_ATN_LVL_TU3_WORD_EMPTY                 _MK_ENUM_CONST(2)
#define SPDIF_DATA_FIFO_CSR_0_TU_ATN_LVL_TU4_WORD_EMPTY                 _MK_ENUM_CONST(3)

// Number of Tx USR.FIFO levels that could be filled.
#define SPDIF_DATA_FIFO_CSR_0_TU_EMPTY_COUNT_SHIFT                      _MK_SHIFT_CONST(16)
#define SPDIF_DATA_FIFO_CSR_0_TU_EMPTY_COUNT_FIELD                      (_MK_MASK_CONST(0x1f) << SPDIF_DATA_FIFO_CSR_0_TU_EMPTY_COUNT_SHIFT)
#define SPDIF_DATA_FIFO_CSR_0_TU_EMPTY_COUNT_RANGE                      20:16
#define SPDIF_DATA_FIFO_CSR_0_TU_EMPTY_COUNT_WOFFSET                    0x0
#define SPDIF_DATA_FIFO_CSR_0_TU_EMPTY_COUNT_DEFAULT                    _MK_MASK_CONST(0x4)
#define SPDIF_DATA_FIFO_CSR_0_TU_EMPTY_COUNT_DEFAULT_MASK                       _MK_MASK_CONST(0x1f)
#define SPDIF_DATA_FIFO_CSR_0_TU_EMPTY_COUNT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SPDIF_DATA_FIFO_CSR_0_TU_EMPTY_COUNT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Clear Receiver Data FIFO (RX DATA.FIFO). 
#define SPDIF_DATA_FIFO_CSR_0_RX_CLR_SHIFT                      _MK_SHIFT_CONST(15)
#define SPDIF_DATA_FIFO_CSR_0_RX_CLR_FIELD                      (_MK_MASK_CONST(0x1) << SPDIF_DATA_FIFO_CSR_0_RX_CLR_SHIFT)
#define SPDIF_DATA_FIFO_CSR_0_RX_CLR_RANGE                      15:15
#define SPDIF_DATA_FIFO_CSR_0_RX_CLR_WOFFSET                    0x0
#define SPDIF_DATA_FIFO_CSR_0_RX_CLR_DEFAULT                    _MK_MASK_CONST(0x0)
#define SPDIF_DATA_FIFO_CSR_0_RX_CLR_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define SPDIF_DATA_FIFO_CSR_0_RX_CLR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SPDIF_DATA_FIFO_CSR_0_RX_CLR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Rx FIFO Attention Level:     11=12-slots-full, 10=8-slots-full, 01=4-slots-full, 00=1-slot-full.
#define SPDIF_DATA_FIFO_CSR_0_RX_ATN_LVL_SHIFT                  _MK_SHIFT_CONST(13)
#define SPDIF_DATA_FIFO_CSR_0_RX_ATN_LVL_FIELD                  (_MK_MASK_CONST(0x3) << SPDIF_DATA_FIFO_CSR_0_RX_ATN_LVL_SHIFT)
#define SPDIF_DATA_FIFO_CSR_0_RX_ATN_LVL_RANGE                  14:13
#define SPDIF_DATA_FIFO_CSR_0_RX_ATN_LVL_WOFFSET                        0x0
#define SPDIF_DATA_FIFO_CSR_0_RX_ATN_LVL_DEFAULT                        _MK_MASK_CONST(0x0)
#define SPDIF_DATA_FIFO_CSR_0_RX_ATN_LVL_DEFAULT_MASK                   _MK_MASK_CONST(0x3)
#define SPDIF_DATA_FIFO_CSR_0_RX_ATN_LVL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SPDIF_DATA_FIFO_CSR_0_RX_ATN_LVL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define SPDIF_DATA_FIFO_CSR_0_RX_ATN_LVL_RX1_WORD_FULL                  _MK_ENUM_CONST(0)
#define SPDIF_DATA_FIFO_CSR_0_RX_ATN_LVL_RX4_WORD_FULL                  _MK_ENUM_CONST(1)
#define SPDIF_DATA_FIFO_CSR_0_RX_ATN_LVL_RX8_WORD_FULL                  _MK_ENUM_CONST(2)
#define SPDIF_DATA_FIFO_CSR_0_RX_ATN_LVL_RX12_WORD_FULL                 _MK_ENUM_CONST(3)

// Number of RX DATA.FIFO levels with valid data
#define SPDIF_DATA_FIFO_CSR_0_RX_DATA_FIFO_FULL_COUNT_SHIFT                     _MK_SHIFT_CONST(8)
#define SPDIF_DATA_FIFO_CSR_0_RX_DATA_FIFO_FULL_COUNT_FIELD                     (_MK_MASK_CONST(0x1f) << SPDIF_DATA_FIFO_CSR_0_RX_DATA_FIFO_FULL_COUNT_SHIFT)
#define SPDIF_DATA_FIFO_CSR_0_RX_DATA_FIFO_FULL_COUNT_RANGE                     12:8
#define SPDIF_DATA_FIFO_CSR_0_RX_DATA_FIFO_FULL_COUNT_WOFFSET                   0x0
#define SPDIF_DATA_FIFO_CSR_0_RX_DATA_FIFO_FULL_COUNT_DEFAULT                   _MK_MASK_CONST(0x0)
#define SPDIF_DATA_FIFO_CSR_0_RX_DATA_FIFO_FULL_COUNT_DEFAULT_MASK                      _MK_MASK_CONST(0x1f)
#define SPDIF_DATA_FIFO_CSR_0_RX_DATA_FIFO_FULL_COUNT_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SPDIF_DATA_FIFO_CSR_0_RX_DATA_FIFO_FULL_COUNT_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// Clear Transmitter Data FIFO (TX DATA.FIFO)
#define SPDIF_DATA_FIFO_CSR_0_TX_CLR_SHIFT                      _MK_SHIFT_CONST(7)
#define SPDIF_DATA_FIFO_CSR_0_TX_CLR_FIELD                      (_MK_MASK_CONST(0x1) << SPDIF_DATA_FIFO_CSR_0_TX_CLR_SHIFT)
#define SPDIF_DATA_FIFO_CSR_0_TX_CLR_RANGE                      7:7
#define SPDIF_DATA_FIFO_CSR_0_TX_CLR_WOFFSET                    0x0
#define SPDIF_DATA_FIFO_CSR_0_TX_CLR_DEFAULT                    _MK_MASK_CONST(0x0)
#define SPDIF_DATA_FIFO_CSR_0_TX_CLR_DEFAULT_MASK                       _MK_MASK_CONST(0x1)
#define SPDIF_DATA_FIFO_CSR_0_TX_CLR_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SPDIF_DATA_FIFO_CSR_0_TX_CLR_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Tx FIFO Attention Level:     11=12-slots-empty, 10=8-slots-empty, 01=4-slots-empty, 00=1-slot-empty
#define SPDIF_DATA_FIFO_CSR_0_TX_ATN_LVL_SHIFT                  _MK_SHIFT_CONST(5)
#define SPDIF_DATA_FIFO_CSR_0_TX_ATN_LVL_FIELD                  (_MK_MASK_CONST(0x3) << SPDIF_DATA_FIFO_CSR_0_TX_ATN_LVL_SHIFT)
#define SPDIF_DATA_FIFO_CSR_0_TX_ATN_LVL_RANGE                  6:5
#define SPDIF_DATA_FIFO_CSR_0_TX_ATN_LVL_WOFFSET                        0x0
#define SPDIF_DATA_FIFO_CSR_0_TX_ATN_LVL_DEFAULT                        _MK_MASK_CONST(0x0)
#define SPDIF_DATA_FIFO_CSR_0_TX_ATN_LVL_DEFAULT_MASK                   _MK_MASK_CONST(0x3)
#define SPDIF_DATA_FIFO_CSR_0_TX_ATN_LVL_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SPDIF_DATA_FIFO_CSR_0_TX_ATN_LVL_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define SPDIF_DATA_FIFO_CSR_0_TX_ATN_LVL_TX1_WORD_EMPTY                 _MK_ENUM_CONST(0)
#define SPDIF_DATA_FIFO_CSR_0_TX_ATN_LVL_TX4_WORD_EMPTY                 _MK_ENUM_CONST(1)
#define SPDIF_DATA_FIFO_CSR_0_TX_ATN_LVL_TX8_WORD_EMPTY                 _MK_ENUM_CONST(2)
#define SPDIF_DATA_FIFO_CSR_0_TX_ATN_LVL_TX12_WOR_DEMPTY                        _MK_ENUM_CONST(3)

// Number of Tx DATA.FIFO levels that could be filled.
#define SPDIF_DATA_FIFO_CSR_0_TD_EMPTY_COUNT_SHIFT                      _MK_SHIFT_CONST(0)
#define SPDIF_DATA_FIFO_CSR_0_TD_EMPTY_COUNT_FIELD                      (_MK_MASK_CONST(0x1f) << SPDIF_DATA_FIFO_CSR_0_TD_EMPTY_COUNT_SHIFT)
#define SPDIF_DATA_FIFO_CSR_0_TD_EMPTY_COUNT_RANGE                      4:0
#define SPDIF_DATA_FIFO_CSR_0_TD_EMPTY_COUNT_WOFFSET                    0x0
#define SPDIF_DATA_FIFO_CSR_0_TD_EMPTY_COUNT_DEFAULT                    _MK_MASK_CONST(0x10)
#define SPDIF_DATA_FIFO_CSR_0_TD_EMPTY_COUNT_DEFAULT_MASK                       _MK_MASK_CONST(0x1f)
#define SPDIF_DATA_FIFO_CSR_0_TD_EMPTY_COUNT_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SPDIF_DATA_FIFO_CSR_0_TD_EMPTY_COUNT_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)


// Reserved address 16 [0x10] 

// Reserved address 20 [0x14] 

// Reserved address 24 [0x18] 

// Reserved address 28 [0x1c] 

// Reserved address 32 [0x20] 

// Reserved address 36 [0x24] 

// Reserved address 40 [0x28] 

// Reserved address 44 [0x2c] 

// Reserved address 48 [0x30] 

// Reserved address 52 [0x34] 

// Reserved address 56 [0x38] 

// Reserved address 60 [0x3c] 
// SPDIF Data Out Register
// ---------------------------------------------------------------------------------------------------------------
// Depends on BIT_MODE and PACK fields from CTRL register, the bits below has different definition.
//      (1)  16-bit mode (BIT_MODE=00, PACK=0).
//              (a)     [31:16] = 0.
//              (b)     [15:0]  = transmit data [15:0].
//      (2)  20-bit mode (BIT_MODE=01, PACK=0).
//              (a)     [31:20] = 0.
//              (b)     [19:0]  = transmit data [19:0].
//      (3)  24-bit mode (BIT_MODE=10, PACK=0).
//              (a)     [31:24] = 0.
//              (b)     [23:0]  = transmit data [23:0].
//      (4)  packed 16-bit mode (BIT_MODE=00, PACK=1)
//              (a)     [31:16] = 16-bit right channel (channel B/subframe 2).
//              (b)     [15:0]  = 16-bit left  channel (channel A/subframe 1).
//      (5)  raw mode (BIT_MODE=11, PACK=0)
//              (a)     [31]    = This bit carries the parity of bit[30:4] of the SPDIF data stream
//                                such that this bit together with bit[30:4] carry even parity.
//              (b)     [30]    = This bit carries 1 bit of channel status information.
//              (c)     [29]    = This bit carries 1 bit of user status information.
//              (d)     [28]    = This bit carries the validity bit associated with the main data field.
//              (e)     [27:8]  = These bits carry the audio sample word in linear 2's complement representation.
//              (f)     [7:4]   = These bits are the aux. bits.
//              (g)     [3:0]   = These bits are the premable bits.
//                                [3:2]  = unused.
//                                [1:0]  = 00=undefined/invalid preamble, 01="B" preamble, 10="M" preamble, 11="W" preamble.
// ---------------------------------------------------------------------------------------------------------------

// Register SPDIF_DATA_OUT_0  
#define SPDIF_DATA_OUT_0                        _MK_ADDR_CONST(0x40)
#define SPDIF_DATA_OUT_0_WORD_COUNT                     0x1
#define SPDIF_DATA_OUT_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define SPDIF_DATA_OUT_0_RESET_MASK                     _MK_MASK_CONST(0xffffffff)
#define SPDIF_DATA_OUT_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define SPDIF_DATA_OUT_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define SPDIF_DATA_OUT_0_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define SPDIF_DATA_OUT_0_WRITE_MASK                     _MK_MASK_CONST(0xffffffff)
// Right channel audio data out (for packed 16-bit mode).
#define SPDIF_DATA_OUT_0_TD_R15_TD_R0_SHIFT                     _MK_SHIFT_CONST(16)
#define SPDIF_DATA_OUT_0_TD_R15_TD_R0_FIELD                     (_MK_MASK_CONST(0xffff) << SPDIF_DATA_OUT_0_TD_R15_TD_R0_SHIFT)
#define SPDIF_DATA_OUT_0_TD_R15_TD_R0_RANGE                     31:16
#define SPDIF_DATA_OUT_0_TD_R15_TD_R0_WOFFSET                   0x0
#define SPDIF_DATA_OUT_0_TD_R15_TD_R0_DEFAULT                   _MK_MASK_CONST(0x0)
#define SPDIF_DATA_OUT_0_TD_R15_TD_R0_DEFAULT_MASK                      _MK_MASK_CONST(0xffff)
#define SPDIF_DATA_OUT_0_TD_R15_TD_R0_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SPDIF_DATA_OUT_0_TD_R15_TD_R0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// Left channel audio data out (for packed 16-bit mode).
#define SPDIF_DATA_OUT_0_TD_L15_TD_L0_SHIFT                     _MK_SHIFT_CONST(0)
#define SPDIF_DATA_OUT_0_TD_L15_TD_L0_FIELD                     (_MK_MASK_CONST(0xffff) << SPDIF_DATA_OUT_0_TD_L15_TD_L0_SHIFT)
#define SPDIF_DATA_OUT_0_TD_L15_TD_L0_RANGE                     15:0
#define SPDIF_DATA_OUT_0_TD_L15_TD_L0_WOFFSET                   0x0
#define SPDIF_DATA_OUT_0_TD_L15_TD_L0_DEFAULT                   _MK_MASK_CONST(0x0)
#define SPDIF_DATA_OUT_0_TD_L15_TD_L0_DEFAULT_MASK                      _MK_MASK_CONST(0xffff)
#define SPDIF_DATA_OUT_0_TD_L15_TD_L0_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define SPDIF_DATA_OUT_0_TD_L15_TD_L0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// channel audio data out (for 16-bit mode).
#define SPDIF_DATA_OUT_0_TXD15_TXD0_SHIFT                       _MK_SHIFT_CONST(0)
#define SPDIF_DATA_OUT_0_TXD15_TXD0_FIELD                       (_MK_MASK_CONST(0xffff) << SPDIF_DATA_OUT_0_TXD15_TXD0_SHIFT)
#define SPDIF_DATA_OUT_0_TXD15_TXD0_RANGE                       15:0
#define SPDIF_DATA_OUT_0_TXD15_TXD0_WOFFSET                     0x0
#define SPDIF_DATA_OUT_0_TXD15_TXD0_DEFAULT                     _MK_MASK_CONST(0x0)
#define SPDIF_DATA_OUT_0_TXD15_TXD0_DEFAULT_MASK                        _MK_MASK_CONST(0xffff)
#define SPDIF_DATA_OUT_0_TXD15_TXD0_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SPDIF_DATA_OUT_0_TXD15_TXD0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// channel audio data out (for 20-bit mode).
#define SPDIF_DATA_OUT_0_TXD19_TXD0_SHIFT                       _MK_SHIFT_CONST(0)
#define SPDIF_DATA_OUT_0_TXD19_TXD0_FIELD                       (_MK_MASK_CONST(0xfffff) << SPDIF_DATA_OUT_0_TXD19_TXD0_SHIFT)
#define SPDIF_DATA_OUT_0_TXD19_TXD0_RANGE                       19:0
#define SPDIF_DATA_OUT_0_TXD19_TXD0_WOFFSET                     0x0
#define SPDIF_DATA_OUT_0_TXD19_TXD0_DEFAULT                     _MK_MASK_CONST(0x0)
#define SPDIF_DATA_OUT_0_TXD19_TXD0_DEFAULT_MASK                        _MK_MASK_CONST(0xfffff)
#define SPDIF_DATA_OUT_0_TXD19_TXD0_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SPDIF_DATA_OUT_0_TXD19_TXD0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// channel audio data out (for 24-bit mode).
#define SPDIF_DATA_OUT_0_TXD23_TXD0_SHIFT                       _MK_SHIFT_CONST(0)
#define SPDIF_DATA_OUT_0_TXD23_TXD0_FIELD                       (_MK_MASK_CONST(0xffffff) << SPDIF_DATA_OUT_0_TXD23_TXD0_SHIFT)
#define SPDIF_DATA_OUT_0_TXD23_TXD0_RANGE                       23:0
#define SPDIF_DATA_OUT_0_TXD23_TXD0_WOFFSET                     0x0
#define SPDIF_DATA_OUT_0_TXD23_TXD0_DEFAULT                     _MK_MASK_CONST(0x0)
#define SPDIF_DATA_OUT_0_TXD23_TXD0_DEFAULT_MASK                        _MK_MASK_CONST(0xffffff)
#define SPDIF_DATA_OUT_0_TXD23_TXD0_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SPDIF_DATA_OUT_0_TXD23_TXD0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// Parity Bit (for raw mode).       
#define SPDIF_DATA_OUT_0_P_SHIFT                        _MK_SHIFT_CONST(31)
#define SPDIF_DATA_OUT_0_P_FIELD                        (_MK_MASK_CONST(0x1) << SPDIF_DATA_OUT_0_P_SHIFT)
#define SPDIF_DATA_OUT_0_P_RANGE                        31:31
#define SPDIF_DATA_OUT_0_P_WOFFSET                      0x0
#define SPDIF_DATA_OUT_0_P_DEFAULT                      _MK_MASK_CONST(0x0)
#define SPDIF_DATA_OUT_0_P_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SPDIF_DATA_OUT_0_P_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SPDIF_DATA_OUT_0_P_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// channel status bit (for raw mode).
#define SPDIF_DATA_OUT_0_C_SHIFT                        _MK_SHIFT_CONST(30)
#define SPDIF_DATA_OUT_0_C_FIELD                        (_MK_MASK_CONST(0x1) << SPDIF_DATA_OUT_0_C_SHIFT)
#define SPDIF_DATA_OUT_0_C_RANGE                        30:30
#define SPDIF_DATA_OUT_0_C_WOFFSET                      0x0
#define SPDIF_DATA_OUT_0_C_DEFAULT                      _MK_MASK_CONST(0x0)
#define SPDIF_DATA_OUT_0_C_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SPDIF_DATA_OUT_0_C_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SPDIF_DATA_OUT_0_C_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// User data bit (for raw mode).
#define SPDIF_DATA_OUT_0_U_SHIFT                        _MK_SHIFT_CONST(29)
#define SPDIF_DATA_OUT_0_U_FIELD                        (_MK_MASK_CONST(0x1) << SPDIF_DATA_OUT_0_U_SHIFT)
#define SPDIF_DATA_OUT_0_U_RANGE                        29:29
#define SPDIF_DATA_OUT_0_U_WOFFSET                      0x0
#define SPDIF_DATA_OUT_0_U_DEFAULT                      _MK_MASK_CONST(0x0)
#define SPDIF_DATA_OUT_0_U_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SPDIF_DATA_OUT_0_U_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SPDIF_DATA_OUT_0_U_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Valid bit (for raw mode).
#define SPDIF_DATA_OUT_0_V_SHIFT                        _MK_SHIFT_CONST(28)
#define SPDIF_DATA_OUT_0_V_FIELD                        (_MK_MASK_CONST(0x1) << SPDIF_DATA_OUT_0_V_SHIFT)
#define SPDIF_DATA_OUT_0_V_RANGE                        28:28
#define SPDIF_DATA_OUT_0_V_WOFFSET                      0x0
#define SPDIF_DATA_OUT_0_V_DEFAULT                      _MK_MASK_CONST(0x0)
#define SPDIF_DATA_OUT_0_V_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define SPDIF_DATA_OUT_0_V_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SPDIF_DATA_OUT_0_V_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// 20 bit audio data (for raw mode).
#define SPDIF_DATA_OUT_0_RAW_TD19_TXD0_SHIFT                    _MK_SHIFT_CONST(8)
#define SPDIF_DATA_OUT_0_RAW_TD19_TXD0_FIELD                    (_MK_MASK_CONST(0xfffff) << SPDIF_DATA_OUT_0_RAW_TD19_TXD0_SHIFT)
#define SPDIF_DATA_OUT_0_RAW_TD19_TXD0_RANGE                    27:8
#define SPDIF_DATA_OUT_0_RAW_TD19_TXD0_WOFFSET                  0x0
#define SPDIF_DATA_OUT_0_RAW_TD19_TXD0_DEFAULT                  _MK_MASK_CONST(0x0)
#define SPDIF_DATA_OUT_0_RAW_TD19_TXD0_DEFAULT_MASK                     _MK_MASK_CONST(0xfffff)
#define SPDIF_DATA_OUT_0_RAW_TD19_TXD0_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define SPDIF_DATA_OUT_0_RAW_TD19_TXD0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Auxilary data (for raw mode). 
#define SPDIF_DATA_OUT_0_TX_AX3_TX_AX0_SHIFT                    _MK_SHIFT_CONST(4)
#define SPDIF_DATA_OUT_0_TX_AX3_TX_AX0_FIELD                    (_MK_MASK_CONST(0xf) << SPDIF_DATA_OUT_0_TX_AX3_TX_AX0_SHIFT)
#define SPDIF_DATA_OUT_0_TX_AX3_TX_AX0_RANGE                    7:4
#define SPDIF_DATA_OUT_0_TX_AX3_TX_AX0_WOFFSET                  0x0
#define SPDIF_DATA_OUT_0_TX_AX3_TX_AX0_DEFAULT                  _MK_MASK_CONST(0x0)
#define SPDIF_DATA_OUT_0_TX_AX3_TX_AX0_DEFAULT_MASK                     _MK_MASK_CONST(0xf)
#define SPDIF_DATA_OUT_0_TX_AX3_TX_AX0_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define SPDIF_DATA_OUT_0_TX_AX3_TX_AX0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Preamble data (for raw mode). 
#define SPDIF_DATA_OUT_0_RAW_TX_PREAMBLE_SHIFT                  _MK_SHIFT_CONST(0)
#define SPDIF_DATA_OUT_0_RAW_TX_PREAMBLE_FIELD                  (_MK_MASK_CONST(0xf) << SPDIF_DATA_OUT_0_RAW_TX_PREAMBLE_SHIFT)
#define SPDIF_DATA_OUT_0_RAW_TX_PREAMBLE_RANGE                  3:0
#define SPDIF_DATA_OUT_0_RAW_TX_PREAMBLE_WOFFSET                        0x0
#define SPDIF_DATA_OUT_0_RAW_TX_PREAMBLE_DEFAULT                        _MK_MASK_CONST(0x0)
#define SPDIF_DATA_OUT_0_RAW_TX_PREAMBLE_DEFAULT_MASK                   _MK_MASK_CONST(0xf)
#define SPDIF_DATA_OUT_0_RAW_TX_PREAMBLE_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SPDIF_DATA_OUT_0_RAW_TX_PREAMBLE_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Reserved address 68 [0x44] 

// Reserved address 72 [0x48] 

// Reserved address 76 [0x4c] 

// Reserved address 80 [0x50] 

// Reserved address 84 [0x54] 

// Reserved address 88 [0x58] 

// Reserved address 92 [0x5c] 

// Reserved address 96 [0x60] 

// Reserved address 100 [0x64] 

// Reserved address 104 [0x68] 

// Reserved address 108 [0x6c] 

// Reserved address 112 [0x70] 

// Reserved address 116 [0x74] 

// Reserved address 120 [0x78] 

// Reserved address 124 [0x7c] 
// SPDIF Data Out Register
// ---------------------------------------------------------------------------------------------------------------
// Depends on BIT_MODE and PACK fields from CTRL register, the bits below has different definition.
//      (1)  16-bit mode (BIT_MODE=00, PACK=0).
//              (a)     [31]    = This bit carries the parity of bit[30:4] of the SPDIF data stream
//                                such that this bit together with bit[30:4] carry even parity.
//              (b)     [30]    = This bit carries 1 bit of channel status information.
//              (c)     [29]    = This bit carries 1 bit of user status information.
//              (d)     [28]    = This bit carries the validity bit associated with the main data field.
//              (e)     [27:24] = These bits are the premable bits.
//                                [27]    = 1=not parity error and "locked" onto the SPDIF data stream, 
//                                          0=either parity error or not "locked" onto the SPDIF data stream.
//                                [26]    = Indicate whether the preamble is positive or negative preamble. 0=positive, 1=negateive.
//                                [25:24] = 00=undefined/invalid preamble, 01="B" preamble, 10="M" preamble, 11="W" preamble.
//              (f)     [23:16] = 0.
//              (g)     [15:0]  = receive data [15:0].
//      (2)  20-bit mode (BIT_MODE=01, PACK=0).
//              (a)     [31]    = This bit carries the parity of bit[30:4] of the SPDIF data stream
//                                such that this bit together with bit[30:4] carry even parity.
//              (b)     [30]    = This bit carries 1 bit of channel status information.
//              (c)     [29]    = This bit carries 1 bit of user status information.
//              (d)     [28]    = This bit carries the validity bit associated with the main data field.
//              (e)     [27:24] = These bits are the premable bits.
//                                [27]    = 1=not parity error and "locked" onto the SPDIF data stream, 
//                                          0=either parity error or not "locked" onto the SPDIF data stream.
//                                [26]    = Indicate whether the preamble is positive or negative preamble. 0=positive, 1=negateive.
//                                [25:24] = 00=undefined/invalid preamble, 01="B" preamble, 10="M" preamble, 11="W" preamble.
//              (f)     [23:20] = 0.
//              (g)     [19:0]  = receive data [19:0].
//      (3)  24-bit mode (BIT_MODE=10, PACK=0).
//              (a)     [31]    = This bit carries the parity of bit[30:4] of the SPDIF data stream
//                                such that this bit together with bit[30:4] carry even parity.
//              (b)     [30]    = This bit carries 1 bit of channel status information.
//              (c)     [29]    = This bit carries 1 bit of user status information.
//              (d)     [28]    = This bit carries the validity bit associated with the main data field.
//              (e)     [27:24] = These bits are the premable bits.
//                                [27]    = 1=not parity error and "locked" onto the SPDIF data stream, 
//                                          0=either parity error or not "locked" onto the SPDIF data stream.
//                                [26]    = Indicate whether the preamble is positive or negative preamble. 0=positive, 1=negateive.
//                                [25:24] = 00=undefined/invalid preamble, 01="B" preamble, 10="M" preamble, 11="W" preamble.
//              (f)     [23:0]  = receive data [23:0].
//      (4)  packed 16-bit mode (BIT_MODE=00, PACK=1)
//              (a)     [31:16] = 16-bit right channel (channel B/subframe 2).
//              (b)     [15:0]  = 16-bit left  channel (channel A/subframe 1).
//      (5)  raw mode (BIT_MODE=11, PACK=0)
//              (a)     [31]    = This bit carries the parity of bit[30:4] of the SPDIF data stream
//                                such that this bit together with bit[30:4] carry even parity.
//              (b)     [30]    = This bit carries 1 bit of channel status information.
//              (c)     [29]    = This bit carries 1 bit of user status information.
//              (d)     [28]    = This bit carries the validity bit associated with the main data field.
//              (e)     [27:8]  = These bits carry the audio sample word in linear 2's complement representation.
//              (f)     [7:4]   = These bits are the aux. bits.
//              (g)     [3:0]   = These bits are the premable bits.
//                                [3]    = 1=not parity error and "locked" onto the SPDIF data stream, 
//                                         0=either parity error or not "locked" onto the SPDIF data stream.
//                                [2]    = Indicate whether the preamble is positive or negative preamble. 0=positive, 1=negateive.
//                                [1:0]  = 00=undefined/invalid preamble, 01="B" preamble, 10="M" preamble, 11="W" preamble.
// ---------------------------------------------------------------------------------------------------------------

// Register SPDIF_DATA_IN_0  
#define SPDIF_DATA_IN_0                 _MK_ADDR_CONST(0x80)
#define SPDIF_DATA_IN_0_WORD_COUNT                      0x1
#define SPDIF_DATA_IN_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define SPDIF_DATA_IN_0_RESET_MASK                      _MK_MASK_CONST(0xffffffff)
#define SPDIF_DATA_IN_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define SPDIF_DATA_IN_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define SPDIF_DATA_IN_0_READ_MASK                       _MK_MASK_CONST(0xffffffff)
#define SPDIF_DATA_IN_0_WRITE_MASK                      _MK_MASK_CONST(0x0)
// Right channel audio data in (for packed 16-bit mode).
#define SPDIF_DATA_IN_0_RD_R15_RD_R0_SHIFT                      _MK_SHIFT_CONST(16)
#define SPDIF_DATA_IN_0_RD_R15_RD_R0_FIELD                      (_MK_MASK_CONST(0xffff) << SPDIF_DATA_IN_0_RD_R15_RD_R0_SHIFT)
#define SPDIF_DATA_IN_0_RD_R15_RD_R0_RANGE                      31:16
#define SPDIF_DATA_IN_0_RD_R15_RD_R0_WOFFSET                    0x0
#define SPDIF_DATA_IN_0_RD_R15_RD_R0_DEFAULT                    _MK_MASK_CONST(0x0)
#define SPDIF_DATA_IN_0_RD_R15_RD_R0_DEFAULT_MASK                       _MK_MASK_CONST(0xffff)
#define SPDIF_DATA_IN_0_RD_R15_RD_R0_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SPDIF_DATA_IN_0_RD_R15_RD_R0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Left channel audio data in (for packed 16-bit mode).
#define SPDIF_DATA_IN_0_RD_L15_RD_L0_SHIFT                      _MK_SHIFT_CONST(0)
#define SPDIF_DATA_IN_0_RD_L15_RD_L0_FIELD                      (_MK_MASK_CONST(0xffff) << SPDIF_DATA_IN_0_RD_L15_RD_L0_SHIFT)
#define SPDIF_DATA_IN_0_RD_L15_RD_L0_RANGE                      15:0
#define SPDIF_DATA_IN_0_RD_L15_RD_L0_WOFFSET                    0x0
#define SPDIF_DATA_IN_0_RD_L15_RD_L0_DEFAULT                    _MK_MASK_CONST(0x0)
#define SPDIF_DATA_IN_0_RD_L15_RD_L0_DEFAULT_MASK                       _MK_MASK_CONST(0xffff)
#define SPDIF_DATA_IN_0_RD_L15_RD_L0_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SPDIF_DATA_IN_0_RD_L15_RD_L0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Parity bit (for 16-bit/20-bit/24-bit/raw modes).
#define SPDIF_DATA_IN_0_P_SHIFT                 _MK_SHIFT_CONST(31)
#define SPDIF_DATA_IN_0_P_FIELD                 (_MK_MASK_CONST(0x1) << SPDIF_DATA_IN_0_P_SHIFT)
#define SPDIF_DATA_IN_0_P_RANGE                 31:31
#define SPDIF_DATA_IN_0_P_WOFFSET                       0x0
#define SPDIF_DATA_IN_0_P_DEFAULT                       _MK_MASK_CONST(0x0)
#define SPDIF_DATA_IN_0_P_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SPDIF_DATA_IN_0_P_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SPDIF_DATA_IN_0_P_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Channel Status bit (for 16-bit/20-bit/24-bit/raw modes).
#define SPDIF_DATA_IN_0_C_SHIFT                 _MK_SHIFT_CONST(30)
#define SPDIF_DATA_IN_0_C_FIELD                 (_MK_MASK_CONST(0x1) << SPDIF_DATA_IN_0_C_SHIFT)
#define SPDIF_DATA_IN_0_C_RANGE                 30:30
#define SPDIF_DATA_IN_0_C_WOFFSET                       0x0
#define SPDIF_DATA_IN_0_C_DEFAULT                       _MK_MASK_CONST(0x0)
#define SPDIF_DATA_IN_0_C_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SPDIF_DATA_IN_0_C_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SPDIF_DATA_IN_0_C_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// User Data bit (for 16-bit/20-bit/24-bit/raw modes).
#define SPDIF_DATA_IN_0_U_SHIFT                 _MK_SHIFT_CONST(29)
#define SPDIF_DATA_IN_0_U_FIELD                 (_MK_MASK_CONST(0x1) << SPDIF_DATA_IN_0_U_SHIFT)
#define SPDIF_DATA_IN_0_U_RANGE                 29:29
#define SPDIF_DATA_IN_0_U_WOFFSET                       0x0
#define SPDIF_DATA_IN_0_U_DEFAULT                       _MK_MASK_CONST(0x0)
#define SPDIF_DATA_IN_0_U_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SPDIF_DATA_IN_0_U_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SPDIF_DATA_IN_0_U_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// Valid bit (for 16-bit/20-bit/24-bit/raw modes).
#define SPDIF_DATA_IN_0_V_SHIFT                 _MK_SHIFT_CONST(28)
#define SPDIF_DATA_IN_0_V_FIELD                 (_MK_MASK_CONST(0x1) << SPDIF_DATA_IN_0_V_SHIFT)
#define SPDIF_DATA_IN_0_V_RANGE                 28:28
#define SPDIF_DATA_IN_0_V_WOFFSET                       0x0
#define SPDIF_DATA_IN_0_V_DEFAULT                       _MK_MASK_CONST(0x0)
#define SPDIF_DATA_IN_0_V_DEFAULT_MASK                  _MK_MASK_CONST(0x1)
#define SPDIF_DATA_IN_0_V_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SPDIF_DATA_IN_0_V_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// PreAmble Code Symbol Bit (for 16-bit/20-bit/24-bit mode).
//    [3]=Invalid Bit [2]=Polarity Bits [1:0]=Symbols B=01 W=11 M=10
#define SPDIF_DATA_IN_0_RX_PREAMBLE_SHIFT                       _MK_SHIFT_CONST(24)
#define SPDIF_DATA_IN_0_RX_PREAMBLE_FIELD                       (_MK_MASK_CONST(0xf) << SPDIF_DATA_IN_0_RX_PREAMBLE_SHIFT)
#define SPDIF_DATA_IN_0_RX_PREAMBLE_RANGE                       27:24
#define SPDIF_DATA_IN_0_RX_PREAMBLE_WOFFSET                     0x0
#define SPDIF_DATA_IN_0_RX_PREAMBLE_DEFAULT                     _MK_MASK_CONST(0x0)
#define SPDIF_DATA_IN_0_RX_PREAMBLE_DEFAULT_MASK                        _MK_MASK_CONST(0xf)
#define SPDIF_DATA_IN_0_RX_PREAMBLE_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SPDIF_DATA_IN_0_RX_PREAMBLE_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// audio data in (for 16-bit mode).
#define SPDIF_DATA_IN_0_RXD15_RXD0_SHIFT                        _MK_SHIFT_CONST(0)
#define SPDIF_DATA_IN_0_RXD15_RXD0_FIELD                        (_MK_MASK_CONST(0xffff) << SPDIF_DATA_IN_0_RXD15_RXD0_SHIFT)
#define SPDIF_DATA_IN_0_RXD15_RXD0_RANGE                        15:0
#define SPDIF_DATA_IN_0_RXD15_RXD0_WOFFSET                      0x0
#define SPDIF_DATA_IN_0_RXD15_RXD0_DEFAULT                      _MK_MASK_CONST(0x0)
#define SPDIF_DATA_IN_0_RXD15_RXD0_DEFAULT_MASK                 _MK_MASK_CONST(0xffff)
#define SPDIF_DATA_IN_0_RXD15_RXD0_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SPDIF_DATA_IN_0_RXD15_RXD0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// audio data in (for 20-bit mode).
#define SPDIF_DATA_IN_0_RXD19_RXD0_SHIFT                        _MK_SHIFT_CONST(0)
#define SPDIF_DATA_IN_0_RXD19_RXD0_FIELD                        (_MK_MASK_CONST(0xfffff) << SPDIF_DATA_IN_0_RXD19_RXD0_SHIFT)
#define SPDIF_DATA_IN_0_RXD19_RXD0_RANGE                        19:0
#define SPDIF_DATA_IN_0_RXD19_RXD0_WOFFSET                      0x0
#define SPDIF_DATA_IN_0_RXD19_RXD0_DEFAULT                      _MK_MASK_CONST(0x0)
#define SPDIF_DATA_IN_0_RXD19_RXD0_DEFAULT_MASK                 _MK_MASK_CONST(0xfffff)
#define SPDIF_DATA_IN_0_RXD19_RXD0_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SPDIF_DATA_IN_0_RXD19_RXD0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// audio data in (for 24-bit mode).
#define SPDIF_DATA_IN_0_RXD23_RXD0_SHIFT                        _MK_SHIFT_CONST(0)
#define SPDIF_DATA_IN_0_RXD23_RXD0_FIELD                        (_MK_MASK_CONST(0xffffff) << SPDIF_DATA_IN_0_RXD23_RXD0_SHIFT)
#define SPDIF_DATA_IN_0_RXD23_RXD0_RANGE                        23:0
#define SPDIF_DATA_IN_0_RXD23_RXD0_WOFFSET                      0x0
#define SPDIF_DATA_IN_0_RXD23_RXD0_DEFAULT                      _MK_MASK_CONST(0x0)
#define SPDIF_DATA_IN_0_RXD23_RXD0_DEFAULT_MASK                 _MK_MASK_CONST(0xffffff)
#define SPDIF_DATA_IN_0_RXD23_RXD0_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SPDIF_DATA_IN_0_RXD23_RXD0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// audio data in (for raw mode).
#define SPDIF_DATA_IN_0_RAW_RXD19_RXD0_SHIFT                    _MK_SHIFT_CONST(8)
#define SPDIF_DATA_IN_0_RAW_RXD19_RXD0_FIELD                    (_MK_MASK_CONST(0xfffff) << SPDIF_DATA_IN_0_RAW_RXD19_RXD0_SHIFT)
#define SPDIF_DATA_IN_0_RAW_RXD19_RXD0_RANGE                    27:8
#define SPDIF_DATA_IN_0_RAW_RXD19_RXD0_WOFFSET                  0x0
#define SPDIF_DATA_IN_0_RAW_RXD19_RXD0_DEFAULT                  _MK_MASK_CONST(0x0)
#define SPDIF_DATA_IN_0_RAW_RXD19_RXD0_DEFAULT_MASK                     _MK_MASK_CONST(0xfffff)
#define SPDIF_DATA_IN_0_RAW_RXD19_RXD0_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define SPDIF_DATA_IN_0_RAW_RXD19_RXD0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// auxiliary data in (for raw mode).
#define SPDIF_DATA_IN_0_RX_AX3_RXAX0_SHIFT                      _MK_SHIFT_CONST(4)
#define SPDIF_DATA_IN_0_RX_AX3_RXAX0_FIELD                      (_MK_MASK_CONST(0xf) << SPDIF_DATA_IN_0_RX_AX3_RXAX0_SHIFT)
#define SPDIF_DATA_IN_0_RX_AX3_RXAX0_RANGE                      7:4
#define SPDIF_DATA_IN_0_RX_AX3_RXAX0_WOFFSET                    0x0
#define SPDIF_DATA_IN_0_RX_AX3_RXAX0_DEFAULT                    _MK_MASK_CONST(0x0)
#define SPDIF_DATA_IN_0_RX_AX3_RXAX0_DEFAULT_MASK                       _MK_MASK_CONST(0xf)
#define SPDIF_DATA_IN_0_RX_AX3_RXAX0_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define SPDIF_DATA_IN_0_RX_AX3_RXAX0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// PreAmble Code Symbol Bit (for raw mode)
//    [3]=Invalid Bit [2]=Polarity Bits [1:0]=Symbols B=01 W=11 M=10
#define SPDIF_DATA_IN_0_RAW_RX_PREAMBLE_SHIFT                   _MK_SHIFT_CONST(0)
#define SPDIF_DATA_IN_0_RAW_RX_PREAMBLE_FIELD                   (_MK_MASK_CONST(0xf) << SPDIF_DATA_IN_0_RAW_RX_PREAMBLE_SHIFT)
#define SPDIF_DATA_IN_0_RAW_RX_PREAMBLE_RANGE                   3:0
#define SPDIF_DATA_IN_0_RAW_RX_PREAMBLE_WOFFSET                 0x0
#define SPDIF_DATA_IN_0_RAW_RX_PREAMBLE_DEFAULT                 _MK_MASK_CONST(0x0)
#define SPDIF_DATA_IN_0_RAW_RX_PREAMBLE_DEFAULT_MASK                    _MK_MASK_CONST(0xf)
#define SPDIF_DATA_IN_0_RAW_RX_PREAMBLE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define SPDIF_DATA_IN_0_RAW_RX_PREAMBLE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)


// Reserved address 132 [0x84] 

// Reserved address 136 [0x88] 

// Reserved address 140 [0x8c] 

// Reserved address 144 [0x90] 

// Reserved address 148 [0x94] 

// Reserved address 152 [0x98] 

// Reserved address 156 [0x9c] 

// Reserved address 160 [0xa0] 

// Reserved address 164 [0xa4] 

// Reserved address 168 [0xa8] 

// Reserved address 172 [0xac] 

// Reserved address 176 [0xb0] 

// Reserved address 180 [0xb4] 

// Reserved address 184 [0xb8] 

// Reserved address 188 [0xbc] 

// Reserved address 192 [0xc0] 

// Reserved address 196 [0xc4] 

// Reserved address 200 [0xc8] 

// Reserved address 204 [0xcc] 

// Reserved address 208 [0xd0] 

// Reserved address 212 [0xd4] 

// Reserved address 216 [0xd8] 

// Reserved address 220 [0xdc] 

// Reserved address 224 [0xe0] 

// Reserved address 228 [0xe4] 

// Reserved address 232 [0xe8] 

// Reserved address 236 [0xec] 

// Reserved address 240 [0xf0] 

// Reserved address 244 [0xf4] 

// Reserved address 248 [0xf8] 

// Reserved address 252 [0xfc] 
// SPDIF Channel Status Rx Page Buffer Register
// ---------------------------------------------------------------------------------------------------------------
// This 6-words receive channel data page buffer holds a block (192 frames) of channel status information.  The
// order of recieve is from LSB bit to MSB bit, and from CH_STA_RX_A to CH_STA_RX_F and back to CH_STA_RX_A.
// 
// Note:  Only channel status bit from channel A (subframe 1) will be saved into this page buffer.
// ---------------------------------------------------------------------------------------------------------------

// Register SPDIF_CH_STA_RX_A_0  
#define SPDIF_CH_STA_RX_A_0                     _MK_ADDR_CONST(0x100)
#define SPDIF_CH_STA_RX_A_0_WORD_COUNT                  0x1
#define SPDIF_CH_STA_RX_A_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_A_0_RESET_MASK                  _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_RX_A_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_A_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_A_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_RX_A_0_WRITE_MASK                  _MK_MASK_CONST(0x0)
// Channel status bits [31:0]; one bit per audio  sample
#define SPDIF_CH_STA_RX_A_0_RX_C31_RX_C0_SHIFT                  _MK_SHIFT_CONST(0)
#define SPDIF_CH_STA_RX_A_0_RX_C31_RX_C0_FIELD                  (_MK_MASK_CONST(0xffffffff) << SPDIF_CH_STA_RX_A_0_RX_C31_RX_C0_SHIFT)
#define SPDIF_CH_STA_RX_A_0_RX_C31_RX_C0_RANGE                  31:0
#define SPDIF_CH_STA_RX_A_0_RX_C31_RX_C0_WOFFSET                        0x0
#define SPDIF_CH_STA_RX_A_0_RX_C31_RX_C0_DEFAULT                        _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_A_0_RX_C31_RX_C0_DEFAULT_MASK                   _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_RX_A_0_RX_C31_RX_C0_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_A_0_RX_C31_RX_C0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register SPDIF_CH_STA_RX_B_0  
#define SPDIF_CH_STA_RX_B_0                     _MK_ADDR_CONST(0x104)
#define SPDIF_CH_STA_RX_B_0_WORD_COUNT                  0x1
#define SPDIF_CH_STA_RX_B_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_B_0_RESET_MASK                  _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_RX_B_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_B_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_B_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_RX_B_0_WRITE_MASK                  _MK_MASK_CONST(0x0)
// Channel status bits [63:32]; one bit per audio  sample
#define SPDIF_CH_STA_RX_B_0_RX_C63_RX_C32_SHIFT                 _MK_SHIFT_CONST(0)
#define SPDIF_CH_STA_RX_B_0_RX_C63_RX_C32_FIELD                 (_MK_MASK_CONST(0xffffffff) << SPDIF_CH_STA_RX_B_0_RX_C63_RX_C32_SHIFT)
#define SPDIF_CH_STA_RX_B_0_RX_C63_RX_C32_RANGE                 31:0
#define SPDIF_CH_STA_RX_B_0_RX_C63_RX_C32_WOFFSET                       0x0
#define SPDIF_CH_STA_RX_B_0_RX_C63_RX_C32_DEFAULT                       _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_B_0_RX_C63_RX_C32_DEFAULT_MASK                  _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_RX_B_0_RX_C63_RX_C32_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_B_0_RX_C63_RX_C32_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register SPDIF_CH_STA_RX_C_0  
#define SPDIF_CH_STA_RX_C_0                     _MK_ADDR_CONST(0x108)
#define SPDIF_CH_STA_RX_C_0_WORD_COUNT                  0x1
#define SPDIF_CH_STA_RX_C_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_C_0_RESET_MASK                  _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_RX_C_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_C_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_C_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_RX_C_0_WRITE_MASK                  _MK_MASK_CONST(0x0)
// Channel status bits [95:64]; one bit per audio  sample
#define SPDIF_CH_STA_RX_C_0_RX_C95_RX_C64_SHIFT                 _MK_SHIFT_CONST(0)
#define SPDIF_CH_STA_RX_C_0_RX_C95_RX_C64_FIELD                 (_MK_MASK_CONST(0xffffffff) << SPDIF_CH_STA_RX_C_0_RX_C95_RX_C64_SHIFT)
#define SPDIF_CH_STA_RX_C_0_RX_C95_RX_C64_RANGE                 31:0
#define SPDIF_CH_STA_RX_C_0_RX_C95_RX_C64_WOFFSET                       0x0
#define SPDIF_CH_STA_RX_C_0_RX_C95_RX_C64_DEFAULT                       _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_C_0_RX_C95_RX_C64_DEFAULT_MASK                  _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_RX_C_0_RX_C95_RX_C64_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_C_0_RX_C95_RX_C64_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register SPDIF_CH_STA_RX_D_0  
#define SPDIF_CH_STA_RX_D_0                     _MK_ADDR_CONST(0x10c)
#define SPDIF_CH_STA_RX_D_0_WORD_COUNT                  0x1
#define SPDIF_CH_STA_RX_D_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_D_0_RESET_MASK                  _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_RX_D_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_D_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_D_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_RX_D_0_WRITE_MASK                  _MK_MASK_CONST(0x0)
// Channel status bits [127:96]; one bit per audio  sample
#define SPDIF_CH_STA_RX_D_0_RX_C127_RX_C96_SHIFT                        _MK_SHIFT_CONST(0)
#define SPDIF_CH_STA_RX_D_0_RX_C127_RX_C96_FIELD                        (_MK_MASK_CONST(0xffffffff) << SPDIF_CH_STA_RX_D_0_RX_C127_RX_C96_SHIFT)
#define SPDIF_CH_STA_RX_D_0_RX_C127_RX_C96_RANGE                        31:0
#define SPDIF_CH_STA_RX_D_0_RX_C127_RX_C96_WOFFSET                      0x0
#define SPDIF_CH_STA_RX_D_0_RX_C127_RX_C96_DEFAULT                      _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_D_0_RX_C127_RX_C96_DEFAULT_MASK                 _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_RX_D_0_RX_C127_RX_C96_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_D_0_RX_C127_RX_C96_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)


// Register SPDIF_CH_STA_RX_E_0  
#define SPDIF_CH_STA_RX_E_0                     _MK_ADDR_CONST(0x110)
#define SPDIF_CH_STA_RX_E_0_WORD_COUNT                  0x1
#define SPDIF_CH_STA_RX_E_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_E_0_RESET_MASK                  _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_RX_E_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_E_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_E_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_RX_E_0_WRITE_MASK                  _MK_MASK_CONST(0x0)
// Channel status bits [159:128]; one bit per audio  sample
#define SPDIF_CH_STA_RX_E_0_RX_C159_RX_C128_SHIFT                       _MK_SHIFT_CONST(0)
#define SPDIF_CH_STA_RX_E_0_RX_C159_RX_C128_FIELD                       (_MK_MASK_CONST(0xffffffff) << SPDIF_CH_STA_RX_E_0_RX_C159_RX_C128_SHIFT)
#define SPDIF_CH_STA_RX_E_0_RX_C159_RX_C128_RANGE                       31:0
#define SPDIF_CH_STA_RX_E_0_RX_C159_RX_C128_WOFFSET                     0x0
#define SPDIF_CH_STA_RX_E_0_RX_C159_RX_C128_DEFAULT                     _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_E_0_RX_C159_RX_C128_DEFAULT_MASK                        _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_RX_E_0_RX_C159_RX_C128_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_E_0_RX_C159_RX_C128_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register SPDIF_CH_STA_RX_F_0  
#define SPDIF_CH_STA_RX_F_0                     _MK_ADDR_CONST(0x114)
#define SPDIF_CH_STA_RX_F_0_WORD_COUNT                  0x1
#define SPDIF_CH_STA_RX_F_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_F_0_RESET_MASK                  _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_RX_F_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_F_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_F_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_RX_F_0_WRITE_MASK                  _MK_MASK_CONST(0x0)
// Channel status bits [191:160]; one bit per audio  sample
#define SPDIF_CH_STA_RX_F_0_RX_C191_RX_C160_SHIFT                       _MK_SHIFT_CONST(0)
#define SPDIF_CH_STA_RX_F_0_RX_C191_RX_C160_FIELD                       (_MK_MASK_CONST(0xffffffff) << SPDIF_CH_STA_RX_F_0_RX_C191_RX_C160_SHIFT)
#define SPDIF_CH_STA_RX_F_0_RX_C191_RX_C160_RANGE                       31:0
#define SPDIF_CH_STA_RX_F_0_RX_C191_RX_C160_WOFFSET                     0x0
#define SPDIF_CH_STA_RX_F_0_RX_C191_RX_C160_DEFAULT                     _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_F_0_RX_C191_RX_C160_DEFAULT_MASK                        _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_RX_F_0_RX_C191_RX_C160_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_RX_F_0_RX_C191_RX_C160_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Reserved address 280 [0x118] 

// Reserved address 284 [0x11c] 

// Reserved address 288 [0x120] 

// Reserved address 292 [0x124] 

// Reserved address 296 [0x128] 

// Reserved address 300 [0x12c] 

// Reserved address 304 [0x130] 

// Reserved address 308 [0x134] 

// Reserved address 312 [0x138] 

// Reserved address 316 [0x13c] 
// SPDIF Channel Status Tx Page Buffer Register
// ---------------------------------------------------------------------------------------------------------------
// This 6-words transmit channel data page buffer holds a block (192 frames) of channel status information.  The
// order of transmittion is from LSB bit to MSB bit, and from CH_STA_TX_A to CH_STA_TX_F and back to CH_STA_TX_A.
// 
// Note:  The channel status data from this page buffer will be used only when PACK=1, or when BIT_MODE=00/01/10.
// Note:  Each channel status bit will be send out to "both" subframes.
// ---------------------------------------------------------------------------------------------------------------

// Register SPDIF_CH_STA_TX_A_0  
#define SPDIF_CH_STA_TX_A_0                     _MK_ADDR_CONST(0x140)
#define SPDIF_CH_STA_TX_A_0_WORD_COUNT                  0x1
#define SPDIF_CH_STA_TX_A_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_A_0_RESET_MASK                  _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_TX_A_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_A_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_A_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_TX_A_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Channel status bits [31:0]; one bit per audio  sample
#define SPDIF_CH_STA_TX_A_0_TX_C31_TX_C0_SHIFT                  _MK_SHIFT_CONST(0)
#define SPDIF_CH_STA_TX_A_0_TX_C31_TX_C0_FIELD                  (_MK_MASK_CONST(0xffffffff) << SPDIF_CH_STA_TX_A_0_TX_C31_TX_C0_SHIFT)
#define SPDIF_CH_STA_TX_A_0_TX_C31_TX_C0_RANGE                  31:0
#define SPDIF_CH_STA_TX_A_0_TX_C31_TX_C0_WOFFSET                        0x0
#define SPDIF_CH_STA_TX_A_0_TX_C31_TX_C0_DEFAULT                        _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_A_0_TX_C31_TX_C0_DEFAULT_MASK                   _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_TX_A_0_TX_C31_TX_C0_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_A_0_TX_C31_TX_C0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)


// Register SPDIF_CH_STA_TX_B_0  
#define SPDIF_CH_STA_TX_B_0                     _MK_ADDR_CONST(0x144)
#define SPDIF_CH_STA_TX_B_0_WORD_COUNT                  0x1
#define SPDIF_CH_STA_TX_B_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_B_0_RESET_MASK                  _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_TX_B_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_B_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_B_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_TX_B_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Channel status bits [63:32]; one bit per audio  sample
#define SPDIF_CH_STA_TX_B_0_TX_C63_TX_C32_SHIFT                 _MK_SHIFT_CONST(0)
#define SPDIF_CH_STA_TX_B_0_TX_C63_TX_C32_FIELD                 (_MK_MASK_CONST(0xffffffff) << SPDIF_CH_STA_TX_B_0_TX_C63_TX_C32_SHIFT)
#define SPDIF_CH_STA_TX_B_0_TX_C63_TX_C32_RANGE                 31:0
#define SPDIF_CH_STA_TX_B_0_TX_C63_TX_C32_WOFFSET                       0x0
#define SPDIF_CH_STA_TX_B_0_TX_C63_TX_C32_DEFAULT                       _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_B_0_TX_C63_TX_C32_DEFAULT_MASK                  _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_TX_B_0_TX_C63_TX_C32_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_B_0_TX_C63_TX_C32_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register SPDIF_CH_STA_TX_C_0  
#define SPDIF_CH_STA_TX_C_0                     _MK_ADDR_CONST(0x148)
#define SPDIF_CH_STA_TX_C_0_WORD_COUNT                  0x1
#define SPDIF_CH_STA_TX_C_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_C_0_RESET_MASK                  _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_TX_C_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_C_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_C_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_TX_C_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Channel status bits [95:64]; one bit per audio  sample
#define SPDIF_CH_STA_TX_C_0_TX_C95_TX_C64_SHIFT                 _MK_SHIFT_CONST(0)
#define SPDIF_CH_STA_TX_C_0_TX_C95_TX_C64_FIELD                 (_MK_MASK_CONST(0xffffffff) << SPDIF_CH_STA_TX_C_0_TX_C95_TX_C64_SHIFT)
#define SPDIF_CH_STA_TX_C_0_TX_C95_TX_C64_RANGE                 31:0
#define SPDIF_CH_STA_TX_C_0_TX_C95_TX_C64_WOFFSET                       0x0
#define SPDIF_CH_STA_TX_C_0_TX_C95_TX_C64_DEFAULT                       _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_C_0_TX_C95_TX_C64_DEFAULT_MASK                  _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_TX_C_0_TX_C95_TX_C64_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_C_0_TX_C95_TX_C64_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Register SPDIF_CH_STA_TX_D_0  
#define SPDIF_CH_STA_TX_D_0                     _MK_ADDR_CONST(0x14c)
#define SPDIF_CH_STA_TX_D_0_WORD_COUNT                  0x1
#define SPDIF_CH_STA_TX_D_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_D_0_RESET_MASK                  _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_TX_D_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_D_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_D_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_TX_D_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Channel status bits [127:96]; one bit per audio  sample
#define SPDIF_CH_STA_TX_D_0_TX_C127_TX_C96_SHIFT                        _MK_SHIFT_CONST(0)
#define SPDIF_CH_STA_TX_D_0_TX_C127_TX_C96_FIELD                        (_MK_MASK_CONST(0xffffffff) << SPDIF_CH_STA_TX_D_0_TX_C127_TX_C96_SHIFT)
#define SPDIF_CH_STA_TX_D_0_TX_C127_TX_C96_RANGE                        31:0
#define SPDIF_CH_STA_TX_D_0_TX_C127_TX_C96_WOFFSET                      0x0
#define SPDIF_CH_STA_TX_D_0_TX_C127_TX_C96_DEFAULT                      _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_D_0_TX_C127_TX_C96_DEFAULT_MASK                 _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_TX_D_0_TX_C127_TX_C96_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_D_0_TX_C127_TX_C96_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)


// Register SPDIF_CH_STA_TX_E_0  
#define SPDIF_CH_STA_TX_E_0                     _MK_ADDR_CONST(0x150)
#define SPDIF_CH_STA_TX_E_0_WORD_COUNT                  0x1
#define SPDIF_CH_STA_TX_E_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_E_0_RESET_MASK                  _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_TX_E_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_E_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_E_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_TX_E_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Channel status bits [159:128]; one bit per audio  sample
#define SPDIF_CH_STA_TX_E_0_TX_C159_TX_C128_SHIFT                       _MK_SHIFT_CONST(0)
#define SPDIF_CH_STA_TX_E_0_TX_C159_TX_C128_FIELD                       (_MK_MASK_CONST(0xffffffff) << SPDIF_CH_STA_TX_E_0_TX_C159_TX_C128_SHIFT)
#define SPDIF_CH_STA_TX_E_0_TX_C159_TX_C128_RANGE                       31:0
#define SPDIF_CH_STA_TX_E_0_TX_C159_TX_C128_WOFFSET                     0x0
#define SPDIF_CH_STA_TX_E_0_TX_C159_TX_C128_DEFAULT                     _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_E_0_TX_C159_TX_C128_DEFAULT_MASK                        _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_TX_E_0_TX_C159_TX_C128_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_E_0_TX_C159_TX_C128_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Register SPDIF_CH_STA_TX_F_0  
#define SPDIF_CH_STA_TX_F_0                     _MK_ADDR_CONST(0x154)
#define SPDIF_CH_STA_TX_F_0_WORD_COUNT                  0x1
#define SPDIF_CH_STA_TX_F_0_RESET_VAL                   _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_F_0_RESET_MASK                  _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_TX_F_0_SW_DEFAULT_VAL                      _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_F_0_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_F_0_READ_MASK                   _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_TX_F_0_WRITE_MASK                  _MK_MASK_CONST(0xffffffff)
// Channel status bits [191:160]; one bit per audio  sample
#define SPDIF_CH_STA_TX_F_0_TX_C191_TX_C160_SHIFT                       _MK_SHIFT_CONST(0)
#define SPDIF_CH_STA_TX_F_0_TX_C191_TX_C160_FIELD                       (_MK_MASK_CONST(0xffffffff) << SPDIF_CH_STA_TX_F_0_TX_C191_TX_C160_SHIFT)
#define SPDIF_CH_STA_TX_F_0_TX_C191_TX_C160_RANGE                       31:0
#define SPDIF_CH_STA_TX_F_0_TX_C191_TX_C160_WOFFSET                     0x0
#define SPDIF_CH_STA_TX_F_0_TX_C191_TX_C160_DEFAULT                     _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_F_0_TX_C191_TX_C160_DEFAULT_MASK                        _MK_MASK_CONST(0xffffffff)
#define SPDIF_CH_STA_TX_F_0_TX_C191_TX_C160_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define SPDIF_CH_STA_TX_F_0_TX_C191_TX_C160_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)


// Reserved address 344 [0x158] 

// Reserved address 348 [0x15c] 

// Reserved address 352 [0x160] 

// Reserved address 356 [0x164] 

// Reserved address 360 [0x168] 

// Reserved address 364 [0x16c] 

// Reserved address 368 [0x170] 

// Reserved address 372 [0x174] 

// Reserved address 376 [0x178] 

// Reserved address 380 [0x17c] 
// SPDIF User Data input FIFO register.
// ---------------------------------------------------------------------------------------------------------------
// This 4-words deep FIFO receive user FIFO field information.  The order of receive is from LSB bit to MSB bit.
// 
// Note:  The user data from this FIFO will be used only when PACK=1, or when BIT_MODE=00/01/10.
// Note:  Each user bit will be receive from each subframe.
// ---------------------------------------------------------------------------------------------------------------

// Register SPDIF_USR_STA_RX_A_0  
#define SPDIF_USR_STA_RX_A_0                    _MK_ADDR_CONST(0x180)
#define SPDIF_USR_STA_RX_A_0_WORD_COUNT                         0x1
#define SPDIF_USR_STA_RX_A_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define SPDIF_USR_STA_RX_A_0_RESET_MASK                         _MK_MASK_CONST(0xffffffff)
#define SPDIF_USR_STA_RX_A_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define SPDIF_USR_STA_RX_A_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define SPDIF_USR_STA_RX_A_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define SPDIF_USR_STA_RX_A_0_WRITE_MASK                         _MK_MASK_CONST(0x0)
// 32 bit user data input
#define SPDIF_USR_STA_RX_A_0_RX_U31_RX_U0_SHIFT                 _MK_SHIFT_CONST(0)
#define SPDIF_USR_STA_RX_A_0_RX_U31_RX_U0_FIELD                 (_MK_MASK_CONST(0xffffffff) << SPDIF_USR_STA_RX_A_0_RX_U31_RX_U0_SHIFT)
#define SPDIF_USR_STA_RX_A_0_RX_U31_RX_U0_RANGE                 31:0
#define SPDIF_USR_STA_RX_A_0_RX_U31_RX_U0_WOFFSET                       0x0
#define SPDIF_USR_STA_RX_A_0_RX_U31_RX_U0_DEFAULT                       _MK_MASK_CONST(0x0)
#define SPDIF_USR_STA_RX_A_0_RX_U31_RX_U0_DEFAULT_MASK                  _MK_MASK_CONST(0xffffffff)
#define SPDIF_USR_STA_RX_A_0_RX_U31_RX_U0_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SPDIF_USR_STA_RX_A_0_RX_U31_RX_U0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Reserved address 388 [0x184] 

// Reserved address 392 [0x188] 

// Reserved address 396 [0x18c] 

// Reserved address 400 [0x190] 

// Reserved address 404 [0x194] 

// Reserved address 408 [0x198] 

// Reserved address 412 [0x19c] 

// Reserved address 416 [0x1a0] 

// Reserved address 420 [0x1a4] 

// Reserved address 424 [0x1a8] 

// Reserved address 428 [0x1ac] 

// Reserved address 432 [0x1b0] 

// Reserved address 436 [0x1b4] 

// Reserved address 440 [0x1b8] 

// Reserved address 444 [0x1bc] 
// SPDIF User Data Output FIFO register.
// ---------------------------------------------------------------------------------------------------------------
// This 4-words deep FIFO transmit user FIFO field information.  The order of transmittion is from LSB bit to MSB
// bit.
// 
// Note:  The user data from this FIFO will be used only when PACK=1, or when BIT_MODE=00/01/10.
// Note:  Each user bit will be send out to "each" subframe.
// ---------------------------------------------------------------------------------------------------------------

// Register SPDIF_USR_DAT_TX_A_0  
#define SPDIF_USR_DAT_TX_A_0                    _MK_ADDR_CONST(0x1c0)
#define SPDIF_USR_DAT_TX_A_0_WORD_COUNT                         0x1
#define SPDIF_USR_DAT_TX_A_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define SPDIF_USR_DAT_TX_A_0_RESET_MASK                         _MK_MASK_CONST(0xffffffff)
#define SPDIF_USR_DAT_TX_A_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define SPDIF_USR_DAT_TX_A_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define SPDIF_USR_DAT_TX_A_0_READ_MASK                  _MK_MASK_CONST(0xffffffff)
#define SPDIF_USR_DAT_TX_A_0_WRITE_MASK                         _MK_MASK_CONST(0x0)
// 32 bit user data output
#define SPDIF_USR_DAT_TX_A_0_TX_U31_TX_U0_SHIFT                 _MK_SHIFT_CONST(0)
#define SPDIF_USR_DAT_TX_A_0_TX_U31_TX_U0_FIELD                 (_MK_MASK_CONST(0xffffffff) << SPDIF_USR_DAT_TX_A_0_TX_U31_TX_U0_SHIFT)
#define SPDIF_USR_DAT_TX_A_0_TX_U31_TX_U0_RANGE                 31:0
#define SPDIF_USR_DAT_TX_A_0_TX_U31_TX_U0_WOFFSET                       0x0
#define SPDIF_USR_DAT_TX_A_0_TX_U31_TX_U0_DEFAULT                       _MK_MASK_CONST(0x0)
#define SPDIF_USR_DAT_TX_A_0_TX_U31_TX_U0_DEFAULT_MASK                  _MK_MASK_CONST(0xffffffff)
#define SPDIF_USR_DAT_TX_A_0_TX_U31_TX_U0_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define SPDIF_USR_DAT_TX_A_0_TX_U31_TX_U0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)


// Reserved address 452 [0x1c4] 

// Reserved address 456 [0x1c8] 

// Reserved address 460 [0x1cc] 

// Reserved address 464 [0x1d0] 

// Reserved address 468 [0x1d4] 

// Reserved address 472 [0x1d8] 

// Reserved address 476 [0x1dc] 

// Reserved address 480 [0x1e0] 

// Reserved address 484 [0x1e4] 

// Reserved address 488 [0x1e8] 

// Reserved address 492 [0x1ec] 

// Reserved address 496 [0x1f0] 

// Reserved address 500 [0x1f4] 

// Reserved address 504 [0x1f8] 

// Reserved address 508 [0x1fc] 

// Reserved address 512 [0x200] 

//
// REGISTER LIST
//
#define LIST_ARSPDIF_PPI_REGS(_op_) \
_op_(SPDIF_CTRL_0) \
_op_(SPDIF_STATUS_0) \
_op_(SPDIF_STROBE_CTRL_0) \
_op_(SPDIF_DATA_FIFO_CSR_0) \
_op_(SPDIF_DATA_OUT_0) \
_op_(SPDIF_DATA_IN_0) \
_op_(SPDIF_CH_STA_RX_A_0) \
_op_(SPDIF_CH_STA_RX_B_0) \
_op_(SPDIF_CH_STA_RX_C_0) \
_op_(SPDIF_CH_STA_RX_D_0) \
_op_(SPDIF_CH_STA_RX_E_0) \
_op_(SPDIF_CH_STA_RX_F_0) \
_op_(SPDIF_CH_STA_TX_A_0) \
_op_(SPDIF_CH_STA_TX_B_0) \
_op_(SPDIF_CH_STA_TX_C_0) \
_op_(SPDIF_CH_STA_TX_D_0) \
_op_(SPDIF_CH_STA_TX_E_0) \
_op_(SPDIF_CH_STA_TX_F_0) \
_op_(SPDIF_USR_STA_RX_A_0) \
_op_(SPDIF_USR_DAT_TX_A_0)


//
// ADDRESS SPACES
//

#define BASE_ADDRESS_SPDIF      0x00000000

//
// ARSPDIF_PPI REGISTER BANKS
//

#define SPDIF0_FIRST_REG 0x0000 // SPDIF_CTRL_0
#define SPDIF0_LAST_REG 0x000c // SPDIF_DATA_FIFO_CSR_0
#define SPDIF1_FIRST_REG 0x0040 // SPDIF_DATA_OUT_0
#define SPDIF1_LAST_REG 0x0040 // SPDIF_DATA_OUT_0
#define SPDIF2_FIRST_REG 0x0080 // SPDIF_DATA_IN_0
#define SPDIF2_LAST_REG 0x0080 // SPDIF_DATA_IN_0
#define SPDIF3_FIRST_REG 0x0100 // SPDIF_CH_STA_RX_A_0
#define SPDIF3_LAST_REG 0x0114 // SPDIF_CH_STA_RX_F_0
#define SPDIF4_FIRST_REG 0x0140 // SPDIF_CH_STA_TX_A_0
#define SPDIF4_LAST_REG 0x0154 // SPDIF_CH_STA_TX_F_0
#define SPDIF5_FIRST_REG 0x0180 // SPDIF_USR_STA_RX_A_0
#define SPDIF5_LAST_REG 0x0180 // SPDIF_USR_STA_RX_A_0
#define SPDIF6_FIRST_REG 0x01c0 // SPDIF_USR_DAT_TX_A_0
#define SPDIF6_LAST_REG 0x01c0 // SPDIF_USR_DAT_TX_A_0

#ifndef _MK_SHIFT_CONST
  #define _MK_SHIFT_CONST(_constant_) _constant_
#endif
#ifndef _MK_MASK_CONST
  #define _MK_MASK_CONST(_constant_) _constant_
#endif
#ifndef _MK_ENUM_CONST
  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
#endif
#ifndef _MK_ADDR_CONST
  #define _MK_ADDR_CONST(_constant_) _constant_
#endif

#endif // ifndef ___ARSPDIF_PPI_H_INC_
