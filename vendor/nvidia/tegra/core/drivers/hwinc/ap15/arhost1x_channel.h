//
// DO NOT EDIT - generated by simspec!
//

#ifndef ___ARHOST1X_CHANNEL_H_INC_
#define ___ARHOST1X_CHANNEL_H_INC_
// --------------------------------------------------------------------------
// 
// Copyright (c) 2004, NVIDIA Corp.
// All Rights Reserved.
// 
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
// 
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
// 
// --------------------------------------------------------------------------
// 
// --------------------------------------------------------------------------
//
// Copyright (c) 2004, NVIDIA Corp.
// All Rights Reserved.
//
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
//
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
//
// --------------------------------------------------------------------------
//
// Module IDs for use in enums
// Channel IDs
// All channels have the common registers
// --------------------------------------------------------------------------
// 
// Copyright (c) 2004, NVIDIA Corp.
// All Rights Reserved.
// 
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
// 
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
// 
// --------------------------------------------------------------------------
// 
// CFNUMEMPTY is the number of free slots available in the per-channel command
// FIFO (needed for PIO or polling for completion of a wait).

// Register HOST1X_CHANNEL_FIFOSTAT_0  
#define HOST1X_CHANNEL_FIFOSTAT_0                       _MK_ADDR_CONST(0x0)
#define HOST1X_CHANNEL_FIFOSTAT_0_WORD_COUNT                    0x1
#define HOST1X_CHANNEL_FIFOSTAT_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FIFOSTAT_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FIFOSTAT_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FIFOSTAT_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FIFOSTAT_0_READ_MASK                     _MK_MASK_CONST(0x9f1f1fff)
#define HOST1X_CHANNEL_FIFOSTAT_0_WRITE_MASK                    _MK_MASK_CONST(0x0)
// Command FIFO free count
#define HOST1X_CHANNEL_FIFOSTAT_0_CFNUMEMPTY_SHIFT                      _MK_SHIFT_CONST(0)
#define HOST1X_CHANNEL_FIFOSTAT_0_CFNUMEMPTY_FIELD                      (_MK_MASK_CONST(0x3ff) << HOST1X_CHANNEL_FIFOSTAT_0_CFNUMEMPTY_SHIFT)
#define HOST1X_CHANNEL_FIFOSTAT_0_CFNUMEMPTY_RANGE                      9:0
#define HOST1X_CHANNEL_FIFOSTAT_0_CFNUMEMPTY_WOFFSET                    0x0
#define HOST1X_CHANNEL_FIFOSTAT_0_CFNUMEMPTY_DEFAULT                    _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FIFOSTAT_0_CFNUMEMPTY_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FIFOSTAT_0_CFNUMEMPTY_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FIFOSTAT_0_CFNUMEMPTY_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Indicates whether the command FIFO is empty or not
#define HOST1X_CHANNEL_FIFOSTAT_0_CFEMPTY_SHIFT                 _MK_SHIFT_CONST(10)
#define HOST1X_CHANNEL_FIFOSTAT_0_CFEMPTY_FIELD                 (_MK_MASK_CONST(0x1) << HOST1X_CHANNEL_FIFOSTAT_0_CFEMPTY_SHIFT)
#define HOST1X_CHANNEL_FIFOSTAT_0_CFEMPTY_RANGE                 10:10
#define HOST1X_CHANNEL_FIFOSTAT_0_CFEMPTY_WOFFSET                       0x0
#define HOST1X_CHANNEL_FIFOSTAT_0_CFEMPTY_DEFAULT                       _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FIFOSTAT_0_CFEMPTY_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FIFOSTAT_0_CFEMPTY_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FIFOSTAT_0_CFEMPTY_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FIFOSTAT_0_CFEMPTY_NOTEMPTY                      _MK_ENUM_CONST(0)
#define HOST1X_CHANNEL_FIFOSTAT_0_CFEMPTY_EMPTY                 _MK_ENUM_CONST(1)

// Indicates whether GATHER is active.  If a GATHER command issued via PIO, software must wait for the GATHER to be IDLE before issuing another command.
#define HOST1X_CHANNEL_FIFOSTAT_0_CFGATHER_SHIFT                        _MK_SHIFT_CONST(11)
#define HOST1X_CHANNEL_FIFOSTAT_0_CFGATHER_FIELD                        (_MK_MASK_CONST(0x1) << HOST1X_CHANNEL_FIFOSTAT_0_CFGATHER_SHIFT)
#define HOST1X_CHANNEL_FIFOSTAT_0_CFGATHER_RANGE                        11:11
#define HOST1X_CHANNEL_FIFOSTAT_0_CFGATHER_WOFFSET                      0x0
#define HOST1X_CHANNEL_FIFOSTAT_0_CFGATHER_DEFAULT                      _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FIFOSTAT_0_CFGATHER_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FIFOSTAT_0_CFGATHER_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FIFOSTAT_0_CFGATHER_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FIFOSTAT_0_CFGATHER_IDLE                 _MK_ENUM_CONST(0)
#define HOST1X_CHANNEL_FIFOSTAT_0_CFGATHER_BUSY                 _MK_ENUM_CONST(1)

// Indicates whether GATHER3D is active.  If a GATHER3D command issued via PIO, software must wait for the GATHER3D to be IDLE before issuing another command.
#define HOST1X_CHANNEL_FIFOSTAT_0_CFGATHER3D_SHIFT                      _MK_SHIFT_CONST(12)
#define HOST1X_CHANNEL_FIFOSTAT_0_CFGATHER3D_FIELD                      (_MK_MASK_CONST(0x1) << HOST1X_CHANNEL_FIFOSTAT_0_CFGATHER3D_SHIFT)
#define HOST1X_CHANNEL_FIFOSTAT_0_CFGATHER3D_RANGE                      12:12
#define HOST1X_CHANNEL_FIFOSTAT_0_CFGATHER3D_WOFFSET                    0x0
#define HOST1X_CHANNEL_FIFOSTAT_0_CFGATHER3D_DEFAULT                    _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FIFOSTAT_0_CFGATHER3D_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FIFOSTAT_0_CFGATHER3D_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FIFOSTAT_0_CFGATHER3D_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FIFOSTAT_0_CFGATHER3D_IDLE                       _MK_ENUM_CONST(0)
#define HOST1X_CHANNEL_FIFOSTAT_0_CFGATHER3D_BUSY                       _MK_ENUM_CONST(1)

// Register write/read FIFO free count
#define HOST1X_CHANNEL_FIFOSTAT_0_REGFNUMEMPTY_SHIFT                    _MK_SHIFT_CONST(16)
#define HOST1X_CHANNEL_FIFOSTAT_0_REGFNUMEMPTY_FIELD                    (_MK_MASK_CONST(0x1f) << HOST1X_CHANNEL_FIFOSTAT_0_REGFNUMEMPTY_SHIFT)
#define HOST1X_CHANNEL_FIFOSTAT_0_REGFNUMEMPTY_RANGE                    20:16
#define HOST1X_CHANNEL_FIFOSTAT_0_REGFNUMEMPTY_WOFFSET                  0x0
#define HOST1X_CHANNEL_FIFOSTAT_0_REGFNUMEMPTY_DEFAULT                  _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FIFOSTAT_0_REGFNUMEMPTY_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FIFOSTAT_0_REGFNUMEMPTY_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FIFOSTAT_0_REGFNUMEMPTY_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// Number of entries available for reading in this channel's output FIFO
#define HOST1X_CHANNEL_FIFOSTAT_0_OUTFENTRIES_SHIFT                     _MK_SHIFT_CONST(24)
#define HOST1X_CHANNEL_FIFOSTAT_0_OUTFENTRIES_FIELD                     (_MK_MASK_CONST(0x1f) << HOST1X_CHANNEL_FIFOSTAT_0_OUTFENTRIES_SHIFT)
#define HOST1X_CHANNEL_FIFOSTAT_0_OUTFENTRIES_RANGE                     28:24
#define HOST1X_CHANNEL_FIFOSTAT_0_OUTFENTRIES_WOFFSET                   0x0
#define HOST1X_CHANNEL_FIFOSTAT_0_OUTFENTRIES_DEFAULT                   _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FIFOSTAT_0_OUTFENTRIES_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FIFOSTAT_0_OUTFENTRIES_SW_DEFAULT                        _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FIFOSTAT_0_OUTFENTRIES_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)

// Indicates that INDCOUNT==0, so it should be OK to issue another read
#define HOST1X_CHANNEL_FIFOSTAT_0_INDRDY_SHIFT                  _MK_SHIFT_CONST(31)
#define HOST1X_CHANNEL_FIFOSTAT_0_INDRDY_FIELD                  (_MK_MASK_CONST(0x1) << HOST1X_CHANNEL_FIFOSTAT_0_INDRDY_SHIFT)
#define HOST1X_CHANNEL_FIFOSTAT_0_INDRDY_RANGE                  31:31
#define HOST1X_CHANNEL_FIFOSTAT_0_INDRDY_WOFFSET                        0x0
#define HOST1X_CHANNEL_FIFOSTAT_0_INDRDY_DEFAULT                        _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FIFOSTAT_0_INDRDY_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FIFOSTAT_0_INDRDY_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FIFOSTAT_0_INDRDY_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// The INDOFF and INDOFF2 registers (along with INDCNT and INDDATA) are used to
// indirectly read/write modules outside the host. If AUTOINC is set, INDOFFSET
// increments by 4 on every access of INDDATA.  REGFNUMEMPTY is polled to
// determine when valid data can be read from INDDATA.
//
// The INDOFF register has limited capability on chips with large memory maps.
// If the top bit of the memory address is >= 27, all of memory cannot be
// addressed with INDOFF.  In these cases, use INDOFF2 to set the offset while
// still using INDOFF to set the other parameters.  Always have INDOFFUPD set
// to NO_UPDATE in these cases.  For register accesses, using INDOFF (with
// INDOFFUPD set to UPDATE) is always more efficient, since it only requires
// one write.
//
// Indirect framebuffer write is STRONGLY DISCOURAGED.  There are better ways
// to write to memory (direct and through the channel memory map) and there is
// limited flow control in the host.  It's very easy to get into trouble with
// indirect framebuffer write.

// Register HOST1X_CHANNEL_INDOFF_0  
#define HOST1X_CHANNEL_INDOFF_0                 _MK_ADDR_CONST(0x4)
#define HOST1X_CHANNEL_INDOFF_0_WORD_COUNT                      0x1
#define HOST1X_CHANNEL_INDOFF_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_READ_MASK                       _MK_MASK_CONST(0xfbfffffd)
#define HOST1X_CHANNEL_INDOFF_0_WRITE_MASK                      _MK_MASK_CONST(0xfbfffffd)
// auto increment of read/write address
#define HOST1X_CHANNEL_INDOFF_0_AUTOINC_SHIFT                   _MK_SHIFT_CONST(31)
#define HOST1X_CHANNEL_INDOFF_0_AUTOINC_FIELD                   (_MK_MASK_CONST(0x1) << HOST1X_CHANNEL_INDOFF_0_AUTOINC_SHIFT)
#define HOST1X_CHANNEL_INDOFF_0_AUTOINC_RANGE                   31:31
#define HOST1X_CHANNEL_INDOFF_0_AUTOINC_WOFFSET                 0x0
#define HOST1X_CHANNEL_INDOFF_0_AUTOINC_DEFAULT                 _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_AUTOINC_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_AUTOINC_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_AUTOINC_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_AUTOINC_DISABLE                 _MK_ENUM_CONST(0)
#define HOST1X_CHANNEL_INDOFF_0_AUTOINC_ENABLE                  _MK_ENUM_CONST(1)

// access type: indirect register or indirect framebuffer
#define HOST1X_CHANNEL_INDOFF_0_ACCTYPE_SHIFT                   _MK_SHIFT_CONST(30)
#define HOST1X_CHANNEL_INDOFF_0_ACCTYPE_FIELD                   (_MK_MASK_CONST(0x1) << HOST1X_CHANNEL_INDOFF_0_ACCTYPE_SHIFT)
#define HOST1X_CHANNEL_INDOFF_0_ACCTYPE_RANGE                   30:30
#define HOST1X_CHANNEL_INDOFF_0_ACCTYPE_WOFFSET                 0x0
#define HOST1X_CHANNEL_INDOFF_0_ACCTYPE_DEFAULT                 _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_ACCTYPE_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_ACCTYPE_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_ACCTYPE_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_ACCTYPE_REG                     _MK_ENUM_CONST(0)
#define HOST1X_CHANNEL_INDOFF_0_ACCTYPE_FB                      _MK_ENUM_CONST(1)

// buffer up 32 bits of register data before sending it.  Otherwise, register writes will be sent as soon as they are received.  Does not support byte writes in 16-bit host. Does not affect framebuffer writes.
#define HOST1X_CHANNEL_INDOFF_0_BUF32B_SHIFT                    _MK_SHIFT_CONST(29)
#define HOST1X_CHANNEL_INDOFF_0_BUF32B_FIELD                    (_MK_MASK_CONST(0x1) << HOST1X_CHANNEL_INDOFF_0_BUF32B_SHIFT)
#define HOST1X_CHANNEL_INDOFF_0_BUF32B_RANGE                    29:29
#define HOST1X_CHANNEL_INDOFF_0_BUF32B_WOFFSET                  0x0
#define HOST1X_CHANNEL_INDOFF_0_BUF32B_DEFAULT                  _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_BUF32B_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_BUF32B_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_BUF32B_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_BUF32B_NOBUF                    _MK_ENUM_CONST(0)
#define HOST1X_CHANNEL_INDOFF_0_BUF32B_BUF                      _MK_ENUM_CONST(1)

// Indirect framebugger access swap control. 00 = No byte swap
// 01 = 16-bit byte swap ([31:0] -> {[23:16],[31:24],[7:0],[15:8]})
// 10 = 32-bit byte swap ([31:0] -> {[7:0],[15:8],[23:16],[31:24]})
// 11 = 32-bit word swap ([31:0] -> {[15:8],[7:0],[31:24],[23:16]})
#define HOST1X_CHANNEL_INDOFF_0_INDSWAP_SHIFT                   _MK_SHIFT_CONST(27)
#define HOST1X_CHANNEL_INDOFF_0_INDSWAP_FIELD                   (_MK_MASK_CONST(0x3) << HOST1X_CHANNEL_INDOFF_0_INDSWAP_SHIFT)
#define HOST1X_CHANNEL_INDOFF_0_INDSWAP_RANGE                   28:27
#define HOST1X_CHANNEL_INDOFF_0_INDSWAP_WOFFSET                 0x0
#define HOST1X_CHANNEL_INDOFF_0_INDSWAP_DEFAULT                 _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_INDSWAP_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_INDSWAP_SW_DEFAULT                      _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_INDSWAP_SW_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_INDSWAP_NONE                    _MK_ENUM_CONST(0)
#define HOST1X_CHANNEL_INDOFF_0_INDSWAP_BYTE16                  _MK_ENUM_CONST(1)
#define HOST1X_CHANNEL_INDOFF_0_INDSWAP_BYTE32                  _MK_ENUM_CONST(2)
#define HOST1X_CHANNEL_INDOFF_0_INDSWAP_WORD32                  _MK_ENUM_CONST(3)

// ACCTYPE=FB: framebuffer address
#define HOST1X_CHANNEL_INDOFF_0_INDOFFSET_SHIFT                 _MK_SHIFT_CONST(2)
#define HOST1X_CHANNEL_INDOFF_0_INDOFFSET_FIELD                 (_MK_MASK_CONST(0xffffff) << HOST1X_CHANNEL_INDOFF_0_INDOFFSET_SHIFT)
#define HOST1X_CHANNEL_INDOFF_0_INDOFFSET_RANGE                 25:2
#define HOST1X_CHANNEL_INDOFF_0_INDOFFSET_WOFFSET                       0x0
#define HOST1X_CHANNEL_INDOFF_0_INDOFFSET_DEFAULT                       _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_INDOFFSET_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_INDOFFSET_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_INDOFFSET_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)

// ACCTYPE=REG: register module ID
#define HOST1X_CHANNEL_INDOFF_0_INDMODID_SHIFT                  _MK_SHIFT_CONST(18)
#define HOST1X_CHANNEL_INDOFF_0_INDMODID_FIELD                  (_MK_MASK_CONST(0xff) << HOST1X_CHANNEL_INDOFF_0_INDMODID_SHIFT)
#define HOST1X_CHANNEL_INDOFF_0_INDMODID_RANGE                  25:18
#define HOST1X_CHANNEL_INDOFF_0_INDMODID_WOFFSET                        0x0
#define HOST1X_CHANNEL_INDOFF_0_INDMODID_DEFAULT                        _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_INDMODID_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_INDMODID_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_INDMODID_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_INDMODID_HOST1X                 _MK_ENUM_CONST(0)
#define HOST1X_CHANNEL_INDOFF_0_INDMODID_MPE                    _MK_ENUM_CONST(1)
#define HOST1X_CHANNEL_INDOFF_0_INDMODID_VI                     _MK_ENUM_CONST(2)
#define HOST1X_CHANNEL_INDOFF_0_INDMODID_EPP                    _MK_ENUM_CONST(3)
#define HOST1X_CHANNEL_INDOFF_0_INDMODID_ISP                    _MK_ENUM_CONST(4)
#define HOST1X_CHANNEL_INDOFF_0_INDMODID_GR2D                   _MK_ENUM_CONST(5)
#define HOST1X_CHANNEL_INDOFF_0_INDMODID_GR3D                   _MK_ENUM_CONST(6)
#define HOST1X_CHANNEL_INDOFF_0_INDMODID_DISPLAY                        _MK_ENUM_CONST(8)
#define HOST1X_CHANNEL_INDOFF_0_INDMODID_TVO                    _MK_ENUM_CONST(11)
#define HOST1X_CHANNEL_INDOFF_0_INDMODID_DISPLAYB                       _MK_ENUM_CONST(9)
#define HOST1X_CHANNEL_INDOFF_0_INDMODID_DSI                    _MK_ENUM_CONST(12)
#define HOST1X_CHANNEL_INDOFF_0_INDMODID_HDMI                   _MK_ENUM_CONST(10)

// ACCTYPE=REG: register offset ([15:0])
#define HOST1X_CHANNEL_INDOFF_0_INDROFFSET_SHIFT                        _MK_SHIFT_CONST(2)
#define HOST1X_CHANNEL_INDOFF_0_INDROFFSET_FIELD                        (_MK_MASK_CONST(0xffff) << HOST1X_CHANNEL_INDOFF_0_INDROFFSET_SHIFT)
#define HOST1X_CHANNEL_INDOFF_0_INDROFFSET_RANGE                        17:2
#define HOST1X_CHANNEL_INDOFF_0_INDROFFSET_WOFFSET                      0x0
#define HOST1X_CHANNEL_INDOFF_0_INDROFFSET_DEFAULT                      _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_INDROFFSET_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_INDROFFSET_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_INDROFFSET_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// Optionally disable the update of INDOFFSET when writing this register
#define HOST1X_CHANNEL_INDOFF_0_INDOFFUPD_SHIFT                 _MK_SHIFT_CONST(0)
#define HOST1X_CHANNEL_INDOFF_0_INDOFFUPD_FIELD                 (_MK_MASK_CONST(0x1) << HOST1X_CHANNEL_INDOFF_0_INDOFFUPD_SHIFT)
#define HOST1X_CHANNEL_INDOFF_0_INDOFFUPD_RANGE                 0:0
#define HOST1X_CHANNEL_INDOFF_0_INDOFFUPD_WOFFSET                       0x0
#define HOST1X_CHANNEL_INDOFF_0_INDOFFUPD_DEFAULT                       _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_INDOFFUPD_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_INDOFFUPD_SW_DEFAULT                    _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_INDOFFUPD_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF_0_INDOFFUPD_UPDATE                        _MK_ENUM_CONST(0)
#define HOST1X_CHANNEL_INDOFF_0_INDOFFUPD_NO_UPDATE                     _MK_ENUM_CONST(1)

// Indirect register access count
// Used to trigger indirect reads.  Holds the number of registers/memory
// locations that will be read out.  Channels should not request more than
// there is space available in their output FIFO.  Only the protected channel
// should make liberal use of this feature for speeding up context switching.
//
// For indirect framebuffer reads, each channel cannot issue more than 
// NV_HOST1X_MAX_IND_FB_READS at once.  The read data must return and be
// written into the per-channel output FIFO before any additional reads can
// be issued.

// Register HOST1X_CHANNEL_INDCNT_0  
#define HOST1X_CHANNEL_INDCNT_0                 _MK_ADDR_CONST(0x8)
#define HOST1X_CHANNEL_INDCNT_0_WORD_COUNT                      0x1
#define HOST1X_CHANNEL_INDCNT_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDCNT_0_RESET_MASK                      _MK_MASK_CONST(0xffff)
#define HOST1X_CHANNEL_INDCNT_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDCNT_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDCNT_0_READ_MASK                       _MK_MASK_CONST(0xffff)
#define HOST1X_CHANNEL_INDCNT_0_WRITE_MASK                      _MK_MASK_CONST(0xffff)
#define HOST1X_CHANNEL_INDCNT_0_INDCOUNT_SHIFT                  _MK_SHIFT_CONST(0)
#define HOST1X_CHANNEL_INDCNT_0_INDCOUNT_FIELD                  (_MK_MASK_CONST(0xffff) << HOST1X_CHANNEL_INDCNT_0_INDCOUNT_SHIFT)
#define HOST1X_CHANNEL_INDCNT_0_INDCOUNT_RANGE                  15:0
#define HOST1X_CHANNEL_INDCNT_0_INDCOUNT_WOFFSET                        0x0
#define HOST1X_CHANNEL_INDCNT_0_INDCOUNT_DEFAULT                        _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDCNT_0_INDCOUNT_DEFAULT_MASK                   _MK_MASK_CONST(0xffff)
#define HOST1X_CHANNEL_INDCNT_0_INDCOUNT_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDCNT_0_INDCOUNT_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// This register, when written, writes to the data to the INDOFFSET in INDOFF.
// For reads, a REGFNUMEMPTY number of 32-bit values can be read before needing
// to poll FIFOSTAT again.
// The per-channel output FIFO (OUTFENTRIES) is readable via this offset.  A
// read of INDDATA will pop an entry off of the per-channel output FIFO.

// Register HOST1X_CHANNEL_INDDATA_0  
#define HOST1X_CHANNEL_INDDATA_0                        _MK_ADDR_CONST(0xc)
#define HOST1X_CHANNEL_INDDATA_0_WORD_COUNT                     0x1
#define HOST1X_CHANNEL_INDDATA_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDDATA_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDDATA_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDDATA_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDDATA_0_READ_MASK                      _MK_MASK_CONST(0xffffffff)
#define HOST1X_CHANNEL_INDDATA_0_WRITE_MASK                     _MK_MASK_CONST(0xffffffff)
// read or write data
#define HOST1X_CHANNEL_INDDATA_0_INDDATA_SHIFT                  _MK_SHIFT_CONST(0)
#define HOST1X_CHANNEL_INDDATA_0_INDDATA_FIELD                  (_MK_MASK_CONST(0xffffffff) << HOST1X_CHANNEL_INDDATA_0_INDDATA_SHIFT)
#define HOST1X_CHANNEL_INDDATA_0_INDDATA_RANGE                  31:0
#define HOST1X_CHANNEL_INDDATA_0_INDDATA_WOFFSET                        0x0
#define HOST1X_CHANNEL_INDDATA_0_INDDATA_DEFAULT                        _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDDATA_0_INDDATA_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDDATA_0_INDDATA_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDDATA_0_INDDATA_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)

// The general-purpose channels have DMA and RAISE/REFCOUNT functionality
// --------------------------------------------------------------------------
// 
// Copyright (c) 2004, NVIDIA Corp.
// All Rights Reserved.
// 
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
// 
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
// 
// --------------------------------------------------------------------------
// 
// Any raise values returned from a client module are converted to
// vectors and update the per-channel raise register.
// The RAISE vector is also writable by the CPU.  Any bits set in the RAISE
// field when written will be set in the RAISE register, allowing any pending
// WAITs to continue.

// Register HOST1X_CHANNEL_RAISE_0  
#define HOST1X_CHANNEL_RAISE_0                  _MK_ADDR_CONST(0x10)
#define HOST1X_CHANNEL_RAISE_0_WORD_COUNT                       0x1
#define HOST1X_CHANNEL_RAISE_0_RESET_VAL                        _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_RAISE_0_RESET_MASK                       _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_RAISE_0_SW_DEFAULT_VAL                   _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_RAISE_0_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_RAISE_0_READ_MASK                        _MK_MASK_CONST(0xffffffff)
#define HOST1X_CHANNEL_RAISE_0_WRITE_MASK                       _MK_MASK_CONST(0xffffffff)
// This channel's RAISE vector
#define HOST1X_CHANNEL_RAISE_0_RAISE_SHIFT                      _MK_SHIFT_CONST(0)
#define HOST1X_CHANNEL_RAISE_0_RAISE_FIELD                      (_MK_MASK_CONST(0xffffffff) << HOST1X_CHANNEL_RAISE_0_RAISE_SHIFT)
#define HOST1X_CHANNEL_RAISE_0_RAISE_RANGE                      31:0
#define HOST1X_CHANNEL_RAISE_0_RAISE_WOFFSET                    0x0
#define HOST1X_CHANNEL_RAISE_0_RAISE_DEFAULT                    _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_RAISE_0_RAISE_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_RAISE_0_RAISE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_RAISE_0_RAISE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// This register triggers a DMA fetch from the FB for this channel, if
// the Put register doesn't equal the DMA Get register.

// Register HOST1X_CHANNEL_DMASTART_0  
#define HOST1X_CHANNEL_DMASTART_0                       _MK_ADDR_CONST(0x14)
#define HOST1X_CHANNEL_DMASTART_0_WORD_COUNT                    0x1
#define HOST1X_CHANNEL_DMASTART_0_RESET_VAL                     _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMASTART_0_RESET_MASK                    _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMASTART_0_SW_DEFAULT_VAL                        _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMASTART_0_SW_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMASTART_0_READ_MASK                     _MK_MASK_CONST(0xfffffffc)
#define HOST1X_CHANNEL_DMASTART_0_WRITE_MASK                    _MK_MASK_CONST(0xfffffffc)
// cmdbuf FB offset
#define HOST1X_CHANNEL_DMASTART_0_DMASTART_SHIFT                        _MK_SHIFT_CONST(2)
#define HOST1X_CHANNEL_DMASTART_0_DMASTART_FIELD                        (_MK_MASK_CONST(0x3fffffff) << HOST1X_CHANNEL_DMASTART_0_DMASTART_SHIFT)
#define HOST1X_CHANNEL_DMASTART_0_DMASTART_RANGE                        31:2
#define HOST1X_CHANNEL_DMASTART_0_DMASTART_WOFFSET                      0x0
#define HOST1X_CHANNEL_DMASTART_0_DMASTART_DEFAULT                      _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMASTART_0_DMASTART_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMASTART_0_DMASTART_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMASTART_0_DMASTART_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)

// This register triggers a DMA fetch from the FB for this channel, if the PUT
// register doesn't equal the GET register.  This address is relative to the
// DMASTART base address.
// Does not support byte writes. All 4-byte data need to be programmed. 

// Register HOST1X_CHANNEL_DMAPUT_0  
#define HOST1X_CHANNEL_DMAPUT_0                 _MK_ADDR_CONST(0x18)
#define HOST1X_CHANNEL_DMAPUT_0_WORD_COUNT                      0x1
#define HOST1X_CHANNEL_DMAPUT_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMAPUT_0_RESET_MASK                      _MK_MASK_CONST(0xfffffffc)
#define HOST1X_CHANNEL_DMAPUT_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMAPUT_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMAPUT_0_READ_MASK                       _MK_MASK_CONST(0xfffffffc)
#define HOST1X_CHANNEL_DMAPUT_0_WRITE_MASK                      _MK_MASK_CONST(0xfffffffc)
// cmdbuf FB offset
#define HOST1X_CHANNEL_DMAPUT_0_DMAPUT_SHIFT                    _MK_SHIFT_CONST(2)
#define HOST1X_CHANNEL_DMAPUT_0_DMAPUT_FIELD                    (_MK_MASK_CONST(0x3fffffff) << HOST1X_CHANNEL_DMAPUT_0_DMAPUT_SHIFT)
#define HOST1X_CHANNEL_DMAPUT_0_DMAPUT_RANGE                    31:2
#define HOST1X_CHANNEL_DMAPUT_0_DMAPUT_WOFFSET                  0x0
#define HOST1X_CHANNEL_DMAPUT_0_DMAPUT_DEFAULT                  _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMAPUT_0_DMAPUT_DEFAULT_MASK                     _MK_MASK_CONST(0x3fffffff)
#define HOST1X_CHANNEL_DMAPUT_0_DMAPUT_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMAPUT_0_DMAPUT_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// This register tracks the FB offset the DMA engine has read up to
// (incremented as entries are loaded from the channels command buffer into the
// FIFO).  This addresss is relative to the DMASTART base address.

// Register HOST1X_CHANNEL_DMAGET_0  
#define HOST1X_CHANNEL_DMAGET_0                 _MK_ADDR_CONST(0x1c)
#define HOST1X_CHANNEL_DMAGET_0_WORD_COUNT                      0x1
#define HOST1X_CHANNEL_DMAGET_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMAGET_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMAGET_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMAGET_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMAGET_0_READ_MASK                       _MK_MASK_CONST(0xfffffffc)
#define HOST1X_CHANNEL_DMAGET_0_WRITE_MASK                      _MK_MASK_CONST(0x0)
// cmdbuf FB offset
#define HOST1X_CHANNEL_DMAGET_0_DMAGET_SHIFT                    _MK_SHIFT_CONST(2)
#define HOST1X_CHANNEL_DMAGET_0_DMAGET_FIELD                    (_MK_MASK_CONST(0x3fffffff) << HOST1X_CHANNEL_DMAGET_0_DMAGET_SHIFT)
#define HOST1X_CHANNEL_DMAGET_0_DMAGET_RANGE                    31:2
#define HOST1X_CHANNEL_DMAGET_0_DMAGET_WOFFSET                  0x0
#define HOST1X_CHANNEL_DMAGET_0_DMAGET_DEFAULT                  _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMAGET_0_DMAGET_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMAGET_0_DMAGET_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMAGET_0_DMAGET_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// The boundary of illegal addresses (either end of pushbuffer or end of physical memory).  
// This is designed to prevent DMA from prefetching illegal addresses.  If DMA reaches 
// this address before seeing a RESTART, it will stop. This would be a software error condition.

// Register HOST1X_CHANNEL_DMAEND_0  
#define HOST1X_CHANNEL_DMAEND_0                 _MK_ADDR_CONST(0x20)
#define HOST1X_CHANNEL_DMAEND_0_WORD_COUNT                      0x1
#define HOST1X_CHANNEL_DMAEND_0_RESET_VAL                       _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMAEND_0_RESET_MASK                      _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMAEND_0_SW_DEFAULT_VAL                  _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMAEND_0_SW_DEFAULT_MASK                         _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMAEND_0_READ_MASK                       _MK_MASK_CONST(0xfffffffc)
#define HOST1X_CHANNEL_DMAEND_0_WRITE_MASK                      _MK_MASK_CONST(0xfffffffc)
// cmdbuf FB offset
#define HOST1X_CHANNEL_DMAEND_0_DMAEND_SHIFT                    _MK_SHIFT_CONST(2)
#define HOST1X_CHANNEL_DMAEND_0_DMAEND_FIELD                    (_MK_MASK_CONST(0x3fffffff) << HOST1X_CHANNEL_DMAEND_0_DMAEND_SHIFT)
#define HOST1X_CHANNEL_DMAEND_0_DMAEND_RANGE                    31:2
#define HOST1X_CHANNEL_DMAEND_0_DMAEND_WOFFSET                  0x0
#define HOST1X_CHANNEL_DMAEND_0_DMAEND_DEFAULT                  _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMAEND_0_DMAEND_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMAEND_0_DMAEND_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMAEND_0_DMAEND_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// DMA control register

// Register HOST1X_CHANNEL_DMACTRL_0  
#define HOST1X_CHANNEL_DMACTRL_0                        _MK_ADDR_CONST(0x24)
#define HOST1X_CHANNEL_DMACTRL_0_WORD_COUNT                     0x1
#define HOST1X_CHANNEL_DMACTRL_0_RESET_VAL                      _MK_MASK_CONST(0x1)
#define HOST1X_CHANNEL_DMACTRL_0_RESET_MASK                     _MK_MASK_CONST(0x7)
#define HOST1X_CHANNEL_DMACTRL_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMACTRL_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMACTRL_0_READ_MASK                      _MK_MASK_CONST(0x7)
#define HOST1X_CHANNEL_DMACTRL_0_WRITE_MASK                     _MK_MASK_CONST(0x7)
// Stop DMA from fetching on this channel. NOTE: a Command DMA channel needs to be enabled for PIO-gather to work!!
#define HOST1X_CHANNEL_DMACTRL_0_DMASTOP_SHIFT                  _MK_SHIFT_CONST(0)
#define HOST1X_CHANNEL_DMACTRL_0_DMASTOP_FIELD                  (_MK_MASK_CONST(0x1) << HOST1X_CHANNEL_DMACTRL_0_DMASTOP_SHIFT)
#define HOST1X_CHANNEL_DMACTRL_0_DMASTOP_RANGE                  0:0
#define HOST1X_CHANNEL_DMACTRL_0_DMASTOP_WOFFSET                        0x0
#define HOST1X_CHANNEL_DMACTRL_0_DMASTOP_DEFAULT                        _MK_MASK_CONST(0x1)
#define HOST1X_CHANNEL_DMACTRL_0_DMASTOP_DEFAULT_MASK                   _MK_MASK_CONST(0x1)
#define HOST1X_CHANNEL_DMACTRL_0_DMASTOP_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMACTRL_0_DMASTOP_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMACTRL_0_DMASTOP_RUN                    _MK_ENUM_CONST(0)
#define HOST1X_CHANNEL_DMACTRL_0_DMASTOP_STOP                   _MK_ENUM_CONST(1)

// Reset GET pointer to '0'.  Useful for cleaning up crashed channels.
#define HOST1X_CHANNEL_DMACTRL_0_DMAGETRST_SHIFT                        _MK_SHIFT_CONST(1)
#define HOST1X_CHANNEL_DMACTRL_0_DMAGETRST_FIELD                        (_MK_MASK_CONST(0x1) << HOST1X_CHANNEL_DMACTRL_0_DMAGETRST_SHIFT)
#define HOST1X_CHANNEL_DMACTRL_0_DMAGETRST_RANGE                        1:1
#define HOST1X_CHANNEL_DMACTRL_0_DMAGETRST_WOFFSET                      0x0
#define HOST1X_CHANNEL_DMACTRL_0_DMAGETRST_DEFAULT                      _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMACTRL_0_DMAGETRST_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define HOST1X_CHANNEL_DMACTRL_0_DMAGETRST_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMACTRL_0_DMAGETRST_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMACTRL_0_DMAGETRST_DISABLE                      _MK_ENUM_CONST(0)
#define HOST1X_CHANNEL_DMACTRL_0_DMAGETRST_ENABLE                       _MK_ENUM_CONST(1)

// Reset GET pointer to the value of DMAPUT when DMAGETRST is asserted.
#define HOST1X_CHANNEL_DMACTRL_0_DMAINITGET_SHIFT                       _MK_SHIFT_CONST(2)
#define HOST1X_CHANNEL_DMACTRL_0_DMAINITGET_FIELD                       (_MK_MASK_CONST(0x1) << HOST1X_CHANNEL_DMACTRL_0_DMAINITGET_SHIFT)
#define HOST1X_CHANNEL_DMACTRL_0_DMAINITGET_RANGE                       2:2
#define HOST1X_CHANNEL_DMACTRL_0_DMAINITGET_WOFFSET                     0x0
#define HOST1X_CHANNEL_DMACTRL_0_DMAINITGET_DEFAULT                     _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMACTRL_0_DMAINITGET_DEFAULT_MASK                        _MK_MASK_CONST(0x1)
#define HOST1X_CHANNEL_DMACTRL_0_DMAINITGET_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMACTRL_0_DMAINITGET_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_DMACTRL_0_DMAINITGET_DISABLE                     _MK_ENUM_CONST(0)
#define HOST1X_CHANNEL_DMACTRL_0_DMAINITGET_ENABLE                      _MK_ENUM_CONST(1)

// Framebuffer buffered region base
// Holds the start address of this channel's buffered region.  Any writes to
// HOST1X_CHANNEL_FBBUF_REGION will write into memory relative to this address.
// For example, if this register is set to 0x1000, a write to 
// (HOST1X_CHANNEL_FBBUF_REGION_BASE + 0x800) will produce a memory write to
// 0x1800.  Writes to this region will be buffered up to 128 bits before being
// sent to the memory controller.

// Register HOST1X_CHANNEL_FBBUFBASE_0  
#define HOST1X_CHANNEL_FBBUFBASE_0                      _MK_ADDR_CONST(0x28)
#define HOST1X_CHANNEL_FBBUFBASE_0_WORD_COUNT                   0x1
#define HOST1X_CHANNEL_FBBUFBASE_0_RESET_VAL                    _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FBBUFBASE_0_RESET_MASK                   _MK_MASK_CONST(0xfffffffc)
#define HOST1X_CHANNEL_FBBUFBASE_0_SW_DEFAULT_VAL                       _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FBBUFBASE_0_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FBBUFBASE_0_READ_MASK                    _MK_MASK_CONST(0xfffffffc)
#define HOST1X_CHANNEL_FBBUFBASE_0_WRITE_MASK                   _MK_MASK_CONST(0xfffffffc)
#define HOST1X_CHANNEL_FBBUFBASE_0_FBBUFBASE_SHIFT                      _MK_SHIFT_CONST(2)
#define HOST1X_CHANNEL_FBBUFBASE_0_FBBUFBASE_FIELD                      (_MK_MASK_CONST(0x3fffffff) << HOST1X_CHANNEL_FBBUFBASE_0_FBBUFBASE_SHIFT)
#define HOST1X_CHANNEL_FBBUFBASE_0_FBBUFBASE_RANGE                      31:2
#define HOST1X_CHANNEL_FBBUFBASE_0_FBBUFBASE_WOFFSET                    0x0
#define HOST1X_CHANNEL_FBBUFBASE_0_FBBUFBASE_DEFAULT                    _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FBBUFBASE_0_FBBUFBASE_DEFAULT_MASK                       _MK_MASK_CONST(0x3fffffff)
#define HOST1X_CHANNEL_FBBUFBASE_0_FBBUFBASE_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_FBBUFBASE_0_FBBUFBASE_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// Command swap control.  Affects swapping on writes to the PIO region and the
// framebuffer buffered memory write region.

// Register HOST1X_CHANNEL_CMDSWAP_0  
#define HOST1X_CHANNEL_CMDSWAP_0                        _MK_ADDR_CONST(0x2c)
#define HOST1X_CHANNEL_CMDSWAP_0_WORD_COUNT                     0x1
#define HOST1X_CHANNEL_CMDSWAP_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_CMDSWAP_0_RESET_MASK                     _MK_MASK_CONST(0x3)
#define HOST1X_CHANNEL_CMDSWAP_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_CMDSWAP_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_CMDSWAP_0_READ_MASK                      _MK_MASK_CONST(0x3)
#define HOST1X_CHANNEL_CMDSWAP_0_WRITE_MASK                     _MK_MASK_CONST(0x3)
// Indirect framebuffer access swap control. 00 = No byte swap
// 01 = 16-bit byte swap ([31:0] -> {[23:16],[31:24],[7:0],[15:8]})
// 10 = 32-bit byte swap ([31:0] -> {[7:0],[15:8],[23:16],[31:24]})
// 11 = 32-bit word swap ([31:0] -> {[15:8],[7:0],[31:24],[23:16]})
#define HOST1X_CHANNEL_CMDSWAP_0_CMDSWAP_SHIFT                  _MK_SHIFT_CONST(0)
#define HOST1X_CHANNEL_CMDSWAP_0_CMDSWAP_FIELD                  (_MK_MASK_CONST(0x3) << HOST1X_CHANNEL_CMDSWAP_0_CMDSWAP_SHIFT)
#define HOST1X_CHANNEL_CMDSWAP_0_CMDSWAP_RANGE                  1:0
#define HOST1X_CHANNEL_CMDSWAP_0_CMDSWAP_WOFFSET                        0x0
#define HOST1X_CHANNEL_CMDSWAP_0_CMDSWAP_DEFAULT                        _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_CMDSWAP_0_CMDSWAP_DEFAULT_MASK                   _MK_MASK_CONST(0x3)
#define HOST1X_CHANNEL_CMDSWAP_0_CMDSWAP_SW_DEFAULT                     _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_CMDSWAP_0_CMDSWAP_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_CMDSWAP_0_CMDSWAP_NONE                   _MK_ENUM_CONST(0)
#define HOST1X_CHANNEL_CMDSWAP_0_CMDSWAP_BYTE16                 _MK_ENUM_CONST(1)
#define HOST1X_CHANNEL_CMDSWAP_0_CMDSWAP_BYTE32                 _MK_ENUM_CONST(2)
#define HOST1X_CHANNEL_CMDSWAP_0_CMDSWAP_WORD32                 _MK_ENUM_CONST(3)

// Reserve space for future expansion.  If any new registers are added to this
// spec file, decrement the reserved number.

// Reserved address 48 [0x30] 

// Reserved address 52 [0x34] 

// Reserved address 56 [0x38] 

// Reserved address 60 [0x3c] 

// Reserved address 64 [0x40] 

// Reserved address 68 [0x44] 

// Reserved address 72 [0x48] 

// Reserved address 76 [0x4c] 

// Reserved address 80 [0x50] 

// Reserved address 84 [0x54] 

// Reserved address 88 [0x58] 

// Reserved address 92 [0x5c] 

// Reserved address 96 [0x60] 

// Reserved address 100 [0x64] 

// Reserved address 104 [0x68] 

// Reserved address 108 [0x6c] 

// Reserved address 112 [0x70] 

// Reserved address 116 [0x74] 

// Reserved address 120 [0x78] 

// Reserved address 124 [0x7c] 

// Reserved address 128 [0x80] 

// Reserved address 132 [0x84] 

// Reserved address 136 [0x88] 
// This spec file contains additions to the "common" registers that cannot be
// put in the common section, otherwise all of the other registers will shift
// --------------------------------------------------------------------------
// 
// Copyright (c) 2004, NVIDIA Corp.
// All Rights Reserved.
// 
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of NVIDIA Corp.;
// the contents of this file may not be disclosed to third parties, copied or
// duplicated in any form, in whole or in part, without the prior written
// permission of NVIDIA Corp.
// 
// RESTRICTED RIGHTS LEGEND:
// Use, duplication or disclosure by the Government is subject to restrictions
// as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
// and Computer Software clause at DFARS 252.227-7013, and/or in similar or
// successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
// rights reserved under the Copyright Laws of the United States.
// 
// --------------------------------------------------------------------------
// 
// The INDOFF and INDOFF2 registers (along with INDCNT and INDDATA) are used to
// indirectly read/write modules outside the host. If AUTOINC is set, INDOFFSET
// increments by 4 on every access of INDDATA.  REGFNUMEMPTY is polled to
// determine when valid data can be read from INDDATA.
//
// The INDOFF register has limited capability on chips with large memory maps.
// If the top bit of the memory address is >= 27, all of memory cannot be
// addressed with INDOFF.  In these cases, use INDOFF2 to set the offset while
// still using INDOFF to set the other parameters.  Always have INDOFFUPD set
// to NO_UPDATE in these cases.  For register accesses, using INDOFF (with
// INDOFFUPD set to UPDATE) is always more efficient, since it only requires
// one write.
//
// Indirect framebuffer write is STRONGLY DISCOURAGED.  There are better ways
// to write to memory (direct and through the channel memory map) and there is
// limited flow control in the host.  It's very easy to get into trouble with
// indirect framebuffer write.

// Register HOST1X_CHANNEL_INDOFF2_0  
#define HOST1X_CHANNEL_INDOFF2_0                        _MK_ADDR_CONST(0x8c)
#define HOST1X_CHANNEL_INDOFF2_0_WORD_COUNT                     0x1
#define HOST1X_CHANNEL_INDOFF2_0_RESET_VAL                      _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF2_0_RESET_MASK                     _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF2_0_SW_DEFAULT_VAL                         _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF2_0_SW_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF2_0_READ_MASK                      _MK_MASK_CONST(0xfffffffc)
#define HOST1X_CHANNEL_INDOFF2_0_WRITE_MASK                     _MK_MASK_CONST(0xfffffffc)
// ACCTYPE=FB: framebuffer address
#define HOST1X_CHANNEL_INDOFF2_0_INDOFFSET2_SHIFT                       _MK_SHIFT_CONST(2)
#define HOST1X_CHANNEL_INDOFF2_0_INDOFFSET2_FIELD                       (_MK_MASK_CONST(0x3fffffff) << HOST1X_CHANNEL_INDOFF2_0_INDOFFSET2_SHIFT)
#define HOST1X_CHANNEL_INDOFF2_0_INDOFFSET2_RANGE                       31:2
#define HOST1X_CHANNEL_INDOFF2_0_INDOFFSET2_WOFFSET                     0x0
#define HOST1X_CHANNEL_INDOFF2_0_INDOFFSET2_DEFAULT                     _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF2_0_INDOFFSET2_DEFAULT_MASK                        _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF2_0_INDOFFSET2_SW_DEFAULT                  _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF2_0_INDOFFSET2_SW_DEFAULT_MASK                     _MK_MASK_CONST(0x0)

// ACCTYPE=REG: register module ID
#define HOST1X_CHANNEL_INDOFF2_0_INDMODID2_SHIFT                        _MK_SHIFT_CONST(18)
#define HOST1X_CHANNEL_INDOFF2_0_INDMODID2_FIELD                        (_MK_MASK_CONST(0xff) << HOST1X_CHANNEL_INDOFF2_0_INDMODID2_SHIFT)
#define HOST1X_CHANNEL_INDOFF2_0_INDMODID2_RANGE                        25:18
#define HOST1X_CHANNEL_INDOFF2_0_INDMODID2_WOFFSET                      0x0
#define HOST1X_CHANNEL_INDOFF2_0_INDMODID2_DEFAULT                      _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF2_0_INDMODID2_DEFAULT_MASK                 _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF2_0_INDMODID2_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF2_0_INDMODID2_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF2_0_INDMODID2_HOST1X                       _MK_ENUM_CONST(0)
#define HOST1X_CHANNEL_INDOFF2_0_INDMODID2_MPE                  _MK_ENUM_CONST(1)
#define HOST1X_CHANNEL_INDOFF2_0_INDMODID2_VI                   _MK_ENUM_CONST(2)
#define HOST1X_CHANNEL_INDOFF2_0_INDMODID2_EPP                  _MK_ENUM_CONST(3)
#define HOST1X_CHANNEL_INDOFF2_0_INDMODID2_ISP                  _MK_ENUM_CONST(4)
#define HOST1X_CHANNEL_INDOFF2_0_INDMODID2_GR2D                 _MK_ENUM_CONST(5)
#define HOST1X_CHANNEL_INDOFF2_0_INDMODID2_GR3D                 _MK_ENUM_CONST(6)
#define HOST1X_CHANNEL_INDOFF2_0_INDMODID2_DISPLAY                      _MK_ENUM_CONST(8)
#define HOST1X_CHANNEL_INDOFF2_0_INDMODID2_TVO                  _MK_ENUM_CONST(11)
#define HOST1X_CHANNEL_INDOFF2_0_INDMODID2_DISPLAYB                     _MK_ENUM_CONST(9)
#define HOST1X_CHANNEL_INDOFF2_0_INDMODID2_DSI                  _MK_ENUM_CONST(12)
#define HOST1X_CHANNEL_INDOFF2_0_INDMODID2_HDMI                 _MK_ENUM_CONST(10)

// ACCTYPE=REG: register offset ([15:0])
#define HOST1X_CHANNEL_INDOFF2_0_INDROFFSET2_SHIFT                      _MK_SHIFT_CONST(2)
#define HOST1X_CHANNEL_INDOFF2_0_INDROFFSET2_FIELD                      (_MK_MASK_CONST(0xffff) << HOST1X_CHANNEL_INDOFF2_0_INDROFFSET2_SHIFT)
#define HOST1X_CHANNEL_INDOFF2_0_INDROFFSET2_RANGE                      17:2
#define HOST1X_CHANNEL_INDOFF2_0_INDROFFSET2_WOFFSET                    0x0
#define HOST1X_CHANNEL_INDOFF2_0_INDROFFSET2_DEFAULT                    _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF2_0_INDROFFSET2_DEFAULT_MASK                       _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF2_0_INDROFFSET2_SW_DEFAULT                 _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_INDOFF2_0_INDROFFSET2_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)

// This register holds the high 32 bits of tick count value

// Register HOST1X_CHANNEL_TICKCOUNT_HI_0  
#define HOST1X_CHANNEL_TICKCOUNT_HI_0                   _MK_ADDR_CONST(0x90)
#define HOST1X_CHANNEL_TICKCOUNT_HI_0_WORD_COUNT                        0x1
#define HOST1X_CHANNEL_TICKCOUNT_HI_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_TICKCOUNT_HI_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_TICKCOUNT_HI_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_TICKCOUNT_HI_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_TICKCOUNT_HI_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define HOST1X_CHANNEL_TICKCOUNT_HI_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
#define HOST1X_CHANNEL_TICKCOUNT_HI_0_TICKS_HI_SHIFT                    _MK_SHIFT_CONST(0)
#define HOST1X_CHANNEL_TICKCOUNT_HI_0_TICKS_HI_FIELD                    (_MK_MASK_CONST(0xffffffff) << HOST1X_CHANNEL_TICKCOUNT_HI_0_TICKS_HI_SHIFT)
#define HOST1X_CHANNEL_TICKCOUNT_HI_0_TICKS_HI_RANGE                    31:0
#define HOST1X_CHANNEL_TICKCOUNT_HI_0_TICKS_HI_WOFFSET                  0x0
#define HOST1X_CHANNEL_TICKCOUNT_HI_0_TICKS_HI_DEFAULT                  _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_TICKCOUNT_HI_0_TICKS_HI_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_TICKCOUNT_HI_0_TICKS_HI_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_TICKCOUNT_HI_0_TICKS_HI_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// This register holds the low 32 bits of tick count value

// Register HOST1X_CHANNEL_TICKCOUNT_LO_0  
#define HOST1X_CHANNEL_TICKCOUNT_LO_0                   _MK_ADDR_CONST(0x94)
#define HOST1X_CHANNEL_TICKCOUNT_LO_0_WORD_COUNT                        0x1
#define HOST1X_CHANNEL_TICKCOUNT_LO_0_RESET_VAL                         _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_TICKCOUNT_LO_0_RESET_MASK                        _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_TICKCOUNT_LO_0_SW_DEFAULT_VAL                    _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_TICKCOUNT_LO_0_SW_DEFAULT_MASK                   _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_TICKCOUNT_LO_0_READ_MASK                         _MK_MASK_CONST(0xffffffff)
#define HOST1X_CHANNEL_TICKCOUNT_LO_0_WRITE_MASK                        _MK_MASK_CONST(0xffffffff)
#define HOST1X_CHANNEL_TICKCOUNT_LO_0_TICKS_LO_SHIFT                    _MK_SHIFT_CONST(0)
#define HOST1X_CHANNEL_TICKCOUNT_LO_0_TICKS_LO_FIELD                    (_MK_MASK_CONST(0xffffffff) << HOST1X_CHANNEL_TICKCOUNT_LO_0_TICKS_LO_SHIFT)
#define HOST1X_CHANNEL_TICKCOUNT_LO_0_TICKS_LO_RANGE                    31:0
#define HOST1X_CHANNEL_TICKCOUNT_LO_0_TICKS_LO_WOFFSET                  0x0
#define HOST1X_CHANNEL_TICKCOUNT_LO_0_TICKS_LO_DEFAULT                  _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_TICKCOUNT_LO_0_TICKS_LO_DEFAULT_MASK                     _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_TICKCOUNT_LO_0_TICKS_LO_SW_DEFAULT                       _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_TICKCOUNT_LO_0_TICKS_LO_SW_DEFAULT_MASK                  _MK_MASK_CONST(0x0)

// This register will be used for controlling some channel related commands
// including enabling/disabling of tick counter

// Register HOST1X_CHANNEL_CHANNELCTRL_0  
#define HOST1X_CHANNEL_CHANNELCTRL_0                    _MK_ADDR_CONST(0x98)
#define HOST1X_CHANNEL_CHANNELCTRL_0_WORD_COUNT                         0x1
#define HOST1X_CHANNEL_CHANNELCTRL_0_RESET_VAL                  _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_CHANNELCTRL_0_RESET_MASK                         _MK_MASK_CONST(0x1)
#define HOST1X_CHANNEL_CHANNELCTRL_0_SW_DEFAULT_VAL                     _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_CHANNELCTRL_0_SW_DEFAULT_MASK                    _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_CHANNELCTRL_0_READ_MASK                  _MK_MASK_CONST(0x1)
#define HOST1X_CHANNEL_CHANNELCTRL_0_WRITE_MASK                         _MK_MASK_CONST(0x1)
// enable or disable tick counter
#define HOST1X_CHANNEL_CHANNELCTRL_0_ENABLETICKCNT_SHIFT                        _MK_SHIFT_CONST(0)
#define HOST1X_CHANNEL_CHANNELCTRL_0_ENABLETICKCNT_FIELD                        (_MK_MASK_CONST(0x1) << HOST1X_CHANNEL_CHANNELCTRL_0_ENABLETICKCNT_SHIFT)
#define HOST1X_CHANNEL_CHANNELCTRL_0_ENABLETICKCNT_RANGE                        0:0
#define HOST1X_CHANNEL_CHANNELCTRL_0_ENABLETICKCNT_WOFFSET                      0x0
#define HOST1X_CHANNEL_CHANNELCTRL_0_ENABLETICKCNT_DEFAULT                      _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_CHANNELCTRL_0_ENABLETICKCNT_DEFAULT_MASK                 _MK_MASK_CONST(0x1)
#define HOST1X_CHANNEL_CHANNELCTRL_0_ENABLETICKCNT_SW_DEFAULT                   _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_CHANNELCTRL_0_ENABLETICKCNT_SW_DEFAULT_MASK                      _MK_MASK_CONST(0x0)
#define HOST1X_CHANNEL_CHANNELCTRL_0_ENABLETICKCNT_INIT_ENUM                    DISABLE
#define HOST1X_CHANNEL_CHANNELCTRL_0_ENABLETICKCNT_DISABLE                      _MK_ENUM_CONST(0)
#define HOST1X_CHANNEL_CHANNELCTRL_0_ENABLETICKCNT_ENABLE                       _MK_ENUM_CONST(1)


//
// REGISTER LIST
//
#define LIST_ARHOST1X_CHANNEL_REGS(_op_) \
_op_(HOST1X_CHANNEL_FIFOSTAT_0) \
_op_(HOST1X_CHANNEL_INDOFF_0) \
_op_(HOST1X_CHANNEL_INDCNT_0) \
_op_(HOST1X_CHANNEL_INDDATA_0) \
_op_(HOST1X_CHANNEL_RAISE_0) \
_op_(HOST1X_CHANNEL_DMASTART_0) \
_op_(HOST1X_CHANNEL_DMAPUT_0) \
_op_(HOST1X_CHANNEL_DMAGET_0) \
_op_(HOST1X_CHANNEL_DMAEND_0) \
_op_(HOST1X_CHANNEL_DMACTRL_0) \
_op_(HOST1X_CHANNEL_FBBUFBASE_0) \
_op_(HOST1X_CHANNEL_CMDSWAP_0) \
_op_(HOST1X_CHANNEL_INDOFF2_0) \
_op_(HOST1X_CHANNEL_TICKCOUNT_HI_0) \
_op_(HOST1X_CHANNEL_TICKCOUNT_LO_0) \
_op_(HOST1X_CHANNEL_CHANNELCTRL_0)


//
// ADDRESS SPACES
//

#define BASE_ADDRESS_HOST1X_CHANNEL     0x00000000

//
// ARHOST1X_CHANNEL REGISTER BANKS
//

#define HOST1X_CHANNEL0_FIRST_REG 0x0000 // HOST1X_CHANNEL_FIFOSTAT_0
#define HOST1X_CHANNEL0_LAST_REG 0x002c // HOST1X_CHANNEL_CMDSWAP_0
#define HOST1X_CHANNEL1_FIRST_REG 0x008c // HOST1X_CHANNEL_INDOFF2_0
#define HOST1X_CHANNEL1_LAST_REG 0x0098 // HOST1X_CHANNEL_CHANNELCTRL_0

#ifndef _MK_SHIFT_CONST
  #define _MK_SHIFT_CONST(_constant_) _constant_
#endif
#ifndef _MK_MASK_CONST
  #define _MK_MASK_CONST(_constant_) _constant_
#endif
#ifndef _MK_ENUM_CONST
  #define _MK_ENUM_CONST(_constant_) (_constant_ ## UL)
#endif
#ifndef _MK_ADDR_CONST
  #define _MK_ADDR_CONST(_constant_) _constant_
#endif

#endif // ifndef ___ARHOST1X_CHANNEL_H_INC_
